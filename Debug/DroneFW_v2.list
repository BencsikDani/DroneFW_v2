
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  080138d8  080138d8  000238d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b8  080141b8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080141b8  080141b8  000241b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141c0  080141c0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141c0  080141c0  000241c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141c4  080141c4  000241c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080141c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004878  200001f0  080143b8  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a68  080143b8  00034a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a48  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005621  00000000  00000000  00057cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  0005d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f3  00000000  00000000  0005ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d47  00000000  00000000  00060543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000287fb  00000000  00000000  0008a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed378  00000000  00000000  000b2a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c34  00000000  00000000  0019fe00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a8a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080138c0 	.word	0x080138c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080138c0 	.word	0x080138c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9bb 	b.w	8001030 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b970 	b.w	8001030 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9e08      	ldr	r6, [sp, #32]
 8000d6e:	460d      	mov	r5, r1
 8000d70:	4604      	mov	r4, r0
 8000d72:	460f      	mov	r7, r1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d14a      	bne.n	8000e0e <__udivmoddi4+0xa6>
 8000d78:	428a      	cmp	r2, r1
 8000d7a:	4694      	mov	ip, r2
 8000d7c:	d965      	bls.n	8000e4a <__udivmoddi4+0xe2>
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	b143      	cbz	r3, 8000d96 <__udivmoddi4+0x2e>
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	f1c3 0220 	rsb	r2, r3, #32
 8000d8c:	409f      	lsls	r7, r3
 8000d8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d92:	4317      	orrs	r7, r2
 8000d94:	409c      	lsls	r4, r3
 8000d96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d9a:	fa1f f58c 	uxth.w	r5, ip
 8000d9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000da2:	0c22      	lsrs	r2, r4, #16
 8000da4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dac:	fb01 f005 	mul.w	r0, r1, r5
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x62>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dbc:	f080 811c 	bcs.w	8000ff8 <__udivmoddi4+0x290>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f240 8119 	bls.w	8000ff8 <__udivmoddi4+0x290>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	4462      	add	r2, ip
 8000dca:	1a12      	subs	r2, r2, r0
 8000dcc:	b2a4      	uxth	r4, r4
 8000dce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dda:	fb00 f505 	mul.w	r5, r0, r5
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x90>
 8000de2:	eb1c 0404 	adds.w	r4, ip, r4
 8000de6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dea:	f080 8107 	bcs.w	8000ffc <__udivmoddi4+0x294>
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	f240 8104 	bls.w	8000ffc <__udivmoddi4+0x294>
 8000df4:	4464      	add	r4, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11e      	cbz	r6, 8000e0a <__udivmoddi4+0xa2>
 8000e02:	40dc      	lsrs	r4, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	e9c6 4300 	strd	r4, r3, [r6]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0xbc>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	f000 80ed 	beq.w	8000ff2 <__udivmoddi4+0x28a>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	fab3 f183 	clz	r1, r3
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d149      	bne.n	8000ec0 <__udivmoddi4+0x158>
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	d302      	bcc.n	8000e36 <__udivmoddi4+0xce>
 8000e30:	4282      	cmp	r2, r0
 8000e32:	f200 80f8 	bhi.w	8001026 <__udivmoddi4+0x2be>
 8000e36:	1a84      	subs	r4, r0, r2
 8000e38:	eb65 0203 	sbc.w	r2, r5, r3
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4617      	mov	r7, r2
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d0e2      	beq.n	8000e0a <__udivmoddi4+0xa2>
 8000e44:	e9c6 4700 	strd	r4, r7, [r6]
 8000e48:	e7df      	b.n	8000e0a <__udivmoddi4+0xa2>
 8000e4a:	b902      	cbnz	r2, 8000e4e <__udivmoddi4+0xe6>
 8000e4c:	deff      	udf	#255	; 0xff
 8000e4e:	fab2 f382 	clz	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x210>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5e:	fa1f fe8c 	uxth.w	lr, ip
 8000e62:	2101      	movs	r1, #1
 8000e64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e68:	fb07 2015 	mls	r0, r7, r5, r2
 8000e6c:	0c22      	lsrs	r2, r4, #16
 8000e6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e72:	fb0e f005 	mul.w	r0, lr, r5
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x124>
 8000e7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x122>
 8000e84:	4290      	cmp	r0, r2
 8000e86:	f200 80cb 	bhi.w	8001020 <__udivmoddi4+0x2b8>
 8000e8a:	4645      	mov	r5, r8
 8000e8c:	1a12      	subs	r2, r2, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e94:	fb07 2210 	mls	r2, r7, r0, r2
 8000e98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea0:	45a6      	cmp	lr, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x14e>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eac:	d202      	bcs.n	8000eb4 <__udivmoddi4+0x14c>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f200 80bb 	bhi.w	800102a <__udivmoddi4+0x2c2>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ebe:	e79f      	b.n	8000e00 <__udivmoddi4+0x98>
 8000ec0:	f1c1 0720 	rsb	r7, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ece:	fa05 f401 	lsl.w	r4, r5, r1
 8000ed2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed6:	40fd      	lsrs	r5, r7
 8000ed8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef4:	42a5      	cmp	r5, r4
 8000ef6:	fa02 f201 	lsl.w	r2, r2, r1
 8000efa:	fa00 f001 	lsl.w	r0, r0, r1
 8000efe:	d90b      	bls.n	8000f18 <__udivmoddi4+0x1b0>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f08:	f080 8088 	bcs.w	800101c <__udivmoddi4+0x2b4>
 8000f0c:	42a5      	cmp	r5, r4
 8000f0e:	f240 8085 	bls.w	800101c <__udivmoddi4+0x2b4>
 8000f12:	f1a8 0802 	sub.w	r8, r8, #2
 8000f16:	4464      	add	r4, ip
 8000f18:	1b64      	subs	r4, r4, r5
 8000f1a:	b29d      	uxth	r5, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1da>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f38:	d26c      	bcs.n	8001014 <__udivmoddi4+0x2ac>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	d96a      	bls.n	8001014 <__udivmoddi4+0x2ac>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	4464      	add	r4, ip
 8000f42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f46:	fba3 9502 	umull	r9, r5, r3, r2
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	42ac      	cmp	r4, r5
 8000f50:	46c8      	mov	r8, r9
 8000f52:	46ae      	mov	lr, r5
 8000f54:	d356      	bcc.n	8001004 <__udivmoddi4+0x29c>
 8000f56:	d053      	beq.n	8001000 <__udivmoddi4+0x298>
 8000f58:	b156      	cbz	r6, 8000f70 <__udivmoddi4+0x208>
 8000f5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f62:	fa04 f707 	lsl.w	r7, r4, r7
 8000f66:	40ca      	lsrs	r2, r1
 8000f68:	40cc      	lsrs	r4, r1
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f78:	f1c3 0120 	rsb	r1, r3, #32
 8000f7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f80:	fa20 f201 	lsr.w	r2, r0, r1
 8000f84:	fa25 f101 	lsr.w	r1, r5, r1
 8000f88:	409d      	lsls	r5, r3
 8000f8a:	432a      	orrs	r2, r5
 8000f8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f90:	fa1f fe8c 	uxth.w	lr, ip
 8000f94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f98:	fb07 1510 	mls	r5, r7, r0, r1
 8000f9c:	0c11      	lsrs	r1, r2, #16
 8000f9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fa2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa6:	428d      	cmp	r5, r1
 8000fa8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x258>
 8000fae:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb6:	d22f      	bcs.n	8001018 <__udivmoddi4+0x2b0>
 8000fb8:	428d      	cmp	r5, r1
 8000fba:	d92d      	bls.n	8001018 <__udivmoddi4+0x2b0>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4461      	add	r1, ip
 8000fc0:	1b49      	subs	r1, r1, r5
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd4:	4291      	cmp	r1, r2
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x282>
 8000fd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fdc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fe0:	d216      	bcs.n	8001010 <__udivmoddi4+0x2a8>
 8000fe2:	4291      	cmp	r1, r2
 8000fe4:	d914      	bls.n	8001010 <__udivmoddi4+0x2a8>
 8000fe6:	3d02      	subs	r5, #2
 8000fe8:	4462      	add	r2, ip
 8000fea:	1a52      	subs	r2, r2, r1
 8000fec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ff0:	e738      	b.n	8000e64 <__udivmoddi4+0xfc>
 8000ff2:	4631      	mov	r1, r6
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e708      	b.n	8000e0a <__udivmoddi4+0xa2>
 8000ff8:	4639      	mov	r1, r7
 8000ffa:	e6e6      	b.n	8000dca <__udivmoddi4+0x62>
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	e6fb      	b.n	8000df8 <__udivmoddi4+0x90>
 8001000:	4548      	cmp	r0, r9
 8001002:	d2a9      	bcs.n	8000f58 <__udivmoddi4+0x1f0>
 8001004:	ebb9 0802 	subs.w	r8, r9, r2
 8001008:	eb65 0e0c 	sbc.w	lr, r5, ip
 800100c:	3b01      	subs	r3, #1
 800100e:	e7a3      	b.n	8000f58 <__udivmoddi4+0x1f0>
 8001010:	4645      	mov	r5, r8
 8001012:	e7ea      	b.n	8000fea <__udivmoddi4+0x282>
 8001014:	462b      	mov	r3, r5
 8001016:	e794      	b.n	8000f42 <__udivmoddi4+0x1da>
 8001018:	4640      	mov	r0, r8
 800101a:	e7d1      	b.n	8000fc0 <__udivmoddi4+0x258>
 800101c:	46d0      	mov	r8, sl
 800101e:	e77b      	b.n	8000f18 <__udivmoddi4+0x1b0>
 8001020:	3d02      	subs	r5, #2
 8001022:	4462      	add	r2, ip
 8001024:	e732      	b.n	8000e8c <__udivmoddi4+0x124>
 8001026:	4608      	mov	r0, r1
 8001028:	e70a      	b.n	8000e40 <__udivmoddi4+0xd8>
 800102a:	4464      	add	r4, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e742      	b.n	8000eb6 <__udivmoddi4+0x14e>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <PIDController_Init>:
#include "Controller/PID.h"

void PIDController_Init(PIDController *pid)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]

	// Clear controller variables
	pid->prevError  = 0.0f;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->integrator = 0.0f;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator  = 0.0f;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clear output
	pid->out = 0.0f;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a03 	vldr	s15, [r3, #12]
 800106a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->alpha = (pid->T) / (pid->T + pid->tau);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edd3 6a03 	vldr	s13, [r3, #12]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a03 	vldr	s14, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edd3 7a04 	vldr	s15, [r3, #16]
 800108a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80010b0:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal based on Anti-windup
	float error;
	if (pid->antiWindup)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <PIDController_Update+0x22>
		error = 0;
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	e007      	b.n	80010d6 <PIDController_Update+0x32>
	else
		error = setpoint - measurement;
 80010c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d2:	edc7 7a07 	vstr	s15, [r7, #28]

	// Proportional
    float proportional = pid->Kp * error;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Integral
    pid->integrator = pid->integrator + pid->Ki * (pid->T / 2) * (error + pid->prevError);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	ed93 6a03 	vldr	s12, [r3, #12]
 80010fa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80010fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001102:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Derivative with low-pass filter
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800112c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	ed93 6a02 	vldr	s12, [r3, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800114c:	edd7 5a07 	vldr	s11, [r7, #28]
 8001150:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001154:	ee66 5a27 	vmul.f32	s11, s12, s15
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	ed93 6a03 	vldr	s12, [r3, #12]
 800115e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    float preSaturationOutput = pid->out;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	617b      	str	r3, [r7, #20]

    // Saturating (clamping) the output
    if (pid->out > pid->limMax)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edd3 7a07 	vldr	s15, [r3, #28]
 80011a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dd04      	ble.n	80011b4 <PIDController_Update+0x110>
        pid->out = pid->limMax;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	69da      	ldr	r2, [r3, #28]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
 80011b2:	e00e      	b.n	80011d2 <PIDController_Update+0x12e>
    else if (pid->out < pid->limMin)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	d503      	bpl.n	80011d2 <PIDController_Update+0x12e>
        pid->out = pid->limMin;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30

    // Anti-wind-up algorithm
    // If clamping was necessary
    if (preSaturationOutput != pid->out)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80011dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d020      	beq.n	8001228 <PIDController_Update+0x184>
    {
    	// And if the integrator is trying to make saturation worse
    	if ((preSaturationOutput > 0 && error > 0)
 80011e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd06      	ble.n	8001202 <PIDController_Update+0x15e>
 80011f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dc0d      	bgt.n	800121e <PIDController_Update+0x17a>
    			|| (preSaturationOutput < 0 && error < 0))
 8001202:	edd7 7a05 	vldr	s15, [r7, #20]
 8001206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d50f      	bpl.n	8001230 <PIDController_Update+0x18c>
 8001210:	edd7 7a07 	vldr	s15, [r7, #28]
 8001214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d508      	bpl.n	8001230 <PIDController_Update+0x18c>
    		pid->antiWindup = true;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
 8001226:	e003      	b.n	8001230 <PIDController_Update+0x18c>
    }
    else
    	pid->antiWindup = false;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]

	/* Store error for later use */
    pid->prevError = error;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

	/* Return controller output */
    return pid->out;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	ee07 3a90 	vmov	s15, r3
}
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	; 0x70
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <Log+0x44>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d014      	beq.n	8001286 <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	490c      	ldr	r1, [pc, #48]	; (8001294 <Log+0x48>)
 8001264:	4618      	mov	r0, r3
 8001266:	f00e fbf1 	bl	800fa4c <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f826 	bl	80002c0 <strlen>
 8001274:	4603      	mov	r3, r0
 8001276:	b29a      	uxth	r2, r3
 8001278:	f107 010c 	add.w	r1, r7, #12
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <Log+0x4c>)
 8001282:	f009 fd7d 	bl	800ad80 <HAL_UART_Transmit>
	}
}
 8001286:	bf00      	nop
 8001288:	3770      	adds	r7, #112	; 0x70
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	080138d8 	.word	0x080138d8
 8001298:	20000a58 	.word	0x20000a58

0800129c <TaskController>:
#include "Controller/PID.h"

extern osMutexId DistMutexHandle;

void TaskController(void const *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b6      	sub	sp, #216	; 0xd8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	// Inner loop controllers
	PIDController PID_Thrust;
	PID_Thrust.Kd = 1;
 80012a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.Ki = 1;
 80012ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PID_Thrust.Kd = 1;
 80012b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.T = 0.01f;
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <TaskController+0x120>)
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	PID_Thrust.limMin = 0;
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	PID_Thrust.limMax = 30;
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <TaskController+0x124>)
 80012cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	PIDController_Init(&PID_Thrust);
 80012d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fead 	bl	8001034 <PIDController_Init>

	PIDController PID_Yaw;
	PID_Yaw.Kd = 0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.Ki = 0;
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	677b      	str	r3, [r7, #116]	; 0x74
	PID_Yaw.Kd = 0;
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.T = 0;
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	PID_Yaw.limMin = 0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PID_Yaw.limMax = 50;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <TaskController+0x128>)
 80012fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	PIDController_Init(&PID_Yaw);
 8001300:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe95 	bl	8001034 <PIDController_Init>

	PIDController PID_Pitch;
	PID_Pitch.Kd = 0;
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.Ki = 0;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
	PID_Pitch.Kd = 0;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.T = 0;
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	64bb      	str	r3, [r7, #72]	; 0x48
	PID_Pitch.limMin = 0;
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	657b      	str	r3, [r7, #84]	; 0x54
	PID_Pitch.limMax = 50;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <TaskController+0x128>)
 800132a:	65bb      	str	r3, [r7, #88]	; 0x58
	PIDController_Init(&PID_Pitch);
 800132c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe7f 	bl	8001034 <PIDController_Init>

	PIDController PID_Roll;
	PID_Roll.Kd = 0;
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
	PID_Roll.Ki = 0;
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
	PID_Roll.Kd = 0;
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
	PID_Roll.T = 0;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
	PID_Roll.limMin = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
	PID_Roll.limMax = 50;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <TaskController+0x128>)
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController_Init(&PID_Roll);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe69 	bl	8001034 <PIDController_Init>

	// Infinite loop
	while (1)
	{

		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <TaskController+0x12c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f04f 31ff 	mov.w	r1, #4294967295
 800136a:	4618      	mov	r0, r3
 800136c:	f00b fa3c 	bl	800c7e8 <osMutexWait>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <TaskController+0x10c>
		{
			PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <TaskController+0x130>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80013d0 <TaskController+0x134>
 8001380:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001388:	eef0 0a47 	vmov.f32	s1, s14
 800138c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80013d4 <TaskController+0x138>
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe87 	bl	80010a4 <PIDController_Update>
			Throttle_controlled = PID_Thrust.out;
 8001396:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800139a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139e:	ee17 3a90 	vmov	r3, s15
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <TaskController+0x13c>)
 80013a6:	801a      	strh	r2, [r3, #0]
		}
		osMutexRelease(DistMutexHandle);
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <TaskController+0x12c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00b fa69 	bl	800c884 <osMutexRelease>


		osDelay(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f00b f9eb 	bl	800c78e <osDelay>
		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80013b8:	e7d3      	b.n	8001362 <TaskController+0xc6>
 80013ba:	bf00      	nop
 80013bc:	3c23d70a 	.word	0x3c23d70a
 80013c0:	41f00000 	.word	0x41f00000
 80013c4:	42480000 	.word	0x42480000
 80013c8:	20000b68 	.word	0x20000b68
 80013cc:	20000358 	.word	0x20000358
 80013d0:	447a0000 	.word	0x447a0000
 80013d4:	3e4ccccd 	.word	0x3e4ccccd
 80013d8:	2000021a 	.word	0x2000021a

080013dc <DisassembleFloatIntoUint8s>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void DisassembleFloatIntoUint8s(float* n, uint8_t* array, int position)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	memcpy(array+position, n, sizeof(float));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	4413      	add	r3, r2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 8001400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001404:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 8001408:	af10      	add	r7, sp, #64	; 0x40
 800140a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800140e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001412:	6018      	str	r0, [r3, #0]
	char UARTstr[512];
	int8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (int8_t)('i');
 8001414:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001418:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800141c:	2269      	movs	r2, #105	; 0x69
 800141e:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001420:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001424:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001428:	2266      	movs	r2, #102	; 0x66
 800142a:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 800142c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001430:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001434:	2267      	movs	r2, #103	; 0x67
 8001436:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	while (1)
	{
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001438:	4bba      	ldr	r3, [pc, #744]	; (8001724 <TaskDiagnostics+0x324>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	4618      	mov	r0, r3
 8001442:	f00b f9d1 	bl	800c7e8 <osMutexWait>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 80ed 	bne.w	8001628 <TaskDiagnostics+0x228>
		{
			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, TIM3->CCR3-50, TIM3->CCR4-50, TIM3->CCR1-50, TIM3->CCR2-50);
 800144e:	4bb6      	ldr	r3, [pc, #728]	; (8001728 <TaskDiagnostics+0x328>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	461d      	mov	r5, r3
 8001454:	4bb5      	ldr	r3, [pc, #724]	; (800172c <TaskDiagnostics+0x32c>)
 8001456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001458:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 800145c:	4bb3      	ldr	r3, [pc, #716]	; (800172c <TaskDiagnostics+0x32c>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	3b32      	subs	r3, #50	; 0x32
 8001462:	4ab2      	ldr	r2, [pc, #712]	; (800172c <TaskDiagnostics+0x32c>)
 8001464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001466:	3a32      	subs	r2, #50	; 0x32
 8001468:	49b0      	ldr	r1, [pc, #704]	; (800172c <TaskDiagnostics+0x32c>)
 800146a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800146c:	3932      	subs	r1, #50	; 0x32
 800146e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001472:	9102      	str	r1, [sp, #8]
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4623      	mov	r3, r4
 800147a:	462a      	mov	r2, r5
 800147c:	49ac      	ldr	r1, [pc, #688]	; (8001730 <TaskDiagnostics+0x330>)
 800147e:	f00e fae5 	bl	800fa4c <siprintf>
			SpiIntData[1] = (int8_t)Throttle_controlled;
 8001482:	4bac      	ldr	r3, [pc, #688]	; (8001734 <TaskDiagnostics+0x334>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b25a      	sxtb	r2, r3
 8001488:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800148c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001490:	705a      	strb	r2, [r3, #1]
			SpiIntData[2] = (int8_t)TIM3->CCR3-50;
 8001492:	4ba6      	ldr	r3, [pc, #664]	; (800172c <TaskDiagnostics+0x32c>)
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3b32      	subs	r3, #50	; 0x32
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b25a      	sxtb	r2, r3
 800149e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014a2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014a6:	709a      	strb	r2, [r3, #2]
			SpiIntData[3] = (int8_t)TIM3->CCR4-50;
 80014a8:	4ba0      	ldr	r3, [pc, #640]	; (800172c <TaskDiagnostics+0x32c>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3b32      	subs	r3, #50	; 0x32
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014b8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014bc:	70da      	strb	r2, [r3, #3]
			SpiIntData[4] = (int8_t)TIM3->CCR1-50;
 80014be:	4b9b      	ldr	r3, [pc, #620]	; (800172c <TaskDiagnostics+0x32c>)
 80014c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3b32      	subs	r3, #50	; 0x32
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	b25a      	sxtb	r2, r3
 80014ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014ce:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014d2:	711a      	strb	r2, [r3, #4]
			SpiIntData[5] = (int8_t)TIM3->CCR2-50;
 80014d4:	4b95      	ldr	r3, [pc, #596]	; (800172c <TaskDiagnostics+0x32c>)
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b32      	subs	r3, #50	; 0x32
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014e4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014e8:	715a      	strb	r2, [r3, #5]

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 80014ea:	4b93      	ldr	r3, [pc, #588]	; (8001738 <TaskDiagnostics+0x338>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80014f4:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80014f8:	4990      	ldr	r1, [pc, #576]	; (800173c <TaskDiagnostics+0x33c>)
 80014fa:	f00e faa7 	bl	800fa4c <siprintf>
			SpiIntData[6] = (int8_t)Yaw_in;
 80014fe:	4b8e      	ldr	r3, [pc, #568]	; (8001738 <TaskDiagnostics+0x338>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b25a      	sxtb	r2, r3
 8001506:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800150a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800150e:	719a      	strb	r2, [r3, #6]

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8001510:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <TaskDiagnostics+0x340>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800151a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800151e:	4989      	ldr	r1, [pc, #548]	; (8001744 <TaskDiagnostics+0x344>)
 8001520:	f00e fa94 	bl	800fa4c <siprintf>
			SpiIntData[7] = (int8_t)Pitch_in;
 8001524:	4b86      	ldr	r3, [pc, #536]	; (8001740 <TaskDiagnostics+0x340>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	b25a      	sxtb	r2, r3
 800152c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001530:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001534:	71da      	strb	r2, [r3, #7]

			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in);
 8001536:	4b84      	ldr	r3, [pc, #528]	; (8001748 <TaskDiagnostics+0x348>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001540:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001544:	4981      	ldr	r1, [pc, #516]	; (800174c <TaskDiagnostics+0x34c>)
 8001546:	f00e fa81 	bl	800fa4c <siprintf>
			SpiIntData[8] = (int8_t)Roll_in;
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <TaskDiagnostics+0x348>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	b25a      	sxtb	r2, r3
 8001552:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001556:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800155a:	721a      	strb	r2, [r3, #8]

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 800155c:	4b7c      	ldr	r3, [pc, #496]	; (8001750 <TaskDiagnostics+0x350>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001564:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001568:	497a      	ldr	r1, [pc, #488]	; (8001754 <TaskDiagnostics+0x354>)
 800156a:	f00e fa6f 	bl	800fa4c <siprintf>
			SpiIntData[9] = (int8_t)SWA;
 800156e:	4b78      	ldr	r3, [pc, #480]	; (8001750 <TaskDiagnostics+0x350>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001578:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800157c:	725a      	strb	r2, [r3, #9]

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <TaskDiagnostics+0x358>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001586:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800158a:	4974      	ldr	r1, [pc, #464]	; (800175c <TaskDiagnostics+0x35c>)
 800158c:	f00e fa5e 	bl	800fa4c <siprintf>
			SpiIntData[10] = (int8_t)SWB;
 8001590:	4b71      	ldr	r3, [pc, #452]	; (8001758 <TaskDiagnostics+0x358>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b25a      	sxtb	r2, r3
 8001596:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800159a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800159e:	729a      	strb	r2, [r3, #10]

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <TaskDiagnostics+0x360>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015a8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015ac:	496d      	ldr	r1, [pc, #436]	; (8001764 <TaskDiagnostics+0x364>)
 80015ae:	f00e fa4d 	bl	800fa4c <siprintf>
			SpiIntData[11] = (int8_t)SWC;
 80015b2:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <TaskDiagnostics+0x360>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015bc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015c0:	72da      	strb	r2, [r3, #11]

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <TaskDiagnostics+0x368>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015ca:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015ce:	4967      	ldr	r1, [pc, #412]	; (800176c <TaskDiagnostics+0x36c>)
 80015d0:	f00e fa3c 	bl	800fa4c <siprintf>
			SpiIntData[12] = (int8_t)SWD;
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <TaskDiagnostics+0x368>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015de:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015e2:	731a      	strb	r2, [r3, #12]

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 80015e4:	4b62      	ldr	r3, [pc, #392]	; (8001770 <TaskDiagnostics+0x370>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015ec:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015f0:	4960      	ldr	r1, [pc, #384]	; (8001774 <TaskDiagnostics+0x374>)
 80015f2:	f00e fa2b 	bl	800fa4c <siprintf>
			SpiIntData[13] = (int8_t)VRA;
 80015f6:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <TaskDiagnostics+0x370>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b25a      	sxtb	r2, r3
 80015fc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001600:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001604:	735a      	strb	r2, [r3, #13]

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <TaskDiagnostics+0x378>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800160e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001612:	495a      	ldr	r1, [pc, #360]	; (800177c <TaskDiagnostics+0x37c>)
 8001614:	f00e fa1a 	bl	800fa4c <siprintf>
			SpiIntData[14] = (int8_t)VRB;
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <TaskDiagnostics+0x378>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b25a      	sxtb	r2, r3
 800161e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001622:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001626:	739a      	strb	r2, [r3, #14]
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <TaskDiagnostics+0x324>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f00b f929 	bl	800c884 <osMutexRelease>

		if (IsImuAvailable)
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <TaskDiagnostics+0x380>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8106 	beq.w	8001848 <TaskDiagnostics+0x448>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <TaskDiagnostics+0x384>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	4618      	mov	r0, r3
 8001646:	f00b f8cf 	bl	800c7e8 <osMutexWait>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 80f6 	bne.w	800183e <TaskDiagnostics+0x43e>
			{
				sprintf(UARTstr,
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <TaskDiagnostics+0x388>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff9e 	bl	8000598 <__aeabi_f2d>
 800165c:	4680      	mov	r8, r0
 800165e:	4689      	mov	r9, r1
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <TaskDiagnostics+0x38c>)
 8001662:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff97 	bl	8000598 <__aeabi_f2d>
 800166a:	4682      	mov	sl, r0
 800166c:	468b      	mov	fp, r1
						AccData[0], AccData[1], AccData[2],
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <TaskDiagnostics+0x38c>)
 8001670:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff90 	bl	8000598 <__aeabi_f2d>
 8001678:	e9c7 0104 	strd	r0, r1, [r7, #16]
						AccData[0], AccData[1], AccData[2],
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <TaskDiagnostics+0x38c>)
 800167e:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff89 	bl	8000598 <__aeabi_f2d>
 8001686:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2]);
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <TaskDiagnostics+0x390>)
 800168c:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff82 	bl	8000598 <__aeabi_f2d>
 8001694:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2]);
 8001698:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <TaskDiagnostics+0x390>)
 800169a:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff7b 	bl	8000598 <__aeabi_f2d>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
						GyroData[0], GyroData[1], GyroData[2]);
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <TaskDiagnostics+0x390>)
 80016a8:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80016b8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80016bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80016c0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80016c4:	ed97 7b00 	vldr	d7, [r7]
 80016c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80016cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80016d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80016d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80016dc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80016e0:	e9cd 8900 	strd	r8, r9, [sp]
 80016e4:	460a      	mov	r2, r1
 80016e6:	492b      	ldr	r1, [pc, #172]	; (8001794 <TaskDiagnostics+0x394>)
 80016e8:	f00e f9b0 	bl	800fa4c <siprintf>
				DisassembleFloatIntoUint8s(&TempData, SpiFloatData1, 1);
 80016ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016f0:	2201      	movs	r2, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	4824      	ldr	r0, [pc, #144]	; (8001788 <TaskDiagnostics+0x388>)
 80016f6:	f7ff fe71 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData, SpiFloatData1, 5);
 80016fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016fe:	2205      	movs	r2, #5
 8001700:	4619      	mov	r1, r3
 8001702:	4822      	ldr	r0, [pc, #136]	; (800178c <TaskDiagnostics+0x38c>)
 8001704:	f7ff fe6a 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+1, SpiFloatData1, 9);
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <TaskDiagnostics+0x398>)
 800170a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800170e:	2209      	movs	r2, #9
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fe63 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+2, SpiFloatData1, 13);
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <TaskDiagnostics+0x39c>)
 8001718:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800171c:	220d      	movs	r2, #13
 800171e:	4619      	mov	r1, r3
 8001720:	e03e      	b.n	80017a0 <TaskDiagnostics+0x3a0>
 8001722:	bf00      	nop
 8001724:	20000b5c 	.word	0x20000b5c
 8001728:	20000218 	.word	0x20000218
 800172c:	40000400 	.word	0x40000400
 8001730:	080138e0 	.word	0x080138e0
 8001734:	2000021a 	.word	0x2000021a
 8001738:	2000021c 	.word	0x2000021c
 800173c:	08013900 	.word	0x08013900
 8001740:	2000021e 	.word	0x2000021e
 8001744:	0801390c 	.word	0x0801390c
 8001748:	20000220 	.word	0x20000220
 800174c:	0801391c 	.word	0x0801391c
 8001750:	20000222 	.word	0x20000222
 8001754:	0801392c 	.word	0x0801392c
 8001758:	20000224 	.word	0x20000224
 800175c:	08013938 	.word	0x08013938
 8001760:	20000226 	.word	0x20000226
 8001764:	08013944 	.word	0x08013944
 8001768:	20000228 	.word	0x20000228
 800176c:	08013950 	.word	0x08013950
 8001770:	2000022a 	.word	0x2000022a
 8001774:	0801395c 	.word	0x0801395c
 8001778:	2000022c 	.word	0x2000022c
 800177c:	08013968 	.word	0x08013968
 8001780:	20000214 	.word	0x20000214
 8001784:	20000b60 	.word	0x20000b60
 8001788:	200002ac 	.word	0x200002ac
 800178c:	200002a0 	.word	0x200002a0
 8001790:	200002b0 	.word	0x200002b0
 8001794:	08013974 	.word	0x08013974
 8001798:	200002a4 	.word	0x200002a4
 800179c:	200002a8 	.word	0x200002a8
 80017a0:	f7ff fe1c 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData, SpiFloatData1, 17);
 80017a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a8:	2211      	movs	r2, #17
 80017aa:	4619      	mov	r1, r3
 80017ac:	48b7      	ldr	r0, [pc, #732]	; (8001a8c <TaskDiagnostics+0x68c>)
 80017ae:	f7ff fe15 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+1, SpiFloatData1, 21);
 80017b2:	48b7      	ldr	r0, [pc, #732]	; (8001a90 <TaskDiagnostics+0x690>)
 80017b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017b8:	2215      	movs	r2, #21
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fe0e 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+2, SpiFloatData1, 25);
 80017c0:	48b4      	ldr	r0, [pc, #720]	; (8001a94 <TaskDiagnostics+0x694>)
 80017c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017c6:	2219      	movs	r2, #25
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff fe07 	bl	80013dc <DisassembleFloatIntoUint8s>

				sprintf(UARTstr,
 80017ce:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <TaskDiagnostics+0x698>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fee0 	bl	8000598 <__aeabi_f2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4baf      	ldr	r3, [pc, #700]	; (8001a9c <TaskDiagnostics+0x69c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fed9 	bl	8000598 <__aeabi_f2d>
 80017e6:	4680      	mov	r8, r0
 80017e8:	4689      	mov	r9, r1
 80017ea:	4bad      	ldr	r3, [pc, #692]	; (8001aa0 <TaskDiagnostics+0x6a0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fed2 	bl	8000598 <__aeabi_f2d>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80017fc:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001804:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001808:	e9cd 4500 	strd	r4, r5, [sp]
 800180c:	460a      	mov	r2, r1
 800180e:	49a5      	ldr	r1, [pc, #660]	; (8001aa4 <TaskDiagnostics+0x6a4>)
 8001810:	f00e f91c 	bl	800fa4c <siprintf>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				DisassembleFloatIntoUint8s(&BMP_Temp, SpiFloatData1, 29);
 8001814:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001818:	221d      	movs	r2, #29
 800181a:	4619      	mov	r1, r3
 800181c:	489e      	ldr	r0, [pc, #632]	; (8001a98 <TaskDiagnostics+0x698>)
 800181e:	f7ff fddd 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Pres, SpiFloatData1, 33);
 8001822:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001826:	2221      	movs	r2, #33	; 0x21
 8001828:	4619      	mov	r1, r3
 800182a:	489c      	ldr	r0, [pc, #624]	; (8001a9c <TaskDiagnostics+0x69c>)
 800182c:	f7ff fdd6 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Alt, SpiFloatData1, 37);
 8001830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001834:	2225      	movs	r2, #37	; 0x25
 8001836:	4619      	mov	r1, r3
 8001838:	4899      	ldr	r0, [pc, #612]	; (8001aa0 <TaskDiagnostics+0x6a0>)
 800183a:	f7ff fdcf 	bl	80013dc <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 800183e:	4b9a      	ldr	r3, [pc, #616]	; (8001aa8 <TaskDiagnostics+0x6a8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f00b f81e 	bl	800c884 <osMutexRelease>
		}

		if (IsMagnAvailable)
 8001848:	4b98      	ldr	r3, [pc, #608]	; (8001aac <TaskDiagnostics+0x6ac>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d056      	beq.n	80018fe <TaskDiagnostics+0x4fe>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8001850:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <TaskDiagnostics+0x6b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	4618      	mov	r0, r3
 800185a:	f00a ffc5 	bl	800c7e8 <osMutexWait>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d147      	bne.n	80018f4 <TaskDiagnostics+0x4f4>
			{
				sprintf(UARTstr,
 8001864:	4b93      	ldr	r3, [pc, #588]	; (8001ab4 <TaskDiagnostics+0x6b4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	4604      	mov	r4, r0
 8001870:	460d      	mov	r5, r1
 8001872:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <TaskDiagnostics+0x6b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4680      	mov	r8, r0
 800187e:	4689      	mov	r9, r1
 8001880:	4b8e      	ldr	r3, [pc, #568]	; (8001abc <TaskDiagnostics+0x6bc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4682      	mov	sl, r0
 800188c:	468b      	mov	fp, r1
 800188e:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <TaskDiagnostics+0x6c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe80 	bl	8000598 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80018a0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80018a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80018ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018b0:	e9cd 4500 	strd	r4, r5, [sp]
 80018b4:	460a      	mov	r2, r1
 80018b6:	4983      	ldr	r1, [pc, #524]	; (8001ac4 <TaskDiagnostics+0x6c4>)
 80018b8:	f00e f8c8 	bl	800fa4c <siprintf>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				DisassembleFloatIntoUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 80018bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018c0:	2229      	movs	r2, #41	; 0x29
 80018c2:	4619      	mov	r1, r3
 80018c4:	487b      	ldr	r0, [pc, #492]	; (8001ab4 <TaskDiagnostics+0x6b4>)
 80018c6:	f7ff fd89 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 80018ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018ce:	222d      	movs	r2, #45	; 0x2d
 80018d0:	4619      	mov	r1, r3
 80018d2:	4879      	ldr	r0, [pc, #484]	; (8001ab8 <TaskDiagnostics+0x6b8>)
 80018d4:	f7ff fd82 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 80018d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018dc:	2231      	movs	r2, #49	; 0x31
 80018de:	4619      	mov	r1, r3
 80018e0:	4876      	ldr	r0, [pc, #472]	; (8001abc <TaskDiagnostics+0x6bc>)
 80018e2:	f7ff fd7b 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_dir, SpiFloatData1, 53);
 80018e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018ea:	2235      	movs	r2, #53	; 0x35
 80018ec:	4619      	mov	r1, r3
 80018ee:	4874      	ldr	r0, [pc, #464]	; (8001ac0 <TaskDiagnostics+0x6c0>)
 80018f0:	f7ff fd74 	bl	80013dc <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <TaskDiagnostics+0x6b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00a ffc3 	bl	800c884 <osMutexRelease>
		}

		if (IsDistAvailable)
 80018fe:	4b72      	ldr	r3, [pc, #456]	; (8001ac8 <TaskDiagnostics+0x6c8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d026      	beq.n	8001954 <TaskDiagnostics+0x554>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <TaskDiagnostics+0x6cc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 31ff 	mov.w	r1, #4294967295
 800190e:	4618      	mov	r0, r3
 8001910:	f00a ff6a 	bl	800c7e8 <osMutexWait>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d117      	bne.n	800194a <TaskDiagnostics+0x54a>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 800191a:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <TaskDiagnostics+0x6d0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe3a 	bl	8000598 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800192c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001930:	e9cd 2300 	strd	r2, r3, [sp]
 8001934:	460a      	mov	r2, r1
 8001936:	4967      	ldr	r1, [pc, #412]	; (8001ad4 <TaskDiagnostics+0x6d4>)
 8001938:	f00e f888 	bl	800fa4c <siprintf>
				DisassembleFloatIntoUint8s(&Distance, SpiFloatData1, 57);
 800193c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001940:	2239      	movs	r2, #57	; 0x39
 8001942:	4619      	mov	r1, r3
 8001944:	4862      	ldr	r0, [pc, #392]	; (8001ad0 <TaskDiagnostics+0x6d0>)
 8001946:	f7ff fd49 	bl	80013dc <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(DistMutexHandle);
 800194a:	4b60      	ldr	r3, [pc, #384]	; (8001acc <TaskDiagnostics+0x6cc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f00a ff98 	bl	800c884 <osMutexRelease>
		}

		if (IsGpsAvailable)
 8001954:	4b60      	ldr	r3, [pc, #384]	; (8001ad8 <TaskDiagnostics+0x6d8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80cd 	beq.w	8001af8 <TaskDiagnostics+0x6f8>
		{
			if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <TaskDiagnostics+0x6dc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 31ff 	mov.w	r1, #4294967295
 8001966:	4618      	mov	r0, r3
 8001968:	f00a ff3e 	bl	800c7e8 <osMutexWait>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 8087 	bne.w	8001a82 <TaskDiagnostics+0x682>
			{
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
						UARTstr,
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001974:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001976:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fe0d 	bl	8000598 <__aeabi_f2d>
 800197e:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001982:	4b57      	ldr	r3, [pc, #348]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001986:	60bb      	str	r3, [r7, #8]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001988:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 800198a:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fe03 	bl	8000598 <__aeabi_f2d>
 8001992:	4680      	mov	r8, r0
 8001994:	4689      	mov	r9, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001998:	7f1b      	ldrb	r3, [r3, #28]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 800199a:	461d      	mov	r5, r3
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 800199e:	6a1e      	ldr	r6, [r3, #32]
 80019a0:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	603a      	str	r2, [r7, #0]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdf4 	bl	8000598 <__aeabi_f2d>
 80019b0:	4682      	mov	sl, r0
 80019b2:	468b      	mov	fp, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fded 	bl	8000598 <__aeabi_f2d>
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019be:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 80019c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019c4:	461c      	mov	r4, r3
 80019c6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80019ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019ce:	940e      	str	r4, [sp, #56]	; 0x38
 80019d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80019d4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	9108      	str	r1, [sp, #32]
 80019dc:	9607      	str	r6, [sp, #28]
 80019de:	9506      	str	r5, [sp, #24]
 80019e0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	9102      	str	r1, [sp, #8]
 80019e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019ec:	ed8d 7b00 	vstr	d7, [sp]
 80019f0:	493c      	ldr	r1, [pc, #240]	; (8001ae4 <TaskDiagnostics+0x6e4>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00e f82a 	bl	800fa4c <siprintf>
				DisassembleFloatIntoUint8s(&GPS.dec_latitude, SpiFloatData2, 1);
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	4839      	ldr	r0, [pc, #228]	; (8001ae8 <TaskDiagnostics+0x6e8>)
 8001a02:	f7ff fceb 	bl	80013dc <DisassembleFloatIntoUint8s>
				SpiIntData[15] = (int8_t)GPS.ns;
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a08:	7d1b      	ldrb	r3, [r3, #20]
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a10:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a14:	73da      	strb	r2, [r3, #15]
				DisassembleFloatIntoUint8s(&GPS.dec_longitude, SpiFloatData2, 5);
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4830      	ldr	r0, [pc, #192]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a20:	f7ff fcdc 	bl	80013dc <DisassembleFloatIntoUint8s>
				SpiIntData[16] = (int8_t)GPS.ew;
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a26:	7f1b      	ldrb	r3, [r3, #28]
 8001a28:	b25a      	sxtb	r2, r3
 8001a2a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a2e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a32:	741a      	strb	r2, [r3, #16]
				SpiIntData[17] = (int8_t)(GPS.fix & 0x000000ff);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	b25a      	sxtb	r2, r3
 8001a3a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a3e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a42:	745a      	strb	r2, [r3, #17]
				SpiIntData[18] = (int8_t)(GPS.num_of_satelites & 0x000000ff);
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a4e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a52:	749a      	strb	r2, [r3, #18]
				DisassembleFloatIntoUint8s(&GPS.horizontal_dilution_of_precision, SpiFloatData2, 9);
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	2209      	movs	r2, #9
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4823      	ldr	r0, [pc, #140]	; (8001aec <TaskDiagnostics+0x6ec>)
 8001a5e:	f7ff fcbd 	bl	80013dc <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&GPS.mean_sea_level_altitude, SpiFloatData2, 13);
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	220d      	movs	r2, #13
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4821      	ldr	r0, [pc, #132]	; (8001af0 <TaskDiagnostics+0x6f0>)
 8001a6c:	f7ff fcb6 	bl	80013dc <DisassembleFloatIntoUint8s>
				SpiIntData[19] = (int8_t)GPS.altitude_unit;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <TaskDiagnostics+0x6e0>)
 8001a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a76:	b25a      	sxtb	r2, r3
 8001a78:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a7c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a80:	74da      	strb	r2, [r3, #19]
			}
			osMutexRelease(GpsDataMutexHandle);
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <TaskDiagnostics+0x6dc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	e034      	b.n	8001af4 <TaskDiagnostics+0x6f4>
 8001a8a:	bf00      	nop
 8001a8c:	200002b0 	.word	0x200002b0
 8001a90:	200002b4 	.word	0x200002b4
 8001a94:	200002b8 	.word	0x200002b8
 8001a98:	200002ec 	.word	0x200002ec
 8001a9c:	200002f0 	.word	0x200002f0
 8001aa0:	200002f4 	.word	0x200002f4
 8001aa4:	080139c0 	.word	0x080139c0
 8001aa8:	20000b60 	.word	0x20000b60
 8001aac:	20000215 	.word	0x20000215
 8001ab0:	20000b58 	.word	0x20000b58
 8001ab4:	20000310 	.word	0x20000310
 8001ab8:	20000314 	.word	0x20000314
 8001abc:	20000318 	.word	0x20000318
 8001ac0:	2000031c 	.word	0x2000031c
 8001ac4:	080139f4 	.word	0x080139f4
 8001ac8:	20000216 	.word	0x20000216
 8001acc:	20000b68 	.word	0x20000b68
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	08013a38 	.word	0x08013a38
 8001ad8:	20000217 	.word	0x20000217
 8001adc:	20000b64 	.word	0x20000b64
 8001ae0:	20000380 	.word	0x20000380
 8001ae4:	08013a50 	.word	0x08013a50
 8001ae8:	20000384 	.word	0x20000384
 8001aec:	200003a8 	.word	0x200003a8
 8001af0:	200003ac 	.word	0x200003ac
 8001af4:	f00a fec6 	bl	800c884 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001af8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001afc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b00:	491c      	ldr	r1, [pc, #112]	; (8001b74 <TaskDiagnostics+0x774>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00d ffa2 	bl	800fa4c <siprintf>

		// Sending log info
		if (Diag)
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <TaskDiagnostics+0x778>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d02b      	beq.n	8001b68 <TaskDiagnostics+0x768>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001b10:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbd3 	bl	80002c0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	4815      	ldr	r0, [pc, #84]	; (8001b7c <TaskDiagnostics+0x77c>)
 8001b28:	f009 f92a 	bl	800ad80 <HAL_UART_Transmit>
			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001b2c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <TaskDiagnostics+0x780>)
 8001b38:	f006 fc33 	bl	80083a2 <HAL_SPI_Transmit>
			osDelay(10);
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f00a fe26 	bl	800c78e <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001b42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <TaskDiagnostics+0x780>)
 8001b4e:	f006 fc28 	bl	80083a2 <HAL_SPI_Transmit>
			osDelay(10);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f00a fe1b 	bl	800c78e <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001b58:	f107 0120 	add.w	r1, r7, #32
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	2240      	movs	r2, #64	; 0x40
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <TaskDiagnostics+0x780>)
 8001b64:	f006 fc1d 	bl	80083a2 <HAL_SPI_Transmit>
		}

		osDelay(500);
 8001b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b6c:	f00a fe0f 	bl	800c78e <osDelay>
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001b70:	e462      	b.n	8001438 <TaskDiagnostics+0x38>
 8001b72:	bf00      	nop
 8001b74:	08013ab4 	.word	0x08013ab4
 8001b78:	2000020c 	.word	0x2000020c
 8001b7c:	20000a58 	.word	0x20000a58
 8001b80:	200007e8 	.word	0x200007e8

08001b84 <TaskMotor>:

extern TIM_HandleTypeDef htim3;
extern osMutexId RemoteDataMutexHandle;

void TaskMotor(void const *argument)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	485e      	ldr	r0, [pc, #376]	; (8001d08 <TaskMotor+0x184>)
 8001b90:	f007 fbee 	bl	8009370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b94:	2104      	movs	r1, #4
 8001b96:	485c      	ldr	r0, [pc, #368]	; (8001d08 <TaskMotor+0x184>)
 8001b98:	f007 fbea 	bl	8009370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	485a      	ldr	r0, [pc, #360]	; (8001d08 <TaskMotor+0x184>)
 8001ba0:	f007 fbe6 	bl	8009370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	4858      	ldr	r0, [pc, #352]	; (8001d08 <TaskMotor+0x184>)
 8001ba8:	f007 fbe2 	bl	8009370 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM3->CCR3 = (uint32_t) (50);
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <TaskMotor+0x188>)
 8001bae:	2232      	movs	r2, #50	; 0x32
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t) (50);
 8001bb2:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <TaskMotor+0x188>)
 8001bb4:	2232      	movs	r2, #50	; 0x32
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR1 = (uint32_t) (50);
 8001bb8:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <TaskMotor+0x188>)
 8001bba:	2232      	movs	r2, #50	; 0x32
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t) (50);
 8001bbe:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <TaskMotor+0x188>)
 8001bc0:	2232      	movs	r2, #50	; 0x32
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38

	/* Infinite loop */
	while (1)
	{
		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001bc4:	4b52      	ldr	r3, [pc, #328]	; (8001d10 <TaskMotor+0x18c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00a fe0b 	bl	800c7e8 <osMutexWait>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 808e 	bne.w	8001cf6 <TaskMotor+0x172>
		{
			if (SWA < 10)
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <TaskMotor+0x190>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d806      	bhi.n	8001bf0 <TaskMotor+0x6c>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be8:	484b      	ldr	r0, [pc, #300]	; (8001d18 <TaskMotor+0x194>)
 8001bea:	f004 fccf 	bl	800658c <HAL_GPIO_WritePin>
 8001bee:	e005      	b.n	8001bfc <TaskMotor+0x78>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf6:	4848      	ldr	r0, [pc, #288]	; (8001d18 <TaskMotor+0x194>)
 8001bf8:	f004 fcc8 	bl	800658c <HAL_GPIO_WritePin>

			if (SWB < 10)
 8001bfc:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <TaskMotor+0x198>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d803      	bhi.n	8001c0c <TaskMotor+0x88>
				Rotors = false;
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <TaskMotor+0x19c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e002      	b.n	8001c12 <TaskMotor+0x8e>
			else
				Rotors = true;
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <TaskMotor+0x19c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]


			if (SWD < 10)
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <TaskMotor+0x1a0>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d808      	bhi.n	8001c2c <TaskMotor+0xa8>
			{
				ESC1_start_signal = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	733b      	strb	r3, [r7, #12]
 8001c2a:	e007      	b.n	8001c3c <TaskMotor+0xb8>
			}
			else
			{
				ESC1_start_signal = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 3;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	733b      	strb	r3, [r7, #12]
			}


			// Setting PWM speed
			if (Rotors)
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <TaskMotor+0x19c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d04c      	beq.n	8001cde <TaskMotor+0x15a>
			{
				TIM3->CCR3 = (uint32_t) ((Throttle_controlled * (50-(ESC1_start_signal-1)) / 50) + (50+ESC1_start_signal-1));
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <TaskMotor+0x1a4>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <TaskMotor+0x1a8>)
 8001c56:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5a:	1112      	asrs	r2, r2, #4
 8001c5c:	17db      	asrs	r3, r3, #31
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	3331      	adds	r3, #49	; 0x31
 8001c64:	441a      	add	r2, r3
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <TaskMotor+0x188>)
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = (uint32_t) ((Throttle_controlled * (50-(ESC2_start_signal-1)) / 50) + (50+ESC2_start_signal-1));
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <TaskMotor+0x1a4>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <TaskMotor+0x1a8>)
 8001c7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c80:	1112      	asrs	r2, r2, #4
 8001c82:	17db      	asrs	r3, r3, #31
 8001c84:	1ad2      	subs	r2, r2, r3
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	3331      	adds	r3, #49	; 0x31
 8001c8a:	441a      	add	r2, r3
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <TaskMotor+0x188>)
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
				TIM3->CCR1 = (uint32_t) ((Throttle_controlled * (50-(ESC3_start_signal-1)) / 50) + (50+ESC3_start_signal-1));
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <TaskMotor+0x1a4>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	7b7b      	ldrb	r3, [r7, #13]
 8001c98:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <TaskMotor+0x1a8>)
 8001ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca6:	1112      	asrs	r2, r2, #4
 8001ca8:	17db      	asrs	r3, r3, #31
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	3331      	adds	r3, #49	; 0x31
 8001cb0:	441a      	add	r2, r3
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <TaskMotor+0x188>)
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = (uint32_t) ((Throttle_controlled * (50-(ESC4_start_signal-1)) / 50) + (50+ESC4_start_signal-1));
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <TaskMotor+0x1a4>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <TaskMotor+0x1a8>)
 8001cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ccc:	1112      	asrs	r2, r2, #4
 8001cce:	17db      	asrs	r3, r3, #31
 8001cd0:	1ad2      	subs	r2, r2, r3
 8001cd2:	7b3b      	ldrb	r3, [r7, #12]
 8001cd4:	3331      	adds	r3, #49	; 0x31
 8001cd6:	441a      	add	r2, r3
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <TaskMotor+0x188>)
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
 8001cdc:	e00b      	b.n	8001cf6 <TaskMotor+0x172>
			}
			else
			{
				TIM3->CCR3 = (uint32_t) (50);
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <TaskMotor+0x188>)
 8001ce0:	2232      	movs	r2, #50	; 0x32
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = (uint32_t) (50);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <TaskMotor+0x188>)
 8001ce6:	2232      	movs	r2, #50	; 0x32
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
				TIM3->CCR1 = (uint32_t) (50);
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <TaskMotor+0x188>)
 8001cec:	2232      	movs	r2, #50	; 0x32
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = (uint32_t) (50);
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <TaskMotor+0x188>)
 8001cf2:	2232      	movs	r2, #50	; 0x32
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <TaskMotor+0x18c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f00a fdc2 	bl	800c884 <osMutexRelease>

		osDelay(100);
 8001d00:	2064      	movs	r0, #100	; 0x64
 8001d02:	f00a fd44 	bl	800c78e <osDelay>
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001d06:	e75d      	b.n	8001bc4 <TaskMotor+0x40>
 8001d08:	200008fc 	.word	0x200008fc
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	20000b5c 	.word	0x20000b5c
 8001d14:	20000222 	.word	0x20000222
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	20000224 	.word	0x20000224
 8001d20:	20000001 	.word	0x20000001
 8001d24:	20000228 	.word	0x20000228
 8001d28:	2000021a 	.word	0x2000021a
 8001d2c:	51eb851f 	.word	0x51eb851f

08001d30 <TaskPower>:
void TaskPower(void const *argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f00a fd28 	bl	800c78e <osDelay>
	{
 8001d3e:	e7fb      	b.n	8001d38 <TaskPower+0x8>

08001d40 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4967      	ldr	r1, [pc, #412]	; (8001ee8 <TaskRemote+0x1a8>)
 8001d4c:	4867      	ldr	r0, [pc, #412]	; (8001eec <TaskRemote+0x1ac>)
 8001d4e:	f009 f8de 	bl	800af0e <HAL_UART_Receive_DMA>

	/* Infinite loop */
	while (1)
	{
		Log("R-RBFS-WS");
 8001d52:	4867      	ldr	r0, [pc, #412]	; (8001ef0 <TaskRemote+0x1b0>)
 8001d54:	f7ff fa7a 	bl	800124c <Log>
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <TaskRemote+0x1b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00a fdf7 	bl	800c954 <osSemaphoreWait>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 80b9 	bne.w	8001ee0 <TaskRemote+0x1a0>
		{
			Log("R-RBFS-WE");
 8001d6e:	4862      	ldr	r0, [pc, #392]	; (8001ef8 <TaskRemote+0x1b8>)
 8001d70:	f7ff fa6c 	bl	800124c <Log>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e018      	b.n	8001dac <TaskRemote+0x6c>
				channelValues[i] = (IbusPackageBuffer[3 + 2 * i] << 8) + IbusPackageBuffer[2 + 2 * i];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	3303      	adds	r3, #3
 8001d80:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <TaskRemote+0x1bc>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	495a      	ldr	r1, [pc, #360]	; (8001efc <TaskRemote+0x1bc>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <TaskRemote+0x1c0>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	dde3      	ble.n	8001d7a <TaskRemote+0x3a>

			// Setting the speed
			Log("R-RDM-WS");
 8001db2:	4854      	ldr	r0, [pc, #336]	; (8001f04 <TaskRemote+0x1c4>)
 8001db4:	f7ff fa4a 	bl	800124c <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <TaskRemote+0x1c8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00a fd11 	bl	800c7e8 <osMutexWait>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d176      	bne.n	8001eba <TaskRemote+0x17a>
			{
				Log("R-RDM-WE");
 8001dcc:	484f      	ldr	r0, [pc, #316]	; (8001f0c <TaskRemote+0x1cc>)
 8001dce:	f7ff fa3d 	bl	800124c <Log>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = (channelValues[THROTTLE_CHANNEL] / 20) - 50;
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <TaskRemote+0x1c0>)
 8001dd4:	889b      	ldrh	r3, [r3, #4]
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <TaskRemote+0x1d0>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b32      	subs	r3, #50	; 0x32
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <TaskRemote+0x1d4>)
 8001de6:	801a      	strh	r2, [r3, #0]
				Pitch_in = (channelValues[PITCH_CHANNEL] / 20) - 75;
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <TaskRemote+0x1c0>)
 8001dea:	885b      	ldrh	r3, [r3, #2]
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <TaskRemote+0x1d0>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b4b      	subs	r3, #75	; 0x4b
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <TaskRemote+0x1d8>)
 8001dfe:	801a      	strh	r2, [r3, #0]
				Roll_in = (channelValues[ROLL_CHANNEL] / 20) - 75;
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <TaskRemote+0x1c0>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	4a42      	ldr	r2, [pc, #264]	; (8001f10 <TaskRemote+0x1d0>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b4b      	subs	r3, #75	; 0x4b
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <TaskRemote+0x1dc>)
 8001e16:	801a      	strh	r2, [r3, #0]
				Yaw_in = (channelValues[YAW_CHANNEL] / 20) - 75;
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <TaskRemote+0x1c0>)
 8001e1a:	88db      	ldrh	r3, [r3, #6]
 8001e1c:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <TaskRemote+0x1d0>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b4b      	subs	r3, #75	; 0x4b
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <TaskRemote+0x1e0>)
 8001e2e:	801a      	strh	r2, [r3, #0]
				SWA = (channelValues[SWA_CHANNEL] / 20) - 50;
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <TaskRemote+0x1c0>)
 8001e32:	891b      	ldrh	r3, [r3, #8]
 8001e34:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <TaskRemote+0x1d0>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b32      	subs	r3, #50	; 0x32
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <TaskRemote+0x1e4>)
 8001e44:	801a      	strh	r2, [r3, #0]
				SWB = (channelValues[SWB_CHANNEL] / 20) - 50;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <TaskRemote+0x1c0>)
 8001e48:	895b      	ldrh	r3, [r3, #10]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <TaskRemote+0x1d0>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b32      	subs	r3, #50	; 0x32
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <TaskRemote+0x1e8>)
 8001e5a:	801a      	strh	r2, [r3, #0]
				SWC = (channelValues[SWC_CHANNEL] / 20) - 50;
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <TaskRemote+0x1c0>)
 8001e5e:	899b      	ldrh	r3, [r3, #12]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <TaskRemote+0x1d0>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b32      	subs	r3, #50	; 0x32
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <TaskRemote+0x1ec>)
 8001e70:	801a      	strh	r2, [r3, #0]
				SWD = (channelValues[SWD_CHANNEL] / 20) - 50;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <TaskRemote+0x1c0>)
 8001e74:	89db      	ldrh	r3, [r3, #14]
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <TaskRemote+0x1d0>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b32      	subs	r3, #50	; 0x32
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <TaskRemote+0x1f0>)
 8001e86:	801a      	strh	r2, [r3, #0]
				VRA = (channelValues[VRA_CHANNEL] / 20) - 50;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <TaskRemote+0x1c0>)
 8001e8a:	8a1b      	ldrh	r3, [r3, #16]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <TaskRemote+0x1d0>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b32      	subs	r3, #50	; 0x32
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <TaskRemote+0x1f4>)
 8001e9c:	801a      	strh	r2, [r3, #0]
				VRB = (channelValues[VRB_CHANNEL] / 20) - 50;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <TaskRemote+0x1c0>)
 8001ea0:	8a5b      	ldrh	r3, [r3, #18]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <TaskRemote+0x1d0>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b32      	subs	r3, #50	; 0x32
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <TaskRemote+0x1f8>)
 8001eb2:	801a      	strh	r2, [r3, #0]

				//char str1[40];
				//sprintf(str1, "In: %d\r\n", channelValues[THROTTLE_CHANNEL]);
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);

				Log("R-RDM-RS");
 8001eb4:	4821      	ldr	r0, [pc, #132]	; (8001f3c <TaskRemote+0x1fc>)
 8001eb6:	f7ff f9c9 	bl	800124c <Log>
			}
			osMutexRelease(RemoteDataMutexHandle);
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <TaskRemote+0x1c8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00a fce0 	bl	800c884 <osMutexRelease>
			Log("R-RDM-RE");
 8001ec4:	481e      	ldr	r0, [pc, #120]	; (8001f40 <TaskRemote+0x200>)
 8001ec6:	f7ff f9c1 	bl	800124c <Log>

			//char str2[40];
			//sprintf(str2, "Out: %d\r\n\r\n", channelValues[2]);
			//HAL_UART_Transmit(&huart3, str2, 13, HAL_MAX_DELAY);

			Log("R-RBES-WS");
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <TaskRemote+0x204>)
 8001ecc:	f7ff f9be 	bl	800124c <Log>
			// Signal to the UART2 Callback
			osSemaphoreRelease(RemoteBufferEmptySemaphoreHandle);
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <TaskRemote+0x208>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00a fd8b 	bl	800c9f0 <osSemaphoreRelease>
			Log("R-RBES-WE");
 8001eda:	481c      	ldr	r0, [pc, #112]	; (8001f4c <TaskRemote+0x20c>)
 8001edc:	f7ff f9b6 	bl	800124c <Log>
		}

		osDelay(100);
 8001ee0:	2064      	movs	r0, #100	; 0x64
 8001ee2:	f00a fc54 	bl	800c78e <osDelay>
		Log("R-RBFS-WS");
 8001ee6:	e734      	b.n	8001d52 <TaskRemote+0x12>
 8001ee8:	2000035c 	.word	0x2000035c
 8001eec:	200009d0 	.word	0x200009d0
 8001ef0:	08013abc 	.word	0x08013abc
 8001ef4:	20000b78 	.word	0x20000b78
 8001ef8:	08013ac8 	.word	0x08013ac8
 8001efc:	20000360 	.word	0x20000360
 8001f00:	200004e0 	.word	0x200004e0
 8001f04:	08013ad4 	.word	0x08013ad4
 8001f08:	20000b5c 	.word	0x20000b5c
 8001f0c:	08013ae0 	.word	0x08013ae0
 8001f10:	cccccccd 	.word	0xcccccccd
 8001f14:	20000218 	.word	0x20000218
 8001f18:	2000021e 	.word	0x2000021e
 8001f1c:	20000220 	.word	0x20000220
 8001f20:	2000021c 	.word	0x2000021c
 8001f24:	20000222 	.word	0x20000222
 8001f28:	20000224 	.word	0x20000224
 8001f2c:	20000226 	.word	0x20000226
 8001f30:	20000228 	.word	0x20000228
 8001f34:	2000022a 	.word	0x2000022a
 8001f38:	2000022c 	.word	0x2000022c
 8001f3c:	08013aec 	.word	0x08013aec
 8001f40:	08013af8 	.word	0x08013af8
 8001f44:	08013b04 	.word	0x08013b04
 8001f48:	20000b74 	.word	0x20000b74
 8001f4c:	08013b10 	.word	0x08013b10

08001f50 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while (1)
	{
		// IMU Data
		if (IsImuAvailable)
 8001f58:	4ba5      	ldr	r3, [pc, #660]	; (80021f0 <TaskSensorData+0x2a0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d03d      	beq.n	8001fdc <TaskSensorData+0x8c>
		{
			//Log("SD-IA");
			//Log("SD-IMW-S");
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001f60:	4ba4      	ldr	r3, [pc, #656]	; (80021f4 <TaskSensorData+0x2a4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00a fc3d 	bl	800c7e8 <osMutexWait>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12e      	bne.n	8001fd2 <TaskSensorData+0x82>
			{
				//Log("SD-IMW-E");

				//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
				//MPU_readRawData(&hspi2, &MPU9250);
				MPU_readProcessedData(&hspi2, &MPU9250);
 8001f74:	49a0      	ldr	r1, [pc, #640]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f76:	48a1      	ldr	r0, [pc, #644]	; (80021fc <TaskSensorData+0x2ac>)
 8001f78:	f003 f99a 	bl	80052b0 <MPU_readProcessedData>

				AccData[0] = MPU9250.sensorData.ax;
 8001f7c:	4b9e      	ldr	r3, [pc, #632]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a9f      	ldr	r2, [pc, #636]	; (8002200 <TaskSensorData+0x2b0>)
 8001f82:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8001f84:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a9d      	ldr	r2, [pc, #628]	; (8002200 <TaskSensorData+0x2b0>)
 8001f8a:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 8001f8c:	4b9a      	ldr	r3, [pc, #616]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	4a9b      	ldr	r2, [pc, #620]	; (8002200 <TaskSensorData+0x2b0>)
 8001f92:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8001f94:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	4a9a      	ldr	r2, [pc, #616]	; (8002204 <TaskSensorData+0x2b4>)
 8001f9a:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 8001f9c:	4b96      	ldr	r3, [pc, #600]	; (80021f8 <TaskSensorData+0x2a8>)
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	4a99      	ldr	r2, [pc, #612]	; (8002208 <TaskSensorData+0x2b8>)
 8001fa2:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 8001fa4:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <TaskSensorData+0x2a8>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a97      	ldr	r2, [pc, #604]	; (8002208 <TaskSensorData+0x2b8>)
 8001faa:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 8001fac:	4b92      	ldr	r3, [pc, #584]	; (80021f8 <TaskSensorData+0x2a8>)
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	4a95      	ldr	r2, [pc, #596]	; (8002208 <TaskSensorData+0x2b8>)
 8001fb2:	6093      	str	r3, [r2, #8]

				BMP280_measure(&BMP280);
 8001fb4:	4895      	ldr	r0, [pc, #596]	; (800220c <TaskSensorData+0x2bc>)
 8001fb6:	f002 fa4f 	bl	8004458 <BMP280_measure>

				BMP_Temp = BMP280.measurement.temperature;
 8001fba:	4b94      	ldr	r3, [pc, #592]	; (800220c <TaskSensorData+0x2bc>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <TaskSensorData+0x2c0>)
 8001fc0:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8001fc2:	4b92      	ldr	r3, [pc, #584]	; (800220c <TaskSensorData+0x2bc>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	4a93      	ldr	r2, [pc, #588]	; (8002214 <TaskSensorData+0x2c4>)
 8001fc8:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 8001fca:	4b90      	ldr	r3, [pc, #576]	; (800220c <TaskSensorData+0x2bc>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a92      	ldr	r2, [pc, #584]	; (8002218 <TaskSensorData+0x2c8>)
 8001fd0:	6013      	str	r3, [r2, #0]

				//Log("SD-IMR-S");
			}
			osMutexRelease(ImuMutexHandle);
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <TaskSensorData+0x2a4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00a fc54 	bl	800c884 <osMutexRelease>
			//Log("SD-IMR-E");
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <TaskSensorData+0x2cc>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80e8 	beq.w	80021b6 <TaskSensorData+0x266>
		{
			//Log("SD-MA");
			//Log("SD-MMW-S");
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	; (8002220 <TaskSensorData+0x2d0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f00a fbfa 	bl	800c7e8 <osMutexWait>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80d8 	bne.w	80021ac <TaskSensorData+0x25c>
			{
				//Log("SD-MMW-E");

				struct Vector res = HMC5883L_readRaw();
 8001ffc:	f001 ff10 	bl	8003e20 <HMC5883L_readRaw>
 8002000:	eef0 6a40 	vmov.f32	s13, s0
 8002004:	eeb0 7a60 	vmov.f32	s14, s1
 8002008:	eef0 7a41 	vmov.f32	s15, s2
 800200c:	edc7 6a03 	vstr	s13, [r7, #12]
 8002010:	ed87 7a04 	vstr	s14, [r7, #16]
 8002014:	edc7 7a05 	vstr	s15, [r7, #20]
				MAG_X_RAW = res.XAxis;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a82      	ldr	r2, [pc, #520]	; (8002224 <TaskSensorData+0x2d4>)
 800201c:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4a81      	ldr	r2, [pc, #516]	; (8002228 <TaskSensorData+0x2d8>)
 8002022:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4a81      	ldr	r2, [pc, #516]	; (800222c <TaskSensorData+0x2dc>)
 8002028:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <TaskSensorData+0x2d8>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	d067      	beq.n	800210a <TaskSensorData+0x1ba>
				{
					if (MAG_Y_RAW > 0)
 800203a:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <TaskSensorData+0x2d8>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	dd2b      	ble.n	80020a2 <TaskSensorData+0x152>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <TaskSensorData+0x2d4>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <TaskSensorData+0x2d8>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	eef0 0a47 	vmov.f32	s1, s14
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	f010 fbe7 	bl	8012830 <atan2f>
 8002062:	eef0 7a40 	vmov.f32	s15, s0
 8002066:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002230 <TaskSensorData+0x2e0>
 800206a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206e:	ee17 0a90 	vmov	r0, s15
 8002072:	f7fe fa91 	bl	8000598 <__aeabi_f2d>
 8002076:	a35a      	add	r3, pc, #360	; (adr r3, 80021e0 <TaskSensorData+0x290>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fc0e 	bl	800089c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	f04f 0000 	mov.w	r0, #0
 8002088:	496a      	ldr	r1, [pc, #424]	; (8002234 <TaskSensorData+0x2e4>)
 800208a:	f7fe f925 	bl	80002d8 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fdaf 	bl	8000bf8 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	4a66      	ldr	r2, [pc, #408]	; (8002238 <TaskSensorData+0x2e8>)
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e053      	b.n	800214a <TaskSensorData+0x1fa>
					else if (MAG_Y_RAW < 0)
 80020a2:	4b61      	ldr	r3, [pc, #388]	; (8002228 <TaskSensorData+0x2d8>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d54b      	bpl.n	800214a <TaskSensorData+0x1fa>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <TaskSensorData+0x2d4>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <TaskSensorData+0x2d8>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	eef0 0a47 	vmov.f32	s1, s14
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	f010 fbb3 	bl	8012830 <atan2f>
 80020ca:	eef0 7a40 	vmov.f32	s15, s0
 80020ce:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002230 <TaskSensorData+0x2e0>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	ee17 0a90 	vmov	r0, s15
 80020da:	f7fe fa5d 	bl	8000598 <__aeabi_f2d>
 80020de:	a340      	add	r3, pc, #256	; (adr r3, 80021e0 <TaskSensorData+0x290>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fbda 	bl	800089c <__aeabi_ddiv>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	a13e      	add	r1, pc, #248	; (adr r1, 80021e8 <TaskSensorData+0x298>)
 80020ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020f2:	f7fe f8f1 	bl	80002d8 <__aeabi_dsub>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fd7b 	bl	8000bf8 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <TaskSensorData+0x2e8>)
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e01f      	b.n	800214a <TaskSensorData+0x1fa>
				}
				else if (MAG_Y_RAW == 0)
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <TaskSensorData+0x2d8>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d117      	bne.n	800214a <TaskSensorData+0x1fa>
				{
					if (MAG_X_RAW > 0)
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <TaskSensorData+0x2d4>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	dd04      	ble.n	8002134 <TaskSensorData+0x1e4>
						MAG_dir = 0.0f;
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <TaskSensorData+0x2e8>)
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e00a      	b.n	800214a <TaskSensorData+0x1fa>
					else if (MAG_X_RAW < 0)
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <TaskSensorData+0x2d4>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d502      	bpl.n	800214a <TaskSensorData+0x1fa>
						MAG_dir = 180.0f;
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <TaskSensorData+0x2e8>)
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <TaskSensorData+0x2ec>)
 8002148:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <TaskSensorData+0x2e8>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <TaskSensorData+0x2f0>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <TaskSensorData+0x2e8>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <TaskSensorData+0x2e8>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	d509      	bpl.n	8002184 <TaskSensorData+0x234>
					MAG_dir += 360.0f;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <TaskSensorData+0x2e8>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002244 <TaskSensorData+0x2f4>
 800217a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <TaskSensorData+0x2e8>)
 8002180:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <TaskSensorData+0x2e8>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002244 <TaskSensorData+0x2f4>
 800218e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	dd09      	ble.n	80021ac <TaskSensorData+0x25c>
					MAG_dir -= 360.0f;
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <TaskSensorData+0x2e8>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002244 <TaskSensorData+0x2f4>
 80021a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <TaskSensorData+0x2e8>)
 80021a8:	edc3 7a00 	vstr	s15, [r3]

				//Log("SD-MMR-S");
			}
			osMutexRelease(MagnMutexHandle);
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <TaskSensorData+0x2d0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a fb67 	bl	800c884 <osMutexRelease>
			//Log("SD-MMR-E");
		}

		// Distance Data
		if (IsDistAvailable)
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <TaskSensorData+0x2f8>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d070      	beq.n	80022a0 <TaskSensorData+0x350>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <TaskSensorData+0x2fc>)
 80021c0:	7d1b      	ldrb	r3, [r3, #20]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d041      	beq.n	8002250 <TaskSensorData+0x300>
			{
				HCSR04_Trigger(&HCSR04);
 80021cc:	481f      	ldr	r0, [pc, #124]	; (800224c <TaskSensorData+0x2fc>)
 80021ce:	f003 fab1 	bl	8005734 <HCSR04_Trigger>
				HCSR04.Triggered = true;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <TaskSensorData+0x2fc>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	751a      	strb	r2, [r3, #20]
 80021d8:	e062      	b.n	80022a0 <TaskSensorData+0x350>
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	54442d18 	.word	0x54442d18
 80021e4:	400921fb 	.word	0x400921fb
 80021e8:	00000000 	.word	0x00000000
 80021ec:	4070e000 	.word	0x4070e000
 80021f0:	20000214 	.word	0x20000214
 80021f4:	20000b60 	.word	0x20000b60
 80021f8:	20000230 	.word	0x20000230
 80021fc:	2000084c 	.word	0x2000084c
 8002200:	200002a0 	.word	0x200002a0
 8002204:	200002ac 	.word	0x200002ac
 8002208:	200002b0 	.word	0x200002b0
 800220c:	200002bc 	.word	0x200002bc
 8002210:	200002ec 	.word	0x200002ec
 8002214:	200002f0 	.word	0x200002f0
 8002218:	200002f4 	.word	0x200002f4
 800221c:	20000215 	.word	0x20000215
 8002220:	20000b58 	.word	0x20000b58
 8002224:	20000310 	.word	0x20000310
 8002228:	20000314 	.word	0x20000314
 800222c:	20000318 	.word	0x20000318
 8002230:	43340000 	.word	0x43340000
 8002234:	40568000 	.word	0x40568000
 8002238:	2000031c 	.word	0x2000031c
 800223c:	43340000 	.word	0x43340000
 8002240:	20000004 	.word	0x20000004
 8002244:	43b40000 	.word	0x43b40000
 8002248:	20000216 	.word	0x20000216
 800224c:	20000320 	.word	0x20000320
			}
			else if (HCSR04.Triggered)
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <TaskSensorData+0x3c0>)
 8002252:	7d1b      	ldrb	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <TaskSensorData+0x350>
			{
				//Log("SD-DSW-S");
				if (osSemaphoreWait(DistSemaphoreHandle, osWaitForever) == osOK)
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <TaskSensorData+0x3c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	4618      	mov	r0, r3
 8002262:	f00a fb77 	bl	800c954 <osSemaphoreWait>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d119      	bne.n	80022a0 <TaskSensorData+0x350>
				{
					//Log("SD-DSW-E");
					//Log("SD-DMW-S");
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <TaskSensorData+0x3c8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	4618      	mov	r0, r3
 8002276:	f00a fab7 	bl	800c7e8 <osMutexWait>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <TaskSensorData+0x340>
					{
						//Log("SD-DMW-E");

						Distance = HCSR04_Read(&HCSR04);
 8002280:	4823      	ldr	r0, [pc, #140]	; (8002310 <TaskSensorData+0x3c0>)
 8002282:	f003 fa72 	bl	800576a <HCSR04_Read>
 8002286:	eef0 7a40 	vmov.f32	s15, s0
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <TaskSensorData+0x3cc>)
 800228c:	edc3 7a00 	vstr	s15, [r3]

						//Log("SD-DMR-S");
					}
					osMutexRelease(DistMutexHandle);
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <TaskSensorData+0x3c8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f00a faf5 	bl	800c884 <osMutexRelease>
					//Log("SD-DMR-E");

					HCSR04.Triggered = false;
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <TaskSensorData+0x3c0>)
 800229c:	2200      	movs	r2, #0
 800229e:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <TaskSensorData+0x3d0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02e      	beq.n	8002306 <TaskSensorData+0x3b6>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <TaskSensorData+0x3d4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00a fb4f 	bl	800c954 <osSemaphoreWait>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d124      	bne.n	8002306 <TaskSensorData+0x3b6>
			{
				if (ProcessGPSPackageBuffer)
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <TaskSensorData+0x3d8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01f      	beq.n	8002306 <TaskSensorData+0x3b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <TaskSensorData+0x3dc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f04f 31ff 	mov.w	r1, #4294967295
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00a fa8a 	bl	800c7e8 <osMutexWait>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <TaskSensorData+0x3a6>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80022da:	4815      	ldr	r0, [pc, #84]	; (8002330 <TaskSensorData+0x3e0>)
 80022dc:	f001 fbd0 	bl	8003a80 <GPS_validate>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <TaskSensorData+0x39c>
							GPS_parse((char*) GPSPackageBuffer);
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <TaskSensorData+0x3e0>)
 80022e8:	f001 fc2c 	bl	8003b44 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	2100      	movs	r1, #0
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <TaskSensorData+0x3e0>)
 80022f2:	f00d fc3c 	bl	800fb6e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <TaskSensorData+0x3dc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00a fac2 	bl	800c884 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <TaskSensorData+0x3d8>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		osDelay(100);
 8002306:	2064      	movs	r0, #100	; 0x64
 8002308:	f00a fa41 	bl	800c78e <osDelay>
		if (IsImuAvailable)
 800230c:	e624      	b.n	8001f58 <TaskSensorData+0x8>
 800230e:	bf00      	nop
 8002310:	20000320 	.word	0x20000320
 8002314:	20000b6c 	.word	0x20000b6c
 8002318:	20000b68 	.word	0x20000b68
 800231c:	20000358 	.word	0x20000358
 8002320:	20000217 	.word	0x20000217
 8002324:	20000b70 	.word	0x20000b70
 8002328:	200004df 	.word	0x200004df
 800232c:	20000b64 	.word	0x20000b64
 8002330:	200003e0 	.word	0x200003e0

08002334 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a07      	ldr	r2, [pc, #28]	; (8002360 <vApplicationGetIdleTaskMemory+0x2c>)
 8002344:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <vApplicationGetIdleTaskMemory+0x30>)
 800234a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200004f4 	.word	0x200004f4
 8002364:	20000594 	.word	0x20000594

08002368 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a66      	ldr	r2, [pc, #408]	; (800250c <HAL_UART_RxCpltCallback+0x1a4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d178      	bne.n	800246a <HAL_UART_RxCpltCallback+0x102>
	{
		Log("U2CB-RBES-WS");
 8002378:	4865      	ldr	r0, [pc, #404]	; (8002510 <HAL_UART_RxCpltCallback+0x1a8>)
 800237a:	f7fe ff67 	bl	800124c <Log>
		if (osSemaphoreWait(RemoteBufferEmptySemaphoreHandle, 0) == osOK)
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_UART_RxCpltCallback+0x1ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00a fae5 	bl	800c954 <osSemaphoreWait>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d166      	bne.n	800245e <HAL_UART_RxCpltCallback+0xf6>
		{
			Log("U2CB-RBES-WE");
 8002390:	4861      	ldr	r0, [pc, #388]	; (8002518 <HAL_UART_RxCpltCallback+0x1b0>)
 8002392:	f7fe ff5b 	bl	800124c <Log>
			Uart2CallbackCounter++;
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_UART_RxCpltCallback+0x1b4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	4a5f      	ldr	r2, [pc, #380]	; (800251c <HAL_UART_RxCpltCallback+0x1b4>)
 800239e:	6013      	str	r3, [r2, #0]

			// If we are just getting the header bytes or the actual data
			if ((IbusPackageIndex == 0 && Uart2Buffer == 0x20)
 80023a0:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_UART_RxCpltCallback+0x4c>
 80023aa:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_UART_RxCpltCallback+0x1bc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d013      	beq.n	80023dc <HAL_UART_RxCpltCallback+0x74>
					|| (IbusPackageIndex == 1 && Uart2Buffer == 0x40)
 80023b4:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d104      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0x60>
 80023be:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_UART_RxCpltCallback+0x1bc>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d009      	beq.n	80023dc <HAL_UART_RxCpltCallback+0x74>
					|| (1 < IbusPackageIndex && IbusPackageIndex < IBUS_BUFFSIZE))
 80023c8:	4b55      	ldr	r3, [pc, #340]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d92c      	bls.n	800242c <HAL_UART_RxCpltCallback+0xc4>
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b1f      	cmp	r3, #31
 80023da:	d827      	bhi.n	800242c <HAL_UART_RxCpltCallback+0xc4>
			{
				Log("U2CB-F");
 80023dc:	4852      	ldr	r0, [pc, #328]	; (8002528 <HAL_UART_RxCpltCallback+0x1c0>)
 80023de:	f7fe ff35 	bl	800124c <Log>
				IbusPackageBuffer[IbusPackageIndex] = Uart2Buffer;
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_UART_RxCpltCallback+0x1bc>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2d9      	uxtb	r1, r3
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_UART_RxCpltCallback+0x1c4>)
 80023f2:	5499      	strb	r1, [r3, r2]

				if (IbusPackageIndex < IBUS_BUFFSIZE-1)
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b1e      	cmp	r3, #30
 80023fc:	d807      	bhi.n	800240e <HAL_UART_RxCpltCallback+0xa6>
					IbusPackageIndex++;
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b45      	ldr	r3, [pc, #276]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 800240a:	701a      	strb	r2, [r3, #0]
				if (IbusPackageIndex < IBUS_BUFFSIZE-1)
 800240c:	e027      	b.n	800245e <HAL_UART_RxCpltCallback+0xf6>
				else
				{
					IbusPackageIndex = 0;
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]

					Log("U2CB-RBFS-RS");
 8002414:	4846      	ldr	r0, [pc, #280]	; (8002530 <HAL_UART_RxCpltCallback+0x1c8>)
 8002416:	f7fe ff19 	bl	800124c <Log>
					// Signal to TaskRemote with the binary semaphore
					osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_UART_RxCpltCallback+0x1cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f00a fae6 	bl	800c9f0 <osSemaphoreRelease>
					Log("U2CB-RBFS-RE");
 8002424:	4844      	ldr	r0, [pc, #272]	; (8002538 <HAL_UART_RxCpltCallback+0x1d0>)
 8002426:	f7fe ff11 	bl	800124c <Log>
				if (IbusPackageIndex < IBUS_BUFFSIZE-1)
 800242a:	e018      	b.n	800245e <HAL_UART_RxCpltCallback+0xf6>
				}
			}
			else
			{
				IbusPackageIndex = 0;
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_UART_RxCpltCallback+0x1b8>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]

				char str[32];
				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_UART_RxCpltCallback+0x1b4>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4940      	ldr	r1, [pc, #256]	; (800253c <HAL_UART_RxCpltCallback+0x1d4>)
 800243c:	4618      	mov	r0, r3
 800243e:	f00d fb05 	bl	800fa4c <siprintf>
				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	4618      	mov	r0, r3
 8002448:	f7fd ff3a 	bl	80002c0 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29a      	uxth	r2, r3
 8002450:	f107 0108 	add.w	r1, r7, #8
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	4839      	ldr	r0, [pc, #228]	; (8002540 <HAL_UART_RxCpltCallback+0x1d8>)
 800245a:	f008 fc91 	bl	800ad80 <HAL_UART_Transmit>
			}
		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 1);
 800245e:	2201      	movs	r2, #1
 8002460:	4930      	ldr	r1, [pc, #192]	; (8002524 <HAL_UART_RxCpltCallback+0x1bc>)
 8002462:	482a      	ldr	r0, [pc, #168]	; (800250c <HAL_UART_RxCpltCallback+0x1a4>)
 8002464:	f008 fd0f 	bl	800ae86 <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8002468:	e04b      	b.n	8002502 <HAL_UART_RxCpltCallback+0x19a>
	else if (huart == &huart4)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_UART_RxCpltCallback+0x1dc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d147      	bne.n	8002502 <HAL_UART_RxCpltCallback+0x19a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <HAL_UART_RxCpltCallback+0x11e>
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_UART_RxCpltCallback+0x1e4>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b24      	cmp	r3, #36	; 0x24
 8002484:	d013      	beq.n	80024ae <HAL_UART_RxCpltCallback+0x146>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d104      	bne.n	800249a <HAL_UART_RxCpltCallback+0x132>
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_UART_RxCpltCallback+0x1e4>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b47      	cmp	r3, #71	; 0x47
 8002498:	d009      	beq.n	80024ae <HAL_UART_RxCpltCallback+0x146>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d926      	bls.n	80024f2 <HAL_UART_RxCpltCallback+0x18a>
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d021      	beq.n	80024f2 <HAL_UART_RxCpltCallback+0x18a>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_UART_RxCpltCallback+0x1e4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2d9      	uxtb	r1, r3
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_UART_RxCpltCallback+0x1e8>)
 80024be:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2bfd      	cmp	r3, #253	; 0xfd
 80024c8:	d807      	bhi.n	80024da <HAL_UART_RxCpltCallback+0x172>
				GPSPackageIndex++;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024d6:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80024d8:	e00e      	b.n	80024f8 <HAL_UART_RxCpltCallback+0x190>
				GPSPackageIndex = 0;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_UART_RxCpltCallback+0x1ec>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_UART_RxCpltCallback+0x1f0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00a fa80 	bl	800c9f0 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80024f0:	e002      	b.n	80024f8 <HAL_UART_RxCpltCallback+0x190>
			GPSPackageIndex = 0;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_RxCpltCallback+0x1e0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	4914      	ldr	r1, [pc, #80]	; (800254c <HAL_UART_RxCpltCallback+0x1e4>)
 80024fc:	4811      	ldr	r0, [pc, #68]	; (8002544 <HAL_UART_RxCpltCallback+0x1dc>)
 80024fe:	f008 fd06 	bl	800af0e <HAL_UART_Receive_DMA>
}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200009d0 	.word	0x200009d0
 8002510:	08013b1c 	.word	0x08013b1c
 8002514:	20000b74 	.word	0x20000b74
 8002518:	08013b2c 	.word	0x08013b2c
 800251c:	20000210 	.word	0x20000210
 8002520:	2000035d 	.word	0x2000035d
 8002524:	2000035c 	.word	0x2000035c
 8002528:	08013b3c 	.word	0x08013b3c
 800252c:	20000360 	.word	0x20000360
 8002530:	08013b44 	.word	0x08013b44
 8002534:	20000b78 	.word	0x20000b78
 8002538:	08013b54 	.word	0x08013b54
 800253c:	08013b64 	.word	0x08013b64
 8002540:	20000a58 	.word	0x20000a58
 8002544:	20000948 	.word	0x20000948
 8002548:	200003dd 	.word	0x200003dd
 800254c:	200003dc 	.word	0x200003dc
 8002550:	200003e0 	.word	0x200003e0
 8002554:	200004df 	.word	0x200004df
 8002558:	20000b70 	.word	0x20000b70

0800255c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_UART_ErrorCallback+0x98>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d11c      	bne.n	80025a6 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03a      	beq.n	80025ec <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	491d      	ldr	r1, [pc, #116]	; (80025f8 <HAL_UART_ErrorCallback+0x9c>)
 8002582:	4618      	mov	r0, r3
 8002584:	f00d fa62 	bl	800fa4c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd fe97 	bl	80002c0 <strlen>
 8002592:	4603      	mov	r3, r0
 8002594:	b29a      	uxth	r2, r3
 8002596:	f107 0108 	add.w	r1, r7, #8
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	4817      	ldr	r0, [pc, #92]	; (80025fc <HAL_UART_ErrorCallback+0xa0>)
 80025a0:	f008 fbee 	bl	800ad80 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 80025a4:	e022      	b.n	80025ec <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <HAL_UART_ErrorCallback+0xa4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d11e      	bne.n	80025ec <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d019      	beq.n	80025ec <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_UART_ErrorCallback+0xa8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	490f      	ldr	r1, [pc, #60]	; (8002608 <HAL_UART_ErrorCallback+0xac>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00d fa3e 	bl	800fa4c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd fe73 	bl	80002c0 <strlen>
 80025da:	4603      	mov	r3, r0
 80025dc:	b29a      	uxth	r2, r3
 80025de:	f107 0108 	add.w	r1, r7, #8
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <HAL_UART_ErrorCallback+0xa0>)
 80025e8:	f008 fbca 	bl	800ad80 <HAL_UART_Transmit>
}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200009d0 	.word	0x200009d0
 80025f8:	08013b80 	.word	0x08013b80
 80025fc:	20000a58 	.word	0x20000a58
 8002600:	20000948 	.word	0x20000948
 8002604:	2000020c 	.word	0x2000020c
 8002608:	08013b9c 	.word	0x08013b9c

0800260c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <HAL_TIM_IC_CaptureCallback+0x20>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4804      	ldr	r0, [pc, #16]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x24>)
 8002620:	f002 ff42 	bl	80054a8 <HCSR04_TMR_IC_ISR>
	}
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200008b0 	.word	0x200008b0
 8002630:	20000320 	.word	0x20000320

08002634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b0bc      	sub	sp, #240	; 0xf0
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263a:	f003 f8ce 	bl	80057da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263e:	f000 f9c1 	bl	80029c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002642:	f000 fcdf 	bl	8003004 <MX_GPIO_Init>
  MX_DMA_Init();
 8002646:	f000 fcbf 	bl	8002fc8 <MX_DMA_Init>
  MX_SPI1_Init();
 800264a:	f000 fa69 	bl	8002b20 <MX_SPI1_Init>
  MX_SPI2_Init();
 800264e:	f000 faa5 	bl	8002b9c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002652:	f000 fae1 	bl	8002c18 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002656:	f000 fbb1 	bl	8002dbc <MX_TIM3_Init>
  MX_UART4_Init();
 800265a:	f000 fc21 	bl	8002ea0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800265e:	f000 fc4f 	bl	8002f00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002662:	f000 fa1d 	bl	8002aa0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002666:	f000 fc7f 	bl	8002f68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800266a:	49b9      	ldr	r1, [pc, #740]	; (8002950 <main+0x31c>)
 800266c:	48b9      	ldr	r0, [pc, #740]	; (8002954 <main+0x320>)
 800266e:	f002 fbcb 	bl	8004e08 <MPU_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <main+0x5a>
 8002678:	49b7      	ldr	r1, [pc, #732]	; (8002958 <main+0x324>)
 800267a:	48b6      	ldr	r0, [pc, #728]	; (8002954 <main+0x320>)
 800267c:	f001 fd38 	bl	80040f0 <BMP280_initialize>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <main+0x5a>
  		IsImuAvailable = true;
 8002686:	4bb5      	ldr	r3, [pc, #724]	; (800295c <main+0x328>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e002      	b.n	8002694 <main+0x60>
  	else
  		IsImuAvailable = false;
 800268e:	4bb3      	ldr	r3, [pc, #716]	; (800295c <main+0x328>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8002694:	f001 fbae 	bl	8003df4 <HMC5883L_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <main+0x72>
  		IsMagnAvailable = true;
 800269e:	4bb0      	ldr	r3, [pc, #704]	; (8002960 <main+0x32c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e002      	b.n	80026ac <main+0x78>
  	else
  		IsMagnAvailable = false;
 80026a6:	4bae      	ldr	r3, [pc, #696]	; (8002960 <main+0x32c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80026ac:	49ad      	ldr	r1, [pc, #692]	; (8002964 <main+0x330>)
 80026ae:	48ae      	ldr	r0, [pc, #696]	; (8002968 <main+0x334>)
 80026b0:	f002 feac 	bl	800540c <HCSR04_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <main+0x8e>
  		IsDistAvailable = false;
 80026ba:	4bac      	ldr	r3, [pc, #688]	; (800296c <main+0x338>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e002      	b.n	80026c8 <main+0x94>
  	else
  		IsDistAvailable = false;
 80026c2:	4baa      	ldr	r3, [pc, #680]	; (800296c <main+0x338>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80026d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026d8:	4618      	mov	r0, r3
 80026da:	f00a f86c 	bl	800c7b6 <osMutexCreate>
 80026de:	4603      	mov	r3, r0
 80026e0:	4aa3      	ldr	r2, [pc, #652]	; (8002970 <main+0x33c>)
 80026e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 80026f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f00a f85e 	bl	800c7b6 <osMutexCreate>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a9d      	ldr	r2, [pc, #628]	; (8002974 <main+0x340>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 800270c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002710:	4618      	mov	r0, r3
 8002712:	f00a f850 	bl	800c7b6 <osMutexCreate>
 8002716:	4603      	mov	r3, r0
 8002718:	4a97      	ldr	r2, [pc, #604]	; (8002978 <main+0x344>)
 800271a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002728:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800272c:	4618      	mov	r0, r3
 800272e:	f00a f842 	bl	800c7b6 <osMutexCreate>
 8002732:	4603      	mov	r3, r0
 8002734:	4a91      	ldr	r2, [pc, #580]	; (800297c <main+0x348>)
 8002736:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8002744:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002748:	4618      	mov	r0, r3
 800274a:	f00a f834 	bl	800c7b6 <osMutexCreate>
 800274e:	4603      	mov	r3, r0
 8002750:	4a8b      	ldr	r2, [pc, #556]	; (8002980 <main+0x34c>)
 8002752:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 8002754:	4b86      	ldr	r3, [pc, #536]	; (8002970 <main+0x33c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f00a f893 	bl	800c884 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 800275e:	4b85      	ldr	r3, [pc, #532]	; (8002974 <main+0x340>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f00a f88e 	bl	800c884 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 8002768:	4b83      	ldr	r3, [pc, #524]	; (8002978 <main+0x344>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f00a f889 	bl	800c884 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <main+0x348>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f00a f884 	bl	800c884 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 8002788:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f00a f8ae 	bl	800c8f0 <osSemaphoreCreate>
 8002794:	4603      	mov	r3, r0
 8002796:	4a7b      	ldr	r2, [pc, #492]	; (8002984 <main+0x350>)
 8002798:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 80027a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00a f89f 	bl	800c8f0 <osSemaphoreCreate>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a74      	ldr	r2, [pc, #464]	; (8002988 <main+0x354>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferEmptySemaphore */
  osSemaphoreDef(RemoteBufferEmptySemaphore);
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RemoteBufferEmptySemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferEmptySemaphore), 1);
 80027c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00a f890 	bl	800c8f0 <osSemaphoreCreate>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a6e      	ldr	r2, [pc, #440]	; (800298c <main+0x358>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 80027e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00a f881 	bl	800c8f0 <osSemaphoreCreate>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a67      	ldr	r2, [pc, #412]	; (8002990 <main+0x35c>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <main+0x350>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00a f92f 	bl	800ca5c <osSemaphoreGetCount>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <main+0x1de>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8002804:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <main+0x350>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	4618      	mov	r0, r3
 800280e:	f00a f8a1 	bl	800c954 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8002812:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <main+0x354>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f00a f920 	bl	800ca5c <osSemaphoreGetCount>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <main+0x1fc>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8002822:	4b59      	ldr	r3, [pc, #356]	; (8002988 <main+0x354>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f04f 31ff 	mov.w	r1, #4294967295
 800282a:	4618      	mov	r0, r3
 800282c:	f00a f892 	bl	800c954 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferEmptySemaphoreHandle) == 0)
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <main+0x358>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f00a f911 	bl	800ca5c <osSemaphoreGetCount>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <main+0x216>
  	  osSemaphoreRelease(RemoteBufferEmptySemaphoreHandle);
 8002840:	4b52      	ldr	r3, [pc, #328]	; (800298c <main+0x358>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f00a f8d3 	bl	800c9f0 <osSemaphoreRelease>
  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 800284a:	4b51      	ldr	r3, [pc, #324]	; (8002990 <main+0x35c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f00a f904 	bl	800ca5c <osSemaphoreGetCount>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d106      	bne.n	8002868 <main+0x234>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <main+0x35c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 31ff 	mov.w	r1, #4294967295
 8002862:	4618      	mov	r0, r3
 8002864:	f00a f876 	bl	800c954 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityRealtime, 0, 512);
 8002868:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <main+0x360>)
 800286a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800286e:	461d      	mov	r5, r3
 8002870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 800287c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f009 ff37 	bl	800c6f6 <osThreadCreate>
 8002888:	4603      	mov	r3, r0
 800288a:	4a43      	ldr	r2, [pc, #268]	; (8002998 <main+0x364>)
 800288c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <main+0x368>)
 8002890:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002894:	461d      	mov	r5, r3
 8002896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800289e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80028a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f009 ff24 	bl	800c6f6 <osThreadCreate>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <main+0x36c>)
 80028b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityHigh, 0, 512);
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <main+0x370>)
 80028b6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80028ba:	461d      	mov	r5, r3
 80028bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 80028c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f009 ff11 	bl	800c6f6 <osThreadCreate>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <main+0x374>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <main+0x378>)
 80028dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80028e0:	461d      	mov	r5, r3
 80028e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 80028ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f009 fefe 	bl	800c6f6 <osThreadCreate>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <main+0x37c>)
 80028fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <main+0x380>)
 8002902:	f107 041c 	add.w	r4, r7, #28
 8002906:	461d      	mov	r5, r3
 8002908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f009 feeb 	bl	800c6f6 <osThreadCreate>
 8002920:	4603      	mov	r3, r0
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <main+0x384>)
 8002924:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <main+0x388>)
 8002928:	463c      	mov	r4, r7
 800292a:	461d      	mov	r5, r3
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002938:	463b      	mov	r3, r7
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f009 feda 	bl	800c6f6 <osThreadCreate>
 8002942:	4603      	mov	r3, r0
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <main+0x38c>)
 8002946:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002948:	f009 fece 	bl	800c6e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800294c:	e7fe      	b.n	800294c <main+0x318>
 800294e:	bf00      	nop
 8002950:	20000230 	.word	0x20000230
 8002954:	2000084c 	.word	0x2000084c
 8002958:	200002bc 	.word	0x200002bc
 800295c:	20000214 	.word	0x20000214
 8002960:	20000215 	.word	0x20000215
 8002964:	200008fc 	.word	0x200008fc
 8002968:	20000320 	.word	0x20000320
 800296c:	20000216 	.word	0x20000216
 8002970:	20000b58 	.word	0x20000b58
 8002974:	20000b5c 	.word	0x20000b5c
 8002978:	20000b60 	.word	0x20000b60
 800297c:	20000b64 	.word	0x20000b64
 8002980:	20000b68 	.word	0x20000b68
 8002984:	20000b6c 	.word	0x20000b6c
 8002988:	20000b70 	.word	0x20000b70
 800298c:	20000b74 	.word	0x20000b74
 8002990:	20000b78 	.word	0x20000b78
 8002994:	08013bc8 	.word	0x08013bc8
 8002998:	20000b40 	.word	0x20000b40
 800299c:	08013bf4 	.word	0x08013bf4
 80029a0:	20000b44 	.word	0x20000b44
 80029a4:	08013c1c 	.word	0x08013c1c
 80029a8:	20000b48 	.word	0x20000b48
 80029ac:	08013c44 	.word	0x08013c44
 80029b0:	20000b4c 	.word	0x20000b4c
 80029b4:	08013c6c 	.word	0x08013c6c
 80029b8:	20000b50 	.word	0x20000b50
 80029bc:	08013c98 	.word	0x08013c98
 80029c0:	20000b54 	.word	0x20000b54

080029c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b094      	sub	sp, #80	; 0x50
 80029c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	2230      	movs	r2, #48	; 0x30
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00d f8cb 	bl	800fb6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <SystemClock_Config+0xd4>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <SystemClock_Config+0xd4>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <SystemClock_Config+0xd4>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <SystemClock_Config+0xd8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <SystemClock_Config+0xd8>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <SystemClock_Config+0xd8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a24:	2310      	movs	r3, #16
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a30:	2310      	movs	r3, #16
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002a34:	23d8      	movs	r3, #216	; 0xd8
 8002a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fbfb 	bl	8007240 <HAL_RCC_OscConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a50:	f000 fbc4 	bl	80031dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a54:	f004 fba4 	bl	80071a0 <HAL_PWREx_EnableOverDrive>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a5e:	f000 fbbd 	bl	80031dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a62:	230f      	movs	r3, #15
 8002a64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a66:	2302      	movs	r3, #2
 8002a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fe82 	bl	8007788 <HAL_RCC_ClockConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a8a:	f000 fba7 	bl	80031dc <Error_Handler>
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3750      	adds	r7, #80	; 0x50
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <MX_I2C1_Init+0x78>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20808DD4;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <MX_I2C1_Init+0x7c>)
 8002aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002adc:	f003 fd70 	bl	80065c0 <HAL_I2C_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ae6:	f000 fb79 	bl	80031dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aea:	2100      	movs	r1, #0
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002aee:	f004 fabf 	bl	8007070 <HAL_I2CEx_ConfigAnalogFilter>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002af8:	f000 fb70 	bl	80031dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_I2C1_Init+0x74>)
 8002b00:	f004 fb01 	bl	8007106 <HAL_I2CEx_ConfigDigitalFilter>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b0a:	f000 fb67 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000794 	.word	0x20000794
 8002b18:	40005400 	.word	0x40005400
 8002b1c:	20808dd4 	.word	0x20808dd4

08002b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <MX_SPI1_Init+0x78>)
 8002b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b4e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b56:	2238      	movs	r2, #56	; 0x38
 8002b58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b6e:	2207      	movs	r2, #7
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_SPI1_Init+0x74>)
 8002b80:	f005 fb64 	bl	800824c <HAL_SPI_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b8a:	f000 fb27 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200007e8 	.word	0x200007e8
 8002b98:	40013000 	.word	0x40013000

08002b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <MX_SPI2_Init+0x78>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bea:	2207      	movs	r2, #7
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_SPI2_Init+0x74>)
 8002bfc:	f005 fb26 	bl	800824c <HAL_SPI_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c06:	f000 fae9 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000084c 	.word	0x2000084c
 8002c14:	40003800 	.word	0x40003800

08002c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b09a      	sub	sp, #104	; 0x68
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
 8002c48:	615a      	str	r2, [r3, #20]
 8002c4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	222c      	movs	r2, #44	; 0x2c
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00c ff8b 	bl	800fb6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c58:	4b56      	ldr	r3, [pc, #344]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c5a:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <MX_TIM1_Init+0x1a0>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 8002c5e:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c60:	f640 026f 	movw	r2, #2159	; 0x86f
 8002c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c66:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c80:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c86:	484b      	ldr	r0, [pc, #300]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002c88:	f006 fa40 	bl	800910c <HAL_TIM_Base_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002c92:	f000 faa3 	bl	80031dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4844      	ldr	r0, [pc, #272]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002ca4:	f007 f8e0 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002cae:	f000 fa95 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cb2:	4840      	ldr	r0, [pc, #256]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002cb4:	f006 fafa 	bl	80092ac <HAL_TIM_PWM_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002cbe:	f000 fa8d 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4837      	ldr	r0, [pc, #220]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002cd6:	f007 fedb 	bl	800aa90 <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002ce0:	f000 fa7c 	bl	80031dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce4:	2360      	movs	r3, #96	; 0x60
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d04:	2200      	movs	r2, #0
 8002d06:	4619      	mov	r1, r3
 8002d08:	482a      	ldr	r0, [pc, #168]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002d0a:	f006 ff99 	bl	8009c40 <HAL_TIM_PWM_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d14:	f000 fa62 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4824      	ldr	r0, [pc, #144]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002d22:	f006 ff8d 	bl	8009c40 <HAL_TIM_PWM_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002d2c:	f000 fa56 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d34:	2208      	movs	r2, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	481e      	ldr	r0, [pc, #120]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002d3a:	f006 ff81 	bl	8009c40 <HAL_TIM_PWM_ConfigChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002d44:	f000 fa4a 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4818      	ldr	r0, [pc, #96]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002d52:	f006 ff75 	bl	8009c40 <HAL_TIM_PWM_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002d5c:	f000 fa3e 	bl	80031dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4807      	ldr	r0, [pc, #28]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002d96:	f007 ff09 	bl	800abac <HAL_TIMEx_ConfigBreakDeadTime>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002da0:	f000 fa1c 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <MX_TIM1_Init+0x19c>)
 8002da6:	f000 fb75 	bl	8003494 <HAL_TIM_MspPostInit>

}
 8002daa:	bf00      	nop
 8002dac:	3768      	adds	r7, #104	; 0x68
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200008b0 	.word	0x200008b0
 8002db8:	40010000 	.word	0x40010000

08002dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc2:	f107 0320 	add.w	r3, r7, #32
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002dea:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <MX_TIM3_Init+0xe0>)
 8002dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002df0:	226c      	movs	r2, #108	; 0x6c
 8002df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002dfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e08:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e0e:	4822      	ldr	r0, [pc, #136]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e10:	f006 f97c 	bl	800910c <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002e1a:	f000 f9df 	bl	80031dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0320 	add.w	r3, r7, #32
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481b      	ldr	r0, [pc, #108]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e2c:	f007 f81c 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002e36:	f000 f9d1 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e3a:	4817      	ldr	r0, [pc, #92]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e3c:	f006 fb92 	bl	8009564 <HAL_TIM_IC_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002e46:	f000 f9c9 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	480f      	ldr	r0, [pc, #60]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e5a:	f007 fe19 	bl	800aa90 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002e64:	f000 f9ba 	bl	80031dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <MX_TIM3_Init+0xdc>)
 8002e80:	f006 fe41 	bl	8009b06 <HAL_TIM_IC_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002e8a:	f000 f9a7 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200008fc 	.word	0x200008fc
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <MX_UART4_Init+0x5c>)
 8002ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002eac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002eb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_UART4_Init+0x58>)
 8002ee4:	f007 fefe 	bl	800ace4 <HAL_UART_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002eee:	f000 f975 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000948 	.word	0x20000948
 8002efc:	40004c00 	.word	0x40004c00

08002f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <MX_USART2_UART_Init+0x64>)
 8002f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f26:	2204      	movs	r2, #4
 8002f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f3e:	2210      	movs	r2, #16
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_USART2_UART_Init+0x60>)
 8002f4c:	f007 feca 	bl	800ace4 <HAL_UART_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002f56:	f000 f941 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200009d0 	.word	0x200009d0
 8002f64:	40004400 	.word	0x40004400

08002f68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <MX_USART3_UART_Init+0x5c>)
 8002f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f8e:	220c      	movs	r2, #12
 8002f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_USART3_UART_Init+0x58>)
 8002fac:	f007 fe9a 	bl	800ace4 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fb6:	f000 f911 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000a58 	.word	0x20000a58
 8002fc4:	40004800 	.word	0x40004800

08002fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_DMA_Init+0x38>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <MX_DMA_Init+0x38>)
 8002fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_DMA_Init+0x38>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	2010      	movs	r0, #16
 8002fec:	f002 fcfe 	bl	80059ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ff0:	2010      	movs	r0, #16
 8002ff2:	f002 fd17 	bl	8005a24 <HAL_NVIC_EnableIRQ>

}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <MX_GPIO_Init+0x11c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a40      	ldr	r2, [pc, #256]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b38      	ldr	r3, [pc, #224]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	4b35      	ldr	r3, [pc, #212]	; (8003120 <MX_GPIO_Init+0x11c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <MX_GPIO_Init+0x11c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a28      	ldr	r2, [pc, #160]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <MX_GPIO_Init+0x11c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003098:	4822      	ldr	r0, [pc, #136]	; (8003124 <MX_GPIO_Init+0x120>)
 800309a:	f003 fa77 	bl	800658c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80030a4:	4820      	ldr	r0, [pc, #128]	; (8003128 <MX_GPIO_Init+0x124>)
 80030a6:	f003 fa71 	bl	800658c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 80030aa:	2304      	movs	r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	481b      	ldr	r0, [pc, #108]	; (800312c <MX_GPIO_Init+0x128>)
 80030be:	f003 f8c9 	bl	8006254 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 80030c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	4812      	ldr	r0, [pc, #72]	; (8003124 <MX_GPIO_Init+0x120>)
 80030dc:	f003 f8ba 	bl	8006254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 80030e0:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <MX_GPIO_Init+0x124>)
 80030fa:	f003 f8ab 	bl	8006254 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 80030fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <MX_GPIO_Init+0x12c>)
 8003114:	f003 f89e 	bl	8006254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003118:	bf00      	nop
 800311a:	3728      	adds	r7, #40	; 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	40021000 	.word	0x40021000
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400

08003134 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fe ff07 	bl	8001f50 <TaskSensorData>
  /* USER CODE END 5 */
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f8a2 	bl	800129c <TaskController>
  /* USER CODE END RunTaskController */
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fe fde9 	bl	8001d40 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe fd00 	bl	8001b84 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe fdcb 	bl	8001d30 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe f928 	bl	8001400 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031ca:	f002 fb13 	bl	80057f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40001000 	.word	0x40001000

080031dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031e0:	b672      	cpsid	i
}
 80031e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <Error_Handler+0x8>
	...

080031e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_MspInit+0x4c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a10      	ldr	r2, [pc, #64]	; (8003234 <HAL_MspInit+0x4c>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_MspInit+0x4c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_MspInit+0x4c>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_MspInit+0x4c>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_MspInit+0x4c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	210f      	movs	r1, #15
 8003222:	f06f 0001 	mvn.w	r0, #1
 8003226:	f002 fbe1 	bl	80059ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0aa      	sub	sp, #168	; 0xa8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f00c fc88 	bl	800fb6e <memset>
  if(hi2c->Instance==I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_I2C_MspInit+0xb4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d13c      	bne.n	80032e2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800326c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800326e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003272:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4618      	mov	r0, r3
 800327a:	f004 fc9d 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003284:	f7ff ffaa 	bl	80031dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 80032a0:	23c0      	movs	r3, #192	; 0xc0
 80032a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a6:	2312      	movs	r3, #18
 80032a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032b8:	2304      	movs	r3, #4
 80032ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032c2:	4619      	mov	r1, r3
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <HAL_I2C_MspInit+0xbc>)
 80032c6:	f002 ffc5 	bl	8006254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 80032d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_I2C_MspInit+0xb8>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032e2:	bf00      	nop
 80032e4:	37a8      	adds	r7, #168	; 0xa8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40005400 	.word	0x40005400
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020400 	.word	0x40020400

080032f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 031c 	add.w	r3, r7, #28
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <HAL_SPI_MspInit+0xd8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d128      	bne.n	800336c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 800334a:	23f0      	movs	r3, #240	; 0xf0
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800335a:	2305      	movs	r3, #5
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	481c      	ldr	r0, [pc, #112]	; (80033d8 <HAL_SPI_MspInit+0xe0>)
 8003366:	f002 ff75 	bl	8006254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800336a:	e02d      	b.n	80033c8 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_SPI_MspInit+0xe4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d128      	bne.n	80033c8 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_SPI_MspInit+0xdc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 80033a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033b8:	2305      	movs	r3, #5
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <HAL_SPI_MspInit+0xe8>)
 80033c4:	f002 ff46 	bl	8006254 <HAL_GPIO_Init>
}
 80033c8:	bf00      	nop
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40013000 	.word	0x40013000
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40003800 	.word	0x40003800
 80033e0:	40020400 	.word	0x40020400

080033e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_TIM_Base_MspInit+0xa0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800341e:	e02c      	b.n	800347a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_TIM_Base_MspInit+0xa8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d127      	bne.n	800347a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_TIM_Base_MspInit+0xa4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346a:	2302      	movs	r3, #2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4806      	ldr	r0, [pc, #24]	; (8003490 <HAL_TIM_Base_MspInit+0xac>)
 8003476:	f002 feed 	bl	8006254 <HAL_GPIO_Init>
}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40023800 	.word	0x40023800
 800348c:	40000400 	.word	0x40000400
 8003490:	40020800 	.word	0x40020800

08003494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <HAL_TIM_MspPostInit+0x64>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d11c      	bne.n	80034f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_TIM_MspPostInit+0x68>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_TIM_MspPostInit+0x68>)
 80034bc:	f043 0310 	orr.w	r3, r3, #16
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_TIM_MspPostInit+0x68>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80034ce:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80034d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034e0:	2301      	movs	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <HAL_TIM_MspPostInit+0x6c>)
 80034ec:	f002 feb2 	bl	8006254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40023800 	.word	0x40023800
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0ae      	sub	sp, #184	; 0xb8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800351c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f00c fb22 	bl	800fb6e <memset>
  if(huart->Instance==UART4)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_UART_MspInit+0x238>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d144      	bne.n	80035be <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f004 fb38 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800354e:	f7ff fe45 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003552:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_UART_MspInit+0x23c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8003582:	2303      	movs	r3, #3
 8003584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003594:	2303      	movs	r3, #3
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800359a:	2308      	movs	r3, #8
 800359c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4867      	ldr	r0, [pc, #412]	; (8003744 <HAL_UART_MspInit+0x240>)
 80035a8:	f002 fe54 	bl	8006254 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2106      	movs	r1, #6
 80035b0:	2034      	movs	r0, #52	; 0x34
 80035b2:	f002 fa1b 	bl	80059ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035b6:	2034      	movs	r0, #52	; 0x34
 80035b8:	f002 fa34 	bl	8005a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035bc:	e0b9      	b.n	8003732 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_UART_MspInit+0x244>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d172      	bne.n	80036ae <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80035cc:	2304      	movs	r3, #4
 80035ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 faef 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80035e0:	f7ff fdfc 	bl	80031dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a4f      	ldr	r2, [pc, #316]	; (8003740 <HAL_UART_MspInit+0x23c>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	6313      	str	r3, [r2, #48]	; 0x30
 8003608:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_UART_MspInit+0x23c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8003614:	2360      	movs	r3, #96	; 0x60
 8003616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800362c:	2307      	movs	r3, #7
 800362e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003632:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003636:	4619      	mov	r1, r3
 8003638:	4844      	ldr	r0, [pc, #272]	; (800374c <HAL_UART_MspInit+0x248>)
 800363a:	f002 fe0b 	bl	8006254 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003640:	4a44      	ldr	r2, [pc, #272]	; (8003754 <HAL_UART_MspInit+0x250>)
 8003642:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800364a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_UART_MspInit+0x24c>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_UART_MspInit+0x24c>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003660:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003666:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_UART_MspInit+0x24c>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003678:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367a:	4b35      	ldr	r3, [pc, #212]	; (8003750 <HAL_UART_MspInit+0x24c>)
 800367c:	2200      	movs	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003680:	4833      	ldr	r0, [pc, #204]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003682:	f002 f9dd 	bl	8005a40 <HAL_DMA_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800368c:	f7ff fda6 	bl	80031dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003694:	675a      	str	r2, [r3, #116]	; 0x74
 8003696:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_UART_MspInit+0x24c>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2105      	movs	r1, #5
 80036a0:	2026      	movs	r0, #38	; 0x26
 80036a2:	f002 f9a3 	bl	80059ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036a6:	2026      	movs	r0, #38	; 0x26
 80036a8:	f002 f9bc 	bl	8005a24 <HAL_NVIC_EnableIRQ>
}
 80036ac:	e041      	b.n	8003732 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_UART_MspInit+0x254>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d13c      	bne.n	8003732 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80036be:	2310      	movs	r3, #16
 80036c0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f004 fa76 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80036d2:	f7ff fd83 	bl	80031dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a19      	ldr	r2, [pc, #100]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_UART_MspInit+0x23c>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8003706:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800370a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	2303      	movs	r3, #3
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003720:	2307      	movs	r3, #7
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003726:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800372a:	4619      	mov	r1, r3
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <HAL_UART_MspInit+0x258>)
 800372e:	f002 fd91 	bl	8006254 <HAL_GPIO_Init>
}
 8003732:	bf00      	nop
 8003734:	37b8      	adds	r7, #184	; 0xb8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40004c00 	.word	0x40004c00
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000
 8003748:	40004400 	.word	0x40004400
 800374c:	40020c00 	.word	0x40020c00
 8003750:	20000ae0 	.word	0x20000ae0
 8003754:	40026088 	.word	0x40026088
 8003758:	40004800 	.word	0x40004800
 800375c:	40020800 	.word	0x40020800

08003760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_InitTick+0xe0>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a32      	ldr	r2, [pc, #200]	; (8003840 <HAL_InitTick+0xe0>)
 8003776:	f043 0310 	orr.w	r3, r3, #16
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
 800377c:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_InitTick+0xe0>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003788:	f107 0210 	add.w	r2, r7, #16
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f004 f9de 	bl	8007b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037a2:	f004 f9af 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 80037a6:	6378      	str	r0, [r7, #52]	; 0x34
 80037a8:	e004      	b.n	80037b4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037aa:	f004 f9ab 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 80037ae:	4603      	mov	r3, r0
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_InitTick+0xe4>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	3b01      	subs	r3, #1
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_InitTick+0xe8>)
 80037c4:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_InitTick+0xec>)
 80037c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_InitTick+0xe8>)
 80037ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_InitTick+0xe8>)
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_InitTick+0xe8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_InitTick+0xe8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_InitTick+0xe8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80037e8:	4817      	ldr	r0, [pc, #92]	; (8003848 <HAL_InitTick+0xe8>)
 80037ea:	f005 fc8f 	bl	800910c <HAL_TIM_Base_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80037f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11b      	bne.n	8003834 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037fc:	4812      	ldr	r0, [pc, #72]	; (8003848 <HAL_InitTick+0xe8>)
 80037fe:	f005 fcdd 	bl	80091bc <HAL_TIM_Base_Start_IT>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003810:	2036      	movs	r0, #54	; 0x36
 8003812:	f002 f907 	bl	8005a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d808      	bhi.n	800382e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2036      	movs	r0, #54	; 0x36
 8003822:	f002 f8e3 	bl	80059ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <HAL_InitTick+0xf0>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e002      	b.n	8003834 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003838:	4618      	mov	r0, r3
 800383a:	3738      	adds	r7, #56	; 0x38
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	431bde83 	.word	0x431bde83
 8003848:	20000b7c 	.word	0x20000b7c
 800384c:	40001000 	.word	0x40001000
 8003850:	2000000c 	.word	0x2000000c

08003854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <NMI_Handler+0x4>

0800385a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800385e:	e7fe      	b.n	800385e <HardFault_Handler+0x4>

08003860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003864:	e7fe      	b.n	8003864 <MemManage_Handler+0x4>

08003866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003866:	b480      	push	{r7}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386a:	e7fe      	b.n	800386a <BusFault_Handler+0x4>

0800386c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003870:	e7fe      	b.n	8003870 <UsageFault_Handler+0x4>

08003872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <DMA1_Stream5_IRQHandler+0x10>)
 8003886:	f002 fa7b 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000ae0 	.word	0x20000ae0

08003894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <USART2_IRQHandler+0x10>)
 800389a:	f007 fb7d 	bl	800af98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200009d0 	.word	0x200009d0

080038a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <UART4_IRQHandler+0x10>)
 80038ae:	f007 fb73 	bl	800af98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000948 	.word	0x20000948

080038bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM6_DAC_IRQHandler+0x10>)
 80038c2:	f006 f801 	bl	80098c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000b7c 	.word	0x20000b7c

080038d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return 1;
 80038d4:	2301      	movs	r3, #1
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_kill>:

int _kill(int pid, int sig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038ea:	f00c f9fb 	bl	800fce4 <__errno>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2216      	movs	r2, #22
 80038f2:	601a      	str	r2, [r3, #0]
  return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_exit>:

void _exit (int status)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ffe7 	bl	80038e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003912:	e7fe      	b.n	8003912 <_exit+0x12>

08003914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003926:	f3af 8000 	nop.w
 800392a:	4601      	mov	r1, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	60ba      	str	r2, [r7, #8]
 8003932:	b2ca      	uxtb	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf0      	blt.n	8003926 <_read+0x12>
  }

  return len;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e009      	b.n	8003974 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbf1      	blt.n	8003960 <_write+0x12>
  }
  return len;
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_close>:

int _close(int file)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ae:	605a      	str	r2, [r3, #4]
  return 0;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_isatty>:

int _isatty(int file)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039c6:	2301      	movs	r3, #1
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <_sbrk+0x5c>)
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <_sbrk+0x60>)
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <_sbrk+0x64>)
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <_sbrk+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_sbrk+0x64>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a20:	f00c f960 	bl	800fce4 <__errno>
 8003a24:	4603      	mov	r3, r0
 8003a26:	220c      	movs	r2, #12
 8003a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	e009      	b.n	8003a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <_sbrk+0x64>)
 8003a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a42:	68fb      	ldr	r3, [r7, #12]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20040000 	.word	0x20040000
 8003a50:	00000400 	.word	0x00000400
 8003a54:	20000bc8 	.word	0x20000bc8
 8003a58:	20004a68 	.word	0x20004a68

08003a5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SystemInit+0x20>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <SystemInit+0x20>)
 8003a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b24      	cmp	r3, #36	; 0x24
 8003a9a:	d103      	bne.n	8003aa4 <GPS_validate+0x24>
		i++;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003aa2:	e00c      	b.n	8003abe <GPS_validate+0x3e>
		return 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e047      	b.n	8003b38 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4053      	eors	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
		i++;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3301      	adds	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <GPS_validate+0x5c>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad4:	d002      	beq.n	8003adc <GPS_validate+0x5c>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b4a      	cmp	r3, #74	; 0x4a
 8003ada:	dde5      	ble.n	8003aa8 <GPS_validate+0x28>
	}

	if (i >= 75)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b4a      	cmp	r3, #74	; 0x4a
 8003ae0:	dd01      	ble.n	8003ae6 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e028      	b.n	8003b38 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b2a      	cmp	r3, #42	; 0x2a
 8003af0:	d119      	bne.n	8003b26 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3301      	adds	r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	3302      	adds	r3, #2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	490a      	ldr	r1, [pc, #40]	; (8003b40 <GPS_validate+0xc0>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00b ff98 	bl	800fa4c <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b1c:	7a3a      	ldrb	r2, [r7, #8]
 8003b1e:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d108      	bne.n	8003b36 <GPS_validate+0xb6>
 8003b24:	e001      	b.n	8003b2a <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8003b26:	2300      	movs	r3, #0
 8003b28:	e006      	b.n	8003b38 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b2a:	7a7a      	ldrb	r2, [r7, #9]
 8003b2c:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d101      	bne.n	8003b36 <GPS_validate+0xb6>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <GPS_validate+0xb8>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08013cb4 	.word	0x08013cb4

08003b44 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af08      	add	r7, sp, #32
 8003b4a:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8003b4c:	2206      	movs	r2, #6
 8003b4e:	4964      	ldr	r1, [pc, #400]	; (8003ce0 <GPS_parse+0x19c>)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f00c f814 	bl	800fb7e <strncmp>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d138      	bne.n	8003bce <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <GPS_parse+0x1a0>)
 8003b5e:	9307      	str	r3, [sp, #28]
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <GPS_parse+0x1a4>)
 8003b62:	9306      	str	r3, [sp, #24]
 8003b64:	4b61      	ldr	r3, [pc, #388]	; (8003cec <GPS_parse+0x1a8>)
 8003b66:	9305      	str	r3, [sp, #20]
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <GPS_parse+0x1ac>)
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <GPS_parse+0x1b0>)
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <GPS_parse+0x1b4>)
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <GPS_parse+0x1b8>)
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <GPS_parse+0x1bc>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <GPS_parse+0x1c0>)
 8003b7e:	4a62      	ldr	r2, [pc, #392]	; (8003d08 <GPS_parse+0x1c4>)
 8003b80:	4962      	ldr	r1, [pc, #392]	; (8003d0c <GPS_parse+0x1c8>)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f00b ff82 	bl	800fa8c <siscanf>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f340 80a4 	ble.w	8003cd8 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003b90:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <GPS_parse+0x1cc>)
 8003b92:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b96:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <GPS_parse+0x1cc>)
 8003b98:	7d1b      	ldrb	r3, [r3, #20]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba0:	f000 f8da 	bl	8003d58 <GPS_nmea_to_dec>
 8003ba4:	eef0 7a40 	vmov.f32	s15, s0
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <GPS_parse+0x1cc>)
 8003baa:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <GPS_parse+0x1cc>)
 8003bb0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bb4:	4b56      	ldr	r3, [pc, #344]	; (8003d10 <GPS_parse+0x1cc>)
 8003bb6:	7f1b      	ldrb	r3, [r3, #28]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbe:	f000 f8cb 	bl	8003d58 <GPS_nmea_to_dec>
 8003bc2:	eef0 7a40 	vmov.f32	s15, s0
 8003bc6:	4b52      	ldr	r3, [pc, #328]	; (8003d10 <GPS_parse+0x1cc>)
 8003bc8:	edc3 7a00 	vstr	s15, [r3]
			return;
 8003bcc:	e084      	b.n	8003cd8 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8003bce:	2206      	movs	r2, #6
 8003bd0:	4950      	ldr	r1, [pc, #320]	; (8003d14 <GPS_parse+0x1d0>)
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f00b ffd3 	bl	800fb7e <strncmp>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d123      	bne.n	8003c26 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8003bde:	4b4e      	ldr	r3, [pc, #312]	; (8003d18 <GPS_parse+0x1d4>)
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <GPS_parse+0x1d8>)
 8003be4:	9304      	str	r3, [sp, #16]
 8003be6:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <GPS_parse+0x1dc>)
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <GPS_parse+0x1b4>)
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <GPS_parse+0x1b8>)
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <GPS_parse+0x1bc>)
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <GPS_parse+0x1c0>)
 8003bf8:	4a43      	ldr	r2, [pc, #268]	; (8003d08 <GPS_parse+0x1c4>)
 8003bfa:	494a      	ldr	r1, [pc, #296]	; (8003d24 <GPS_parse+0x1e0>)
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f00b ff45 	bl	800fa8c <siscanf>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dd67      	ble.n	8003cd8 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <GPS_parse+0x1cc>)
 8003c0a:	7d1b      	ldrb	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <GPS_parse+0x1cc>)
 8003c12:	2220      	movs	r2, #32
 8003c14:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <GPS_parse+0x1cc>)
 8003c18:	7f1b      	ldrb	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d157      	bne.n	8003cce <GPS_parse+0x18a>
				GPS.ew = ' ';
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <GPS_parse+0x1cc>)
 8003c20:	2220      	movs	r2, #32
 8003c22:	771a      	strb	r2, [r3, #28]
			return;
 8003c24:	e053      	b.n	8003cce <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8003c26:	2206      	movs	r2, #6
 8003c28:	493f      	ldr	r1, [pc, #252]	; (8003d28 <GPS_parse+0x1e4>)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f00b ffa7 	bl	800fb7e <strncmp>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11f      	bne.n	8003c76 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <GPS_parse+0x1e8>)
 8003c38:	9303      	str	r3, [sp, #12]
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <GPS_parse+0x1c4>)
 8003c3c:	9302      	str	r3, [sp, #8]
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <GPS_parse+0x1b4>)
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <GPS_parse+0x1b8>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <GPS_parse+0x1bc>)
 8003c48:	4a2e      	ldr	r2, [pc, #184]	; (8003d04 <GPS_parse+0x1c0>)
 8003c4a:	4939      	ldr	r1, [pc, #228]	; (8003d30 <GPS_parse+0x1ec>)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f00b ff1d 	bl	800fa8c <siscanf>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	dd3f      	ble.n	8003cd8 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <GPS_parse+0x1cc>)
 8003c5a:	7d1b      	ldrb	r3, [r3, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <GPS_parse+0x122>
				GPS.ns = '?';
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <GPS_parse+0x1cc>)
 8003c62:	223f      	movs	r2, #63	; 0x3f
 8003c64:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <GPS_parse+0x1cc>)
 8003c68:	7f1b      	ldrb	r3, [r3, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d131      	bne.n	8003cd2 <GPS_parse+0x18e>
				GPS.ew = '?';
 8003c6e:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <GPS_parse+0x1cc>)
 8003c70:	223f      	movs	r2, #63	; 0x3f
 8003c72:	771a      	strb	r2, [r3, #28]
			return;
 8003c74:	e02d      	b.n	8003cd2 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8003c76:	2206      	movs	r2, #6
 8003c78:	492e      	ldr	r1, [pc, #184]	; (8003d34 <GPS_parse+0x1f0>)
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f00b ff7f 	bl	800fb7e <strncmp>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d128      	bne.n	8003cd8 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8003c86:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <GPS_parse+0x1f4>)
 8003c88:	9305      	str	r3, [sp, #20]
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <GPS_parse+0x1f8>)
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <GPS_parse+0x1fc>)
 8003c90:	9303      	str	r3, [sp, #12]
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <GPS_parse+0x1dc>)
 8003c94:	9302      	str	r3, [sp, #8]
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <GPS_parse+0x200>)
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <GPS_parse+0x204>)
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <GPS_parse+0x208>)
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <GPS_parse+0x20c>)
 8003ca2:	492c      	ldr	r1, [pc, #176]	; (8003d54 <GPS_parse+0x210>)
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f00b fef1 	bl	800fa8c <siscanf>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dd13      	ble.n	8003cd8 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <GPS_parse+0x1cc>)
 8003cb2:	7d1b      	ldrb	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <GPS_parse+0x17a>
				GPS.ns = '?';
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <GPS_parse+0x1cc>)
 8003cba:	223f      	movs	r2, #63	; 0x3f
 8003cbc:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <GPS_parse+0x1cc>)
 8003cc0:	7f1b      	ldrb	r3, [r3, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <GPS_parse+0x192>
				GPS.ew = '?';
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <GPS_parse+0x1cc>)
 8003cc8:	223f      	movs	r2, #63	; 0x3f
 8003cca:	771a      	strb	r2, [r3, #28]
			return;
 8003ccc:	e003      	b.n	8003cd6 <GPS_parse+0x192>
			return;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <GPS_parse+0x194>
			return;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <GPS_parse+0x194>
			return;
 8003cd6:	bf00      	nop
		}
	}
}
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	08013cbc 	.word	0x08013cbc
 8003ce4:	200003b0 	.word	0x200003b0
 8003ce8:	200003ac 	.word	0x200003ac
 8003cec:	200003a8 	.word	0x200003a8
 8003cf0:	200003a4 	.word	0x200003a4
 8003cf4:	200003a0 	.word	0x200003a0
 8003cf8:	2000039c 	.word	0x2000039c
 8003cfc:	20000398 	.word	0x20000398
 8003d00:	20000394 	.word	0x20000394
 8003d04:	20000390 	.word	0x20000390
 8003d08:	2000038c 	.word	0x2000038c
 8003d0c:	08013cc4 	.word	0x08013cc4
 8003d10:	20000380 	.word	0x20000380
 8003d14:	08013cec 	.word	0x08013cec
 8003d18:	200003bc 	.word	0x200003bc
 8003d1c:	200003b8 	.word	0x200003b8
 8003d20:	200003b4 	.word	0x200003b4
 8003d24:	08013cf4 	.word	0x08013cf4
 8003d28:	08013d14 	.word	0x08013d14
 8003d2c:	200003c0 	.word	0x200003c0
 8003d30:	08013d1c 	.word	0x08013d1c
 8003d34:	08013d38 	.word	0x08013d38
 8003d38:	200003d8 	.word	0x200003d8
 8003d3c:	200003d4 	.word	0x200003d4
 8003d40:	200003d1 	.word	0x200003d1
 8003d44:	200003d0 	.word	0x200003d0
 8003d48:	200003cc 	.word	0x200003cc
 8003d4c:	200003c8 	.word	0x200003c8
 8003d50:	200003c4 	.word	0x200003c4
 8003d54:	08013d40 	.word	0x08013d40

08003d58 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d62:	4603      	mov	r3, r0
 8003d64:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8003d66:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d6a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003dec <GPS_nmea_to_dec+0x94>
 8003d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d76:	ee17 3a90 	vmov	r3, s15
 8003d7a:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2264      	movs	r2, #100	; 0x64
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d94:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8003d98:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d9c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003df0 <GPS_nmea_to_dec+0x98>
 8003da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003da4:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dba:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	2b53      	cmp	r3, #83	; 0x53
 8003dc2:	d002      	beq.n	8003dca <GPS_nmea_to_dec+0x72>
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2b57      	cmp	r3, #87	; 0x57
 8003dc8:	d105      	bne.n	8003dd6 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8003dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dce:	eef1 7a67 	vneg.f32	s15, s15
 8003dd2:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	ee07 3a90 	vmov	s15, r3
}
 8003ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	42c80000 	.word	0x42c80000
 8003df0:	42700000 	.word	0x42700000

08003df4 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8003df8:	2007      	movs	r0, #7
 8003dfa:	f000 f871 	bl	8003ee0 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f000 f8c8 	bl	8003f94 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8003e04:	2005      	movs	r0, #5
 8003e06:	f000 f8e0 	bl	8003fca <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8003e0a:	2002      	movs	r0, #2
 8003e0c:	f000 f8fc 	bl	8004008 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8003e10:	2100      	movs	r1, #0
 8003e12:	2000      	movs	r0, #0
 8003e14:	f000 f84e 	bl	8003eb4 <HMC5883L_setOffset>

	return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8003e26:	2003      	movs	r0, #3
 8003e28:	f000 f946 	bl	80040b8 <HMC5883L_readRegister16>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HMC5883L_readRaw+0x88>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HMC5883L_readRaw+0x8c>)
 8003e40:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8003e44:	2007      	movs	r0, #7
 8003e46:	f000 f937 	bl	80040b8 <HMC5883L_readRegister16>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <HMC5883L_readRaw+0x90>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HMC5883L_readRaw+0x8c>)
 8003e5e:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8003e62:	2005      	movs	r0, #5
 8003e64:	f000 f928 	bl	80040b8 <HMC5883L_readRegister16>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HMC5883L_readRaw+0x8c>)
 8003e74:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <HMC5883L_readRaw+0x8c>)
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	ee06 1a90 	vmov	s13, r1
 8003e8e:	ee07 2a10 	vmov	s14, r2
 8003e92:	ee07 3a90 	vmov	s15, r3
}
 8003e96:	eeb0 0a66 	vmov.f32	s0, s13
 8003e9a:	eef0 0a47 	vmov.f32	s1, s14
 8003e9e:	eeb0 1a67 	vmov.f32	s2, s15
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000308 	.word	0x20000308
 8003eac:	200002fc 	.word	0x200002fc
 8003eb0:	2000030c 	.word	0x2000030c

08003eb4 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8003ebe:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <HMC5883L_setOffset+0x24>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <HMC5883L_setOffset+0x28>)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6013      	str	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000308 	.word	0x20000308
 8003edc:	2000030c 	.word	0x2000030c

08003ee0 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	2b07      	cmp	r3, #7
 8003eee:	d833      	bhi.n	8003f58 <HMC5883L_setRange+0x78>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HMC5883L_setRange+0x18>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f31 	.word	0x08003f31
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f51 	.word	0x08003f51
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HMC5883L_setRange+0x94>)
 8003f1c:	601a      	str	r2, [r3, #0]
	    break;
 8003f1e:	e01c      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HMC5883L_setRange+0x98>)
 8003f24:	601a      	str	r2, [r3, #0]
	    break;
 8003f26:	e018      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f2a:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <HMC5883L_setRange+0x9c>)
 8003f2c:	601a      	str	r2, [r3, #0]
	    break;
 8003f2e:	e014      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <HMC5883L_setRange+0xa0>)
 8003f34:	601a      	str	r2, [r3, #0]
	    break;
 8003f36:	e010      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <HMC5883L_setRange+0xa4>)
 8003f3c:	601a      	str	r2, [r3, #0]
	    break;
 8003f3e:	e00c      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f42:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HMC5883L_setRange+0xa8>)
 8003f44:	601a      	str	r2, [r3, #0]
	    break;
 8003f46:	e008      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <HMC5883L_setRange+0xac>)
 8003f4c:	601a      	str	r2, [r3, #0]
	    break;
 8003f4e:	e004      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HMC5883L_setRange+0x90>)
 8003f52:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <HMC5883L_setRange+0xb0>)
 8003f54:	601a      	str	r2, [r3, #0]
	    break;
 8003f56:	e000      	b.n	8003f5a <HMC5883L_setRange+0x7a>

	default:
	    break;
 8003f58:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	015b      	lsls	r3, r3, #5
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	2001      	movs	r0, #1
 8003f64:	f000 f870 	bl	8004048 <HMC5883L_writeRegister8>
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200002f8 	.word	0x200002f8
 8003f74:	3d958106 	.word	0x3d958106
 8003f78:	3f6b851f 	.word	0x3f6b851f
 8003f7c:	3f9c28f6 	.word	0x3f9c28f6
 8003f80:	3fc28f5c 	.word	0x3fc28f5c
 8003f84:	401147ae 	.word	0x401147ae
 8003f88:	4023d70a 	.word	0x4023d70a
 8003f8c:	4041eb85 	.word	0x4041eb85
 8003f90:	408b3333 	.word	0x408b3333

08003f94 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8003f9e:	2002      	movs	r0, #2
 8003fa0:	f000 f86e 	bl	8004080 <HMC5883L_readRegister8>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f000 f843 	bl	8004048 <HMC5883L_writeRegister8>
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 f853 	bl	8004080 <HMC5883L_readRegister8>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	f023 031c 	bic.w	r3, r3, #28
 8003fe4:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	b25a      	sxtb	r2, r3
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f000 f824 	bl	8004048 <HMC5883L_writeRegister8>
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8004012:	2000      	movs	r0, #0
 8004014:	f000 f834 	bl	8004080 <HMC5883L_readRegister8>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004022:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	b25a      	sxtb	r2, r3
 800402a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402e:	4313      	orrs	r3, r2
 8004030:	b25b      	sxtb	r3, r3
 8004032:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4619      	mov	r1, r3
 8004038:	2000      	movs	r0, #0
 800403a:	f000 f805 	bl	8004048 <HMC5883L_writeRegister8>
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af04      	add	r7, sp, #16
 800404e:	4603      	mov	r3, r0
 8004050:	460a      	mov	r2, r1
 8004052:	71fb      	strb	r3, [r7, #7]
 8004054:	4613      	mov	r3, r2
 8004056:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	b29a      	uxth	r2, r3
 800405c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004060:	9302      	str	r3, [sp, #8]
 8004062:	2301      	movs	r3, #1
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	1dbb      	adds	r3, r7, #6
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2301      	movs	r3, #1
 800406c:	213c      	movs	r1, #60	; 0x3c
 800406e:	4803      	ldr	r0, [pc, #12]	; (800407c <HMC5883L_writeRegister8+0x34>)
 8004070:	f002 fb36 	bl	80066e0 <HAL_I2C_Mem_Write>
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000794 	.word	0x20000794

08004080 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af04      	add	r7, sp, #16
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	b29a      	uxth	r2, r3
 800408e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	2301      	movs	r3, #1
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	f107 030f 	add.w	r3, r7, #15
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	213c      	movs	r1, #60	; 0x3c
 80040a2:	4804      	ldr	r0, [pc, #16]	; (80040b4 <HMC5883L_readRegister8+0x34>)
 80040a4:	f002 fc30 	bl	8006908 <HAL_I2C_Mem_Read>
    return value;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000794 	.word	0x20000794

080040b8 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af04      	add	r7, sp, #16
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	2302      	movs	r3, #2
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	f107 030e 	add.w	r3, r7, #14
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	213c      	movs	r1, #60	; 0x3c
 80040da:	4804      	ldr	r0, [pc, #16]	; (80040ec <HMC5883L_readRegister16+0x34>)
 80040dc:	f002 fc14 	bl	8006908 <HAL_I2C_Mem_Read>
    return value;
 80040e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000794 	.word	0x20000794

080040f0 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <BMP280_initialize+0x7c>)
 8004102:	f002 fa43 	bl	800658c <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f000 f83c 	bl	800418a <BMP280_getID>
 8004112:	4603      	mov	r3, r0
 8004114:	2b58      	cmp	r3, #88	; 0x58
 8004116:	d001      	beq.n	800411c <BMP280_initialize+0x2c>
    {
        return 1;
 8004118:	2301      	movs	r3, #1
 800411a:	e023      	b.n	8004164 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f000 f827 	bl	8004170 <BMP280_reset>
    HAL_Delay(500);
 8004122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004126:	f001 fb85 	bl	8005834 <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 800412a:	2105      	movs	r1, #5
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f000 f8ef 	bl	8004310 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 8004132:	2102      	movs	r1, #2
 8004134:	6838      	ldr	r0, [r7, #0]
 8004136:	f000 f90c 	bl	8004352 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 800413a:	2103      	movs	r1, #3
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f000 f929 	bl	8004394 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 8004142:	2104      	movs	r1, #4
 8004144:	6838      	ldr	r0, [r7, #0]
 8004146:	f000 f966 	bl	8004416 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 800414a:	2100      	movs	r1, #0
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f000 f941 	bl	80043d4 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f000 f826 	bl	80041a4 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8004158:	2232      	movs	r2, #50	; 0x32
 800415a:	2164      	movs	r1, #100	; 0x64
 800415c:	6838      	ldr	r0, [r7, #0]
 800415e:	f000 f89e 	bl	800429e <BMP280_setReferencePressure>

    return 0;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40020c00 	.word	0x40020c00

08004170 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8004178:	22b6      	movs	r2, #182	; 0xb6
 800417a:	21e0      	movs	r1, #224	; 0xe0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa25 	bl	80045cc <BMP280_writeRegister>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 8004192:	21d0      	movs	r1, #208	; 0xd0
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9fd 	bl	8004594 <BMP280_readRegister>
 800419a:	4603      	mov	r3, r0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80041ac:	f107 0208 	add.w	r2, r7, #8
 80041b0:	2318      	movs	r3, #24
 80041b2:	2188      	movs	r1, #136	; 0x88
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fa28 	bl	800460a <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 80041ba:	7a7b      	ldrb	r3, [r7, #9]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	b21a      	sxth	r2, r3
 80041c0:	7a3b      	ldrb	r3, [r7, #8]
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 80041ce:	7afb      	ldrb	r3, [r7, #11]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	7abb      	ldrb	r3, [r7, #10]
 80041d6:	b21b      	sxth	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b21a      	sxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 80041e0:	7b7b      	ldrb	r3, [r7, #13]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	b21a      	sxth	r2, r3
 80041e6:	7b3b      	ldrb	r3, [r7, #12]
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	b21a      	sxth	r2, r3
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	b21b      	sxth	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b21b      	sxth	r3, r3
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 8004206:	7c7b      	ldrb	r3, [r7, #17]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	b21a      	sxth	r2, r3
 800420c:	7c3b      	ldrb	r3, [r7, #16]
 800420e:	b21b      	sxth	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	b21a      	sxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	b21a      	sxth	r2, r3
 800421e:	7cbb      	ldrb	r3, [r7, #18]
 8004220:	b21b      	sxth	r3, r3
 8004222:	4313      	orrs	r3, r2
 8004224:	b21a      	sxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 800422a:	7d7b      	ldrb	r3, [r7, #21]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	b21a      	sxth	r2, r3
 8004230:	7d3b      	ldrb	r3, [r7, #20]
 8004232:	b21b      	sxth	r3, r3
 8004234:	4313      	orrs	r3, r2
 8004236:	b21a      	sxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	b21a      	sxth	r2, r3
 8004242:	7dbb      	ldrb	r3, [r7, #22]
 8004244:	b21b      	sxth	r3, r3
 8004246:	4313      	orrs	r3, r2
 8004248:	b21a      	sxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 800424e:	7e7b      	ldrb	r3, [r7, #25]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	b21a      	sxth	r2, r3
 8004254:	7e3b      	ldrb	r3, [r7, #24]
 8004256:	b21b      	sxth	r3, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	b21a      	sxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8004260:	7efb      	ldrb	r3, [r7, #27]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	b21a      	sxth	r2, r3
 8004266:	7ebb      	ldrb	r3, [r7, #26]
 8004268:	b21b      	sxth	r3, r3
 800426a:	4313      	orrs	r3, r2
 800426c:	b21a      	sxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 8004272:	7f7b      	ldrb	r3, [r7, #29]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	b21a      	sxth	r2, r3
 8004278:	7f3b      	ldrb	r3, [r7, #28]
 800427a:	b21b      	sxth	r3, r3
 800427c:	4313      	orrs	r3, r2
 800427e:	b21a      	sxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8004284:	7ffb      	ldrb	r3, [r7, #31]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	b21a      	sxth	r2, r3
 800428a:	7fbb      	ldrb	r3, [r7, #30]
 800428c:	b21b      	sxth	r3, r3
 800428e:	4313      	orrs	r3, r2
 8004290:	b21a      	sxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8004296:	bf00      	nop
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	807b      	strh	r3, [r7, #2]
 80042aa:	4613      	mov	r3, r2
 80042ac:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80042ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042b2:	f001 fabf 	bl	8005834 <HAL_Delay>
    float sum = 0;
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e012      	b.n	80042e8 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8c8 	bl	8004458 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80042ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80042d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042d6:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 80042da:	787b      	ldrb	r3, [r7, #1]
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 faa9 	bl	8005834 <HAL_Delay>
    for (int i = 0; i < samples; i++)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	dbe8      	blt.n	80042c2 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042fa:	edd7 6a03 	vldr	s13, [r7, #12]
 80042fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800431c:	21f4      	movs	r1, #244	; 0xf4
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f938 	bl	8004594 <BMP280_readRegister>
 8004324:	4603      	mov	r3, r0
 8004326:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8004328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432c:	f023 031c 	bic.w	r3, r3, #28
 8004330:	b25a      	sxtb	r2, r3
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	b25b      	sxtb	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b25b      	sxtb	r3, r3
 800433c:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	461a      	mov	r2, r3
 8004342:	21f4      	movs	r1, #244	; 0xf4
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f941 	bl	80045cc <BMP280_writeRegister>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800435e:	21f4      	movs	r1, #244	; 0xf4
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f917 	bl	8004594 <BMP280_readRegister>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	b25a      	sxtb	r2, r3
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	015b      	lsls	r3, r3, #5
 8004378:	b25b      	sxtb	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b25b      	sxtb	r3, r3
 800437e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	461a      	mov	r2, r3
 8004384:	21f4      	movs	r1, #244	; 0xf4
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f920 	bl	80045cc <BMP280_writeRegister>
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80043a0:	21f4      	movs	r1, #244	; 0xf4
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8f6 	bl	8004594 <BMP280_readRegister>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	f023 0303 	bic.w	r3, r3, #3
 80043b4:	b25a      	sxtb	r2, r3
 80043b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	461a      	mov	r2, r3
 80043c4:	21f4      	movs	r1, #244	; 0xf4
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f900 	bl	80045cc <BMP280_writeRegister>
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80043e0:	21f5      	movs	r1, #245	; 0xf5
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8d6 	bl	8004594 <BMP280_readRegister>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 80043ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	015b      	lsls	r3, r3, #5
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	461a      	mov	r2, r3
 8004406:	21f5      	movs	r1, #245	; 0xf5
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8df 	bl	80045cc <BMP280_writeRegister>
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004422:	21f5      	movs	r1, #245	; 0xf5
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8b5 	bl	8004594 <BMP280_readRegister>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	f023 031c 	bic.w	r3, r3, #28
 8004436:	b25a      	sxtb	r2, r3
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	b25b      	sxtb	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b25b      	sxtb	r3, r3
 8004442:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	461a      	mov	r2, r3
 8004448:	21f5      	movs	r1, #245	; 0xf5
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8be 	bl	80045cc <BMP280_writeRegister>
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8004460:	f107 0208 	add.w	r2, r7, #8
 8004464:	2306      	movs	r3, #6
 8004466:	21f7      	movs	r1, #247	; 0xf7
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8ce 	bl	800460a <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800446e:	7a3b      	ldrb	r3, [r7, #8]
 8004470:	031a      	lsls	r2, r3, #12
 8004472:	7a7b      	ldrb	r3, [r7, #9]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	4313      	orrs	r3, r2
 8004478:	7aba      	ldrb	r2, [r7, #10]
 800447a:	0912      	lsrs	r2, r2, #4
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	031a      	lsls	r2, r3, #12
 8004486:	7b3b      	ldrb	r3, [r7, #12]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4313      	orrs	r3, r2
 800448c:	7b7a      	ldrb	r2, [r7, #13]
 800448e:	0912      	lsrs	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 8004496:	6939      	ldr	r1, [r7, #16]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f917 	bl	80046cc <BMP280_compensate_temperature>
 800449e:	ee07 0a90 	vmov	s15, r0
 80044a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a6:	ee17 0a90 	vmov	r0, s15
 80044aa:	f7fc f875 	bl	8000598 <__aeabi_f2d>
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <BMP280_measure+0x130>)
 80044b4:	f7fc f9f2 	bl	800089c <__aeabi_ddiv>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f7fc fb9a 	bl	8000bf8 <__aeabi_d2f>
 80044c4:	4602      	mov	r2, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f953 	bl	8004778 <BMP280_compensate_pressure>
 80044d2:	ee07 0a90 	vmov	s15, r0
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	ee17 0a90 	vmov	r0, s15
 80044de:	f7fc f85b 	bl	8000598 <__aeabi_f2d>
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <BMP280_measure+0x134>)
 80044e8:	f7fc f9d8 	bl	800089c <__aeabi_ddiv>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7fc fb80 	bl	8000bf8 <__aeabi_d2f>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	edd3 7a01 	vldr	s15, [r3, #4]
 8004504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	dc00      	bgt.n	8004510 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 800450e:	e02c      	b.n	800456a <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	ed93 7a04 	vldr	s14, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	edd3 7a01 	vldr	s15, [r3, #4]
 800451c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004520:	ee16 0a90 	vmov	r0, s13
 8004524:	f7fc f838 	bl	8000598 <__aeabi_f2d>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004578 <BMP280_measure+0x120>
 8004530:	ec43 2b10 	vmov	d0, r2, r3
 8004534:	f00e f90c 	bl	8012750 <pow>
 8004538:	ec53 2b10 	vmov	r2, r3, d0
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	4913      	ldr	r1, [pc, #76]	; (8004590 <BMP280_measure+0x138>)
 8004542:	f7fb fec9 	bl	80002d8 <__aeabi_dsub>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	a30c      	add	r3, pc, #48	; (adr r3, 8004580 <BMP280_measure+0x128>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fc f878 	bl	8000648 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f7fc fb4a 	bl	8000bf8 <__aeabi_d2f>
 8004564:	4602      	mov	r2, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	f3af 8000 	nop.w
 8004578:	1a36e2eb 	.word	0x1a36e2eb
 800457c:	3fc85bc0 	.word	0x3fc85bc0
 8004580:	00000000 	.word	0x00000000
 8004584:	4150e92d 	.word	0x4150e92d
 8004588:	40590000 	.word	0x40590000
 800458c:	40700000 	.word	0x40700000
 8004590:	3ff00000 	.word	0x3ff00000

08004594 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f883 	bl	80046ac <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f855 	bl	800465a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80045b0:	2100      	movs	r1, #0
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f851 	bl	800465a <BMP280_spiReadWrite>
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f865 	bl	800468c <BMP280_spiCSNhigh>
    return value;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
 80045d8:	4613      	mov	r3, r2
 80045da:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f865 	bl	80046ac <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f834 	bl	800465a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 80045f2:	78bb      	ldrb	r3, [r7, #2]
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f82f 	bl	800465a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f845 	bl	800468c <BMP280_spiCSNhigh>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 800460a:	b590      	push	{r4, r7, lr}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	461a      	mov	r2, r3
 8004616:	460b      	mov	r3, r1
 8004618:	72fb      	strb	r3, [r7, #11]
 800461a:	4613      	mov	r3, r2
 800461c:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f844 	bl	80046ac <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	4619      	mov	r1, r3
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f816 	bl	800465a <BMP280_spiReadWrite>
    while (length--)
 800462e:	e008      	b.n	8004642 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8004630:	687c      	ldr	r4, [r7, #4]
 8004632:	1c63      	adds	r3, r4, #1
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	2100      	movs	r1, #0
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f80e 	bl	800465a <BMP280_spiReadWrite>
 800463e:	4603      	mov	r3, r0
 8004640:	7023      	strb	r3, [r4, #0]
    while (length--)
 8004642:	7abb      	ldrb	r3, [r7, #10]
 8004644:	1e5a      	subs	r2, r3, #1
 8004646:	72ba      	strb	r2, [r7, #10]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f1      	bne.n	8004630 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f81d 	bl	800468c <BMP280_spiCSNhigh>
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}

0800465a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af02      	add	r7, sp, #8
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8004666:	23ff      	movs	r3, #255	; 0xff
 8004668:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f107 020f 	add.w	r2, r7, #15
 8004672:	1cf9      	adds	r1, r7, #3
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2301      	movs	r3, #1
 800467c:	f004 f92f 	bl	80088de <HAL_SPI_TransmitReceive>
    return rx_message;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004694:	2201      	movs	r2, #1
 8004696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800469a:	4803      	ldr	r0, [pc, #12]	; (80046a8 <BMP280_spiCSNhigh+0x1c>)
 800469c:	f001 ff76 	bl	800658c <HAL_GPIO_WritePin>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40020c00 	.word	0x40020c00

080046ac <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80046b4:	2200      	movs	r2, #0
 80046b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ba:	4803      	ldr	r0, [pc, #12]	; (80046c8 <BMP280_spiCSNlow+0x1c>)
 80046bc:	f001 ff66 	bl	800658c <HAL_GPIO_WritePin>
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40020c00 	.word	0x40020c00

080046cc <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da00      	bge.n	80046de <BMP280_compensate_temperature+0x12>
 80046dc:	3307      	adds	r3, #7
 80046de:	10db      	asrs	r3, r3, #3
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8b1b      	ldrh	r3, [r3, #24]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da01      	bge.n	80046fc <BMP280_compensate_temperature+0x30>
 80046f8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80046fc:	12db      	asrs	r3, r3, #11
 80046fe:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da00      	bge.n	8004708 <BMP280_compensate_temperature+0x3c>
 8004706:	330f      	adds	r3, #15
 8004708:	111b      	asrs	r3, r3, #4
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8b1b      	ldrh	r3, [r3, #24]
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da00      	bge.n	800471a <BMP280_compensate_temperature+0x4e>
 8004718:	330f      	adds	r3, #15
 800471a:	111b      	asrs	r3, r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8b1b      	ldrh	r3, [r3, #24]
 8004722:	1acb      	subs	r3, r1, r3
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	da01      	bge.n	8004730 <BMP280_compensate_temperature+0x64>
 800472c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004730:	131b      	asrs	r3, r3, #12
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	da03      	bge.n	800474a <BMP280_compensate_temperature+0x7e>
 8004742:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004746:	441a      	add	r2, r3
 8004748:	4613      	mov	r3, r2
 800474a:	139b      	asrs	r3, r3, #14
 800474c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	3380      	adds	r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	da00      	bge.n	800476a <BMP280_compensate_temperature+0x9e>
 8004768:	33ff      	adds	r3, #255	; 0xff
 800476a:	121b      	asrs	r3, r3, #8
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8004778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477c:	b0d6      	sub	sp, #344	; 0x158
 800477e:	af00      	add	r7, sp, #0
 8004780:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8004784:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8004788:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	17da      	asrs	r2, r3, #31
 8004790:	461c      	mov	r4, r3
 8004792:	4615      	mov	r5, r2
 8004794:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8004798:	f145 3bff 	adc.w	fp, r5, #4294967295
 800479c:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 80047a0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047a8:	fb03 f102 	mul.w	r1, r3, r2
 80047ac:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	18ca      	adds	r2, r1, r3
 80047ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047be:	fba3 8903 	umull	r8, r9, r3, r3
 80047c2:	eb02 0309 	add.w	r3, r2, r9
 80047c6:	4699      	mov	r9, r3
 80047c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047cc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80047d0:	b21b      	sxth	r3, r3
 80047d2:	17da      	asrs	r2, r3, #31
 80047d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047d8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047dc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80047e0:	4603      	mov	r3, r0
 80047e2:	fb03 f209 	mul.w	r2, r3, r9
 80047e6:	460b      	mov	r3, r1
 80047e8:	fb08 f303 	mul.w	r3, r8, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	4602      	mov	r2, r0
 80047f0:	fba8 1202 	umull	r1, r2, r8, r2
 80047f4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80047f8:	460a      	mov	r2, r1
 80047fa:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80047fe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004802:	4413      	add	r3, r2
 8004804:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004808:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800480c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8004810:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 8004814:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004818:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800481c:	b21b      	sxth	r3, r3
 800481e:	17da      	asrs	r2, r3, #31
 8004820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004824:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004828:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800482c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004830:	462a      	mov	r2, r5
 8004832:	fb02 f203 	mul.w	r2, r2, r3
 8004836:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800483a:	4621      	mov	r1, r4
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	441a      	add	r2, r3
 8004842:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004846:	4621      	mov	r1, r4
 8004848:	fba3 1301 	umull	r1, r3, r3, r1
 800484c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004850:	460b      	mov	r3, r1
 8004852:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004856:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800486c:	462b      	mov	r3, r5
 800486e:	0459      	lsls	r1, r3, #17
 8004870:	4623      	mov	r3, r4
 8004872:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004876:	4623      	mov	r3, r4
 8004878:	0458      	lsls	r0, r3, #17
 800487a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800487e:	1814      	adds	r4, r2, r0
 8004880:	67bc      	str	r4, [r7, #120]	; 0x78
 8004882:	414b      	adcs	r3, r1
 8004884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004886:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800488a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 800488e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004892:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004896:	b21b      	sxth	r3, r3
 8004898:	17da      	asrs	r2, r3, #31
 800489a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800489e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ae:	00d9      	lsls	r1, r3, #3
 80048b0:	2000      	movs	r0, #0
 80048b2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80048b6:	1814      	adds	r4, r2, r0
 80048b8:	673c      	str	r4, [r7, #112]	; 0x70
 80048ba:	414b      	adcs	r3, r1
 80048bc:	677b      	str	r3, [r7, #116]	; 0x74
 80048be:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80048c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 80048c6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048ca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048ce:	fb03 f102 	mul.w	r1, r3, r2
 80048d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	18ca      	adds	r2, r1, r3
 80048e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048e4:	fba3 1303 	umull	r1, r3, r3, r3
 80048e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80048ec:	460b      	mov	r3, r1
 80048ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f6:	18d3      	adds	r3, r2, r3
 80048f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80048fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004900:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004904:	b21b      	sxth	r3, r3
 8004906:	17da      	asrs	r2, r3, #31
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800490c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004910:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004914:	462b      	mov	r3, r5
 8004916:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800491a:	4642      	mov	r2, r8
 800491c:	fb02 f203 	mul.w	r2, r2, r3
 8004920:	464b      	mov	r3, r9
 8004922:	4621      	mov	r1, r4
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	4622      	mov	r2, r4
 800492c:	4641      	mov	r1, r8
 800492e:	fba2 1201 	umull	r1, r2, r2, r1
 8004932:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004936:	460a      	mov	r2, r1
 8004938:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800493c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004940:	4413      	add	r3, r2
 8004942:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004946:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800494a:	2b00      	cmp	r3, #0
 800494c:	da07      	bge.n	800495e <BMP280_compensate_pressure+0x1e6>
 800494e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004952:	66b9      	str	r1, [r7, #104]	; 0x68
 8004954:	f143 0300 	adc.w	r3, r3, #0
 8004958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800495a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800495e:	f04f 0000 	mov.w	r0, #0
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	0a10      	lsrs	r0, r2, #8
 8004968:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800496c:	1219      	asrs	r1, r3, #8
 800496e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004972:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004976:	b21b      	sxth	r3, r3
 8004978:	17da      	asrs	r2, r3, #31
 800497a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800497e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004982:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004986:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800498a:	464a      	mov	r2, r9
 800498c:	fb02 f203 	mul.w	r2, r2, r3
 8004990:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004994:	4644      	mov	r4, r8
 8004996:	fb04 f303 	mul.w	r3, r4, r3
 800499a:	441a      	add	r2, r3
 800499c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049a0:	4644      	mov	r4, r8
 80049a2:	fba3 4304 	umull	r4, r3, r3, r4
 80049a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049aa:	4623      	mov	r3, r4
 80049ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80049b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80049c6:	464c      	mov	r4, r9
 80049c8:	0323      	lsls	r3, r4, #12
 80049ca:	4644      	mov	r4, r8
 80049cc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80049d0:	4644      	mov	r4, r8
 80049d2:	0322      	lsls	r2, r4, #12
 80049d4:	1884      	adds	r4, r0, r2
 80049d6:	663c      	str	r4, [r7, #96]	; 0x60
 80049d8:	eb41 0303 	adc.w	r3, r1, r3
 80049dc:	667b      	str	r3, [r7, #100]	; 0x64
 80049de:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80049e2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 80049e6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80049ea:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80049ee:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80049f2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80049f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049fa:	8bdb      	ldrh	r3, [r3, #30]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a08:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a12:	4642      	mov	r2, r8
 8004a14:	fb02 f203 	mul.w	r2, r2, r3
 8004a18:	464b      	mov	r3, r9
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	4622      	mov	r2, r4
 8004a24:	4641      	mov	r1, r8
 8004a26:	fba2 1201 	umull	r1, r2, r2, r1
 8004a2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004a2e:	460a      	mov	r2, r1
 8004a30:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004a34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a38:	4413      	add	r3, r2
 8004a3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a3e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da06      	bge.n	8004a54 <BMP280_compensate_pressure+0x2dc>
 8004a46:	1e51      	subs	r1, r2, #1
 8004a48:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a4a:	f143 0301 	adc.w	r3, r3, #1
 8004a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f04f 0100 	mov.w	r1, #0
 8004a5c:	1058      	asrs	r0, r3, #1
 8004a5e:	17d9      	asrs	r1, r3, #31
 8004a60:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8004a64:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e182      	b.n	8004d76 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8004a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a74:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004a78:	17da      	asrs	r2, r3, #31
 8004a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a7e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004a82:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8004a86:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	07d9      	lsls	r1, r3, #31
 8004a94:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8004a98:	07d0      	lsls	r0, r2, #31
 8004a9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004a9e:	1a84      	subs	r4, r0, r2
 8004aa0:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004aa4:	eb61 0303 	sbc.w	r3, r1, r3
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aac:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6439      	str	r1, [r7, #64]	; 0x40
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	647b      	str	r3, [r7, #68]	; 0x44
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ad8:	4649      	mov	r1, r9
 8004ada:	018b      	lsls	r3, r1, #6
 8004adc:	4641      	mov	r1, r8
 8004ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	018a      	lsls	r2, r1, #6
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	1889      	adds	r1, r1, r2
 8004aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aec:	4649      	mov	r1, r9
 8004aee:	eb43 0101 	adc.w	r1, r3, r1
 8004af2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b00:	4649      	mov	r1, r9
 8004b02:	008b      	lsls	r3, r1, #2
 8004b04:	4641      	mov	r1, r8
 8004b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	008a      	lsls	r2, r1, #2
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4622      	mov	r2, r4
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	eb42 0303 	adc.w	r3, r2, r3
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4622      	mov	r2, r4
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	460a      	mov	r2, r1
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b58:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004b5c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004b60:	f7fc f89a 	bl	8000c98 <__aeabi_ldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8004b6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b70:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004b74:	b21b      	sxth	r3, r3
 8004b76:	17da      	asrs	r2, r3, #31
 8004b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b80:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da08      	bge.n	8004b9a <BMP280_compensate_pressure+0x422>
 8004b88:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004b8c:	1851      	adds	r1, r2, r1
 8004b8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b90:	f143 0300 	adc.w	r3, r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0b50      	lsrs	r0, r2, #13
 8004ba4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004ba8:	1359      	asrs	r1, r3, #13
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	fb02 f001 	mul.w	r0, r2, r1
 8004bb8:	4621      	mov	r1, r4
 8004bba:	fb01 f103 	mul.w	r1, r1, r3
 8004bbe:	4401      	add	r1, r0
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	fba0 2302 	umull	r2, r3, r0, r2
 8004bc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bca:	4613      	mov	r3, r2
 8004bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	18cb      	adds	r3, r1, r3
 8004bd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bda:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da08      	bge.n	8004bf4 <BMP280_compensate_pressure+0x47c>
 8004be2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6239      	str	r1, [r7, #32]
 8004bea:	f143 0300 	adc.w	r3, r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bf4:	f04f 0000 	mov.w	r0, #0
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	0b50      	lsrs	r0, r2, #13
 8004bfe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c02:	1359      	asrs	r1, r3, #13
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	fb02 f001 	mul.w	r0, r2, r1
 8004c12:	4621      	mov	r1, r4
 8004c14:	fb01 f103 	mul.w	r1, r1, r3
 8004c18:	4401      	add	r1, r0
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	fba0 2302 	umull	r2, r3, r0, r2
 8004c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c24:	4613      	mov	r3, r2
 8004c26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2e:	18cb      	adds	r3, r1, r3
 8004c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c34:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	da08      	bge.n	8004c4e <BMP280_compensate_pressure+0x4d6>
 8004c3c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004c40:	1851      	adds	r1, r2, r1
 8004c42:	61b9      	str	r1, [r7, #24]
 8004c44:	f143 0300 	adc.w	r3, r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4e:	f04f 0000 	mov.w	r0, #0
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	0e50      	lsrs	r0, r2, #25
 8004c58:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004c5c:	1659      	asrs	r1, r3, #25
 8004c5e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8004c62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004c66:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	17da      	asrs	r2, r3, #31
 8004c6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c72:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c7a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004c7e:	462a      	mov	r2, r5
 8004c80:	fb02 f203 	mul.w	r2, r2, r3
 8004c84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c88:	4621      	mov	r1, r4
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	441a      	add	r2, r3
 8004c90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c94:	4621      	mov	r1, r4
 8004c96:	fba3 1301 	umull	r1, r3, r3, r1
 8004c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cae:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004cb2:	2900      	cmp	r1, #0
 8004cb4:	da07      	bge.n	8004cc6 <BMP280_compensate_pressure+0x54e>
 8004cb6:	4b33      	ldr	r3, [pc, #204]	; (8004d84 <BMP280_compensate_pressure+0x60c>)
 8004cb8:	18c3      	adds	r3, r0, r3
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	f141 0300 	adc.w	r3, r1, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	0cc2      	lsrs	r2, r0, #19
 8004cd0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004cd4:	14cb      	asrs	r3, r1, #19
 8004cd6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8004cda:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004cde:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004ce2:	1884      	adds	r4, r0, r2
 8004ce4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004ce8:	eb41 0303 	adc.w	r3, r1, r3
 8004cec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cf0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004cf4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	1889      	adds	r1, r1, r2
 8004cfc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d00:	4629      	mov	r1, r5
 8004d02:	eb43 0101 	adc.w	r1, r3, r1
 8004d06:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8004d0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da07      	bge.n	8004d22 <BMP280_compensate_pressure+0x5aa>
 8004d12:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	f143 0300 	adc.w	r3, r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	0a10      	lsrs	r0, r2, #8
 8004d2c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004d30:	1219      	asrs	r1, r3, #8
 8004d32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d36:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	17da      	asrs	r2, r3, #31
 8004d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d42:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004d52:	464c      	mov	r4, r9
 8004d54:	0123      	lsls	r3, r4, #4
 8004d56:	4644      	mov	r4, r8
 8004d58:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004d5c:	4644      	mov	r4, r8
 8004d5e:	0122      	lsls	r2, r4, #4
 8004d60:	1884      	adds	r4, r0, r2
 8004d62:	603c      	str	r4, [r7, #0]
 8004d64:	eb41 0303 	adc.w	r3, r1, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d6e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8004d72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	0007ffff 	.word	0x0007ffff

08004d88 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8004d92:	f107 030f 	add.w	r3, r7, #15
 8004d96:	2201      	movs	r2, #1
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	2275      	movs	r2, #117	; 0x75
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8bd 	bl	8004f1e <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b70      	cmp	r3, #112	; 0x70
 8004da8:	d129      	bne.n	8004dfe <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8004daa:	236b      	movs	r3, #107	; 0x6b
 8004dac:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8004dae:	2300      	movs	r3, #0
 8004db0:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004db2:	f107 030d 	add.w	r3, r7, #13
 8004db6:	f107 020e 	add.w	r2, r7, #14
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f88d 	bl	8004edc <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8004dc2:	236a      	movs	r3, #106	; 0x6a
 8004dc4:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004dca:	f107 030d 	add.w	r3, r7, #13
 8004dce:	f107 020e 	add.w	r2, r7, #14
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f881 	bl	8004edc <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004de0:	461a      	mov	r2, r3
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f8d5 	bl	8004f94 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8004df0:	461a      	mov	r2, r3
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f935 	bl	8005064 <MPU_writeGyroFullScaleRange>
        return 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8004dfe:	2300      	movs	r3, #0
    }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b09c      	sub	sp, #112	; 0x70
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004e12:	2201      	movs	r2, #1
 8004e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e18:	482a      	ldr	r0, [pc, #168]	; (8004ec4 <MPU_Init+0xbc>)
 8004e1a:	f001 fbb7 	bl	800658c <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_250DPS;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e34:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <MPU_Init+0xbc>)
 8004e3c:	669a      	str	r2, [r3, #104]	; 0x68
	pMPU9250->attitude.tau = 0.98;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <MPU_Init+0xc0>)
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.dt = 0.004;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <MPU_Init+0xc4>)
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff9b 	bl	8004d88 <MPU_begin>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d023      	beq.n	8004ea0 <MPU_Init+0x98>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8004e58:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <MPU_Init+0xc8>)
 8004e5a:	f107 040c 	add.w	r4, r7, #12
 8004e5e:	461d      	mov	r5, r3
 8004e60:	6828      	ldr	r0, [r5, #0]
 8004e62:	6869      	ldr	r1, [r5, #4]
 8004e64:	68aa      	ldr	r2, [r5, #8]
 8004e66:	68eb      	ldr	r3, [r5, #12]
 8004e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6a:	6928      	ldr	r0, [r5, #16]
 8004e6c:	6969      	ldr	r1, [r5, #20]
 8004e6e:	69aa      	ldr	r2, [r5, #24]
 8004e70:	c407      	stmia	r4!, {r0, r1, r2}
 8004e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e76:	2248      	movs	r2, #72	; 0x48
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f00a fe77 	bl	800fb6e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004e80:	f107 030c 	add.w	r3, r7, #12
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fa1b 	bl	80002c0 <strlen>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	f107 010c 	add.w	r1, r7, #12
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	480f      	ldr	r0, [pc, #60]	; (8004ed4 <MPU_Init+0xcc>)
 8004e98:	f005 ff72 	bl	800ad80 <HAL_UART_Transmit>
		return 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00c      	b.n	8004eba <MPU_Init+0xb2>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8004ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	490c      	ldr	r1, [pc, #48]	; (8004ed8 <MPU_Init+0xd0>)
 8004ea8:	480a      	ldr	r0, [pc, #40]	; (8004ed4 <MPU_Init+0xcc>)
 8004eaa:	f005 ff69 	bl	800ad80 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 10);
 8004eae:	220a      	movs	r2, #10
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f991 	bl	80051da <MPU_calibrateGyro>

	return 0;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3770      	adds	r7, #112	; 0x70
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020c00 	.word	0x40020c00
 8004ec8:	3f7ae148 	.word	0x3f7ae148
 8004ecc:	3b83126f 	.word	0x3b83126f
 8004ed0:	08013d74 	.word	0x08013d74
 8004ed4:	20000a58 	.word	0x20000a58
 8004ed8:	08013d60 	.word	0x08013d60

08004edc <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8004eea:	2100      	movs	r1, #0
 8004eec:	68b8      	ldr	r0, [r7, #8]
 8004eee:	f000 f83e 	bl	8004f6e <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8004ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f003 fa51 	bl	80083a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8004f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f04:	2201      	movs	r2, #1
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f003 fa4a 	bl	80083a2 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004f0e:	2101      	movs	r1, #1
 8004f10:	68b8      	ldr	r0, [r7, #8]
 8004f12:	f000 f82c 	bl	8004f6e <MPU_CS>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	f000 f81c 	bl	8004f6e <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8004f40:	f107 0117 	add.w	r1, r7, #23
 8004f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f48:	2201      	movs	r2, #1
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f003 fa29 	bl	80083a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8004f50:	8c3a      	ldrh	r2, [r7, #32]
 8004f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f003 fb90 	bl	800867e <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004f5e:	2101      	movs	r1, #1
 8004f60:	68b8      	ldr	r0, [r7, #8]
 8004f62:	f000 f804 	bl	8004f6e <MPU_CS>
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	4619      	mov	r1, r3
 8004f88:	f001 fb00 	bl	800658c <HAL_GPIO_WritePin>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 8004fa2:	231c      	movs	r3, #28
 8004fa4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d847      	bhi.n	800503c <MPU_writeAccFullScaleRange+0xa8>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <MPU_writeAccFullScaleRange+0x20>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fe3 	.word	0x08004fe3
 8004fbc:	08005001 	.word	0x08005001
 8004fc0:	0800501f 	.word	0x0800501f
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8004fca:	615a      	str	r2, [r3, #20]
        val = 0x00;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004fd0:	f107 0316 	add.w	r3, r7, #22
 8004fd4:	f107 0217 	add.w	r2, r7, #23
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ff7e 	bl	8004edc <MPU_REG_WRITE>
        break;
 8004fe0:	e03b      	b.n	800505a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8004fe8:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8004fea:	2308      	movs	r3, #8
 8004fec:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004fee:	f107 0316 	add.w	r3, r7, #22
 8004ff2:	f107 0217 	add.w	r2, r7, #23
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff ff6f 	bl	8004edc <MPU_REG_WRITE>
        break;
 8004ffe:	e02c      	b.n	800505a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005006:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8005008:	2310      	movs	r3, #16
 800500a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800500c:	f107 0316 	add.w	r3, r7, #22
 8005010:	f107 0217 	add.w	r2, r7, #23
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ff60 	bl	8004edc <MPU_REG_WRITE>
        break;
 800501c:	e01d      	b.n	800505a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005024:	615a      	str	r2, [r3, #20]
        val = 0x18;
 8005026:	2318      	movs	r3, #24
 8005028:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800502a:	f107 0316 	add.w	r3, r7, #22
 800502e:	f107 0217 	add.w	r2, r7, #23
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff ff51 	bl	8004edc <MPU_REG_WRITE>
        break;
 800503a:	e00e      	b.n	800505a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005042:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8005044:	2308      	movs	r3, #8
 8005046:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005048:	f107 0316 	add.w	r3, r7, #22
 800504c:	f107 0217 	add.w	r2, r7, #23
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ff42 	bl	8004edc <MPU_REG_WRITE>
        break;
 8005058:	bf00      	nop
    }
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop

08005064 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 8005072:	231b      	movs	r3, #27
 8005074:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d843      	bhi.n	8005104 <MPU_writeGyroFullScaleRange+0xa0>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <MPU_writeGyroFullScaleRange+0x20>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050e9 	.word	0x080050e9
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4a24      	ldr	r2, [pc, #144]	; (8005128 <MPU_writeGyroFullScaleRange+0xc4>)
 8005098:	619a      	str	r2, [r3, #24]
        val = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800509e:	f107 0316 	add.w	r3, r7, #22
 80050a2:	f107 0217 	add.w	r2, r7, #23
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff17 	bl	8004edc <MPU_REG_WRITE>
        break;
 80050ae:	e037      	b.n	8005120 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <MPU_writeGyroFullScaleRange+0xc8>)
 80050b4:	619a      	str	r2, [r3, #24]
        val = 0x08;
 80050b6:	2308      	movs	r3, #8
 80050b8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050ba:	f107 0316 	add.w	r3, r7, #22
 80050be:	f107 0217 	add.w	r2, r7, #23
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff09 	bl	8004edc <MPU_REG_WRITE>
        break;
 80050ca:	e029      	b.n	8005120 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a18      	ldr	r2, [pc, #96]	; (8005130 <MPU_writeGyroFullScaleRange+0xcc>)
 80050d0:	619a      	str	r2, [r3, #24]
        val = 0x10;
 80050d2:	2310      	movs	r3, #16
 80050d4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050d6:	f107 0316 	add.w	r3, r7, #22
 80050da:	f107 0217 	add.w	r2, r7, #23
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fefb 	bl	8004edc <MPU_REG_WRITE>
        break;
 80050e6:	e01b      	b.n	8005120 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <MPU_writeGyroFullScaleRange+0xd0>)
 80050ec:	619a      	str	r2, [r3, #24]
        val = 0x18;
 80050ee:	2318      	movs	r3, #24
 80050f0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050f2:	f107 0316 	add.w	r3, r7, #22
 80050f6:	f107 0217 	add.w	r2, r7, #23
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff feed 	bl	8004edc <MPU_REG_WRITE>
        break;
 8005102:	e00d      	b.n	8005120 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a09      	ldr	r2, [pc, #36]	; (800512c <MPU_writeGyroFullScaleRange+0xc8>)
 8005108:	619a      	str	r2, [r3, #24]
        val = 0x08;
 800510a:	2308      	movs	r3, #8
 800510c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800510e:	f107 0316 	add.w	r3, r7, #22
 8005112:	f107 0217 	add.w	r2, r7, #23
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fedf 	bl	8004edc <MPU_REG_WRITE>
        break;
 800511e:	bf00      	nop
    }
}
 8005120:	bf00      	nop
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	43030000 	.word	0x43030000
 800512c:	42830000 	.word	0x42830000
 8005130:	42033333 	.word	0x42033333
 8005134:	41833333 	.word	0x41833333

08005138 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08e      	sub	sp, #56	; 0x38
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	2226      	movs	r2, #38	; 0x26
 8005148:	9200      	str	r2, [sp, #0]
 800514a:	223b      	movs	r2, #59	; 0x3b
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fee5 	bl	8004f1e <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 8005154:	7a3b      	ldrb	r3, [r7, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	b21a      	sxth	r2, r3
 800515a:	7a7b      	ldrb	r3, [r7, #9]
 800515c:	b21b      	sxth	r3, r3
 800515e:	4313      	orrs	r3, r2
 8005160:	b21a      	sxth	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 8005166:	7abb      	ldrb	r3, [r7, #10]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	b21a      	sxth	r2, r3
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	b21b      	sxth	r3, r3
 8005170:	4313      	orrs	r3, r2
 8005172:	b21a      	sxth	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 8005178:	7b3b      	ldrb	r3, [r7, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	b21a      	sxth	r2, r3
 800517e:	7b7b      	ldrb	r3, [r7, #13]
 8005180:	b21b      	sxth	r3, r3
 8005182:	4313      	orrs	r3, r2
 8005184:	b21a      	sxth	r2, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800518a:	7bbb      	ldrb	r3, [r7, #14]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b21a      	sxth	r2, r3
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	b21b      	sxth	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b21a      	sxth	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	80da      	strh	r2, [r3, #6]

    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 800519c:	7c3b      	ldrb	r3, [r7, #16]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	7c7b      	ldrb	r3, [r7, #17]
 80051a4:	b21b      	sxth	r3, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 80051ae:	7cbb      	ldrb	r3, [r7, #18]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	b21b      	sxth	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 80051c0:	7d3b      	ldrb	r3, [r7, #20]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	7d7b      	ldrb	r3, [r7, #21]
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 80051d2:	bf00      	nop
 80051d4:	3730      	adds	r7, #48	; 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b088      	sub	sp, #32
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 80051fa:	2301      	movs	r3, #1
 80051fc:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80051fe:	2300      	movs	r3, #0
 8005200:	827b      	strh	r3, [r7, #18]
 8005202:	e01e      	b.n	8005242 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff ff96 	bl	8005138 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005212:	461a      	mov	r2, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005220:	461a      	mov	r2, r3
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800522e:	461a      	mov	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8005236:	2003      	movs	r0, #3
 8005238:	f000 fafc 	bl	8005834 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800523c:	8a7b      	ldrh	r3, [r7, #18]
 800523e:	3301      	adds	r3, #1
 8005240:	827b      	strh	r3, [r7, #18]
 8005242:	8a7a      	ldrh	r2, [r7, #18]
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3dc      	bcc.n	8005204 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800525e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800527c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80052a4:	bf00      	nop
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff3b 	bl	8005138 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80052d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80052f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = pMPU9250->rawData.temp / TEMP_SENS + 21;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f926 	bl	8000574 <__aeabi_i2d>
 8005328:	a336      	add	r3, pc, #216	; (adr r3, 8005404 <MPU_readProcessedData+0x154>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb fab5 	bl	800089c <__aeabi_ddiv>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <MPU_readProcessedData+0x150>)
 8005340:	f7fa ffcc 	bl	80002dc <__adddf3>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f7fb fc54 	bl	8000bf8 <__aeabi_d2f>
 8005350:	4602      	mov	r2, r0
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	629a      	str	r2, [r3, #40]	; 0x28

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800536a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80053a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	ed93 7a06 	vldr	s14, [r3, #24]
 80053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	40350000 	.word	0x40350000
 8005404:	851eb852 	.word	0x851eb852
 8005408:	4074ddeb 	.word	0x4074ddeb

0800540c <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HCSR04_Init+0x94>)
 800541a:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005422:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM1;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <HCSR04_Init+0x98>)
 8005428:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2208      	movs	r2, #8
 800542e:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 16;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2210      	movs	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800544c:	e019      	b.n	8005482 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d104      	bne.n	8005460 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800545e:	e010      	b.n	8005482 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d104      	bne.n	8005472 <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2204      	movs	r2, #4
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005470:	e007      	b.n	8005482 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d103      	bne.n	8005482 <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f003 fe9a 	bl	80091bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4619      	mov	r1, r3
 800548e:	6838      	ldr	r0, [r7, #0]
 8005490:	f004 f8ca 	bl	8009628 <HAL_TIM_IC_Start_IT>

	return 0;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40020c00 	.word	0x40020c00
 80054a4:	40010000 	.word	0x40010000

080054a8 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	f040 812e 	bne.w	8005720 <HCSR04_TMR_IC_ISR+0x278>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	7f1a      	ldrb	r2, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ce:	429a      	cmp	r2, r3
 80054d0:	f040 8126 	bne.w	8005720 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7d5b      	ldrb	r3, [r3, #21]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d16d      	bne.n	80055b8 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4619      	mov	r1, r3
 80054e2:	6838      	ldr	r0, [r7, #0]
 80054e4:	f004 fd8a 	bl	8009ffc <HAL_TIM_ReadCapturedValue>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <HCSR04_TMR_IC_ISR+0x66>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020a 	bic.w	r2, r2, #10
 800550a:	621a      	str	r2, [r3, #32]
 800550c:	e021      	b.n	8005552 <HCSR04_TMR_IC_ISR+0xaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d108      	bne.n	8005528 <HCSR04_TMR_IC_ISR+0x80>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005524:	6213      	str	r3, [r2, #32]
 8005526:	e014      	b.n	8005552 <HCSR04_TMR_IC_ISR+0xaa>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d108      	bne.n	8005542 <HCSR04_TMR_IC_ISR+0x9a>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800553e:	6213      	str	r3, [r2, #32]
 8005540:	e007      	b.n	8005552 <HCSR04_TMR_IC_ISR+0xaa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005550:	6213      	str	r3, [r2, #32]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <HCSR04_TMR_IC_ISR+0xc4>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0202 	orr.w	r2, r2, #2
 8005568:	621a      	str	r2, [r3, #32]
 800556a:	e021      	b.n	80055b0 <HCSR04_TMR_IC_ISR+0x108>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d108      	bne.n	8005586 <HCSR04_TMR_IC_ISR+0xde>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	f043 0320 	orr.w	r3, r3, #32
 8005582:	6213      	str	r3, [r2, #32]
 8005584:	e014      	b.n	80055b0 <HCSR04_TMR_IC_ISR+0x108>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b08      	cmp	r3, #8
 800558c:	d108      	bne.n	80055a0 <HCSR04_TMR_IC_ISR+0xf8>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800559c:	6213      	str	r3, [r2, #32]
 800559e:	e007      	b.n	80055b0 <HCSR04_TMR_IC_ISR+0x108>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ae:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 80055b6:	e0b3      	b.n	8005720 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7d5b      	ldrb	r3, [r3, #21]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 80af 	bne.w	8005720 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4619      	mov	r1, r3
 80055da:	6838      	ldr	r0, [r7, #0]
 80055dc:	f004 fd0e 	bl	8009ffc <HAL_TIM_ReadCapturedValue>
 80055e0:	4602      	mov	r2, r0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d207      	bcs.n	8005602 <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	1ad2      	subs	r2, r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005600:	e00f      	b.n	8005622 <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	429a      	cmp	r2, r3
 800560c:	d209      	bcs.n	8005622 <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800561c:	4413      	add	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800562e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005728 <HCSR04_TMR_IC_ISR+0x280>
 8005632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005636:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800572c <HCSR04_TMR_IC_ISR+0x284>
 800563a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800563e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005642:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800565a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d108      	bne.n	8005684 <HCSR04_TMR_IC_ISR+0x1dc>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020a 	bic.w	r2, r2, #10
 8005680:	621a      	str	r2, [r3, #32]
 8005682:	e021      	b.n	80056c8 <HCSR04_TMR_IC_ISR+0x220>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d108      	bne.n	800569e <HCSR04_TMR_IC_ISR+0x1f6>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569a:	6213      	str	r3, [r2, #32]
 800569c:	e014      	b.n	80056c8 <HCSR04_TMR_IC_ISR+0x220>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d108      	bne.n	80056b8 <HCSR04_TMR_IC_ISR+0x210>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056b4:	6213      	str	r3, [r2, #32]
 80056b6:	e007      	b.n	80056c8 <HCSR04_TMR_IC_ISR+0x220>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056c6:	6213      	str	r3, [r2, #32]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HCSR04_TMR_IC_ISR+0x236>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a12      	ldr	r2, [r2, #32]
 80056da:	621a      	str	r2, [r3, #32]
 80056dc:	e01b      	b.n	8005716 <HCSR04_TMR_IC_ISR+0x26e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d106      	bne.n	80056f4 <HCSR04_TMR_IC_ISR+0x24c>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	6213      	str	r3, [r2, #32]
 80056f2:	e010      	b.n	8005716 <HCSR04_TMR_IC_ISR+0x26e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d106      	bne.n	800570a <HCSR04_TMR_IC_ISR+0x262>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	6213      	str	r3, [r2, #32]
 8005708:	e005      	b.n	8005716 <HCSR04_TMR_IC_ISR+0x26e>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HCSR04_TMR_IC_ISR+0x288>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f007 f968 	bl	800c9f0 <osSemaphoreRelease>
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	447a0000 	.word	0x447a0000
 800572c:	43aa0000 	.word	0x43aa0000
 8005730:	20000b6c 	.word	0x20000b6c

08005734 <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	889b      	ldrh	r3, [r3, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	4619      	mov	r1, r3
 8005748:	f000 ff20 	bl	800658c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800574c:	2001      	movs	r0, #1
 800574e:	f000 f871 	bl	8005834 <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	889b      	ldrh	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	4619      	mov	r1, r3
 800575e:	f000 ff15 	bl	800658c <HAL_GPIO_WritePin>
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	ee07 3a90 	vmov	s15, r3
}
 800577a:	eeb0 0a67 	vmov.f32	s0, s15
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800578c:	480d      	ldr	r0, [pc, #52]	; (80057c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800578e:	490e      	ldr	r1, [pc, #56]	; (80057c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005794:	e002      	b.n	800579c <LoopCopyDataInit>

08005796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800579a:	3304      	adds	r3, #4

0800579c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800579c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800579e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057a0:	d3f9      	bcc.n	8005796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057a4:	4c0b      	ldr	r4, [pc, #44]	; (80057d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057a8:	e001      	b.n	80057ae <LoopFillZerobss>

080057aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057ac:	3204      	adds	r2, #4

080057ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057b0:	d3fb      	bcc.n	80057aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057b2:	f7fe f953 	bl	8003a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057b6:	f00a fa9b 	bl	800fcf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ba:	f7fc ff3b 	bl	8002634 <main>
  bx  lr    
 80057be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057c0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80057c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057c8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80057cc:	080141c8 	.word	0x080141c8
  ldr r2, =_sbss
 80057d0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80057d4:	20004a68 	.word	0x20004a68

080057d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057d8:	e7fe      	b.n	80057d8 <ADC_IRQHandler>

080057da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057de:	2003      	movs	r0, #3
 80057e0:	f000 f8f9 	bl	80059d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057e4:	200f      	movs	r0, #15
 80057e6:	f7fd ffbb 	bl	8003760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057ea:	f7fd fcfd 	bl	80031e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_IncTick+0x20>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_IncTick+0x24>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4413      	add	r3, r2
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <HAL_IncTick+0x24>)
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010
 8005818:	20000bcc 	.word	0x20000bcc

0800581c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return uwTick;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <HAL_GetTick+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000bcc 	.word	0x20000bcc

08005834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800583c:	f7ff ffee 	bl	800581c <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d005      	beq.n	800585a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_Delay+0x44>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800585a:	bf00      	nop
 800585c:	f7ff ffde 	bl	800581c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d8f7      	bhi.n	800585c <HAL_Delay+0x28>
  {
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000010 	.word	0x20000010

0800587c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <__NVIC_SetPriorityGrouping+0x40>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005898:	4013      	ands	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <__NVIC_SetPriorityGrouping+0x44>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058aa:	4a04      	ldr	r2, [pc, #16]	; (80058bc <__NVIC_SetPriorityGrouping+0x40>)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	60d3      	str	r3, [r2, #12]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	e000ed00 	.word	0xe000ed00
 80058c0:	05fa0000 	.word	0x05fa0000

080058c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <__NVIC_GetPriorityGrouping+0x18>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 0307 	and.w	r3, r3, #7
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db0b      	blt.n	800590a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	f003 021f 	and.w	r2, r3, #31
 80058f8:	4907      	ldr	r1, [pc, #28]	; (8005918 <__NVIC_EnableIRQ+0x38>)
 80058fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2001      	movs	r0, #1
 8005902:	fa00 f202 	lsl.w	r2, r0, r2
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000e100 	.word	0xe000e100

0800591c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592c:	2b00      	cmp	r3, #0
 800592e:	db0a      	blt.n	8005946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	490c      	ldr	r1, [pc, #48]	; (8005968 <__NVIC_SetPriority+0x4c>)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	0112      	lsls	r2, r2, #4
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	440b      	add	r3, r1
 8005940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005944:	e00a      	b.n	800595c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4908      	ldr	r1, [pc, #32]	; (800596c <__NVIC_SetPriority+0x50>)
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	3b04      	subs	r3, #4
 8005954:	0112      	lsls	r2, r2, #4
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	440b      	add	r3, r1
 800595a:	761a      	strb	r2, [r3, #24]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000e100 	.word	0xe000e100
 800596c:	e000ed00 	.word	0xe000ed00

08005970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	; 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f1c3 0307 	rsb	r3, r3, #7
 800598a:	2b04      	cmp	r3, #4
 800598c:	bf28      	it	cs
 800598e:	2304      	movcs	r3, #4
 8005990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3304      	adds	r3, #4
 8005996:	2b06      	cmp	r3, #6
 8005998:	d902      	bls.n	80059a0 <NVIC_EncodePriority+0x30>
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3b03      	subs	r3, #3
 800599e:	e000      	b.n	80059a2 <NVIC_EncodePriority+0x32>
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	401a      	ands	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b8:	f04f 31ff 	mov.w	r1, #4294967295
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	43d9      	mvns	r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c8:	4313      	orrs	r3, r2
         );
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ff4c 	bl	800587c <__NVIC_SetPriorityGrouping>
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059fe:	f7ff ff61 	bl	80058c4 <__NVIC_GetPriorityGrouping>
 8005a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f7ff ffb1 	bl	8005970 <NVIC_EncodePriority>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ff80 	bl	800591c <__NVIC_SetPriority>
}
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff ff54 	bl	80058e0 <__NVIC_EnableIRQ>
}
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a4c:	f7ff fee6 	bl	800581c <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e099      	b.n	8005b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a7c:	e00f      	b.n	8005a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a7e:	f7ff fecd 	bl	800581c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b05      	cmp	r3, #5
 8005a8a:	d908      	bls.n	8005a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2203      	movs	r2, #3
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e078      	b.n	8005b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e8      	bne.n	8005a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <HAL_DMA_Init+0x158>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d107      	bne.n	8005b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	4313      	orrs	r3, r2
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d117      	bne.n	8005b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00e      	beq.n	8005b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fb09 	bl	800615c <DMA_CheckFifoParam>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2240      	movs	r2, #64	; 0x40
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e016      	b.n	8005b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fac0 	bl	80060f0 <DMA_CalcBaseAndBitshift>
 8005b70:	4603      	mov	r3, r0
 8005b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	223f      	movs	r2, #63	; 0x3f
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e010803f 	.word	0xe010803f

08005b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_Start_IT+0x26>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e048      	b.n	8005c54 <HAL_DMA_Start_IT+0xb8>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d137      	bne.n	8005c46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa52 	bl	8006094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	223f      	movs	r2, #63	; 0x3f
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0216 	orr.w	r2, r2, #22
 8005c0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e005      	b.n	8005c52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c6a:	f7ff fdd7 	bl	800581c <HAL_GetTick>
 8005c6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d008      	beq.n	8005c8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e052      	b.n	8005d34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0216 	bic.w	r2, r2, #22
 8005c9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <HAL_DMA_Abort+0x62>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0208 	bic.w	r2, r2, #8
 8005ccc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cde:	e013      	b.n	8005d08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ce0:	f7ff fd9c 	bl	800581c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d90c      	bls.n	8005d08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e015      	b.n	8005d34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e4      	bne.n	8005ce0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	223f      	movs	r2, #63	; 0x3f
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d004      	beq.n	8005d5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e00c      	b.n	8005d74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2205      	movs	r2, #5
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005d8c:	4b8e      	ldr	r3, [pc, #568]	; (8005fc8 <HAL_DMA_IRQHandler+0x248>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a8e      	ldr	r2, [pc, #568]	; (8005fcc <HAL_DMA_IRQHandler+0x24c>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	0a9b      	lsrs	r3, r3, #10
 8005d98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005daa:	2208      	movs	r2, #8
 8005dac:	409a      	lsls	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01a      	beq.n	8005dec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0204 	bic.w	r2, r2, #4
 8005dd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	2208      	movs	r2, #8
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0201 	orr.w	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	2204      	movs	r2, #4
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d012      	beq.n	8005e58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	2204      	movs	r2, #4
 8005e46:	409a      	lsls	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e50:	f043 0204 	orr.w	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d043      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d03c      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d108      	bne.n	8005eb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d024      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
 8005eae:	e01f      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01b      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4798      	blx	r3
 8005ec0:	e016      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0208 	bic.w	r2, r2, #8
 8005ede:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 808f 	beq.w	8006020 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8087 	beq.w	8006020 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	2220      	movs	r2, #32
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d136      	bne.n	8005f98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0216 	bic.w	r2, r2, #22
 8005f38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <HAL_DMA_IRQHandler+0x1da>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0208 	bic.w	r2, r2, #8
 8005f68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	223f      	movs	r2, #63	; 0x3f
 8005f70:	409a      	lsls	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d07e      	beq.n	800608c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
        }
        return;
 8005f96:	e079      	b.n	800608c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d031      	beq.n	8006020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e02c      	b.n	8006020 <HAL_DMA_IRQHandler+0x2a0>
 8005fc6:	bf00      	nop
 8005fc8:	20000008 	.word	0x20000008
 8005fcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d023      	beq.n	8006020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4798      	blx	r3
 8005fe0:	e01e      	b.n	8006020 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10f      	bne.n	8006010 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0210 	bic.w	r2, r2, #16
 8005ffe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	2b00      	cmp	r3, #0
 8006026:	d032      	beq.n	800608e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d022      	beq.n	800607a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2205      	movs	r2, #5
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	3301      	adds	r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	429a      	cmp	r2, r3
 8006056:	d307      	bcc.n	8006068 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f2      	bne.n	800604c <HAL_DMA_IRQHandler+0x2cc>
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006068:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	e000      	b.n	800608e <HAL_DMA_IRQHandler+0x30e>
        return;
 800608c:	bf00      	nop
    }
  }
}
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d108      	bne.n	80060d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060d2:	e007      	b.n	80060e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	3b10      	subs	r3, #16
 8006100:	4a13      	ldr	r2, [pc, #76]	; (8006150 <DMA_CalcBaseAndBitshift+0x60>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <DMA_CalcBaseAndBitshift+0x64>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b03      	cmp	r3, #3
 800611c:	d908      	bls.n	8006130 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <DMA_CalcBaseAndBitshift+0x68>)
 8006126:	4013      	ands	r3, r2
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	659a      	str	r2, [r3, #88]	; 0x58
 800612e:	e006      	b.n	800613e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <DMA_CalcBaseAndBitshift+0x68>)
 8006138:	4013      	ands	r3, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	aaaaaaab 	.word	0xaaaaaaab
 8006154:	08013dbc 	.word	0x08013dbc
 8006158:	fffffc00 	.word	0xfffffc00

0800615c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d11f      	bne.n	80061b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d856      	bhi.n	800622a <DMA_CheckFifoParam+0xce>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <DMA_CheckFifoParam+0x28>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006195 	.word	0x08006195
 8006188:	080061a7 	.word	0x080061a7
 800618c:	08006195 	.word	0x08006195
 8006190:	0800622b 	.word	0x0800622b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d046      	beq.n	800622e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a4:	e043      	b.n	800622e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ae:	d140      	bne.n	8006232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b4:	e03d      	b.n	8006232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061be:	d121      	bne.n	8006204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d837      	bhi.n	8006236 <DMA_CheckFifoParam+0xda>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <DMA_CheckFifoParam+0x70>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061e3 	.word	0x080061e3
 80061d4:	080061dd 	.word	0x080061dd
 80061d8:	080061f5 	.word	0x080061f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      break;
 80061e0:	e030      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d025      	beq.n	800623a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f2:	e022      	b.n	800623a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061fc:	d11f      	bne.n	800623e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006202:	e01c      	b.n	800623e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d903      	bls.n	8006212 <DMA_CheckFifoParam+0xb6>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d003      	beq.n	8006218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006210:	e018      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
      break;
 8006216:	e015      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e00b      	b.n	8006242 <DMA_CheckFifoParam+0xe6>
      break;
 800622a:	bf00      	nop
 800622c:	e00a      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;
 800622e:	bf00      	nop
 8006230:	e008      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;
 8006232:	bf00      	nop
 8006234:	e006      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;   
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <DMA_CheckFifoParam+0xe8>
      break;
 8006242:	bf00      	nop
    }
  } 
  
  return status; 
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e169      	b.n	8006548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006274:	2201      	movs	r2, #1
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4013      	ands	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	429a      	cmp	r2, r3
 800628e:	f040 8158 	bne.w	8006542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d005      	beq.n	80062aa <HAL_GPIO_Init+0x56>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d130      	bne.n	800630c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	2203      	movs	r2, #3
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062e0:	2201      	movs	r2, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 0201 	and.w	r2, r3, #1
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d017      	beq.n	8006348 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	2203      	movs	r2, #3
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d123      	bne.n	800639c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	08da      	lsrs	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3208      	adds	r2, #8
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	220f      	movs	r2, #15
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	08da      	lsrs	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3208      	adds	r2, #8
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	2203      	movs	r2, #3
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0203 	and.w	r2, r3, #3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80b2 	beq.w	8006542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063de:	4b60      	ldr	r3, [pc, #384]	; (8006560 <HAL_GPIO_Init+0x30c>)
 80063e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e2:	4a5f      	ldr	r2, [pc, #380]	; (8006560 <HAL_GPIO_Init+0x30c>)
 80063e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063e8:	6453      	str	r3, [r2, #68]	; 0x44
 80063ea:	4b5d      	ldr	r3, [pc, #372]	; (8006560 <HAL_GPIO_Init+0x30c>)
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063f6:	4a5b      	ldr	r2, [pc, #364]	; (8006564 <HAL_GPIO_Init+0x310>)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	3302      	adds	r3, #2
 80063fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006402:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	220f      	movs	r2, #15
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a52      	ldr	r2, [pc, #328]	; (8006568 <HAL_GPIO_Init+0x314>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02b      	beq.n	800647a <HAL_GPIO_Init+0x226>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a51      	ldr	r2, [pc, #324]	; (800656c <HAL_GPIO_Init+0x318>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d025      	beq.n	8006476 <HAL_GPIO_Init+0x222>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a50      	ldr	r2, [pc, #320]	; (8006570 <HAL_GPIO_Init+0x31c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01f      	beq.n	8006472 <HAL_GPIO_Init+0x21e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a4f      	ldr	r2, [pc, #316]	; (8006574 <HAL_GPIO_Init+0x320>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d019      	beq.n	800646e <HAL_GPIO_Init+0x21a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a4e      	ldr	r2, [pc, #312]	; (8006578 <HAL_GPIO_Init+0x324>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_GPIO_Init+0x216>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a4d      	ldr	r2, [pc, #308]	; (800657c <HAL_GPIO_Init+0x328>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00d      	beq.n	8006466 <HAL_GPIO_Init+0x212>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a4c      	ldr	r2, [pc, #304]	; (8006580 <HAL_GPIO_Init+0x32c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <HAL_GPIO_Init+0x20e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a4b      	ldr	r2, [pc, #300]	; (8006584 <HAL_GPIO_Init+0x330>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <HAL_GPIO_Init+0x20a>
 800645a:	2307      	movs	r3, #7
 800645c:	e00e      	b.n	800647c <HAL_GPIO_Init+0x228>
 800645e:	2308      	movs	r3, #8
 8006460:	e00c      	b.n	800647c <HAL_GPIO_Init+0x228>
 8006462:	2306      	movs	r3, #6
 8006464:	e00a      	b.n	800647c <HAL_GPIO_Init+0x228>
 8006466:	2305      	movs	r3, #5
 8006468:	e008      	b.n	800647c <HAL_GPIO_Init+0x228>
 800646a:	2304      	movs	r3, #4
 800646c:	e006      	b.n	800647c <HAL_GPIO_Init+0x228>
 800646e:	2303      	movs	r3, #3
 8006470:	e004      	b.n	800647c <HAL_GPIO_Init+0x228>
 8006472:	2302      	movs	r3, #2
 8006474:	e002      	b.n	800647c <HAL_GPIO_Init+0x228>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_GPIO_Init+0x228>
 800647a:	2300      	movs	r3, #0
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	f002 0203 	and.w	r2, r2, #3
 8006482:	0092      	lsls	r2, r2, #2
 8006484:	4093      	lsls	r3, r2
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800648c:	4935      	ldr	r1, [pc, #212]	; (8006564 <HAL_GPIO_Init+0x310>)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	089b      	lsrs	r3, r3, #2
 8006492:	3302      	adds	r3, #2
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_GPIO_Init+0x334>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064be:	4a32      	ldr	r2, [pc, #200]	; (8006588 <HAL_GPIO_Init+0x334>)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064c4:	4b30      	ldr	r3, [pc, #192]	; (8006588 <HAL_GPIO_Init+0x334>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_GPIO_Init+0x334>)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <HAL_GPIO_Init+0x334>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4013      	ands	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_GPIO_Init+0x334>)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <HAL_GPIO_Init+0x334>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800653c:	4a12      	ldr	r2, [pc, #72]	; (8006588 <HAL_GPIO_Init+0x334>)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3301      	adds	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b0f      	cmp	r3, #15
 800654c:	f67f ae92 	bls.w	8006274 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3724      	adds	r7, #36	; 0x24
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800
 8006564:	40013800 	.word	0x40013800
 8006568:	40020000 	.word	0x40020000
 800656c:	40020400 	.word	0x40020400
 8006570:	40020800 	.word	0x40020800
 8006574:	40020c00 	.word	0x40020c00
 8006578:	40021000 	.word	0x40021000
 800657c:	40021400 	.word	0x40021400
 8006580:	40021800 	.word	0x40021800
 8006584:	40021c00 	.word	0x40021c00
 8006588:	40013c00 	.word	0x40013c00

0800658c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	807b      	strh	r3, [r7, #2]
 8006598:	4613      	mov	r3, r2
 800659a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800659c:	787b      	ldrb	r3, [r7, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a2:	887a      	ldrh	r2, [r7, #2]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80065a8:	e003      	b.n	80065b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	041a      	lsls	r2, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	619a      	str	r2, [r3, #24]
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e07f      	b.n	80066d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc fe26 	bl	8003238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	; 0x24
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006610:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006620:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d107      	bne.n	800663a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006636:	609a      	str	r2, [r3, #8]
 8006638:	e006      	b.n	8006648 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006646:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d104      	bne.n	800665a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006658:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_I2C_Init+0x11c>)
 8006666:	430b      	orrs	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006678:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	02008000 	.word	0x02008000

080066e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	4608      	mov	r0, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	461a      	mov	r2, r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	817b      	strh	r3, [r7, #10]
 80066f2:	460b      	mov	r3, r1
 80066f4:	813b      	strh	r3, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b20      	cmp	r3, #32
 8006704:	f040 80f9 	bne.w	80068fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_I2C_Mem_Write+0x34>
 800670e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0ed      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_I2C_Mem_Write+0x4e>
 800672a:	2302      	movs	r3, #2
 800672c:	e0e6      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006736:	f7ff f871 	bl	800581c <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2319      	movs	r3, #25
 8006742:	2201      	movs	r2, #1
 8006744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fac3 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0d1      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2221      	movs	r2, #33	; 0x21
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2240      	movs	r2, #64	; 0x40
 8006764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a3a      	ldr	r2, [r7, #32]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006780:	88f8      	ldrh	r0, [r7, #6]
 8006782:	893a      	ldrh	r2, [r7, #8]
 8006784:	8979      	ldrh	r1, [r7, #10]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4603      	mov	r3, r0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f9d3 	bl	8006b3c <I2C_RequestMemoryWrite>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0a9      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2bff      	cmp	r3, #255	; 0xff
 80067b0:	d90e      	bls.n	80067d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	8979      	ldrh	r1, [r7, #10]
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fc1f 	bl	800700c <I2C_TransferConfig>
 80067ce:	e00f      	b.n	80067f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	8979      	ldrh	r1, [r7, #10]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fc0e 	bl	800700c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 faad 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e07b      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d034      	beq.n	80068a8 <HAL_I2C_Mem_Write+0x1c8>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d130      	bne.n	80068a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	2200      	movs	r2, #0
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fa3f 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e04d      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2bff      	cmp	r3, #255	; 0xff
 8006868:	d90e      	bls.n	8006888 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	b2da      	uxtb	r2, r3
 8006876:	8979      	ldrh	r1, [r7, #10]
 8006878:	2300      	movs	r3, #0
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fbc3 	bl	800700c <I2C_TransferConfig>
 8006886:	e00f      	b.n	80068a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006896:	b2da      	uxtb	r2, r3
 8006898:	8979      	ldrh	r1, [r7, #10]
 800689a:	2300      	movs	r3, #0
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fbb2 	bl	800700c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d19e      	bne.n	80067f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fa8c 	bl	8006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e01a      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2220      	movs	r2, #32
 80068cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6859      	ldr	r1, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <HAL_I2C_Mem_Write+0x224>)
 80068da:	400b      	ands	r3, r1
 80068dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	fe00e800 	.word	0xfe00e800

08006908 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4603      	mov	r3, r0
 8006918:	817b      	strh	r3, [r7, #10]
 800691a:	460b      	mov	r3, r1
 800691c:	813b      	strh	r3, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b20      	cmp	r3, #32
 800692c:	f040 80fd 	bne.w	8006b2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_I2C_Mem_Read+0x34>
 8006936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0f1      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_I2C_Mem_Read+0x4e>
 8006952:	2302      	movs	r3, #2
 8006954:	e0ea      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800695e:	f7fe ff5d 	bl	800581c <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2319      	movs	r3, #25
 800696a:	2201      	movs	r2, #1
 800696c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f9af 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0d5      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2222      	movs	r2, #34	; 0x22
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2240      	movs	r2, #64	; 0x40
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069a8:	88f8      	ldrh	r0, [r7, #6]
 80069aa:	893a      	ldrh	r2, [r7, #8]
 80069ac:	8979      	ldrh	r1, [r7, #10]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4603      	mov	r3, r0
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f913 	bl	8006be4 <I2C_RequestMemoryRead>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e0ad      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2bff      	cmp	r3, #255	; 0xff
 80069d8:	d90e      	bls.n	80069f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	8979      	ldrh	r1, [r7, #10]
 80069e8:	4b52      	ldr	r3, [pc, #328]	; (8006b34 <HAL_I2C_Mem_Read+0x22c>)
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fb0b 	bl	800700c <I2C_TransferConfig>
 80069f6:	e00f      	b.n	8006a18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	8979      	ldrh	r1, [r7, #10]
 8006a0a:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_I2C_Mem_Read+0x22c>)
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fafa 	bl	800700c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2104      	movs	r1, #4
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f956 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e07c      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d034      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x1d0>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d130      	bne.n	8006ad8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	; 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f927 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04d      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	; 0xff
 8006a98:	d90e      	bls.n	8006ab8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 faab 	bl	800700c <I2C_TransferConfig>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8979      	ldrh	r1, [r7, #10]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fa9a 	bl	800700c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d19a      	bne.n	8006a18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f974 	bl	8006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01a      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2220      	movs	r2, #32
 8006afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_I2C_Mem_Read+0x230>)
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	80002400 	.word	0x80002400
 8006b38:	fe00e800 	.word	0xfe00e800

08006b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	817b      	strh	r3, [r7, #10]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	813b      	strh	r3, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	8979      	ldrh	r1, [r7, #10]
 8006b5c:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <I2C_RequestMemoryWrite+0xa4>)
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa51 	bl	800700c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f8f0 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e02c      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b8e:	e015      	b.n	8006bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f8d6 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e012      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f884 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	80002000 	.word	0x80002000

08006be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	813b      	strh	r3, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <I2C_RequestMemoryRead+0xa4>)
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f9fe 	bl	800700c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f89d 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e02c      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
 8006c34:	e015      	b.n	8006c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	69b9      	ldr	r1, [r7, #24]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f883 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e012      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2140      	movs	r1, #64	; 0x40
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f831 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	80002000 	.word	0x80002000

08006c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d103      	bne.n	8006caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d007      	beq.n	8006cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	619a      	str	r2, [r3, #24]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce4:	e022      	b.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d01e      	beq.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cee:	f7fe fd95 	bl	800581c <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d113      	bne.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e00f      	b.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4013      	ands	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d0cd      	beq.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d60:	e02c      	b.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f870 	bl	8006e4c <I2C_IsErrorOccurred>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e02a      	b.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d01e      	beq.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fe fd4d 	bl	800581c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d113      	bne.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	f043 0220 	orr.w	r2, r3, #32
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e007      	b.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d1cb      	bne.n	8006d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de0:	e028      	b.n	8006e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f830 	bl	8006e4c <I2C_IsErrorOccurred>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e026      	b.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df6:	f7fe fd11 	bl	800581c <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d113      	bne.n	8006e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e007      	b.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d1cf      	bne.n	8006de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d068      	beq.n	8006f4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e80:	e049      	b.n	8006f16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d045      	beq.n	8006f16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fe fcc7 	bl	800581c <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <I2C_IsErrorOccurred+0x54>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d13a      	bne.n	8006f16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec2:	d121      	bne.n	8006f08 <I2C_IsErrorOccurred+0xbc>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d01d      	beq.n	8006f08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d01a      	beq.n	8006f08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ee0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ee2:	f7fe fc9b 	bl	800581c <HAL_GetTick>
 8006ee6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee8:	e00e      	b.n	8006f08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006eea:	f7fe fc97 	bl	800581c <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b19      	cmp	r3, #25
 8006ef6:	d907      	bls.n	8006f08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f043 0320 	orr.w	r3, r3, #32
 8006efe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f06:	e006      	b.n	8006f16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d1e9      	bne.n	8006eea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d003      	beq.n	8006f2c <I2C_IsErrorOccurred+0xe0>
 8006f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0aa      	beq.n	8006e82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f043 0304 	orr.w	r3, r3, #4
 8006f42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f043 0308 	orr.w	r3, r3, #8
 8006f84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01c      	beq.n	8006ffa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff fe63 	bl	8006c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6859      	ldr	r1, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <I2C_IsErrorOccurred+0x1bc>)
 8006fd2:	400b      	ands	r3, r1
 8006fd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3728      	adds	r7, #40	; 0x28
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	fe00e800 	.word	0xfe00e800

0800700c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	817b      	strh	r3, [r7, #10]
 800701a:	4613      	mov	r3, r2
 800701c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800701e:	897b      	ldrh	r3, [r7, #10]
 8007020:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007024:	7a7b      	ldrb	r3, [r7, #9]
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800702c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	4313      	orrs	r3, r2
 8007036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	0d5b      	lsrs	r3, r3, #21
 8007046:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800704a:	4b08      	ldr	r3, [pc, #32]	; (800706c <I2C_TransferConfig+0x60>)
 800704c:	430b      	orrs	r3, r1
 800704e:	43db      	mvns	r3, r3
 8007050:	ea02 0103 	and.w	r1, r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	03ff63ff 	.word	0x03ff63ff

08007070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b20      	cmp	r3, #32
 8007084:	d138      	bne.n	80070f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007090:	2302      	movs	r3, #2
 8007092:	e032      	b.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6819      	ldr	r1, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d139      	bne.n	8007190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007126:	2302      	movs	r3, #2
 8007128:	e033      	b.n	8007192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2224      	movs	r2, #36	; 0x24
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e000      	b.n	8007192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007190:	2302      	movs	r3, #2
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	4b23      	ldr	r3, [pc, #140]	; (8007238 <HAL_PWREx_EnableOverDrive+0x98>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a22      	ldr	r2, [pc, #136]	; (8007238 <HAL_PWREx_EnableOverDrive+0x98>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b20      	ldr	r3, [pc, #128]	; (8007238 <HAL_PWREx_EnableOverDrive+0x98>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80071c2:	4b1e      	ldr	r3, [pc, #120]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071ce:	f7fe fb25 	bl	800581c <HAL_GetTick>
 80071d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80071d4:	e009      	b.n	80071ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80071d6:	f7fe fb21 	bl	800581c <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071e4:	d901      	bls.n	80071ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e022      	b.n	8007230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80071ea:	4b14      	ldr	r3, [pc, #80]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f6:	d1ee      	bne.n	80071d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80071f8:	4b10      	ldr	r3, [pc, #64]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a0f      	ldr	r2, [pc, #60]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007204:	f7fe fb0a 	bl	800581c <HAL_GetTick>
 8007208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800720a:	e009      	b.n	8007220 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800720c:	f7fe fb06 	bl	800581c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721a:	d901      	bls.n	8007220 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e007      	b.n	8007230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800722c:	d1ee      	bne.n	800720c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40023800 	.word	0x40023800
 800723c:	40007000 	.word	0x40007000

08007240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e291      	b.n	800777a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8087 	beq.w	8007372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007264:	4b96      	ldr	r3, [pc, #600]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 030c 	and.w	r3, r3, #12
 800726c:	2b04      	cmp	r3, #4
 800726e:	d00c      	beq.n	800728a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007270:	4b93      	ldr	r3, [pc, #588]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 030c 	and.w	r3, r3, #12
 8007278:	2b08      	cmp	r3, #8
 800727a:	d112      	bne.n	80072a2 <HAL_RCC_OscConfig+0x62>
 800727c:	4b90      	ldr	r3, [pc, #576]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007288:	d10b      	bne.n	80072a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800728a:	4b8d      	ldr	r3, [pc, #564]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d06c      	beq.n	8007370 <HAL_RCC_OscConfig+0x130>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d168      	bne.n	8007370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e26b      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072aa:	d106      	bne.n	80072ba <HAL_RCC_OscConfig+0x7a>
 80072ac:	4b84      	ldr	r3, [pc, #528]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a83      	ldr	r2, [pc, #524]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	e02e      	b.n	8007318 <HAL_RCC_OscConfig+0xd8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10c      	bne.n	80072dc <HAL_RCC_OscConfig+0x9c>
 80072c2:	4b7f      	ldr	r3, [pc, #508]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a7e      	ldr	r2, [pc, #504]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4b7c      	ldr	r3, [pc, #496]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a7b      	ldr	r2, [pc, #492]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e01d      	b.n	8007318 <HAL_RCC_OscConfig+0xd8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0xc0>
 80072e6:	4b76      	ldr	r3, [pc, #472]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a75      	ldr	r2, [pc, #468]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b73      	ldr	r3, [pc, #460]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a72      	ldr	r2, [pc, #456]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80072f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e00b      	b.n	8007318 <HAL_RCC_OscConfig+0xd8>
 8007300:	4b6f      	ldr	r3, [pc, #444]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6e      	ldr	r2, [pc, #440]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4b6c      	ldr	r3, [pc, #432]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a6b      	ldr	r2, [pc, #428]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d013      	beq.n	8007348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007320:	f7fe fa7c 	bl	800581c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007328:	f7fe fa78 	bl	800581c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	; 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e21f      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733a:	4b61      	ldr	r3, [pc, #388]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0xe8>
 8007346:	e014      	b.n	8007372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007348:	f7fe fa68 	bl	800581c <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007350:	f7fe fa64 	bl	800581c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b64      	cmp	r3, #100	; 0x64
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e20b      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007362:	4b57      	ldr	r3, [pc, #348]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f0      	bne.n	8007350 <HAL_RCC_OscConfig+0x110>
 800736e:	e000      	b.n	8007372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d069      	beq.n	8007452 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800737e:	4b50      	ldr	r3, [pc, #320]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800738a:	4b4d      	ldr	r3, [pc, #308]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 030c 	and.w	r3, r3, #12
 8007392:	2b08      	cmp	r3, #8
 8007394:	d11c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x190>
 8007396:	4b4a      	ldr	r3, [pc, #296]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d116      	bne.n	80073d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a2:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_RCC_OscConfig+0x17a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e1df      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ba:	4b41      	ldr	r3, [pc, #260]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	493d      	ldr	r1, [pc, #244]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ce:	e040      	b.n	8007452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d023      	beq.n	8007420 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d8:	4b39      	ldr	r3, [pc, #228]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a38      	ldr	r2, [pc, #224]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fe fa1a 	bl	800581c <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073ec:	f7fe fa16 	bl	800581c <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e1bd      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fe:	4b30      	ldr	r3, [pc, #192]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800740a:	4b2d      	ldr	r3, [pc, #180]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4929      	ldr	r1, [pc, #164]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800741a:	4313      	orrs	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
 800741e:	e018      	b.n	8007452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007420:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fe f9f6 	bl	800581c <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007434:	f7fe f9f2 	bl	800581c <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e199      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d038      	beq.n	80074d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d019      	beq.n	800749a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 8007468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746a:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007472:	f7fe f9d3 	bl	800581c <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800747a:	f7fe f9cf 	bl	800581c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e176      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800748e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x23a>
 8007498:	e01a      	b.n	80074d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 800749c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749e:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <HAL_RCC_OscConfig+0x280>)
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a6:	f7fe f9b9 	bl	800581c <HAL_GetTick>
 80074aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ac:	e00a      	b.n	80074c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ae:	f7fe f9b5 	bl	800581c <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d903      	bls.n	80074c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e15c      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
 80074c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c4:	4b91      	ldr	r3, [pc, #580]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1ee      	bne.n	80074ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80a4 	beq.w	8007626 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074de:	4b8b      	ldr	r3, [pc, #556]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10d      	bne.n	8007506 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ea:	4b88      	ldr	r3, [pc, #544]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	4a87      	ldr	r2, [pc, #540]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80074f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f4:	6413      	str	r3, [r2, #64]	; 0x40
 80074f6:	4b85      	ldr	r3, [pc, #532]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074fe:	60bb      	str	r3, [r7, #8]
 8007500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007502:	2301      	movs	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007506:	4b82      	ldr	r3, [pc, #520]	; (8007710 <HAL_RCC_OscConfig+0x4d0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d118      	bne.n	8007544 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007512:	4b7f      	ldr	r3, [pc, #508]	; (8007710 <HAL_RCC_OscConfig+0x4d0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7e      	ldr	r2, [pc, #504]	; (8007710 <HAL_RCC_OscConfig+0x4d0>)
 8007518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800751e:	f7fe f97d 	bl	800581c <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007526:	f7fe f979 	bl	800581c <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b64      	cmp	r3, #100	; 0x64
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e120      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007538:	4b75      	ldr	r3, [pc, #468]	; (8007710 <HAL_RCC_OscConfig+0x4d0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0f0      	beq.n	8007526 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d106      	bne.n	800755a <HAL_RCC_OscConfig+0x31a>
 800754c:	4b6f      	ldr	r3, [pc, #444]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007550:	4a6e      	ldr	r2, [pc, #440]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	6713      	str	r3, [r2, #112]	; 0x70
 8007558:	e02d      	b.n	80075b6 <HAL_RCC_OscConfig+0x376>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <HAL_RCC_OscConfig+0x33c>
 8007562:	4b6a      	ldr	r3, [pc, #424]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007566:	4a69      	ldr	r2, [pc, #420]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	6713      	str	r3, [r2, #112]	; 0x70
 800756e:	4b67      	ldr	r3, [pc, #412]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007572:	4a66      	ldr	r2, [pc, #408]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007574:	f023 0304 	bic.w	r3, r3, #4
 8007578:	6713      	str	r3, [r2, #112]	; 0x70
 800757a:	e01c      	b.n	80075b6 <HAL_RCC_OscConfig+0x376>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b05      	cmp	r3, #5
 8007582:	d10c      	bne.n	800759e <HAL_RCC_OscConfig+0x35e>
 8007584:	4b61      	ldr	r3, [pc, #388]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	4a60      	ldr	r2, [pc, #384]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800758a:	f043 0304 	orr.w	r3, r3, #4
 800758e:	6713      	str	r3, [r2, #112]	; 0x70
 8007590:	4b5e      	ldr	r3, [pc, #376]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	4a5d      	ldr	r2, [pc, #372]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	6713      	str	r3, [r2, #112]	; 0x70
 800759c:	e00b      	b.n	80075b6 <HAL_RCC_OscConfig+0x376>
 800759e:	4b5b      	ldr	r3, [pc, #364]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a5a      	ldr	r2, [pc, #360]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
 80075aa:	4b58      	ldr	r3, [pc, #352]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a57      	ldr	r2, [pc, #348]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d015      	beq.n	80075ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075be:	f7fe f92d 	bl	800581c <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c4:	e00a      	b.n	80075dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c6:	f7fe f929 	bl	800581c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e0ce      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075dc:	4b4b      	ldr	r3, [pc, #300]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0ee      	beq.n	80075c6 <HAL_RCC_OscConfig+0x386>
 80075e8:	e014      	b.n	8007614 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ea:	f7fe f917 	bl	800581c <HAL_GetTick>
 80075ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075f0:	e00a      	b.n	8007608 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f2:	f7fe f913 	bl	800581c <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007600:	4293      	cmp	r3, r2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e0b8      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007608:	4b40      	ldr	r3, [pc, #256]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ee      	bne.n	80075f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d105      	bne.n	8007626 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800761a:	4b3c      	ldr	r3, [pc, #240]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	4a3b      	ldr	r2, [pc, #236]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a4 	beq.w	8007778 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007630:	4b36      	ldr	r3, [pc, #216]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 030c 	and.w	r3, r3, #12
 8007638:	2b08      	cmp	r3, #8
 800763a:	d06b      	beq.n	8007714 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d149      	bne.n	80076d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007644:	4b31      	ldr	r3, [pc, #196]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a30      	ldr	r2, [pc, #192]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800764a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fe f8e4 	bl	800581c <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007658:	f7fe f8e0 	bl	800581c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e087      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766a:	4b28      	ldr	r3, [pc, #160]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	019b      	lsls	r3, r3, #6
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	3b01      	subs	r3, #1
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	061b      	lsls	r3, r3, #24
 800769a:	4313      	orrs	r3, r2
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 800769e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80076aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b0:	f7fe f8b4 	bl	800581c <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b8:	f7fe f8b0 	bl	800581c <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e057      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x478>
 80076d6:	e04f      	b.n	8007778 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d8:	4b0c      	ldr	r3, [pc, #48]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a0b      	ldr	r2, [pc, #44]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 80076de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fe f89a 	bl	800581c <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ec:	f7fe f896 	bl	800581c <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e03d      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fe:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_RCC_OscConfig+0x4cc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x4ac>
 800770a:	e035      	b.n	8007778 <HAL_RCC_OscConfig+0x538>
 800770c:	40023800 	.word	0x40023800
 8007710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007714:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <HAL_RCC_OscConfig+0x544>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d028      	beq.n	8007774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800772c:	429a      	cmp	r2, r3
 800772e:	d121      	bne.n	8007774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d11a      	bne.n	8007774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007744:	4013      	ands	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800774a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800774c:	4293      	cmp	r3, r2
 800774e:	d111      	bne.n	8007774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	3b01      	subs	r3, #1
 800775e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007760:	429a      	cmp	r2, r3
 8007762:	d107      	bne.n	8007774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d001      	beq.n	8007778 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40023800 	.word	0x40023800

08007788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0d0      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077a0:	4b6a      	ldr	r3, [pc, #424]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d910      	bls.n	80077d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ae:	4b67      	ldr	r3, [pc, #412]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f023 020f 	bic.w	r2, r3, #15
 80077b6:	4965      	ldr	r1, [pc, #404]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077be:	4b63      	ldr	r3, [pc, #396]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d001      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0b8      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d020      	beq.n	800781e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077e8:	4b59      	ldr	r3, [pc, #356]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	4a58      	ldr	r2, [pc, #352]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 80077ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007800:	4b53      	ldr	r3, [pc, #332]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4a52      	ldr	r2, [pc, #328]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800780a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800780c:	4b50      	ldr	r3, [pc, #320]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	494d      	ldr	r1, [pc, #308]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800781a:	4313      	orrs	r3, r2
 800781c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d040      	beq.n	80078ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d107      	bne.n	8007842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007832:	4b47      	ldr	r3, [pc, #284]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d115      	bne.n	800786a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e07f      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d107      	bne.n	800785a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800784a:	4b41      	ldr	r3, [pc, #260]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e073      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800785a:	4b3d      	ldr	r3, [pc, #244]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e06b      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800786a:	4b39      	ldr	r3, [pc, #228]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 0203 	bic.w	r2, r3, #3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4936      	ldr	r1, [pc, #216]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007878:	4313      	orrs	r3, r2
 800787a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787c:	f7fd ffce 	bl	800581c <HAL_GetTick>
 8007880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007882:	e00a      	b.n	800789a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007884:	f7fd ffca 	bl	800581c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007892:	4293      	cmp	r3, r2
 8007894:	d901      	bls.n	800789a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e053      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789a:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 020c 	and.w	r2, r3, #12
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d1eb      	bne.n	8007884 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ac:	4b27      	ldr	r3, [pc, #156]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d210      	bcs.n	80078dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 020f 	bic.w	r2, r3, #15
 80078c2:	4922      	ldr	r1, [pc, #136]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ca:	4b20      	ldr	r3, [pc, #128]	; (800794c <HAL_RCC_ClockConfig+0x1c4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d001      	beq.n	80078dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e032      	b.n	8007942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e8:	4b19      	ldr	r3, [pc, #100]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4916      	ldr	r1, [pc, #88]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	490e      	ldr	r1, [pc, #56]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800791a:	f000 f821 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 800791e:	4602      	mov	r2, r0
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <HAL_RCC_ClockConfig+0x1c8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	490a      	ldr	r1, [pc, #40]	; (8007954 <HAL_RCC_ClockConfig+0x1cc>)
 800792c:	5ccb      	ldrb	r3, [r1, r3]
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <HAL_RCC_ClockConfig+0x1d0>)
 8007934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <HAL_RCC_ClockConfig+0x1d4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f7fb ff10 	bl	8003760 <HAL_InitTick>

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40023c00 	.word	0x40023c00
 8007950:	40023800 	.word	0x40023800
 8007954:	08013da4 	.word	0x08013da4
 8007958:	20000008 	.word	0x20000008
 800795c:	2000000c 	.word	0x2000000c

08007960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007964:	b090      	sub	sp, #64	; 0x40
 8007966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007970:	2300      	movs	r3, #0
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007978:	4b59      	ldr	r3, [pc, #356]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 030c 	and.w	r3, r3, #12
 8007980:	2b08      	cmp	r3, #8
 8007982:	d00d      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007984:	2b08      	cmp	r3, #8
 8007986:	f200 80a1 	bhi.w	8007acc <HAL_RCC_GetSysClockFreq+0x16c>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_RCC_GetSysClockFreq+0x34>
 800798e:	2b04      	cmp	r3, #4
 8007990:	d003      	beq.n	800799a <HAL_RCC_GetSysClockFreq+0x3a>
 8007992:	e09b      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007994:	4b53      	ldr	r3, [pc, #332]	; (8007ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007998:	e09b      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800799a:	4b53      	ldr	r3, [pc, #332]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800799e:	e098      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079a0:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079aa:	4b4d      	ldr	r3, [pc, #308]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d028      	beq.n	8007a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079b6:	4b4a      	ldr	r3, [pc, #296]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	099b      	lsrs	r3, r3, #6
 80079bc:	2200      	movs	r2, #0
 80079be:	623b      	str	r3, [r7, #32]
 80079c0:	627a      	str	r2, [r7, #36]	; 0x24
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079c8:	2100      	movs	r1, #0
 80079ca:	4b47      	ldr	r3, [pc, #284]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80079cc:	fb03 f201 	mul.w	r2, r3, r1
 80079d0:	2300      	movs	r3, #0
 80079d2:	fb00 f303 	mul.w	r3, r0, r3
 80079d6:	4413      	add	r3, r2
 80079d8:	4a43      	ldr	r2, [pc, #268]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80079da:	fba0 1202 	umull	r1, r2, r0, r2
 80079de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079e0:	460a      	mov	r2, r1
 80079e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80079e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e6:	4413      	add	r3, r2
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ec:	2200      	movs	r2, #0
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	61fa      	str	r2, [r7, #28]
 80079f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80079fa:	f7f9 f99d 	bl	8000d38 <__aeabi_uldivmod>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4613      	mov	r3, r2
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a06:	e053      	b.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a08:	4b35      	ldr	r3, [pc, #212]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	099b      	lsrs	r3, r3, #6
 8007a0e:	2200      	movs	r2, #0
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	617a      	str	r2, [r7, #20]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a1a:	f04f 0b00 	mov.w	fp, #0
 8007a1e:	4652      	mov	r2, sl
 8007a20:	465b      	mov	r3, fp
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	0159      	lsls	r1, r3, #5
 8007a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a30:	0150      	lsls	r0, r2, #5
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	ebb2 080a 	subs.w	r8, r2, sl
 8007a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a52:	ebb2 0408 	subs.w	r4, r2, r8
 8007a56:	eb63 0509 	sbc.w	r5, r3, r9
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	00eb      	lsls	r3, r5, #3
 8007a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a68:	00e2      	lsls	r2, r4, #3
 8007a6a:	4614      	mov	r4, r2
 8007a6c:	461d      	mov	r5, r3
 8007a6e:	eb14 030a 	adds.w	r3, r4, sl
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	eb45 030b 	adc.w	r3, r5, fp
 8007a78:	607b      	str	r3, [r7, #4]
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a86:	4629      	mov	r1, r5
 8007a88:	028b      	lsls	r3, r1, #10
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a90:	4621      	mov	r1, r4
 8007a92:	028a      	lsls	r2, r1, #10
 8007a94:	4610      	mov	r0, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	60fa      	str	r2, [r7, #12]
 8007aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aa4:	f7f9 f948 	bl	8000d38 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4613      	mov	r3, r2
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	0c1b      	lsrs	r3, r3, #16
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	3301      	adds	r3, #1
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007aca:	e002      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3740      	adds	r7, #64	; 0x40
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ade:	bf00      	nop
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	00f42400 	.word	0x00f42400
 8007ae8:	017d7840 	.word	0x017d7840

08007aec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8007af2:	681b      	ldr	r3, [r3, #0]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000008 	.word	0x20000008

08007b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b08:	f7ff fff0 	bl	8007aec <HAL_RCC_GetHCLKFreq>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	0a9b      	lsrs	r3, r3, #10
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	4903      	ldr	r1, [pc, #12]	; (8007b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b1a:	5ccb      	ldrb	r3, [r1, r3]
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40023800 	.word	0x40023800
 8007b28:	08013db4 	.word	0x08013db4

08007b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b30:	f7ff ffdc 	bl	8007aec <HAL_RCC_GetHCLKFreq>
 8007b34:	4602      	mov	r2, r0
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	0b5b      	lsrs	r3, r3, #13
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	4903      	ldr	r1, [pc, #12]	; (8007b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b42:	5ccb      	ldrb	r3, [r1, r3]
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	08013db4 	.word	0x08013db4

08007b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220f      	movs	r2, #15
 8007b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 0203 	and.w	r2, r3, #3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b70:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007b88:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	08db      	lsrs	r3, r3, #3
 8007b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <HAL_RCC_GetClockConfig+0x60>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	40023c00 	.word	0x40023c00

08007bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bdc:	4b65      	ldr	r3, [pc, #404]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4a64      	ldr	r2, [pc, #400]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007be2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007be6:	6093      	str	r3, [r2, #8]
 8007be8:	4b62      	ldr	r3, [pc, #392]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf0:	4960      	ldr	r1, [pc, #384]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c0e:	4b59      	ldr	r3, [pc, #356]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	4955      	ldr	r1, [pc, #340]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c4a:	4b4a      	ldr	r3, [pc, #296]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	4946      	ldr	r1, [pc, #280]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c68:	d101      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 808b 	beq.w	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c88:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	4a39      	ldr	r2, [pc, #228]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c92:	6413      	str	r3, [r2, #64]	; 0x40
 8007c94:	4b37      	ldr	r3, [pc, #220]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ca0:	4b35      	ldr	r3, [pc, #212]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a34      	ldr	r2, [pc, #208]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cac:	f7fd fdb6 	bl	800581c <HAL_GetTick>
 8007cb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb4:	f7fd fdb2 	bl	800581c <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b64      	cmp	r3, #100	; 0x64
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e2bc      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cc6:	4b2c      	ldr	r3, [pc, #176]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0f0      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cd2:	4b28      	ldr	r3, [pc, #160]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d035      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d02e      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cf0:	4b20      	ldr	r3, [pc, #128]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d06:	4b1b      	ldr	r3, [pc, #108]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a1a      	ldr	r2, [pc, #104]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d18:	4b16      	ldr	r3, [pc, #88]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d114      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d24:	f7fd fd7a 	bl	800581c <HAL_GetTick>
 8007d28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d2a:	e00a      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d2c:	f7fd fd76 	bl	800581c <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e27e      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d42:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0ee      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5a:	d111      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	4901      	ldr	r1, [pc, #4]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	e00b      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007d74:	40023800 	.word	0x40023800
 8007d78:	40007000 	.word	0x40007000
 8007d7c:	0ffffcff 	.word	0x0ffffcff
 8007d80:	4ba4      	ldr	r3, [pc, #656]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4aa3      	ldr	r2, [pc, #652]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d8a:	6093      	str	r3, [r2, #8]
 8007d8c:	4ba1      	ldr	r3, [pc, #644]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d98:	499e      	ldr	r1, [pc, #632]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007daa:	4b9a      	ldr	r3, [pc, #616]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db0:	4a98      	ldr	r2, [pc, #608]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007db6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007dba:	4b96      	ldr	r3, [pc, #600]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	4993      	ldr	r1, [pc, #588]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dd8:	4b8e      	ldr	r3, [pc, #568]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	498b      	ldr	r1, [pc, #556]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dfa:	4b86      	ldr	r3, [pc, #536]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e08:	4982      	ldr	r1, [pc, #520]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e1c:	4b7d      	ldr	r3, [pc, #500]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2a:	497a      	ldr	r1, [pc, #488]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e3e:	4b75      	ldr	r3, [pc, #468]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e44:	f023 0203 	bic.w	r2, r3, #3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4c:	4971      	ldr	r1, [pc, #452]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e60:	4b6c      	ldr	r3, [pc, #432]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e66:	f023 020c 	bic.w	r2, r3, #12
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	4969      	ldr	r1, [pc, #420]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e82:	4b64      	ldr	r3, [pc, #400]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	4960      	ldr	r1, [pc, #384]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ea4:	4b5b      	ldr	r3, [pc, #364]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb2:	4958      	ldr	r1, [pc, #352]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ec6:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed4:	494f      	ldr	r1, [pc, #316]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ee8:	4b4a      	ldr	r3, [pc, #296]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	4947      	ldr	r1, [pc, #284]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f0a:	4b42      	ldr	r3, [pc, #264]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	493e      	ldr	r1, [pc, #248]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f2c:	4b39      	ldr	r3, [pc, #228]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3a:	4936      	ldr	r1, [pc, #216]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f4e:	4b31      	ldr	r3, [pc, #196]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5c:	492d      	ldr	r1, [pc, #180]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f7e:	4b25      	ldr	r3, [pc, #148]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	4921      	ldr	r1, [pc, #132]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fa0:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fae:	4919      	ldr	r1, [pc, #100]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd0:	4910      	ldr	r1, [pc, #64]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d006      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 809d 	beq.w	8008126 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff8:	f7fd fc10 	bl	800581c <HAL_GetTick>
 8007ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ffe:	e00b      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008000:	f7fd fc0c 	bl	800581c <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b64      	cmp	r3, #100	; 0x64
 800800c:	d904      	bls.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e116      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008012:	bf00      	nop
 8008014:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008018:	4b8b      	ldr	r3, [pc, #556]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ed      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d017      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d113      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008038:	4b83      	ldr	r3, [pc, #524]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800803a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	019a      	lsls	r2, r3, #6
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	071b      	lsls	r3, r3, #28
 8008058:	497b      	ldr	r1, [pc, #492]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008074:	d00a      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800807e:	2b00      	cmp	r3, #0
 8008080:	d024      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808a:	d11f      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800808c:	4b6e      	ldr	r3, [pc, #440]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800808e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008092:	0f1b      	lsrs	r3, r3, #28
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	019a      	lsls	r2, r3, #6
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	061b      	lsls	r3, r3, #24
 80080a6:	431a      	orrs	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	071b      	lsls	r3, r3, #28
 80080ac:	4966      	ldr	r1, [pc, #408]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080b4:	4b64      	ldr	r3, [pc, #400]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ba:	f023 021f 	bic.w	r2, r3, #31
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	4960      	ldr	r1, [pc, #384]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00d      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	019a      	lsls	r2, r3, #6
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	061b      	lsls	r3, r3, #24
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	071b      	lsls	r3, r3, #28
 80080ec:	4956      	ldr	r1, [pc, #344]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080f4:	4b54      	ldr	r3, [pc, #336]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a53      	ldr	r2, [pc, #332]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008100:	f7fd fb8c 	bl	800581c <HAL_GetTick>
 8008104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008106:	e008      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008108:	f7fd fb88 	bl	800581c <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b64      	cmp	r3, #100	; 0x64
 8008114:	d901      	bls.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e092      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800811a:	4b4b      	ldr	r3, [pc, #300]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0f0      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b01      	cmp	r3, #1
 800812a:	f040 8088 	bne.w	800823e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800812e:	4b46      	ldr	r3, [pc, #280]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a45      	ldr	r2, [pc, #276]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813a:	f7fd fb6f 	bl	800581c <HAL_GetTick>
 800813e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008140:	e008      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008142:	f7fd fb6b 	bl	800581c <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b64      	cmp	r3, #100	; 0x64
 800814e:	d901      	bls.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e075      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008154:	4b3c      	ldr	r3, [pc, #240]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008160:	d0ef      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800817e:	2b00      	cmp	r3, #0
 8008180:	d024      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	2b00      	cmp	r3, #0
 8008188:	d120      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800818a:	4b2f      	ldr	r3, [pc, #188]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	019a      	lsls	r2, r3, #6
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	061b      	lsls	r3, r3, #24
 80081aa:	4927      	ldr	r1, [pc, #156]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081b2:	4b25      	ldr	r3, [pc, #148]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4920      	ldr	r1, [pc, #128]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d018      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e0:	d113      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081e2:	4b19      	ldr	r3, [pc, #100]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e8:	0e1b      	lsrs	r3, r3, #24
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	019a      	lsls	r2, r3, #6
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	431a      	orrs	r2, r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	061b      	lsls	r3, r3, #24
 8008202:	4911      	ldr	r1, [pc, #68]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a0e      	ldr	r2, [pc, #56]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008216:	f7fd fb01 	bl	800581c <HAL_GetTick>
 800821a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800821c:	e008      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800821e:	f7fd fafd 	bl	800581c <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b64      	cmp	r3, #100	; 0x64
 800822a:	d901      	bls.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e007      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823c:	d1ef      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	40023800 	.word	0x40023800

0800824c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e09d      	b.n	800839a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d108      	bne.n	8008278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800826e:	d009      	beq.n	8008284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	61da      	str	r2, [r3, #28]
 8008276:	e005      	b.n	8008284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fb f82a 	bl	80032f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082c4:	d902      	bls.n	80082cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	e002      	b.n	80082d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082da:	d007      	beq.n	80082ec <HAL_SPI_Init+0xa0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082e4:	d002      	beq.n	80082ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	ea42 0103 	orr.w	r1, r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	0c1b      	lsrs	r3, r3, #16
 8008348:	f003 0204 	and.w	r2, r3, #4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008368:	ea42 0103 	orr.w	r1, r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	603b      	str	r3, [r7, #0]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_SPI_Transmit+0x22>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e158      	b.n	8008676 <HAL_SPI_Transmit+0x2d4>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083cc:	f7fd fa26 	bl	800581c <HAL_GetTick>
 80083d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d002      	beq.n	80083e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083e2:	2302      	movs	r3, #2
 80083e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083e6:	e13d      	b.n	8008664 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_Transmit+0x52>
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083f8:	e134      	b.n	8008664 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2203      	movs	r2, #3
 80083fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008444:	d10f      	bne.n	8008466 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d007      	beq.n	8008484 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800848c:	d94b      	bls.n	8008526 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SPI_Transmit+0xfa>
 8008496:	8afb      	ldrh	r3, [r7, #22]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d13e      	bne.n	800851a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	881a      	ldrh	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ac:	1c9a      	adds	r2, r3, #2
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084c0:	e02b      	b.n	800851a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d112      	bne.n	80084f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084f4:	e011      	b.n	800851a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084f6:	f7fd f991 	bl	800581c <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d803      	bhi.n	800850e <HAL_SPI_Transmit+0x16c>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d102      	bne.n	8008514 <HAL_SPI_Transmit+0x172>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008518:	e0a4      	b.n	8008664 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1ce      	bne.n	80084c2 <HAL_SPI_Transmit+0x120>
 8008524:	e07c      	b.n	8008620 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_SPI_Transmit+0x192>
 800852e:	8afb      	ldrh	r3, [r7, #22]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d170      	bne.n	8008616 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d912      	bls.n	8008564 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	881a      	ldrh	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	1c9a      	adds	r2, r3, #2
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b02      	subs	r3, #2
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008562:	e058      	b.n	8008616 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800858a:	e044      	b.n	8008616 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b02      	cmp	r3, #2
 8008598:	d12b      	bne.n	80085f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d912      	bls.n	80085ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	881a      	ldrh	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	1c9a      	adds	r2, r3, #2
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3b02      	subs	r3, #2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085c8:	e025      	b.n	8008616 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085f0:	e011      	b.n	8008616 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f2:	f7fd f913 	bl	800581c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d803      	bhi.n	800860a <HAL_SPI_Transmit+0x268>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d102      	bne.n	8008610 <HAL_SPI_Transmit+0x26e>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008614:	e026      	b.n	8008664 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1b5      	bne.n	800858c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fd07 	bl	8009038 <SPI_EndRxTxTransaction>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e000      	b.n	8008664 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008674:	7ffb      	ldrb	r3, [r7, #31]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b088      	sub	sp, #32
 8008682:	af02      	add	r7, sp, #8
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	603b      	str	r3, [r7, #0]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800869a:	d112      	bne.n	80086c2 <HAL_SPI_Receive+0x44>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10e      	bne.n	80086c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2204      	movs	r2, #4
 80086a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086ac:	88fa      	ldrh	r2, [r7, #6]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4613      	mov	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f910 	bl	80088de <HAL_SPI_TransmitReceive>
 80086be:	4603      	mov	r3, r0
 80086c0:	e109      	b.n	80088d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_SPI_Receive+0x52>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e102      	b.n	80088d6 <HAL_SPI_Receive+0x258>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086d8:	f7fd f8a0 	bl	800581c <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d002      	beq.n	80086f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80086ea:	2302      	movs	r3, #2
 80086ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086ee:	e0e9      	b.n	80088c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_SPI_Receive+0x7e>
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008700:	e0e0      	b.n	80088c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2204      	movs	r2, #4
 8008706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	88fa      	ldrh	r2, [r7, #6]
 8008722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800874c:	d908      	bls.n	8008760 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800875c:	605a      	str	r2, [r3, #4]
 800875e:	e007      	b.n	8008770 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800876e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008778:	d10f      	bne.n	800879a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008798:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a4:	2b40      	cmp	r3, #64	; 0x40
 80087a6:	d007      	beq.n	80087b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087c0:	d867      	bhi.n	8008892 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80087c2:	e030      	b.n	8008826 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d117      	bne.n	8008802 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f103 020c 	add.w	r2, r3, #12
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	7812      	ldrb	r2, [r2, #0]
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008800:	e011      	b.n	8008826 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008802:	f7fd f80b 	bl	800581c <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d803      	bhi.n	800881a <HAL_SPI_Receive+0x19c>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d102      	bne.n	8008820 <HAL_SPI_Receive+0x1a2>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008824:	e04e      	b.n	80088c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1c8      	bne.n	80087c4 <HAL_SPI_Receive+0x146>
 8008832:	e034      	b.n	800889e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b01      	cmp	r3, #1
 8008840:	d115      	bne.n	800886e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	b292      	uxth	r2, r2
 800884e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	1c9a      	adds	r2, r3, #2
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008860:	b29b      	uxth	r3, r3
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800886c:	e011      	b.n	8008892 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800886e:	f7fc ffd5 	bl	800581c <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d803      	bhi.n	8008886 <HAL_SPI_Receive+0x208>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008884:	d102      	bne.n	800888c <HAL_SPI_Receive+0x20e>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008890:	e018      	b.n	80088c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1ca      	bne.n	8008834 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 fb4c 	bl	8008f40 <SPI_EndRxTransaction>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
 80088c0:	e000      	b.n	80088c4 <HAL_SPI_Receive+0x246>
  }

error :
 80088c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b08a      	sub	sp, #40	; 0x28
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088ec:	2301      	movs	r3, #1
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_SPI_TransmitReceive+0x26>
 8008900:	2302      	movs	r3, #2
 8008902:	e1fb      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x41e>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800890c:	f7fc ff86 	bl	800581c <HAL_GetTick>
 8008910:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008918:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008920:	887b      	ldrh	r3, [r7, #2]
 8008922:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008924:	887b      	ldrh	r3, [r7, #2]
 8008926:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008928:	7efb      	ldrb	r3, [r7, #27]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d00e      	beq.n	800894c <HAL_SPI_TransmitReceive+0x6e>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008934:	d106      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x66>
 800893e:	7efb      	ldrb	r3, [r7, #27]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d003      	beq.n	800894c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008944:	2302      	movs	r3, #2
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800894a:	e1cd      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_SPI_TransmitReceive+0x80>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_SPI_TransmitReceive+0x80>
 8008958:	887b      	ldrh	r3, [r7, #2]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008964:	e1c0      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b04      	cmp	r3, #4
 8008970:	d003      	beq.n	800897a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2205      	movs	r2, #5
 8008976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	887a      	ldrh	r2, [r7, #2]
 800898a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	887a      	ldrh	r2, [r7, #2]
 8008992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	887a      	ldrh	r2, [r7, #2]
 80089a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	887a      	ldrh	r2, [r7, #2]
 80089a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089bc:	d802      	bhi.n	80089c4 <HAL_SPI_TransmitReceive+0xe6>
 80089be:	8a3b      	ldrh	r3, [r7, #16]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d908      	bls.n	80089d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089d2:	605a      	str	r2, [r3, #4]
 80089d4:	e007      	b.n	80089e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f0:	2b40      	cmp	r3, #64	; 0x40
 80089f2:	d007      	beq.n	8008a04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a0c:	d97c      	bls.n	8008b08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_SPI_TransmitReceive+0x13e>
 8008a16:	8a7b      	ldrh	r3, [r7, #18]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d169      	bne.n	8008af0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	881a      	ldrh	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	1c9a      	adds	r2, r3, #2
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a40:	e056      	b.n	8008af0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d11b      	bne.n	8008a88 <HAL_SPI_TransmitReceive+0x1aa>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d016      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0x1aa>
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d113      	bne.n	8008a88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	881a      	ldrh	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	1c9a      	adds	r2, r3, #2
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d11c      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x1f2>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	b292      	uxth	r2, r2
 8008aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	1c9a      	adds	r2, r3, #2
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008acc:	2301      	movs	r3, #1
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ad0:	f7fc fea4 	bl	800581c <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d807      	bhi.n	8008af0 <HAL_SPI_TransmitReceive+0x212>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d003      	beq.n	8008af0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008aee:	e0fb      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1a3      	bne.n	8008a42 <HAL_SPI_TransmitReceive+0x164>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d19d      	bne.n	8008a42 <HAL_SPI_TransmitReceive+0x164>
 8008b06:	e0df      	b.n	8008cc8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_SPI_TransmitReceive+0x23a>
 8008b10:	8a7b      	ldrh	r3, [r7, #18]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	f040 80cb 	bne.w	8008cae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d912      	bls.n	8008b48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	881a      	ldrh	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	1c9a      	adds	r2, r3, #2
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b02      	subs	r3, #2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b46:	e0b2      	b.n	8008cae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b6e:	e09e      	b.n	8008cae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d134      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x30a>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02f      	beq.n	8008be8 <HAL_SPI_TransmitReceive+0x30a>
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d12c      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d912      	bls.n	8008bbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	881a      	ldrh	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	1c9a      	adds	r2, r3, #2
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b02      	subs	r3, #2
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bbc:	e012      	b.n	8008be4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d148      	bne.n	8008c88 <HAL_SPI_TransmitReceive+0x3aa>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d042      	beq.n	8008c88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d923      	bls.n	8008c56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c18:	b292      	uxth	r2, r2
 8008c1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c20:	1c9a      	adds	r2, r3, #2
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b02      	subs	r3, #2
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d81f      	bhi.n	8008c84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c52:	605a      	str	r2, [r3, #4]
 8008c54:	e016      	b.n	8008c84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f103 020c 	add.w	r2, r3, #12
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c84:	2301      	movs	r3, #1
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c88:	f7fc fdc8 	bl	800581c <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d803      	bhi.n	8008ca0 <HAL_SPI_TransmitReceive+0x3c2>
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d102      	bne.n	8008ca6 <HAL_SPI_TransmitReceive+0x3c8>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d103      	bne.n	8008cae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008cac:	e01c      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f47f af5b 	bne.w	8008b70 <HAL_SPI_TransmitReceive+0x292>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f47f af54 	bne.w	8008b70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f9b3 	bl	8009038 <SPI_EndRxTxTransaction>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	661a      	str	r2, [r3, #96]	; 0x60
 8008ce4:	e000      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3728      	adds	r7, #40	; 0x28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d14:	f7fc fd82 	bl	800581c <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d24:	f7fc fd7a 	bl	800581c <HAL_GetTick>
 8008d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d2a:	4b39      	ldr	r3, [pc, #228]	; (8008e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	015b      	lsls	r3, r3, #5
 8008d30:	0d1b      	lsrs	r3, r3, #20
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	fb02 f303 	mul.w	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d3a:	e054      	b.n	8008de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d050      	beq.n	8008de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d44:	f7fc fd6a 	bl	800581c <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d902      	bls.n	8008d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d13d      	bne.n	8008dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d72:	d111      	bne.n	8008d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7c:	d004      	beq.n	8008d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d86:	d107      	bne.n	8008d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008da0:	d10f      	bne.n	8008dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e017      	b.n	8008e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4013      	ands	r3, r2
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	bf0c      	ite	eq
 8008df6:	2301      	moveq	r3, #1
 8008df8:	2300      	movne	r3, #0
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d19b      	bne.n	8008d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000008 	.word	0x20000008

08008e14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e26:	f7fc fcf9 	bl	800581c <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	4413      	add	r3, r2
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e36:	f7fc fcf1 	bl	800581c <HAL_GetTick>
 8008e3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e44:	4b3d      	ldr	r3, [pc, #244]	; (8008f3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	00da      	lsls	r2, r3, #3
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	0d1b      	lsrs	r3, r3, #20
 8008e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e5c:	e060      	b.n	8008f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e64:	d107      	bne.n	8008e76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d050      	beq.n	8008f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e7e:	f7fc fccd 	bl	800581c <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d902      	bls.n	8008e94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d13d      	bne.n	8008f10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eac:	d111      	bne.n	8008ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eb6:	d004      	beq.n	8008ec2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ec0:	d107      	bne.n	8008ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eda:	d10f      	bne.n	8008efc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e010      	b.n	8008f32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689a      	ldr	r2, [r3, #8]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d196      	bne.n	8008e5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3728      	adds	r7, #40	; 0x28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000008 	.word	0x20000008

08008f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f54:	d111      	bne.n	8008f7a <SPI_EndRxTransaction+0x3a>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f5e:	d004      	beq.n	8008f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f68:	d107      	bne.n	8008f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f82:	d112      	bne.n	8008faa <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2180      	movs	r1, #128	; 0x80
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff feb8 	bl	8008d04 <SPI_WaitFlagStateUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d021      	beq.n	8008fde <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9e:	f043 0220 	orr.w	r2, r3, #32
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e03d      	b.n	8009026 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008faa:	4b21      	ldr	r3, [pc, #132]	; (8009030 <SPI_EndRxTransaction+0xf0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a21      	ldr	r2, [pc, #132]	; (8009034 <SPI_EndRxTransaction+0xf4>)
 8008fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb4:	0d5b      	lsrs	r3, r3, #21
 8008fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd6:	2b80      	cmp	r3, #128	; 0x80
 8008fd8:	d0f2      	beq.n	8008fc0 <SPI_EndRxTransaction+0x80>
 8008fda:	e000      	b.n	8008fde <SPI_EndRxTransaction+0x9e>
        break;
 8008fdc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fe6:	d11d      	bne.n	8009024 <SPI_EndRxTransaction+0xe4>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff0:	d004      	beq.n	8008ffc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffa:	d113      	bne.n	8009024 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2200      	movs	r2, #0
 8009004:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff ff03 	bl	8008e14 <SPI_WaitFifoStateUntilTimeout>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d007      	beq.n	8009024 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009018:	f043 0220 	orr.w	r2, r3, #32
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e000      	b.n	8009026 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000008 	.word	0x20000008
 8009034:	165e9f81 	.word	0x165e9f81

08009038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fedf 	bl	8008e14 <SPI_WaitFifoStateUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009060:	f043 0220 	orr.w	r2, r3, #32
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e046      	b.n	80090fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <SPI_EndRxTxTransaction+0xcc>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a25      	ldr	r2, [pc, #148]	; (8009108 <SPI_EndRxTxTransaction+0xd0>)
 8009072:	fba2 2303 	umull	r2, r3, r2, r3
 8009076:	0d5b      	lsrs	r3, r3, #21
 8009078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800907c:	fb02 f303 	mul.w	r3, r2, r3
 8009080:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800908a:	d112      	bne.n	80090b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	2180      	movs	r1, #128	; 0x80
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff fe34 	bl	8008d04 <SPI_WaitFlagStateUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d016      	beq.n	80090d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	f043 0220 	orr.w	r2, r3, #32
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e023      	b.n	80090fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d0f2      	beq.n	80090b2 <SPI_EndRxTxTransaction+0x7a>
 80090cc:	e000      	b.n	80090d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80090ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff fe99 	bl	8008e14 <SPI_WaitFifoStateUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ec:	f043 0220 	orr.w	r2, r3, #32
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e000      	b.n	80090fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000008 	.word	0x20000008
 8009108:	165e9f81 	.word	0x165e9f81

0800910c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e049      	b.n	80091b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fa f956 	bl	80033e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 ffb8 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d001      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e054      	b.n	800927e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a26      	ldr	r2, [pc, #152]	; (800928c <HAL_TIM_Base_Start_IT+0xd0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d022      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fe:	d01d      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a22      	ldr	r2, [pc, #136]	; (8009290 <HAL_TIM_Base_Start_IT+0xd4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d018      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a21      	ldr	r2, [pc, #132]	; (8009294 <HAL_TIM_Base_Start_IT+0xd8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d013      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <HAL_TIM_Base_Start_IT+0xdc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00e      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a1e      	ldr	r2, [pc, #120]	; (800929c <HAL_TIM_Base_Start_IT+0xe0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d009      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d004      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x80>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d115      	bne.n	8009268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <HAL_TIM_Base_Start_IT+0xec>)
 8009244:	4013      	ands	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b06      	cmp	r3, #6
 800924c:	d015      	beq.n	800927a <HAL_TIM_Base_Start_IT+0xbe>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009254:	d011      	beq.n	800927a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0201 	orr.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009266:	e008      	b.n	800927a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	e000      	b.n	800927c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	40000400 	.word	0x40000400
 8009294:	40000800 	.word	0x40000800
 8009298:	40000c00 	.word	0x40000c00
 800929c:	40010400 	.word	0x40010400
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40001800 	.word	0x40001800
 80092a8:	00010007 	.word	0x00010007

080092ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e049      	b.n	8009352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f841 	bl	800935a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f000 fee8 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_TIM_PWM_Start+0x24>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b01      	cmp	r3, #1
 800938a:	bf14      	ite	ne
 800938c:	2301      	movne	r3, #1
 800938e:	2300      	moveq	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	e03c      	b.n	800940e <HAL_TIM_PWM_Start+0x9e>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b04      	cmp	r3, #4
 8009398:	d109      	bne.n	80093ae <HAL_TIM_PWM_Start+0x3e>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	bf14      	ite	ne
 80093a6:	2301      	movne	r3, #1
 80093a8:	2300      	moveq	r3, #0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	e02f      	b.n	800940e <HAL_TIM_PWM_Start+0x9e>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	d109      	bne.n	80093c8 <HAL_TIM_PWM_Start+0x58>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	e022      	b.n	800940e <HAL_TIM_PWM_Start+0x9e>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b0c      	cmp	r3, #12
 80093cc:	d109      	bne.n	80093e2 <HAL_TIM_PWM_Start+0x72>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	e015      	b.n	800940e <HAL_TIM_PWM_Start+0x9e>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b10      	cmp	r3, #16
 80093e6:	d109      	bne.n	80093fc <HAL_TIM_PWM_Start+0x8c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	e008      	b.n	800940e <HAL_TIM_PWM_Start+0x9e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e092      	b.n	800953c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <HAL_TIM_PWM_Start+0xb6>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009424:	e023      	b.n	800946e <HAL_TIM_PWM_Start+0xfe>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b04      	cmp	r3, #4
 800942a:	d104      	bne.n	8009436 <HAL_TIM_PWM_Start+0xc6>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009434:	e01b      	b.n	800946e <HAL_TIM_PWM_Start+0xfe>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d104      	bne.n	8009446 <HAL_TIM_PWM_Start+0xd6>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009444:	e013      	b.n	800946e <HAL_TIM_PWM_Start+0xfe>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b0c      	cmp	r3, #12
 800944a:	d104      	bne.n	8009456 <HAL_TIM_PWM_Start+0xe6>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009454:	e00b      	b.n	800946e <HAL_TIM_PWM_Start+0xfe>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b10      	cmp	r3, #16
 800945a:	d104      	bne.n	8009466 <HAL_TIM_PWM_Start+0xf6>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009464:	e003      	b.n	800946e <HAL_TIM_PWM_Start+0xfe>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2201      	movs	r2, #1
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f001 fae4 	bl	800aa44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a30      	ldr	r2, [pc, #192]	; (8009544 <HAL_TIM_PWM_Start+0x1d4>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIM_PWM_Start+0x120>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2f      	ldr	r2, [pc, #188]	; (8009548 <HAL_TIM_PWM_Start+0x1d8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d101      	bne.n	8009494 <HAL_TIM_PWM_Start+0x124>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <HAL_TIM_PWM_Start+0x126>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a25      	ldr	r2, [pc, #148]	; (8009544 <HAL_TIM_PWM_Start+0x1d4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d022      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094bc:	d01d      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a22      	ldr	r2, [pc, #136]	; (800954c <HAL_TIM_PWM_Start+0x1dc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d018      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a20      	ldr	r2, [pc, #128]	; (8009550 <HAL_TIM_PWM_Start+0x1e0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <HAL_TIM_PWM_Start+0x1e4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a19      	ldr	r2, [pc, #100]	; (8009548 <HAL_TIM_PWM_Start+0x1d8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1b      	ldr	r2, [pc, #108]	; (8009558 <HAL_TIM_PWM_Start+0x1e8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Start+0x18a>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a19      	ldr	r2, [pc, #100]	; (800955c <HAL_TIM_PWM_Start+0x1ec>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d115      	bne.n	8009526 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	4b17      	ldr	r3, [pc, #92]	; (8009560 <HAL_TIM_PWM_Start+0x1f0>)
 8009502:	4013      	ands	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b06      	cmp	r3, #6
 800950a:	d015      	beq.n	8009538 <HAL_TIM_PWM_Start+0x1c8>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009512:	d011      	beq.n	8009538 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009524:	e008      	b.n	8009538 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0201 	orr.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e000      	b.n	800953a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40010000 	.word	0x40010000
 8009548:	40010400 	.word	0x40010400
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40014000 	.word	0x40014000
 800955c:	40001800 	.word	0x40001800
 8009560:	00010007 	.word	0x00010007

08009564 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e049      	b.n	800960a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f841 	bl	8009612 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f000 fd8c 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
	...

08009628 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <HAL_TIM_IC_Start_IT+0x1e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009642:	b2db      	uxtb	r3, r3
 8009644:	e023      	b.n	800968e <HAL_TIM_IC_Start_IT+0x66>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b04      	cmp	r3, #4
 800964a:	d104      	bne.n	8009656 <HAL_TIM_IC_Start_IT+0x2e>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009652:	b2db      	uxtb	r3, r3
 8009654:	e01b      	b.n	800968e <HAL_TIM_IC_Start_IT+0x66>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b08      	cmp	r3, #8
 800965a:	d104      	bne.n	8009666 <HAL_TIM_IC_Start_IT+0x3e>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009662:	b2db      	uxtb	r3, r3
 8009664:	e013      	b.n	800968e <HAL_TIM_IC_Start_IT+0x66>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b0c      	cmp	r3, #12
 800966a:	d104      	bne.n	8009676 <HAL_TIM_IC_Start_IT+0x4e>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009672:	b2db      	uxtb	r3, r3
 8009674:	e00b      	b.n	800968e <HAL_TIM_IC_Start_IT+0x66>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b10      	cmp	r3, #16
 800967a:	d104      	bne.n	8009686 <HAL_TIM_IC_Start_IT+0x5e>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009682:	b2db      	uxtb	r3, r3
 8009684:	e003      	b.n	800968e <HAL_TIM_IC_Start_IT+0x66>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800968c:	b2db      	uxtb	r3, r3
 800968e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <HAL_TIM_IC_Start_IT+0x78>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800969c:	b2db      	uxtb	r3, r3
 800969e:	e013      	b.n	80096c8 <HAL_TIM_IC_Start_IT+0xa0>
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d104      	bne.n	80096b0 <HAL_TIM_IC_Start_IT+0x88>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	e00b      	b.n	80096c8 <HAL_TIM_IC_Start_IT+0xa0>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b08      	cmp	r3, #8
 80096b4:	d104      	bne.n	80096c0 <HAL_TIM_IC_Start_IT+0x98>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e003      	b.n	80096c8 <HAL_TIM_IC_Start_IT+0xa0>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d102      	bne.n	80096d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80096d0:	7b7b      	ldrb	r3, [r7, #13]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d001      	beq.n	80096da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e0e2      	b.n	80098a0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <HAL_TIM_IC_Start_IT+0xc2>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096e8:	e023      	b.n	8009732 <HAL_TIM_IC_Start_IT+0x10a>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d104      	bne.n	80096fa <HAL_TIM_IC_Start_IT+0xd2>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096f8:	e01b      	b.n	8009732 <HAL_TIM_IC_Start_IT+0x10a>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	d104      	bne.n	800970a <HAL_TIM_IC_Start_IT+0xe2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009708:	e013      	b.n	8009732 <HAL_TIM_IC_Start_IT+0x10a>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b0c      	cmp	r3, #12
 800970e:	d104      	bne.n	800971a <HAL_TIM_IC_Start_IT+0xf2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009718:	e00b      	b.n	8009732 <HAL_TIM_IC_Start_IT+0x10a>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b10      	cmp	r3, #16
 800971e:	d104      	bne.n	800972a <HAL_TIM_IC_Start_IT+0x102>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009728:	e003      	b.n	8009732 <HAL_TIM_IC_Start_IT+0x10a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <HAL_TIM_IC_Start_IT+0x11a>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009740:	e013      	b.n	800976a <HAL_TIM_IC_Start_IT+0x142>
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b04      	cmp	r3, #4
 8009746:	d104      	bne.n	8009752 <HAL_TIM_IC_Start_IT+0x12a>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009750:	e00b      	b.n	800976a <HAL_TIM_IC_Start_IT+0x142>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b08      	cmp	r3, #8
 8009756:	d104      	bne.n	8009762 <HAL_TIM_IC_Start_IT+0x13a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009760:	e003      	b.n	800976a <HAL_TIM_IC_Start_IT+0x142>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2202      	movs	r2, #2
 8009766:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b0c      	cmp	r3, #12
 800976e:	d841      	bhi.n	80097f4 <HAL_TIM_IC_Start_IT+0x1cc>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <HAL_TIM_IC_Start_IT+0x150>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097ad 	.word	0x080097ad
 800977c:	080097f5 	.word	0x080097f5
 8009780:	080097f5 	.word	0x080097f5
 8009784:	080097f5 	.word	0x080097f5
 8009788:	080097bf 	.word	0x080097bf
 800978c:	080097f5 	.word	0x080097f5
 8009790:	080097f5 	.word	0x080097f5
 8009794:	080097f5 	.word	0x080097f5
 8009798:	080097d1 	.word	0x080097d1
 800979c:	080097f5 	.word	0x080097f5
 80097a0:	080097f5 	.word	0x080097f5
 80097a4:	080097f5 	.word	0x080097f5
 80097a8:	080097e3 	.word	0x080097e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0202 	orr.w	r2, r2, #2
 80097ba:	60da      	str	r2, [r3, #12]
      break;
 80097bc:	e01d      	b.n	80097fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0204 	orr.w	r2, r2, #4
 80097cc:	60da      	str	r2, [r3, #12]
      break;
 80097ce:	e014      	b.n	80097fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0208 	orr.w	r2, r2, #8
 80097de:	60da      	str	r2, [r3, #12]
      break;
 80097e0:	e00b      	b.n	80097fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 0210 	orr.w	r2, r2, #16
 80097f0:	60da      	str	r2, [r3, #12]
      break;
 80097f2:	e002      	b.n	80097fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	73fb      	strb	r3, [r7, #15]
      break;
 80097f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d14e      	bne.n	800989e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2201      	movs	r2, #1
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f001 f91b 	bl	800aa44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a25      	ldr	r2, [pc, #148]	; (80098a8 <HAL_TIM_IC_Start_IT+0x280>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d022      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009820:	d01d      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <HAL_TIM_IC_Start_IT+0x284>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d018      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <HAL_TIM_IC_Start_IT+0x288>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d013      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <HAL_TIM_IC_Start_IT+0x28c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00e      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_TIM_IC_Start_IT+0x290>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d009      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIM_IC_Start_IT+0x294>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d004      	beq.n	800985e <HAL_TIM_IC_Start_IT+0x236>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIM_IC_Start_IT+0x298>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d115      	bne.n	800988a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <HAL_TIM_IC_Start_IT+0x29c>)
 8009866:	4013      	ands	r3, r2
 8009868:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b06      	cmp	r3, #6
 800986e:	d015      	beq.n	800989c <HAL_TIM_IC_Start_IT+0x274>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009876:	d011      	beq.n	800989c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009888:	e008      	b.n	800989c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0201 	orr.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e000      	b.n	800989e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	40010000 	.word	0x40010000
 80098ac:	40000400 	.word	0x40000400
 80098b0:	40000800 	.word	0x40000800
 80098b4:	40000c00 	.word	0x40000c00
 80098b8:	40010400 	.word	0x40010400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40001800 	.word	0x40001800
 80098c4:	00010007 	.word	0x00010007

080098c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d122      	bne.n	8009924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d11b      	bne.n	8009924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f06f 0202 	mvn.w	r2, #2
 80098f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7f8 fe7e 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8009910:	e005      	b.n	800991e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fbb6 	bl	800a084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fbbd 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b04      	cmp	r3, #4
 8009930:	d122      	bne.n	8009978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b04      	cmp	r3, #4
 800993e:	d11b      	bne.n	8009978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0204 	mvn.w	r2, #4
 8009948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7f8 fe54 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8009964:	e005      	b.n	8009972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb8c 	bl	800a084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fb93 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0308 	and.w	r3, r3, #8
 8009982:	2b08      	cmp	r3, #8
 8009984:	d122      	bne.n	80099cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f003 0308 	and.w	r3, r3, #8
 8009990:	2b08      	cmp	r3, #8
 8009992:	d11b      	bne.n	80099cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f06f 0208 	mvn.w	r2, #8
 800999c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2204      	movs	r2, #4
 80099a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f8 fe2a 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80099b8:	e005      	b.n	80099c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fb62 	bl	800a084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb69 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d122      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d11b      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0210 	mvn.w	r2, #16
 80099f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2208      	movs	r2, #8
 80099f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f8 fe00 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8009a0c:	e005      	b.n	8009a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fb38 	bl	800a084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fb3f 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d10e      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d107      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f06f 0201 	mvn.w	r2, #1
 8009a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7f9 fbb6 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d10e      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 f922 	bl	800acbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a86:	d10e      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b80      	cmp	r3, #128	; 0x80
 8009a94:	d107      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f915 	bl	800acd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab0:	2b40      	cmp	r3, #64	; 0x40
 8009ab2:	d10e      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d107      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 faed 	bl	800a0ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d10e      	bne.n	8009afe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d107      	bne.n	8009afe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f06f 0220 	mvn.w	r2, #32
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 f8d5 	bl	800aca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b086      	sub	sp, #24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e088      	b.n	8009c36 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d11b      	bne.n	8009b6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009b42:	f000 fdbb 	bl	800a6bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 020c 	bic.w	r2, r2, #12
 8009b54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6999      	ldr	r1, [r3, #24]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	619a      	str	r2, [r3, #24]
 8009b68:	e060      	b.n	8009c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d11c      	bne.n	8009baa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009b80:	f000 fe3f 	bl	800a802 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6999      	ldr	r1, [r3, #24]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	021a      	lsls	r2, r3, #8
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	619a      	str	r2, [r3, #24]
 8009ba8:	e040      	b.n	8009c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d11b      	bne.n	8009be8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009bc0:	f000 fe8c 	bl	800a8dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69da      	ldr	r2, [r3, #28]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 020c 	bic.w	r2, r2, #12
 8009bd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	69d9      	ldr	r1, [r3, #28]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	689a      	ldr	r2, [r3, #8]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	61da      	str	r2, [r3, #28]
 8009be6:	e021      	b.n	8009c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b0c      	cmp	r3, #12
 8009bec:	d11c      	bne.n	8009c28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009bfe:	f000 fea9 	bl	800a954 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69d9      	ldr	r1, [r3, #28]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	021a      	lsls	r2, r3, #8
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	61da      	str	r2, [r3, #28]
 8009c26:	e001      	b.n	8009c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0ff      	b.n	8009e5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b14      	cmp	r3, #20
 8009c6a:	f200 80f0 	bhi.w	8009e4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009cc9 	.word	0x08009cc9
 8009c78:	08009e4f 	.word	0x08009e4f
 8009c7c:	08009e4f 	.word	0x08009e4f
 8009c80:	08009e4f 	.word	0x08009e4f
 8009c84:	08009d09 	.word	0x08009d09
 8009c88:	08009e4f 	.word	0x08009e4f
 8009c8c:	08009e4f 	.word	0x08009e4f
 8009c90:	08009e4f 	.word	0x08009e4f
 8009c94:	08009d4b 	.word	0x08009d4b
 8009c98:	08009e4f 	.word	0x08009e4f
 8009c9c:	08009e4f 	.word	0x08009e4f
 8009ca0:	08009e4f 	.word	0x08009e4f
 8009ca4:	08009d8b 	.word	0x08009d8b
 8009ca8:	08009e4f 	.word	0x08009e4f
 8009cac:	08009e4f 	.word	0x08009e4f
 8009cb0:	08009e4f 	.word	0x08009e4f
 8009cb4:	08009dcd 	.word	0x08009dcd
 8009cb8:	08009e4f 	.word	0x08009e4f
 8009cbc:	08009e4f 	.word	0x08009e4f
 8009cc0:	08009e4f 	.word	0x08009e4f
 8009cc4:	08009e0d 	.word	0x08009e0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fa96 	bl	800a200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0208 	orr.w	r2, r2, #8
 8009ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0204 	bic.w	r2, r2, #4
 8009cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6999      	ldr	r1, [r3, #24]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	619a      	str	r2, [r3, #24]
      break;
 8009d06:	e0a5      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fae8 	bl	800a2e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6999      	ldr	r1, [r3, #24]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	021a      	lsls	r2, r3, #8
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	619a      	str	r2, [r3, #24]
      break;
 8009d48:	e084      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fb3f 	bl	800a3d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69da      	ldr	r2, [r3, #28]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f042 0208 	orr.w	r2, r2, #8
 8009d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69da      	ldr	r2, [r3, #28]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0204 	bic.w	r2, r2, #4
 8009d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69d9      	ldr	r1, [r3, #28]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	61da      	str	r2, [r3, #28]
      break;
 8009d88:	e064      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fb95 	bl	800a4c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69da      	ldr	r2, [r3, #28]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69da      	ldr	r2, [r3, #28]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69d9      	ldr	r1, [r3, #28]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	021a      	lsls	r2, r3, #8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	61da      	str	r2, [r3, #28]
      break;
 8009dca:	e043      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fbcc 	bl	800a570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0208 	orr.w	r2, r2, #8
 8009de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0204 	bic.w	r2, r2, #4
 8009df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e0a:	e023      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fbfe 	bl	800a614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	021a      	lsls	r2, r3, #8
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e4c:	e002      	b.n	8009e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	75fb      	strb	r3, [r7, #23]
      break;
 8009e52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop

08009e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <HAL_TIM_ConfigClockSource+0x1c>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e0b4      	b.n	8009fee <HAL_TIM_ConfigClockSource+0x186>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	4b56      	ldr	r3, [pc, #344]	; (8009ff8 <HAL_TIM_ConfigClockSource+0x190>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ebc:	d03e      	beq.n	8009f3c <HAL_TIM_ConfigClockSource+0xd4>
 8009ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ec2:	f200 8087 	bhi.w	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eca:	f000 8086 	beq.w	8009fda <HAL_TIM_ConfigClockSource+0x172>
 8009ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed2:	d87f      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ed4:	2b70      	cmp	r3, #112	; 0x70
 8009ed6:	d01a      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0xa6>
 8009ed8:	2b70      	cmp	r3, #112	; 0x70
 8009eda:	d87b      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009edc:	2b60      	cmp	r3, #96	; 0x60
 8009ede:	d050      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0x11a>
 8009ee0:	2b60      	cmp	r3, #96	; 0x60
 8009ee2:	d877      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee4:	2b50      	cmp	r3, #80	; 0x50
 8009ee6:	d03c      	beq.n	8009f62 <HAL_TIM_ConfigClockSource+0xfa>
 8009ee8:	2b50      	cmp	r3, #80	; 0x50
 8009eea:	d873      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009eec:	2b40      	cmp	r3, #64	; 0x40
 8009eee:	d058      	beq.n	8009fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8009ef0:	2b40      	cmp	r3, #64	; 0x40
 8009ef2:	d86f      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ef4:	2b30      	cmp	r3, #48	; 0x30
 8009ef6:	d064      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ef8:	2b30      	cmp	r3, #48	; 0x30
 8009efa:	d86b      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d060      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	d867      	bhi.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d05c      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d05a      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f0c:	e062      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f1e:	f000 fd71 	bl	800aa04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	609a      	str	r2, [r3, #8]
      break;
 8009f3a:	e04f      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f4c:	f000 fd5a 	bl	800aa04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f5e:	609a      	str	r2, [r3, #8]
      break;
 8009f60:	e03c      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f000 fc18 	bl	800a7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2150      	movs	r1, #80	; 0x50
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fd27 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 8009f80:	e02c      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f000 fc74 	bl	800a87c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2160      	movs	r1, #96	; 0x60
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fd17 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 8009fa0:	e01c      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f000 fbf8 	bl	800a7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2140      	movs	r1, #64	; 0x40
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fd07 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 8009fc0:	e00c      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f000 fcfe 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 8009fd2:	e003      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd8:	e000      	b.n	8009fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	fffeff88 	.word	0xfffeff88

08009ffc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b0c      	cmp	r3, #12
 800a00e:	d831      	bhi.n	800a074 <HAL_TIM_ReadCapturedValue+0x78>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a04d 	.word	0x0800a04d
 800a01c:	0800a075 	.word	0x0800a075
 800a020:	0800a075 	.word	0x0800a075
 800a024:	0800a075 	.word	0x0800a075
 800a028:	0800a057 	.word	0x0800a057
 800a02c:	0800a075 	.word	0x0800a075
 800a030:	0800a075 	.word	0x0800a075
 800a034:	0800a075 	.word	0x0800a075
 800a038:	0800a061 	.word	0x0800a061
 800a03c:	0800a075 	.word	0x0800a075
 800a040:	0800a075 	.word	0x0800a075
 800a044:	0800a075 	.word	0x0800a075
 800a048:	0800a06b 	.word	0x0800a06b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a052:	60fb      	str	r3, [r7, #12]

      break;
 800a054:	e00f      	b.n	800a076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05c:	60fb      	str	r3, [r7, #12]

      break;
 800a05e:	e00a      	b.n	800a076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	60fb      	str	r3, [r7, #12]

      break;
 800a068:	e005      	b.n	800a076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	60fb      	str	r3, [r7, #12]

      break;
 800a072:	e000      	b.n	800a076 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a074:	bf00      	nop
  }

  return tmpreg;
 800a076:	68fb      	ldr	r3, [r7, #12]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a40      	ldr	r2, [pc, #256]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d013      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d00f      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3d      	ldr	r2, [pc, #244]	; (800a1d8 <TIM_Base_SetConfig+0x118>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00b      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a3c      	ldr	r2, [pc, #240]	; (800a1dc <TIM_Base_SetConfig+0x11c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a3b      	ldr	r2, [pc, #236]	; (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a3a      	ldr	r2, [pc, #232]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d108      	bne.n	800a112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a2f      	ldr	r2, [pc, #188]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d02b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a120:	d027      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a2c      	ldr	r2, [pc, #176]	; (800a1d8 <TIM_Base_SetConfig+0x118>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d023      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a2b      	ldr	r2, [pc, #172]	; (800a1dc <TIM_Base_SetConfig+0x11c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d01f      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a2a      	ldr	r2, [pc, #168]	; (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d01b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d017      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a28      	ldr	r2, [pc, #160]	; (800a1e8 <TIM_Base_SetConfig+0x128>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a27      	ldr	r2, [pc, #156]	; (800a1ec <TIM_Base_SetConfig+0x12c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00f      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a26      	ldr	r2, [pc, #152]	; (800a1f0 <TIM_Base_SetConfig+0x130>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a25      	ldr	r2, [pc, #148]	; (800a1f4 <TIM_Base_SetConfig+0x134>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d007      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a24      	ldr	r2, [pc, #144]	; (800a1f8 <TIM_Base_SetConfig+0x138>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d003      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a23      	ldr	r2, [pc, #140]	; (800a1fc <TIM_Base_SetConfig+0x13c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d108      	bne.n	800a184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d003      	beq.n	800a1b8 <TIM_Base_SetConfig+0xf8>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d103      	bne.n	800a1c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	615a      	str	r2, [r3, #20]
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800
 800a1f4:	40001800 	.word	0x40001800
 800a1f8:	40001c00 	.word	0x40001c00
 800a1fc:	40002000 	.word	0x40002000

0800a200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <TIM_OC1_SetConfig+0xd8>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f023 0302 	bic.w	r3, r3, #2
 800a248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	4313      	orrs	r3, r2
 800a252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <TIM_OC1_SetConfig+0xdc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d003      	beq.n	800a264 <TIM_OC1_SetConfig+0x64>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a20      	ldr	r2, [pc, #128]	; (800a2e0 <TIM_OC1_SetConfig+0xe0>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d10c      	bne.n	800a27e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 0308 	bic.w	r3, r3, #8
 800a26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f023 0304 	bic.w	r3, r3, #4
 800a27c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a16      	ldr	r2, [pc, #88]	; (800a2dc <TIM_OC1_SetConfig+0xdc>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <TIM_OC1_SetConfig+0x8e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a15      	ldr	r2, [pc, #84]	; (800a2e0 <TIM_OC1_SetConfig+0xe0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d111      	bne.n	800a2b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a29c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	621a      	str	r2, [r3, #32]
}
 800a2cc:	bf00      	nop
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	fffeff8f 	.word	0xfffeff8f
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40010400 	.word	0x40010400

0800a2e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f023 0210 	bic.w	r2, r3, #16
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	4b2e      	ldr	r3, [pc, #184]	; (800a3c8 <TIM_OC2_SetConfig+0xe4>)
 800a310:	4013      	ands	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f023 0320 	bic.w	r3, r3, #32
 800a32e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a23      	ldr	r2, [pc, #140]	; (800a3cc <TIM_OC2_SetConfig+0xe8>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d003      	beq.n	800a34c <TIM_OC2_SetConfig+0x68>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a22      	ldr	r2, [pc, #136]	; (800a3d0 <TIM_OC2_SetConfig+0xec>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d10d      	bne.n	800a368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a18      	ldr	r2, [pc, #96]	; (800a3cc <TIM_OC2_SetConfig+0xe8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d003      	beq.n	800a378 <TIM_OC2_SetConfig+0x94>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <TIM_OC2_SetConfig+0xec>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d113      	bne.n	800a3a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a37e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	4313      	orrs	r3, r2
 800a392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	feff8fff 	.word	0xfeff8fff
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400

0800a3d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <TIM_OC3_SetConfig+0xe0>)
 800a400:	4013      	ands	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a41c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4313      	orrs	r3, r2
 800a428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a22      	ldr	r2, [pc, #136]	; (800a4b8 <TIM_OC3_SetConfig+0xe4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d003      	beq.n	800a43a <TIM_OC3_SetConfig+0x66>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a21      	ldr	r2, [pc, #132]	; (800a4bc <TIM_OC3_SetConfig+0xe8>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d10d      	bne.n	800a456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a17      	ldr	r2, [pc, #92]	; (800a4b8 <TIM_OC3_SetConfig+0xe4>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d003      	beq.n	800a466 <TIM_OC3_SetConfig+0x92>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a16      	ldr	r2, [pc, #88]	; (800a4bc <TIM_OC3_SetConfig+0xe8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d113      	bne.n	800a48e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4313      	orrs	r3, r2
 800a480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	621a      	str	r2, [r3, #32]
}
 800a4a8:	bf00      	nop
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	fffeff8f 	.word	0xfffeff8f
 800a4b8:	40010000 	.word	0x40010000
 800a4bc:	40010400 	.word	0x40010400

0800a4c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <TIM_OC4_SetConfig+0xa4>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a50a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	031b      	lsls	r3, r3, #12
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <TIM_OC4_SetConfig+0xa8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC4_SetConfig+0x68>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a12      	ldr	r2, [pc, #72]	; (800a56c <TIM_OC4_SetConfig+0xac>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	019b      	lsls	r3, r3, #6
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	feff8fff 	.word	0xfeff8fff
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400

0800a570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <TIM_OC5_SetConfig+0x98>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a5b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	041b      	lsls	r3, r3, #16
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a12      	ldr	r2, [pc, #72]	; (800a60c <TIM_OC5_SetConfig+0x9c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d003      	beq.n	800a5ce <TIM_OC5_SetConfig+0x5e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a11      	ldr	r2, [pc, #68]	; (800a610 <TIM_OC5_SetConfig+0xa0>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d109      	bne.n	800a5e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	021b      	lsls	r3, r3, #8
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	621a      	str	r2, [r3, #32]
}
 800a5fc:	bf00      	nop
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	fffeff8f 	.word	0xfffeff8f
 800a60c:	40010000 	.word	0x40010000
 800a610:	40010400 	.word	0x40010400

0800a614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4b1c      	ldr	r3, [pc, #112]	; (800a6b0 <TIM_OC6_SetConfig+0x9c>)
 800a640:	4013      	ands	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	051b      	lsls	r3, r3, #20
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a13      	ldr	r2, [pc, #76]	; (800a6b4 <TIM_OC6_SetConfig+0xa0>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d003      	beq.n	800a674 <TIM_OC6_SetConfig+0x60>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a12      	ldr	r2, [pc, #72]	; (800a6b8 <TIM_OC6_SetConfig+0xa4>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d109      	bne.n	800a688 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a67a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	029b      	lsls	r3, r3, #10
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	4313      	orrs	r3, r2
 800a686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	feff8fff 	.word	0xfeff8fff
 800a6b4:	40010000 	.word	0x40010000
 800a6b8:	40010400 	.word	0x40010400

0800a6bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4a28      	ldr	r2, [pc, #160]	; (800a788 <TIM_TI1_SetConfig+0xcc>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d01b      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f0:	d017      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4a25      	ldr	r2, [pc, #148]	; (800a78c <TIM_TI1_SetConfig+0xd0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d013      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4a24      	ldr	r2, [pc, #144]	; (800a790 <TIM_TI1_SetConfig+0xd4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d00f      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4a23      	ldr	r2, [pc, #140]	; (800a794 <TIM_TI1_SetConfig+0xd8>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00b      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4a22      	ldr	r2, [pc, #136]	; (800a798 <TIM_TI1_SetConfig+0xdc>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d007      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4a21      	ldr	r2, [pc, #132]	; (800a79c <TIM_TI1_SetConfig+0xe0>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d003      	beq.n	800a722 <TIM_TI1_SetConfig+0x66>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4a20      	ldr	r2, [pc, #128]	; (800a7a0 <TIM_TI1_SetConfig+0xe4>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d101      	bne.n	800a726 <TIM_TI1_SetConfig+0x6a>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <TIM_TI1_SetConfig+0x6c>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d008      	beq.n	800a73e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f023 0303 	bic.w	r3, r3, #3
 800a732:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4313      	orrs	r3, r2
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e003      	b.n	800a746 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f043 0301 	orr.w	r3, r3, #1
 800a744:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a74c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	b2db      	uxtb	r3, r3
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	4313      	orrs	r3, r2
 800a758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f023 030a 	bic.w	r3, r3, #10
 800a760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f003 030a 	and.w	r3, r3, #10
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	621a      	str	r2, [r3, #32]
}
 800a77a:	bf00      	nop
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40010000 	.word	0x40010000
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40000c00 	.word	0x40000c00
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40001800 	.word	0x40001800

0800a7a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	f023 0201 	bic.w	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	011b      	lsls	r3, r3, #4
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f023 030a 	bic.w	r3, r3, #10
 800a7e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	621a      	str	r2, [r3, #32]
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a802:	b480      	push	{r7}
 800a804:	b087      	sub	sp, #28
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	f023 0210 	bic.w	r2, r3, #16
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a82e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	021b      	lsls	r3, r3, #8
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	031b      	lsls	r3, r3, #12
 800a846:	b29b      	uxth	r3, r3
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a854:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4313      	orrs	r3, r2
 800a862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	621a      	str	r2, [r3, #32]
}
 800a870:	bf00      	nop
 800a872:	371c      	adds	r7, #28
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	f023 0210 	bic.w	r2, r3, #16
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	031b      	lsls	r3, r3, #12
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	621a      	str	r2, [r3, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	371c      	adds	r7, #28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	011b      	lsls	r3, r3, #4
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a92c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	021b      	lsls	r3, r3, #8
 800a932:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	4313      	orrs	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	621a      	str	r2, [r3, #32]
}
 800a948:	bf00      	nop
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	021b      	lsls	r3, r3, #8
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a992:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	031b      	lsls	r3, r3, #12
 800a998:	b29b      	uxth	r3, r3
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a9a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	031b      	lsls	r3, r3, #12
 800a9ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	621a      	str	r2, [r3, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	f043 0307 	orr.w	r3, r3, #7
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	609a      	str	r2, [r3, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	021a      	lsls	r2, r3, #8
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	609a      	str	r2, [r3, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	2201      	movs	r2, #1
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a1a      	ldr	r2, [r3, #32]
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	43db      	mvns	r3, r3
 800aa66:	401a      	ands	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f003 031f 	and.w	r3, r3, #31
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	621a      	str	r2, [r3, #32]
}
 800aa82:	bf00      	nop
 800aa84:	371c      	adds	r7, #28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d101      	bne.n	800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e06d      	b.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a30      	ldr	r2, [pc, #192]	; (800ab90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a2f      	ldr	r2, [pc, #188]	; (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d108      	bne.n	800aaee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a20      	ldr	r2, [pc, #128]	; (800ab90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d022      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab1a:	d01d      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1d      	ldr	r2, [pc, #116]	; (800ab98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d018      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1c      	ldr	r2, [pc, #112]	; (800ab9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d013      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1a      	ldr	r2, [pc, #104]	; (800aba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d00e      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a15      	ldr	r2, [pc, #84]	; (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d009      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a16      	ldr	r2, [pc, #88]	; (800aba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d004      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d10c      	bne.n	800ab72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40010400 	.word	0x40010400
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40014000 	.word	0x40014000
 800aba8:	40001800 	.word	0x40001800

0800abac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d101      	bne.n	800abc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e065      	b.n	800ac94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	041b      	lsls	r3, r3, #16
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a16      	ldr	r2, [pc, #88]	; (800aca0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a14      	ldr	r2, [pc, #80]	; (800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d115      	bne.n	800ac82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	051b      	lsls	r3, r3, #20
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40010400 	.word	0x40010400

0800aca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e040      	b.n	800ad78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7f8 fbfc 	bl	8003504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2224      	movs	r2, #36	; 0x24
 800ad10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0201 	bic.w	r2, r2, #1
 800ad20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fc2a 	bl	800b57c <UART_SetConfig>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e022      	b.n	800ad78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fe82 	bl	800ba44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f042 0201 	orr.w	r2, r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 ff09 	bl	800bb88 <UART_CheckIdleState>
 800ad76:	4603      	mov	r3, r0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08a      	sub	sp, #40	; 0x28
 800ad84:	af02      	add	r7, sp, #8
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d171      	bne.n	800ae7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <HAL_UART_Transmit+0x24>
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e06a      	b.n	800ae7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2221      	movs	r2, #33	; 0x21
 800adb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adb6:	f7fa fd31 	bl	800581c <HAL_GetTick>
 800adba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	88fa      	ldrh	r2, [r7, #6]
 800adc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	88fa      	ldrh	r2, [r7, #6]
 800adc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add4:	d108      	bne.n	800ade8 <HAL_UART_Transmit+0x68>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d104      	bne.n	800ade8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	e003      	b.n	800adf0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800adf0:	e02c      	b.n	800ae4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2200      	movs	r2, #0
 800adfa:	2180      	movs	r1, #128	; 0x80
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 fefa 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e038      	b.n	800ae7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	3302      	adds	r3, #2
 800ae26:	61bb      	str	r3, [r7, #24]
 800ae28:	e007      	b.n	800ae3a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	3301      	adds	r3, #1
 800ae38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1cc      	bne.n	800adf2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2140      	movs	r1, #64	; 0x40
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fec7 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e005      	b.n	800ae7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2220      	movs	r2, #32
 800ae76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e000      	b.n	800ae7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ae7c:	2302      	movs	r3, #2
  }
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3720      	adds	r7, #32
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b08a      	sub	sp, #40	; 0x28
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	4613      	mov	r3, r2
 800ae92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9a:	2b20      	cmp	r3, #32
 800ae9c:	d132      	bne.n	800af04 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <HAL_UART_Receive_IT+0x24>
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e02b      	b.n	800af06 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d018      	beq.n	800aef4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	613b      	str	r3, [r7, #16]
   return(result);
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	623b      	str	r3, [r7, #32]
 800aee2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	69f9      	ldr	r1, [r7, #28]
 800aee6:	6a3a      	ldr	r2, [r7, #32]
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e6      	bne.n	800aec2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aef4:	88fb      	ldrh	r3, [r7, #6]
 800aef6:	461a      	mov	r2, r3
 800aef8:	68b9      	ldr	r1, [r7, #8]
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 ff42 	bl	800bd84 <UART_Start_Receive_IT>
 800af00:	4603      	mov	r3, r0
 800af02:	e000      	b.n	800af06 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800af04:	2302      	movs	r3, #2
  }
}
 800af06:	4618      	mov	r0, r3
 800af08:	3728      	adds	r7, #40	; 0x28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b08a      	sub	sp, #40	; 0x28
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	4613      	mov	r3, r2
 800af1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af22:	2b20      	cmp	r3, #32
 800af24:	d132      	bne.n	800af8c <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <HAL_UART_Receive_DMA+0x24>
 800af2c:	88fb      	ldrh	r3, [r7, #6]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e02b      	b.n	800af8e <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d018      	beq.n	800af7c <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	613b      	str	r3, [r7, #16]
   return(result);
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	623b      	str	r3, [r7, #32]
 800af6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6c:	69f9      	ldr	r1, [r7, #28]
 800af6e:	6a3a      	ldr	r2, [r7, #32]
 800af70:	e841 2300 	strex	r3, r2, [r1]
 800af74:	61bb      	str	r3, [r7, #24]
   return(result);
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e6      	bne.n	800af4a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	461a      	mov	r2, r3
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 ffc4 	bl	800bf10 <UART_Start_Receive_DMA>
 800af88:	4603      	mov	r3, r0
 800af8a:	e000      	b.n	800af8e <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800af8c:	2302      	movs	r3, #2
  }
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3728      	adds	r7, #40	; 0x28
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b0ba      	sub	sp, #232	; 0xe8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800afc2:	f640 030f 	movw	r3, #2063	; 0x80f
 800afc6:	4013      	ands	r3, r2
 800afc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800afcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d115      	bne.n	800b000 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800afd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd8:	f003 0320 	and.w	r3, r3, #32
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00f      	beq.n	800b000 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800afe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d009      	beq.n	800b000 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8297 	beq.w	800b524 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
      }
      return;
 800affe:	e291      	b.n	800b524 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8117 	beq.w	800b238 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b01a:	4b85      	ldr	r3, [pc, #532]	; (800b230 <HAL_UART_IRQHandler+0x298>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 810a 	beq.w	800b238 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d011      	beq.n	800b054 <HAL_UART_IRQHandler+0xbc>
 800b030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00b      	beq.n	800b054 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2201      	movs	r2, #1
 800b042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b04a:	f043 0201 	orr.w	r2, r3, #1
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d011      	beq.n	800b084 <HAL_UART_IRQHandler+0xec>
 800b060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2202      	movs	r2, #2
 800b072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b07a:	f043 0204 	orr.w	r2, r3, #4
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d011      	beq.n	800b0b4 <HAL_UART_IRQHandler+0x11c>
 800b090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0aa:	f043 0202 	orr.w	r2, r3, #2
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d017      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c4:	f003 0320 	and.w	r3, r3, #32
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d105      	bne.n	800b0d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2208      	movs	r2, #8
 800b0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e6:	f043 0208 	orr.w	r2, r3, #8
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d012      	beq.n	800b122 <HAL_UART_IRQHandler+0x18a>
 800b0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00c      	beq.n	800b122 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b118:	f043 0220 	orr.w	r2, r3, #32
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 81fd 	beq.w	800b528 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00d      	beq.n	800b156 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b13e:	f003 0320 	and.w	r3, r3, #32
 800b142:	2b00      	cmp	r3, #0
 800b144:	d007      	beq.n	800b156 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b15c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16a:	2b40      	cmp	r3, #64	; 0x40
 800b16c:	d005      	beq.n	800b17a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b16e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b172:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b176:	2b00      	cmp	r3, #0
 800b178:	d04f      	beq.n	800b21a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 ff8e 	bl	800c09c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18a:	2b40      	cmp	r3, #64	; 0x40
 800b18c:	d141      	bne.n	800b212 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3308      	adds	r3, #8
 800b194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1d9      	bne.n	800b18e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d013      	beq.n	800b20a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e6:	4a13      	ldr	r2, [pc, #76]	; (800b234 <HAL_UART_IRQHandler+0x29c>)
 800b1e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fa fda4 	bl	8005d3c <HAL_DMA_Abort_IT>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d017      	beq.n	800b22a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b208:	e00f      	b.n	800b22a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7f7 f9a6 	bl	800255c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b210:	e00b      	b.n	800b22a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f7 f9a2 	bl	800255c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b218:	e007      	b.n	800b22a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7f7 f99e 	bl	800255c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b228:	e17e      	b.n	800b528 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22a:	bf00      	nop
    return;
 800b22c:	e17c      	b.n	800b528 <HAL_UART_IRQHandler+0x590>
 800b22e:	bf00      	nop
 800b230:	04000120 	.word	0x04000120
 800b234:	0800c349 	.word	0x0800c349

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	f040 814c 	bne.w	800b4da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b246:	f003 0310 	and.w	r3, r3, #16
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8145 	beq.w	800b4da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 813e 	beq.w	800b4da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2210      	movs	r2, #16
 800b264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	f040 80b6 	bne.w	800b3e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b282:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 8150 	beq.w	800b52c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b296:	429a      	cmp	r2, r3
 800b298:	f080 8148 	bcs.w	800b52c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2b0:	f000 8086 	beq.w	800b3c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2c0:	e853 3f00 	ldrex	r3, [r3]
 800b2c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b2e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2ee:	e841 2300 	strex	r3, r2, [r1]
 800b2f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1da      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b30e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b32a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1e1      	bne.n	800b2fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3308      	adds	r3, #8
 800b340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b35e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e3      	bne.n	800b33a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b390:	f023 0310 	bic.w	r3, r3, #16
 800b394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e4      	bne.n	800b380 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fa fc4e 	bl	8005c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f8c2 	bl	800b564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3e0:	e0a4      	b.n	800b52c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 8096 	beq.w	800b530 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 8091 	beq.w	800b530 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b430:	647b      	str	r3, [r7, #68]	; 0x44
 800b432:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e4      	bne.n	800b40e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3308      	adds	r3, #8
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	e853 3f00 	ldrex	r3, [r3]
 800b452:	623b      	str	r3, [r7, #32]
   return(result);
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	f023 0301 	bic.w	r3, r3, #1
 800b45a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3308      	adds	r3, #8
 800b464:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b468:	633a      	str	r2, [r7, #48]	; 0x30
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b470:	e841 2300 	strex	r3, r2, [r1]
 800b474:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e3      	bne.n	800b444 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2220      	movs	r2, #32
 800b480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	e853 3f00 	ldrex	r3, [r3]
 800b49c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f023 0310 	bic.w	r3, r3, #16
 800b4a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4b2:	61fb      	str	r3, [r7, #28]
 800b4b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	69b9      	ldr	r1, [r7, #24]
 800b4b8:	69fa      	ldr	r2, [r7, #28]
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	617b      	str	r3, [r7, #20]
   return(result);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e4      	bne.n	800b490 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f846 	bl	800b564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4d8:	e02a      	b.n	800b530 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00e      	beq.n	800b504 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d008      	beq.n	800b504 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d01c      	beq.n	800b534 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	4798      	blx	r3
    }
    return;
 800b502:	e017      	b.n	800b534 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d012      	beq.n	800b536 <HAL_UART_IRQHandler+0x59e>
 800b510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00c      	beq.n	800b536 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 ff29 	bl	800c374 <UART_EndTransmit_IT>
    return;
 800b522:	e008      	b.n	800b536 <HAL_UART_IRQHandler+0x59e>
      return;
 800b524:	bf00      	nop
 800b526:	e006      	b.n	800b536 <HAL_UART_IRQHandler+0x59e>
    return;
 800b528:	bf00      	nop
 800b52a:	e004      	b.n	800b536 <HAL_UART_IRQHandler+0x59e>
      return;
 800b52c:	bf00      	nop
 800b52e:	e002      	b.n	800b536 <HAL_UART_IRQHandler+0x59e>
      return;
 800b530:	bf00      	nop
 800b532:	e000      	b.n	800b536 <HAL_UART_IRQHandler+0x59e>
    return;
 800b534:	bf00      	nop
  }

}
 800b536:	37e8      	adds	r7, #232	; 0xe8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b088      	sub	sp, #32
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	431a      	orrs	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	4ba6      	ldr	r3, [pc, #664]	; (800b840 <UART_SetConfig+0x2c4>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	6979      	ldr	r1, [r7, #20]
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a94      	ldr	r2, [pc, #592]	; (800b844 <UART_SetConfig+0x2c8>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d120      	bne.n	800b63a <UART_SetConfig+0xbe>
 800b5f8:	4b93      	ldr	r3, [pc, #588]	; (800b848 <UART_SetConfig+0x2cc>)
 800b5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5fe:	f003 0303 	and.w	r3, r3, #3
 800b602:	2b03      	cmp	r3, #3
 800b604:	d816      	bhi.n	800b634 <UART_SetConfig+0xb8>
 800b606:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <UART_SetConfig+0x90>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b61d 	.word	0x0800b61d
 800b610:	0800b629 	.word	0x0800b629
 800b614:	0800b623 	.word	0x0800b623
 800b618:	0800b62f 	.word	0x0800b62f
 800b61c:	2301      	movs	r3, #1
 800b61e:	77fb      	strb	r3, [r7, #31]
 800b620:	e150      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b622:	2302      	movs	r3, #2
 800b624:	77fb      	strb	r3, [r7, #31]
 800b626:	e14d      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b628:	2304      	movs	r3, #4
 800b62a:	77fb      	strb	r3, [r7, #31]
 800b62c:	e14a      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b62e:	2308      	movs	r3, #8
 800b630:	77fb      	strb	r3, [r7, #31]
 800b632:	e147      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b634:	2310      	movs	r3, #16
 800b636:	77fb      	strb	r3, [r7, #31]
 800b638:	e144      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a83      	ldr	r2, [pc, #524]	; (800b84c <UART_SetConfig+0x2d0>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d132      	bne.n	800b6aa <UART_SetConfig+0x12e>
 800b644:	4b80      	ldr	r3, [pc, #512]	; (800b848 <UART_SetConfig+0x2cc>)
 800b646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64a:	f003 030c 	and.w	r3, r3, #12
 800b64e:	2b0c      	cmp	r3, #12
 800b650:	d828      	bhi.n	800b6a4 <UART_SetConfig+0x128>
 800b652:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <UART_SetConfig+0xdc>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b68d 	.word	0x0800b68d
 800b65c:	0800b6a5 	.word	0x0800b6a5
 800b660:	0800b6a5 	.word	0x0800b6a5
 800b664:	0800b6a5 	.word	0x0800b6a5
 800b668:	0800b699 	.word	0x0800b699
 800b66c:	0800b6a5 	.word	0x0800b6a5
 800b670:	0800b6a5 	.word	0x0800b6a5
 800b674:	0800b6a5 	.word	0x0800b6a5
 800b678:	0800b693 	.word	0x0800b693
 800b67c:	0800b6a5 	.word	0x0800b6a5
 800b680:	0800b6a5 	.word	0x0800b6a5
 800b684:	0800b6a5 	.word	0x0800b6a5
 800b688:	0800b69f 	.word	0x0800b69f
 800b68c:	2300      	movs	r3, #0
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e118      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b692:	2302      	movs	r3, #2
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e115      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b698:	2304      	movs	r3, #4
 800b69a:	77fb      	strb	r3, [r7, #31]
 800b69c:	e112      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b69e:	2308      	movs	r3, #8
 800b6a0:	77fb      	strb	r3, [r7, #31]
 800b6a2:	e10f      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	77fb      	strb	r3, [r7, #31]
 800b6a8:	e10c      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a68      	ldr	r2, [pc, #416]	; (800b850 <UART_SetConfig+0x2d4>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d120      	bne.n	800b6f6 <UART_SetConfig+0x17a>
 800b6b4:	4b64      	ldr	r3, [pc, #400]	; (800b848 <UART_SetConfig+0x2cc>)
 800b6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6be:	2b30      	cmp	r3, #48	; 0x30
 800b6c0:	d013      	beq.n	800b6ea <UART_SetConfig+0x16e>
 800b6c2:	2b30      	cmp	r3, #48	; 0x30
 800b6c4:	d814      	bhi.n	800b6f0 <UART_SetConfig+0x174>
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	d009      	beq.n	800b6de <UART_SetConfig+0x162>
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	d810      	bhi.n	800b6f0 <UART_SetConfig+0x174>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d002      	beq.n	800b6d8 <UART_SetConfig+0x15c>
 800b6d2:	2b10      	cmp	r3, #16
 800b6d4:	d006      	beq.n	800b6e4 <UART_SetConfig+0x168>
 800b6d6:	e00b      	b.n	800b6f0 <UART_SetConfig+0x174>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	77fb      	strb	r3, [r7, #31]
 800b6dc:	e0f2      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	77fb      	strb	r3, [r7, #31]
 800b6e2:	e0ef      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6e4:	2304      	movs	r3, #4
 800b6e6:	77fb      	strb	r3, [r7, #31]
 800b6e8:	e0ec      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6ea:	2308      	movs	r3, #8
 800b6ec:	77fb      	strb	r3, [r7, #31]
 800b6ee:	e0e9      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	77fb      	strb	r3, [r7, #31]
 800b6f4:	e0e6      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a56      	ldr	r2, [pc, #344]	; (800b854 <UART_SetConfig+0x2d8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d120      	bne.n	800b742 <UART_SetConfig+0x1c6>
 800b700:	4b51      	ldr	r3, [pc, #324]	; (800b848 <UART_SetConfig+0x2cc>)
 800b702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b70a:	2bc0      	cmp	r3, #192	; 0xc0
 800b70c:	d013      	beq.n	800b736 <UART_SetConfig+0x1ba>
 800b70e:	2bc0      	cmp	r3, #192	; 0xc0
 800b710:	d814      	bhi.n	800b73c <UART_SetConfig+0x1c0>
 800b712:	2b80      	cmp	r3, #128	; 0x80
 800b714:	d009      	beq.n	800b72a <UART_SetConfig+0x1ae>
 800b716:	2b80      	cmp	r3, #128	; 0x80
 800b718:	d810      	bhi.n	800b73c <UART_SetConfig+0x1c0>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <UART_SetConfig+0x1a8>
 800b71e:	2b40      	cmp	r3, #64	; 0x40
 800b720:	d006      	beq.n	800b730 <UART_SetConfig+0x1b4>
 800b722:	e00b      	b.n	800b73c <UART_SetConfig+0x1c0>
 800b724:	2300      	movs	r3, #0
 800b726:	77fb      	strb	r3, [r7, #31]
 800b728:	e0cc      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b72a:	2302      	movs	r3, #2
 800b72c:	77fb      	strb	r3, [r7, #31]
 800b72e:	e0c9      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b730:	2304      	movs	r3, #4
 800b732:	77fb      	strb	r3, [r7, #31]
 800b734:	e0c6      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b736:	2308      	movs	r3, #8
 800b738:	77fb      	strb	r3, [r7, #31]
 800b73a:	e0c3      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b73c:	2310      	movs	r3, #16
 800b73e:	77fb      	strb	r3, [r7, #31]
 800b740:	e0c0      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a44      	ldr	r2, [pc, #272]	; (800b858 <UART_SetConfig+0x2dc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d125      	bne.n	800b798 <UART_SetConfig+0x21c>
 800b74c:	4b3e      	ldr	r3, [pc, #248]	; (800b848 <UART_SetConfig+0x2cc>)
 800b74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b75a:	d017      	beq.n	800b78c <UART_SetConfig+0x210>
 800b75c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b760:	d817      	bhi.n	800b792 <UART_SetConfig+0x216>
 800b762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b766:	d00b      	beq.n	800b780 <UART_SetConfig+0x204>
 800b768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b76c:	d811      	bhi.n	800b792 <UART_SetConfig+0x216>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <UART_SetConfig+0x1fe>
 800b772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b776:	d006      	beq.n	800b786 <UART_SetConfig+0x20a>
 800b778:	e00b      	b.n	800b792 <UART_SetConfig+0x216>
 800b77a:	2300      	movs	r3, #0
 800b77c:	77fb      	strb	r3, [r7, #31]
 800b77e:	e0a1      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b780:	2302      	movs	r3, #2
 800b782:	77fb      	strb	r3, [r7, #31]
 800b784:	e09e      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b786:	2304      	movs	r3, #4
 800b788:	77fb      	strb	r3, [r7, #31]
 800b78a:	e09b      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b78c:	2308      	movs	r3, #8
 800b78e:	77fb      	strb	r3, [r7, #31]
 800b790:	e098      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b792:	2310      	movs	r3, #16
 800b794:	77fb      	strb	r3, [r7, #31]
 800b796:	e095      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a2f      	ldr	r2, [pc, #188]	; (800b85c <UART_SetConfig+0x2e0>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d125      	bne.n	800b7ee <UART_SetConfig+0x272>
 800b7a2:	4b29      	ldr	r3, [pc, #164]	; (800b848 <UART_SetConfig+0x2cc>)
 800b7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7b0:	d017      	beq.n	800b7e2 <UART_SetConfig+0x266>
 800b7b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7b6:	d817      	bhi.n	800b7e8 <UART_SetConfig+0x26c>
 800b7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7bc:	d00b      	beq.n	800b7d6 <UART_SetConfig+0x25a>
 800b7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7c2:	d811      	bhi.n	800b7e8 <UART_SetConfig+0x26c>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <UART_SetConfig+0x254>
 800b7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7cc:	d006      	beq.n	800b7dc <UART_SetConfig+0x260>
 800b7ce:	e00b      	b.n	800b7e8 <UART_SetConfig+0x26c>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	e076      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	77fb      	strb	r3, [r7, #31]
 800b7da:	e073      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	77fb      	strb	r3, [r7, #31]
 800b7e0:	e070      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	77fb      	strb	r3, [r7, #31]
 800b7e6:	e06d      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	77fb      	strb	r3, [r7, #31]
 800b7ec:	e06a      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a1b      	ldr	r2, [pc, #108]	; (800b860 <UART_SetConfig+0x2e4>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d138      	bne.n	800b86a <UART_SetConfig+0x2ee>
 800b7f8:	4b13      	ldr	r3, [pc, #76]	; (800b848 <UART_SetConfig+0x2cc>)
 800b7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b806:	d017      	beq.n	800b838 <UART_SetConfig+0x2bc>
 800b808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b80c:	d82a      	bhi.n	800b864 <UART_SetConfig+0x2e8>
 800b80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b812:	d00b      	beq.n	800b82c <UART_SetConfig+0x2b0>
 800b814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b818:	d824      	bhi.n	800b864 <UART_SetConfig+0x2e8>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <UART_SetConfig+0x2aa>
 800b81e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b822:	d006      	beq.n	800b832 <UART_SetConfig+0x2b6>
 800b824:	e01e      	b.n	800b864 <UART_SetConfig+0x2e8>
 800b826:	2300      	movs	r3, #0
 800b828:	77fb      	strb	r3, [r7, #31]
 800b82a:	e04b      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b82c:	2302      	movs	r3, #2
 800b82e:	77fb      	strb	r3, [r7, #31]
 800b830:	e048      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b832:	2304      	movs	r3, #4
 800b834:	77fb      	strb	r3, [r7, #31]
 800b836:	e045      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b838:	2308      	movs	r3, #8
 800b83a:	77fb      	strb	r3, [r7, #31]
 800b83c:	e042      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b83e:	bf00      	nop
 800b840:	efff69f3 	.word	0xefff69f3
 800b844:	40011000 	.word	0x40011000
 800b848:	40023800 	.word	0x40023800
 800b84c:	40004400 	.word	0x40004400
 800b850:	40004800 	.word	0x40004800
 800b854:	40004c00 	.word	0x40004c00
 800b858:	40005000 	.word	0x40005000
 800b85c:	40011400 	.word	0x40011400
 800b860:	40007800 	.word	0x40007800
 800b864:	2310      	movs	r3, #16
 800b866:	77fb      	strb	r3, [r7, #31]
 800b868:	e02c      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a72      	ldr	r2, [pc, #456]	; (800ba38 <UART_SetConfig+0x4bc>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d125      	bne.n	800b8c0 <UART_SetConfig+0x344>
 800b874:	4b71      	ldr	r3, [pc, #452]	; (800ba3c <UART_SetConfig+0x4c0>)
 800b876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b87e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b882:	d017      	beq.n	800b8b4 <UART_SetConfig+0x338>
 800b884:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b888:	d817      	bhi.n	800b8ba <UART_SetConfig+0x33e>
 800b88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88e:	d00b      	beq.n	800b8a8 <UART_SetConfig+0x32c>
 800b890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b894:	d811      	bhi.n	800b8ba <UART_SetConfig+0x33e>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d003      	beq.n	800b8a2 <UART_SetConfig+0x326>
 800b89a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b89e:	d006      	beq.n	800b8ae <UART_SetConfig+0x332>
 800b8a0:	e00b      	b.n	800b8ba <UART_SetConfig+0x33e>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	77fb      	strb	r3, [r7, #31]
 800b8a6:	e00d      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	77fb      	strb	r3, [r7, #31]
 800b8ac:	e00a      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b8ae:	2304      	movs	r3, #4
 800b8b0:	77fb      	strb	r3, [r7, #31]
 800b8b2:	e007      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b8b4:	2308      	movs	r3, #8
 800b8b6:	77fb      	strb	r3, [r7, #31]
 800b8b8:	e004      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b8ba:	2310      	movs	r3, #16
 800b8bc:	77fb      	strb	r3, [r7, #31]
 800b8be:	e001      	b.n	800b8c4 <UART_SetConfig+0x348>
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8cc:	d15b      	bne.n	800b986 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
 800b8d0:	2b08      	cmp	r3, #8
 800b8d2:	d828      	bhi.n	800b926 <UART_SetConfig+0x3aa>
 800b8d4:	a201      	add	r2, pc, #4	; (adr r2, 800b8dc <UART_SetConfig+0x360>)
 800b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8da:	bf00      	nop
 800b8dc:	0800b901 	.word	0x0800b901
 800b8e0:	0800b909 	.word	0x0800b909
 800b8e4:	0800b911 	.word	0x0800b911
 800b8e8:	0800b927 	.word	0x0800b927
 800b8ec:	0800b917 	.word	0x0800b917
 800b8f0:	0800b927 	.word	0x0800b927
 800b8f4:	0800b927 	.word	0x0800b927
 800b8f8:	0800b927 	.word	0x0800b927
 800b8fc:	0800b91f 	.word	0x0800b91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b900:	f7fc f900 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 800b904:	61b8      	str	r0, [r7, #24]
        break;
 800b906:	e013      	b.n	800b930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fc f910 	bl	8007b2c <HAL_RCC_GetPCLK2Freq>
 800b90c:	61b8      	str	r0, [r7, #24]
        break;
 800b90e:	e00f      	b.n	800b930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b910:	4b4b      	ldr	r3, [pc, #300]	; (800ba40 <UART_SetConfig+0x4c4>)
 800b912:	61bb      	str	r3, [r7, #24]
        break;
 800b914:	e00c      	b.n	800b930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b916:	f7fc f823 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 800b91a:	61b8      	str	r0, [r7, #24]
        break;
 800b91c:	e008      	b.n	800b930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b922:	61bb      	str	r3, [r7, #24]
        break;
 800b924:	e004      	b.n	800b930 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	77bb      	strb	r3, [r7, #30]
        break;
 800b92e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d074      	beq.n	800ba20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	005a      	lsls	r2, r3, #1
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	085b      	lsrs	r3, r3, #1
 800b940:	441a      	add	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	fbb2 f3f3 	udiv	r3, r2, r3
 800b94a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b0f      	cmp	r3, #15
 800b950:	d916      	bls.n	800b980 <UART_SetConfig+0x404>
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b958:	d212      	bcs.n	800b980 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	f023 030f 	bic.w	r3, r3, #15
 800b962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	085b      	lsrs	r3, r3, #1
 800b968:	b29b      	uxth	r3, r3
 800b96a:	f003 0307 	and.w	r3, r3, #7
 800b96e:	b29a      	uxth	r2, r3
 800b970:	89fb      	ldrh	r3, [r7, #14]
 800b972:	4313      	orrs	r3, r2
 800b974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	89fa      	ldrh	r2, [r7, #14]
 800b97c:	60da      	str	r2, [r3, #12]
 800b97e:	e04f      	b.n	800ba20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	77bb      	strb	r3, [r7, #30]
 800b984:	e04c      	b.n	800ba20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b986:	7ffb      	ldrb	r3, [r7, #31]
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d828      	bhi.n	800b9de <UART_SetConfig+0x462>
 800b98c:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <UART_SetConfig+0x418>)
 800b98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b992:	bf00      	nop
 800b994:	0800b9b9 	.word	0x0800b9b9
 800b998:	0800b9c1 	.word	0x0800b9c1
 800b99c:	0800b9c9 	.word	0x0800b9c9
 800b9a0:	0800b9df 	.word	0x0800b9df
 800b9a4:	0800b9cf 	.word	0x0800b9cf
 800b9a8:	0800b9df 	.word	0x0800b9df
 800b9ac:	0800b9df 	.word	0x0800b9df
 800b9b0:	0800b9df 	.word	0x0800b9df
 800b9b4:	0800b9d7 	.word	0x0800b9d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9b8:	f7fc f8a4 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 800b9bc:	61b8      	str	r0, [r7, #24]
        break;
 800b9be:	e013      	b.n	800b9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9c0:	f7fc f8b4 	bl	8007b2c <HAL_RCC_GetPCLK2Freq>
 800b9c4:	61b8      	str	r0, [r7, #24]
        break;
 800b9c6:	e00f      	b.n	800b9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9c8:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <UART_SetConfig+0x4c4>)
 800b9ca:	61bb      	str	r3, [r7, #24]
        break;
 800b9cc:	e00c      	b.n	800b9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9ce:	f7fb ffc7 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 800b9d2:	61b8      	str	r0, [r7, #24]
        break;
 800b9d4:	e008      	b.n	800b9e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9da:	61bb      	str	r3, [r7, #24]
        break;
 800b9dc:	e004      	b.n	800b9e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	77bb      	strb	r3, [r7, #30]
        break;
 800b9e6:	bf00      	nop
    }

    if (pclk != 0U)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d018      	beq.n	800ba20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	085a      	lsrs	r2, r3, #1
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	441a      	add	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b0f      	cmp	r3, #15
 800ba06:	d909      	bls.n	800ba1c <UART_SetConfig+0x4a0>
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba0e:	d205      	bcs.n	800ba1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60da      	str	r2, [r3, #12]
 800ba1a:	e001      	b.n	800ba20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ba2c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3720      	adds	r7, #32
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	40007c00 	.word	0x40007c00
 800ba3c:	40023800 	.word	0x40023800
 800ba40:	00f42400 	.word	0x00f42400

0800ba44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d01a      	beq.n	800bb5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb42:	d10a      	bne.n	800bb5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	605a      	str	r2, [r3, #4]
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb98:	f7f9 fe40 	bl	800581c <HAL_GetTick>
 800bb9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 0308 	and.w	r3, r3, #8
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d10e      	bne.n	800bbca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f81b 	bl	800bbf6 <UART_WaitOnFlagUntilTimeout>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e011      	b.n	800bbee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b09c      	sub	sp, #112	; 0x70
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	4613      	mov	r3, r2
 800bc04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc06:	e0a7      	b.n	800bd58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	f000 80a3 	beq.w	800bd58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc12:	f7f9 fe03 	bl	800581c <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d302      	bcc.n	800bc28 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d13f      	bne.n	800bca8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc3c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e6      	bne.n	800bc28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	663b      	str	r3, [r7, #96]	; 0x60
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e5      	bne.n	800bc5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2220      	movs	r2, #32
 800bc92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e068      	b.n	800bd7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d050      	beq.n	800bd58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcc4:	d148      	bne.n	800bd58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcee:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e6      	bne.n	800bcd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3308      	adds	r3, #8
 800bd08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	613b      	str	r3, [r7, #16]
   return(result);
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f023 0301 	bic.w	r3, r3, #1
 800bd18:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd22:	623a      	str	r2, [r7, #32]
 800bd24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	69f9      	ldr	r1, [r7, #28]
 800bd28:	6a3a      	ldr	r2, [r7, #32]
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e5      	bne.n	800bd02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2220      	movs	r2, #32
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e010      	b.n	800bd7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	69da      	ldr	r2, [r3, #28]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4013      	ands	r3, r2
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	bf0c      	ite	eq
 800bd68:	2301      	moveq	r3, #1
 800bd6a:	2300      	movne	r3, #0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	461a      	mov	r2, r3
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	f43f af48 	beq.w	800bc08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3770      	adds	r7, #112	; 0x70
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
	...

0800bd84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b097      	sub	sp, #92	; 0x5c
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	88fa      	ldrh	r2, [r7, #6]
 800bda4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb6:	d10e      	bne.n	800bdd6 <UART_Start_Receive_IT+0x52>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d105      	bne.n	800bdcc <UART_Start_Receive_IT+0x48>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bdca:	e02d      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	22ff      	movs	r2, #255	; 0xff
 800bdd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bdd4:	e028      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10d      	bne.n	800bdfa <UART_Start_Receive_IT+0x76>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d104      	bne.n	800bdf0 <UART_Start_Receive_IT+0x6c>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	22ff      	movs	r2, #255	; 0xff
 800bdea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bdee:	e01b      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	227f      	movs	r2, #127	; 0x7f
 800bdf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bdf8:	e016      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be02:	d10d      	bne.n	800be20 <UART_Start_Receive_IT+0x9c>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d104      	bne.n	800be16 <UART_Start_Receive_IT+0x92>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	227f      	movs	r2, #127	; 0x7f
 800be10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be14:	e008      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	223f      	movs	r2, #63	; 0x3f
 800be1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be1e:	e003      	b.n	800be28 <UART_Start_Receive_IT+0xa4>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2222      	movs	r2, #34	; 0x22
 800be34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3308      	adds	r3, #8
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	f043 0301 	orr.w	r3, r3, #1
 800be4e:	657b      	str	r3, [r7, #84]	; 0x54
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3308      	adds	r3, #8
 800be56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be58:	64ba      	str	r2, [r7, #72]	; 0x48
 800be5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be60:	e841 2300 	strex	r3, r2, [r1]
 800be64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e5      	bne.n	800be38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be74:	d107      	bne.n	800be86 <UART_Start_Receive_IT+0x102>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	4a21      	ldr	r2, [pc, #132]	; (800bf08 <UART_Start_Receive_IT+0x184>)
 800be82:	669a      	str	r2, [r3, #104]	; 0x68
 800be84:	e002      	b.n	800be8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4a20      	ldr	r2, [pc, #128]	; (800bf0c <UART_Start_Receive_IT+0x188>)
 800be8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d019      	beq.n	800bec8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	e853 3f00 	ldrex	r3, [r3]
 800bea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb2:	637b      	str	r3, [r7, #52]	; 0x34
 800beb4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800beb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beba:	e841 2300 	strex	r3, r2, [r1]
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1e6      	bne.n	800be94 <UART_Start_Receive_IT+0x110>
 800bec6:	e018      	b.n	800befa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	613b      	str	r3, [r7, #16]
   return(result);
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f043 0320 	orr.w	r3, r3, #32
 800bedc:	653b      	str	r3, [r7, #80]	; 0x50
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee6:	623b      	str	r3, [r7, #32]
 800bee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	69f9      	ldr	r1, [r7, #28]
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e6      	bne.n	800bec8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	375c      	adds	r7, #92	; 0x5c
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	0800c52f 	.word	0x0800c52f
 800bf0c:	0800c3c9 	.word	0x0800c3c9

0800bf10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b096      	sub	sp, #88	; 0x58
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	88fa      	ldrh	r2, [r7, #6]
 800bf28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2222      	movs	r2, #34	; 0x22
 800bf38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d028      	beq.n	800bf96 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf48:	4a3e      	ldr	r2, [pc, #248]	; (800c044 <UART_Start_Receive_DMA+0x134>)
 800bf4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf50:	4a3d      	ldr	r2, [pc, #244]	; (800c048 <UART_Start_Receive_DMA+0x138>)
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf58:	4a3c      	ldr	r2, [pc, #240]	; (800c04c <UART_Start_Receive_DMA+0x13c>)
 800bf5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf60:	2200      	movs	r2, #0
 800bf62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3324      	adds	r3, #36	; 0x24
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf74:	461a      	mov	r2, r3
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	f7f9 fe10 	bl	8005b9c <HAL_DMA_Start_IT>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d009      	beq.n	800bf96 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2210      	movs	r2, #16
 800bf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e051      	b.n	800c03a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d018      	beq.n	800bfd0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfb2:	657b      	str	r3, [r7, #84]	; 0x54
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfbe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc4:	e841 2300 	strex	r3, r2, [r1]
 800bfc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e6      	bne.n	800bf9e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	653b      	str	r3, [r7, #80]	; 0x50
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3308      	adds	r3, #8
 800bfee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bff0:	637a      	str	r2, [r7, #52]	; 0x34
 800bff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e5      	bne.n	800bfd0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3308      	adds	r3, #8
 800c00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	613b      	str	r3, [r7, #16]
   return(result);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3308      	adds	r3, #8
 800c022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c024:	623a      	str	r2, [r7, #32]
 800c026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	69f9      	ldr	r1, [r7, #28]
 800c02a:	6a3a      	ldr	r2, [r7, #32]
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	61bb      	str	r3, [r7, #24]
   return(result);
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e5      	bne.n	800c004 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3758      	adds	r7, #88	; 0x58
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	0800c165 	.word	0x0800c165
 800c048:	0800c28d 	.word	0x0800c28d
 800c04c:	0800c2cb 	.word	0x0800c2cb

0800c050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b089      	sub	sp, #36	; 0x24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	60bb      	str	r3, [r7, #8]
   return(result);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	61bb      	str	r3, [r7, #24]
 800c078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	6979      	ldr	r1, [r7, #20]
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	613b      	str	r3, [r7, #16]
   return(result);
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e6      	bne.n	800c058 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c090:	bf00      	nop
 800c092:	3724      	adds	r7, #36	; 0x24
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b095      	sub	sp, #84	; 0x54
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c0c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e6      	bne.n	800c0a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e5      	bne.n	800c0d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d118      	bne.n	800c144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	e853 3f00 	ldrex	r3, [r3]
 800c11e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	f023 0310 	bic.w	r3, r3, #16
 800c126:	647b      	str	r3, [r7, #68]	; 0x44
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	461a      	mov	r2, r3
 800c12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c130:	61bb      	str	r3, [r7, #24]
 800c132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c134:	6979      	ldr	r1, [r7, #20]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	e841 2300 	strex	r3, r2, [r1]
 800c13c:	613b      	str	r3, [r7, #16]
   return(result);
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1e6      	bne.n	800c112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2220      	movs	r2, #32
 800c148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c158:	bf00      	nop
 800c15a:	3754      	adds	r7, #84	; 0x54
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b09c      	sub	sp, #112	; 0x70
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c17a:	d071      	beq.n	800c260 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c17e:	2200      	movs	r2, #0
 800c180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c198:	66bb      	str	r3, [r7, #104]	; 0x68
 800c19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e6      	bne.n	800c184 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	f023 0301 	bic.w	r3, r3, #1
 800c1cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1d6:	647a      	str	r2, [r7, #68]	; 0x44
 800c1d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e5      	bne.n	800c1b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c200:	663b      	str	r3, [r7, #96]	; 0x60
 800c202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c20a:	633a      	str	r2, [r7, #48]	; 0x30
 800c20c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e5      	bne.n	800c1ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c220:	2220      	movs	r2, #32
 800c222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d118      	bne.n	800c260 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f023 0310 	bic.w	r3, r3, #16
 800c242:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	461a      	mov	r2, r3
 800c24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c250:	69b9      	ldr	r1, [r7, #24]
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	e841 2300 	strex	r3, r2, [r1]
 800c258:	617b      	str	r3, [r7, #20]
   return(result);
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e6      	bne.n	800c22e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c262:	2200      	movs	r2, #0
 800c264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d107      	bne.n	800c27e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c274:	4619      	mov	r1, r3
 800c276:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c278:	f7ff f974 	bl	800b564 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c27c:	e002      	b.n	800c284 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c27e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c280:	f7f6 f872 	bl	8002368 <HAL_UART_RxCpltCallback>
}
 800c284:	bf00      	nop
 800c286:	3770      	adds	r7, #112	; 0x70
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d109      	bne.n	800c2bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2ae:	085b      	lsrs	r3, r3, #1
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff f955 	bl	800b564 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2ba:	e002      	b.n	800c2c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7ff f947 	bl	800b550 <HAL_UART_RxHalfCpltCallback>
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b086      	sub	sp, #24
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f0:	2b80      	cmp	r3, #128	; 0x80
 800c2f2:	d109      	bne.n	800c308 <UART_DMAError+0x3e>
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	2b21      	cmp	r3, #33	; 0x21
 800c2f8:	d106      	bne.n	800c308 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c302:	6978      	ldr	r0, [r7, #20]
 800c304:	f7ff fea4 	bl	800c050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d109      	bne.n	800c32a <UART_DMAError+0x60>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b22      	cmp	r3, #34	; 0x22
 800c31a:	d106      	bne.n	800c32a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c324:	6978      	ldr	r0, [r7, #20]
 800c326:	f7ff feb9 	bl	800c09c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c330:	f043 0210 	orr.w	r2, r3, #16
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f7f6 f90e 	bl	800255c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f7f6 f8f8 	bl	800255c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c36c:	bf00      	nop
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	60bb      	str	r3, [r7, #8]
   return(result);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e6      	bne.n	800c37c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff f8be 	bl	800b53c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3c0:	bf00      	nop
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b096      	sub	sp, #88	; 0x58
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e0:	2b22      	cmp	r3, #34	; 0x22
 800c3e2:	f040 8098 	bne.w	800c516 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c3f4:	b2d9      	uxtb	r1, r3
 800c3f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c400:	400a      	ands	r2, r1
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c416:	b29b      	uxth	r3, r3
 800c418:	3b01      	subs	r3, #1
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c428:	b29b      	uxth	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d17b      	bne.n	800c526 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	e853 3f00 	ldrex	r3, [r3]
 800c43a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c442:	653b      	str	r3, [r7, #80]	; 0x50
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44c:	647b      	str	r3, [r7, #68]	; 0x44
 800c44e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e6      	bne.n	800c42e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	623b      	str	r3, [r7, #32]
   return(result);
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	f023 0301 	bic.w	r3, r3, #1
 800c476:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3308      	adds	r3, #8
 800c47e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c480:	633a      	str	r2, [r7, #48]	; 0x30
 800c482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e5      	bne.n	800c460 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2220      	movs	r2, #32
 800c498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d12e      	bne.n	800c50e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	e853 3f00 	ldrex	r3, [r3]
 800c4c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 0310 	bic.w	r3, r3, #16
 800c4ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d4:	61fb      	str	r3, [r7, #28]
 800c4d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d8:	69b9      	ldr	r1, [r7, #24]
 800c4da:	69fa      	ldr	r2, [r7, #28]
 800c4dc:	e841 2300 	strex	r3, r2, [r1]
 800c4e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1e6      	bne.n	800c4b6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b10      	cmp	r3, #16
 800c4f4:	d103      	bne.n	800c4fe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2210      	movs	r2, #16
 800c4fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff f82c 	bl	800b564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c50c:	e00b      	b.n	800c526 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7f5 ff2a 	bl	8002368 <HAL_UART_RxCpltCallback>
}
 800c514:	e007      	b.n	800c526 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	699a      	ldr	r2, [r3, #24]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f042 0208 	orr.w	r2, r2, #8
 800c524:	619a      	str	r2, [r3, #24]
}
 800c526:	bf00      	nop
 800c528:	3758      	adds	r7, #88	; 0x58
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b096      	sub	sp, #88	; 0x58
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c53c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c546:	2b22      	cmp	r3, #34	; 0x22
 800c548:	f040 8098 	bne.w	800c67c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c552:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c55c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c560:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c564:	4013      	ands	r3, r2
 800c566:	b29a      	uxth	r2, r3
 800c568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c56a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c570:	1c9a      	adds	r2, r3, #2
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	3b01      	subs	r3, #1
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c58e:	b29b      	uxth	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d17b      	bne.n	800c68c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c59c:	e853 3f00 	ldrex	r3, [r3]
 800c5a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b2:	643b      	str	r3, [r7, #64]	; 0x40
 800c5b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5ba:	e841 2300 	strex	r3, r2, [r1]
 800c5be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1e6      	bne.n	800c594 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e5      	bne.n	800c5c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c612:	2b01      	cmp	r3, #1
 800c614:	d12e      	bne.n	800c674 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	e853 3f00 	ldrex	r3, [r3]
 800c628:	60bb      	str	r3, [r7, #8]
   return(result);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	f023 0310 	bic.w	r3, r3, #16
 800c630:	647b      	str	r3, [r7, #68]	; 0x44
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63a:	61bb      	str	r3, [r7, #24]
 800c63c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63e:	6979      	ldr	r1, [r7, #20]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	e841 2300 	strex	r3, r2, [r1]
 800c646:	613b      	str	r3, [r7, #16]
   return(result);
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1e6      	bne.n	800c61c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	f003 0310 	and.w	r3, r3, #16
 800c658:	2b10      	cmp	r3, #16
 800c65a:	d103      	bne.n	800c664 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2210      	movs	r2, #16
 800c662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7fe ff79 	bl	800b564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c672:	e00b      	b.n	800c68c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7f5 fe77 	bl	8002368 <HAL_UART_RxCpltCallback>
}
 800c67a:	e007      	b.n	800c68c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f042 0208 	orr.w	r2, r2, #8
 800c68a:	619a      	str	r2, [r3, #24]
}
 800c68c:	bf00      	nop
 800c68e:	3758      	adds	r7, #88	; 0x58
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6a6:	2b84      	cmp	r3, #132	; 0x84
 800c6a8:	d005      	beq.n	800c6b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	3303      	adds	r3, #3
 800c6b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ca:	f3ef 8305 	mrs	r3, IPSR
 800c6ce:	607b      	str	r3, [r7, #4]
  return(result);
 800c6d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bf14      	ite	ne
 800c6d6:	2301      	movne	r3, #1
 800c6d8:	2300      	moveq	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c6ec:	f001 fa38 	bl	800db60 <vTaskStartScheduler>
  
  return osOK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f8:	b089      	sub	sp, #36	; 0x24
 800c6fa:	af04      	add	r7, sp, #16
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d020      	beq.n	800c74a <osThreadCreate+0x54>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01c      	beq.n	800c74a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685c      	ldr	r4, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	691e      	ldr	r6, [r3, #16]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff ffb6 	bl	800c694 <makeFreeRtosPriority>
 800c728:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c732:	9202      	str	r2, [sp, #8]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	9100      	str	r1, [sp, #0]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	4632      	mov	r2, r6
 800c73c:	4629      	mov	r1, r5
 800c73e:	4620      	mov	r0, r4
 800c740:	f001 f834 	bl	800d7ac <xTaskCreateStatic>
 800c744:	4603      	mov	r3, r0
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e01c      	b.n	800c784 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685c      	ldr	r4, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c756:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff ff98 	bl	800c694 <makeFreeRtosPriority>
 800c764:	4602      	mov	r2, r0
 800c766:	f107 030c 	add.w	r3, r7, #12
 800c76a:	9301      	str	r3, [sp, #4]
 800c76c:	9200      	str	r2, [sp, #0]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	4632      	mov	r2, r6
 800c772:	4629      	mov	r1, r5
 800c774:	4620      	mov	r0, r4
 800c776:	f001 f87c 	bl	800d872 <xTaskCreate>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d001      	beq.n	800c784 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	e000      	b.n	800c786 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c78e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <osDelay+0x16>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	e000      	b.n	800c7a6 <osDelay+0x18>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 f9a4 	bl	800daf4 <vTaskDelay>
  
  return osOK;
 800c7ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d007      	beq.n	800c7d6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	f000 fb77 	bl	800cec0 <xQueueCreateMutexStatic>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	e003      	b.n	800c7de <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	f000 fb5a 	bl	800ce90 <xQueueCreateMutex>
 800c7dc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <osMutexWait+0x18>
    return osErrorParameter;
 800c7fc:	2380      	movs	r3, #128	; 0x80
 800c7fe:	e03a      	b.n	800c876 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80a:	d103      	bne.n	800c814 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c80c:	f04f 33ff 	mov.w	r3, #4294967295
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e009      	b.n	800c828 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d006      	beq.n	800c828 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <osMutexWait+0x40>
      ticks = 1;
 800c824:	2301      	movs	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c828:	f7ff ff4c 	bl	800c6c4 <inHandlerMode>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d017      	beq.n	800c862 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c832:	f107 0308 	add.w	r3, r7, #8
 800c836:	461a      	mov	r2, r3
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fde8 	bl	800d410 <xQueueReceiveFromISR>
 800c840:	4603      	mov	r3, r0
 800c842:	2b01      	cmp	r3, #1
 800c844:	d001      	beq.n	800c84a <osMutexWait+0x62>
      return osErrorOS;
 800c846:	23ff      	movs	r3, #255	; 0xff
 800c848:	e015      	b.n	800c876 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d011      	beq.n	800c874 <osMutexWait+0x8c>
 800c850:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <osMutexWait+0x98>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	e008      	b.n	800c874 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fccb 	bl	800d200 <xQueueSemaphoreTake>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d001      	beq.n	800c874 <osMutexWait+0x8c>
    return osErrorOS;
 800c870:	23ff      	movs	r3, #255	; 0xff
 800c872:	e000      	b.n	800c876 <osMutexWait+0x8e>
  }
  
  return osOK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	e000ed04 	.word	0xe000ed04

0800c884 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c890:	2300      	movs	r3, #0
 800c892:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c894:	f7ff ff16 	bl	800c6c4 <inHandlerMode>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d016      	beq.n	800c8cc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c89e:	f107 0308 	add.w	r3, r7, #8
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fc15 	bl	800d0d4 <xQueueGiveFromISR>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d001      	beq.n	800c8b4 <osMutexRelease+0x30>
      return osErrorOS;
 800c8b0:	23ff      	movs	r3, #255	; 0xff
 800c8b2:	e017      	b.n	800c8e4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d013      	beq.n	800c8e2 <osMutexRelease+0x5e>
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <osMutexRelease+0x68>)
 800c8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	e00a      	b.n	800c8e2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fb10 	bl	800cef8 <xQueueGenericSend>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d001      	beq.n	800c8e2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c8de:	23ff      	movs	r3, #255	; 0xff
 800c8e0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	e000ed04 	.word	0xe000ed04

0800c8f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af02      	add	r7, sp, #8
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d10a      	bne.n	800c91e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	2203      	movs	r2, #3
 800c90e:	9200      	str	r2, [sp, #0]
 800c910:	2200      	movs	r2, #0
 800c912:	2100      	movs	r1, #0
 800c914:	2001      	movs	r0, #1
 800c916:	f000 f9be 	bl	800cc96 <xQueueGenericCreateStatic>
 800c91a:	4603      	mov	r3, r0
 800c91c:	e016      	b.n	800c94c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	e014      	b.n	800c94c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d110      	bne.n	800c94a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c928:	2203      	movs	r2, #3
 800c92a:	2100      	movs	r1, #0
 800c92c:	2001      	movs	r0, #1
 800c92e:	f000 fa34 	bl	800cd9a <xQueueGenericCreate>
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <osSemaphoreCreate+0x56>
 800c93a:	2300      	movs	r3, #0
 800c93c:	2200      	movs	r2, #0
 800c93e:	2100      	movs	r1, #0
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 fad9 	bl	800cef8 <xQueueGenericSend>
      return sema;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	e000      	b.n	800c94c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c94a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c95e:	2300      	movs	r3, #0
 800c960:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c968:	2380      	movs	r3, #128	; 0x80
 800c96a:	e03a      	b.n	800c9e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c976:	d103      	bne.n	800c980 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	e009      	b.n	800c994 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d006      	beq.n	800c994 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <osSemaphoreWait+0x40>
      ticks = 1;
 800c990:	2301      	movs	r3, #1
 800c992:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c994:	f7ff fe96 	bl	800c6c4 <inHandlerMode>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d017      	beq.n	800c9ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c99e:	f107 0308 	add.w	r3, r7, #8
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fd32 	bl	800d410 <xQueueReceiveFromISR>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d001      	beq.n	800c9b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c9b2:	23ff      	movs	r3, #255	; 0xff
 800c9b4:	e015      	b.n	800c9e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d011      	beq.n	800c9e0 <osSemaphoreWait+0x8c>
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <osSemaphoreWait+0x98>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	e008      	b.n	800c9e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fc15 	bl	800d200 <xQueueSemaphoreTake>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d001      	beq.n	800c9e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c9dc:	23ff      	movs	r3, #255	; 0xff
 800c9de:	e000      	b.n	800c9e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	e000ed04 	.word	0xe000ed04

0800c9f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca00:	f7ff fe60 	bl	800c6c4 <inHandlerMode>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d016      	beq.n	800ca38 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca0a:	f107 0308 	add.w	r3, r7, #8
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fb5f 	bl	800d0d4 <xQueueGiveFromISR>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d001      	beq.n	800ca20 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca1c:	23ff      	movs	r3, #255	; 0xff
 800ca1e:	e017      	b.n	800ca50 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d013      	beq.n	800ca4e <osSemaphoreRelease+0x5e>
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <osSemaphoreRelease+0x68>)
 800ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	e00a      	b.n	800ca4e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca38:	2300      	movs	r3, #0
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fa5a 	bl	800cef8 <xQueueGenericSend>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d001      	beq.n	800ca4e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca4a:	23ff      	movs	r3, #255	; 0xff
 800ca4c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fd59 	bl	800d51c <uxQueueMessagesWaiting>
 800ca6a:	4603      	mov	r3, r0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f103 0208 	add.w	r2, r3, #8
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f103 0208 	add.w	r2, r3, #8
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f103 0208 	add.w	r2, r3, #8
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
}
 800cb0a:	bf00      	nop
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb16:	b480      	push	{r7}
 800cb18:	b085      	sub	sp, #20
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2c:	d103      	bne.n	800cb36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e00c      	b.n	800cb50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3308      	adds	r3, #8
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	e002      	b.n	800cb44 <vListInsert+0x2e>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d2f6      	bcs.n	800cb3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	685a      	ldr	r2, [r3, #4]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	683a      	ldr	r2, [r7, #0]
 800cb6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	601a      	str	r2, [r3, #0]
}
 800cb7c:	bf00      	nop
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6892      	ldr	r2, [r2, #8]
 800cb9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	6852      	ldr	r2, [r2, #4]
 800cba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d103      	bne.n	800cbbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	1e5a      	subs	r2, r3, #1
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10c      	bne.n	800cc0a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	b672      	cpsid	i
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	b662      	cpsie	i
 800cc04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cc0a:	f001 fee7 	bl	800e9dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc1a:	fb01 f303 	mul.w	r3, r1, r3
 800cc1e:	441a      	add	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	68f9      	ldr	r1, [r7, #12]
 800cc3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc40:	fb01 f303 	mul.w	r3, r1, r3
 800cc44:	441a      	add	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	22ff      	movs	r2, #255	; 0xff
 800cc4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <xQueueGenericReset+0x98>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00f      	beq.n	800cc88 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	3310      	adds	r3, #16
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f001 f9a5 	bl	800dfbc <xTaskRemoveFromEventList>
 800cc72:	e009      	b.n	800cc88 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3310      	adds	r3, #16
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7ff fefb 	bl	800ca74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3324      	adds	r3, #36	; 0x24
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff fef6 	bl	800ca74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc88:	f001 fedc 	bl	800ea44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc8c:	2301      	movs	r3, #1
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b08e      	sub	sp, #56	; 0x38
 800cc9a:	af02      	add	r7, sp, #8
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10c      	bne.n	800ccc4 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	b672      	cpsid	i
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	b662      	cpsie	i
 800ccbe:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10c      	bne.n	800cce4 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	b672      	cpsid	i
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	b662      	cpsie	i
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cce0:	bf00      	nop
 800cce2:	e7fe      	b.n	800cce2 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <xQueueGenericCreateStatic+0x5a>
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <xQueueGenericCreateStatic+0x5e>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e000      	b.n	800ccf6 <xQueueGenericCreateStatic+0x60>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10c      	bne.n	800cd14 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	b672      	cpsid	i
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	b662      	cpsie	i
 800cd0e:	623b      	str	r3, [r7, #32]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d102      	bne.n	800cd20 <xQueueGenericCreateStatic+0x8a>
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <xQueueGenericCreateStatic+0x8e>
 800cd20:	2301      	movs	r3, #1
 800cd22:	e000      	b.n	800cd26 <xQueueGenericCreateStatic+0x90>
 800cd24:	2300      	movs	r3, #0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10c      	bne.n	800cd44 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	b672      	cpsid	i
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	b662      	cpsie	i
 800cd3e:	61fb      	str	r3, [r7, #28]
}
 800cd40:	bf00      	nop
 800cd42:	e7fe      	b.n	800cd42 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd44:	2348      	movs	r3, #72	; 0x48
 800cd46:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2b48      	cmp	r3, #72	; 0x48
 800cd4c:	d00c      	beq.n	800cd68 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	b672      	cpsid	i
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	b662      	cpsie	i
 800cd62:	61bb      	str	r3, [r7, #24]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00d      	beq.n	800cd90 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 f847 	bl	800ce1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3730      	adds	r7, #48	; 0x30
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b08a      	sub	sp, #40	; 0x28
 800cd9e:	af02      	add	r7, sp, #8
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	4613      	mov	r3, r2
 800cda6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10c      	bne.n	800cdc8 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	b672      	cpsid	i
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	b662      	cpsie	i
 800cdc2:	613b      	str	r3, [r7, #16]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d102      	bne.n	800cdd4 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	61fb      	str	r3, [r7, #28]
 800cdd2:	e004      	b.n	800cdde <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	fb02 f303 	mul.w	r3, r2, r3
 800cddc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	3348      	adds	r3, #72	; 0x48
 800cde2:	4618      	mov	r0, r3
 800cde4:	f001 ff26 	bl	800ec34 <pvPortMalloc>
 800cde8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d011      	beq.n	800ce14 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	3348      	adds	r3, #72	; 0x48
 800cdf8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce02:	79fa      	ldrb	r2, [r7, #7]
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 f805 	bl	800ce1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce14:	69bb      	ldr	r3, [r7, #24]
	}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
 800ce2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d103      	bne.n	800ce3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e002      	b.n	800ce40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	69b8      	ldr	r0, [r7, #24]
 800ce50:	f7ff fec4 	bl	800cbdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce54:	bf00      	nop
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00e      	beq.n	800ce88 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	2200      	movs	r2, #0
 800ce80:	2100      	movs	r1, #0
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f838 	bl	800cef8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	617b      	str	r3, [r7, #20]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6939      	ldr	r1, [r7, #16]
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f7ff ff76 	bl	800cd9a <xQueueGenericCreate>
 800ceae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f7ff ffd3 	bl	800ce5c <prvInitialiseMutex>

		return xNewQueue;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
	}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cecc:	2301      	movs	r3, #1
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	6939      	ldr	r1, [r7, #16]
 800cede:	6978      	ldr	r0, [r7, #20]
 800cee0:	f7ff fed9 	bl	800cc96 <xQueueGenericCreateStatic>
 800cee4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f7ff ffb8 	bl	800ce5c <prvInitialiseMutex>

		return xNewQueue;
 800ceec:	68fb      	ldr	r3, [r7, #12]
	}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08e      	sub	sp, #56	; 0x38
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf06:	2300      	movs	r3, #0
 800cf08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10c      	bne.n	800cf2e <xQueueGenericSend+0x36>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	b672      	cpsid	i
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	b662      	cpsie	i
 800cf28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d103      	bne.n	800cf3c <xQueueGenericSend+0x44>
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <xQueueGenericSend+0x48>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <xQueueGenericSend+0x4a>
 800cf40:	2300      	movs	r3, #0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10c      	bne.n	800cf60 <xQueueGenericSend+0x68>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	b672      	cpsid	i
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	b662      	cpsie	i
 800cf5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d103      	bne.n	800cf6e <xQueueGenericSend+0x76>
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <xQueueGenericSend+0x7a>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <xQueueGenericSend+0x7c>
 800cf72:	2300      	movs	r3, #0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <xQueueGenericSend+0x9a>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	b672      	cpsid	i
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	b662      	cpsie	i
 800cf8c:	623b      	str	r3, [r7, #32]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf92:	f001 f9d5 	bl	800e340 <xTaskGetSchedulerState>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <xQueueGenericSend+0xaa>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <xQueueGenericSend+0xae>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <xQueueGenericSend+0xb0>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10c      	bne.n	800cfc6 <xQueueGenericSend+0xce>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	b672      	cpsid	i
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	b662      	cpsie	i
 800cfc0:	61fb      	str	r3, [r7, #28]
}
 800cfc2:	bf00      	nop
 800cfc4:	e7fe      	b.n	800cfc4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfc6:	f001 fd09 	bl	800e9dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d302      	bcc.n	800cfdc <xQueueGenericSend+0xe4>
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d112      	bne.n	800d002 <xQueueGenericSend+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	68b9      	ldr	r1, [r7, #8]
 800cfe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe2:	f000 fad3 	bl	800d58c <prvCopyDataToQueue>
 800cfe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	3324      	adds	r3, #36	; 0x24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 ffe1 	bl	800dfbc <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cffa:	f001 fd23 	bl	800ea44 <vPortExitCritical>
				return pdPASS;
 800cffe:	2301      	movs	r3, #1
 800d000:	e062      	b.n	800d0c8 <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d103      	bne.n	800d010 <xQueueGenericSend+0x118>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d008:	f001 fd1c 	bl	800ea44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e05b      	b.n	800d0c8 <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <xQueueGenericSend+0x12c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d016:	f107 0314 	add.w	r3, r7, #20
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 f832 	bl	800e084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d020:	2301      	movs	r3, #1
 800d022:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d024:	f001 fd0e 	bl	800ea44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d028:	f000 fe08 	bl	800dc3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d02c:	f001 fcd6 	bl	800e9dc <vPortEnterCritical>
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d036:	b25b      	sxtb	r3, r3
 800d038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03c:	d103      	bne.n	800d046 <xQueueGenericSend+0x14e>
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d04c:	b25b      	sxtb	r3, r3
 800d04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d052:	d103      	bne.n	800d05c <xQueueGenericSend+0x164>
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d05c:	f001 fcf2 	bl	800ea44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d060:	1d3a      	adds	r2, r7, #4
 800d062:	f107 0314 	add.w	r3, r7, #20
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 f821 	bl	800e0b0 <xTaskCheckForTimeOut>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d123      	bne.n	800d0bc <xQueueGenericSend+0x1c4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d076:	f000 fb81 	bl	800d77c <prvIsQueueFull>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d017      	beq.n	800d0b0 <xQueueGenericSend+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	3310      	adds	r3, #16
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 ff71 	bl	800df70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d08e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d090:	f000 fb0c 	bl	800d6ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d094:	f000 fde0 	bl	800dc58 <xTaskResumeAll>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d193      	bne.n	800cfc6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d09e:	4b0c      	ldr	r3, [pc, #48]	; (800d0d0 <xQueueGenericSend+0x1d8>)
 800d0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	e78a      	b.n	800cfc6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b2:	f000 fafb 	bl	800d6ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0b6:	f000 fdcf 	bl	800dc58 <xTaskResumeAll>
 800d0ba:	e784      	b.n	800cfc6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0be:	f000 faf5 	bl	800d6ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0c2:	f000 fdc9 	bl	800dc58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3738      	adds	r7, #56	; 0x38
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	e000ed04 	.word	0xe000ed04

0800d0d4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08e      	sub	sp, #56	; 0x38
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10c      	bne.n	800d102 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	b672      	cpsid	i
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	b662      	cpsie	i
 800d0fc:	623b      	str	r3, [r7, #32]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00c      	beq.n	800d124 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	b672      	cpsid	i
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	b662      	cpsie	i
 800d11e:	61fb      	str	r3, [r7, #28]
}
 800d120:	bf00      	nop
 800d122:	e7fe      	b.n	800d122 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <xQueueGiveFromISR+0x60>
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <xQueueGiveFromISR+0x64>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <xQueueGiveFromISR+0x66>
 800d138:	2300      	movs	r3, #0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10c      	bne.n	800d158 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	b672      	cpsid	i
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	b662      	cpsie	i
 800d152:	61bb      	str	r3, [r7, #24]
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d158:	f001 fd28 	bl	800ebac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d15c:	f3ef 8211 	mrs	r2, BASEPRI
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	b672      	cpsid	i
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	b662      	cpsie	i
 800d174:	617a      	str	r2, [r7, #20]
 800d176:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d178:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d17a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d180:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d188:	429a      	cmp	r2, r3
 800d18a:	d22b      	bcs.n	800d1e4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d112      	bne.n	800d1ce <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d016      	beq.n	800d1de <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	3324      	adds	r3, #36	; 0x24
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 ff01 	bl	800dfbc <xTaskRemoveFromEventList>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00b      	beq.n	800d1de <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	e007      	b.n	800d1de <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	b25a      	sxtb	r2, r3
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e2:	e001      	b.n	800d1e8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d1f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3738      	adds	r7, #56	; 0x38
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08e      	sub	sp, #56	; 0x38
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d212:	2300      	movs	r3, #0
 800d214:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10c      	bne.n	800d236 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	b672      	cpsid	i
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	b662      	cpsie	i
 800d230:	623b      	str	r3, [r7, #32]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00c      	beq.n	800d258 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	b672      	cpsid	i
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	b662      	cpsie	i
 800d252:	61fb      	str	r3, [r7, #28]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d258:	f001 f872 	bl	800e340 <xTaskGetSchedulerState>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d102      	bne.n	800d268 <xQueueSemaphoreTake+0x68>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <xQueueSemaphoreTake+0x6c>
 800d268:	2301      	movs	r3, #1
 800d26a:	e000      	b.n	800d26e <xQueueSemaphoreTake+0x6e>
 800d26c:	2300      	movs	r3, #0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10c      	bne.n	800d28c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	b672      	cpsid	i
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	b662      	cpsie	i
 800d286:	61bb      	str	r3, [r7, #24]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d28c:	f001 fba6 	bl	800e9dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d019      	beq.n	800d2d0 <xQueueSemaphoreTake+0xd0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	1e5a      	subs	r2, r3, #1
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2ac:	f001 fa0e 	bl	800e6cc <pvTaskIncrementMutexHeldCount>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d004      	beq.n	800d2c8 <xQueueSemaphoreTake+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	3310      	adds	r3, #16
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fe7a 	bl	800dfbc <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2c8:	f001 fbbc 	bl	800ea44 <vPortExitCritical>
				return pdPASS;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e099      	b.n	800d404 <xQueueSemaphoreTake+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d113      	bne.n	800d2fe <xQueueSemaphoreTake+0xfe>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00c      	beq.n	800d2f6 <xQueueSemaphoreTake+0xf6>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	b672      	cpsid	i
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	b662      	cpsie	i
 800d2f0:	617b      	str	r3, [r7, #20]
}
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <xQueueSemaphoreTake+0xf4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2f6:	f001 fba5 	bl	800ea44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e082      	b.n	800d404 <xQueueSemaphoreTake+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <xQueueSemaphoreTake+0x112>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d304:	f107 030c 	add.w	r3, r7, #12
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 febb 	bl	800e084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d30e:	2301      	movs	r3, #1
 800d310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d312:	f001 fb97 	bl	800ea44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d316:	f000 fc91 	bl	800dc3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d31a:	f001 fb5f 	bl	800e9dc <vPortEnterCritical>
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d324:	b25b      	sxtb	r3, r3
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d103      	bne.n	800d334 <xQueueSemaphoreTake+0x134>
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d33a:	b25b      	sxtb	r3, r3
 800d33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d340:	d103      	bne.n	800d34a <xQueueSemaphoreTake+0x14a>
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d34a:	f001 fb7b 	bl	800ea44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d34e:	463a      	mov	r2, r7
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4611      	mov	r1, r2
 800d356:	4618      	mov	r0, r3
 800d358:	f000 feaa 	bl	800e0b0 <xTaskCheckForTimeOut>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d132      	bne.n	800d3c8 <xQueueSemaphoreTake+0x1c8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d364:	f000 f9f4 	bl	800d750 <prvIsQueueEmpty>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d026      	beq.n	800d3bc <xQueueSemaphoreTake+0x1bc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d109      	bne.n	800d38a <xQueueSemaphoreTake+0x18a>
					{
						taskENTER_CRITICAL();
 800d376:	f001 fb31 	bl	800e9dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	4618      	mov	r0, r3
 800d380:	f000 fffc 	bl	800e37c <xTaskPriorityInherit>
 800d384:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d386:	f001 fb5d 	bl	800ea44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	3324      	adds	r3, #36	; 0x24
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fdec 	bl	800df70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39a:	f000 f987 	bl	800d6ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d39e:	f000 fc5b 	bl	800dc58 <xTaskResumeAll>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f47f af71 	bne.w	800d28c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d3aa:	4b18      	ldr	r3, [pc, #96]	; (800d40c <xQueueSemaphoreTake+0x20c>)
 800d3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	e767      	b.n	800d28c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3be:	f000 f975 	bl	800d6ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3c2:	f000 fc49 	bl	800dc58 <xTaskResumeAll>
 800d3c6:	e761      	b.n	800d28c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ca:	f000 f96f 	bl	800d6ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ce:	f000 fc43 	bl	800dc58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d4:	f000 f9bc 	bl	800d750 <prvIsQueueEmpty>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f43f af56 	beq.w	800d28c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00d      	beq.n	800d402 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 800d3e6:	f001 faf9 	bl	800e9dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ec:	f000 f8b6 	bl	800d55c <prvGetDisinheritPriorityAfterTimeout>
 800d3f0:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f001 f8c9 	bl	800e590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3fe:	f001 fb21 	bl	800ea44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d402:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d404:	4618      	mov	r0, r3
 800d406:	3738      	adds	r7, #56	; 0x38
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08e      	sub	sp, #56	; 0x38
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10c      	bne.n	800d440 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42a:	b672      	cpsid	i
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	b662      	cpsie	i
 800d43a:	623b      	str	r3, [r7, #32]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d103      	bne.n	800d44e <xQueueReceiveFromISR+0x3e>
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <xQueueReceiveFromISR+0x42>
 800d44e:	2301      	movs	r3, #1
 800d450:	e000      	b.n	800d454 <xQueueReceiveFromISR+0x44>
 800d452:	2300      	movs	r3, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	b672      	cpsid	i
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	b662      	cpsie	i
 800d46c:	61fb      	str	r3, [r7, #28]
}
 800d46e:	bf00      	nop
 800d470:	e7fe      	b.n	800d470 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d472:	f001 fb9b 	bl	800ebac <vPortValidateInterruptPriority>
	__asm volatile
 800d476:	f3ef 8211 	mrs	r2, BASEPRI
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	b672      	cpsid	i
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	b662      	cpsie	i
 800d48e:	61ba      	str	r2, [r7, #24]
 800d490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d02f      	beq.n	800d502 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4b0:	f000 f8d6 	bl	800d660 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	1e5a      	subs	r2, r3, #1
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c4:	d112      	bne.n	800d4ec <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d016      	beq.n	800d4fc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	3310      	adds	r3, #16
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 fd72 	bl	800dfbc <xTaskRemoveFromEventList>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00e      	beq.n	800d4fc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	e007      	b.n	800d4fc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	b25a      	sxtb	r2, r3
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d500:	e001      	b.n	800d506 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d502:	2300      	movs	r3, #0
 800d504:	637b      	str	r3, [r7, #52]	; 0x34
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	f383 8811 	msr	BASEPRI, r3
}
 800d510:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d514:	4618      	mov	r0, r3
 800d516:	3738      	adds	r7, #56	; 0x38
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10c      	bne.n	800d544 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	b672      	cpsid	i
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	b662      	cpsie	i
 800d53e:	60bb      	str	r3, [r7, #8]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d544:	f001 fa4a 	bl	800e9dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d54e:	f001 fa79 	bl	800ea44 <vPortExitCritical>

	return uxReturn;
 800d552:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f1c3 0307 	rsb	r3, r3, #7
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	e001      	b.n	800d57e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d57e:	68fb      	ldr	r3, [r7, #12]
	}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d598:	2300      	movs	r3, #0
 800d59a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10d      	bne.n	800d5c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d14d      	bne.n	800d64e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 ff60 	bl	800e47c <xTaskPriorityDisinherit>
 800d5bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	609a      	str	r2, [r3, #8]
 800d5c4:	e043      	b.n	800d64e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d119      	bne.n	800d600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6858      	ldr	r0, [r3, #4]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	68b9      	ldr	r1, [r7, #8]
 800d5d8:	f002 fbb1 	bl	800fd3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e4:	441a      	add	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d32b      	bcc.n	800d64e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	605a      	str	r2, [r3, #4]
 800d5fe:	e026      	b.n	800d64e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68d8      	ldr	r0, [r3, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d608:	461a      	mov	r2, r3
 800d60a:	68b9      	ldr	r1, [r7, #8]
 800d60c:	f002 fb97 	bl	800fd3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d618:	425b      	negs	r3, r3
 800d61a:	441a      	add	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	68da      	ldr	r2, [r3, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d207      	bcs.n	800d63c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	689a      	ldr	r2, [r3, #8]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d634:	425b      	negs	r3, r3
 800d636:	441a      	add	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d105      	bne.n	800d64e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	1c5a      	adds	r2, r3, #1
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d656:	697b      	ldr	r3, [r7, #20]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d018      	beq.n	800d6a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68da      	ldr	r2, [r3, #12]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67a:	441a      	add	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	68da      	ldr	r2, [r3, #12]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d303      	bcc.n	800d694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	68d9      	ldr	r1, [r3, #12]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69c:	461a      	mov	r2, r3
 800d69e:	6838      	ldr	r0, [r7, #0]
 800d6a0:	f002 fb4d 	bl	800fd3e <memcpy>
	}
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6b4:	f001 f992 	bl	800e9dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6c0:	e011      	b.n	800d6e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d012      	beq.n	800d6f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3324      	adds	r3, #36	; 0x24
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fc74 	bl	800dfbc <xTaskRemoveFromEventList>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6da:	f000 fd4f 	bl	800e17c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dce9      	bgt.n	800d6c2 <prvUnlockQueue+0x16>
 800d6ee:	e000      	b.n	800d6f2 <prvUnlockQueue+0x46>
					break;
 800d6f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	22ff      	movs	r2, #255	; 0xff
 800d6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6fa:	f001 f9a3 	bl	800ea44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6fe:	f001 f96d 	bl	800e9dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d70a:	e011      	b.n	800d730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d012      	beq.n	800d73a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	3310      	adds	r3, #16
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fc4f 	bl	800dfbc <xTaskRemoveFromEventList>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d001      	beq.n	800d728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d724:	f000 fd2a 	bl	800e17c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d734:	2b00      	cmp	r3, #0
 800d736:	dce9      	bgt.n	800d70c <prvUnlockQueue+0x60>
 800d738:	e000      	b.n	800d73c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d73a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	22ff      	movs	r2, #255	; 0xff
 800d740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d744:	f001 f97e 	bl	800ea44 <vPortExitCritical>
}
 800d748:	bf00      	nop
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d758:	f001 f940 	bl	800e9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d764:	2301      	movs	r3, #1
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e001      	b.n	800d76e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d76e:	f001 f969 	bl	800ea44 <vPortExitCritical>

	return xReturn;
 800d772:	68fb      	ldr	r3, [r7, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d784:	f001 f92a 	bl	800e9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d790:	429a      	cmp	r2, r3
 800d792:	d102      	bne.n	800d79a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d794:	2301      	movs	r3, #1
 800d796:	60fb      	str	r3, [r7, #12]
 800d798:	e001      	b.n	800d79e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d79e:	f001 f951 	bl	800ea44 <vPortExitCritical>

	return xReturn;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	; 0x38
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10c      	bne.n	800d7da <xTaskCreateStatic+0x2e>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	b672      	cpsid	i
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	b662      	cpsie	i
 800d7d4:	623b      	str	r3, [r7, #32]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10c      	bne.n	800d7fa <xTaskCreateStatic+0x4e>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	b672      	cpsid	i
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	b662      	cpsie	i
 800d7f4:	61fb      	str	r3, [r7, #28]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7fa:	23a0      	movs	r3, #160	; 0xa0
 800d7fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	2ba0      	cmp	r3, #160	; 0xa0
 800d802:	d00c      	beq.n	800d81e <xTaskCreateStatic+0x72>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	b672      	cpsid	i
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	b662      	cpsie	i
 800d818:	61bb      	str	r3, [r7, #24]
}
 800d81a:	bf00      	nop
 800d81c:	e7fe      	b.n	800d81c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d81e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	2b00      	cmp	r3, #0
 800d824:	d01e      	beq.n	800d864 <xTaskCreateStatic+0xb8>
 800d826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01b      	beq.n	800d864 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	2202      	movs	r2, #2
 800d83a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d83e:	2300      	movs	r3, #0
 800d840:	9303      	str	r3, [sp, #12]
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	9302      	str	r3, [sp, #8]
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f000 f850 	bl	800d8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d85e:	f000 f8ed 	bl	800da3c <prvAddNewTaskToReadyList>
 800d862:	e001      	b.n	800d868 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d868:	697b      	ldr	r3, [r7, #20]
	}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3728      	adds	r7, #40	; 0x28
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d872:	b580      	push	{r7, lr}
 800d874:	b08c      	sub	sp, #48	; 0x30
 800d876:	af04      	add	r7, sp, #16
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	603b      	str	r3, [r7, #0]
 800d87e:	4613      	mov	r3, r2
 800d880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d882:	88fb      	ldrh	r3, [r7, #6]
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4618      	mov	r0, r3
 800d888:	f001 f9d4 	bl	800ec34 <pvPortMalloc>
 800d88c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00e      	beq.n	800d8b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d894:	20a0      	movs	r0, #160	; 0xa0
 800d896:	f001 f9cd 	bl	800ec34 <pvPortMalloc>
 800d89a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d003      	beq.n	800d8aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30
 800d8a8:	e005      	b.n	800d8b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8aa:	6978      	ldr	r0, [r7, #20]
 800d8ac:	f001 fa8c 	bl	800edc8 <vPortFree>
 800d8b0:	e001      	b.n	800d8b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d017      	beq.n	800d8ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8c4:	88fa      	ldrh	r2, [r7, #6]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9303      	str	r3, [sp, #12]
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	68b9      	ldr	r1, [r7, #8]
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f000 f80e 	bl	800d8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8e0:	69f8      	ldr	r0, [r7, #28]
 800d8e2:	f000 f8ab 	bl	800da3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	61bb      	str	r3, [r7, #24]
 800d8ea:	e002      	b.n	800d8f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
	}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b088      	sub	sp, #32
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d914:	440b      	add	r3, r1
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	f023 0307 	bic.w	r3, r3, #7
 800d922:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	f003 0307 	and.w	r3, r3, #7
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00c      	beq.n	800d948 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	b672      	cpsid	i
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	b662      	cpsie	i
 800d942:	617b      	str	r3, [r7, #20]
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d01f      	beq.n	800d98e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d94e:	2300      	movs	r3, #0
 800d950:	61fb      	str	r3, [r7, #28]
 800d952:	e012      	b.n	800d97a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	4413      	add	r3, r2
 800d95a:	7819      	ldrb	r1, [r3, #0]
 800d95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	4413      	add	r3, r2
 800d962:	3334      	adds	r3, #52	; 0x34
 800d964:	460a      	mov	r2, r1
 800d966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	4413      	add	r3, r2
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d006      	beq.n	800d982 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	3301      	adds	r3, #1
 800d978:	61fb      	str	r3, [r7, #28]
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b0f      	cmp	r3, #15
 800d97e:	d9e9      	bls.n	800d954 <prvInitialiseNewTask+0x58>
 800d980:	e000      	b.n	800d984 <prvInitialiseNewTask+0x88>
			{
				break;
 800d982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d98c:	e003      	b.n	800d996 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	2b06      	cmp	r3, #6
 800d99a:	d901      	bls.n	800d9a0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d99c:	2306      	movs	r3, #6
 800d99e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff f87c 	bl	800cab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	3318      	adds	r3, #24
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff f877 	bl	800cab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	f1c3 0207 	rsb	r2, r3, #7
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	334c      	adds	r3, #76	; 0x4c
 800d9f0:	224c      	movs	r2, #76	; 0x4c
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f002 f8ba 	bl	800fb6e <memset>
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	4a0c      	ldr	r2, [pc, #48]	; (800da30 <prvInitialiseNewTask+0x134>)
 800d9fe:	651a      	str	r2, [r3, #80]	; 0x50
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	4a0c      	ldr	r2, [pc, #48]	; (800da34 <prvInitialiseNewTask+0x138>)
 800da04:	655a      	str	r2, [r3, #84]	; 0x54
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	4a0b      	ldr	r2, [pc, #44]	; (800da38 <prvInitialiseNewTask+0x13c>)
 800da0a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	68f9      	ldr	r1, [r7, #12]
 800da10:	69b8      	ldr	r0, [r7, #24]
 800da12:	f000 fed5 	bl	800e7c0 <pxPortInitialiseStack>
 800da16:	4602      	mov	r2, r0
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da28:	bf00      	nop
 800da2a:	3720      	adds	r7, #32
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	2000491c 	.word	0x2000491c
 800da34:	20004984 	.word	0x20004984
 800da38:	200049ec 	.word	0x200049ec

0800da3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da44:	f000 ffca 	bl	800e9dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <prvAddNewTaskToReadyList+0xa0>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3301      	adds	r3, #1
 800da4e:	4a23      	ldr	r2, [pc, #140]	; (800dadc <prvAddNewTaskToReadyList+0xa0>)
 800da50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da52:	4b23      	ldr	r3, [pc, #140]	; (800dae0 <prvAddNewTaskToReadyList+0xa4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d109      	bne.n	800da6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da5a:	4a21      	ldr	r2, [pc, #132]	; (800dae0 <prvAddNewTaskToReadyList+0xa4>)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da60:	4b1e      	ldr	r3, [pc, #120]	; (800dadc <prvAddNewTaskToReadyList+0xa0>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d110      	bne.n	800da8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da68:	f000 fba6 	bl	800e1b8 <prvInitialiseTaskLists>
 800da6c:	e00d      	b.n	800da8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da6e:	4b1d      	ldr	r3, [pc, #116]	; (800dae4 <prvAddNewTaskToReadyList+0xa8>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d109      	bne.n	800da8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da76:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <prvAddNewTaskToReadyList+0xa4>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	429a      	cmp	r2, r3
 800da82:	d802      	bhi.n	800da8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da84:	4a16      	ldr	r2, [pc, #88]	; (800dae0 <prvAddNewTaskToReadyList+0xa4>)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da8a:	4b17      	ldr	r3, [pc, #92]	; (800dae8 <prvAddNewTaskToReadyList+0xac>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3301      	adds	r3, #1
 800da90:	4a15      	ldr	r2, [pc, #84]	; (800dae8 <prvAddNewTaskToReadyList+0xac>)
 800da92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	2201      	movs	r2, #1
 800da9a:	409a      	lsls	r2, r3
 800da9c:	4b13      	ldr	r3, [pc, #76]	; (800daec <prvAddNewTaskToReadyList+0xb0>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	4a12      	ldr	r2, [pc, #72]	; (800daec <prvAddNewTaskToReadyList+0xb0>)
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daaa:	4613      	mov	r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4413      	add	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4a0f      	ldr	r2, [pc, #60]	; (800daf0 <prvAddNewTaskToReadyList+0xb4>)
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3304      	adds	r3, #4
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f7ff f806 	bl	800cace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dac2:	f000 ffbf 	bl	800ea44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dac6:	4b07      	ldr	r3, [pc, #28]	; (800dae4 <prvAddNewTaskToReadyList+0xa8>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dace:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <prvAddNewTaskToReadyList+0xa4>)
 800dad0:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000cd0 	.word	0x20000cd0
 800dae0:	20000bd0 	.word	0x20000bd0
 800dae4:	20000cdc 	.word	0x20000cdc
 800dae8:	20000cec 	.word	0x20000cec
 800daec:	20000cd8 	.word	0x20000cd8
 800daf0:	20000bd4 	.word	0x20000bd4

0800daf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dafc:	2300      	movs	r3, #0
 800dafe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d019      	beq.n	800db3a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db06:	4b14      	ldr	r3, [pc, #80]	; (800db58 <vTaskDelay+0x64>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00c      	beq.n	800db28 <vTaskDelay+0x34>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	b672      	cpsid	i
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	b662      	cpsie	i
 800db22:	60bb      	str	r3, [r7, #8]
}
 800db24:	bf00      	nop
 800db26:	e7fe      	b.n	800db26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800db28:	f000 f888 	bl	800dc3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db2c:	2100      	movs	r1, #0
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fde0 	bl	800e6f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db34:	f000 f890 	bl	800dc58 <xTaskResumeAll>
 800db38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d107      	bne.n	800db50 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800db40:	4b06      	ldr	r3, [pc, #24]	; (800db5c <vTaskDelay+0x68>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20000cf8 	.word	0x20000cf8
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b08a      	sub	sp, #40	; 0x28
 800db64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db66:	2300      	movs	r3, #0
 800db68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db6e:	463a      	mov	r2, r7
 800db70:	1d39      	adds	r1, r7, #4
 800db72:	f107 0308 	add.w	r3, r7, #8
 800db76:	4618      	mov	r0, r3
 800db78:	f7f4 fbdc 	bl	8002334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	9202      	str	r2, [sp, #8]
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	2300      	movs	r3, #0
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	2300      	movs	r3, #0
 800db8c:	460a      	mov	r2, r1
 800db8e:	4923      	ldr	r1, [pc, #140]	; (800dc1c <vTaskStartScheduler+0xbc>)
 800db90:	4823      	ldr	r0, [pc, #140]	; (800dc20 <vTaskStartScheduler+0xc0>)
 800db92:	f7ff fe0b 	bl	800d7ac <xTaskCreateStatic>
 800db96:	4603      	mov	r3, r0
 800db98:	4a22      	ldr	r2, [pc, #136]	; (800dc24 <vTaskStartScheduler+0xc4>)
 800db9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db9c:	4b21      	ldr	r3, [pc, #132]	; (800dc24 <vTaskStartScheduler+0xc4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dba4:	2301      	movs	r3, #1
 800dba6:	617b      	str	r3, [r7, #20]
 800dba8:	e001      	b.n	800dbae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d11d      	bne.n	800dbf0 <vTaskStartScheduler+0x90>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	b672      	cpsid	i
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	b662      	cpsie	i
 800dbc8:	613b      	str	r3, [r7, #16]
}
 800dbca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dbcc:	4b16      	ldr	r3, [pc, #88]	; (800dc28 <vTaskStartScheduler+0xc8>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	334c      	adds	r3, #76	; 0x4c
 800dbd2:	4a16      	ldr	r2, [pc, #88]	; (800dc2c <vTaskStartScheduler+0xcc>)
 800dbd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dbd6:	4b16      	ldr	r3, [pc, #88]	; (800dc30 <vTaskStartScheduler+0xd0>)
 800dbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dbde:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <vTaskStartScheduler+0xd4>)
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dbe4:	4b14      	ldr	r3, [pc, #80]	; (800dc38 <vTaskStartScheduler+0xd8>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dbea:	f000 fe79 	bl	800e8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dbee:	e010      	b.n	800dc12 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf6:	d10c      	bne.n	800dc12 <vTaskStartScheduler+0xb2>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	b672      	cpsid	i
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	b662      	cpsie	i
 800dc0c:	60fb      	str	r3, [r7, #12]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <vTaskStartScheduler+0xb0>
}
 800dc12:	bf00      	nop
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08013d90 	.word	0x08013d90
 800dc20:	0800e195 	.word	0x0800e195
 800dc24:	20000cf4 	.word	0x20000cf4
 800dc28:	20000bd0 	.word	0x20000bd0
 800dc2c:	20000070 	.word	0x20000070
 800dc30:	20000cf0 	.word	0x20000cf0
 800dc34:	20000cdc 	.word	0x20000cdc
 800dc38:	20000cd4 	.word	0x20000cd4

0800dc3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dc40:	4b04      	ldr	r3, [pc, #16]	; (800dc54 <vTaskSuspendAll+0x18>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3301      	adds	r3, #1
 800dc46:	4a03      	ldr	r2, [pc, #12]	; (800dc54 <vTaskSuspendAll+0x18>)
 800dc48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dc4a:	bf00      	nop
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	20000cf8 	.word	0x20000cf8

0800dc58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc62:	2300      	movs	r3, #0
 800dc64:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc66:	4b3c      	ldr	r3, [pc, #240]	; (800dd58 <xTaskResumeAll+0x100>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10c      	bne.n	800dc88 <xTaskResumeAll+0x30>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	b672      	cpsid	i
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	b662      	cpsie	i
 800dc82:	603b      	str	r3, [r7, #0]
}
 800dc84:	bf00      	nop
 800dc86:	e7fe      	b.n	800dc86 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc88:	f000 fea8 	bl	800e9dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc8c:	4b32      	ldr	r3, [pc, #200]	; (800dd58 <xTaskResumeAll+0x100>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	4a31      	ldr	r2, [pc, #196]	; (800dd58 <xTaskResumeAll+0x100>)
 800dc94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc96:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <xTaskResumeAll+0x100>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d155      	bne.n	800dd4a <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc9e:	4b2f      	ldr	r3, [pc, #188]	; (800dd5c <xTaskResumeAll+0x104>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d051      	beq.n	800dd4a <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dca6:	e02e      	b.n	800dd06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dca8:	4b2d      	ldr	r3, [pc, #180]	; (800dd60 <xTaskResumeAll+0x108>)
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3318      	adds	r3, #24
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe ff67 	bl	800cb88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe ff62 	bl	800cb88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc8:	2201      	movs	r2, #1
 800dcca:	409a      	lsls	r2, r3
 800dccc:	4b25      	ldr	r3, [pc, #148]	; (800dd64 <xTaskResumeAll+0x10c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	4a24      	ldr	r2, [pc, #144]	; (800dd64 <xTaskResumeAll+0x10c>)
 800dcd4:	6013      	str	r3, [r2, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcda:	4613      	mov	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4a21      	ldr	r2, [pc, #132]	; (800dd68 <xTaskResumeAll+0x110>)
 800dce4:	441a      	add	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3304      	adds	r3, #4
 800dcea:	4619      	mov	r1, r3
 800dcec:	4610      	mov	r0, r2
 800dcee:	f7fe feee 	bl	800cace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf6:	4b1d      	ldr	r3, [pc, #116]	; (800dd6c <xTaskResumeAll+0x114>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d302      	bcc.n	800dd06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd00:	4b1b      	ldr	r3, [pc, #108]	; (800dd70 <xTaskResumeAll+0x118>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd06:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <xTaskResumeAll+0x108>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1cc      	bne.n	800dca8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd14:	f000 faf4 	bl	800e300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd18:	4b16      	ldr	r3, [pc, #88]	; (800dd74 <xTaskResumeAll+0x11c>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d010      	beq.n	800dd46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd24:	f000 f828 	bl	800dd78 <xTaskIncrementTick>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dd2e:	4b10      	ldr	r3, [pc, #64]	; (800dd70 <xTaskResumeAll+0x118>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f1      	bne.n	800dd24 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800dd40:	4b0c      	ldr	r3, [pc, #48]	; (800dd74 <xTaskResumeAll+0x11c>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd46:	4b0a      	ldr	r3, [pc, #40]	; (800dd70 <xTaskResumeAll+0x118>)
 800dd48:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd4a:	f000 fe7b 	bl	800ea44 <vPortExitCritical>

	return xAlreadyYielded;
 800dd4e:	687b      	ldr	r3, [r7, #4]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	20000cf8 	.word	0x20000cf8
 800dd5c:	20000cd0 	.word	0x20000cd0
 800dd60:	20000c90 	.word	0x20000c90
 800dd64:	20000cd8 	.word	0x20000cd8
 800dd68:	20000bd4 	.word	0x20000bd4
 800dd6c:	20000bd0 	.word	0x20000bd0
 800dd70:	20000ce4 	.word	0x20000ce4
 800dd74:	20000ce0 	.word	0x20000ce0

0800dd78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd82:	4b40      	ldr	r3, [pc, #256]	; (800de84 <xTaskIncrementTick+0x10c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d171      	bne.n	800de6e <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd8a:	4b3f      	ldr	r3, [pc, #252]	; (800de88 <xTaskIncrementTick+0x110>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd92:	4a3d      	ldr	r2, [pc, #244]	; (800de88 <xTaskIncrementTick+0x110>)
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d122      	bne.n	800dde4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd9e:	4b3b      	ldr	r3, [pc, #236]	; (800de8c <xTaskIncrementTick+0x114>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00c      	beq.n	800ddc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	b672      	cpsid	i
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	b662      	cpsie	i
 800ddbc:	603b      	str	r3, [r7, #0]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xTaskIncrementTick+0x48>
 800ddc2:	4b32      	ldr	r3, [pc, #200]	; (800de8c <xTaskIncrementTick+0x114>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	4b31      	ldr	r3, [pc, #196]	; (800de90 <xTaskIncrementTick+0x118>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a2f      	ldr	r2, [pc, #188]	; (800de8c <xTaskIncrementTick+0x114>)
 800ddce:	6013      	str	r3, [r2, #0]
 800ddd0:	4a2f      	ldr	r2, [pc, #188]	; (800de90 <xTaskIncrementTick+0x118>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	4b2f      	ldr	r3, [pc, #188]	; (800de94 <xTaskIncrementTick+0x11c>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	4a2d      	ldr	r2, [pc, #180]	; (800de94 <xTaskIncrementTick+0x11c>)
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	f000 fa8e 	bl	800e300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dde4:	4b2c      	ldr	r3, [pc, #176]	; (800de98 <xTaskIncrementTick+0x120>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d344      	bcc.n	800de78 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddee:	4b27      	ldr	r3, [pc, #156]	; (800de8c <xTaskIncrementTick+0x114>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d104      	bne.n	800de02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddf8:	4b27      	ldr	r3, [pc, #156]	; (800de98 <xTaskIncrementTick+0x120>)
 800ddfa:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfe:	601a      	str	r2, [r3, #0]
					break;
 800de00:	e03a      	b.n	800de78 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <xTaskIncrementTick+0x114>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	429a      	cmp	r2, r3
 800de18:	d203      	bcs.n	800de22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de1a:	4a1f      	ldr	r2, [pc, #124]	; (800de98 <xTaskIncrementTick+0x120>)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de20:	e02a      	b.n	800de78 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	3304      	adds	r3, #4
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe feae 	bl	800cb88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	3318      	adds	r3, #24
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe fea5 	bl	800cb88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de42:	2201      	movs	r2, #1
 800de44:	409a      	lsls	r2, r3
 800de46:	4b15      	ldr	r3, [pc, #84]	; (800de9c <xTaskIncrementTick+0x124>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	4a13      	ldr	r2, [pc, #76]	; (800de9c <xTaskIncrementTick+0x124>)
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4a10      	ldr	r2, [pc, #64]	; (800dea0 <xTaskIncrementTick+0x128>)
 800de5e:	441a      	add	r2, r3
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	3304      	adds	r3, #4
 800de64:	4619      	mov	r1, r3
 800de66:	4610      	mov	r0, r2
 800de68:	f7fe fe31 	bl	800cace <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de6c:	e7bf      	b.n	800ddee <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800de6e:	4b0d      	ldr	r3, [pc, #52]	; (800dea4 <xTaskIncrementTick+0x12c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	4a0b      	ldr	r2, [pc, #44]	; (800dea4 <xTaskIncrementTick+0x12c>)
 800de76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800de78:	697b      	ldr	r3, [r7, #20]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000cf8 	.word	0x20000cf8
 800de88:	20000cd4 	.word	0x20000cd4
 800de8c:	20000c88 	.word	0x20000c88
 800de90:	20000c8c 	.word	0x20000c8c
 800de94:	20000ce8 	.word	0x20000ce8
 800de98:	20000cf0 	.word	0x20000cf0
 800de9c:	20000cd8 	.word	0x20000cd8
 800dea0:	20000bd4 	.word	0x20000bd4
 800dea4:	20000ce0 	.word	0x20000ce0

0800dea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dea8:	b480      	push	{r7}
 800deaa:	b087      	sub	sp, #28
 800deac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800deae:	4b2a      	ldr	r3, [pc, #168]	; (800df58 <vTaskSwitchContext+0xb0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800deb6:	4b29      	ldr	r3, [pc, #164]	; (800df5c <vTaskSwitchContext+0xb4>)
 800deb8:	2201      	movs	r2, #1
 800deba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800debc:	e046      	b.n	800df4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800debe:	4b27      	ldr	r3, [pc, #156]	; (800df5c <vTaskSwitchContext+0xb4>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec4:	4b26      	ldr	r3, [pc, #152]	; (800df60 <vTaskSwitchContext+0xb8>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	fab3 f383 	clz	r3, r3
 800ded0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	f1c3 031f 	rsb	r3, r3, #31
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	4922      	ldr	r1, [pc, #136]	; (800df64 <vTaskSwitchContext+0xbc>)
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	4613      	mov	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	440b      	add	r3, r1
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10c      	bne.n	800df08 <vTaskSwitchContext+0x60>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	b672      	cpsid	i
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	b662      	cpsie	i
 800df02:	607b      	str	r3, [r7, #4]
}
 800df04:	bf00      	nop
 800df06:	e7fe      	b.n	800df06 <vTaskSwitchContext+0x5e>
 800df08:	697a      	ldr	r2, [r7, #20]
 800df0a:	4613      	mov	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4413      	add	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4a14      	ldr	r2, [pc, #80]	; (800df64 <vTaskSwitchContext+0xbc>)
 800df14:	4413      	add	r3, r2
 800df16:	613b      	str	r3, [r7, #16]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	685a      	ldr	r2, [r3, #4]
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	605a      	str	r2, [r3, #4]
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	685a      	ldr	r2, [r3, #4]
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	3308      	adds	r3, #8
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d104      	bne.n	800df38 <vTaskSwitchContext+0x90>
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	605a      	str	r2, [r3, #4]
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	4a0a      	ldr	r2, [pc, #40]	; (800df68 <vTaskSwitchContext+0xc0>)
 800df40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df42:	4b09      	ldr	r3, [pc, #36]	; (800df68 <vTaskSwitchContext+0xc0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	334c      	adds	r3, #76	; 0x4c
 800df48:	4a08      	ldr	r2, [pc, #32]	; (800df6c <vTaskSwitchContext+0xc4>)
 800df4a:	6013      	str	r3, [r2, #0]
}
 800df4c:	bf00      	nop
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	20000cf8 	.word	0x20000cf8
 800df5c:	20000ce4 	.word	0x20000ce4
 800df60:	20000cd8 	.word	0x20000cd8
 800df64:	20000bd4 	.word	0x20000bd4
 800df68:	20000bd0 	.word	0x20000bd0
 800df6c:	20000070 	.word	0x20000070

0800df70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10c      	bne.n	800df9a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	b672      	cpsid	i
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	b662      	cpsie	i
 800df94:	60fb      	str	r3, [r7, #12]
}
 800df96:	bf00      	nop
 800df98:	e7fe      	b.n	800df98 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df9a:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <vTaskPlaceOnEventList+0x48>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3318      	adds	r3, #24
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7fe fdb7 	bl	800cb16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	6838      	ldr	r0, [r7, #0]
 800dfac:	f000 fba2 	bl	800e6f4 <prvAddCurrentTaskToDelayedList>
}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	20000bd0 	.word	0x20000bd0

0800dfbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10c      	bne.n	800dfec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd6:	b672      	cpsid	i
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	b662      	cpsie	i
 800dfe6:	60fb      	str	r3, [r7, #12]
}
 800dfe8:	bf00      	nop
 800dfea:	e7fe      	b.n	800dfea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	3318      	adds	r3, #24
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fe fdc9 	bl	800cb88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dff6:	4b1d      	ldr	r3, [pc, #116]	; (800e06c <xTaskRemoveFromEventList+0xb0>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d11c      	bne.n	800e038 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3304      	adds	r3, #4
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fdc0 	bl	800cb88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	2201      	movs	r2, #1
 800e00e:	409a      	lsls	r2, r3
 800e010:	4b17      	ldr	r3, [pc, #92]	; (800e070 <xTaskRemoveFromEventList+0xb4>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4313      	orrs	r3, r2
 800e016:	4a16      	ldr	r2, [pc, #88]	; (800e070 <xTaskRemoveFromEventList+0xb4>)
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4a13      	ldr	r2, [pc, #76]	; (800e074 <xTaskRemoveFromEventList+0xb8>)
 800e028:	441a      	add	r2, r3
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f7fe fd4c 	bl	800cace <vListInsertEnd>
 800e036:	e005      	b.n	800e044 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	3318      	adds	r3, #24
 800e03c:	4619      	mov	r1, r3
 800e03e:	480e      	ldr	r0, [pc, #56]	; (800e078 <xTaskRemoveFromEventList+0xbc>)
 800e040:	f7fe fd45 	bl	800cace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e048:	4b0c      	ldr	r3, [pc, #48]	; (800e07c <xTaskRemoveFromEventList+0xc0>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04e:	429a      	cmp	r2, r3
 800e050:	d905      	bls.n	800e05e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e052:	2301      	movs	r3, #1
 800e054:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e056:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <xTaskRemoveFromEventList+0xc4>)
 800e058:	2201      	movs	r2, #1
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	e001      	b.n	800e062 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e062:	697b      	ldr	r3, [r7, #20]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	20000cf8 	.word	0x20000cf8
 800e070:	20000cd8 	.word	0x20000cd8
 800e074:	20000bd4 	.word	0x20000bd4
 800e078:	20000c90 	.word	0x20000c90
 800e07c:	20000bd0 	.word	0x20000bd0
 800e080:	20000ce4 	.word	0x20000ce4

0800e084 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e08c:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <vTaskInternalSetTimeOutState+0x24>)
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e094:	4b05      	ldr	r3, [pc, #20]	; (800e0ac <vTaskInternalSetTimeOutState+0x28>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	605a      	str	r2, [r3, #4]
}
 800e09c:	bf00      	nop
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	20000ce8 	.word	0x20000ce8
 800e0ac:	20000cd4 	.word	0x20000cd4

0800e0b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10c      	bne.n	800e0da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	b672      	cpsid	i
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	b662      	cpsie	i
 800e0d4:	613b      	str	r3, [r7, #16]
}
 800e0d6:	bf00      	nop
 800e0d8:	e7fe      	b.n	800e0d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10c      	bne.n	800e0fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	b672      	cpsid	i
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	b662      	cpsie	i
 800e0f4:	60fb      	str	r3, [r7, #12]
}
 800e0f6:	bf00      	nop
 800e0f8:	e7fe      	b.n	800e0f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e0fa:	f000 fc6f 	bl	800e9dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0fe:	4b1d      	ldr	r3, [pc, #116]	; (800e174 <xTaskCheckForTimeOut+0xc4>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e116:	d102      	bne.n	800e11e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e118:	2300      	movs	r3, #0
 800e11a:	61fb      	str	r3, [r7, #28]
 800e11c:	e023      	b.n	800e166 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	4b15      	ldr	r3, [pc, #84]	; (800e178 <xTaskCheckForTimeOut+0xc8>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	429a      	cmp	r2, r3
 800e128:	d007      	beq.n	800e13a <xTaskCheckForTimeOut+0x8a>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	429a      	cmp	r2, r3
 800e132:	d302      	bcc.n	800e13a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e134:	2301      	movs	r3, #1
 800e136:	61fb      	str	r3, [r7, #28]
 800e138:	e015      	b.n	800e166 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	697a      	ldr	r2, [r7, #20]
 800e140:	429a      	cmp	r2, r3
 800e142:	d20b      	bcs.n	800e15c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	1ad2      	subs	r2, r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff ff97 	bl	800e084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e156:	2300      	movs	r3, #0
 800e158:	61fb      	str	r3, [r7, #28]
 800e15a:	e004      	b.n	800e166 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e162:	2301      	movs	r3, #1
 800e164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e166:	f000 fc6d 	bl	800ea44 <vPortExitCritical>

	return xReturn;
 800e16a:	69fb      	ldr	r3, [r7, #28]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	20000cd4 	.word	0x20000cd4
 800e178:	20000ce8 	.word	0x20000ce8

0800e17c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e180:	4b03      	ldr	r3, [pc, #12]	; (800e190 <vTaskMissedYield+0x14>)
 800e182:	2201      	movs	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
}
 800e186:	bf00      	nop
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	20000ce4 	.word	0x20000ce4

0800e194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e19c:	f000 f84c 	bl	800e238 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800e1a0:	4b04      	ldr	r3, [pc, #16]	; (800e1b4 <prvIdleTask+0x20>)
 800e1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1b0:	e7f4      	b.n	800e19c <prvIdleTask+0x8>
 800e1b2:	bf00      	nop
 800e1b4:	e000ed04 	.word	0xe000ed04

0800e1b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1be:	2300      	movs	r3, #0
 800e1c0:	607b      	str	r3, [r7, #4]
 800e1c2:	e00c      	b.n	800e1de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4a12      	ldr	r2, [pc, #72]	; (800e218 <prvInitialiseTaskLists+0x60>)
 800e1d0:	4413      	add	r3, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fc4e 	bl	800ca74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b06      	cmp	r3, #6
 800e1e2:	d9ef      	bls.n	800e1c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1e4:	480d      	ldr	r0, [pc, #52]	; (800e21c <prvInitialiseTaskLists+0x64>)
 800e1e6:	f7fe fc45 	bl	800ca74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1ea:	480d      	ldr	r0, [pc, #52]	; (800e220 <prvInitialiseTaskLists+0x68>)
 800e1ec:	f7fe fc42 	bl	800ca74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1f0:	480c      	ldr	r0, [pc, #48]	; (800e224 <prvInitialiseTaskLists+0x6c>)
 800e1f2:	f7fe fc3f 	bl	800ca74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1f6:	480c      	ldr	r0, [pc, #48]	; (800e228 <prvInitialiseTaskLists+0x70>)
 800e1f8:	f7fe fc3c 	bl	800ca74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1fc:	480b      	ldr	r0, [pc, #44]	; (800e22c <prvInitialiseTaskLists+0x74>)
 800e1fe:	f7fe fc39 	bl	800ca74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e202:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <prvInitialiseTaskLists+0x78>)
 800e204:	4a05      	ldr	r2, [pc, #20]	; (800e21c <prvInitialiseTaskLists+0x64>)
 800e206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e208:	4b0a      	ldr	r3, [pc, #40]	; (800e234 <prvInitialiseTaskLists+0x7c>)
 800e20a:	4a05      	ldr	r2, [pc, #20]	; (800e220 <prvInitialiseTaskLists+0x68>)
 800e20c:	601a      	str	r2, [r3, #0]
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20000bd4 	.word	0x20000bd4
 800e21c:	20000c60 	.word	0x20000c60
 800e220:	20000c74 	.word	0x20000c74
 800e224:	20000c90 	.word	0x20000c90
 800e228:	20000ca4 	.word	0x20000ca4
 800e22c:	20000cbc 	.word	0x20000cbc
 800e230:	20000c88 	.word	0x20000c88
 800e234:	20000c8c 	.word	0x20000c8c

0800e238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e23e:	e019      	b.n	800e274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e240:	f000 fbcc 	bl	800e9dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e244:	4b10      	ldr	r3, [pc, #64]	; (800e288 <prvCheckTasksWaitingTermination+0x50>)
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3304      	adds	r3, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe fc99 	bl	800cb88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e256:	4b0d      	ldr	r3, [pc, #52]	; (800e28c <prvCheckTasksWaitingTermination+0x54>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	4a0b      	ldr	r2, [pc, #44]	; (800e28c <prvCheckTasksWaitingTermination+0x54>)
 800e25e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e260:	4b0b      	ldr	r3, [pc, #44]	; (800e290 <prvCheckTasksWaitingTermination+0x58>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	3b01      	subs	r3, #1
 800e266:	4a0a      	ldr	r2, [pc, #40]	; (800e290 <prvCheckTasksWaitingTermination+0x58>)
 800e268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e26a:	f000 fbeb 	bl	800ea44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f810 	bl	800e294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <prvCheckTasksWaitingTermination+0x58>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e1      	bne.n	800e240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e27c:	bf00      	nop
 800e27e:	bf00      	nop
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	20000ca4 	.word	0x20000ca4
 800e28c:	20000cd0 	.word	0x20000cd0
 800e290:	20000cb8 	.word	0x20000cb8

0800e294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	334c      	adds	r3, #76	; 0x4c
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f001 fc93 	bl	800fbcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d108      	bne.n	800e2c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fd87 	bl	800edc8 <vPortFree>
				vPortFree( pxTCB );
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fd84 	bl	800edc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2c0:	e01a      	b.n	800e2f8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d103      	bne.n	800e2d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fd7b 	bl	800edc8 <vPortFree>
	}
 800e2d2:	e011      	b.n	800e2f8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d00c      	beq.n	800e2f8 <prvDeleteTCB+0x64>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	b672      	cpsid	i
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	b662      	cpsie	i
 800e2f2:	60fb      	str	r3, [r7, #12]
}
 800e2f4:	bf00      	nop
 800e2f6:	e7fe      	b.n	800e2f6 <prvDeleteTCB+0x62>
	}
 800e2f8:	bf00      	nop
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e306:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <prvResetNextTaskUnblockTime+0x38>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d104      	bne.n	800e31a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <prvResetNextTaskUnblockTime+0x3c>)
 800e312:	f04f 32ff 	mov.w	r2, #4294967295
 800e316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e318:	e008      	b.n	800e32c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31a:	4b07      	ldr	r3, [pc, #28]	; (800e338 <prvResetNextTaskUnblockTime+0x38>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	4a04      	ldr	r2, [pc, #16]	; (800e33c <prvResetNextTaskUnblockTime+0x3c>)
 800e32a:	6013      	str	r3, [r2, #0]
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	20000c88 	.word	0x20000c88
 800e33c:	20000cf0 	.word	0x20000cf0

0800e340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e346:	4b0b      	ldr	r3, [pc, #44]	; (800e374 <xTaskGetSchedulerState+0x34>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d102      	bne.n	800e354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e34e:	2301      	movs	r3, #1
 800e350:	607b      	str	r3, [r7, #4]
 800e352:	e008      	b.n	800e366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e354:	4b08      	ldr	r3, [pc, #32]	; (800e378 <xTaskGetSchedulerState+0x38>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e35c:	2302      	movs	r3, #2
 800e35e:	607b      	str	r3, [r7, #4]
 800e360:	e001      	b.n	800e366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e362:	2300      	movs	r3, #0
 800e364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e366:	687b      	ldr	r3, [r7, #4]
	}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	20000cdc 	.word	0x20000cdc
 800e378:	20000cf8 	.word	0x20000cf8

0800e37c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e388:	2300      	movs	r3, #0
 800e38a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d069      	beq.n	800e466 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e396:	4b36      	ldr	r3, [pc, #216]	; (800e470 <xTaskPriorityInherit+0xf4>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d259      	bcs.n	800e454 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	db06      	blt.n	800e3b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a8:	4b31      	ldr	r3, [pc, #196]	; (800e470 <xTaskPriorityInherit+0xf4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ae:	f1c3 0207 	rsb	r2, r3, #7
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	6959      	ldr	r1, [r3, #20]
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4a2b      	ldr	r2, [pc, #172]	; (800e474 <xTaskPriorityInherit+0xf8>)
 800e3c8:	4413      	add	r3, r2
 800e3ca:	4299      	cmp	r1, r3
 800e3cc:	d13a      	bne.n	800e444 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fe fbd8 	bl	800cb88 <uxListRemove>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d115      	bne.n	800e40a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e2:	4924      	ldr	r1, [pc, #144]	; (800e474 <xTaskPriorityInherit+0xf8>)
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10a      	bne.n	800e40a <xTaskPriorityInherit+0x8e>
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fe:	43da      	mvns	r2, r3
 800e400:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <xTaskPriorityInherit+0xfc>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4013      	ands	r3, r2
 800e406:	4a1c      	ldr	r2, [pc, #112]	; (800e478 <xTaskPriorityInherit+0xfc>)
 800e408:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e40a:	4b19      	ldr	r3, [pc, #100]	; (800e470 <xTaskPriorityInherit+0xf4>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e418:	2201      	movs	r2, #1
 800e41a:	409a      	lsls	r2, r3
 800e41c:	4b16      	ldr	r3, [pc, #88]	; (800e478 <xTaskPriorityInherit+0xfc>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4313      	orrs	r3, r2
 800e422:	4a15      	ldr	r2, [pc, #84]	; (800e478 <xTaskPriorityInherit+0xfc>)
 800e424:	6013      	str	r3, [r2, #0]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42a:	4613      	mov	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4a10      	ldr	r2, [pc, #64]	; (800e474 <xTaskPriorityInherit+0xf8>)
 800e434:	441a      	add	r2, r3
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	3304      	adds	r3, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7fe fb46 	bl	800cace <vListInsertEnd>
 800e442:	e004      	b.n	800e44e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e444:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <xTaskPriorityInherit+0xf4>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e44e:	2301      	movs	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	e008      	b.n	800e466 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e458:	4b05      	ldr	r3, [pc, #20]	; (800e470 <xTaskPriorityInherit+0xf4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45e:	429a      	cmp	r2, r3
 800e460:	d201      	bcs.n	800e466 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e462:	2301      	movs	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e466:	68fb      	ldr	r3, [r7, #12]
	}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	20000bd0 	.word	0x20000bd0
 800e474:	20000bd4 	.word	0x20000bd4
 800e478:	20000cd8 	.word	0x20000cd8

0800e47c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e488:	2300      	movs	r3, #0
 800e48a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d072      	beq.n	800e578 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e492:	4b3c      	ldr	r3, [pc, #240]	; (800e584 <xTaskPriorityDisinherit+0x108>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d00c      	beq.n	800e4b6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	b672      	cpsid	i
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	b662      	cpsie	i
 800e4b0:	60fb      	str	r3, [r7, #12]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10c      	bne.n	800e4d8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	b672      	cpsid	i
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	b662      	cpsie	i
 800e4d2:	60bb      	str	r3, [r7, #8]
}
 800e4d4:	bf00      	nop
 800e4d6:	e7fe      	b.n	800e4d6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d044      	beq.n	800e578 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d140      	bne.n	800e578 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe fb44 	bl	800cb88 <uxListRemove>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d115      	bne.n	800e532 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50a:	491f      	ldr	r1, [pc, #124]	; (800e588 <xTaskPriorityDisinherit+0x10c>)
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	440b      	add	r3, r1
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10a      	bne.n	800e532 <xTaskPriorityDisinherit+0xb6>
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	2201      	movs	r2, #1
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	43da      	mvns	r2, r3
 800e528:	4b18      	ldr	r3, [pc, #96]	; (800e58c <xTaskPriorityDisinherit+0x110>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4013      	ands	r3, r2
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <xTaskPriorityDisinherit+0x110>)
 800e530:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	f1c3 0207 	rsb	r2, r3, #7
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54a:	2201      	movs	r2, #1
 800e54c:	409a      	lsls	r2, r3
 800e54e:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <xTaskPriorityDisinherit+0x110>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4313      	orrs	r3, r2
 800e554:	4a0d      	ldr	r2, [pc, #52]	; (800e58c <xTaskPriorityDisinherit+0x110>)
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4a08      	ldr	r2, [pc, #32]	; (800e588 <xTaskPriorityDisinherit+0x10c>)
 800e566:	441a      	add	r2, r3
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	3304      	adds	r3, #4
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7fe faad 	bl	800cace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e574:	2301      	movs	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e578:	697b      	ldr	r3, [r7, #20]
	}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20000bd0 	.word	0x20000bd0
 800e588:	20000bd4 	.word	0x20000bd4
 800e58c:	20000cd8 	.word	0x20000cd8

0800e590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 8087 	beq.w	800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10c      	bne.n	800e5cc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b6:	b672      	cpsid	i
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	b662      	cpsie	i
 800e5c6:	60fb      	str	r3, [r7, #12]
}
 800e5c8:	bf00      	nop
 800e5ca:	e7fe      	b.n	800e5ca <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d902      	bls.n	800e5dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	61fb      	str	r3, [r7, #28]
 800e5da:	e002      	b.n	800e5e2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e6:	69fa      	ldr	r2, [r7, #28]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d065      	beq.n	800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5f0:	697a      	ldr	r2, [r7, #20]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d160      	bne.n	800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5f6:	4b32      	ldr	r3, [pc, #200]	; (800e6c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	69ba      	ldr	r2, [r7, #24]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d10c      	bne.n	800e61a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e604:	b672      	cpsid	i
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	b662      	cpsie	i
 800e614:	60bb      	str	r3, [r7, #8]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	69fa      	ldr	r2, [r7, #28]
 800e624:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	db04      	blt.n	800e638 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	f1c3 0207 	rsb	r2, r3, #7
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	6959      	ldr	r1, [r3, #20]
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4a1f      	ldr	r2, [pc, #124]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e648:	4413      	add	r3, r2
 800e64a:	4299      	cmp	r1, r3
 800e64c:	d134      	bne.n	800e6b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	3304      	adds	r3, #4
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fa98 	bl	800cb88 <uxListRemove>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d115      	bne.n	800e68a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e662:	4918      	ldr	r1, [pc, #96]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e678:	2201      	movs	r2, #1
 800e67a:	fa02 f303 	lsl.w	r3, r2, r3
 800e67e:	43da      	mvns	r2, r3
 800e680:	4b11      	ldr	r3, [pc, #68]	; (800e6c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4013      	ands	r3, r2
 800e686:	4a10      	ldr	r2, [pc, #64]	; (800e6c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e688:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	2201      	movs	r2, #1
 800e690:	409a      	lsls	r2, r3
 800e692:	4b0d      	ldr	r3, [pc, #52]	; (800e6c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4313      	orrs	r3, r2
 800e698:	4a0b      	ldr	r2, [pc, #44]	; (800e6c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4a06      	ldr	r2, [pc, #24]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e6aa:	441a      	add	r2, r3
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	f7fe fa0b 	bl	800cace <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6b8:	bf00      	nop
 800e6ba:	3720      	adds	r7, #32
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20000bd0 	.word	0x20000bd0
 800e6c4:	20000bd4 	.word	0x20000bd4
 800e6c8:	20000cd8 	.word	0x20000cd8

0800e6cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6cc:	b480      	push	{r7}
 800e6ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6d0:	4b07      	ldr	r3, [pc, #28]	; (800e6f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d004      	beq.n	800e6e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6d8:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6de:	3201      	adds	r2, #1
 800e6e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6e2:	4b03      	ldr	r3, [pc, #12]	; (800e6f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
	}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	20000bd0 	.word	0x20000bd0

0800e6f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6fe:	4b29      	ldr	r3, [pc, #164]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e704:	4b28      	ldr	r3, [pc, #160]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3304      	adds	r3, #4
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fa3c 	bl	800cb88 <uxListRemove>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10b      	bne.n	800e72e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e716:	4b24      	ldr	r3, [pc, #144]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	2201      	movs	r2, #1
 800e71e:	fa02 f303 	lsl.w	r3, r2, r3
 800e722:	43da      	mvns	r2, r3
 800e724:	4b21      	ldr	r3, [pc, #132]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4013      	ands	r3, r2
 800e72a:	4a20      	ldr	r2, [pc, #128]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800e72c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e734:	d10a      	bne.n	800e74c <prvAddCurrentTaskToDelayedList+0x58>
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d007      	beq.n	800e74c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e73c:	4b1a      	ldr	r3, [pc, #104]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3304      	adds	r3, #4
 800e742:	4619      	mov	r1, r3
 800e744:	481a      	ldr	r0, [pc, #104]	; (800e7b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e746:	f7fe f9c2 	bl	800cace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e74a:	e026      	b.n	800e79a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4413      	add	r3, r2
 800e752:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e754:	4b14      	ldr	r3, [pc, #80]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	429a      	cmp	r2, r3
 800e762:	d209      	bcs.n	800e778 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e764:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3304      	adds	r3, #4
 800e76e:	4619      	mov	r1, r3
 800e770:	4610      	mov	r0, r2
 800e772:	f7fe f9d0 	bl	800cb16 <vListInsert>
}
 800e776:	e010      	b.n	800e79a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e778:	4b0f      	ldr	r3, [pc, #60]	; (800e7b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3304      	adds	r3, #4
 800e782:	4619      	mov	r1, r3
 800e784:	4610      	mov	r0, r2
 800e786:	f7fe f9c6 	bl	800cb16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e78a:	4b0c      	ldr	r3, [pc, #48]	; (800e7bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	429a      	cmp	r2, r3
 800e792:	d202      	bcs.n	800e79a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e794:	4a09      	ldr	r2, [pc, #36]	; (800e7bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6013      	str	r3, [r2, #0]
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20000cd4 	.word	0x20000cd4
 800e7a8:	20000bd0 	.word	0x20000bd0
 800e7ac:	20000cd8 	.word	0x20000cd8
 800e7b0:	20000cbc 	.word	0x20000cbc
 800e7b4:	20000c8c 	.word	0x20000c8c
 800e7b8:	20000c88 	.word	0x20000c88
 800e7bc:	20000cf0 	.word	0x20000cf0

0800e7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3b04      	subs	r3, #4
 800e7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	3b04      	subs	r3, #4
 800e7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f023 0201 	bic.w	r2, r3, #1
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3b04      	subs	r3, #4
 800e7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7f0:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <pxPortInitialiseStack+0x64>)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3b14      	subs	r3, #20
 800e7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3b04      	subs	r3, #4
 800e806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f06f 0202 	mvn.w	r2, #2
 800e80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3b20      	subs	r3, #32
 800e814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e816:	68fb      	ldr	r3, [r7, #12]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	0800e829 	.word	0x0800e829

0800e828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e832:	4b14      	ldr	r3, [pc, #80]	; (800e884 <prvTaskExitError+0x5c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d00c      	beq.n	800e856 <prvTaskExitError+0x2e>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e840:	b672      	cpsid	i
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	b662      	cpsie	i
 800e850:	60fb      	str	r3, [r7, #12]
}
 800e852:	bf00      	nop
 800e854:	e7fe      	b.n	800e854 <prvTaskExitError+0x2c>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85a:	b672      	cpsid	i
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	b662      	cpsie	i
 800e86a:	60bb      	str	r3, [r7, #8]
}
 800e86c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e86e:	bf00      	nop
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d0fc      	beq.n	800e870 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	20000014 	.word	0x20000014
	...

0800e890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e890:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <pxCurrentTCBConst2>)
 800e892:	6819      	ldr	r1, [r3, #0]
 800e894:	6808      	ldr	r0, [r1, #0]
 800e896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89a:	f380 8809 	msr	PSP, r0
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f04f 0000 	mov.w	r0, #0
 800e8a6:	f380 8811 	msr	BASEPRI, r0
 800e8aa:	4770      	bx	lr
 800e8ac:	f3af 8000 	nop.w

0800e8b0 <pxCurrentTCBConst2>:
 800e8b0:	20000bd0 	.word	0x20000bd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop

0800e8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8b8:	4808      	ldr	r0, [pc, #32]	; (800e8dc <prvPortStartFirstTask+0x24>)
 800e8ba:	6800      	ldr	r0, [r0, #0]
 800e8bc:	6800      	ldr	r0, [r0, #0]
 800e8be:	f380 8808 	msr	MSP, r0
 800e8c2:	f04f 0000 	mov.w	r0, #0
 800e8c6:	f380 8814 	msr	CONTROL, r0
 800e8ca:	b662      	cpsie	i
 800e8cc:	b661      	cpsie	f
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	df00      	svc	0
 800e8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8da:	bf00      	nop
 800e8dc:	e000ed08 	.word	0xe000ed08

0800e8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8e6:	4b37      	ldr	r3, [pc, #220]	; (800e9c4 <xPortStartScheduler+0xe4>)
 800e8e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	22ff      	movs	r2, #255	; 0xff
 800e8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e900:	78fb      	ldrb	r3, [r7, #3]
 800e902:	b2db      	uxtb	r3, r3
 800e904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	4b2f      	ldr	r3, [pc, #188]	; (800e9c8 <xPortStartScheduler+0xe8>)
 800e90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e90e:	4b2f      	ldr	r3, [pc, #188]	; (800e9cc <xPortStartScheduler+0xec>)
 800e910:	2207      	movs	r2, #7
 800e912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e914:	e009      	b.n	800e92a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e916:	4b2d      	ldr	r3, [pc, #180]	; (800e9cc <xPortStartScheduler+0xec>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	4a2b      	ldr	r2, [pc, #172]	; (800e9cc <xPortStartScheduler+0xec>)
 800e91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e920:	78fb      	ldrb	r3, [r7, #3]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	b2db      	uxtb	r3, r3
 800e928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e92a:	78fb      	ldrb	r3, [r7, #3]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e932:	2b80      	cmp	r3, #128	; 0x80
 800e934:	d0ef      	beq.n	800e916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e936:	4b25      	ldr	r3, [pc, #148]	; (800e9cc <xPortStartScheduler+0xec>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f1c3 0307 	rsb	r3, r3, #7
 800e93e:	2b04      	cmp	r3, #4
 800e940:	d00c      	beq.n	800e95c <xPortStartScheduler+0x7c>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	b672      	cpsid	i
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	b662      	cpsie	i
 800e956:	60bb      	str	r3, [r7, #8]
}
 800e958:	bf00      	nop
 800e95a:	e7fe      	b.n	800e95a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e95c:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <xPortStartScheduler+0xec>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	021b      	lsls	r3, r3, #8
 800e962:	4a1a      	ldr	r2, [pc, #104]	; (800e9cc <xPortStartScheduler+0xec>)
 800e964:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e966:	4b19      	ldr	r3, [pc, #100]	; (800e9cc <xPortStartScheduler+0xec>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e96e:	4a17      	ldr	r2, [pc, #92]	; (800e9cc <xPortStartScheduler+0xec>)
 800e970:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	b2da      	uxtb	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e97a:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <xPortStartScheduler+0xf0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a14      	ldr	r2, [pc, #80]	; (800e9d0 <xPortStartScheduler+0xf0>)
 800e980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e984:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e986:	4b12      	ldr	r3, [pc, #72]	; (800e9d0 <xPortStartScheduler+0xf0>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a11      	ldr	r2, [pc, #68]	; (800e9d0 <xPortStartScheduler+0xf0>)
 800e98c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e990:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e992:	f000 f8dd 	bl	800eb50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <xPortStartScheduler+0xf4>)
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e99c:	f000 f8fc 	bl	800eb98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9a0:	4b0d      	ldr	r3, [pc, #52]	; (800e9d8 <xPortStartScheduler+0xf8>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a0c      	ldr	r2, [pc, #48]	; (800e9d8 <xPortStartScheduler+0xf8>)
 800e9a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e9aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9ac:	f7ff ff84 	bl	800e8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9b0:	f7ff fa7a 	bl	800dea8 <vTaskSwitchContext>
	prvTaskExitError();
 800e9b4:	f7ff ff38 	bl	800e828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	e000e400 	.word	0xe000e400
 800e9c8:	20000cfc 	.word	0x20000cfc
 800e9cc:	20000d00 	.word	0x20000d00
 800e9d0:	e000ed20 	.word	0xe000ed20
 800e9d4:	20000014 	.word	0x20000014
 800e9d8:	e000ef34 	.word	0xe000ef34

0800e9dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	b672      	cpsid	i
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	b662      	cpsie	i
 800e9f6:	607b      	str	r3, [r7, #4]
}
 800e9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9fa:	4b10      	ldr	r3, [pc, #64]	; (800ea3c <vPortEnterCritical+0x60>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	4a0e      	ldr	r2, [pc, #56]	; (800ea3c <vPortEnterCritical+0x60>)
 800ea02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea04:	4b0d      	ldr	r3, [pc, #52]	; (800ea3c <vPortEnterCritical+0x60>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d111      	bne.n	800ea30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea0c:	4b0c      	ldr	r3, [pc, #48]	; (800ea40 <vPortEnterCritical+0x64>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00c      	beq.n	800ea30 <vPortEnterCritical+0x54>
	__asm volatile
 800ea16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1a:	b672      	cpsid	i
 800ea1c:	f383 8811 	msr	BASEPRI, r3
 800ea20:	f3bf 8f6f 	isb	sy
 800ea24:	f3bf 8f4f 	dsb	sy
 800ea28:	b662      	cpsie	i
 800ea2a:	603b      	str	r3, [r7, #0]
}
 800ea2c:	bf00      	nop
 800ea2e:	e7fe      	b.n	800ea2e <vPortEnterCritical+0x52>
	}
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	20000014 	.word	0x20000014
 800ea40:	e000ed04 	.word	0xe000ed04

0800ea44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea4a:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <vPortExitCritical+0x54>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d10c      	bne.n	800ea6c <vPortExitCritical+0x28>
	__asm volatile
 800ea52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea56:	b672      	cpsid	i
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	b662      	cpsie	i
 800ea66:	607b      	str	r3, [r7, #4]
}
 800ea68:	bf00      	nop
 800ea6a:	e7fe      	b.n	800ea6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ea6c:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <vPortExitCritical+0x54>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3b01      	subs	r3, #1
 800ea72:	4a09      	ldr	r2, [pc, #36]	; (800ea98 <vPortExitCritical+0x54>)
 800ea74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea76:	4b08      	ldr	r3, [pc, #32]	; (800ea98 <vPortExitCritical+0x54>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d105      	bne.n	800ea8a <vPortExitCritical+0x46>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	f383 8811 	msr	BASEPRI, r3
}
 800ea88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea8a:	bf00      	nop
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	20000014 	.word	0x20000014
 800ea9c:	00000000 	.word	0x00000000

0800eaa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eaa0:	f3ef 8009 	mrs	r0, PSP
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	4b15      	ldr	r3, [pc, #84]	; (800eb00 <pxCurrentTCBConst>)
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	f01e 0f10 	tst.w	lr, #16
 800eab0:	bf08      	it	eq
 800eab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaba:	6010      	str	r0, [r2, #0]
 800eabc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f380 8811 	msr	BASEPRI, r0
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	f7ff f9e8 	bl	800dea8 <vTaskSwitchContext>
 800ead8:	f04f 0000 	mov.w	r0, #0
 800eadc:	f380 8811 	msr	BASEPRI, r0
 800eae0:	bc09      	pop	{r0, r3}
 800eae2:	6819      	ldr	r1, [r3, #0]
 800eae4:	6808      	ldr	r0, [r1, #0]
 800eae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaea:	f01e 0f10 	tst.w	lr, #16
 800eaee:	bf08      	it	eq
 800eaf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eaf4:	f380 8809 	msr	PSP, r0
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop

0800eb00 <pxCurrentTCBConst>:
 800eb00:	20000bd0 	.word	0x20000bd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb04:	bf00      	nop
 800eb06:	bf00      	nop

0800eb08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	b672      	cpsid	i
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	b662      	cpsie	i
 800eb22:	607b      	str	r3, [r7, #4]
}
 800eb24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb26:	f7ff f927 	bl	800dd78 <xTaskIncrementTick>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d003      	beq.n	800eb38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb30:	4b06      	ldr	r3, [pc, #24]	; (800eb4c <SysTick_Handler+0x44>)
 800eb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb36:	601a      	str	r2, [r3, #0]
 800eb38:	2300      	movs	r3, #0
 800eb3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	f383 8811 	msr	BASEPRI, r3
}
 800eb42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	e000ed04 	.word	0xe000ed04

0800eb50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb50:	b480      	push	{r7}
 800eb52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb54:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <vPortSetupTimerInterrupt+0x34>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb5a:	4b0b      	ldr	r3, [pc, #44]	; (800eb88 <vPortSetupTimerInterrupt+0x38>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <vPortSetupTimerInterrupt+0x3c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a0a      	ldr	r2, [pc, #40]	; (800eb90 <vPortSetupTimerInterrupt+0x40>)
 800eb66:	fba2 2303 	umull	r2, r3, r2, r3
 800eb6a:	099b      	lsrs	r3, r3, #6
 800eb6c:	4a09      	ldr	r2, [pc, #36]	; (800eb94 <vPortSetupTimerInterrupt+0x44>)
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb72:	4b04      	ldr	r3, [pc, #16]	; (800eb84 <vPortSetupTimerInterrupt+0x34>)
 800eb74:	2207      	movs	r2, #7
 800eb76:	601a      	str	r2, [r3, #0]
}
 800eb78:	bf00      	nop
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	e000e010 	.word	0xe000e010
 800eb88:	e000e018 	.word	0xe000e018
 800eb8c:	20000008 	.word	0x20000008
 800eb90:	10624dd3 	.word	0x10624dd3
 800eb94:	e000e014 	.word	0xe000e014

0800eb98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eba8 <vPortEnableVFP+0x10>
 800eb9c:	6801      	ldr	r1, [r0, #0]
 800eb9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eba2:	6001      	str	r1, [r0, #0]
 800eba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eba6:	bf00      	nop
 800eba8:	e000ed88 	.word	0xe000ed88

0800ebac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ebac:	b480      	push	{r7}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ebb2:	f3ef 8305 	mrs	r3, IPSR
 800ebb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b0f      	cmp	r3, #15
 800ebbc:	d916      	bls.n	800ebec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ebbe:	4a19      	ldr	r2, [pc, #100]	; (800ec24 <vPortValidateInterruptPriority+0x78>)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ebc8:	4b17      	ldr	r3, [pc, #92]	; (800ec28 <vPortValidateInterruptPriority+0x7c>)
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	7afa      	ldrb	r2, [r7, #11]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d20c      	bcs.n	800ebec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	607b      	str	r3, [r7, #4]
}
 800ebe8:	bf00      	nop
 800ebea:	e7fe      	b.n	800ebea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ebec:	4b0f      	ldr	r3, [pc, #60]	; (800ec2c <vPortValidateInterruptPriority+0x80>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ebf4:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <vPortValidateInterruptPriority+0x84>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d90c      	bls.n	800ec16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ebfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec00:	b672      	cpsid	i
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	b662      	cpsie	i
 800ec10:	603b      	str	r3, [r7, #0]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <vPortValidateInterruptPriority+0x68>
	}
 800ec16:	bf00      	nop
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	e000e3f0 	.word	0xe000e3f0
 800ec28:	20000cfc 	.word	0x20000cfc
 800ec2c:	e000ed0c 	.word	0xe000ed0c
 800ec30:	20000d00 	.word	0x20000d00

0800ec34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08a      	sub	sp, #40	; 0x28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec40:	f7fe fffc 	bl	800dc3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec44:	4b5b      	ldr	r3, [pc, #364]	; (800edb4 <pvPortMalloc+0x180>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec4c:	f000 f91a 	bl	800ee84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec50:	4b59      	ldr	r3, [pc, #356]	; (800edb8 <pvPortMalloc+0x184>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 8092 	bne.w	800ed82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d01f      	beq.n	800eca4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ec64:	2208      	movs	r2, #8
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4413      	add	r3, r2
 800ec6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f003 0307 	and.w	r3, r3, #7
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d016      	beq.n	800eca4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f023 0307 	bic.w	r3, r3, #7
 800ec7c:	3308      	adds	r3, #8
 800ec7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f003 0307 	and.w	r3, r3, #7
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00c      	beq.n	800eca4 <pvPortMalloc+0x70>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	b672      	cpsid	i
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	b662      	cpsie	i
 800ec9e:	617b      	str	r3, [r7, #20]
}
 800eca0:	bf00      	nop
 800eca2:	e7fe      	b.n	800eca2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d06b      	beq.n	800ed82 <pvPortMalloc+0x14e>
 800ecaa:	4b44      	ldr	r3, [pc, #272]	; (800edbc <pvPortMalloc+0x188>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d866      	bhi.n	800ed82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ecb4:	4b42      	ldr	r3, [pc, #264]	; (800edc0 <pvPortMalloc+0x18c>)
 800ecb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ecb8:	4b41      	ldr	r3, [pc, #260]	; (800edc0 <pvPortMalloc+0x18c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecbe:	e004      	b.n	800ecca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d903      	bls.n	800ecdc <pvPortMalloc+0xa8>
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1f1      	bne.n	800ecc0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ecdc:	4b35      	ldr	r3, [pc, #212]	; (800edb4 <pvPortMalloc+0x180>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d04d      	beq.n	800ed82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ece6:	6a3b      	ldr	r3, [r7, #32]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2208      	movs	r2, #8
 800ecec:	4413      	add	r3, r2
 800ecee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	1ad2      	subs	r2, r2, r3
 800ed00:	2308      	movs	r3, #8
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d921      	bls.n	800ed4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00c      	beq.n	800ed34 <pvPortMalloc+0x100>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	b672      	cpsid	i
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	b662      	cpsie	i
 800ed2e:	613b      	str	r3, [r7, #16]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	1ad2      	subs	r2, r2, r3
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed46:	69b8      	ldr	r0, [r7, #24]
 800ed48:	f000 f8fe 	bl	800ef48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed4c:	4b1b      	ldr	r3, [pc, #108]	; (800edbc <pvPortMalloc+0x188>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	1ad3      	subs	r3, r2, r3
 800ed56:	4a19      	ldr	r2, [pc, #100]	; (800edbc <pvPortMalloc+0x188>)
 800ed58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed5a:	4b18      	ldr	r3, [pc, #96]	; (800edbc <pvPortMalloc+0x188>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	4b19      	ldr	r3, [pc, #100]	; (800edc4 <pvPortMalloc+0x190>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d203      	bcs.n	800ed6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed66:	4b15      	ldr	r3, [pc, #84]	; (800edbc <pvPortMalloc+0x188>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a16      	ldr	r2, [pc, #88]	; (800edc4 <pvPortMalloc+0x190>)
 800ed6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	685a      	ldr	r2, [r3, #4]
 800ed72:	4b11      	ldr	r3, [pc, #68]	; (800edb8 <pvPortMalloc+0x184>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	431a      	orrs	r2, r3
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	2200      	movs	r2, #0
 800ed80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed82:	f7fe ff69 	bl	800dc58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	f003 0307 	and.w	r3, r3, #7
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00c      	beq.n	800edaa <pvPortMalloc+0x176>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	b672      	cpsid	i
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	b662      	cpsie	i
 800eda4:	60fb      	str	r3, [r7, #12]
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <pvPortMalloc+0x174>
	return pvReturn;
 800edaa:	69fb      	ldr	r3, [r7, #28]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3728      	adds	r7, #40	; 0x28
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	2000490c 	.word	0x2000490c
 800edb8:	20004918 	.word	0x20004918
 800edbc:	20004910 	.word	0x20004910
 800edc0:	20004904 	.word	0x20004904
 800edc4:	20004914 	.word	0x20004914

0800edc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d04c      	beq.n	800ee74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800edda:	2308      	movs	r3, #8
 800eddc:	425b      	negs	r3, r3
 800edde:	697a      	ldr	r2, [r7, #20]
 800ede0:	4413      	add	r3, r2
 800ede2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	4b23      	ldr	r3, [pc, #140]	; (800ee7c <vPortFree+0xb4>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4013      	ands	r3, r2
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10c      	bne.n	800ee10 <vPortFree+0x48>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	b672      	cpsid	i
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	b662      	cpsie	i
 800ee0a:	60fb      	str	r3, [r7, #12]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00c      	beq.n	800ee32 <vPortFree+0x6a>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	b672      	cpsid	i
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	b662      	cpsie	i
 800ee2c:	60bb      	str	r3, [r7, #8]
}
 800ee2e:	bf00      	nop
 800ee30:	e7fe      	b.n	800ee30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	685a      	ldr	r2, [r3, #4]
 800ee36:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <vPortFree+0xb4>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4013      	ands	r3, r2
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d019      	beq.n	800ee74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d115      	bne.n	800ee74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	685a      	ldr	r2, [r3, #4]
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <vPortFree+0xb4>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	43db      	mvns	r3, r3
 800ee52:	401a      	ands	r2, r3
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee58:	f7fe fef0 	bl	800dc3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	685a      	ldr	r2, [r3, #4]
 800ee60:	4b07      	ldr	r3, [pc, #28]	; (800ee80 <vPortFree+0xb8>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4413      	add	r3, r2
 800ee66:	4a06      	ldr	r2, [pc, #24]	; (800ee80 <vPortFree+0xb8>)
 800ee68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee6a:	6938      	ldr	r0, [r7, #16]
 800ee6c:	f000 f86c 	bl	800ef48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ee70:	f7fe fef2 	bl	800dc58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee74:	bf00      	nop
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20004918 	.word	0x20004918
 800ee80:	20004910 	.word	0x20004910

0800ee84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee90:	4b27      	ldr	r3, [pc, #156]	; (800ef30 <prvHeapInit+0xac>)
 800ee92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f003 0307 	and.w	r3, r3, #7
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00c      	beq.n	800eeb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3307      	adds	r3, #7
 800eea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f023 0307 	bic.w	r3, r3, #7
 800eeaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	4a1f      	ldr	r2, [pc, #124]	; (800ef30 <prvHeapInit+0xac>)
 800eeb4:	4413      	add	r3, r2
 800eeb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eebc:	4a1d      	ldr	r2, [pc, #116]	; (800ef34 <prvHeapInit+0xb0>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eec2:	4b1c      	ldr	r3, [pc, #112]	; (800ef34 <prvHeapInit+0xb0>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	4413      	add	r3, r2
 800eece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eed0:	2208      	movs	r2, #8
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	1a9b      	subs	r3, r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f023 0307 	bic.w	r3, r3, #7
 800eede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	4a15      	ldr	r2, [pc, #84]	; (800ef38 <prvHeapInit+0xb4>)
 800eee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eee6:	4b14      	ldr	r3, [pc, #80]	; (800ef38 <prvHeapInit+0xb4>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2200      	movs	r2, #0
 800eeec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eeee:	4b12      	ldr	r3, [pc, #72]	; (800ef38 <prvHeapInit+0xb4>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2200      	movs	r2, #0
 800eef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	1ad2      	subs	r2, r2, r3
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef04:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <prvHeapInit+0xb4>)
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	4a0a      	ldr	r2, [pc, #40]	; (800ef3c <prvHeapInit+0xb8>)
 800ef12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <prvHeapInit+0xbc>)
 800ef1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef1c:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <prvHeapInit+0xc0>)
 800ef1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef22:	601a      	str	r2, [r3, #0]
}
 800ef24:	bf00      	nop
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	20000d04 	.word	0x20000d04
 800ef34:	20004904 	.word	0x20004904
 800ef38:	2000490c 	.word	0x2000490c
 800ef3c:	20004914 	.word	0x20004914
 800ef40:	20004910 	.word	0x20004910
 800ef44:	20004918 	.word	0x20004918

0800ef48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef50:	4b28      	ldr	r3, [pc, #160]	; (800eff4 <prvInsertBlockIntoFreeList+0xac>)
 800ef52:	60fb      	str	r3, [r7, #12]
 800ef54:	e002      	b.n	800ef5c <prvInsertBlockIntoFreeList+0x14>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	60fb      	str	r3, [r7, #12]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d8f7      	bhi.n	800ef56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	4413      	add	r3, r2
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d108      	bne.n	800ef8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	685a      	ldr	r2, [r3, #4]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	441a      	add	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	68ba      	ldr	r2, [r7, #8]
 800ef94:	441a      	add	r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d118      	bne.n	800efd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	4b15      	ldr	r3, [pc, #84]	; (800eff8 <prvInsertBlockIntoFreeList+0xb0>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d00d      	beq.n	800efc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	441a      	add	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	e008      	b.n	800efd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800efc6:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <prvInsertBlockIntoFreeList+0xb0>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	e003      	b.n	800efd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d002      	beq.n	800efe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efe6:	bf00      	nop
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	20004904 	.word	0x20004904
 800eff8:	2000490c 	.word	0x2000490c

0800effc <__cvt>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	ec55 4b10 	vmov	r4, r5, d0
 800f004:	2d00      	cmp	r5, #0
 800f006:	460e      	mov	r6, r1
 800f008:	4619      	mov	r1, r3
 800f00a:	462b      	mov	r3, r5
 800f00c:	bfbb      	ittet	lt
 800f00e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f012:	461d      	movlt	r5, r3
 800f014:	2300      	movge	r3, #0
 800f016:	232d      	movlt	r3, #45	; 0x2d
 800f018:	700b      	strb	r3, [r1, #0]
 800f01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f020:	4691      	mov	r9, r2
 800f022:	f023 0820 	bic.w	r8, r3, #32
 800f026:	bfbc      	itt	lt
 800f028:	4622      	movlt	r2, r4
 800f02a:	4614      	movlt	r4, r2
 800f02c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f030:	d005      	beq.n	800f03e <__cvt+0x42>
 800f032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f036:	d100      	bne.n	800f03a <__cvt+0x3e>
 800f038:	3601      	adds	r6, #1
 800f03a:	2102      	movs	r1, #2
 800f03c:	e000      	b.n	800f040 <__cvt+0x44>
 800f03e:	2103      	movs	r1, #3
 800f040:	ab03      	add	r3, sp, #12
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	ab02      	add	r3, sp, #8
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	ec45 4b10 	vmov	d0, r4, r5
 800f04c:	4653      	mov	r3, sl
 800f04e:	4632      	mov	r2, r6
 800f050:	f000 ff0e 	bl	800fe70 <_dtoa_r>
 800f054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f058:	4607      	mov	r7, r0
 800f05a:	d102      	bne.n	800f062 <__cvt+0x66>
 800f05c:	f019 0f01 	tst.w	r9, #1
 800f060:	d022      	beq.n	800f0a8 <__cvt+0xac>
 800f062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f066:	eb07 0906 	add.w	r9, r7, r6
 800f06a:	d110      	bne.n	800f08e <__cvt+0x92>
 800f06c:	783b      	ldrb	r3, [r7, #0]
 800f06e:	2b30      	cmp	r3, #48	; 0x30
 800f070:	d10a      	bne.n	800f088 <__cvt+0x8c>
 800f072:	2200      	movs	r2, #0
 800f074:	2300      	movs	r3, #0
 800f076:	4620      	mov	r0, r4
 800f078:	4629      	mov	r1, r5
 800f07a:	f7f1 fd4d 	bl	8000b18 <__aeabi_dcmpeq>
 800f07e:	b918      	cbnz	r0, 800f088 <__cvt+0x8c>
 800f080:	f1c6 0601 	rsb	r6, r6, #1
 800f084:	f8ca 6000 	str.w	r6, [sl]
 800f088:	f8da 3000 	ldr.w	r3, [sl]
 800f08c:	4499      	add	r9, r3
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	f7f1 fd3f 	bl	8000b18 <__aeabi_dcmpeq>
 800f09a:	b108      	cbz	r0, 800f0a0 <__cvt+0xa4>
 800f09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0a0:	2230      	movs	r2, #48	; 0x30
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	454b      	cmp	r3, r9
 800f0a6:	d307      	bcc.n	800f0b8 <__cvt+0xbc>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ac:	1bdb      	subs	r3, r3, r7
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	b004      	add	sp, #16
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	1c59      	adds	r1, r3, #1
 800f0ba:	9103      	str	r1, [sp, #12]
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	e7f0      	b.n	800f0a2 <__cvt+0xa6>

0800f0c0 <__exponent>:
 800f0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2900      	cmp	r1, #0
 800f0c6:	bfb8      	it	lt
 800f0c8:	4249      	neglt	r1, r1
 800f0ca:	f803 2b02 	strb.w	r2, [r3], #2
 800f0ce:	bfb4      	ite	lt
 800f0d0:	222d      	movlt	r2, #45	; 0x2d
 800f0d2:	222b      	movge	r2, #43	; 0x2b
 800f0d4:	2909      	cmp	r1, #9
 800f0d6:	7042      	strb	r2, [r0, #1]
 800f0d8:	dd2a      	ble.n	800f130 <__exponent+0x70>
 800f0da:	f10d 0207 	add.w	r2, sp, #7
 800f0de:	4617      	mov	r7, r2
 800f0e0:	260a      	movs	r6, #10
 800f0e2:	4694      	mov	ip, r2
 800f0e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f0e8:	fb06 1415 	mls	r4, r6, r5, r1
 800f0ec:	3430      	adds	r4, #48	; 0x30
 800f0ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	2c63      	cmp	r4, #99	; 0x63
 800f0f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	dcf1      	bgt.n	800f0e2 <__exponent+0x22>
 800f0fe:	3130      	adds	r1, #48	; 0x30
 800f100:	f1ac 0402 	sub.w	r4, ip, #2
 800f104:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f108:	1c41      	adds	r1, r0, #1
 800f10a:	4622      	mov	r2, r4
 800f10c:	42ba      	cmp	r2, r7
 800f10e:	d30a      	bcc.n	800f126 <__exponent+0x66>
 800f110:	f10d 0209 	add.w	r2, sp, #9
 800f114:	eba2 020c 	sub.w	r2, r2, ip
 800f118:	42bc      	cmp	r4, r7
 800f11a:	bf88      	it	hi
 800f11c:	2200      	movhi	r2, #0
 800f11e:	4413      	add	r3, r2
 800f120:	1a18      	subs	r0, r3, r0
 800f122:	b003      	add	sp, #12
 800f124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f126:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f12a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f12e:	e7ed      	b.n	800f10c <__exponent+0x4c>
 800f130:	2330      	movs	r3, #48	; 0x30
 800f132:	3130      	adds	r1, #48	; 0x30
 800f134:	7083      	strb	r3, [r0, #2]
 800f136:	70c1      	strb	r1, [r0, #3]
 800f138:	1d03      	adds	r3, r0, #4
 800f13a:	e7f1      	b.n	800f120 <__exponent+0x60>

0800f13c <_printf_float>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	ed2d 8b02 	vpush	{d8}
 800f144:	b08d      	sub	sp, #52	; 0x34
 800f146:	460c      	mov	r4, r1
 800f148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f14c:	4616      	mov	r6, r2
 800f14e:	461f      	mov	r7, r3
 800f150:	4605      	mov	r5, r0
 800f152:	f000 fd27 	bl	800fba4 <_localeconv_r>
 800f156:	f8d0 a000 	ldr.w	sl, [r0]
 800f15a:	4650      	mov	r0, sl
 800f15c:	f7f1 f8b0 	bl	80002c0 <strlen>
 800f160:	2300      	movs	r3, #0
 800f162:	930a      	str	r3, [sp, #40]	; 0x28
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	9305      	str	r3, [sp, #20]
 800f168:	f8d8 3000 	ldr.w	r3, [r8]
 800f16c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f170:	3307      	adds	r3, #7
 800f172:	f023 0307 	bic.w	r3, r3, #7
 800f176:	f103 0208 	add.w	r2, r3, #8
 800f17a:	f8c8 2000 	str.w	r2, [r8]
 800f17e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f186:	9307      	str	r3, [sp, #28]
 800f188:	f8cd 8018 	str.w	r8, [sp, #24]
 800f18c:	ee08 0a10 	vmov	s16, r0
 800f190:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f198:	4b9e      	ldr	r3, [pc, #632]	; (800f414 <_printf_float+0x2d8>)
 800f19a:	f04f 32ff 	mov.w	r2, #4294967295
 800f19e:	f7f1 fced 	bl	8000b7c <__aeabi_dcmpun>
 800f1a2:	bb88      	cbnz	r0, 800f208 <_printf_float+0xcc>
 800f1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1a8:	4b9a      	ldr	r3, [pc, #616]	; (800f414 <_printf_float+0x2d8>)
 800f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ae:	f7f1 fcc7 	bl	8000b40 <__aeabi_dcmple>
 800f1b2:	bb48      	cbnz	r0, 800f208 <_printf_float+0xcc>
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	4649      	mov	r1, r9
 800f1bc:	f7f1 fcb6 	bl	8000b2c <__aeabi_dcmplt>
 800f1c0:	b110      	cbz	r0, 800f1c8 <_printf_float+0x8c>
 800f1c2:	232d      	movs	r3, #45	; 0x2d
 800f1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1c8:	4a93      	ldr	r2, [pc, #588]	; (800f418 <_printf_float+0x2dc>)
 800f1ca:	4b94      	ldr	r3, [pc, #592]	; (800f41c <_printf_float+0x2e0>)
 800f1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1d0:	bf94      	ite	ls
 800f1d2:	4690      	movls	r8, r2
 800f1d4:	4698      	movhi	r8, r3
 800f1d6:	2303      	movs	r3, #3
 800f1d8:	6123      	str	r3, [r4, #16]
 800f1da:	9b05      	ldr	r3, [sp, #20]
 800f1dc:	f023 0304 	bic.w	r3, r3, #4
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	f04f 0900 	mov.w	r9, #0
 800f1e6:	9700      	str	r7, [sp, #0]
 800f1e8:	4633      	mov	r3, r6
 800f1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f000 f9da 	bl	800f5a8 <_printf_common>
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	f040 8090 	bne.w	800f31a <_printf_float+0x1de>
 800f1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fe:	b00d      	add	sp, #52	; 0x34
 800f200:	ecbd 8b02 	vpop	{d8}
 800f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f208:	4642      	mov	r2, r8
 800f20a:	464b      	mov	r3, r9
 800f20c:	4640      	mov	r0, r8
 800f20e:	4649      	mov	r1, r9
 800f210:	f7f1 fcb4 	bl	8000b7c <__aeabi_dcmpun>
 800f214:	b140      	cbz	r0, 800f228 <_printf_float+0xec>
 800f216:	464b      	mov	r3, r9
 800f218:	2b00      	cmp	r3, #0
 800f21a:	bfbc      	itt	lt
 800f21c:	232d      	movlt	r3, #45	; 0x2d
 800f21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f222:	4a7f      	ldr	r2, [pc, #508]	; (800f420 <_printf_float+0x2e4>)
 800f224:	4b7f      	ldr	r3, [pc, #508]	; (800f424 <_printf_float+0x2e8>)
 800f226:	e7d1      	b.n	800f1cc <_printf_float+0x90>
 800f228:	6863      	ldr	r3, [r4, #4]
 800f22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f22e:	9206      	str	r2, [sp, #24]
 800f230:	1c5a      	adds	r2, r3, #1
 800f232:	d13f      	bne.n	800f2b4 <_printf_float+0x178>
 800f234:	2306      	movs	r3, #6
 800f236:	6063      	str	r3, [r4, #4]
 800f238:	9b05      	ldr	r3, [sp, #20]
 800f23a:	6861      	ldr	r1, [r4, #4]
 800f23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f240:	2300      	movs	r3, #0
 800f242:	9303      	str	r3, [sp, #12]
 800f244:	ab0a      	add	r3, sp, #40	; 0x28
 800f246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f24a:	ab09      	add	r3, sp, #36	; 0x24
 800f24c:	ec49 8b10 	vmov	d0, r8, r9
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	6022      	str	r2, [r4, #0]
 800f254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f258:	4628      	mov	r0, r5
 800f25a:	f7ff fecf 	bl	800effc <__cvt>
 800f25e:	9b06      	ldr	r3, [sp, #24]
 800f260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f262:	2b47      	cmp	r3, #71	; 0x47
 800f264:	4680      	mov	r8, r0
 800f266:	d108      	bne.n	800f27a <_printf_float+0x13e>
 800f268:	1cc8      	adds	r0, r1, #3
 800f26a:	db02      	blt.n	800f272 <_printf_float+0x136>
 800f26c:	6863      	ldr	r3, [r4, #4]
 800f26e:	4299      	cmp	r1, r3
 800f270:	dd41      	ble.n	800f2f6 <_printf_float+0x1ba>
 800f272:	f1ab 0302 	sub.w	r3, fp, #2
 800f276:	fa5f fb83 	uxtb.w	fp, r3
 800f27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f27e:	d820      	bhi.n	800f2c2 <_printf_float+0x186>
 800f280:	3901      	subs	r1, #1
 800f282:	465a      	mov	r2, fp
 800f284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f288:	9109      	str	r1, [sp, #36]	; 0x24
 800f28a:	f7ff ff19 	bl	800f0c0 <__exponent>
 800f28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f290:	1813      	adds	r3, r2, r0
 800f292:	2a01      	cmp	r2, #1
 800f294:	4681      	mov	r9, r0
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	dc02      	bgt.n	800f2a0 <_printf_float+0x164>
 800f29a:	6822      	ldr	r2, [r4, #0]
 800f29c:	07d2      	lsls	r2, r2, #31
 800f29e:	d501      	bpl.n	800f2a4 <_printf_float+0x168>
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	6123      	str	r3, [r4, #16]
 800f2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d09c      	beq.n	800f1e6 <_printf_float+0xaa>
 800f2ac:	232d      	movs	r3, #45	; 0x2d
 800f2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2b2:	e798      	b.n	800f1e6 <_printf_float+0xaa>
 800f2b4:	9a06      	ldr	r2, [sp, #24]
 800f2b6:	2a47      	cmp	r2, #71	; 0x47
 800f2b8:	d1be      	bne.n	800f238 <_printf_float+0xfc>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1bc      	bne.n	800f238 <_printf_float+0xfc>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e7b9      	b.n	800f236 <_printf_float+0xfa>
 800f2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2c6:	d118      	bne.n	800f2fa <_printf_float+0x1be>
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	6863      	ldr	r3, [r4, #4]
 800f2cc:	dd0b      	ble.n	800f2e6 <_printf_float+0x1aa>
 800f2ce:	6121      	str	r1, [r4, #16]
 800f2d0:	b913      	cbnz	r3, 800f2d8 <_printf_float+0x19c>
 800f2d2:	6822      	ldr	r2, [r4, #0]
 800f2d4:	07d0      	lsls	r0, r2, #31
 800f2d6:	d502      	bpl.n	800f2de <_printf_float+0x1a2>
 800f2d8:	3301      	adds	r3, #1
 800f2da:	440b      	add	r3, r1
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2e0:	f04f 0900 	mov.w	r9, #0
 800f2e4:	e7de      	b.n	800f2a4 <_printf_float+0x168>
 800f2e6:	b913      	cbnz	r3, 800f2ee <_printf_float+0x1b2>
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	07d2      	lsls	r2, r2, #31
 800f2ec:	d501      	bpl.n	800f2f2 <_printf_float+0x1b6>
 800f2ee:	3302      	adds	r3, #2
 800f2f0:	e7f4      	b.n	800f2dc <_printf_float+0x1a0>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e7f2      	b.n	800f2dc <_printf_float+0x1a0>
 800f2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fc:	4299      	cmp	r1, r3
 800f2fe:	db05      	blt.n	800f30c <_printf_float+0x1d0>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	6121      	str	r1, [r4, #16]
 800f304:	07d8      	lsls	r0, r3, #31
 800f306:	d5ea      	bpl.n	800f2de <_printf_float+0x1a2>
 800f308:	1c4b      	adds	r3, r1, #1
 800f30a:	e7e7      	b.n	800f2dc <_printf_float+0x1a0>
 800f30c:	2900      	cmp	r1, #0
 800f30e:	bfd4      	ite	le
 800f310:	f1c1 0202 	rsble	r2, r1, #2
 800f314:	2201      	movgt	r2, #1
 800f316:	4413      	add	r3, r2
 800f318:	e7e0      	b.n	800f2dc <_printf_float+0x1a0>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	055a      	lsls	r2, r3, #21
 800f31e:	d407      	bmi.n	800f330 <_printf_float+0x1f4>
 800f320:	6923      	ldr	r3, [r4, #16]
 800f322:	4642      	mov	r2, r8
 800f324:	4631      	mov	r1, r6
 800f326:	4628      	mov	r0, r5
 800f328:	47b8      	blx	r7
 800f32a:	3001      	adds	r0, #1
 800f32c:	d12c      	bne.n	800f388 <_printf_float+0x24c>
 800f32e:	e764      	b.n	800f1fa <_printf_float+0xbe>
 800f330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f334:	f240 80e0 	bls.w	800f4f8 <_printf_float+0x3bc>
 800f338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f33c:	2200      	movs	r2, #0
 800f33e:	2300      	movs	r3, #0
 800f340:	f7f1 fbea 	bl	8000b18 <__aeabi_dcmpeq>
 800f344:	2800      	cmp	r0, #0
 800f346:	d034      	beq.n	800f3b2 <_printf_float+0x276>
 800f348:	4a37      	ldr	r2, [pc, #220]	; (800f428 <_printf_float+0x2ec>)
 800f34a:	2301      	movs	r3, #1
 800f34c:	4631      	mov	r1, r6
 800f34e:	4628      	mov	r0, r5
 800f350:	47b8      	blx	r7
 800f352:	3001      	adds	r0, #1
 800f354:	f43f af51 	beq.w	800f1fa <_printf_float+0xbe>
 800f358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f35c:	429a      	cmp	r2, r3
 800f35e:	db02      	blt.n	800f366 <_printf_float+0x22a>
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	07d8      	lsls	r0, r3, #31
 800f364:	d510      	bpl.n	800f388 <_printf_float+0x24c>
 800f366:	ee18 3a10 	vmov	r3, s16
 800f36a:	4652      	mov	r2, sl
 800f36c:	4631      	mov	r1, r6
 800f36e:	4628      	mov	r0, r5
 800f370:	47b8      	blx	r7
 800f372:	3001      	adds	r0, #1
 800f374:	f43f af41 	beq.w	800f1fa <_printf_float+0xbe>
 800f378:	f04f 0800 	mov.w	r8, #0
 800f37c:	f104 091a 	add.w	r9, r4, #26
 800f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f382:	3b01      	subs	r3, #1
 800f384:	4543      	cmp	r3, r8
 800f386:	dc09      	bgt.n	800f39c <_printf_float+0x260>
 800f388:	6823      	ldr	r3, [r4, #0]
 800f38a:	079b      	lsls	r3, r3, #30
 800f38c:	f100 8107 	bmi.w	800f59e <_printf_float+0x462>
 800f390:	68e0      	ldr	r0, [r4, #12]
 800f392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f394:	4298      	cmp	r0, r3
 800f396:	bfb8      	it	lt
 800f398:	4618      	movlt	r0, r3
 800f39a:	e730      	b.n	800f1fe <_printf_float+0xc2>
 800f39c:	2301      	movs	r3, #1
 800f39e:	464a      	mov	r2, r9
 800f3a0:	4631      	mov	r1, r6
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	47b8      	blx	r7
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	f43f af27 	beq.w	800f1fa <_printf_float+0xbe>
 800f3ac:	f108 0801 	add.w	r8, r8, #1
 800f3b0:	e7e6      	b.n	800f380 <_printf_float+0x244>
 800f3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	dc39      	bgt.n	800f42c <_printf_float+0x2f0>
 800f3b8:	4a1b      	ldr	r2, [pc, #108]	; (800f428 <_printf_float+0x2ec>)
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4628      	mov	r0, r5
 800f3c0:	47b8      	blx	r7
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	f43f af19 	beq.w	800f1fa <_printf_float+0xbe>
 800f3c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	d102      	bne.n	800f3d6 <_printf_float+0x29a>
 800f3d0:	6823      	ldr	r3, [r4, #0]
 800f3d2:	07d9      	lsls	r1, r3, #31
 800f3d4:	d5d8      	bpl.n	800f388 <_printf_float+0x24c>
 800f3d6:	ee18 3a10 	vmov	r3, s16
 800f3da:	4652      	mov	r2, sl
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	f43f af09 	beq.w	800f1fa <_printf_float+0xbe>
 800f3e8:	f04f 0900 	mov.w	r9, #0
 800f3ec:	f104 0a1a 	add.w	sl, r4, #26
 800f3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f2:	425b      	negs	r3, r3
 800f3f4:	454b      	cmp	r3, r9
 800f3f6:	dc01      	bgt.n	800f3fc <_printf_float+0x2c0>
 800f3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3fa:	e792      	b.n	800f322 <_printf_float+0x1e6>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	4652      	mov	r2, sl
 800f400:	4631      	mov	r1, r6
 800f402:	4628      	mov	r0, r5
 800f404:	47b8      	blx	r7
 800f406:	3001      	adds	r0, #1
 800f408:	f43f aef7 	beq.w	800f1fa <_printf_float+0xbe>
 800f40c:	f109 0901 	add.w	r9, r9, #1
 800f410:	e7ee      	b.n	800f3f0 <_printf_float+0x2b4>
 800f412:	bf00      	nop
 800f414:	7fefffff 	.word	0x7fefffff
 800f418:	08013dc4 	.word	0x08013dc4
 800f41c:	08013dc8 	.word	0x08013dc8
 800f420:	08013dcc 	.word	0x08013dcc
 800f424:	08013dd0 	.word	0x08013dd0
 800f428:	08014003 	.word	0x08014003
 800f42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f430:	429a      	cmp	r2, r3
 800f432:	bfa8      	it	ge
 800f434:	461a      	movge	r2, r3
 800f436:	2a00      	cmp	r2, #0
 800f438:	4691      	mov	r9, r2
 800f43a:	dc37      	bgt.n	800f4ac <_printf_float+0x370>
 800f43c:	f04f 0b00 	mov.w	fp, #0
 800f440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f444:	f104 021a 	add.w	r2, r4, #26
 800f448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	eba3 0309 	sub.w	r3, r3, r9
 800f450:	455b      	cmp	r3, fp
 800f452:	dc33      	bgt.n	800f4bc <_printf_float+0x380>
 800f454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f458:	429a      	cmp	r2, r3
 800f45a:	db3b      	blt.n	800f4d4 <_printf_float+0x398>
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	07da      	lsls	r2, r3, #31
 800f460:	d438      	bmi.n	800f4d4 <_printf_float+0x398>
 800f462:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f466:	eba2 0903 	sub.w	r9, r2, r3
 800f46a:	9b05      	ldr	r3, [sp, #20]
 800f46c:	1ad2      	subs	r2, r2, r3
 800f46e:	4591      	cmp	r9, r2
 800f470:	bfa8      	it	ge
 800f472:	4691      	movge	r9, r2
 800f474:	f1b9 0f00 	cmp.w	r9, #0
 800f478:	dc35      	bgt.n	800f4e6 <_printf_float+0x3aa>
 800f47a:	f04f 0800 	mov.w	r8, #0
 800f47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f482:	f104 0a1a 	add.w	sl, r4, #26
 800f486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f48a:	1a9b      	subs	r3, r3, r2
 800f48c:	eba3 0309 	sub.w	r3, r3, r9
 800f490:	4543      	cmp	r3, r8
 800f492:	f77f af79 	ble.w	800f388 <_printf_float+0x24c>
 800f496:	2301      	movs	r3, #1
 800f498:	4652      	mov	r2, sl
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	f43f aeaa 	beq.w	800f1fa <_printf_float+0xbe>
 800f4a6:	f108 0801 	add.w	r8, r8, #1
 800f4aa:	e7ec      	b.n	800f486 <_printf_float+0x34a>
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	4642      	mov	r2, r8
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	47b8      	blx	r7
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	d1c0      	bne.n	800f43c <_printf_float+0x300>
 800f4ba:	e69e      	b.n	800f1fa <_printf_float+0xbe>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	9205      	str	r2, [sp, #20]
 800f4c4:	47b8      	blx	r7
 800f4c6:	3001      	adds	r0, #1
 800f4c8:	f43f ae97 	beq.w	800f1fa <_printf_float+0xbe>
 800f4cc:	9a05      	ldr	r2, [sp, #20]
 800f4ce:	f10b 0b01 	add.w	fp, fp, #1
 800f4d2:	e7b9      	b.n	800f448 <_printf_float+0x30c>
 800f4d4:	ee18 3a10 	vmov	r3, s16
 800f4d8:	4652      	mov	r2, sl
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	47b8      	blx	r7
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	d1be      	bne.n	800f462 <_printf_float+0x326>
 800f4e4:	e689      	b.n	800f1fa <_printf_float+0xbe>
 800f4e6:	9a05      	ldr	r2, [sp, #20]
 800f4e8:	464b      	mov	r3, r9
 800f4ea:	4442      	add	r2, r8
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	47b8      	blx	r7
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	d1c1      	bne.n	800f47a <_printf_float+0x33e>
 800f4f6:	e680      	b.n	800f1fa <_printf_float+0xbe>
 800f4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4fa:	2a01      	cmp	r2, #1
 800f4fc:	dc01      	bgt.n	800f502 <_printf_float+0x3c6>
 800f4fe:	07db      	lsls	r3, r3, #31
 800f500:	d53a      	bpl.n	800f578 <_printf_float+0x43c>
 800f502:	2301      	movs	r3, #1
 800f504:	4642      	mov	r2, r8
 800f506:	4631      	mov	r1, r6
 800f508:	4628      	mov	r0, r5
 800f50a:	47b8      	blx	r7
 800f50c:	3001      	adds	r0, #1
 800f50e:	f43f ae74 	beq.w	800f1fa <_printf_float+0xbe>
 800f512:	ee18 3a10 	vmov	r3, s16
 800f516:	4652      	mov	r2, sl
 800f518:	4631      	mov	r1, r6
 800f51a:	4628      	mov	r0, r5
 800f51c:	47b8      	blx	r7
 800f51e:	3001      	adds	r0, #1
 800f520:	f43f ae6b 	beq.w	800f1fa <_printf_float+0xbe>
 800f524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f528:	2200      	movs	r2, #0
 800f52a:	2300      	movs	r3, #0
 800f52c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f530:	f7f1 faf2 	bl	8000b18 <__aeabi_dcmpeq>
 800f534:	b9d8      	cbnz	r0, 800f56e <_printf_float+0x432>
 800f536:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f53a:	f108 0201 	add.w	r2, r8, #1
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	d10e      	bne.n	800f566 <_printf_float+0x42a>
 800f548:	e657      	b.n	800f1fa <_printf_float+0xbe>
 800f54a:	2301      	movs	r3, #1
 800f54c:	4652      	mov	r2, sl
 800f54e:	4631      	mov	r1, r6
 800f550:	4628      	mov	r0, r5
 800f552:	47b8      	blx	r7
 800f554:	3001      	adds	r0, #1
 800f556:	f43f ae50 	beq.w	800f1fa <_printf_float+0xbe>
 800f55a:	f108 0801 	add.w	r8, r8, #1
 800f55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f560:	3b01      	subs	r3, #1
 800f562:	4543      	cmp	r3, r8
 800f564:	dcf1      	bgt.n	800f54a <_printf_float+0x40e>
 800f566:	464b      	mov	r3, r9
 800f568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f56c:	e6da      	b.n	800f324 <_printf_float+0x1e8>
 800f56e:	f04f 0800 	mov.w	r8, #0
 800f572:	f104 0a1a 	add.w	sl, r4, #26
 800f576:	e7f2      	b.n	800f55e <_printf_float+0x422>
 800f578:	2301      	movs	r3, #1
 800f57a:	4642      	mov	r2, r8
 800f57c:	e7df      	b.n	800f53e <_printf_float+0x402>
 800f57e:	2301      	movs	r3, #1
 800f580:	464a      	mov	r2, r9
 800f582:	4631      	mov	r1, r6
 800f584:	4628      	mov	r0, r5
 800f586:	47b8      	blx	r7
 800f588:	3001      	adds	r0, #1
 800f58a:	f43f ae36 	beq.w	800f1fa <_printf_float+0xbe>
 800f58e:	f108 0801 	add.w	r8, r8, #1
 800f592:	68e3      	ldr	r3, [r4, #12]
 800f594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f596:	1a5b      	subs	r3, r3, r1
 800f598:	4543      	cmp	r3, r8
 800f59a:	dcf0      	bgt.n	800f57e <_printf_float+0x442>
 800f59c:	e6f8      	b.n	800f390 <_printf_float+0x254>
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	f104 0919 	add.w	r9, r4, #25
 800f5a6:	e7f4      	b.n	800f592 <_printf_float+0x456>

0800f5a8 <_printf_common>:
 800f5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ac:	4616      	mov	r6, r2
 800f5ae:	4699      	mov	r9, r3
 800f5b0:	688a      	ldr	r2, [r1, #8]
 800f5b2:	690b      	ldr	r3, [r1, #16]
 800f5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	bfb8      	it	lt
 800f5bc:	4613      	movlt	r3, r2
 800f5be:	6033      	str	r3, [r6, #0]
 800f5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5c4:	4607      	mov	r7, r0
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	b10a      	cbz	r2, 800f5ce <_printf_common+0x26>
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	6033      	str	r3, [r6, #0]
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	0699      	lsls	r1, r3, #26
 800f5d2:	bf42      	ittt	mi
 800f5d4:	6833      	ldrmi	r3, [r6, #0]
 800f5d6:	3302      	addmi	r3, #2
 800f5d8:	6033      	strmi	r3, [r6, #0]
 800f5da:	6825      	ldr	r5, [r4, #0]
 800f5dc:	f015 0506 	ands.w	r5, r5, #6
 800f5e0:	d106      	bne.n	800f5f0 <_printf_common+0x48>
 800f5e2:	f104 0a19 	add.w	sl, r4, #25
 800f5e6:	68e3      	ldr	r3, [r4, #12]
 800f5e8:	6832      	ldr	r2, [r6, #0]
 800f5ea:	1a9b      	subs	r3, r3, r2
 800f5ec:	42ab      	cmp	r3, r5
 800f5ee:	dc26      	bgt.n	800f63e <_printf_common+0x96>
 800f5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5f4:	1e13      	subs	r3, r2, #0
 800f5f6:	6822      	ldr	r2, [r4, #0]
 800f5f8:	bf18      	it	ne
 800f5fa:	2301      	movne	r3, #1
 800f5fc:	0692      	lsls	r2, r2, #26
 800f5fe:	d42b      	bmi.n	800f658 <_printf_common+0xb0>
 800f600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f604:	4649      	mov	r1, r9
 800f606:	4638      	mov	r0, r7
 800f608:	47c0      	blx	r8
 800f60a:	3001      	adds	r0, #1
 800f60c:	d01e      	beq.n	800f64c <_printf_common+0xa4>
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	6922      	ldr	r2, [r4, #16]
 800f612:	f003 0306 	and.w	r3, r3, #6
 800f616:	2b04      	cmp	r3, #4
 800f618:	bf02      	ittt	eq
 800f61a:	68e5      	ldreq	r5, [r4, #12]
 800f61c:	6833      	ldreq	r3, [r6, #0]
 800f61e:	1aed      	subeq	r5, r5, r3
 800f620:	68a3      	ldr	r3, [r4, #8]
 800f622:	bf0c      	ite	eq
 800f624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f628:	2500      	movne	r5, #0
 800f62a:	4293      	cmp	r3, r2
 800f62c:	bfc4      	itt	gt
 800f62e:	1a9b      	subgt	r3, r3, r2
 800f630:	18ed      	addgt	r5, r5, r3
 800f632:	2600      	movs	r6, #0
 800f634:	341a      	adds	r4, #26
 800f636:	42b5      	cmp	r5, r6
 800f638:	d11a      	bne.n	800f670 <_printf_common+0xc8>
 800f63a:	2000      	movs	r0, #0
 800f63c:	e008      	b.n	800f650 <_printf_common+0xa8>
 800f63e:	2301      	movs	r3, #1
 800f640:	4652      	mov	r2, sl
 800f642:	4649      	mov	r1, r9
 800f644:	4638      	mov	r0, r7
 800f646:	47c0      	blx	r8
 800f648:	3001      	adds	r0, #1
 800f64a:	d103      	bne.n	800f654 <_printf_common+0xac>
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f654:	3501      	adds	r5, #1
 800f656:	e7c6      	b.n	800f5e6 <_printf_common+0x3e>
 800f658:	18e1      	adds	r1, r4, r3
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	2030      	movs	r0, #48	; 0x30
 800f65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f662:	4422      	add	r2, r4
 800f664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f66c:	3302      	adds	r3, #2
 800f66e:	e7c7      	b.n	800f600 <_printf_common+0x58>
 800f670:	2301      	movs	r3, #1
 800f672:	4622      	mov	r2, r4
 800f674:	4649      	mov	r1, r9
 800f676:	4638      	mov	r0, r7
 800f678:	47c0      	blx	r8
 800f67a:	3001      	adds	r0, #1
 800f67c:	d0e6      	beq.n	800f64c <_printf_common+0xa4>
 800f67e:	3601      	adds	r6, #1
 800f680:	e7d9      	b.n	800f636 <_printf_common+0x8e>
	...

0800f684 <_printf_i>:
 800f684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f688:	7e0f      	ldrb	r7, [r1, #24]
 800f68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f68c:	2f78      	cmp	r7, #120	; 0x78
 800f68e:	4691      	mov	r9, r2
 800f690:	4680      	mov	r8, r0
 800f692:	460c      	mov	r4, r1
 800f694:	469a      	mov	sl, r3
 800f696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f69a:	d807      	bhi.n	800f6ac <_printf_i+0x28>
 800f69c:	2f62      	cmp	r7, #98	; 0x62
 800f69e:	d80a      	bhi.n	800f6b6 <_printf_i+0x32>
 800f6a0:	2f00      	cmp	r7, #0
 800f6a2:	f000 80d4 	beq.w	800f84e <_printf_i+0x1ca>
 800f6a6:	2f58      	cmp	r7, #88	; 0x58
 800f6a8:	f000 80c0 	beq.w	800f82c <_printf_i+0x1a8>
 800f6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6b4:	e03a      	b.n	800f72c <_printf_i+0xa8>
 800f6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ba:	2b15      	cmp	r3, #21
 800f6bc:	d8f6      	bhi.n	800f6ac <_printf_i+0x28>
 800f6be:	a101      	add	r1, pc, #4	; (adr r1, 800f6c4 <_printf_i+0x40>)
 800f6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6c4:	0800f71d 	.word	0x0800f71d
 800f6c8:	0800f731 	.word	0x0800f731
 800f6cc:	0800f6ad 	.word	0x0800f6ad
 800f6d0:	0800f6ad 	.word	0x0800f6ad
 800f6d4:	0800f6ad 	.word	0x0800f6ad
 800f6d8:	0800f6ad 	.word	0x0800f6ad
 800f6dc:	0800f731 	.word	0x0800f731
 800f6e0:	0800f6ad 	.word	0x0800f6ad
 800f6e4:	0800f6ad 	.word	0x0800f6ad
 800f6e8:	0800f6ad 	.word	0x0800f6ad
 800f6ec:	0800f6ad 	.word	0x0800f6ad
 800f6f0:	0800f835 	.word	0x0800f835
 800f6f4:	0800f75d 	.word	0x0800f75d
 800f6f8:	0800f7ef 	.word	0x0800f7ef
 800f6fc:	0800f6ad 	.word	0x0800f6ad
 800f700:	0800f6ad 	.word	0x0800f6ad
 800f704:	0800f857 	.word	0x0800f857
 800f708:	0800f6ad 	.word	0x0800f6ad
 800f70c:	0800f75d 	.word	0x0800f75d
 800f710:	0800f6ad 	.word	0x0800f6ad
 800f714:	0800f6ad 	.word	0x0800f6ad
 800f718:	0800f7f7 	.word	0x0800f7f7
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	1d1a      	adds	r2, r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	602a      	str	r2, [r5, #0]
 800f724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f72c:	2301      	movs	r3, #1
 800f72e:	e09f      	b.n	800f870 <_printf_i+0x1ec>
 800f730:	6820      	ldr	r0, [r4, #0]
 800f732:	682b      	ldr	r3, [r5, #0]
 800f734:	0607      	lsls	r7, r0, #24
 800f736:	f103 0104 	add.w	r1, r3, #4
 800f73a:	6029      	str	r1, [r5, #0]
 800f73c:	d501      	bpl.n	800f742 <_printf_i+0xbe>
 800f73e:	681e      	ldr	r6, [r3, #0]
 800f740:	e003      	b.n	800f74a <_printf_i+0xc6>
 800f742:	0646      	lsls	r6, r0, #25
 800f744:	d5fb      	bpl.n	800f73e <_printf_i+0xba>
 800f746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f74a:	2e00      	cmp	r6, #0
 800f74c:	da03      	bge.n	800f756 <_printf_i+0xd2>
 800f74e:	232d      	movs	r3, #45	; 0x2d
 800f750:	4276      	negs	r6, r6
 800f752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f756:	485a      	ldr	r0, [pc, #360]	; (800f8c0 <_printf_i+0x23c>)
 800f758:	230a      	movs	r3, #10
 800f75a:	e012      	b.n	800f782 <_printf_i+0xfe>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	6820      	ldr	r0, [r4, #0]
 800f760:	1d19      	adds	r1, r3, #4
 800f762:	6029      	str	r1, [r5, #0]
 800f764:	0605      	lsls	r5, r0, #24
 800f766:	d501      	bpl.n	800f76c <_printf_i+0xe8>
 800f768:	681e      	ldr	r6, [r3, #0]
 800f76a:	e002      	b.n	800f772 <_printf_i+0xee>
 800f76c:	0641      	lsls	r1, r0, #25
 800f76e:	d5fb      	bpl.n	800f768 <_printf_i+0xe4>
 800f770:	881e      	ldrh	r6, [r3, #0]
 800f772:	4853      	ldr	r0, [pc, #332]	; (800f8c0 <_printf_i+0x23c>)
 800f774:	2f6f      	cmp	r7, #111	; 0x6f
 800f776:	bf0c      	ite	eq
 800f778:	2308      	moveq	r3, #8
 800f77a:	230a      	movne	r3, #10
 800f77c:	2100      	movs	r1, #0
 800f77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f782:	6865      	ldr	r5, [r4, #4]
 800f784:	60a5      	str	r5, [r4, #8]
 800f786:	2d00      	cmp	r5, #0
 800f788:	bfa2      	ittt	ge
 800f78a:	6821      	ldrge	r1, [r4, #0]
 800f78c:	f021 0104 	bicge.w	r1, r1, #4
 800f790:	6021      	strge	r1, [r4, #0]
 800f792:	b90e      	cbnz	r6, 800f798 <_printf_i+0x114>
 800f794:	2d00      	cmp	r5, #0
 800f796:	d04b      	beq.n	800f830 <_printf_i+0x1ac>
 800f798:	4615      	mov	r5, r2
 800f79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f79e:	fb03 6711 	mls	r7, r3, r1, r6
 800f7a2:	5dc7      	ldrb	r7, [r0, r7]
 800f7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7a8:	4637      	mov	r7, r6
 800f7aa:	42bb      	cmp	r3, r7
 800f7ac:	460e      	mov	r6, r1
 800f7ae:	d9f4      	bls.n	800f79a <_printf_i+0x116>
 800f7b0:	2b08      	cmp	r3, #8
 800f7b2:	d10b      	bne.n	800f7cc <_printf_i+0x148>
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	07de      	lsls	r6, r3, #31
 800f7b8:	d508      	bpl.n	800f7cc <_printf_i+0x148>
 800f7ba:	6923      	ldr	r3, [r4, #16]
 800f7bc:	6861      	ldr	r1, [r4, #4]
 800f7be:	4299      	cmp	r1, r3
 800f7c0:	bfde      	ittt	le
 800f7c2:	2330      	movle	r3, #48	; 0x30
 800f7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7cc:	1b52      	subs	r2, r2, r5
 800f7ce:	6122      	str	r2, [r4, #16]
 800f7d0:	f8cd a000 	str.w	sl, [sp]
 800f7d4:	464b      	mov	r3, r9
 800f7d6:	aa03      	add	r2, sp, #12
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4640      	mov	r0, r8
 800f7dc:	f7ff fee4 	bl	800f5a8 <_printf_common>
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d14a      	bne.n	800f87a <_printf_i+0x1f6>
 800f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e8:	b004      	add	sp, #16
 800f7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	f043 0320 	orr.w	r3, r3, #32
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	4833      	ldr	r0, [pc, #204]	; (800f8c4 <_printf_i+0x240>)
 800f7f8:	2778      	movs	r7, #120	; 0x78
 800f7fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	6829      	ldr	r1, [r5, #0]
 800f802:	061f      	lsls	r7, r3, #24
 800f804:	f851 6b04 	ldr.w	r6, [r1], #4
 800f808:	d402      	bmi.n	800f810 <_printf_i+0x18c>
 800f80a:	065f      	lsls	r7, r3, #25
 800f80c:	bf48      	it	mi
 800f80e:	b2b6      	uxthmi	r6, r6
 800f810:	07df      	lsls	r7, r3, #31
 800f812:	bf48      	it	mi
 800f814:	f043 0320 	orrmi.w	r3, r3, #32
 800f818:	6029      	str	r1, [r5, #0]
 800f81a:	bf48      	it	mi
 800f81c:	6023      	strmi	r3, [r4, #0]
 800f81e:	b91e      	cbnz	r6, 800f828 <_printf_i+0x1a4>
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	f023 0320 	bic.w	r3, r3, #32
 800f826:	6023      	str	r3, [r4, #0]
 800f828:	2310      	movs	r3, #16
 800f82a:	e7a7      	b.n	800f77c <_printf_i+0xf8>
 800f82c:	4824      	ldr	r0, [pc, #144]	; (800f8c0 <_printf_i+0x23c>)
 800f82e:	e7e4      	b.n	800f7fa <_printf_i+0x176>
 800f830:	4615      	mov	r5, r2
 800f832:	e7bd      	b.n	800f7b0 <_printf_i+0x12c>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	6826      	ldr	r6, [r4, #0]
 800f838:	6961      	ldr	r1, [r4, #20]
 800f83a:	1d18      	adds	r0, r3, #4
 800f83c:	6028      	str	r0, [r5, #0]
 800f83e:	0635      	lsls	r5, r6, #24
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	d501      	bpl.n	800f848 <_printf_i+0x1c4>
 800f844:	6019      	str	r1, [r3, #0]
 800f846:	e002      	b.n	800f84e <_printf_i+0x1ca>
 800f848:	0670      	lsls	r0, r6, #25
 800f84a:	d5fb      	bpl.n	800f844 <_printf_i+0x1c0>
 800f84c:	8019      	strh	r1, [r3, #0]
 800f84e:	2300      	movs	r3, #0
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	4615      	mov	r5, r2
 800f854:	e7bc      	b.n	800f7d0 <_printf_i+0x14c>
 800f856:	682b      	ldr	r3, [r5, #0]
 800f858:	1d1a      	adds	r2, r3, #4
 800f85a:	602a      	str	r2, [r5, #0]
 800f85c:	681d      	ldr	r5, [r3, #0]
 800f85e:	6862      	ldr	r2, [r4, #4]
 800f860:	2100      	movs	r1, #0
 800f862:	4628      	mov	r0, r5
 800f864:	f7f0 fcdc 	bl	8000220 <memchr>
 800f868:	b108      	cbz	r0, 800f86e <_printf_i+0x1ea>
 800f86a:	1b40      	subs	r0, r0, r5
 800f86c:	6060      	str	r0, [r4, #4]
 800f86e:	6863      	ldr	r3, [r4, #4]
 800f870:	6123      	str	r3, [r4, #16]
 800f872:	2300      	movs	r3, #0
 800f874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f878:	e7aa      	b.n	800f7d0 <_printf_i+0x14c>
 800f87a:	6923      	ldr	r3, [r4, #16]
 800f87c:	462a      	mov	r2, r5
 800f87e:	4649      	mov	r1, r9
 800f880:	4640      	mov	r0, r8
 800f882:	47d0      	blx	sl
 800f884:	3001      	adds	r0, #1
 800f886:	d0ad      	beq.n	800f7e4 <_printf_i+0x160>
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	079b      	lsls	r3, r3, #30
 800f88c:	d413      	bmi.n	800f8b6 <_printf_i+0x232>
 800f88e:	68e0      	ldr	r0, [r4, #12]
 800f890:	9b03      	ldr	r3, [sp, #12]
 800f892:	4298      	cmp	r0, r3
 800f894:	bfb8      	it	lt
 800f896:	4618      	movlt	r0, r3
 800f898:	e7a6      	b.n	800f7e8 <_printf_i+0x164>
 800f89a:	2301      	movs	r3, #1
 800f89c:	4632      	mov	r2, r6
 800f89e:	4649      	mov	r1, r9
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	47d0      	blx	sl
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	d09d      	beq.n	800f7e4 <_printf_i+0x160>
 800f8a8:	3501      	adds	r5, #1
 800f8aa:	68e3      	ldr	r3, [r4, #12]
 800f8ac:	9903      	ldr	r1, [sp, #12]
 800f8ae:	1a5b      	subs	r3, r3, r1
 800f8b0:	42ab      	cmp	r3, r5
 800f8b2:	dcf2      	bgt.n	800f89a <_printf_i+0x216>
 800f8b4:	e7eb      	b.n	800f88e <_printf_i+0x20a>
 800f8b6:	2500      	movs	r5, #0
 800f8b8:	f104 0619 	add.w	r6, r4, #25
 800f8bc:	e7f5      	b.n	800f8aa <_printf_i+0x226>
 800f8be:	bf00      	nop
 800f8c0:	08013dd4 	.word	0x08013dd4
 800f8c4:	08013de5 	.word	0x08013de5

0800f8c8 <std>:
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	b510      	push	{r4, lr}
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800f8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8d6:	6083      	str	r3, [r0, #8]
 800f8d8:	8181      	strh	r1, [r0, #12]
 800f8da:	6643      	str	r3, [r0, #100]	; 0x64
 800f8dc:	81c2      	strh	r2, [r0, #14]
 800f8de:	6183      	str	r3, [r0, #24]
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	2208      	movs	r2, #8
 800f8e4:	305c      	adds	r0, #92	; 0x5c
 800f8e6:	f000 f942 	bl	800fb6e <memset>
 800f8ea:	4b0d      	ldr	r3, [pc, #52]	; (800f920 <std+0x58>)
 800f8ec:	6263      	str	r3, [r4, #36]	; 0x24
 800f8ee:	4b0d      	ldr	r3, [pc, #52]	; (800f924 <std+0x5c>)
 800f8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8f2:	4b0d      	ldr	r3, [pc, #52]	; (800f928 <std+0x60>)
 800f8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8f6:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <std+0x64>)
 800f8f8:	6323      	str	r3, [r4, #48]	; 0x30
 800f8fa:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <std+0x68>)
 800f8fc:	6224      	str	r4, [r4, #32]
 800f8fe:	429c      	cmp	r4, r3
 800f900:	d006      	beq.n	800f910 <std+0x48>
 800f902:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f906:	4294      	cmp	r4, r2
 800f908:	d002      	beq.n	800f910 <std+0x48>
 800f90a:	33d0      	adds	r3, #208	; 0xd0
 800f90c:	429c      	cmp	r4, r3
 800f90e:	d105      	bne.n	800f91c <std+0x54>
 800f910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f918:	f000 ba0e 	b.w	800fd38 <__retarget_lock_init_recursive>
 800f91c:	bd10      	pop	{r4, pc}
 800f91e:	bf00      	nop
 800f920:	0800fae5 	.word	0x0800fae5
 800f924:	0800fb0b 	.word	0x0800fb0b
 800f928:	0800fb43 	.word	0x0800fb43
 800f92c:	0800fb67 	.word	0x0800fb67
 800f930:	2000491c 	.word	0x2000491c

0800f934 <stdio_exit_handler>:
 800f934:	4a02      	ldr	r2, [pc, #8]	; (800f940 <stdio_exit_handler+0xc>)
 800f936:	4903      	ldr	r1, [pc, #12]	; (800f944 <stdio_exit_handler+0x10>)
 800f938:	4803      	ldr	r0, [pc, #12]	; (800f948 <stdio_exit_handler+0x14>)
 800f93a:	f000 b869 	b.w	800fa10 <_fwalk_sglue>
 800f93e:	bf00      	nop
 800f940:	20000018 	.word	0x20000018
 800f944:	08011d49 	.word	0x08011d49
 800f948:	20000024 	.word	0x20000024

0800f94c <cleanup_stdio>:
 800f94c:	6841      	ldr	r1, [r0, #4]
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <cleanup_stdio+0x34>)
 800f950:	4299      	cmp	r1, r3
 800f952:	b510      	push	{r4, lr}
 800f954:	4604      	mov	r4, r0
 800f956:	d001      	beq.n	800f95c <cleanup_stdio+0x10>
 800f958:	f002 f9f6 	bl	8011d48 <_fflush_r>
 800f95c:	68a1      	ldr	r1, [r4, #8]
 800f95e:	4b09      	ldr	r3, [pc, #36]	; (800f984 <cleanup_stdio+0x38>)
 800f960:	4299      	cmp	r1, r3
 800f962:	d002      	beq.n	800f96a <cleanup_stdio+0x1e>
 800f964:	4620      	mov	r0, r4
 800f966:	f002 f9ef 	bl	8011d48 <_fflush_r>
 800f96a:	68e1      	ldr	r1, [r4, #12]
 800f96c:	4b06      	ldr	r3, [pc, #24]	; (800f988 <cleanup_stdio+0x3c>)
 800f96e:	4299      	cmp	r1, r3
 800f970:	d004      	beq.n	800f97c <cleanup_stdio+0x30>
 800f972:	4620      	mov	r0, r4
 800f974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f978:	f002 b9e6 	b.w	8011d48 <_fflush_r>
 800f97c:	bd10      	pop	{r4, pc}
 800f97e:	bf00      	nop
 800f980:	2000491c 	.word	0x2000491c
 800f984:	20004984 	.word	0x20004984
 800f988:	200049ec 	.word	0x200049ec

0800f98c <global_stdio_init.part.0>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	4b0b      	ldr	r3, [pc, #44]	; (800f9bc <global_stdio_init.part.0+0x30>)
 800f990:	4c0b      	ldr	r4, [pc, #44]	; (800f9c0 <global_stdio_init.part.0+0x34>)
 800f992:	4a0c      	ldr	r2, [pc, #48]	; (800f9c4 <global_stdio_init.part.0+0x38>)
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	4620      	mov	r0, r4
 800f998:	2200      	movs	r2, #0
 800f99a:	2104      	movs	r1, #4
 800f99c:	f7ff ff94 	bl	800f8c8 <std>
 800f9a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	2109      	movs	r1, #9
 800f9a8:	f7ff ff8e 	bl	800f8c8 <std>
 800f9ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b6:	2112      	movs	r1, #18
 800f9b8:	f7ff bf86 	b.w	800f8c8 <std>
 800f9bc:	20004a54 	.word	0x20004a54
 800f9c0:	2000491c 	.word	0x2000491c
 800f9c4:	0800f935 	.word	0x0800f935

0800f9c8 <__sfp_lock_acquire>:
 800f9c8:	4801      	ldr	r0, [pc, #4]	; (800f9d0 <__sfp_lock_acquire+0x8>)
 800f9ca:	f000 b9b6 	b.w	800fd3a <__retarget_lock_acquire_recursive>
 800f9ce:	bf00      	nop
 800f9d0:	20004a5d 	.word	0x20004a5d

0800f9d4 <__sfp_lock_release>:
 800f9d4:	4801      	ldr	r0, [pc, #4]	; (800f9dc <__sfp_lock_release+0x8>)
 800f9d6:	f000 b9b1 	b.w	800fd3c <__retarget_lock_release_recursive>
 800f9da:	bf00      	nop
 800f9dc:	20004a5d 	.word	0x20004a5d

0800f9e0 <__sinit>:
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	f7ff fff0 	bl	800f9c8 <__sfp_lock_acquire>
 800f9e8:	6a23      	ldr	r3, [r4, #32]
 800f9ea:	b11b      	cbz	r3, 800f9f4 <__sinit+0x14>
 800f9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9f0:	f7ff bff0 	b.w	800f9d4 <__sfp_lock_release>
 800f9f4:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <__sinit+0x28>)
 800f9f6:	6223      	str	r3, [r4, #32]
 800f9f8:	4b04      	ldr	r3, [pc, #16]	; (800fa0c <__sinit+0x2c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1f5      	bne.n	800f9ec <__sinit+0xc>
 800fa00:	f7ff ffc4 	bl	800f98c <global_stdio_init.part.0>
 800fa04:	e7f2      	b.n	800f9ec <__sinit+0xc>
 800fa06:	bf00      	nop
 800fa08:	0800f94d 	.word	0x0800f94d
 800fa0c:	20004a54 	.word	0x20004a54

0800fa10 <_fwalk_sglue>:
 800fa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa14:	4607      	mov	r7, r0
 800fa16:	4688      	mov	r8, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	2600      	movs	r6, #0
 800fa1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa20:	f1b9 0901 	subs.w	r9, r9, #1
 800fa24:	d505      	bpl.n	800fa32 <_fwalk_sglue+0x22>
 800fa26:	6824      	ldr	r4, [r4, #0]
 800fa28:	2c00      	cmp	r4, #0
 800fa2a:	d1f7      	bne.n	800fa1c <_fwalk_sglue+0xc>
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa32:	89ab      	ldrh	r3, [r5, #12]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d907      	bls.n	800fa48 <_fwalk_sglue+0x38>
 800fa38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	d003      	beq.n	800fa48 <_fwalk_sglue+0x38>
 800fa40:	4629      	mov	r1, r5
 800fa42:	4638      	mov	r0, r7
 800fa44:	47c0      	blx	r8
 800fa46:	4306      	orrs	r6, r0
 800fa48:	3568      	adds	r5, #104	; 0x68
 800fa4a:	e7e9      	b.n	800fa20 <_fwalk_sglue+0x10>

0800fa4c <siprintf>:
 800fa4c:	b40e      	push	{r1, r2, r3}
 800fa4e:	b500      	push	{lr}
 800fa50:	b09c      	sub	sp, #112	; 0x70
 800fa52:	ab1d      	add	r3, sp, #116	; 0x74
 800fa54:	9002      	str	r0, [sp, #8]
 800fa56:	9006      	str	r0, [sp, #24]
 800fa58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa5c:	4809      	ldr	r0, [pc, #36]	; (800fa84 <siprintf+0x38>)
 800fa5e:	9107      	str	r1, [sp, #28]
 800fa60:	9104      	str	r1, [sp, #16]
 800fa62:	4909      	ldr	r1, [pc, #36]	; (800fa88 <siprintf+0x3c>)
 800fa64:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa68:	9105      	str	r1, [sp, #20]
 800fa6a:	6800      	ldr	r0, [r0, #0]
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	a902      	add	r1, sp, #8
 800fa70:	f001 fcc6 	bl	8011400 <_svfiprintf_r>
 800fa74:	9b02      	ldr	r3, [sp, #8]
 800fa76:	2200      	movs	r2, #0
 800fa78:	701a      	strb	r2, [r3, #0]
 800fa7a:	b01c      	add	sp, #112	; 0x70
 800fa7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa80:	b003      	add	sp, #12
 800fa82:	4770      	bx	lr
 800fa84:	20000070 	.word	0x20000070
 800fa88:	ffff0208 	.word	0xffff0208

0800fa8c <siscanf>:
 800fa8c:	b40e      	push	{r1, r2, r3}
 800fa8e:	b510      	push	{r4, lr}
 800fa90:	b09f      	sub	sp, #124	; 0x7c
 800fa92:	ac21      	add	r4, sp, #132	; 0x84
 800fa94:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fa98:	f854 2b04 	ldr.w	r2, [r4], #4
 800fa9c:	9201      	str	r2, [sp, #4]
 800fa9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800faa2:	9004      	str	r0, [sp, #16]
 800faa4:	9008      	str	r0, [sp, #32]
 800faa6:	f7f0 fc0b 	bl	80002c0 <strlen>
 800faaa:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <siscanf+0x50>)
 800faac:	9005      	str	r0, [sp, #20]
 800faae:	9009      	str	r0, [sp, #36]	; 0x24
 800fab0:	930d      	str	r3, [sp, #52]	; 0x34
 800fab2:	480b      	ldr	r0, [pc, #44]	; (800fae0 <siscanf+0x54>)
 800fab4:	9a01      	ldr	r2, [sp, #4]
 800fab6:	6800      	ldr	r0, [r0, #0]
 800fab8:	9403      	str	r4, [sp, #12]
 800faba:	2300      	movs	r3, #0
 800fabc:	9311      	str	r3, [sp, #68]	; 0x44
 800fabe:	9316      	str	r3, [sp, #88]	; 0x58
 800fac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fac4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fac8:	a904      	add	r1, sp, #16
 800faca:	4623      	mov	r3, r4
 800facc:	f001 fdf0 	bl	80116b0 <__ssvfiscanf_r>
 800fad0:	b01f      	add	sp, #124	; 0x7c
 800fad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fad6:	b003      	add	sp, #12
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	0800fb07 	.word	0x0800fb07
 800fae0:	20000070 	.word	0x20000070

0800fae4 <__sread>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	460c      	mov	r4, r1
 800fae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faec:	f000 f8d6 	bl	800fc9c <_read_r>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	bfab      	itete	ge
 800faf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800faf6:	89a3      	ldrhlt	r3, [r4, #12]
 800faf8:	181b      	addge	r3, r3, r0
 800fafa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fafe:	bfac      	ite	ge
 800fb00:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb02:	81a3      	strhlt	r3, [r4, #12]
 800fb04:	bd10      	pop	{r4, pc}

0800fb06 <__seofread>:
 800fb06:	2000      	movs	r0, #0
 800fb08:	4770      	bx	lr

0800fb0a <__swrite>:
 800fb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0e:	461f      	mov	r7, r3
 800fb10:	898b      	ldrh	r3, [r1, #12]
 800fb12:	05db      	lsls	r3, r3, #23
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	4616      	mov	r6, r2
 800fb1a:	d505      	bpl.n	800fb28 <__swrite+0x1e>
 800fb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb20:	2302      	movs	r3, #2
 800fb22:	2200      	movs	r2, #0
 800fb24:	f000 f8a8 	bl	800fc78 <_lseek_r>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb32:	81a3      	strh	r3, [r4, #12]
 800fb34:	4632      	mov	r2, r6
 800fb36:	463b      	mov	r3, r7
 800fb38:	4628      	mov	r0, r5
 800fb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3e:	f000 b8bf 	b.w	800fcc0 <_write_r>

0800fb42 <__sseek>:
 800fb42:	b510      	push	{r4, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4a:	f000 f895 	bl	800fc78 <_lseek_r>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	89a3      	ldrh	r3, [r4, #12]
 800fb52:	bf15      	itete	ne
 800fb54:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb5e:	81a3      	strheq	r3, [r4, #12]
 800fb60:	bf18      	it	ne
 800fb62:	81a3      	strhne	r3, [r4, #12]
 800fb64:	bd10      	pop	{r4, pc}

0800fb66 <__sclose>:
 800fb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb6a:	f000 b81f 	b.w	800fbac <_close_r>

0800fb6e <memset>:
 800fb6e:	4402      	add	r2, r0
 800fb70:	4603      	mov	r3, r0
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d100      	bne.n	800fb78 <memset+0xa>
 800fb76:	4770      	bx	lr
 800fb78:	f803 1b01 	strb.w	r1, [r3], #1
 800fb7c:	e7f9      	b.n	800fb72 <memset+0x4>

0800fb7e <strncmp>:
 800fb7e:	b510      	push	{r4, lr}
 800fb80:	b16a      	cbz	r2, 800fb9e <strncmp+0x20>
 800fb82:	3901      	subs	r1, #1
 800fb84:	1884      	adds	r4, r0, r2
 800fb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d103      	bne.n	800fb9a <strncmp+0x1c>
 800fb92:	42a0      	cmp	r0, r4
 800fb94:	d001      	beq.n	800fb9a <strncmp+0x1c>
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	d1f5      	bne.n	800fb86 <strncmp+0x8>
 800fb9a:	1ad0      	subs	r0, r2, r3
 800fb9c:	bd10      	pop	{r4, pc}
 800fb9e:	4610      	mov	r0, r2
 800fba0:	e7fc      	b.n	800fb9c <strncmp+0x1e>
	...

0800fba4 <_localeconv_r>:
 800fba4:	4800      	ldr	r0, [pc, #0]	; (800fba8 <_localeconv_r+0x4>)
 800fba6:	4770      	bx	lr
 800fba8:	20000164 	.word	0x20000164

0800fbac <_close_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4d06      	ldr	r5, [pc, #24]	; (800fbc8 <_close_r+0x1c>)
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	602b      	str	r3, [r5, #0]
 800fbb8:	f7f3 fee5 	bl	8003986 <_close>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d102      	bne.n	800fbc6 <_close_r+0x1a>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	b103      	cbz	r3, 800fbc6 <_close_r+0x1a>
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}
 800fbc8:	20004a58 	.word	0x20004a58

0800fbcc <_reclaim_reent>:
 800fbcc:	4b29      	ldr	r3, [pc, #164]	; (800fc74 <_reclaim_reent+0xa8>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4283      	cmp	r3, r0
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	d04b      	beq.n	800fc70 <_reclaim_reent+0xa4>
 800fbd8:	69c3      	ldr	r3, [r0, #28]
 800fbda:	b143      	cbz	r3, 800fbee <_reclaim_reent+0x22>
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d144      	bne.n	800fc6c <_reclaim_reent+0xa0>
 800fbe2:	69e3      	ldr	r3, [r4, #28]
 800fbe4:	6819      	ldr	r1, [r3, #0]
 800fbe6:	b111      	cbz	r1, 800fbee <_reclaim_reent+0x22>
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 ff33 	bl	8010a54 <_free_r>
 800fbee:	6961      	ldr	r1, [r4, #20]
 800fbf0:	b111      	cbz	r1, 800fbf8 <_reclaim_reent+0x2c>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f000 ff2e 	bl	8010a54 <_free_r>
 800fbf8:	69e1      	ldr	r1, [r4, #28]
 800fbfa:	b111      	cbz	r1, 800fc02 <_reclaim_reent+0x36>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 ff29 	bl	8010a54 <_free_r>
 800fc02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc04:	b111      	cbz	r1, 800fc0c <_reclaim_reent+0x40>
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 ff24 	bl	8010a54 <_free_r>
 800fc0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc0e:	b111      	cbz	r1, 800fc16 <_reclaim_reent+0x4a>
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 ff1f 	bl	8010a54 <_free_r>
 800fc16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fc18:	b111      	cbz	r1, 800fc20 <_reclaim_reent+0x54>
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f000 ff1a 	bl	8010a54 <_free_r>
 800fc20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fc22:	b111      	cbz	r1, 800fc2a <_reclaim_reent+0x5e>
 800fc24:	4620      	mov	r0, r4
 800fc26:	f000 ff15 	bl	8010a54 <_free_r>
 800fc2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fc2c:	b111      	cbz	r1, 800fc34 <_reclaim_reent+0x68>
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 ff10 	bl	8010a54 <_free_r>
 800fc34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fc36:	b111      	cbz	r1, 800fc3e <_reclaim_reent+0x72>
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f000 ff0b 	bl	8010a54 <_free_r>
 800fc3e:	6a23      	ldr	r3, [r4, #32]
 800fc40:	b1b3      	cbz	r3, 800fc70 <_reclaim_reent+0xa4>
 800fc42:	4620      	mov	r0, r4
 800fc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc48:	4718      	bx	r3
 800fc4a:	5949      	ldr	r1, [r1, r5]
 800fc4c:	b941      	cbnz	r1, 800fc60 <_reclaim_reent+0x94>
 800fc4e:	3504      	adds	r5, #4
 800fc50:	69e3      	ldr	r3, [r4, #28]
 800fc52:	2d80      	cmp	r5, #128	; 0x80
 800fc54:	68d9      	ldr	r1, [r3, #12]
 800fc56:	d1f8      	bne.n	800fc4a <_reclaim_reent+0x7e>
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f000 fefb 	bl	8010a54 <_free_r>
 800fc5e:	e7c0      	b.n	800fbe2 <_reclaim_reent+0x16>
 800fc60:	680e      	ldr	r6, [r1, #0]
 800fc62:	4620      	mov	r0, r4
 800fc64:	f000 fef6 	bl	8010a54 <_free_r>
 800fc68:	4631      	mov	r1, r6
 800fc6a:	e7ef      	b.n	800fc4c <_reclaim_reent+0x80>
 800fc6c:	2500      	movs	r5, #0
 800fc6e:	e7ef      	b.n	800fc50 <_reclaim_reent+0x84>
 800fc70:	bd70      	pop	{r4, r5, r6, pc}
 800fc72:	bf00      	nop
 800fc74:	20000070 	.word	0x20000070

0800fc78 <_lseek_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4d07      	ldr	r5, [pc, #28]	; (800fc98 <_lseek_r+0x20>)
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	4608      	mov	r0, r1
 800fc80:	4611      	mov	r1, r2
 800fc82:	2200      	movs	r2, #0
 800fc84:	602a      	str	r2, [r5, #0]
 800fc86:	461a      	mov	r2, r3
 800fc88:	f7f3 fea4 	bl	80039d4 <_lseek>
 800fc8c:	1c43      	adds	r3, r0, #1
 800fc8e:	d102      	bne.n	800fc96 <_lseek_r+0x1e>
 800fc90:	682b      	ldr	r3, [r5, #0]
 800fc92:	b103      	cbz	r3, 800fc96 <_lseek_r+0x1e>
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	bd38      	pop	{r3, r4, r5, pc}
 800fc98:	20004a58 	.word	0x20004a58

0800fc9c <_read_r>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	4d07      	ldr	r5, [pc, #28]	; (800fcbc <_read_r+0x20>)
 800fca0:	4604      	mov	r4, r0
 800fca2:	4608      	mov	r0, r1
 800fca4:	4611      	mov	r1, r2
 800fca6:	2200      	movs	r2, #0
 800fca8:	602a      	str	r2, [r5, #0]
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f7f3 fe32 	bl	8003914 <_read>
 800fcb0:	1c43      	adds	r3, r0, #1
 800fcb2:	d102      	bne.n	800fcba <_read_r+0x1e>
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	b103      	cbz	r3, 800fcba <_read_r+0x1e>
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	bd38      	pop	{r3, r4, r5, pc}
 800fcbc:	20004a58 	.word	0x20004a58

0800fcc0 <_write_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <_write_r+0x20>)
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	4611      	mov	r1, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	602a      	str	r2, [r5, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	f7f3 fe3d 	bl	800394e <_write>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_write_r+0x1e>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_write_r+0x1e>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	20004a58 	.word	0x20004a58

0800fce4 <__errno>:
 800fce4:	4b01      	ldr	r3, [pc, #4]	; (800fcec <__errno+0x8>)
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	20000070 	.word	0x20000070

0800fcf0 <__libc_init_array>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4d0d      	ldr	r5, [pc, #52]	; (800fd28 <__libc_init_array+0x38>)
 800fcf4:	4c0d      	ldr	r4, [pc, #52]	; (800fd2c <__libc_init_array+0x3c>)
 800fcf6:	1b64      	subs	r4, r4, r5
 800fcf8:	10a4      	asrs	r4, r4, #2
 800fcfa:	2600      	movs	r6, #0
 800fcfc:	42a6      	cmp	r6, r4
 800fcfe:	d109      	bne.n	800fd14 <__libc_init_array+0x24>
 800fd00:	4d0b      	ldr	r5, [pc, #44]	; (800fd30 <__libc_init_array+0x40>)
 800fd02:	4c0c      	ldr	r4, [pc, #48]	; (800fd34 <__libc_init_array+0x44>)
 800fd04:	f003 fddc 	bl	80138c0 <_init>
 800fd08:	1b64      	subs	r4, r4, r5
 800fd0a:	10a4      	asrs	r4, r4, #2
 800fd0c:	2600      	movs	r6, #0
 800fd0e:	42a6      	cmp	r6, r4
 800fd10:	d105      	bne.n	800fd1e <__libc_init_array+0x2e>
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd18:	4798      	blx	r3
 800fd1a:	3601      	adds	r6, #1
 800fd1c:	e7ee      	b.n	800fcfc <__libc_init_array+0xc>
 800fd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd22:	4798      	blx	r3
 800fd24:	3601      	adds	r6, #1
 800fd26:	e7f2      	b.n	800fd0e <__libc_init_array+0x1e>
 800fd28:	080141c0 	.word	0x080141c0
 800fd2c:	080141c0 	.word	0x080141c0
 800fd30:	080141c0 	.word	0x080141c0
 800fd34:	080141c4 	.word	0x080141c4

0800fd38 <__retarget_lock_init_recursive>:
 800fd38:	4770      	bx	lr

0800fd3a <__retarget_lock_acquire_recursive>:
 800fd3a:	4770      	bx	lr

0800fd3c <__retarget_lock_release_recursive>:
 800fd3c:	4770      	bx	lr

0800fd3e <memcpy>:
 800fd3e:	440a      	add	r2, r1
 800fd40:	4291      	cmp	r1, r2
 800fd42:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd46:	d100      	bne.n	800fd4a <memcpy+0xc>
 800fd48:	4770      	bx	lr
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd54:	4291      	cmp	r1, r2
 800fd56:	d1f9      	bne.n	800fd4c <memcpy+0xe>
 800fd58:	bd10      	pop	{r4, pc}

0800fd5a <quorem>:
 800fd5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5e:	6903      	ldr	r3, [r0, #16]
 800fd60:	690c      	ldr	r4, [r1, #16]
 800fd62:	42a3      	cmp	r3, r4
 800fd64:	4607      	mov	r7, r0
 800fd66:	db7e      	blt.n	800fe66 <quorem+0x10c>
 800fd68:	3c01      	subs	r4, #1
 800fd6a:	f101 0814 	add.w	r8, r1, #20
 800fd6e:	f100 0514 	add.w	r5, r0, #20
 800fd72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd80:	3301      	adds	r3, #1
 800fd82:	429a      	cmp	r2, r3
 800fd84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd90:	d331      	bcc.n	800fdf6 <quorem+0x9c>
 800fd92:	f04f 0e00 	mov.w	lr, #0
 800fd96:	4640      	mov	r0, r8
 800fd98:	46ac      	mov	ip, r5
 800fd9a:	46f2      	mov	sl, lr
 800fd9c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fda0:	b293      	uxth	r3, r2
 800fda2:	fb06 e303 	mla	r3, r6, r3, lr
 800fda6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdaa:	0c1a      	lsrs	r2, r3, #16
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	ebaa 0303 	sub.w	r3, sl, r3
 800fdb2:	f8dc a000 	ldr.w	sl, [ip]
 800fdb6:	fa13 f38a 	uxtah	r3, r3, sl
 800fdba:	fb06 220e 	mla	r2, r6, lr, r2
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	9b00      	ldr	r3, [sp, #0]
 800fdc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fdc6:	b292      	uxth	r2, r2
 800fdc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fdcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdd0:	f8bd 3000 	ldrh.w	r3, [sp]
 800fdd4:	4581      	cmp	r9, r0
 800fdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdda:	f84c 3b04 	str.w	r3, [ip], #4
 800fdde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fde2:	d2db      	bcs.n	800fd9c <quorem+0x42>
 800fde4:	f855 300b 	ldr.w	r3, [r5, fp]
 800fde8:	b92b      	cbnz	r3, 800fdf6 <quorem+0x9c>
 800fdea:	9b01      	ldr	r3, [sp, #4]
 800fdec:	3b04      	subs	r3, #4
 800fdee:	429d      	cmp	r5, r3
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	d32c      	bcc.n	800fe4e <quorem+0xf4>
 800fdf4:	613c      	str	r4, [r7, #16]
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f001 f9a8 	bl	801114c <__mcmp>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	db22      	blt.n	800fe46 <quorem+0xec>
 800fe00:	3601      	adds	r6, #1
 800fe02:	4629      	mov	r1, r5
 800fe04:	2000      	movs	r0, #0
 800fe06:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe0a:	f8d1 c000 	ldr.w	ip, [r1]
 800fe0e:	b293      	uxth	r3, r2
 800fe10:	1ac3      	subs	r3, r0, r3
 800fe12:	0c12      	lsrs	r2, r2, #16
 800fe14:	fa13 f38c 	uxtah	r3, r3, ip
 800fe18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fe1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe26:	45c1      	cmp	r9, r8
 800fe28:	f841 3b04 	str.w	r3, [r1], #4
 800fe2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe30:	d2e9      	bcs.n	800fe06 <quorem+0xac>
 800fe32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe3a:	b922      	cbnz	r2, 800fe46 <quorem+0xec>
 800fe3c:	3b04      	subs	r3, #4
 800fe3e:	429d      	cmp	r5, r3
 800fe40:	461a      	mov	r2, r3
 800fe42:	d30a      	bcc.n	800fe5a <quorem+0x100>
 800fe44:	613c      	str	r4, [r7, #16]
 800fe46:	4630      	mov	r0, r6
 800fe48:	b003      	add	sp, #12
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	6812      	ldr	r2, [r2, #0]
 800fe50:	3b04      	subs	r3, #4
 800fe52:	2a00      	cmp	r2, #0
 800fe54:	d1ce      	bne.n	800fdf4 <quorem+0x9a>
 800fe56:	3c01      	subs	r4, #1
 800fe58:	e7c9      	b.n	800fdee <quorem+0x94>
 800fe5a:	6812      	ldr	r2, [r2, #0]
 800fe5c:	3b04      	subs	r3, #4
 800fe5e:	2a00      	cmp	r2, #0
 800fe60:	d1f0      	bne.n	800fe44 <quorem+0xea>
 800fe62:	3c01      	subs	r4, #1
 800fe64:	e7eb      	b.n	800fe3e <quorem+0xe4>
 800fe66:	2000      	movs	r0, #0
 800fe68:	e7ee      	b.n	800fe48 <quorem+0xee>
 800fe6a:	0000      	movs	r0, r0
 800fe6c:	0000      	movs	r0, r0
	...

0800fe70 <_dtoa_r>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	ed2d 8b04 	vpush	{d8-d9}
 800fe78:	69c5      	ldr	r5, [r0, #28]
 800fe7a:	b093      	sub	sp, #76	; 0x4c
 800fe7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fe80:	ec57 6b10 	vmov	r6, r7, d0
 800fe84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe88:	9107      	str	r1, [sp, #28]
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	920a      	str	r2, [sp, #40]	; 0x28
 800fe8e:	930d      	str	r3, [sp, #52]	; 0x34
 800fe90:	b975      	cbnz	r5, 800feb0 <_dtoa_r+0x40>
 800fe92:	2010      	movs	r0, #16
 800fe94:	f000 fe2a 	bl	8010aec <malloc>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	61e0      	str	r0, [r4, #28]
 800fe9c:	b920      	cbnz	r0, 800fea8 <_dtoa_r+0x38>
 800fe9e:	4bae      	ldr	r3, [pc, #696]	; (8010158 <_dtoa_r+0x2e8>)
 800fea0:	21ef      	movs	r1, #239	; 0xef
 800fea2:	48ae      	ldr	r0, [pc, #696]	; (801015c <_dtoa_r+0x2ec>)
 800fea4:	f002 f816 	bl	8011ed4 <__assert_func>
 800fea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800feac:	6005      	str	r5, [r0, #0]
 800feae:	60c5      	str	r5, [r0, #12]
 800feb0:	69e3      	ldr	r3, [r4, #28]
 800feb2:	6819      	ldr	r1, [r3, #0]
 800feb4:	b151      	cbz	r1, 800fecc <_dtoa_r+0x5c>
 800feb6:	685a      	ldr	r2, [r3, #4]
 800feb8:	604a      	str	r2, [r1, #4]
 800feba:	2301      	movs	r3, #1
 800febc:	4093      	lsls	r3, r2
 800febe:	608b      	str	r3, [r1, #8]
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 ff07 	bl	8010cd4 <_Bfree>
 800fec6:	69e3      	ldr	r3, [r4, #28]
 800fec8:	2200      	movs	r2, #0
 800feca:	601a      	str	r2, [r3, #0]
 800fecc:	1e3b      	subs	r3, r7, #0
 800fece:	bfbb      	ittet	lt
 800fed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fed4:	9303      	strlt	r3, [sp, #12]
 800fed6:	2300      	movge	r3, #0
 800fed8:	2201      	movlt	r2, #1
 800feda:	bfac      	ite	ge
 800fedc:	f8c8 3000 	strge.w	r3, [r8]
 800fee0:	f8c8 2000 	strlt.w	r2, [r8]
 800fee4:	4b9e      	ldr	r3, [pc, #632]	; (8010160 <_dtoa_r+0x2f0>)
 800fee6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800feea:	ea33 0308 	bics.w	r3, r3, r8
 800feee:	d11b      	bne.n	800ff28 <_dtoa_r+0xb8>
 800fef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fef2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fefc:	4333      	orrs	r3, r6
 800fefe:	f000 8593 	beq.w	8010a28 <_dtoa_r+0xbb8>
 800ff02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff04:	b963      	cbnz	r3, 800ff20 <_dtoa_r+0xb0>
 800ff06:	4b97      	ldr	r3, [pc, #604]	; (8010164 <_dtoa_r+0x2f4>)
 800ff08:	e027      	b.n	800ff5a <_dtoa_r+0xea>
 800ff0a:	4b97      	ldr	r3, [pc, #604]	; (8010168 <_dtoa_r+0x2f8>)
 800ff0c:	9300      	str	r3, [sp, #0]
 800ff0e:	3308      	adds	r3, #8
 800ff10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff12:	6013      	str	r3, [r2, #0]
 800ff14:	9800      	ldr	r0, [sp, #0]
 800ff16:	b013      	add	sp, #76	; 0x4c
 800ff18:	ecbd 8b04 	vpop	{d8-d9}
 800ff1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff20:	4b90      	ldr	r3, [pc, #576]	; (8010164 <_dtoa_r+0x2f4>)
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	3303      	adds	r3, #3
 800ff26:	e7f3      	b.n	800ff10 <_dtoa_r+0xa0>
 800ff28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	ec51 0b17 	vmov	r0, r1, d7
 800ff32:	eeb0 8a47 	vmov.f32	s16, s14
 800ff36:	eef0 8a67 	vmov.f32	s17, s15
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f7f0 fdec 	bl	8000b18 <__aeabi_dcmpeq>
 800ff40:	4681      	mov	r9, r0
 800ff42:	b160      	cbz	r0, 800ff5e <_dtoa_r+0xee>
 800ff44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff46:	2301      	movs	r3, #1
 800ff48:	6013      	str	r3, [r2, #0]
 800ff4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 8568 	beq.w	8010a22 <_dtoa_r+0xbb2>
 800ff52:	4b86      	ldr	r3, [pc, #536]	; (801016c <_dtoa_r+0x2fc>)
 800ff54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	e7da      	b.n	800ff14 <_dtoa_r+0xa4>
 800ff5e:	aa10      	add	r2, sp, #64	; 0x40
 800ff60:	a911      	add	r1, sp, #68	; 0x44
 800ff62:	4620      	mov	r0, r4
 800ff64:	eeb0 0a48 	vmov.f32	s0, s16
 800ff68:	eef0 0a68 	vmov.f32	s1, s17
 800ff6c:	f001 f994 	bl	8011298 <__d2b>
 800ff70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ff74:	4682      	mov	sl, r0
 800ff76:	2d00      	cmp	r5, #0
 800ff78:	d07f      	beq.n	801007a <_dtoa_r+0x20a>
 800ff7a:	ee18 3a90 	vmov	r3, s17
 800ff7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ff86:	ec51 0b18 	vmov	r0, r1, d8
 800ff8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ff8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ff96:	4619      	mov	r1, r3
 800ff98:	2200      	movs	r2, #0
 800ff9a:	4b75      	ldr	r3, [pc, #468]	; (8010170 <_dtoa_r+0x300>)
 800ff9c:	f7f0 f99c 	bl	80002d8 <__aeabi_dsub>
 800ffa0:	a367      	add	r3, pc, #412	; (adr r3, 8010140 <_dtoa_r+0x2d0>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 fb4f 	bl	8000648 <__aeabi_dmul>
 800ffaa:	a367      	add	r3, pc, #412	; (adr r3, 8010148 <_dtoa_r+0x2d8>)
 800ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb0:	f7f0 f994 	bl	80002dc <__adddf3>
 800ffb4:	4606      	mov	r6, r0
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	460f      	mov	r7, r1
 800ffba:	f7f0 fadb 	bl	8000574 <__aeabi_i2d>
 800ffbe:	a364      	add	r3, pc, #400	; (adr r3, 8010150 <_dtoa_r+0x2e0>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	f7f0 fb40 	bl	8000648 <__aeabi_dmul>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4630      	mov	r0, r6
 800ffce:	4639      	mov	r1, r7
 800ffd0:	f7f0 f984 	bl	80002dc <__adddf3>
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	f7f0 fde6 	bl	8000ba8 <__aeabi_d2iz>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	4683      	mov	fp, r0
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	f7f0 fda1 	bl	8000b2c <__aeabi_dcmplt>
 800ffea:	b148      	cbz	r0, 8010000 <_dtoa_r+0x190>
 800ffec:	4658      	mov	r0, fp
 800ffee:	f7f0 fac1 	bl	8000574 <__aeabi_i2d>
 800fff2:	4632      	mov	r2, r6
 800fff4:	463b      	mov	r3, r7
 800fff6:	f7f0 fd8f 	bl	8000b18 <__aeabi_dcmpeq>
 800fffa:	b908      	cbnz	r0, 8010000 <_dtoa_r+0x190>
 800fffc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010000:	f1bb 0f16 	cmp.w	fp, #22
 8010004:	d857      	bhi.n	80100b6 <_dtoa_r+0x246>
 8010006:	4b5b      	ldr	r3, [pc, #364]	; (8010174 <_dtoa_r+0x304>)
 8010008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801000c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010010:	ec51 0b18 	vmov	r0, r1, d8
 8010014:	f7f0 fd8a 	bl	8000b2c <__aeabi_dcmplt>
 8010018:	2800      	cmp	r0, #0
 801001a:	d04e      	beq.n	80100ba <_dtoa_r+0x24a>
 801001c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010020:	2300      	movs	r3, #0
 8010022:	930c      	str	r3, [sp, #48]	; 0x30
 8010024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010026:	1b5b      	subs	r3, r3, r5
 8010028:	1e5a      	subs	r2, r3, #1
 801002a:	bf45      	ittet	mi
 801002c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010030:	9305      	strmi	r3, [sp, #20]
 8010032:	2300      	movpl	r3, #0
 8010034:	2300      	movmi	r3, #0
 8010036:	9206      	str	r2, [sp, #24]
 8010038:	bf54      	ite	pl
 801003a:	9305      	strpl	r3, [sp, #20]
 801003c:	9306      	strmi	r3, [sp, #24]
 801003e:	f1bb 0f00 	cmp.w	fp, #0
 8010042:	db3c      	blt.n	80100be <_dtoa_r+0x24e>
 8010044:	9b06      	ldr	r3, [sp, #24]
 8010046:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801004a:	445b      	add	r3, fp
 801004c:	9306      	str	r3, [sp, #24]
 801004e:	2300      	movs	r3, #0
 8010050:	9308      	str	r3, [sp, #32]
 8010052:	9b07      	ldr	r3, [sp, #28]
 8010054:	2b09      	cmp	r3, #9
 8010056:	d868      	bhi.n	801012a <_dtoa_r+0x2ba>
 8010058:	2b05      	cmp	r3, #5
 801005a:	bfc4      	itt	gt
 801005c:	3b04      	subgt	r3, #4
 801005e:	9307      	strgt	r3, [sp, #28]
 8010060:	9b07      	ldr	r3, [sp, #28]
 8010062:	f1a3 0302 	sub.w	r3, r3, #2
 8010066:	bfcc      	ite	gt
 8010068:	2500      	movgt	r5, #0
 801006a:	2501      	movle	r5, #1
 801006c:	2b03      	cmp	r3, #3
 801006e:	f200 8085 	bhi.w	801017c <_dtoa_r+0x30c>
 8010072:	e8df f003 	tbb	[pc, r3]
 8010076:	3b2e      	.short	0x3b2e
 8010078:	5839      	.short	0x5839
 801007a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801007e:	441d      	add	r5, r3
 8010080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010084:	2b20      	cmp	r3, #32
 8010086:	bfc1      	itttt	gt
 8010088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801008c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010090:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010094:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010098:	bfd6      	itet	le
 801009a:	f1c3 0320 	rsble	r3, r3, #32
 801009e:	ea48 0003 	orrgt.w	r0, r8, r3
 80100a2:	fa06 f003 	lslle.w	r0, r6, r3
 80100a6:	f7f0 fa55 	bl	8000554 <__aeabi_ui2d>
 80100aa:	2201      	movs	r2, #1
 80100ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80100b0:	3d01      	subs	r5, #1
 80100b2:	920e      	str	r2, [sp, #56]	; 0x38
 80100b4:	e76f      	b.n	800ff96 <_dtoa_r+0x126>
 80100b6:	2301      	movs	r3, #1
 80100b8:	e7b3      	b.n	8010022 <_dtoa_r+0x1b2>
 80100ba:	900c      	str	r0, [sp, #48]	; 0x30
 80100bc:	e7b2      	b.n	8010024 <_dtoa_r+0x1b4>
 80100be:	9b05      	ldr	r3, [sp, #20]
 80100c0:	eba3 030b 	sub.w	r3, r3, fp
 80100c4:	9305      	str	r3, [sp, #20]
 80100c6:	f1cb 0300 	rsb	r3, fp, #0
 80100ca:	9308      	str	r3, [sp, #32]
 80100cc:	2300      	movs	r3, #0
 80100ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80100d0:	e7bf      	b.n	8010052 <_dtoa_r+0x1e2>
 80100d2:	2300      	movs	r3, #0
 80100d4:	9309      	str	r3, [sp, #36]	; 0x24
 80100d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100d8:	2b00      	cmp	r3, #0
 80100da:	dc52      	bgt.n	8010182 <_dtoa_r+0x312>
 80100dc:	2301      	movs	r3, #1
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	9304      	str	r3, [sp, #16]
 80100e2:	461a      	mov	r2, r3
 80100e4:	920a      	str	r2, [sp, #40]	; 0x28
 80100e6:	e00b      	b.n	8010100 <_dtoa_r+0x290>
 80100e8:	2301      	movs	r3, #1
 80100ea:	e7f3      	b.n	80100d4 <_dtoa_r+0x264>
 80100ec:	2300      	movs	r3, #0
 80100ee:	9309      	str	r3, [sp, #36]	; 0x24
 80100f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f2:	445b      	add	r3, fp
 80100f4:	9301      	str	r3, [sp, #4]
 80100f6:	3301      	adds	r3, #1
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	9304      	str	r3, [sp, #16]
 80100fc:	bfb8      	it	lt
 80100fe:	2301      	movlt	r3, #1
 8010100:	69e0      	ldr	r0, [r4, #28]
 8010102:	2100      	movs	r1, #0
 8010104:	2204      	movs	r2, #4
 8010106:	f102 0614 	add.w	r6, r2, #20
 801010a:	429e      	cmp	r6, r3
 801010c:	d93d      	bls.n	801018a <_dtoa_r+0x31a>
 801010e:	6041      	str	r1, [r0, #4]
 8010110:	4620      	mov	r0, r4
 8010112:	f000 fd9f 	bl	8010c54 <_Balloc>
 8010116:	9000      	str	r0, [sp, #0]
 8010118:	2800      	cmp	r0, #0
 801011a:	d139      	bne.n	8010190 <_dtoa_r+0x320>
 801011c:	4b16      	ldr	r3, [pc, #88]	; (8010178 <_dtoa_r+0x308>)
 801011e:	4602      	mov	r2, r0
 8010120:	f240 11af 	movw	r1, #431	; 0x1af
 8010124:	e6bd      	b.n	800fea2 <_dtoa_r+0x32>
 8010126:	2301      	movs	r3, #1
 8010128:	e7e1      	b.n	80100ee <_dtoa_r+0x27e>
 801012a:	2501      	movs	r5, #1
 801012c:	2300      	movs	r3, #0
 801012e:	9307      	str	r3, [sp, #28]
 8010130:	9509      	str	r5, [sp, #36]	; 0x24
 8010132:	f04f 33ff 	mov.w	r3, #4294967295
 8010136:	9301      	str	r3, [sp, #4]
 8010138:	9304      	str	r3, [sp, #16]
 801013a:	2200      	movs	r2, #0
 801013c:	2312      	movs	r3, #18
 801013e:	e7d1      	b.n	80100e4 <_dtoa_r+0x274>
 8010140:	636f4361 	.word	0x636f4361
 8010144:	3fd287a7 	.word	0x3fd287a7
 8010148:	8b60c8b3 	.word	0x8b60c8b3
 801014c:	3fc68a28 	.word	0x3fc68a28
 8010150:	509f79fb 	.word	0x509f79fb
 8010154:	3fd34413 	.word	0x3fd34413
 8010158:	08013e03 	.word	0x08013e03
 801015c:	08013e1a 	.word	0x08013e1a
 8010160:	7ff00000 	.word	0x7ff00000
 8010164:	08013dff 	.word	0x08013dff
 8010168:	08013df6 	.word	0x08013df6
 801016c:	08014004 	.word	0x08014004
 8010170:	3ff80000 	.word	0x3ff80000
 8010174:	08013f08 	.word	0x08013f08
 8010178:	08013e72 	.word	0x08013e72
 801017c:	2301      	movs	r3, #1
 801017e:	9309      	str	r3, [sp, #36]	; 0x24
 8010180:	e7d7      	b.n	8010132 <_dtoa_r+0x2c2>
 8010182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	9304      	str	r3, [sp, #16]
 8010188:	e7ba      	b.n	8010100 <_dtoa_r+0x290>
 801018a:	3101      	adds	r1, #1
 801018c:	0052      	lsls	r2, r2, #1
 801018e:	e7ba      	b.n	8010106 <_dtoa_r+0x296>
 8010190:	69e3      	ldr	r3, [r4, #28]
 8010192:	9a00      	ldr	r2, [sp, #0]
 8010194:	601a      	str	r2, [r3, #0]
 8010196:	9b04      	ldr	r3, [sp, #16]
 8010198:	2b0e      	cmp	r3, #14
 801019a:	f200 80a8 	bhi.w	80102ee <_dtoa_r+0x47e>
 801019e:	2d00      	cmp	r5, #0
 80101a0:	f000 80a5 	beq.w	80102ee <_dtoa_r+0x47e>
 80101a4:	f1bb 0f00 	cmp.w	fp, #0
 80101a8:	dd38      	ble.n	801021c <_dtoa_r+0x3ac>
 80101aa:	4bc0      	ldr	r3, [pc, #768]	; (80104ac <_dtoa_r+0x63c>)
 80101ac:	f00b 020f 	and.w	r2, fp, #15
 80101b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80101b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80101bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80101c0:	d019      	beq.n	80101f6 <_dtoa_r+0x386>
 80101c2:	4bbb      	ldr	r3, [pc, #748]	; (80104b0 <_dtoa_r+0x640>)
 80101c4:	ec51 0b18 	vmov	r0, r1, d8
 80101c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101cc:	f7f0 fb66 	bl	800089c <__aeabi_ddiv>
 80101d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101d4:	f008 080f 	and.w	r8, r8, #15
 80101d8:	2503      	movs	r5, #3
 80101da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80104b0 <_dtoa_r+0x640>
 80101de:	f1b8 0f00 	cmp.w	r8, #0
 80101e2:	d10a      	bne.n	80101fa <_dtoa_r+0x38a>
 80101e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101e8:	4632      	mov	r2, r6
 80101ea:	463b      	mov	r3, r7
 80101ec:	f7f0 fb56 	bl	800089c <__aeabi_ddiv>
 80101f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101f4:	e02b      	b.n	801024e <_dtoa_r+0x3de>
 80101f6:	2502      	movs	r5, #2
 80101f8:	e7ef      	b.n	80101da <_dtoa_r+0x36a>
 80101fa:	f018 0f01 	tst.w	r8, #1
 80101fe:	d008      	beq.n	8010212 <_dtoa_r+0x3a2>
 8010200:	4630      	mov	r0, r6
 8010202:	4639      	mov	r1, r7
 8010204:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010208:	f7f0 fa1e 	bl	8000648 <__aeabi_dmul>
 801020c:	3501      	adds	r5, #1
 801020e:	4606      	mov	r6, r0
 8010210:	460f      	mov	r7, r1
 8010212:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010216:	f109 0908 	add.w	r9, r9, #8
 801021a:	e7e0      	b.n	80101de <_dtoa_r+0x36e>
 801021c:	f000 809f 	beq.w	801035e <_dtoa_r+0x4ee>
 8010220:	f1cb 0600 	rsb	r6, fp, #0
 8010224:	4ba1      	ldr	r3, [pc, #644]	; (80104ac <_dtoa_r+0x63c>)
 8010226:	4fa2      	ldr	r7, [pc, #648]	; (80104b0 <_dtoa_r+0x640>)
 8010228:	f006 020f 	and.w	r2, r6, #15
 801022c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	ec51 0b18 	vmov	r0, r1, d8
 8010238:	f7f0 fa06 	bl	8000648 <__aeabi_dmul>
 801023c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010240:	1136      	asrs	r6, r6, #4
 8010242:	2300      	movs	r3, #0
 8010244:	2502      	movs	r5, #2
 8010246:	2e00      	cmp	r6, #0
 8010248:	d17e      	bne.n	8010348 <_dtoa_r+0x4d8>
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1d0      	bne.n	80101f0 <_dtoa_r+0x380>
 801024e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010250:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 8084 	beq.w	8010362 <_dtoa_r+0x4f2>
 801025a:	4b96      	ldr	r3, [pc, #600]	; (80104b4 <_dtoa_r+0x644>)
 801025c:	2200      	movs	r2, #0
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 fc63 	bl	8000b2c <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	d07b      	beq.n	8010362 <_dtoa_r+0x4f2>
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d078      	beq.n	8010362 <_dtoa_r+0x4f2>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	dd39      	ble.n	80102ea <_dtoa_r+0x47a>
 8010276:	4b90      	ldr	r3, [pc, #576]	; (80104b8 <_dtoa_r+0x648>)
 8010278:	2200      	movs	r2, #0
 801027a:	4640      	mov	r0, r8
 801027c:	4649      	mov	r1, r9
 801027e:	f7f0 f9e3 	bl	8000648 <__aeabi_dmul>
 8010282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010286:	9e01      	ldr	r6, [sp, #4]
 8010288:	f10b 37ff 	add.w	r7, fp, #4294967295
 801028c:	3501      	adds	r5, #1
 801028e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010292:	4628      	mov	r0, r5
 8010294:	f7f0 f96e 	bl	8000574 <__aeabi_i2d>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	f7f0 f9d4 	bl	8000648 <__aeabi_dmul>
 80102a0:	4b86      	ldr	r3, [pc, #536]	; (80104bc <_dtoa_r+0x64c>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	f7f0 f81a 	bl	80002dc <__adddf3>
 80102a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80102ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102b0:	9303      	str	r3, [sp, #12]
 80102b2:	2e00      	cmp	r6, #0
 80102b4:	d158      	bne.n	8010368 <_dtoa_r+0x4f8>
 80102b6:	4b82      	ldr	r3, [pc, #520]	; (80104c0 <_dtoa_r+0x650>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	4640      	mov	r0, r8
 80102bc:	4649      	mov	r1, r9
 80102be:	f7f0 f80b 	bl	80002d8 <__aeabi_dsub>
 80102c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102c6:	4680      	mov	r8, r0
 80102c8:	4689      	mov	r9, r1
 80102ca:	f7f0 fc4d 	bl	8000b68 <__aeabi_dcmpgt>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f040 8296 	bne.w	8010800 <_dtoa_r+0x990>
 80102d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80102d8:	4640      	mov	r0, r8
 80102da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102de:	4649      	mov	r1, r9
 80102e0:	f7f0 fc24 	bl	8000b2c <__aeabi_dcmplt>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f040 8289 	bne.w	80107fc <_dtoa_r+0x98c>
 80102ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80102ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f2c0 814e 	blt.w	8010592 <_dtoa_r+0x722>
 80102f6:	f1bb 0f0e 	cmp.w	fp, #14
 80102fa:	f300 814a 	bgt.w	8010592 <_dtoa_r+0x722>
 80102fe:	4b6b      	ldr	r3, [pc, #428]	; (80104ac <_dtoa_r+0x63c>)
 8010300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801030a:	2b00      	cmp	r3, #0
 801030c:	f280 80dc 	bge.w	80104c8 <_dtoa_r+0x658>
 8010310:	9b04      	ldr	r3, [sp, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	f300 80d8 	bgt.w	80104c8 <_dtoa_r+0x658>
 8010318:	f040 826f 	bne.w	80107fa <_dtoa_r+0x98a>
 801031c:	4b68      	ldr	r3, [pc, #416]	; (80104c0 <_dtoa_r+0x650>)
 801031e:	2200      	movs	r2, #0
 8010320:	4640      	mov	r0, r8
 8010322:	4649      	mov	r1, r9
 8010324:	f7f0 f990 	bl	8000648 <__aeabi_dmul>
 8010328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801032c:	f7f0 fc12 	bl	8000b54 <__aeabi_dcmpge>
 8010330:	9e04      	ldr	r6, [sp, #16]
 8010332:	4637      	mov	r7, r6
 8010334:	2800      	cmp	r0, #0
 8010336:	f040 8245 	bne.w	80107c4 <_dtoa_r+0x954>
 801033a:	9d00      	ldr	r5, [sp, #0]
 801033c:	2331      	movs	r3, #49	; 0x31
 801033e:	f805 3b01 	strb.w	r3, [r5], #1
 8010342:	f10b 0b01 	add.w	fp, fp, #1
 8010346:	e241      	b.n	80107cc <_dtoa_r+0x95c>
 8010348:	07f2      	lsls	r2, r6, #31
 801034a:	d505      	bpl.n	8010358 <_dtoa_r+0x4e8>
 801034c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010350:	f7f0 f97a 	bl	8000648 <__aeabi_dmul>
 8010354:	3501      	adds	r5, #1
 8010356:	2301      	movs	r3, #1
 8010358:	1076      	asrs	r6, r6, #1
 801035a:	3708      	adds	r7, #8
 801035c:	e773      	b.n	8010246 <_dtoa_r+0x3d6>
 801035e:	2502      	movs	r5, #2
 8010360:	e775      	b.n	801024e <_dtoa_r+0x3de>
 8010362:	9e04      	ldr	r6, [sp, #16]
 8010364:	465f      	mov	r7, fp
 8010366:	e792      	b.n	801028e <_dtoa_r+0x41e>
 8010368:	9900      	ldr	r1, [sp, #0]
 801036a:	4b50      	ldr	r3, [pc, #320]	; (80104ac <_dtoa_r+0x63c>)
 801036c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010370:	4431      	add	r1, r6
 8010372:	9102      	str	r1, [sp, #8]
 8010374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010376:	eeb0 9a47 	vmov.f32	s18, s14
 801037a:	eef0 9a67 	vmov.f32	s19, s15
 801037e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010382:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010386:	2900      	cmp	r1, #0
 8010388:	d044      	beq.n	8010414 <_dtoa_r+0x5a4>
 801038a:	494e      	ldr	r1, [pc, #312]	; (80104c4 <_dtoa_r+0x654>)
 801038c:	2000      	movs	r0, #0
 801038e:	f7f0 fa85 	bl	800089c <__aeabi_ddiv>
 8010392:	ec53 2b19 	vmov	r2, r3, d9
 8010396:	f7ef ff9f 	bl	80002d8 <__aeabi_dsub>
 801039a:	9d00      	ldr	r5, [sp, #0]
 801039c:	ec41 0b19 	vmov	d9, r0, r1
 80103a0:	4649      	mov	r1, r9
 80103a2:	4640      	mov	r0, r8
 80103a4:	f7f0 fc00 	bl	8000ba8 <__aeabi_d2iz>
 80103a8:	4606      	mov	r6, r0
 80103aa:	f7f0 f8e3 	bl	8000574 <__aeabi_i2d>
 80103ae:	4602      	mov	r2, r0
 80103b0:	460b      	mov	r3, r1
 80103b2:	4640      	mov	r0, r8
 80103b4:	4649      	mov	r1, r9
 80103b6:	f7ef ff8f 	bl	80002d8 <__aeabi_dsub>
 80103ba:	3630      	adds	r6, #48	; 0x30
 80103bc:	f805 6b01 	strb.w	r6, [r5], #1
 80103c0:	ec53 2b19 	vmov	r2, r3, d9
 80103c4:	4680      	mov	r8, r0
 80103c6:	4689      	mov	r9, r1
 80103c8:	f7f0 fbb0 	bl	8000b2c <__aeabi_dcmplt>
 80103cc:	2800      	cmp	r0, #0
 80103ce:	d164      	bne.n	801049a <_dtoa_r+0x62a>
 80103d0:	4642      	mov	r2, r8
 80103d2:	464b      	mov	r3, r9
 80103d4:	4937      	ldr	r1, [pc, #220]	; (80104b4 <_dtoa_r+0x644>)
 80103d6:	2000      	movs	r0, #0
 80103d8:	f7ef ff7e 	bl	80002d8 <__aeabi_dsub>
 80103dc:	ec53 2b19 	vmov	r2, r3, d9
 80103e0:	f7f0 fba4 	bl	8000b2c <__aeabi_dcmplt>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f040 80b6 	bne.w	8010556 <_dtoa_r+0x6e6>
 80103ea:	9b02      	ldr	r3, [sp, #8]
 80103ec:	429d      	cmp	r5, r3
 80103ee:	f43f af7c 	beq.w	80102ea <_dtoa_r+0x47a>
 80103f2:	4b31      	ldr	r3, [pc, #196]	; (80104b8 <_dtoa_r+0x648>)
 80103f4:	ec51 0b19 	vmov	r0, r1, d9
 80103f8:	2200      	movs	r2, #0
 80103fa:	f7f0 f925 	bl	8000648 <__aeabi_dmul>
 80103fe:	4b2e      	ldr	r3, [pc, #184]	; (80104b8 <_dtoa_r+0x648>)
 8010400:	ec41 0b19 	vmov	d9, r0, r1
 8010404:	2200      	movs	r2, #0
 8010406:	4640      	mov	r0, r8
 8010408:	4649      	mov	r1, r9
 801040a:	f7f0 f91d 	bl	8000648 <__aeabi_dmul>
 801040e:	4680      	mov	r8, r0
 8010410:	4689      	mov	r9, r1
 8010412:	e7c5      	b.n	80103a0 <_dtoa_r+0x530>
 8010414:	ec51 0b17 	vmov	r0, r1, d7
 8010418:	f7f0 f916 	bl	8000648 <__aeabi_dmul>
 801041c:	9b02      	ldr	r3, [sp, #8]
 801041e:	9d00      	ldr	r5, [sp, #0]
 8010420:	930f      	str	r3, [sp, #60]	; 0x3c
 8010422:	ec41 0b19 	vmov	d9, r0, r1
 8010426:	4649      	mov	r1, r9
 8010428:	4640      	mov	r0, r8
 801042a:	f7f0 fbbd 	bl	8000ba8 <__aeabi_d2iz>
 801042e:	4606      	mov	r6, r0
 8010430:	f7f0 f8a0 	bl	8000574 <__aeabi_i2d>
 8010434:	3630      	adds	r6, #48	; 0x30
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	4640      	mov	r0, r8
 801043c:	4649      	mov	r1, r9
 801043e:	f7ef ff4b 	bl	80002d8 <__aeabi_dsub>
 8010442:	f805 6b01 	strb.w	r6, [r5], #1
 8010446:	9b02      	ldr	r3, [sp, #8]
 8010448:	429d      	cmp	r5, r3
 801044a:	4680      	mov	r8, r0
 801044c:	4689      	mov	r9, r1
 801044e:	f04f 0200 	mov.w	r2, #0
 8010452:	d124      	bne.n	801049e <_dtoa_r+0x62e>
 8010454:	4b1b      	ldr	r3, [pc, #108]	; (80104c4 <_dtoa_r+0x654>)
 8010456:	ec51 0b19 	vmov	r0, r1, d9
 801045a:	f7ef ff3f 	bl	80002dc <__adddf3>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	4640      	mov	r0, r8
 8010464:	4649      	mov	r1, r9
 8010466:	f7f0 fb7f 	bl	8000b68 <__aeabi_dcmpgt>
 801046a:	2800      	cmp	r0, #0
 801046c:	d173      	bne.n	8010556 <_dtoa_r+0x6e6>
 801046e:	ec53 2b19 	vmov	r2, r3, d9
 8010472:	4914      	ldr	r1, [pc, #80]	; (80104c4 <_dtoa_r+0x654>)
 8010474:	2000      	movs	r0, #0
 8010476:	f7ef ff2f 	bl	80002d8 <__aeabi_dsub>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4640      	mov	r0, r8
 8010480:	4649      	mov	r1, r9
 8010482:	f7f0 fb53 	bl	8000b2c <__aeabi_dcmplt>
 8010486:	2800      	cmp	r0, #0
 8010488:	f43f af2f 	beq.w	80102ea <_dtoa_r+0x47a>
 801048c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801048e:	1e6b      	subs	r3, r5, #1
 8010490:	930f      	str	r3, [sp, #60]	; 0x3c
 8010492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010496:	2b30      	cmp	r3, #48	; 0x30
 8010498:	d0f8      	beq.n	801048c <_dtoa_r+0x61c>
 801049a:	46bb      	mov	fp, r7
 801049c:	e04a      	b.n	8010534 <_dtoa_r+0x6c4>
 801049e:	4b06      	ldr	r3, [pc, #24]	; (80104b8 <_dtoa_r+0x648>)
 80104a0:	f7f0 f8d2 	bl	8000648 <__aeabi_dmul>
 80104a4:	4680      	mov	r8, r0
 80104a6:	4689      	mov	r9, r1
 80104a8:	e7bd      	b.n	8010426 <_dtoa_r+0x5b6>
 80104aa:	bf00      	nop
 80104ac:	08013f08 	.word	0x08013f08
 80104b0:	08013ee0 	.word	0x08013ee0
 80104b4:	3ff00000 	.word	0x3ff00000
 80104b8:	40240000 	.word	0x40240000
 80104bc:	401c0000 	.word	0x401c0000
 80104c0:	40140000 	.word	0x40140000
 80104c4:	3fe00000 	.word	0x3fe00000
 80104c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80104cc:	9d00      	ldr	r5, [sp, #0]
 80104ce:	4642      	mov	r2, r8
 80104d0:	464b      	mov	r3, r9
 80104d2:	4630      	mov	r0, r6
 80104d4:	4639      	mov	r1, r7
 80104d6:	f7f0 f9e1 	bl	800089c <__aeabi_ddiv>
 80104da:	f7f0 fb65 	bl	8000ba8 <__aeabi_d2iz>
 80104de:	9001      	str	r0, [sp, #4]
 80104e0:	f7f0 f848 	bl	8000574 <__aeabi_i2d>
 80104e4:	4642      	mov	r2, r8
 80104e6:	464b      	mov	r3, r9
 80104e8:	f7f0 f8ae 	bl	8000648 <__aeabi_dmul>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	4630      	mov	r0, r6
 80104f2:	4639      	mov	r1, r7
 80104f4:	f7ef fef0 	bl	80002d8 <__aeabi_dsub>
 80104f8:	9e01      	ldr	r6, [sp, #4]
 80104fa:	9f04      	ldr	r7, [sp, #16]
 80104fc:	3630      	adds	r6, #48	; 0x30
 80104fe:	f805 6b01 	strb.w	r6, [r5], #1
 8010502:	9e00      	ldr	r6, [sp, #0]
 8010504:	1bae      	subs	r6, r5, r6
 8010506:	42b7      	cmp	r7, r6
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	d134      	bne.n	8010578 <_dtoa_r+0x708>
 801050e:	f7ef fee5 	bl	80002dc <__adddf3>
 8010512:	4642      	mov	r2, r8
 8010514:	464b      	mov	r3, r9
 8010516:	4606      	mov	r6, r0
 8010518:	460f      	mov	r7, r1
 801051a:	f7f0 fb25 	bl	8000b68 <__aeabi_dcmpgt>
 801051e:	b9c8      	cbnz	r0, 8010554 <_dtoa_r+0x6e4>
 8010520:	4642      	mov	r2, r8
 8010522:	464b      	mov	r3, r9
 8010524:	4630      	mov	r0, r6
 8010526:	4639      	mov	r1, r7
 8010528:	f7f0 faf6 	bl	8000b18 <__aeabi_dcmpeq>
 801052c:	b110      	cbz	r0, 8010534 <_dtoa_r+0x6c4>
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	07db      	lsls	r3, r3, #31
 8010532:	d40f      	bmi.n	8010554 <_dtoa_r+0x6e4>
 8010534:	4651      	mov	r1, sl
 8010536:	4620      	mov	r0, r4
 8010538:	f000 fbcc 	bl	8010cd4 <_Bfree>
 801053c:	2300      	movs	r3, #0
 801053e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010540:	702b      	strb	r3, [r5, #0]
 8010542:	f10b 0301 	add.w	r3, fp, #1
 8010546:	6013      	str	r3, [r2, #0]
 8010548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801054a:	2b00      	cmp	r3, #0
 801054c:	f43f ace2 	beq.w	800ff14 <_dtoa_r+0xa4>
 8010550:	601d      	str	r5, [r3, #0]
 8010552:	e4df      	b.n	800ff14 <_dtoa_r+0xa4>
 8010554:	465f      	mov	r7, fp
 8010556:	462b      	mov	r3, r5
 8010558:	461d      	mov	r5, r3
 801055a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801055e:	2a39      	cmp	r2, #57	; 0x39
 8010560:	d106      	bne.n	8010570 <_dtoa_r+0x700>
 8010562:	9a00      	ldr	r2, [sp, #0]
 8010564:	429a      	cmp	r2, r3
 8010566:	d1f7      	bne.n	8010558 <_dtoa_r+0x6e8>
 8010568:	9900      	ldr	r1, [sp, #0]
 801056a:	2230      	movs	r2, #48	; 0x30
 801056c:	3701      	adds	r7, #1
 801056e:	700a      	strb	r2, [r1, #0]
 8010570:	781a      	ldrb	r2, [r3, #0]
 8010572:	3201      	adds	r2, #1
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	e790      	b.n	801049a <_dtoa_r+0x62a>
 8010578:	4ba3      	ldr	r3, [pc, #652]	; (8010808 <_dtoa_r+0x998>)
 801057a:	2200      	movs	r2, #0
 801057c:	f7f0 f864 	bl	8000648 <__aeabi_dmul>
 8010580:	2200      	movs	r2, #0
 8010582:	2300      	movs	r3, #0
 8010584:	4606      	mov	r6, r0
 8010586:	460f      	mov	r7, r1
 8010588:	f7f0 fac6 	bl	8000b18 <__aeabi_dcmpeq>
 801058c:	2800      	cmp	r0, #0
 801058e:	d09e      	beq.n	80104ce <_dtoa_r+0x65e>
 8010590:	e7d0      	b.n	8010534 <_dtoa_r+0x6c4>
 8010592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010594:	2a00      	cmp	r2, #0
 8010596:	f000 80ca 	beq.w	801072e <_dtoa_r+0x8be>
 801059a:	9a07      	ldr	r2, [sp, #28]
 801059c:	2a01      	cmp	r2, #1
 801059e:	f300 80ad 	bgt.w	80106fc <_dtoa_r+0x88c>
 80105a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105a4:	2a00      	cmp	r2, #0
 80105a6:	f000 80a5 	beq.w	80106f4 <_dtoa_r+0x884>
 80105aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80105ae:	9e08      	ldr	r6, [sp, #32]
 80105b0:	9d05      	ldr	r5, [sp, #20]
 80105b2:	9a05      	ldr	r2, [sp, #20]
 80105b4:	441a      	add	r2, r3
 80105b6:	9205      	str	r2, [sp, #20]
 80105b8:	9a06      	ldr	r2, [sp, #24]
 80105ba:	2101      	movs	r1, #1
 80105bc:	441a      	add	r2, r3
 80105be:	4620      	mov	r0, r4
 80105c0:	9206      	str	r2, [sp, #24]
 80105c2:	f000 fc3d 	bl	8010e40 <__i2b>
 80105c6:	4607      	mov	r7, r0
 80105c8:	b165      	cbz	r5, 80105e4 <_dtoa_r+0x774>
 80105ca:	9b06      	ldr	r3, [sp, #24]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dd09      	ble.n	80105e4 <_dtoa_r+0x774>
 80105d0:	42ab      	cmp	r3, r5
 80105d2:	9a05      	ldr	r2, [sp, #20]
 80105d4:	bfa8      	it	ge
 80105d6:	462b      	movge	r3, r5
 80105d8:	1ad2      	subs	r2, r2, r3
 80105da:	9205      	str	r2, [sp, #20]
 80105dc:	9a06      	ldr	r2, [sp, #24]
 80105de:	1aed      	subs	r5, r5, r3
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	9306      	str	r3, [sp, #24]
 80105e4:	9b08      	ldr	r3, [sp, #32]
 80105e6:	b1f3      	cbz	r3, 8010626 <_dtoa_r+0x7b6>
 80105e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f000 80a3 	beq.w	8010736 <_dtoa_r+0x8c6>
 80105f0:	2e00      	cmp	r6, #0
 80105f2:	dd10      	ble.n	8010616 <_dtoa_r+0x7a6>
 80105f4:	4639      	mov	r1, r7
 80105f6:	4632      	mov	r2, r6
 80105f8:	4620      	mov	r0, r4
 80105fa:	f000 fce1 	bl	8010fc0 <__pow5mult>
 80105fe:	4652      	mov	r2, sl
 8010600:	4601      	mov	r1, r0
 8010602:	4607      	mov	r7, r0
 8010604:	4620      	mov	r0, r4
 8010606:	f000 fc31 	bl	8010e6c <__multiply>
 801060a:	4651      	mov	r1, sl
 801060c:	4680      	mov	r8, r0
 801060e:	4620      	mov	r0, r4
 8010610:	f000 fb60 	bl	8010cd4 <_Bfree>
 8010614:	46c2      	mov	sl, r8
 8010616:	9b08      	ldr	r3, [sp, #32]
 8010618:	1b9a      	subs	r2, r3, r6
 801061a:	d004      	beq.n	8010626 <_dtoa_r+0x7b6>
 801061c:	4651      	mov	r1, sl
 801061e:	4620      	mov	r0, r4
 8010620:	f000 fcce 	bl	8010fc0 <__pow5mult>
 8010624:	4682      	mov	sl, r0
 8010626:	2101      	movs	r1, #1
 8010628:	4620      	mov	r0, r4
 801062a:	f000 fc09 	bl	8010e40 <__i2b>
 801062e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010630:	2b00      	cmp	r3, #0
 8010632:	4606      	mov	r6, r0
 8010634:	f340 8081 	ble.w	801073a <_dtoa_r+0x8ca>
 8010638:	461a      	mov	r2, r3
 801063a:	4601      	mov	r1, r0
 801063c:	4620      	mov	r0, r4
 801063e:	f000 fcbf 	bl	8010fc0 <__pow5mult>
 8010642:	9b07      	ldr	r3, [sp, #28]
 8010644:	2b01      	cmp	r3, #1
 8010646:	4606      	mov	r6, r0
 8010648:	dd7a      	ble.n	8010740 <_dtoa_r+0x8d0>
 801064a:	f04f 0800 	mov.w	r8, #0
 801064e:	6933      	ldr	r3, [r6, #16]
 8010650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010654:	6918      	ldr	r0, [r3, #16]
 8010656:	f000 fba5 	bl	8010da4 <__hi0bits>
 801065a:	f1c0 0020 	rsb	r0, r0, #32
 801065e:	9b06      	ldr	r3, [sp, #24]
 8010660:	4418      	add	r0, r3
 8010662:	f010 001f 	ands.w	r0, r0, #31
 8010666:	f000 8094 	beq.w	8010792 <_dtoa_r+0x922>
 801066a:	f1c0 0320 	rsb	r3, r0, #32
 801066e:	2b04      	cmp	r3, #4
 8010670:	f340 8085 	ble.w	801077e <_dtoa_r+0x90e>
 8010674:	9b05      	ldr	r3, [sp, #20]
 8010676:	f1c0 001c 	rsb	r0, r0, #28
 801067a:	4403      	add	r3, r0
 801067c:	9305      	str	r3, [sp, #20]
 801067e:	9b06      	ldr	r3, [sp, #24]
 8010680:	4403      	add	r3, r0
 8010682:	4405      	add	r5, r0
 8010684:	9306      	str	r3, [sp, #24]
 8010686:	9b05      	ldr	r3, [sp, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	dd05      	ble.n	8010698 <_dtoa_r+0x828>
 801068c:	4651      	mov	r1, sl
 801068e:	461a      	mov	r2, r3
 8010690:	4620      	mov	r0, r4
 8010692:	f000 fcef 	bl	8011074 <__lshift>
 8010696:	4682      	mov	sl, r0
 8010698:	9b06      	ldr	r3, [sp, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	dd05      	ble.n	80106aa <_dtoa_r+0x83a>
 801069e:	4631      	mov	r1, r6
 80106a0:	461a      	mov	r2, r3
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 fce6 	bl	8011074 <__lshift>
 80106a8:	4606      	mov	r6, r0
 80106aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d072      	beq.n	8010796 <_dtoa_r+0x926>
 80106b0:	4631      	mov	r1, r6
 80106b2:	4650      	mov	r0, sl
 80106b4:	f000 fd4a 	bl	801114c <__mcmp>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	da6c      	bge.n	8010796 <_dtoa_r+0x926>
 80106bc:	2300      	movs	r3, #0
 80106be:	4651      	mov	r1, sl
 80106c0:	220a      	movs	r2, #10
 80106c2:	4620      	mov	r0, r4
 80106c4:	f000 fb28 	bl	8010d18 <__multadd>
 80106c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106ce:	4682      	mov	sl, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 81b0 	beq.w	8010a36 <_dtoa_r+0xbc6>
 80106d6:	2300      	movs	r3, #0
 80106d8:	4639      	mov	r1, r7
 80106da:	220a      	movs	r2, #10
 80106dc:	4620      	mov	r0, r4
 80106de:	f000 fb1b 	bl	8010d18 <__multadd>
 80106e2:	9b01      	ldr	r3, [sp, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	4607      	mov	r7, r0
 80106e8:	f300 8096 	bgt.w	8010818 <_dtoa_r+0x9a8>
 80106ec:	9b07      	ldr	r3, [sp, #28]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	dc59      	bgt.n	80107a6 <_dtoa_r+0x936>
 80106f2:	e091      	b.n	8010818 <_dtoa_r+0x9a8>
 80106f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106fa:	e758      	b.n	80105ae <_dtoa_r+0x73e>
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	1e5e      	subs	r6, r3, #1
 8010700:	9b08      	ldr	r3, [sp, #32]
 8010702:	42b3      	cmp	r3, r6
 8010704:	bfbf      	itttt	lt
 8010706:	9b08      	ldrlt	r3, [sp, #32]
 8010708:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801070a:	9608      	strlt	r6, [sp, #32]
 801070c:	1af3      	sublt	r3, r6, r3
 801070e:	bfb4      	ite	lt
 8010710:	18d2      	addlt	r2, r2, r3
 8010712:	1b9e      	subge	r6, r3, r6
 8010714:	9b04      	ldr	r3, [sp, #16]
 8010716:	bfbc      	itt	lt
 8010718:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801071a:	2600      	movlt	r6, #0
 801071c:	2b00      	cmp	r3, #0
 801071e:	bfb7      	itett	lt
 8010720:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010724:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010728:	1a9d      	sublt	r5, r3, r2
 801072a:	2300      	movlt	r3, #0
 801072c:	e741      	b.n	80105b2 <_dtoa_r+0x742>
 801072e:	9e08      	ldr	r6, [sp, #32]
 8010730:	9d05      	ldr	r5, [sp, #20]
 8010732:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010734:	e748      	b.n	80105c8 <_dtoa_r+0x758>
 8010736:	9a08      	ldr	r2, [sp, #32]
 8010738:	e770      	b.n	801061c <_dtoa_r+0x7ac>
 801073a:	9b07      	ldr	r3, [sp, #28]
 801073c:	2b01      	cmp	r3, #1
 801073e:	dc19      	bgt.n	8010774 <_dtoa_r+0x904>
 8010740:	9b02      	ldr	r3, [sp, #8]
 8010742:	b9bb      	cbnz	r3, 8010774 <_dtoa_r+0x904>
 8010744:	9b03      	ldr	r3, [sp, #12]
 8010746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801074a:	b99b      	cbnz	r3, 8010774 <_dtoa_r+0x904>
 801074c:	9b03      	ldr	r3, [sp, #12]
 801074e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010752:	0d1b      	lsrs	r3, r3, #20
 8010754:	051b      	lsls	r3, r3, #20
 8010756:	b183      	cbz	r3, 801077a <_dtoa_r+0x90a>
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	3301      	adds	r3, #1
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	9b06      	ldr	r3, [sp, #24]
 8010760:	3301      	adds	r3, #1
 8010762:	9306      	str	r3, [sp, #24]
 8010764:	f04f 0801 	mov.w	r8, #1
 8010768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801076a:	2b00      	cmp	r3, #0
 801076c:	f47f af6f 	bne.w	801064e <_dtoa_r+0x7de>
 8010770:	2001      	movs	r0, #1
 8010772:	e774      	b.n	801065e <_dtoa_r+0x7ee>
 8010774:	f04f 0800 	mov.w	r8, #0
 8010778:	e7f6      	b.n	8010768 <_dtoa_r+0x8f8>
 801077a:	4698      	mov	r8, r3
 801077c:	e7f4      	b.n	8010768 <_dtoa_r+0x8f8>
 801077e:	d082      	beq.n	8010686 <_dtoa_r+0x816>
 8010780:	9a05      	ldr	r2, [sp, #20]
 8010782:	331c      	adds	r3, #28
 8010784:	441a      	add	r2, r3
 8010786:	9205      	str	r2, [sp, #20]
 8010788:	9a06      	ldr	r2, [sp, #24]
 801078a:	441a      	add	r2, r3
 801078c:	441d      	add	r5, r3
 801078e:	9206      	str	r2, [sp, #24]
 8010790:	e779      	b.n	8010686 <_dtoa_r+0x816>
 8010792:	4603      	mov	r3, r0
 8010794:	e7f4      	b.n	8010780 <_dtoa_r+0x910>
 8010796:	9b04      	ldr	r3, [sp, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	dc37      	bgt.n	801080c <_dtoa_r+0x99c>
 801079c:	9b07      	ldr	r3, [sp, #28]
 801079e:	2b02      	cmp	r3, #2
 80107a0:	dd34      	ble.n	801080c <_dtoa_r+0x99c>
 80107a2:	9b04      	ldr	r3, [sp, #16]
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	b963      	cbnz	r3, 80107c4 <_dtoa_r+0x954>
 80107aa:	4631      	mov	r1, r6
 80107ac:	2205      	movs	r2, #5
 80107ae:	4620      	mov	r0, r4
 80107b0:	f000 fab2 	bl	8010d18 <__multadd>
 80107b4:	4601      	mov	r1, r0
 80107b6:	4606      	mov	r6, r0
 80107b8:	4650      	mov	r0, sl
 80107ba:	f000 fcc7 	bl	801114c <__mcmp>
 80107be:	2800      	cmp	r0, #0
 80107c0:	f73f adbb 	bgt.w	801033a <_dtoa_r+0x4ca>
 80107c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c6:	9d00      	ldr	r5, [sp, #0]
 80107c8:	ea6f 0b03 	mvn.w	fp, r3
 80107cc:	f04f 0800 	mov.w	r8, #0
 80107d0:	4631      	mov	r1, r6
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fa7e 	bl	8010cd4 <_Bfree>
 80107d8:	2f00      	cmp	r7, #0
 80107da:	f43f aeab 	beq.w	8010534 <_dtoa_r+0x6c4>
 80107de:	f1b8 0f00 	cmp.w	r8, #0
 80107e2:	d005      	beq.n	80107f0 <_dtoa_r+0x980>
 80107e4:	45b8      	cmp	r8, r7
 80107e6:	d003      	beq.n	80107f0 <_dtoa_r+0x980>
 80107e8:	4641      	mov	r1, r8
 80107ea:	4620      	mov	r0, r4
 80107ec:	f000 fa72 	bl	8010cd4 <_Bfree>
 80107f0:	4639      	mov	r1, r7
 80107f2:	4620      	mov	r0, r4
 80107f4:	f000 fa6e 	bl	8010cd4 <_Bfree>
 80107f8:	e69c      	b.n	8010534 <_dtoa_r+0x6c4>
 80107fa:	2600      	movs	r6, #0
 80107fc:	4637      	mov	r7, r6
 80107fe:	e7e1      	b.n	80107c4 <_dtoa_r+0x954>
 8010800:	46bb      	mov	fp, r7
 8010802:	4637      	mov	r7, r6
 8010804:	e599      	b.n	801033a <_dtoa_r+0x4ca>
 8010806:	bf00      	nop
 8010808:	40240000 	.word	0x40240000
 801080c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801080e:	2b00      	cmp	r3, #0
 8010810:	f000 80c8 	beq.w	80109a4 <_dtoa_r+0xb34>
 8010814:	9b04      	ldr	r3, [sp, #16]
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	2d00      	cmp	r5, #0
 801081a:	dd05      	ble.n	8010828 <_dtoa_r+0x9b8>
 801081c:	4639      	mov	r1, r7
 801081e:	462a      	mov	r2, r5
 8010820:	4620      	mov	r0, r4
 8010822:	f000 fc27 	bl	8011074 <__lshift>
 8010826:	4607      	mov	r7, r0
 8010828:	f1b8 0f00 	cmp.w	r8, #0
 801082c:	d05b      	beq.n	80108e6 <_dtoa_r+0xa76>
 801082e:	6879      	ldr	r1, [r7, #4]
 8010830:	4620      	mov	r0, r4
 8010832:	f000 fa0f 	bl	8010c54 <_Balloc>
 8010836:	4605      	mov	r5, r0
 8010838:	b928      	cbnz	r0, 8010846 <_dtoa_r+0x9d6>
 801083a:	4b83      	ldr	r3, [pc, #524]	; (8010a48 <_dtoa_r+0xbd8>)
 801083c:	4602      	mov	r2, r0
 801083e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010842:	f7ff bb2e 	b.w	800fea2 <_dtoa_r+0x32>
 8010846:	693a      	ldr	r2, [r7, #16]
 8010848:	3202      	adds	r2, #2
 801084a:	0092      	lsls	r2, r2, #2
 801084c:	f107 010c 	add.w	r1, r7, #12
 8010850:	300c      	adds	r0, #12
 8010852:	f7ff fa74 	bl	800fd3e <memcpy>
 8010856:	2201      	movs	r2, #1
 8010858:	4629      	mov	r1, r5
 801085a:	4620      	mov	r0, r4
 801085c:	f000 fc0a 	bl	8011074 <__lshift>
 8010860:	9b00      	ldr	r3, [sp, #0]
 8010862:	3301      	adds	r3, #1
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	e9dd 2300 	ldrd	r2, r3, [sp]
 801086a:	4413      	add	r3, r2
 801086c:	9308      	str	r3, [sp, #32]
 801086e:	9b02      	ldr	r3, [sp, #8]
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	46b8      	mov	r8, r7
 8010876:	9306      	str	r3, [sp, #24]
 8010878:	4607      	mov	r7, r0
 801087a:	9b04      	ldr	r3, [sp, #16]
 801087c:	4631      	mov	r1, r6
 801087e:	3b01      	subs	r3, #1
 8010880:	4650      	mov	r0, sl
 8010882:	9301      	str	r3, [sp, #4]
 8010884:	f7ff fa69 	bl	800fd5a <quorem>
 8010888:	4641      	mov	r1, r8
 801088a:	9002      	str	r0, [sp, #8]
 801088c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010890:	4650      	mov	r0, sl
 8010892:	f000 fc5b 	bl	801114c <__mcmp>
 8010896:	463a      	mov	r2, r7
 8010898:	9005      	str	r0, [sp, #20]
 801089a:	4631      	mov	r1, r6
 801089c:	4620      	mov	r0, r4
 801089e:	f000 fc71 	bl	8011184 <__mdiff>
 80108a2:	68c2      	ldr	r2, [r0, #12]
 80108a4:	4605      	mov	r5, r0
 80108a6:	bb02      	cbnz	r2, 80108ea <_dtoa_r+0xa7a>
 80108a8:	4601      	mov	r1, r0
 80108aa:	4650      	mov	r0, sl
 80108ac:	f000 fc4e 	bl	801114c <__mcmp>
 80108b0:	4602      	mov	r2, r0
 80108b2:	4629      	mov	r1, r5
 80108b4:	4620      	mov	r0, r4
 80108b6:	9209      	str	r2, [sp, #36]	; 0x24
 80108b8:	f000 fa0c 	bl	8010cd4 <_Bfree>
 80108bc:	9b07      	ldr	r3, [sp, #28]
 80108be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108c0:	9d04      	ldr	r5, [sp, #16]
 80108c2:	ea43 0102 	orr.w	r1, r3, r2
 80108c6:	9b06      	ldr	r3, [sp, #24]
 80108c8:	4319      	orrs	r1, r3
 80108ca:	d110      	bne.n	80108ee <_dtoa_r+0xa7e>
 80108cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80108d0:	d029      	beq.n	8010926 <_dtoa_r+0xab6>
 80108d2:	9b05      	ldr	r3, [sp, #20]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd02      	ble.n	80108de <_dtoa_r+0xa6e>
 80108d8:	9b02      	ldr	r3, [sp, #8]
 80108da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80108de:	9b01      	ldr	r3, [sp, #4]
 80108e0:	f883 9000 	strb.w	r9, [r3]
 80108e4:	e774      	b.n	80107d0 <_dtoa_r+0x960>
 80108e6:	4638      	mov	r0, r7
 80108e8:	e7ba      	b.n	8010860 <_dtoa_r+0x9f0>
 80108ea:	2201      	movs	r2, #1
 80108ec:	e7e1      	b.n	80108b2 <_dtoa_r+0xa42>
 80108ee:	9b05      	ldr	r3, [sp, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	db04      	blt.n	80108fe <_dtoa_r+0xa8e>
 80108f4:	9907      	ldr	r1, [sp, #28]
 80108f6:	430b      	orrs	r3, r1
 80108f8:	9906      	ldr	r1, [sp, #24]
 80108fa:	430b      	orrs	r3, r1
 80108fc:	d120      	bne.n	8010940 <_dtoa_r+0xad0>
 80108fe:	2a00      	cmp	r2, #0
 8010900:	dded      	ble.n	80108de <_dtoa_r+0xa6e>
 8010902:	4651      	mov	r1, sl
 8010904:	2201      	movs	r2, #1
 8010906:	4620      	mov	r0, r4
 8010908:	f000 fbb4 	bl	8011074 <__lshift>
 801090c:	4631      	mov	r1, r6
 801090e:	4682      	mov	sl, r0
 8010910:	f000 fc1c 	bl	801114c <__mcmp>
 8010914:	2800      	cmp	r0, #0
 8010916:	dc03      	bgt.n	8010920 <_dtoa_r+0xab0>
 8010918:	d1e1      	bne.n	80108de <_dtoa_r+0xa6e>
 801091a:	f019 0f01 	tst.w	r9, #1
 801091e:	d0de      	beq.n	80108de <_dtoa_r+0xa6e>
 8010920:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010924:	d1d8      	bne.n	80108d8 <_dtoa_r+0xa68>
 8010926:	9a01      	ldr	r2, [sp, #4]
 8010928:	2339      	movs	r3, #57	; 0x39
 801092a:	7013      	strb	r3, [r2, #0]
 801092c:	462b      	mov	r3, r5
 801092e:	461d      	mov	r5, r3
 8010930:	3b01      	subs	r3, #1
 8010932:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010936:	2a39      	cmp	r2, #57	; 0x39
 8010938:	d06c      	beq.n	8010a14 <_dtoa_r+0xba4>
 801093a:	3201      	adds	r2, #1
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	e747      	b.n	80107d0 <_dtoa_r+0x960>
 8010940:	2a00      	cmp	r2, #0
 8010942:	dd07      	ble.n	8010954 <_dtoa_r+0xae4>
 8010944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010948:	d0ed      	beq.n	8010926 <_dtoa_r+0xab6>
 801094a:	9a01      	ldr	r2, [sp, #4]
 801094c:	f109 0301 	add.w	r3, r9, #1
 8010950:	7013      	strb	r3, [r2, #0]
 8010952:	e73d      	b.n	80107d0 <_dtoa_r+0x960>
 8010954:	9b04      	ldr	r3, [sp, #16]
 8010956:	9a08      	ldr	r2, [sp, #32]
 8010958:	f803 9c01 	strb.w	r9, [r3, #-1]
 801095c:	4293      	cmp	r3, r2
 801095e:	d043      	beq.n	80109e8 <_dtoa_r+0xb78>
 8010960:	4651      	mov	r1, sl
 8010962:	2300      	movs	r3, #0
 8010964:	220a      	movs	r2, #10
 8010966:	4620      	mov	r0, r4
 8010968:	f000 f9d6 	bl	8010d18 <__multadd>
 801096c:	45b8      	cmp	r8, r7
 801096e:	4682      	mov	sl, r0
 8010970:	f04f 0300 	mov.w	r3, #0
 8010974:	f04f 020a 	mov.w	r2, #10
 8010978:	4641      	mov	r1, r8
 801097a:	4620      	mov	r0, r4
 801097c:	d107      	bne.n	801098e <_dtoa_r+0xb1e>
 801097e:	f000 f9cb 	bl	8010d18 <__multadd>
 8010982:	4680      	mov	r8, r0
 8010984:	4607      	mov	r7, r0
 8010986:	9b04      	ldr	r3, [sp, #16]
 8010988:	3301      	adds	r3, #1
 801098a:	9304      	str	r3, [sp, #16]
 801098c:	e775      	b.n	801087a <_dtoa_r+0xa0a>
 801098e:	f000 f9c3 	bl	8010d18 <__multadd>
 8010992:	4639      	mov	r1, r7
 8010994:	4680      	mov	r8, r0
 8010996:	2300      	movs	r3, #0
 8010998:	220a      	movs	r2, #10
 801099a:	4620      	mov	r0, r4
 801099c:	f000 f9bc 	bl	8010d18 <__multadd>
 80109a0:	4607      	mov	r7, r0
 80109a2:	e7f0      	b.n	8010986 <_dtoa_r+0xb16>
 80109a4:	9b04      	ldr	r3, [sp, #16]
 80109a6:	9301      	str	r3, [sp, #4]
 80109a8:	9d00      	ldr	r5, [sp, #0]
 80109aa:	4631      	mov	r1, r6
 80109ac:	4650      	mov	r0, sl
 80109ae:	f7ff f9d4 	bl	800fd5a <quorem>
 80109b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80109b6:	9b00      	ldr	r3, [sp, #0]
 80109b8:	f805 9b01 	strb.w	r9, [r5], #1
 80109bc:	1aea      	subs	r2, r5, r3
 80109be:	9b01      	ldr	r3, [sp, #4]
 80109c0:	4293      	cmp	r3, r2
 80109c2:	dd07      	ble.n	80109d4 <_dtoa_r+0xb64>
 80109c4:	4651      	mov	r1, sl
 80109c6:	2300      	movs	r3, #0
 80109c8:	220a      	movs	r2, #10
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 f9a4 	bl	8010d18 <__multadd>
 80109d0:	4682      	mov	sl, r0
 80109d2:	e7ea      	b.n	80109aa <_dtoa_r+0xb3a>
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	bfc8      	it	gt
 80109da:	461d      	movgt	r5, r3
 80109dc:	9b00      	ldr	r3, [sp, #0]
 80109de:	bfd8      	it	le
 80109e0:	2501      	movle	r5, #1
 80109e2:	441d      	add	r5, r3
 80109e4:	f04f 0800 	mov.w	r8, #0
 80109e8:	4651      	mov	r1, sl
 80109ea:	2201      	movs	r2, #1
 80109ec:	4620      	mov	r0, r4
 80109ee:	f000 fb41 	bl	8011074 <__lshift>
 80109f2:	4631      	mov	r1, r6
 80109f4:	4682      	mov	sl, r0
 80109f6:	f000 fba9 	bl	801114c <__mcmp>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	dc96      	bgt.n	801092c <_dtoa_r+0xabc>
 80109fe:	d102      	bne.n	8010a06 <_dtoa_r+0xb96>
 8010a00:	f019 0f01 	tst.w	r9, #1
 8010a04:	d192      	bne.n	801092c <_dtoa_r+0xabc>
 8010a06:	462b      	mov	r3, r5
 8010a08:	461d      	mov	r5, r3
 8010a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a0e:	2a30      	cmp	r2, #48	; 0x30
 8010a10:	d0fa      	beq.n	8010a08 <_dtoa_r+0xb98>
 8010a12:	e6dd      	b.n	80107d0 <_dtoa_r+0x960>
 8010a14:	9a00      	ldr	r2, [sp, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d189      	bne.n	801092e <_dtoa_r+0xabe>
 8010a1a:	f10b 0b01 	add.w	fp, fp, #1
 8010a1e:	2331      	movs	r3, #49	; 0x31
 8010a20:	e796      	b.n	8010950 <_dtoa_r+0xae0>
 8010a22:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <_dtoa_r+0xbdc>)
 8010a24:	f7ff ba99 	b.w	800ff5a <_dtoa_r+0xea>
 8010a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f47f aa6d 	bne.w	800ff0a <_dtoa_r+0x9a>
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <_dtoa_r+0xbe0>)
 8010a32:	f7ff ba92 	b.w	800ff5a <_dtoa_r+0xea>
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	dcb5      	bgt.n	80109a8 <_dtoa_r+0xb38>
 8010a3c:	9b07      	ldr	r3, [sp, #28]
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	f73f aeb1 	bgt.w	80107a6 <_dtoa_r+0x936>
 8010a44:	e7b0      	b.n	80109a8 <_dtoa_r+0xb38>
 8010a46:	bf00      	nop
 8010a48:	08013e72 	.word	0x08013e72
 8010a4c:	08014003 	.word	0x08014003
 8010a50:	08013df6 	.word	0x08013df6

08010a54 <_free_r>:
 8010a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a56:	2900      	cmp	r1, #0
 8010a58:	d044      	beq.n	8010ae4 <_free_r+0x90>
 8010a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a5e:	9001      	str	r0, [sp, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f1a1 0404 	sub.w	r4, r1, #4
 8010a66:	bfb8      	it	lt
 8010a68:	18e4      	addlt	r4, r4, r3
 8010a6a:	f000 f8e7 	bl	8010c3c <__malloc_lock>
 8010a6e:	4a1e      	ldr	r2, [pc, #120]	; (8010ae8 <_free_r+0x94>)
 8010a70:	9801      	ldr	r0, [sp, #4]
 8010a72:	6813      	ldr	r3, [r2, #0]
 8010a74:	b933      	cbnz	r3, 8010a84 <_free_r+0x30>
 8010a76:	6063      	str	r3, [r4, #4]
 8010a78:	6014      	str	r4, [r2, #0]
 8010a7a:	b003      	add	sp, #12
 8010a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a80:	f000 b8e2 	b.w	8010c48 <__malloc_unlock>
 8010a84:	42a3      	cmp	r3, r4
 8010a86:	d908      	bls.n	8010a9a <_free_r+0x46>
 8010a88:	6825      	ldr	r5, [r4, #0]
 8010a8a:	1961      	adds	r1, r4, r5
 8010a8c:	428b      	cmp	r3, r1
 8010a8e:	bf01      	itttt	eq
 8010a90:	6819      	ldreq	r1, [r3, #0]
 8010a92:	685b      	ldreq	r3, [r3, #4]
 8010a94:	1949      	addeq	r1, r1, r5
 8010a96:	6021      	streq	r1, [r4, #0]
 8010a98:	e7ed      	b.n	8010a76 <_free_r+0x22>
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	b10b      	cbz	r3, 8010aa4 <_free_r+0x50>
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	d9fa      	bls.n	8010a9a <_free_r+0x46>
 8010aa4:	6811      	ldr	r1, [r2, #0]
 8010aa6:	1855      	adds	r5, r2, r1
 8010aa8:	42a5      	cmp	r5, r4
 8010aaa:	d10b      	bne.n	8010ac4 <_free_r+0x70>
 8010aac:	6824      	ldr	r4, [r4, #0]
 8010aae:	4421      	add	r1, r4
 8010ab0:	1854      	adds	r4, r2, r1
 8010ab2:	42a3      	cmp	r3, r4
 8010ab4:	6011      	str	r1, [r2, #0]
 8010ab6:	d1e0      	bne.n	8010a7a <_free_r+0x26>
 8010ab8:	681c      	ldr	r4, [r3, #0]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	6053      	str	r3, [r2, #4]
 8010abe:	440c      	add	r4, r1
 8010ac0:	6014      	str	r4, [r2, #0]
 8010ac2:	e7da      	b.n	8010a7a <_free_r+0x26>
 8010ac4:	d902      	bls.n	8010acc <_free_r+0x78>
 8010ac6:	230c      	movs	r3, #12
 8010ac8:	6003      	str	r3, [r0, #0]
 8010aca:	e7d6      	b.n	8010a7a <_free_r+0x26>
 8010acc:	6825      	ldr	r5, [r4, #0]
 8010ace:	1961      	adds	r1, r4, r5
 8010ad0:	428b      	cmp	r3, r1
 8010ad2:	bf04      	itt	eq
 8010ad4:	6819      	ldreq	r1, [r3, #0]
 8010ad6:	685b      	ldreq	r3, [r3, #4]
 8010ad8:	6063      	str	r3, [r4, #4]
 8010ada:	bf04      	itt	eq
 8010adc:	1949      	addeq	r1, r1, r5
 8010ade:	6021      	streq	r1, [r4, #0]
 8010ae0:	6054      	str	r4, [r2, #4]
 8010ae2:	e7ca      	b.n	8010a7a <_free_r+0x26>
 8010ae4:	b003      	add	sp, #12
 8010ae6:	bd30      	pop	{r4, r5, pc}
 8010ae8:	20004a60 	.word	0x20004a60

08010aec <malloc>:
 8010aec:	4b02      	ldr	r3, [pc, #8]	; (8010af8 <malloc+0xc>)
 8010aee:	4601      	mov	r1, r0
 8010af0:	6818      	ldr	r0, [r3, #0]
 8010af2:	f000 b823 	b.w	8010b3c <_malloc_r>
 8010af6:	bf00      	nop
 8010af8:	20000070 	.word	0x20000070

08010afc <sbrk_aligned>:
 8010afc:	b570      	push	{r4, r5, r6, lr}
 8010afe:	4e0e      	ldr	r6, [pc, #56]	; (8010b38 <sbrk_aligned+0x3c>)
 8010b00:	460c      	mov	r4, r1
 8010b02:	6831      	ldr	r1, [r6, #0]
 8010b04:	4605      	mov	r5, r0
 8010b06:	b911      	cbnz	r1, 8010b0e <sbrk_aligned+0x12>
 8010b08:	f001 f9d4 	bl	8011eb4 <_sbrk_r>
 8010b0c:	6030      	str	r0, [r6, #0]
 8010b0e:	4621      	mov	r1, r4
 8010b10:	4628      	mov	r0, r5
 8010b12:	f001 f9cf 	bl	8011eb4 <_sbrk_r>
 8010b16:	1c43      	adds	r3, r0, #1
 8010b18:	d00a      	beq.n	8010b30 <sbrk_aligned+0x34>
 8010b1a:	1cc4      	adds	r4, r0, #3
 8010b1c:	f024 0403 	bic.w	r4, r4, #3
 8010b20:	42a0      	cmp	r0, r4
 8010b22:	d007      	beq.n	8010b34 <sbrk_aligned+0x38>
 8010b24:	1a21      	subs	r1, r4, r0
 8010b26:	4628      	mov	r0, r5
 8010b28:	f001 f9c4 	bl	8011eb4 <_sbrk_r>
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	d101      	bne.n	8010b34 <sbrk_aligned+0x38>
 8010b30:	f04f 34ff 	mov.w	r4, #4294967295
 8010b34:	4620      	mov	r0, r4
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
 8010b38:	20004a64 	.word	0x20004a64

08010b3c <_malloc_r>:
 8010b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b40:	1ccd      	adds	r5, r1, #3
 8010b42:	f025 0503 	bic.w	r5, r5, #3
 8010b46:	3508      	adds	r5, #8
 8010b48:	2d0c      	cmp	r5, #12
 8010b4a:	bf38      	it	cc
 8010b4c:	250c      	movcc	r5, #12
 8010b4e:	2d00      	cmp	r5, #0
 8010b50:	4607      	mov	r7, r0
 8010b52:	db01      	blt.n	8010b58 <_malloc_r+0x1c>
 8010b54:	42a9      	cmp	r1, r5
 8010b56:	d905      	bls.n	8010b64 <_malloc_r+0x28>
 8010b58:	230c      	movs	r3, #12
 8010b5a:	603b      	str	r3, [r7, #0]
 8010b5c:	2600      	movs	r6, #0
 8010b5e:	4630      	mov	r0, r6
 8010b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010c38 <_malloc_r+0xfc>
 8010b68:	f000 f868 	bl	8010c3c <__malloc_lock>
 8010b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8010b70:	461c      	mov	r4, r3
 8010b72:	bb5c      	cbnz	r4, 8010bcc <_malloc_r+0x90>
 8010b74:	4629      	mov	r1, r5
 8010b76:	4638      	mov	r0, r7
 8010b78:	f7ff ffc0 	bl	8010afc <sbrk_aligned>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	4604      	mov	r4, r0
 8010b80:	d155      	bne.n	8010c2e <_malloc_r+0xf2>
 8010b82:	f8d8 4000 	ldr.w	r4, [r8]
 8010b86:	4626      	mov	r6, r4
 8010b88:	2e00      	cmp	r6, #0
 8010b8a:	d145      	bne.n	8010c18 <_malloc_r+0xdc>
 8010b8c:	2c00      	cmp	r4, #0
 8010b8e:	d048      	beq.n	8010c22 <_malloc_r+0xe6>
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	4631      	mov	r1, r6
 8010b94:	4638      	mov	r0, r7
 8010b96:	eb04 0903 	add.w	r9, r4, r3
 8010b9a:	f001 f98b 	bl	8011eb4 <_sbrk_r>
 8010b9e:	4581      	cmp	r9, r0
 8010ba0:	d13f      	bne.n	8010c22 <_malloc_r+0xe6>
 8010ba2:	6821      	ldr	r1, [r4, #0]
 8010ba4:	1a6d      	subs	r5, r5, r1
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	4638      	mov	r0, r7
 8010baa:	f7ff ffa7 	bl	8010afc <sbrk_aligned>
 8010bae:	3001      	adds	r0, #1
 8010bb0:	d037      	beq.n	8010c22 <_malloc_r+0xe6>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	442b      	add	r3, r5
 8010bb6:	6023      	str	r3, [r4, #0]
 8010bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d038      	beq.n	8010c32 <_malloc_r+0xf6>
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	42a2      	cmp	r2, r4
 8010bc4:	d12b      	bne.n	8010c1e <_malloc_r+0xe2>
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	605a      	str	r2, [r3, #4]
 8010bca:	e00f      	b.n	8010bec <_malloc_r+0xb0>
 8010bcc:	6822      	ldr	r2, [r4, #0]
 8010bce:	1b52      	subs	r2, r2, r5
 8010bd0:	d41f      	bmi.n	8010c12 <_malloc_r+0xd6>
 8010bd2:	2a0b      	cmp	r2, #11
 8010bd4:	d917      	bls.n	8010c06 <_malloc_r+0xca>
 8010bd6:	1961      	adds	r1, r4, r5
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	6025      	str	r5, [r4, #0]
 8010bdc:	bf18      	it	ne
 8010bde:	6059      	strne	r1, [r3, #4]
 8010be0:	6863      	ldr	r3, [r4, #4]
 8010be2:	bf08      	it	eq
 8010be4:	f8c8 1000 	streq.w	r1, [r8]
 8010be8:	5162      	str	r2, [r4, r5]
 8010bea:	604b      	str	r3, [r1, #4]
 8010bec:	4638      	mov	r0, r7
 8010bee:	f104 060b 	add.w	r6, r4, #11
 8010bf2:	f000 f829 	bl	8010c48 <__malloc_unlock>
 8010bf6:	f026 0607 	bic.w	r6, r6, #7
 8010bfa:	1d23      	adds	r3, r4, #4
 8010bfc:	1af2      	subs	r2, r6, r3
 8010bfe:	d0ae      	beq.n	8010b5e <_malloc_r+0x22>
 8010c00:	1b9b      	subs	r3, r3, r6
 8010c02:	50a3      	str	r3, [r4, r2]
 8010c04:	e7ab      	b.n	8010b5e <_malloc_r+0x22>
 8010c06:	42a3      	cmp	r3, r4
 8010c08:	6862      	ldr	r2, [r4, #4]
 8010c0a:	d1dd      	bne.n	8010bc8 <_malloc_r+0x8c>
 8010c0c:	f8c8 2000 	str.w	r2, [r8]
 8010c10:	e7ec      	b.n	8010bec <_malloc_r+0xb0>
 8010c12:	4623      	mov	r3, r4
 8010c14:	6864      	ldr	r4, [r4, #4]
 8010c16:	e7ac      	b.n	8010b72 <_malloc_r+0x36>
 8010c18:	4634      	mov	r4, r6
 8010c1a:	6876      	ldr	r6, [r6, #4]
 8010c1c:	e7b4      	b.n	8010b88 <_malloc_r+0x4c>
 8010c1e:	4613      	mov	r3, r2
 8010c20:	e7cc      	b.n	8010bbc <_malloc_r+0x80>
 8010c22:	230c      	movs	r3, #12
 8010c24:	603b      	str	r3, [r7, #0]
 8010c26:	4638      	mov	r0, r7
 8010c28:	f000 f80e 	bl	8010c48 <__malloc_unlock>
 8010c2c:	e797      	b.n	8010b5e <_malloc_r+0x22>
 8010c2e:	6025      	str	r5, [r4, #0]
 8010c30:	e7dc      	b.n	8010bec <_malloc_r+0xb0>
 8010c32:	605b      	str	r3, [r3, #4]
 8010c34:	deff      	udf	#255	; 0xff
 8010c36:	bf00      	nop
 8010c38:	20004a60 	.word	0x20004a60

08010c3c <__malloc_lock>:
 8010c3c:	4801      	ldr	r0, [pc, #4]	; (8010c44 <__malloc_lock+0x8>)
 8010c3e:	f7ff b87c 	b.w	800fd3a <__retarget_lock_acquire_recursive>
 8010c42:	bf00      	nop
 8010c44:	20004a5c 	.word	0x20004a5c

08010c48 <__malloc_unlock>:
 8010c48:	4801      	ldr	r0, [pc, #4]	; (8010c50 <__malloc_unlock+0x8>)
 8010c4a:	f7ff b877 	b.w	800fd3c <__retarget_lock_release_recursive>
 8010c4e:	bf00      	nop
 8010c50:	20004a5c 	.word	0x20004a5c

08010c54 <_Balloc>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	69c6      	ldr	r6, [r0, #28]
 8010c58:	4604      	mov	r4, r0
 8010c5a:	460d      	mov	r5, r1
 8010c5c:	b976      	cbnz	r6, 8010c7c <_Balloc+0x28>
 8010c5e:	2010      	movs	r0, #16
 8010c60:	f7ff ff44 	bl	8010aec <malloc>
 8010c64:	4602      	mov	r2, r0
 8010c66:	61e0      	str	r0, [r4, #28]
 8010c68:	b920      	cbnz	r0, 8010c74 <_Balloc+0x20>
 8010c6a:	4b18      	ldr	r3, [pc, #96]	; (8010ccc <_Balloc+0x78>)
 8010c6c:	4818      	ldr	r0, [pc, #96]	; (8010cd0 <_Balloc+0x7c>)
 8010c6e:	216b      	movs	r1, #107	; 0x6b
 8010c70:	f001 f930 	bl	8011ed4 <__assert_func>
 8010c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c78:	6006      	str	r6, [r0, #0]
 8010c7a:	60c6      	str	r6, [r0, #12]
 8010c7c:	69e6      	ldr	r6, [r4, #28]
 8010c7e:	68f3      	ldr	r3, [r6, #12]
 8010c80:	b183      	cbz	r3, 8010ca4 <_Balloc+0x50>
 8010c82:	69e3      	ldr	r3, [r4, #28]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c8a:	b9b8      	cbnz	r0, 8010cbc <_Balloc+0x68>
 8010c8c:	2101      	movs	r1, #1
 8010c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8010c92:	1d72      	adds	r2, r6, #5
 8010c94:	0092      	lsls	r2, r2, #2
 8010c96:	4620      	mov	r0, r4
 8010c98:	f001 f93a 	bl	8011f10 <_calloc_r>
 8010c9c:	b160      	cbz	r0, 8010cb8 <_Balloc+0x64>
 8010c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ca2:	e00e      	b.n	8010cc2 <_Balloc+0x6e>
 8010ca4:	2221      	movs	r2, #33	; 0x21
 8010ca6:	2104      	movs	r1, #4
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f001 f931 	bl	8011f10 <_calloc_r>
 8010cae:	69e3      	ldr	r3, [r4, #28]
 8010cb0:	60f0      	str	r0, [r6, #12]
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1e4      	bne.n	8010c82 <_Balloc+0x2e>
 8010cb8:	2000      	movs	r0, #0
 8010cba:	bd70      	pop	{r4, r5, r6, pc}
 8010cbc:	6802      	ldr	r2, [r0, #0]
 8010cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cc8:	e7f7      	b.n	8010cba <_Balloc+0x66>
 8010cca:	bf00      	nop
 8010ccc:	08013e03 	.word	0x08013e03
 8010cd0:	08013e83 	.word	0x08013e83

08010cd4 <_Bfree>:
 8010cd4:	b570      	push	{r4, r5, r6, lr}
 8010cd6:	69c6      	ldr	r6, [r0, #28]
 8010cd8:	4605      	mov	r5, r0
 8010cda:	460c      	mov	r4, r1
 8010cdc:	b976      	cbnz	r6, 8010cfc <_Bfree+0x28>
 8010cde:	2010      	movs	r0, #16
 8010ce0:	f7ff ff04 	bl	8010aec <malloc>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	61e8      	str	r0, [r5, #28]
 8010ce8:	b920      	cbnz	r0, 8010cf4 <_Bfree+0x20>
 8010cea:	4b09      	ldr	r3, [pc, #36]	; (8010d10 <_Bfree+0x3c>)
 8010cec:	4809      	ldr	r0, [pc, #36]	; (8010d14 <_Bfree+0x40>)
 8010cee:	218f      	movs	r1, #143	; 0x8f
 8010cf0:	f001 f8f0 	bl	8011ed4 <__assert_func>
 8010cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cf8:	6006      	str	r6, [r0, #0]
 8010cfa:	60c6      	str	r6, [r0, #12]
 8010cfc:	b13c      	cbz	r4, 8010d0e <_Bfree+0x3a>
 8010cfe:	69eb      	ldr	r3, [r5, #28]
 8010d00:	6862      	ldr	r2, [r4, #4]
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d08:	6021      	str	r1, [r4, #0]
 8010d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d0e:	bd70      	pop	{r4, r5, r6, pc}
 8010d10:	08013e03 	.word	0x08013e03
 8010d14:	08013e83 	.word	0x08013e83

08010d18 <__multadd>:
 8010d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1c:	690d      	ldr	r5, [r1, #16]
 8010d1e:	4607      	mov	r7, r0
 8010d20:	460c      	mov	r4, r1
 8010d22:	461e      	mov	r6, r3
 8010d24:	f101 0c14 	add.w	ip, r1, #20
 8010d28:	2000      	movs	r0, #0
 8010d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8010d2e:	b299      	uxth	r1, r3
 8010d30:	fb02 6101 	mla	r1, r2, r1, r6
 8010d34:	0c1e      	lsrs	r6, r3, #16
 8010d36:	0c0b      	lsrs	r3, r1, #16
 8010d38:	fb02 3306 	mla	r3, r2, r6, r3
 8010d3c:	b289      	uxth	r1, r1
 8010d3e:	3001      	adds	r0, #1
 8010d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d44:	4285      	cmp	r5, r0
 8010d46:	f84c 1b04 	str.w	r1, [ip], #4
 8010d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d4e:	dcec      	bgt.n	8010d2a <__multadd+0x12>
 8010d50:	b30e      	cbz	r6, 8010d96 <__multadd+0x7e>
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	42ab      	cmp	r3, r5
 8010d56:	dc19      	bgt.n	8010d8c <__multadd+0x74>
 8010d58:	6861      	ldr	r1, [r4, #4]
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	3101      	adds	r1, #1
 8010d5e:	f7ff ff79 	bl	8010c54 <_Balloc>
 8010d62:	4680      	mov	r8, r0
 8010d64:	b928      	cbnz	r0, 8010d72 <__multadd+0x5a>
 8010d66:	4602      	mov	r2, r0
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <__multadd+0x84>)
 8010d6a:	480d      	ldr	r0, [pc, #52]	; (8010da0 <__multadd+0x88>)
 8010d6c:	21ba      	movs	r1, #186	; 0xba
 8010d6e:	f001 f8b1 	bl	8011ed4 <__assert_func>
 8010d72:	6922      	ldr	r2, [r4, #16]
 8010d74:	3202      	adds	r2, #2
 8010d76:	f104 010c 	add.w	r1, r4, #12
 8010d7a:	0092      	lsls	r2, r2, #2
 8010d7c:	300c      	adds	r0, #12
 8010d7e:	f7fe ffde 	bl	800fd3e <memcpy>
 8010d82:	4621      	mov	r1, r4
 8010d84:	4638      	mov	r0, r7
 8010d86:	f7ff ffa5 	bl	8010cd4 <_Bfree>
 8010d8a:	4644      	mov	r4, r8
 8010d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d90:	3501      	adds	r5, #1
 8010d92:	615e      	str	r6, [r3, #20]
 8010d94:	6125      	str	r5, [r4, #16]
 8010d96:	4620      	mov	r0, r4
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9c:	08013e72 	.word	0x08013e72
 8010da0:	08013e83 	.word	0x08013e83

08010da4 <__hi0bits>:
 8010da4:	0c03      	lsrs	r3, r0, #16
 8010da6:	041b      	lsls	r3, r3, #16
 8010da8:	b9d3      	cbnz	r3, 8010de0 <__hi0bits+0x3c>
 8010daa:	0400      	lsls	r0, r0, #16
 8010dac:	2310      	movs	r3, #16
 8010dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010db2:	bf04      	itt	eq
 8010db4:	0200      	lsleq	r0, r0, #8
 8010db6:	3308      	addeq	r3, #8
 8010db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010dbc:	bf04      	itt	eq
 8010dbe:	0100      	lsleq	r0, r0, #4
 8010dc0:	3304      	addeq	r3, #4
 8010dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010dc6:	bf04      	itt	eq
 8010dc8:	0080      	lsleq	r0, r0, #2
 8010dca:	3302      	addeq	r3, #2
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	db05      	blt.n	8010ddc <__hi0bits+0x38>
 8010dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010dd4:	f103 0301 	add.w	r3, r3, #1
 8010dd8:	bf08      	it	eq
 8010dda:	2320      	moveq	r3, #32
 8010ddc:	4618      	mov	r0, r3
 8010dde:	4770      	bx	lr
 8010de0:	2300      	movs	r3, #0
 8010de2:	e7e4      	b.n	8010dae <__hi0bits+0xa>

08010de4 <__lo0bits>:
 8010de4:	6803      	ldr	r3, [r0, #0]
 8010de6:	f013 0207 	ands.w	r2, r3, #7
 8010dea:	d00c      	beq.n	8010e06 <__lo0bits+0x22>
 8010dec:	07d9      	lsls	r1, r3, #31
 8010dee:	d422      	bmi.n	8010e36 <__lo0bits+0x52>
 8010df0:	079a      	lsls	r2, r3, #30
 8010df2:	bf49      	itett	mi
 8010df4:	085b      	lsrmi	r3, r3, #1
 8010df6:	089b      	lsrpl	r3, r3, #2
 8010df8:	6003      	strmi	r3, [r0, #0]
 8010dfa:	2201      	movmi	r2, #1
 8010dfc:	bf5c      	itt	pl
 8010dfe:	6003      	strpl	r3, [r0, #0]
 8010e00:	2202      	movpl	r2, #2
 8010e02:	4610      	mov	r0, r2
 8010e04:	4770      	bx	lr
 8010e06:	b299      	uxth	r1, r3
 8010e08:	b909      	cbnz	r1, 8010e0e <__lo0bits+0x2a>
 8010e0a:	0c1b      	lsrs	r3, r3, #16
 8010e0c:	2210      	movs	r2, #16
 8010e0e:	b2d9      	uxtb	r1, r3
 8010e10:	b909      	cbnz	r1, 8010e16 <__lo0bits+0x32>
 8010e12:	3208      	adds	r2, #8
 8010e14:	0a1b      	lsrs	r3, r3, #8
 8010e16:	0719      	lsls	r1, r3, #28
 8010e18:	bf04      	itt	eq
 8010e1a:	091b      	lsreq	r3, r3, #4
 8010e1c:	3204      	addeq	r2, #4
 8010e1e:	0799      	lsls	r1, r3, #30
 8010e20:	bf04      	itt	eq
 8010e22:	089b      	lsreq	r3, r3, #2
 8010e24:	3202      	addeq	r2, #2
 8010e26:	07d9      	lsls	r1, r3, #31
 8010e28:	d403      	bmi.n	8010e32 <__lo0bits+0x4e>
 8010e2a:	085b      	lsrs	r3, r3, #1
 8010e2c:	f102 0201 	add.w	r2, r2, #1
 8010e30:	d003      	beq.n	8010e3a <__lo0bits+0x56>
 8010e32:	6003      	str	r3, [r0, #0]
 8010e34:	e7e5      	b.n	8010e02 <__lo0bits+0x1e>
 8010e36:	2200      	movs	r2, #0
 8010e38:	e7e3      	b.n	8010e02 <__lo0bits+0x1e>
 8010e3a:	2220      	movs	r2, #32
 8010e3c:	e7e1      	b.n	8010e02 <__lo0bits+0x1e>
	...

08010e40 <__i2b>:
 8010e40:	b510      	push	{r4, lr}
 8010e42:	460c      	mov	r4, r1
 8010e44:	2101      	movs	r1, #1
 8010e46:	f7ff ff05 	bl	8010c54 <_Balloc>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	b928      	cbnz	r0, 8010e5a <__i2b+0x1a>
 8010e4e:	4b05      	ldr	r3, [pc, #20]	; (8010e64 <__i2b+0x24>)
 8010e50:	4805      	ldr	r0, [pc, #20]	; (8010e68 <__i2b+0x28>)
 8010e52:	f240 1145 	movw	r1, #325	; 0x145
 8010e56:	f001 f83d 	bl	8011ed4 <__assert_func>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	6144      	str	r4, [r0, #20]
 8010e5e:	6103      	str	r3, [r0, #16]
 8010e60:	bd10      	pop	{r4, pc}
 8010e62:	bf00      	nop
 8010e64:	08013e72 	.word	0x08013e72
 8010e68:	08013e83 	.word	0x08013e83

08010e6c <__multiply>:
 8010e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e70:	4691      	mov	r9, r2
 8010e72:	690a      	ldr	r2, [r1, #16]
 8010e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	bfb8      	it	lt
 8010e7c:	460b      	movlt	r3, r1
 8010e7e:	460c      	mov	r4, r1
 8010e80:	bfbc      	itt	lt
 8010e82:	464c      	movlt	r4, r9
 8010e84:	4699      	movlt	r9, r3
 8010e86:	6927      	ldr	r7, [r4, #16]
 8010e88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e8c:	68a3      	ldr	r3, [r4, #8]
 8010e8e:	6861      	ldr	r1, [r4, #4]
 8010e90:	eb07 060a 	add.w	r6, r7, sl
 8010e94:	42b3      	cmp	r3, r6
 8010e96:	b085      	sub	sp, #20
 8010e98:	bfb8      	it	lt
 8010e9a:	3101      	addlt	r1, #1
 8010e9c:	f7ff feda 	bl	8010c54 <_Balloc>
 8010ea0:	b930      	cbnz	r0, 8010eb0 <__multiply+0x44>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	4b44      	ldr	r3, [pc, #272]	; (8010fb8 <__multiply+0x14c>)
 8010ea6:	4845      	ldr	r0, [pc, #276]	; (8010fbc <__multiply+0x150>)
 8010ea8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010eac:	f001 f812 	bl	8011ed4 <__assert_func>
 8010eb0:	f100 0514 	add.w	r5, r0, #20
 8010eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010eb8:	462b      	mov	r3, r5
 8010eba:	2200      	movs	r2, #0
 8010ebc:	4543      	cmp	r3, r8
 8010ebe:	d321      	bcc.n	8010f04 <__multiply+0x98>
 8010ec0:	f104 0314 	add.w	r3, r4, #20
 8010ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ec8:	f109 0314 	add.w	r3, r9, #20
 8010ecc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ed0:	9202      	str	r2, [sp, #8]
 8010ed2:	1b3a      	subs	r2, r7, r4
 8010ed4:	3a15      	subs	r2, #21
 8010ed6:	f022 0203 	bic.w	r2, r2, #3
 8010eda:	3204      	adds	r2, #4
 8010edc:	f104 0115 	add.w	r1, r4, #21
 8010ee0:	428f      	cmp	r7, r1
 8010ee2:	bf38      	it	cc
 8010ee4:	2204      	movcc	r2, #4
 8010ee6:	9201      	str	r2, [sp, #4]
 8010ee8:	9a02      	ldr	r2, [sp, #8]
 8010eea:	9303      	str	r3, [sp, #12]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d80c      	bhi.n	8010f0a <__multiply+0x9e>
 8010ef0:	2e00      	cmp	r6, #0
 8010ef2:	dd03      	ble.n	8010efc <__multiply+0x90>
 8010ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d05b      	beq.n	8010fb4 <__multiply+0x148>
 8010efc:	6106      	str	r6, [r0, #16]
 8010efe:	b005      	add	sp, #20
 8010f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f04:	f843 2b04 	str.w	r2, [r3], #4
 8010f08:	e7d8      	b.n	8010ebc <__multiply+0x50>
 8010f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010f0e:	f1ba 0f00 	cmp.w	sl, #0
 8010f12:	d024      	beq.n	8010f5e <__multiply+0xf2>
 8010f14:	f104 0e14 	add.w	lr, r4, #20
 8010f18:	46a9      	mov	r9, r5
 8010f1a:	f04f 0c00 	mov.w	ip, #0
 8010f1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010f22:	f8d9 1000 	ldr.w	r1, [r9]
 8010f26:	fa1f fb82 	uxth.w	fp, r2
 8010f2a:	b289      	uxth	r1, r1
 8010f2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010f30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010f34:	f8d9 2000 	ldr.w	r2, [r9]
 8010f38:	4461      	add	r1, ip
 8010f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f46:	b289      	uxth	r1, r1
 8010f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f4c:	4577      	cmp	r7, lr
 8010f4e:	f849 1b04 	str.w	r1, [r9], #4
 8010f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f56:	d8e2      	bhi.n	8010f1e <__multiply+0xb2>
 8010f58:	9a01      	ldr	r2, [sp, #4]
 8010f5a:	f845 c002 	str.w	ip, [r5, r2]
 8010f5e:	9a03      	ldr	r2, [sp, #12]
 8010f60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f64:	3304      	adds	r3, #4
 8010f66:	f1b9 0f00 	cmp.w	r9, #0
 8010f6a:	d021      	beq.n	8010fb0 <__multiply+0x144>
 8010f6c:	6829      	ldr	r1, [r5, #0]
 8010f6e:	f104 0c14 	add.w	ip, r4, #20
 8010f72:	46ae      	mov	lr, r5
 8010f74:	f04f 0a00 	mov.w	sl, #0
 8010f78:	f8bc b000 	ldrh.w	fp, [ip]
 8010f7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010f80:	fb09 220b 	mla	r2, r9, fp, r2
 8010f84:	4452      	add	r2, sl
 8010f86:	b289      	uxth	r1, r1
 8010f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f8c:	f84e 1b04 	str.w	r1, [lr], #4
 8010f90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010f94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010f98:	f8be 1000 	ldrh.w	r1, [lr]
 8010f9c:	fb09 110a 	mla	r1, r9, sl, r1
 8010fa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010fa4:	4567      	cmp	r7, ip
 8010fa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010faa:	d8e5      	bhi.n	8010f78 <__multiply+0x10c>
 8010fac:	9a01      	ldr	r2, [sp, #4]
 8010fae:	50a9      	str	r1, [r5, r2]
 8010fb0:	3504      	adds	r5, #4
 8010fb2:	e799      	b.n	8010ee8 <__multiply+0x7c>
 8010fb4:	3e01      	subs	r6, #1
 8010fb6:	e79b      	b.n	8010ef0 <__multiply+0x84>
 8010fb8:	08013e72 	.word	0x08013e72
 8010fbc:	08013e83 	.word	0x08013e83

08010fc0 <__pow5mult>:
 8010fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fc4:	4615      	mov	r5, r2
 8010fc6:	f012 0203 	ands.w	r2, r2, #3
 8010fca:	4606      	mov	r6, r0
 8010fcc:	460f      	mov	r7, r1
 8010fce:	d007      	beq.n	8010fe0 <__pow5mult+0x20>
 8010fd0:	4c25      	ldr	r4, [pc, #148]	; (8011068 <__pow5mult+0xa8>)
 8010fd2:	3a01      	subs	r2, #1
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fda:	f7ff fe9d 	bl	8010d18 <__multadd>
 8010fde:	4607      	mov	r7, r0
 8010fe0:	10ad      	asrs	r5, r5, #2
 8010fe2:	d03d      	beq.n	8011060 <__pow5mult+0xa0>
 8010fe4:	69f4      	ldr	r4, [r6, #28]
 8010fe6:	b97c      	cbnz	r4, 8011008 <__pow5mult+0x48>
 8010fe8:	2010      	movs	r0, #16
 8010fea:	f7ff fd7f 	bl	8010aec <malloc>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	61f0      	str	r0, [r6, #28]
 8010ff2:	b928      	cbnz	r0, 8011000 <__pow5mult+0x40>
 8010ff4:	4b1d      	ldr	r3, [pc, #116]	; (801106c <__pow5mult+0xac>)
 8010ff6:	481e      	ldr	r0, [pc, #120]	; (8011070 <__pow5mult+0xb0>)
 8010ff8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010ffc:	f000 ff6a 	bl	8011ed4 <__assert_func>
 8011000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011004:	6004      	str	r4, [r0, #0]
 8011006:	60c4      	str	r4, [r0, #12]
 8011008:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801100c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011010:	b94c      	cbnz	r4, 8011026 <__pow5mult+0x66>
 8011012:	f240 2171 	movw	r1, #625	; 0x271
 8011016:	4630      	mov	r0, r6
 8011018:	f7ff ff12 	bl	8010e40 <__i2b>
 801101c:	2300      	movs	r3, #0
 801101e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011022:	4604      	mov	r4, r0
 8011024:	6003      	str	r3, [r0, #0]
 8011026:	f04f 0900 	mov.w	r9, #0
 801102a:	07eb      	lsls	r3, r5, #31
 801102c:	d50a      	bpl.n	8011044 <__pow5mult+0x84>
 801102e:	4639      	mov	r1, r7
 8011030:	4622      	mov	r2, r4
 8011032:	4630      	mov	r0, r6
 8011034:	f7ff ff1a 	bl	8010e6c <__multiply>
 8011038:	4639      	mov	r1, r7
 801103a:	4680      	mov	r8, r0
 801103c:	4630      	mov	r0, r6
 801103e:	f7ff fe49 	bl	8010cd4 <_Bfree>
 8011042:	4647      	mov	r7, r8
 8011044:	106d      	asrs	r5, r5, #1
 8011046:	d00b      	beq.n	8011060 <__pow5mult+0xa0>
 8011048:	6820      	ldr	r0, [r4, #0]
 801104a:	b938      	cbnz	r0, 801105c <__pow5mult+0x9c>
 801104c:	4622      	mov	r2, r4
 801104e:	4621      	mov	r1, r4
 8011050:	4630      	mov	r0, r6
 8011052:	f7ff ff0b 	bl	8010e6c <__multiply>
 8011056:	6020      	str	r0, [r4, #0]
 8011058:	f8c0 9000 	str.w	r9, [r0]
 801105c:	4604      	mov	r4, r0
 801105e:	e7e4      	b.n	801102a <__pow5mult+0x6a>
 8011060:	4638      	mov	r0, r7
 8011062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011066:	bf00      	nop
 8011068:	08013fd0 	.word	0x08013fd0
 801106c:	08013e03 	.word	0x08013e03
 8011070:	08013e83 	.word	0x08013e83

08011074 <__lshift>:
 8011074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011078:	460c      	mov	r4, r1
 801107a:	6849      	ldr	r1, [r1, #4]
 801107c:	6923      	ldr	r3, [r4, #16]
 801107e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	4607      	mov	r7, r0
 8011086:	4691      	mov	r9, r2
 8011088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801108c:	f108 0601 	add.w	r6, r8, #1
 8011090:	42b3      	cmp	r3, r6
 8011092:	db0b      	blt.n	80110ac <__lshift+0x38>
 8011094:	4638      	mov	r0, r7
 8011096:	f7ff fddd 	bl	8010c54 <_Balloc>
 801109a:	4605      	mov	r5, r0
 801109c:	b948      	cbnz	r0, 80110b2 <__lshift+0x3e>
 801109e:	4602      	mov	r2, r0
 80110a0:	4b28      	ldr	r3, [pc, #160]	; (8011144 <__lshift+0xd0>)
 80110a2:	4829      	ldr	r0, [pc, #164]	; (8011148 <__lshift+0xd4>)
 80110a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80110a8:	f000 ff14 	bl	8011ed4 <__assert_func>
 80110ac:	3101      	adds	r1, #1
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	e7ee      	b.n	8011090 <__lshift+0x1c>
 80110b2:	2300      	movs	r3, #0
 80110b4:	f100 0114 	add.w	r1, r0, #20
 80110b8:	f100 0210 	add.w	r2, r0, #16
 80110bc:	4618      	mov	r0, r3
 80110be:	4553      	cmp	r3, sl
 80110c0:	db33      	blt.n	801112a <__lshift+0xb6>
 80110c2:	6920      	ldr	r0, [r4, #16]
 80110c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110c8:	f104 0314 	add.w	r3, r4, #20
 80110cc:	f019 091f 	ands.w	r9, r9, #31
 80110d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110d8:	d02b      	beq.n	8011132 <__lshift+0xbe>
 80110da:	f1c9 0e20 	rsb	lr, r9, #32
 80110de:	468a      	mov	sl, r1
 80110e0:	2200      	movs	r2, #0
 80110e2:	6818      	ldr	r0, [r3, #0]
 80110e4:	fa00 f009 	lsl.w	r0, r0, r9
 80110e8:	4310      	orrs	r0, r2
 80110ea:	f84a 0b04 	str.w	r0, [sl], #4
 80110ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f2:	459c      	cmp	ip, r3
 80110f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80110f8:	d8f3      	bhi.n	80110e2 <__lshift+0x6e>
 80110fa:	ebac 0304 	sub.w	r3, ip, r4
 80110fe:	3b15      	subs	r3, #21
 8011100:	f023 0303 	bic.w	r3, r3, #3
 8011104:	3304      	adds	r3, #4
 8011106:	f104 0015 	add.w	r0, r4, #21
 801110a:	4584      	cmp	ip, r0
 801110c:	bf38      	it	cc
 801110e:	2304      	movcc	r3, #4
 8011110:	50ca      	str	r2, [r1, r3]
 8011112:	b10a      	cbz	r2, 8011118 <__lshift+0xa4>
 8011114:	f108 0602 	add.w	r6, r8, #2
 8011118:	3e01      	subs	r6, #1
 801111a:	4638      	mov	r0, r7
 801111c:	612e      	str	r6, [r5, #16]
 801111e:	4621      	mov	r1, r4
 8011120:	f7ff fdd8 	bl	8010cd4 <_Bfree>
 8011124:	4628      	mov	r0, r5
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	f842 0f04 	str.w	r0, [r2, #4]!
 801112e:	3301      	adds	r3, #1
 8011130:	e7c5      	b.n	80110be <__lshift+0x4a>
 8011132:	3904      	subs	r1, #4
 8011134:	f853 2b04 	ldr.w	r2, [r3], #4
 8011138:	f841 2f04 	str.w	r2, [r1, #4]!
 801113c:	459c      	cmp	ip, r3
 801113e:	d8f9      	bhi.n	8011134 <__lshift+0xc0>
 8011140:	e7ea      	b.n	8011118 <__lshift+0xa4>
 8011142:	bf00      	nop
 8011144:	08013e72 	.word	0x08013e72
 8011148:	08013e83 	.word	0x08013e83

0801114c <__mcmp>:
 801114c:	b530      	push	{r4, r5, lr}
 801114e:	6902      	ldr	r2, [r0, #16]
 8011150:	690c      	ldr	r4, [r1, #16]
 8011152:	1b12      	subs	r2, r2, r4
 8011154:	d10e      	bne.n	8011174 <__mcmp+0x28>
 8011156:	f100 0314 	add.w	r3, r0, #20
 801115a:	3114      	adds	r1, #20
 801115c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011160:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011164:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011168:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801116c:	42a5      	cmp	r5, r4
 801116e:	d003      	beq.n	8011178 <__mcmp+0x2c>
 8011170:	d305      	bcc.n	801117e <__mcmp+0x32>
 8011172:	2201      	movs	r2, #1
 8011174:	4610      	mov	r0, r2
 8011176:	bd30      	pop	{r4, r5, pc}
 8011178:	4283      	cmp	r3, r0
 801117a:	d3f3      	bcc.n	8011164 <__mcmp+0x18>
 801117c:	e7fa      	b.n	8011174 <__mcmp+0x28>
 801117e:	f04f 32ff 	mov.w	r2, #4294967295
 8011182:	e7f7      	b.n	8011174 <__mcmp+0x28>

08011184 <__mdiff>:
 8011184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011188:	460c      	mov	r4, r1
 801118a:	4606      	mov	r6, r0
 801118c:	4611      	mov	r1, r2
 801118e:	4620      	mov	r0, r4
 8011190:	4690      	mov	r8, r2
 8011192:	f7ff ffdb 	bl	801114c <__mcmp>
 8011196:	1e05      	subs	r5, r0, #0
 8011198:	d110      	bne.n	80111bc <__mdiff+0x38>
 801119a:	4629      	mov	r1, r5
 801119c:	4630      	mov	r0, r6
 801119e:	f7ff fd59 	bl	8010c54 <_Balloc>
 80111a2:	b930      	cbnz	r0, 80111b2 <__mdiff+0x2e>
 80111a4:	4b3a      	ldr	r3, [pc, #232]	; (8011290 <__mdiff+0x10c>)
 80111a6:	4602      	mov	r2, r0
 80111a8:	f240 2137 	movw	r1, #567	; 0x237
 80111ac:	4839      	ldr	r0, [pc, #228]	; (8011294 <__mdiff+0x110>)
 80111ae:	f000 fe91 	bl	8011ed4 <__assert_func>
 80111b2:	2301      	movs	r3, #1
 80111b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80111b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111bc:	bfa4      	itt	ge
 80111be:	4643      	movge	r3, r8
 80111c0:	46a0      	movge	r8, r4
 80111c2:	4630      	mov	r0, r6
 80111c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80111c8:	bfa6      	itte	ge
 80111ca:	461c      	movge	r4, r3
 80111cc:	2500      	movge	r5, #0
 80111ce:	2501      	movlt	r5, #1
 80111d0:	f7ff fd40 	bl	8010c54 <_Balloc>
 80111d4:	b920      	cbnz	r0, 80111e0 <__mdiff+0x5c>
 80111d6:	4b2e      	ldr	r3, [pc, #184]	; (8011290 <__mdiff+0x10c>)
 80111d8:	4602      	mov	r2, r0
 80111da:	f240 2145 	movw	r1, #581	; 0x245
 80111de:	e7e5      	b.n	80111ac <__mdiff+0x28>
 80111e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80111e4:	6926      	ldr	r6, [r4, #16]
 80111e6:	60c5      	str	r5, [r0, #12]
 80111e8:	f104 0914 	add.w	r9, r4, #20
 80111ec:	f108 0514 	add.w	r5, r8, #20
 80111f0:	f100 0e14 	add.w	lr, r0, #20
 80111f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80111f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80111fc:	f108 0210 	add.w	r2, r8, #16
 8011200:	46f2      	mov	sl, lr
 8011202:	2100      	movs	r1, #0
 8011204:	f859 3b04 	ldr.w	r3, [r9], #4
 8011208:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801120c:	fa11 f88b 	uxtah	r8, r1, fp
 8011210:	b299      	uxth	r1, r3
 8011212:	0c1b      	lsrs	r3, r3, #16
 8011214:	eba8 0801 	sub.w	r8, r8, r1
 8011218:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801121c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011220:	fa1f f888 	uxth.w	r8, r8
 8011224:	1419      	asrs	r1, r3, #16
 8011226:	454e      	cmp	r6, r9
 8011228:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801122c:	f84a 3b04 	str.w	r3, [sl], #4
 8011230:	d8e8      	bhi.n	8011204 <__mdiff+0x80>
 8011232:	1b33      	subs	r3, r6, r4
 8011234:	3b15      	subs	r3, #21
 8011236:	f023 0303 	bic.w	r3, r3, #3
 801123a:	3304      	adds	r3, #4
 801123c:	3415      	adds	r4, #21
 801123e:	42a6      	cmp	r6, r4
 8011240:	bf38      	it	cc
 8011242:	2304      	movcc	r3, #4
 8011244:	441d      	add	r5, r3
 8011246:	4473      	add	r3, lr
 8011248:	469e      	mov	lr, r3
 801124a:	462e      	mov	r6, r5
 801124c:	4566      	cmp	r6, ip
 801124e:	d30e      	bcc.n	801126e <__mdiff+0xea>
 8011250:	f10c 0203 	add.w	r2, ip, #3
 8011254:	1b52      	subs	r2, r2, r5
 8011256:	f022 0203 	bic.w	r2, r2, #3
 801125a:	3d03      	subs	r5, #3
 801125c:	45ac      	cmp	ip, r5
 801125e:	bf38      	it	cc
 8011260:	2200      	movcc	r2, #0
 8011262:	4413      	add	r3, r2
 8011264:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011268:	b17a      	cbz	r2, 801128a <__mdiff+0x106>
 801126a:	6107      	str	r7, [r0, #16]
 801126c:	e7a4      	b.n	80111b8 <__mdiff+0x34>
 801126e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011272:	fa11 f288 	uxtah	r2, r1, r8
 8011276:	1414      	asrs	r4, r2, #16
 8011278:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801127c:	b292      	uxth	r2, r2
 801127e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011282:	f84e 2b04 	str.w	r2, [lr], #4
 8011286:	1421      	asrs	r1, r4, #16
 8011288:	e7e0      	b.n	801124c <__mdiff+0xc8>
 801128a:	3f01      	subs	r7, #1
 801128c:	e7ea      	b.n	8011264 <__mdiff+0xe0>
 801128e:	bf00      	nop
 8011290:	08013e72 	.word	0x08013e72
 8011294:	08013e83 	.word	0x08013e83

08011298 <__d2b>:
 8011298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801129c:	460f      	mov	r7, r1
 801129e:	2101      	movs	r1, #1
 80112a0:	ec59 8b10 	vmov	r8, r9, d0
 80112a4:	4616      	mov	r6, r2
 80112a6:	f7ff fcd5 	bl	8010c54 <_Balloc>
 80112aa:	4604      	mov	r4, r0
 80112ac:	b930      	cbnz	r0, 80112bc <__d2b+0x24>
 80112ae:	4602      	mov	r2, r0
 80112b0:	4b24      	ldr	r3, [pc, #144]	; (8011344 <__d2b+0xac>)
 80112b2:	4825      	ldr	r0, [pc, #148]	; (8011348 <__d2b+0xb0>)
 80112b4:	f240 310f 	movw	r1, #783	; 0x30f
 80112b8:	f000 fe0c 	bl	8011ed4 <__assert_func>
 80112bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80112c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80112c4:	bb2d      	cbnz	r5, 8011312 <__d2b+0x7a>
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	f1b8 0300 	subs.w	r3, r8, #0
 80112cc:	d026      	beq.n	801131c <__d2b+0x84>
 80112ce:	4668      	mov	r0, sp
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	f7ff fd87 	bl	8010de4 <__lo0bits>
 80112d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80112da:	b1e8      	cbz	r0, 8011318 <__d2b+0x80>
 80112dc:	f1c0 0320 	rsb	r3, r0, #32
 80112e0:	fa02 f303 	lsl.w	r3, r2, r3
 80112e4:	430b      	orrs	r3, r1
 80112e6:	40c2      	lsrs	r2, r0
 80112e8:	6163      	str	r3, [r4, #20]
 80112ea:	9201      	str	r2, [sp, #4]
 80112ec:	9b01      	ldr	r3, [sp, #4]
 80112ee:	61a3      	str	r3, [r4, #24]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	bf14      	ite	ne
 80112f4:	2202      	movne	r2, #2
 80112f6:	2201      	moveq	r2, #1
 80112f8:	6122      	str	r2, [r4, #16]
 80112fa:	b1bd      	cbz	r5, 801132c <__d2b+0x94>
 80112fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011300:	4405      	add	r5, r0
 8011302:	603d      	str	r5, [r7, #0]
 8011304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011308:	6030      	str	r0, [r6, #0]
 801130a:	4620      	mov	r0, r4
 801130c:	b003      	add	sp, #12
 801130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011316:	e7d6      	b.n	80112c6 <__d2b+0x2e>
 8011318:	6161      	str	r1, [r4, #20]
 801131a:	e7e7      	b.n	80112ec <__d2b+0x54>
 801131c:	a801      	add	r0, sp, #4
 801131e:	f7ff fd61 	bl	8010de4 <__lo0bits>
 8011322:	9b01      	ldr	r3, [sp, #4]
 8011324:	6163      	str	r3, [r4, #20]
 8011326:	3020      	adds	r0, #32
 8011328:	2201      	movs	r2, #1
 801132a:	e7e5      	b.n	80112f8 <__d2b+0x60>
 801132c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011330:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011334:	6038      	str	r0, [r7, #0]
 8011336:	6918      	ldr	r0, [r3, #16]
 8011338:	f7ff fd34 	bl	8010da4 <__hi0bits>
 801133c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011340:	e7e2      	b.n	8011308 <__d2b+0x70>
 8011342:	bf00      	nop
 8011344:	08013e72 	.word	0x08013e72
 8011348:	08013e83 	.word	0x08013e83

0801134c <__ssputs_r>:
 801134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011350:	688e      	ldr	r6, [r1, #8]
 8011352:	461f      	mov	r7, r3
 8011354:	42be      	cmp	r6, r7
 8011356:	680b      	ldr	r3, [r1, #0]
 8011358:	4682      	mov	sl, r0
 801135a:	460c      	mov	r4, r1
 801135c:	4690      	mov	r8, r2
 801135e:	d82c      	bhi.n	80113ba <__ssputs_r+0x6e>
 8011360:	898a      	ldrh	r2, [r1, #12]
 8011362:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011366:	d026      	beq.n	80113b6 <__ssputs_r+0x6a>
 8011368:	6965      	ldr	r5, [r4, #20]
 801136a:	6909      	ldr	r1, [r1, #16]
 801136c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011370:	eba3 0901 	sub.w	r9, r3, r1
 8011374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011378:	1c7b      	adds	r3, r7, #1
 801137a:	444b      	add	r3, r9
 801137c:	106d      	asrs	r5, r5, #1
 801137e:	429d      	cmp	r5, r3
 8011380:	bf38      	it	cc
 8011382:	461d      	movcc	r5, r3
 8011384:	0553      	lsls	r3, r2, #21
 8011386:	d527      	bpl.n	80113d8 <__ssputs_r+0x8c>
 8011388:	4629      	mov	r1, r5
 801138a:	f7ff fbd7 	bl	8010b3c <_malloc_r>
 801138e:	4606      	mov	r6, r0
 8011390:	b360      	cbz	r0, 80113ec <__ssputs_r+0xa0>
 8011392:	6921      	ldr	r1, [r4, #16]
 8011394:	464a      	mov	r2, r9
 8011396:	f7fe fcd2 	bl	800fd3e <memcpy>
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113a4:	81a3      	strh	r3, [r4, #12]
 80113a6:	6126      	str	r6, [r4, #16]
 80113a8:	6165      	str	r5, [r4, #20]
 80113aa:	444e      	add	r6, r9
 80113ac:	eba5 0509 	sub.w	r5, r5, r9
 80113b0:	6026      	str	r6, [r4, #0]
 80113b2:	60a5      	str	r5, [r4, #8]
 80113b4:	463e      	mov	r6, r7
 80113b6:	42be      	cmp	r6, r7
 80113b8:	d900      	bls.n	80113bc <__ssputs_r+0x70>
 80113ba:	463e      	mov	r6, r7
 80113bc:	6820      	ldr	r0, [r4, #0]
 80113be:	4632      	mov	r2, r6
 80113c0:	4641      	mov	r1, r8
 80113c2:	f000 fd5c 	bl	8011e7e <memmove>
 80113c6:	68a3      	ldr	r3, [r4, #8]
 80113c8:	1b9b      	subs	r3, r3, r6
 80113ca:	60a3      	str	r3, [r4, #8]
 80113cc:	6823      	ldr	r3, [r4, #0]
 80113ce:	4433      	add	r3, r6
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	2000      	movs	r0, #0
 80113d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d8:	462a      	mov	r2, r5
 80113da:	f000 fdc1 	bl	8011f60 <_realloc_r>
 80113de:	4606      	mov	r6, r0
 80113e0:	2800      	cmp	r0, #0
 80113e2:	d1e0      	bne.n	80113a6 <__ssputs_r+0x5a>
 80113e4:	6921      	ldr	r1, [r4, #16]
 80113e6:	4650      	mov	r0, sl
 80113e8:	f7ff fb34 	bl	8010a54 <_free_r>
 80113ec:	230c      	movs	r3, #12
 80113ee:	f8ca 3000 	str.w	r3, [sl]
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	f04f 30ff 	mov.w	r0, #4294967295
 80113fe:	e7e9      	b.n	80113d4 <__ssputs_r+0x88>

08011400 <_svfiprintf_r>:
 8011400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4698      	mov	r8, r3
 8011406:	898b      	ldrh	r3, [r1, #12]
 8011408:	061b      	lsls	r3, r3, #24
 801140a:	b09d      	sub	sp, #116	; 0x74
 801140c:	4607      	mov	r7, r0
 801140e:	460d      	mov	r5, r1
 8011410:	4614      	mov	r4, r2
 8011412:	d50e      	bpl.n	8011432 <_svfiprintf_r+0x32>
 8011414:	690b      	ldr	r3, [r1, #16]
 8011416:	b963      	cbnz	r3, 8011432 <_svfiprintf_r+0x32>
 8011418:	2140      	movs	r1, #64	; 0x40
 801141a:	f7ff fb8f 	bl	8010b3c <_malloc_r>
 801141e:	6028      	str	r0, [r5, #0]
 8011420:	6128      	str	r0, [r5, #16]
 8011422:	b920      	cbnz	r0, 801142e <_svfiprintf_r+0x2e>
 8011424:	230c      	movs	r3, #12
 8011426:	603b      	str	r3, [r7, #0]
 8011428:	f04f 30ff 	mov.w	r0, #4294967295
 801142c:	e0d0      	b.n	80115d0 <_svfiprintf_r+0x1d0>
 801142e:	2340      	movs	r3, #64	; 0x40
 8011430:	616b      	str	r3, [r5, #20]
 8011432:	2300      	movs	r3, #0
 8011434:	9309      	str	r3, [sp, #36]	; 0x24
 8011436:	2320      	movs	r3, #32
 8011438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801143c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011440:	2330      	movs	r3, #48	; 0x30
 8011442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80115e8 <_svfiprintf_r+0x1e8>
 8011446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801144a:	f04f 0901 	mov.w	r9, #1
 801144e:	4623      	mov	r3, r4
 8011450:	469a      	mov	sl, r3
 8011452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011456:	b10a      	cbz	r2, 801145c <_svfiprintf_r+0x5c>
 8011458:	2a25      	cmp	r2, #37	; 0x25
 801145a:	d1f9      	bne.n	8011450 <_svfiprintf_r+0x50>
 801145c:	ebba 0b04 	subs.w	fp, sl, r4
 8011460:	d00b      	beq.n	801147a <_svfiprintf_r+0x7a>
 8011462:	465b      	mov	r3, fp
 8011464:	4622      	mov	r2, r4
 8011466:	4629      	mov	r1, r5
 8011468:	4638      	mov	r0, r7
 801146a:	f7ff ff6f 	bl	801134c <__ssputs_r>
 801146e:	3001      	adds	r0, #1
 8011470:	f000 80a9 	beq.w	80115c6 <_svfiprintf_r+0x1c6>
 8011474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011476:	445a      	add	r2, fp
 8011478:	9209      	str	r2, [sp, #36]	; 0x24
 801147a:	f89a 3000 	ldrb.w	r3, [sl]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80a1 	beq.w	80115c6 <_svfiprintf_r+0x1c6>
 8011484:	2300      	movs	r3, #0
 8011486:	f04f 32ff 	mov.w	r2, #4294967295
 801148a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801148e:	f10a 0a01 	add.w	sl, sl, #1
 8011492:	9304      	str	r3, [sp, #16]
 8011494:	9307      	str	r3, [sp, #28]
 8011496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801149a:	931a      	str	r3, [sp, #104]	; 0x68
 801149c:	4654      	mov	r4, sl
 801149e:	2205      	movs	r2, #5
 80114a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114a4:	4850      	ldr	r0, [pc, #320]	; (80115e8 <_svfiprintf_r+0x1e8>)
 80114a6:	f7ee febb 	bl	8000220 <memchr>
 80114aa:	9a04      	ldr	r2, [sp, #16]
 80114ac:	b9d8      	cbnz	r0, 80114e6 <_svfiprintf_r+0xe6>
 80114ae:	06d0      	lsls	r0, r2, #27
 80114b0:	bf44      	itt	mi
 80114b2:	2320      	movmi	r3, #32
 80114b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114b8:	0711      	lsls	r1, r2, #28
 80114ba:	bf44      	itt	mi
 80114bc:	232b      	movmi	r3, #43	; 0x2b
 80114be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114c2:	f89a 3000 	ldrb.w	r3, [sl]
 80114c6:	2b2a      	cmp	r3, #42	; 0x2a
 80114c8:	d015      	beq.n	80114f6 <_svfiprintf_r+0xf6>
 80114ca:	9a07      	ldr	r2, [sp, #28]
 80114cc:	4654      	mov	r4, sl
 80114ce:	2000      	movs	r0, #0
 80114d0:	f04f 0c0a 	mov.w	ip, #10
 80114d4:	4621      	mov	r1, r4
 80114d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114da:	3b30      	subs	r3, #48	; 0x30
 80114dc:	2b09      	cmp	r3, #9
 80114de:	d94d      	bls.n	801157c <_svfiprintf_r+0x17c>
 80114e0:	b1b0      	cbz	r0, 8011510 <_svfiprintf_r+0x110>
 80114e2:	9207      	str	r2, [sp, #28]
 80114e4:	e014      	b.n	8011510 <_svfiprintf_r+0x110>
 80114e6:	eba0 0308 	sub.w	r3, r0, r8
 80114ea:	fa09 f303 	lsl.w	r3, r9, r3
 80114ee:	4313      	orrs	r3, r2
 80114f0:	9304      	str	r3, [sp, #16]
 80114f2:	46a2      	mov	sl, r4
 80114f4:	e7d2      	b.n	801149c <_svfiprintf_r+0x9c>
 80114f6:	9b03      	ldr	r3, [sp, #12]
 80114f8:	1d19      	adds	r1, r3, #4
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	9103      	str	r1, [sp, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	bfbb      	ittet	lt
 8011502:	425b      	neglt	r3, r3
 8011504:	f042 0202 	orrlt.w	r2, r2, #2
 8011508:	9307      	strge	r3, [sp, #28]
 801150a:	9307      	strlt	r3, [sp, #28]
 801150c:	bfb8      	it	lt
 801150e:	9204      	strlt	r2, [sp, #16]
 8011510:	7823      	ldrb	r3, [r4, #0]
 8011512:	2b2e      	cmp	r3, #46	; 0x2e
 8011514:	d10c      	bne.n	8011530 <_svfiprintf_r+0x130>
 8011516:	7863      	ldrb	r3, [r4, #1]
 8011518:	2b2a      	cmp	r3, #42	; 0x2a
 801151a:	d134      	bne.n	8011586 <_svfiprintf_r+0x186>
 801151c:	9b03      	ldr	r3, [sp, #12]
 801151e:	1d1a      	adds	r2, r3, #4
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	9203      	str	r2, [sp, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	bfb8      	it	lt
 8011528:	f04f 33ff 	movlt.w	r3, #4294967295
 801152c:	3402      	adds	r4, #2
 801152e:	9305      	str	r3, [sp, #20]
 8011530:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80115f8 <_svfiprintf_r+0x1f8>
 8011534:	7821      	ldrb	r1, [r4, #0]
 8011536:	2203      	movs	r2, #3
 8011538:	4650      	mov	r0, sl
 801153a:	f7ee fe71 	bl	8000220 <memchr>
 801153e:	b138      	cbz	r0, 8011550 <_svfiprintf_r+0x150>
 8011540:	9b04      	ldr	r3, [sp, #16]
 8011542:	eba0 000a 	sub.w	r0, r0, sl
 8011546:	2240      	movs	r2, #64	; 0x40
 8011548:	4082      	lsls	r2, r0
 801154a:	4313      	orrs	r3, r2
 801154c:	3401      	adds	r4, #1
 801154e:	9304      	str	r3, [sp, #16]
 8011550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011554:	4825      	ldr	r0, [pc, #148]	; (80115ec <_svfiprintf_r+0x1ec>)
 8011556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801155a:	2206      	movs	r2, #6
 801155c:	f7ee fe60 	bl	8000220 <memchr>
 8011560:	2800      	cmp	r0, #0
 8011562:	d038      	beq.n	80115d6 <_svfiprintf_r+0x1d6>
 8011564:	4b22      	ldr	r3, [pc, #136]	; (80115f0 <_svfiprintf_r+0x1f0>)
 8011566:	bb1b      	cbnz	r3, 80115b0 <_svfiprintf_r+0x1b0>
 8011568:	9b03      	ldr	r3, [sp, #12]
 801156a:	3307      	adds	r3, #7
 801156c:	f023 0307 	bic.w	r3, r3, #7
 8011570:	3308      	adds	r3, #8
 8011572:	9303      	str	r3, [sp, #12]
 8011574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011576:	4433      	add	r3, r6
 8011578:	9309      	str	r3, [sp, #36]	; 0x24
 801157a:	e768      	b.n	801144e <_svfiprintf_r+0x4e>
 801157c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011580:	460c      	mov	r4, r1
 8011582:	2001      	movs	r0, #1
 8011584:	e7a6      	b.n	80114d4 <_svfiprintf_r+0xd4>
 8011586:	2300      	movs	r3, #0
 8011588:	3401      	adds	r4, #1
 801158a:	9305      	str	r3, [sp, #20]
 801158c:	4619      	mov	r1, r3
 801158e:	f04f 0c0a 	mov.w	ip, #10
 8011592:	4620      	mov	r0, r4
 8011594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011598:	3a30      	subs	r2, #48	; 0x30
 801159a:	2a09      	cmp	r2, #9
 801159c:	d903      	bls.n	80115a6 <_svfiprintf_r+0x1a6>
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d0c6      	beq.n	8011530 <_svfiprintf_r+0x130>
 80115a2:	9105      	str	r1, [sp, #20]
 80115a4:	e7c4      	b.n	8011530 <_svfiprintf_r+0x130>
 80115a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80115aa:	4604      	mov	r4, r0
 80115ac:	2301      	movs	r3, #1
 80115ae:	e7f0      	b.n	8011592 <_svfiprintf_r+0x192>
 80115b0:	ab03      	add	r3, sp, #12
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	462a      	mov	r2, r5
 80115b6:	4b0f      	ldr	r3, [pc, #60]	; (80115f4 <_svfiprintf_r+0x1f4>)
 80115b8:	a904      	add	r1, sp, #16
 80115ba:	4638      	mov	r0, r7
 80115bc:	f7fd fdbe 	bl	800f13c <_printf_float>
 80115c0:	1c42      	adds	r2, r0, #1
 80115c2:	4606      	mov	r6, r0
 80115c4:	d1d6      	bne.n	8011574 <_svfiprintf_r+0x174>
 80115c6:	89ab      	ldrh	r3, [r5, #12]
 80115c8:	065b      	lsls	r3, r3, #25
 80115ca:	f53f af2d 	bmi.w	8011428 <_svfiprintf_r+0x28>
 80115ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115d0:	b01d      	add	sp, #116	; 0x74
 80115d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d6:	ab03      	add	r3, sp, #12
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	462a      	mov	r2, r5
 80115dc:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <_svfiprintf_r+0x1f4>)
 80115de:	a904      	add	r1, sp, #16
 80115e0:	4638      	mov	r0, r7
 80115e2:	f7fe f84f 	bl	800f684 <_printf_i>
 80115e6:	e7eb      	b.n	80115c0 <_svfiprintf_r+0x1c0>
 80115e8:	08013fdc 	.word	0x08013fdc
 80115ec:	08013fe6 	.word	0x08013fe6
 80115f0:	0800f13d 	.word	0x0800f13d
 80115f4:	0801134d 	.word	0x0801134d
 80115f8:	08013fe2 	.word	0x08013fe2

080115fc <_sungetc_r>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	1c4b      	adds	r3, r1, #1
 8011600:	4614      	mov	r4, r2
 8011602:	d103      	bne.n	801160c <_sungetc_r+0x10>
 8011604:	f04f 35ff 	mov.w	r5, #4294967295
 8011608:	4628      	mov	r0, r5
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	8993      	ldrh	r3, [r2, #12]
 801160e:	f023 0320 	bic.w	r3, r3, #32
 8011612:	8193      	strh	r3, [r2, #12]
 8011614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011616:	6852      	ldr	r2, [r2, #4]
 8011618:	b2cd      	uxtb	r5, r1
 801161a:	b18b      	cbz	r3, 8011640 <_sungetc_r+0x44>
 801161c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801161e:	4293      	cmp	r3, r2
 8011620:	dd08      	ble.n	8011634 <_sungetc_r+0x38>
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	1e5a      	subs	r2, r3, #1
 8011626:	6022      	str	r2, [r4, #0]
 8011628:	f803 5c01 	strb.w	r5, [r3, #-1]
 801162c:	6863      	ldr	r3, [r4, #4]
 801162e:	3301      	adds	r3, #1
 8011630:	6063      	str	r3, [r4, #4]
 8011632:	e7e9      	b.n	8011608 <_sungetc_r+0xc>
 8011634:	4621      	mov	r1, r4
 8011636:	f000 fbe8 	bl	8011e0a <__submore>
 801163a:	2800      	cmp	r0, #0
 801163c:	d0f1      	beq.n	8011622 <_sungetc_r+0x26>
 801163e:	e7e1      	b.n	8011604 <_sungetc_r+0x8>
 8011640:	6921      	ldr	r1, [r4, #16]
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	b151      	cbz	r1, 801165c <_sungetc_r+0x60>
 8011646:	4299      	cmp	r1, r3
 8011648:	d208      	bcs.n	801165c <_sungetc_r+0x60>
 801164a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801164e:	42a9      	cmp	r1, r5
 8011650:	d104      	bne.n	801165c <_sungetc_r+0x60>
 8011652:	3b01      	subs	r3, #1
 8011654:	3201      	adds	r2, #1
 8011656:	6023      	str	r3, [r4, #0]
 8011658:	6062      	str	r2, [r4, #4]
 801165a:	e7d5      	b.n	8011608 <_sungetc_r+0xc>
 801165c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011664:	6363      	str	r3, [r4, #52]	; 0x34
 8011666:	2303      	movs	r3, #3
 8011668:	63a3      	str	r3, [r4, #56]	; 0x38
 801166a:	4623      	mov	r3, r4
 801166c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011670:	6023      	str	r3, [r4, #0]
 8011672:	2301      	movs	r3, #1
 8011674:	e7dc      	b.n	8011630 <_sungetc_r+0x34>

08011676 <__ssrefill_r>:
 8011676:	b510      	push	{r4, lr}
 8011678:	460c      	mov	r4, r1
 801167a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801167c:	b169      	cbz	r1, 801169a <__ssrefill_r+0x24>
 801167e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011682:	4299      	cmp	r1, r3
 8011684:	d001      	beq.n	801168a <__ssrefill_r+0x14>
 8011686:	f7ff f9e5 	bl	8010a54 <_free_r>
 801168a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801168c:	6063      	str	r3, [r4, #4]
 801168e:	2000      	movs	r0, #0
 8011690:	6360      	str	r0, [r4, #52]	; 0x34
 8011692:	b113      	cbz	r3, 801169a <__ssrefill_r+0x24>
 8011694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011696:	6023      	str	r3, [r4, #0]
 8011698:	bd10      	pop	{r4, pc}
 801169a:	6923      	ldr	r3, [r4, #16]
 801169c:	6023      	str	r3, [r4, #0]
 801169e:	2300      	movs	r3, #0
 80116a0:	6063      	str	r3, [r4, #4]
 80116a2:	89a3      	ldrh	r3, [r4, #12]
 80116a4:	f043 0320 	orr.w	r3, r3, #32
 80116a8:	81a3      	strh	r3, [r4, #12]
 80116aa:	f04f 30ff 	mov.w	r0, #4294967295
 80116ae:	e7f3      	b.n	8011698 <__ssrefill_r+0x22>

080116b0 <__ssvfiscanf_r>:
 80116b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b4:	460c      	mov	r4, r1
 80116b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80116ba:	2100      	movs	r1, #0
 80116bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80116c0:	49a6      	ldr	r1, [pc, #664]	; (801195c <__ssvfiscanf_r+0x2ac>)
 80116c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80116c4:	f10d 0804 	add.w	r8, sp, #4
 80116c8:	49a5      	ldr	r1, [pc, #660]	; (8011960 <__ssvfiscanf_r+0x2b0>)
 80116ca:	4fa6      	ldr	r7, [pc, #664]	; (8011964 <__ssvfiscanf_r+0x2b4>)
 80116cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011968 <__ssvfiscanf_r+0x2b8>
 80116d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80116d4:	4606      	mov	r6, r0
 80116d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80116d8:	9300      	str	r3, [sp, #0]
 80116da:	7813      	ldrb	r3, [r2, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 815a 	beq.w	8011996 <__ssvfiscanf_r+0x2e6>
 80116e2:	5cf9      	ldrb	r1, [r7, r3]
 80116e4:	f011 0108 	ands.w	r1, r1, #8
 80116e8:	f102 0501 	add.w	r5, r2, #1
 80116ec:	d019      	beq.n	8011722 <__ssvfiscanf_r+0x72>
 80116ee:	6863      	ldr	r3, [r4, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	dd0f      	ble.n	8011714 <__ssvfiscanf_r+0x64>
 80116f4:	6823      	ldr	r3, [r4, #0]
 80116f6:	781a      	ldrb	r2, [r3, #0]
 80116f8:	5cba      	ldrb	r2, [r7, r2]
 80116fa:	0712      	lsls	r2, r2, #28
 80116fc:	d401      	bmi.n	8011702 <__ssvfiscanf_r+0x52>
 80116fe:	462a      	mov	r2, r5
 8011700:	e7eb      	b.n	80116da <__ssvfiscanf_r+0x2a>
 8011702:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011704:	3201      	adds	r2, #1
 8011706:	9245      	str	r2, [sp, #276]	; 0x114
 8011708:	6862      	ldr	r2, [r4, #4]
 801170a:	3301      	adds	r3, #1
 801170c:	3a01      	subs	r2, #1
 801170e:	6062      	str	r2, [r4, #4]
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	e7ec      	b.n	80116ee <__ssvfiscanf_r+0x3e>
 8011714:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011716:	4621      	mov	r1, r4
 8011718:	4630      	mov	r0, r6
 801171a:	4798      	blx	r3
 801171c:	2800      	cmp	r0, #0
 801171e:	d0e9      	beq.n	80116f4 <__ssvfiscanf_r+0x44>
 8011720:	e7ed      	b.n	80116fe <__ssvfiscanf_r+0x4e>
 8011722:	2b25      	cmp	r3, #37	; 0x25
 8011724:	d012      	beq.n	801174c <__ssvfiscanf_r+0x9c>
 8011726:	469a      	mov	sl, r3
 8011728:	6863      	ldr	r3, [r4, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	f340 8091 	ble.w	8011852 <__ssvfiscanf_r+0x1a2>
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	7813      	ldrb	r3, [r2, #0]
 8011734:	4553      	cmp	r3, sl
 8011736:	f040 812e 	bne.w	8011996 <__ssvfiscanf_r+0x2e6>
 801173a:	6863      	ldr	r3, [r4, #4]
 801173c:	3b01      	subs	r3, #1
 801173e:	6063      	str	r3, [r4, #4]
 8011740:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011742:	3201      	adds	r2, #1
 8011744:	3301      	adds	r3, #1
 8011746:	6022      	str	r2, [r4, #0]
 8011748:	9345      	str	r3, [sp, #276]	; 0x114
 801174a:	e7d8      	b.n	80116fe <__ssvfiscanf_r+0x4e>
 801174c:	9141      	str	r1, [sp, #260]	; 0x104
 801174e:	9143      	str	r1, [sp, #268]	; 0x10c
 8011750:	7853      	ldrb	r3, [r2, #1]
 8011752:	2b2a      	cmp	r3, #42	; 0x2a
 8011754:	bf02      	ittt	eq
 8011756:	2310      	moveq	r3, #16
 8011758:	1c95      	addeq	r5, r2, #2
 801175a:	9341      	streq	r3, [sp, #260]	; 0x104
 801175c:	220a      	movs	r2, #10
 801175e:	46aa      	mov	sl, r5
 8011760:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011764:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011768:	2b09      	cmp	r3, #9
 801176a:	d91c      	bls.n	80117a6 <__ssvfiscanf_r+0xf6>
 801176c:	487e      	ldr	r0, [pc, #504]	; (8011968 <__ssvfiscanf_r+0x2b8>)
 801176e:	2203      	movs	r2, #3
 8011770:	f7ee fd56 	bl	8000220 <memchr>
 8011774:	b138      	cbz	r0, 8011786 <__ssvfiscanf_r+0xd6>
 8011776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011778:	eba0 0009 	sub.w	r0, r0, r9
 801177c:	2301      	movs	r3, #1
 801177e:	4083      	lsls	r3, r0
 8011780:	4313      	orrs	r3, r2
 8011782:	9341      	str	r3, [sp, #260]	; 0x104
 8011784:	4655      	mov	r5, sl
 8011786:	f815 3b01 	ldrb.w	r3, [r5], #1
 801178a:	2b78      	cmp	r3, #120	; 0x78
 801178c:	d806      	bhi.n	801179c <__ssvfiscanf_r+0xec>
 801178e:	2b57      	cmp	r3, #87	; 0x57
 8011790:	d810      	bhi.n	80117b4 <__ssvfiscanf_r+0x104>
 8011792:	2b25      	cmp	r3, #37	; 0x25
 8011794:	d0c7      	beq.n	8011726 <__ssvfiscanf_r+0x76>
 8011796:	d857      	bhi.n	8011848 <__ssvfiscanf_r+0x198>
 8011798:	2b00      	cmp	r3, #0
 801179a:	d065      	beq.n	8011868 <__ssvfiscanf_r+0x1b8>
 801179c:	2303      	movs	r3, #3
 801179e:	9347      	str	r3, [sp, #284]	; 0x11c
 80117a0:	230a      	movs	r3, #10
 80117a2:	9342      	str	r3, [sp, #264]	; 0x108
 80117a4:	e076      	b.n	8011894 <__ssvfiscanf_r+0x1e4>
 80117a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80117a8:	fb02 1103 	mla	r1, r2, r3, r1
 80117ac:	3930      	subs	r1, #48	; 0x30
 80117ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80117b0:	4655      	mov	r5, sl
 80117b2:	e7d4      	b.n	801175e <__ssvfiscanf_r+0xae>
 80117b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80117b8:	2a20      	cmp	r2, #32
 80117ba:	d8ef      	bhi.n	801179c <__ssvfiscanf_r+0xec>
 80117bc:	a101      	add	r1, pc, #4	; (adr r1, 80117c4 <__ssvfiscanf_r+0x114>)
 80117be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80117c2:	bf00      	nop
 80117c4:	08011877 	.word	0x08011877
 80117c8:	0801179d 	.word	0x0801179d
 80117cc:	0801179d 	.word	0x0801179d
 80117d0:	080118d5 	.word	0x080118d5
 80117d4:	0801179d 	.word	0x0801179d
 80117d8:	0801179d 	.word	0x0801179d
 80117dc:	0801179d 	.word	0x0801179d
 80117e0:	0801179d 	.word	0x0801179d
 80117e4:	0801179d 	.word	0x0801179d
 80117e8:	0801179d 	.word	0x0801179d
 80117ec:	0801179d 	.word	0x0801179d
 80117f0:	080118eb 	.word	0x080118eb
 80117f4:	080118d1 	.word	0x080118d1
 80117f8:	0801184f 	.word	0x0801184f
 80117fc:	0801184f 	.word	0x0801184f
 8011800:	0801184f 	.word	0x0801184f
 8011804:	0801179d 	.word	0x0801179d
 8011808:	0801188d 	.word	0x0801188d
 801180c:	0801179d 	.word	0x0801179d
 8011810:	0801179d 	.word	0x0801179d
 8011814:	0801179d 	.word	0x0801179d
 8011818:	0801179d 	.word	0x0801179d
 801181c:	080118fb 	.word	0x080118fb
 8011820:	080118c9 	.word	0x080118c9
 8011824:	0801186f 	.word	0x0801186f
 8011828:	0801179d 	.word	0x0801179d
 801182c:	0801179d 	.word	0x0801179d
 8011830:	080118f7 	.word	0x080118f7
 8011834:	0801179d 	.word	0x0801179d
 8011838:	080118d1 	.word	0x080118d1
 801183c:	0801179d 	.word	0x0801179d
 8011840:	0801179d 	.word	0x0801179d
 8011844:	08011877 	.word	0x08011877
 8011848:	3b45      	subs	r3, #69	; 0x45
 801184a:	2b02      	cmp	r3, #2
 801184c:	d8a6      	bhi.n	801179c <__ssvfiscanf_r+0xec>
 801184e:	2305      	movs	r3, #5
 8011850:	e01f      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 8011852:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011854:	4621      	mov	r1, r4
 8011856:	4630      	mov	r0, r6
 8011858:	4798      	blx	r3
 801185a:	2800      	cmp	r0, #0
 801185c:	f43f af68 	beq.w	8011730 <__ssvfiscanf_r+0x80>
 8011860:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011862:	2800      	cmp	r0, #0
 8011864:	f040 808d 	bne.w	8011982 <__ssvfiscanf_r+0x2d2>
 8011868:	f04f 30ff 	mov.w	r0, #4294967295
 801186c:	e08f      	b.n	801198e <__ssvfiscanf_r+0x2de>
 801186e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011870:	f042 0220 	orr.w	r2, r2, #32
 8011874:	9241      	str	r2, [sp, #260]	; 0x104
 8011876:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801187c:	9241      	str	r2, [sp, #260]	; 0x104
 801187e:	2210      	movs	r2, #16
 8011880:	2b6f      	cmp	r3, #111	; 0x6f
 8011882:	9242      	str	r2, [sp, #264]	; 0x108
 8011884:	bf34      	ite	cc
 8011886:	2303      	movcc	r3, #3
 8011888:	2304      	movcs	r3, #4
 801188a:	e002      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 801188c:	2300      	movs	r3, #0
 801188e:	9342      	str	r3, [sp, #264]	; 0x108
 8011890:	2303      	movs	r3, #3
 8011892:	9347      	str	r3, [sp, #284]	; 0x11c
 8011894:	6863      	ldr	r3, [r4, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	dd3d      	ble.n	8011916 <__ssvfiscanf_r+0x266>
 801189a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801189c:	0659      	lsls	r1, r3, #25
 801189e:	d404      	bmi.n	80118aa <__ssvfiscanf_r+0x1fa>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	781a      	ldrb	r2, [r3, #0]
 80118a4:	5cba      	ldrb	r2, [r7, r2]
 80118a6:	0712      	lsls	r2, r2, #28
 80118a8:	d43c      	bmi.n	8011924 <__ssvfiscanf_r+0x274>
 80118aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80118ac:	2b02      	cmp	r3, #2
 80118ae:	dc4b      	bgt.n	8011948 <__ssvfiscanf_r+0x298>
 80118b0:	466b      	mov	r3, sp
 80118b2:	4622      	mov	r2, r4
 80118b4:	a941      	add	r1, sp, #260	; 0x104
 80118b6:	4630      	mov	r0, r6
 80118b8:	f000 f872 	bl	80119a0 <_scanf_chars>
 80118bc:	2801      	cmp	r0, #1
 80118be:	d06a      	beq.n	8011996 <__ssvfiscanf_r+0x2e6>
 80118c0:	2802      	cmp	r0, #2
 80118c2:	f47f af1c 	bne.w	80116fe <__ssvfiscanf_r+0x4e>
 80118c6:	e7cb      	b.n	8011860 <__ssvfiscanf_r+0x1b0>
 80118c8:	2308      	movs	r3, #8
 80118ca:	9342      	str	r3, [sp, #264]	; 0x108
 80118cc:	2304      	movs	r3, #4
 80118ce:	e7e0      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 80118d0:	220a      	movs	r2, #10
 80118d2:	e7d5      	b.n	8011880 <__ssvfiscanf_r+0x1d0>
 80118d4:	4629      	mov	r1, r5
 80118d6:	4640      	mov	r0, r8
 80118d8:	f000 fa5e 	bl	8011d98 <__sccl>
 80118dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80118de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e2:	9341      	str	r3, [sp, #260]	; 0x104
 80118e4:	4605      	mov	r5, r0
 80118e6:	2301      	movs	r3, #1
 80118e8:	e7d3      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 80118ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80118ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118f0:	9341      	str	r3, [sp, #260]	; 0x104
 80118f2:	2300      	movs	r3, #0
 80118f4:	e7cd      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 80118f6:	2302      	movs	r3, #2
 80118f8:	e7cb      	b.n	8011892 <__ssvfiscanf_r+0x1e2>
 80118fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80118fc:	06c3      	lsls	r3, r0, #27
 80118fe:	f53f aefe 	bmi.w	80116fe <__ssvfiscanf_r+0x4e>
 8011902:	9b00      	ldr	r3, [sp, #0]
 8011904:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011906:	1d19      	adds	r1, r3, #4
 8011908:	9100      	str	r1, [sp, #0]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	07c0      	lsls	r0, r0, #31
 801190e:	bf4c      	ite	mi
 8011910:	801a      	strhmi	r2, [r3, #0]
 8011912:	601a      	strpl	r2, [r3, #0]
 8011914:	e6f3      	b.n	80116fe <__ssvfiscanf_r+0x4e>
 8011916:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011918:	4621      	mov	r1, r4
 801191a:	4630      	mov	r0, r6
 801191c:	4798      	blx	r3
 801191e:	2800      	cmp	r0, #0
 8011920:	d0bb      	beq.n	801189a <__ssvfiscanf_r+0x1ea>
 8011922:	e79d      	b.n	8011860 <__ssvfiscanf_r+0x1b0>
 8011924:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011926:	3201      	adds	r2, #1
 8011928:	9245      	str	r2, [sp, #276]	; 0x114
 801192a:	6862      	ldr	r2, [r4, #4]
 801192c:	3a01      	subs	r2, #1
 801192e:	2a00      	cmp	r2, #0
 8011930:	6062      	str	r2, [r4, #4]
 8011932:	dd02      	ble.n	801193a <__ssvfiscanf_r+0x28a>
 8011934:	3301      	adds	r3, #1
 8011936:	6023      	str	r3, [r4, #0]
 8011938:	e7b2      	b.n	80118a0 <__ssvfiscanf_r+0x1f0>
 801193a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801193c:	4621      	mov	r1, r4
 801193e:	4630      	mov	r0, r6
 8011940:	4798      	blx	r3
 8011942:	2800      	cmp	r0, #0
 8011944:	d0ac      	beq.n	80118a0 <__ssvfiscanf_r+0x1f0>
 8011946:	e78b      	b.n	8011860 <__ssvfiscanf_r+0x1b0>
 8011948:	2b04      	cmp	r3, #4
 801194a:	dc0f      	bgt.n	801196c <__ssvfiscanf_r+0x2bc>
 801194c:	466b      	mov	r3, sp
 801194e:	4622      	mov	r2, r4
 8011950:	a941      	add	r1, sp, #260	; 0x104
 8011952:	4630      	mov	r0, r6
 8011954:	f000 f87e 	bl	8011a54 <_scanf_i>
 8011958:	e7b0      	b.n	80118bc <__ssvfiscanf_r+0x20c>
 801195a:	bf00      	nop
 801195c:	080115fd 	.word	0x080115fd
 8011960:	08011677 	.word	0x08011677
 8011964:	0801404f 	.word	0x0801404f
 8011968:	08013fe2 	.word	0x08013fe2
 801196c:	4b0b      	ldr	r3, [pc, #44]	; (801199c <__ssvfiscanf_r+0x2ec>)
 801196e:	2b00      	cmp	r3, #0
 8011970:	f43f aec5 	beq.w	80116fe <__ssvfiscanf_r+0x4e>
 8011974:	466b      	mov	r3, sp
 8011976:	4622      	mov	r2, r4
 8011978:	a941      	add	r1, sp, #260	; 0x104
 801197a:	4630      	mov	r0, r6
 801197c:	f3af 8000 	nop.w
 8011980:	e79c      	b.n	80118bc <__ssvfiscanf_r+0x20c>
 8011982:	89a3      	ldrh	r3, [r4, #12]
 8011984:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011988:	bf18      	it	ne
 801198a:	f04f 30ff 	movne.w	r0, #4294967295
 801198e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011996:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011998:	e7f9      	b.n	801198e <__ssvfiscanf_r+0x2de>
 801199a:	bf00      	nop
 801199c:	00000000 	.word	0x00000000

080119a0 <_scanf_chars>:
 80119a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119a4:	4615      	mov	r5, r2
 80119a6:	688a      	ldr	r2, [r1, #8]
 80119a8:	4680      	mov	r8, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	b932      	cbnz	r2, 80119bc <_scanf_chars+0x1c>
 80119ae:	698a      	ldr	r2, [r1, #24]
 80119b0:	2a00      	cmp	r2, #0
 80119b2:	bf0c      	ite	eq
 80119b4:	2201      	moveq	r2, #1
 80119b6:	f04f 32ff 	movne.w	r2, #4294967295
 80119ba:	608a      	str	r2, [r1, #8]
 80119bc:	6822      	ldr	r2, [r4, #0]
 80119be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011a50 <_scanf_chars+0xb0>
 80119c2:	06d1      	lsls	r1, r2, #27
 80119c4:	bf5f      	itttt	pl
 80119c6:	681a      	ldrpl	r2, [r3, #0]
 80119c8:	1d11      	addpl	r1, r2, #4
 80119ca:	6019      	strpl	r1, [r3, #0]
 80119cc:	6816      	ldrpl	r6, [r2, #0]
 80119ce:	2700      	movs	r7, #0
 80119d0:	69a0      	ldr	r0, [r4, #24]
 80119d2:	b188      	cbz	r0, 80119f8 <_scanf_chars+0x58>
 80119d4:	2801      	cmp	r0, #1
 80119d6:	d107      	bne.n	80119e8 <_scanf_chars+0x48>
 80119d8:	682a      	ldr	r2, [r5, #0]
 80119da:	7811      	ldrb	r1, [r2, #0]
 80119dc:	6962      	ldr	r2, [r4, #20]
 80119de:	5c52      	ldrb	r2, [r2, r1]
 80119e0:	b952      	cbnz	r2, 80119f8 <_scanf_chars+0x58>
 80119e2:	2f00      	cmp	r7, #0
 80119e4:	d031      	beq.n	8011a4a <_scanf_chars+0xaa>
 80119e6:	e022      	b.n	8011a2e <_scanf_chars+0x8e>
 80119e8:	2802      	cmp	r0, #2
 80119ea:	d120      	bne.n	8011a2e <_scanf_chars+0x8e>
 80119ec:	682b      	ldr	r3, [r5, #0]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80119f4:	071b      	lsls	r3, r3, #28
 80119f6:	d41a      	bmi.n	8011a2e <_scanf_chars+0x8e>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	06da      	lsls	r2, r3, #27
 80119fc:	bf5e      	ittt	pl
 80119fe:	682b      	ldrpl	r3, [r5, #0]
 8011a00:	781b      	ldrbpl	r3, [r3, #0]
 8011a02:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011a06:	682a      	ldr	r2, [r5, #0]
 8011a08:	686b      	ldr	r3, [r5, #4]
 8011a0a:	3201      	adds	r2, #1
 8011a0c:	602a      	str	r2, [r5, #0]
 8011a0e:	68a2      	ldr	r2, [r4, #8]
 8011a10:	3b01      	subs	r3, #1
 8011a12:	3a01      	subs	r2, #1
 8011a14:	606b      	str	r3, [r5, #4]
 8011a16:	3701      	adds	r7, #1
 8011a18:	60a2      	str	r2, [r4, #8]
 8011a1a:	b142      	cbz	r2, 8011a2e <_scanf_chars+0x8e>
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	dcd7      	bgt.n	80119d0 <_scanf_chars+0x30>
 8011a20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011a24:	4629      	mov	r1, r5
 8011a26:	4640      	mov	r0, r8
 8011a28:	4798      	blx	r3
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d0d0      	beq.n	80119d0 <_scanf_chars+0x30>
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	f013 0310 	ands.w	r3, r3, #16
 8011a34:	d105      	bne.n	8011a42 <_scanf_chars+0xa2>
 8011a36:	68e2      	ldr	r2, [r4, #12]
 8011a38:	3201      	adds	r2, #1
 8011a3a:	60e2      	str	r2, [r4, #12]
 8011a3c:	69a2      	ldr	r2, [r4, #24]
 8011a3e:	b102      	cbz	r2, 8011a42 <_scanf_chars+0xa2>
 8011a40:	7033      	strb	r3, [r6, #0]
 8011a42:	6923      	ldr	r3, [r4, #16]
 8011a44:	443b      	add	r3, r7
 8011a46:	6123      	str	r3, [r4, #16]
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a4e:	bf00      	nop
 8011a50:	0801404f 	.word	0x0801404f

08011a54 <_scanf_i>:
 8011a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a58:	4698      	mov	r8, r3
 8011a5a:	4b74      	ldr	r3, [pc, #464]	; (8011c2c <_scanf_i+0x1d8>)
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	4682      	mov	sl, r0
 8011a60:	4616      	mov	r6, r2
 8011a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a66:	b087      	sub	sp, #28
 8011a68:	ab03      	add	r3, sp, #12
 8011a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011a6e:	4b70      	ldr	r3, [pc, #448]	; (8011c30 <_scanf_i+0x1dc>)
 8011a70:	69a1      	ldr	r1, [r4, #24]
 8011a72:	4a70      	ldr	r2, [pc, #448]	; (8011c34 <_scanf_i+0x1e0>)
 8011a74:	2903      	cmp	r1, #3
 8011a76:	bf18      	it	ne
 8011a78:	461a      	movne	r2, r3
 8011a7a:	68a3      	ldr	r3, [r4, #8]
 8011a7c:	9201      	str	r2, [sp, #4]
 8011a7e:	1e5a      	subs	r2, r3, #1
 8011a80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011a84:	bf88      	it	hi
 8011a86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011a8a:	4627      	mov	r7, r4
 8011a8c:	bf82      	ittt	hi
 8011a8e:	eb03 0905 	addhi.w	r9, r3, r5
 8011a92:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011a96:	60a3      	strhi	r3, [r4, #8]
 8011a98:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011a9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011aa0:	bf98      	it	ls
 8011aa2:	f04f 0900 	movls.w	r9, #0
 8011aa6:	6023      	str	r3, [r4, #0]
 8011aa8:	463d      	mov	r5, r7
 8011aaa:	f04f 0b00 	mov.w	fp, #0
 8011aae:	6831      	ldr	r1, [r6, #0]
 8011ab0:	ab03      	add	r3, sp, #12
 8011ab2:	7809      	ldrb	r1, [r1, #0]
 8011ab4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011ab8:	2202      	movs	r2, #2
 8011aba:	f7ee fbb1 	bl	8000220 <memchr>
 8011abe:	b328      	cbz	r0, 8011b0c <_scanf_i+0xb8>
 8011ac0:	f1bb 0f01 	cmp.w	fp, #1
 8011ac4:	d159      	bne.n	8011b7a <_scanf_i+0x126>
 8011ac6:	6862      	ldr	r2, [r4, #4]
 8011ac8:	b92a      	cbnz	r2, 8011ad6 <_scanf_i+0x82>
 8011aca:	6822      	ldr	r2, [r4, #0]
 8011acc:	2308      	movs	r3, #8
 8011ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011ad2:	6063      	str	r3, [r4, #4]
 8011ad4:	6022      	str	r2, [r4, #0]
 8011ad6:	6822      	ldr	r2, [r4, #0]
 8011ad8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011adc:	6022      	str	r2, [r4, #0]
 8011ade:	68a2      	ldr	r2, [r4, #8]
 8011ae0:	1e51      	subs	r1, r2, #1
 8011ae2:	60a1      	str	r1, [r4, #8]
 8011ae4:	b192      	cbz	r2, 8011b0c <_scanf_i+0xb8>
 8011ae6:	6832      	ldr	r2, [r6, #0]
 8011ae8:	1c51      	adds	r1, r2, #1
 8011aea:	6031      	str	r1, [r6, #0]
 8011aec:	7812      	ldrb	r2, [r2, #0]
 8011aee:	f805 2b01 	strb.w	r2, [r5], #1
 8011af2:	6872      	ldr	r2, [r6, #4]
 8011af4:	3a01      	subs	r2, #1
 8011af6:	2a00      	cmp	r2, #0
 8011af8:	6072      	str	r2, [r6, #4]
 8011afa:	dc07      	bgt.n	8011b0c <_scanf_i+0xb8>
 8011afc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011b00:	4631      	mov	r1, r6
 8011b02:	4650      	mov	r0, sl
 8011b04:	4790      	blx	r2
 8011b06:	2800      	cmp	r0, #0
 8011b08:	f040 8085 	bne.w	8011c16 <_scanf_i+0x1c2>
 8011b0c:	f10b 0b01 	add.w	fp, fp, #1
 8011b10:	f1bb 0f03 	cmp.w	fp, #3
 8011b14:	d1cb      	bne.n	8011aae <_scanf_i+0x5a>
 8011b16:	6863      	ldr	r3, [r4, #4]
 8011b18:	b90b      	cbnz	r3, 8011b1e <_scanf_i+0xca>
 8011b1a:	230a      	movs	r3, #10
 8011b1c:	6063      	str	r3, [r4, #4]
 8011b1e:	6863      	ldr	r3, [r4, #4]
 8011b20:	4945      	ldr	r1, [pc, #276]	; (8011c38 <_scanf_i+0x1e4>)
 8011b22:	6960      	ldr	r0, [r4, #20]
 8011b24:	1ac9      	subs	r1, r1, r3
 8011b26:	f000 f937 	bl	8011d98 <__sccl>
 8011b2a:	f04f 0b00 	mov.w	fp, #0
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	6822      	ldr	r2, [r4, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d03d      	beq.n	8011bb2 <_scanf_i+0x15e>
 8011b36:	6831      	ldr	r1, [r6, #0]
 8011b38:	6960      	ldr	r0, [r4, #20]
 8011b3a:	f891 c000 	ldrb.w	ip, [r1]
 8011b3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011b42:	2800      	cmp	r0, #0
 8011b44:	d035      	beq.n	8011bb2 <_scanf_i+0x15e>
 8011b46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011b4a:	d124      	bne.n	8011b96 <_scanf_i+0x142>
 8011b4c:	0510      	lsls	r0, r2, #20
 8011b4e:	d522      	bpl.n	8011b96 <_scanf_i+0x142>
 8011b50:	f10b 0b01 	add.w	fp, fp, #1
 8011b54:	f1b9 0f00 	cmp.w	r9, #0
 8011b58:	d003      	beq.n	8011b62 <_scanf_i+0x10e>
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011b60:	60a3      	str	r3, [r4, #8]
 8011b62:	6873      	ldr	r3, [r6, #4]
 8011b64:	3b01      	subs	r3, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	6073      	str	r3, [r6, #4]
 8011b6a:	dd1b      	ble.n	8011ba4 <_scanf_i+0x150>
 8011b6c:	6833      	ldr	r3, [r6, #0]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	6033      	str	r3, [r6, #0]
 8011b72:	68a3      	ldr	r3, [r4, #8]
 8011b74:	3b01      	subs	r3, #1
 8011b76:	60a3      	str	r3, [r4, #8]
 8011b78:	e7d9      	b.n	8011b2e <_scanf_i+0xda>
 8011b7a:	f1bb 0f02 	cmp.w	fp, #2
 8011b7e:	d1ae      	bne.n	8011ade <_scanf_i+0x8a>
 8011b80:	6822      	ldr	r2, [r4, #0]
 8011b82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011b86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011b8a:	d1bf      	bne.n	8011b0c <_scanf_i+0xb8>
 8011b8c:	2310      	movs	r3, #16
 8011b8e:	6063      	str	r3, [r4, #4]
 8011b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b94:	e7a2      	b.n	8011adc <_scanf_i+0x88>
 8011b96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011b9a:	6022      	str	r2, [r4, #0]
 8011b9c:	780b      	ldrb	r3, [r1, #0]
 8011b9e:	f805 3b01 	strb.w	r3, [r5], #1
 8011ba2:	e7de      	b.n	8011b62 <_scanf_i+0x10e>
 8011ba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011ba8:	4631      	mov	r1, r6
 8011baa:	4650      	mov	r0, sl
 8011bac:	4798      	blx	r3
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	d0df      	beq.n	8011b72 <_scanf_i+0x11e>
 8011bb2:	6823      	ldr	r3, [r4, #0]
 8011bb4:	05d9      	lsls	r1, r3, #23
 8011bb6:	d50d      	bpl.n	8011bd4 <_scanf_i+0x180>
 8011bb8:	42bd      	cmp	r5, r7
 8011bba:	d909      	bls.n	8011bd0 <_scanf_i+0x17c>
 8011bbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011bc4:	4632      	mov	r2, r6
 8011bc6:	4650      	mov	r0, sl
 8011bc8:	4798      	blx	r3
 8011bca:	f105 39ff 	add.w	r9, r5, #4294967295
 8011bce:	464d      	mov	r5, r9
 8011bd0:	42bd      	cmp	r5, r7
 8011bd2:	d028      	beq.n	8011c26 <_scanf_i+0x1d2>
 8011bd4:	6822      	ldr	r2, [r4, #0]
 8011bd6:	f012 0210 	ands.w	r2, r2, #16
 8011bda:	d113      	bne.n	8011c04 <_scanf_i+0x1b0>
 8011bdc:	702a      	strb	r2, [r5, #0]
 8011bde:	6863      	ldr	r3, [r4, #4]
 8011be0:	9e01      	ldr	r6, [sp, #4]
 8011be2:	4639      	mov	r1, r7
 8011be4:	4650      	mov	r0, sl
 8011be6:	47b0      	blx	r6
 8011be8:	f8d8 3000 	ldr.w	r3, [r8]
 8011bec:	6821      	ldr	r1, [r4, #0]
 8011bee:	1d1a      	adds	r2, r3, #4
 8011bf0:	f8c8 2000 	str.w	r2, [r8]
 8011bf4:	f011 0f20 	tst.w	r1, #32
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	d00f      	beq.n	8011c1c <_scanf_i+0x1c8>
 8011bfc:	6018      	str	r0, [r3, #0]
 8011bfe:	68e3      	ldr	r3, [r4, #12]
 8011c00:	3301      	adds	r3, #1
 8011c02:	60e3      	str	r3, [r4, #12]
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	1bed      	subs	r5, r5, r7
 8011c08:	445d      	add	r5, fp
 8011c0a:	442b      	add	r3, r5
 8011c0c:	6123      	str	r3, [r4, #16]
 8011c0e:	2000      	movs	r0, #0
 8011c10:	b007      	add	sp, #28
 8011c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c16:	f04f 0b00 	mov.w	fp, #0
 8011c1a:	e7ca      	b.n	8011bb2 <_scanf_i+0x15e>
 8011c1c:	07ca      	lsls	r2, r1, #31
 8011c1e:	bf4c      	ite	mi
 8011c20:	8018      	strhmi	r0, [r3, #0]
 8011c22:	6018      	strpl	r0, [r3, #0]
 8011c24:	e7eb      	b.n	8011bfe <_scanf_i+0x1aa>
 8011c26:	2001      	movs	r0, #1
 8011c28:	e7f2      	b.n	8011c10 <_scanf_i+0x1bc>
 8011c2a:	bf00      	nop
 8011c2c:	08013d98 	.word	0x08013d98
 8011c30:	080121ad 	.word	0x080121ad
 8011c34:	080120c5 	.word	0x080120c5
 8011c38:	08013ffd 	.word	0x08013ffd

08011c3c <__sflush_r>:
 8011c3c:	898a      	ldrh	r2, [r1, #12]
 8011c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	4605      	mov	r5, r0
 8011c44:	0710      	lsls	r0, r2, #28
 8011c46:	460c      	mov	r4, r1
 8011c48:	d458      	bmi.n	8011cfc <__sflush_r+0xc0>
 8011c4a:	684b      	ldr	r3, [r1, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	dc05      	bgt.n	8011c5c <__sflush_r+0x20>
 8011c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	dc02      	bgt.n	8011c5c <__sflush_r+0x20>
 8011c56:	2000      	movs	r0, #0
 8011c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c5e:	2e00      	cmp	r6, #0
 8011c60:	d0f9      	beq.n	8011c56 <__sflush_r+0x1a>
 8011c62:	2300      	movs	r3, #0
 8011c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c68:	682f      	ldr	r7, [r5, #0]
 8011c6a:	6a21      	ldr	r1, [r4, #32]
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	d032      	beq.n	8011cd6 <__sflush_r+0x9a>
 8011c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c72:	89a3      	ldrh	r3, [r4, #12]
 8011c74:	075a      	lsls	r2, r3, #29
 8011c76:	d505      	bpl.n	8011c84 <__sflush_r+0x48>
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	1ac0      	subs	r0, r0, r3
 8011c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c7e:	b10b      	cbz	r3, 8011c84 <__sflush_r+0x48>
 8011c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c82:	1ac0      	subs	r0, r0, r3
 8011c84:	2300      	movs	r3, #0
 8011c86:	4602      	mov	r2, r0
 8011c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c8a:	6a21      	ldr	r1, [r4, #32]
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	47b0      	blx	r6
 8011c90:	1c43      	adds	r3, r0, #1
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	d106      	bne.n	8011ca4 <__sflush_r+0x68>
 8011c96:	6829      	ldr	r1, [r5, #0]
 8011c98:	291d      	cmp	r1, #29
 8011c9a:	d82b      	bhi.n	8011cf4 <__sflush_r+0xb8>
 8011c9c:	4a29      	ldr	r2, [pc, #164]	; (8011d44 <__sflush_r+0x108>)
 8011c9e:	410a      	asrs	r2, r1
 8011ca0:	07d6      	lsls	r6, r2, #31
 8011ca2:	d427      	bmi.n	8011cf4 <__sflush_r+0xb8>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	6062      	str	r2, [r4, #4]
 8011ca8:	04d9      	lsls	r1, r3, #19
 8011caa:	6922      	ldr	r2, [r4, #16]
 8011cac:	6022      	str	r2, [r4, #0]
 8011cae:	d504      	bpl.n	8011cba <__sflush_r+0x7e>
 8011cb0:	1c42      	adds	r2, r0, #1
 8011cb2:	d101      	bne.n	8011cb8 <__sflush_r+0x7c>
 8011cb4:	682b      	ldr	r3, [r5, #0]
 8011cb6:	b903      	cbnz	r3, 8011cba <__sflush_r+0x7e>
 8011cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8011cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cbc:	602f      	str	r7, [r5, #0]
 8011cbe:	2900      	cmp	r1, #0
 8011cc0:	d0c9      	beq.n	8011c56 <__sflush_r+0x1a>
 8011cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cc6:	4299      	cmp	r1, r3
 8011cc8:	d002      	beq.n	8011cd0 <__sflush_r+0x94>
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f7fe fec2 	bl	8010a54 <_free_r>
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8011cd4:	e7c0      	b.n	8011c58 <__sflush_r+0x1c>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	4628      	mov	r0, r5
 8011cda:	47b0      	blx	r6
 8011cdc:	1c41      	adds	r1, r0, #1
 8011cde:	d1c8      	bne.n	8011c72 <__sflush_r+0x36>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d0c5      	beq.n	8011c72 <__sflush_r+0x36>
 8011ce6:	2b1d      	cmp	r3, #29
 8011ce8:	d001      	beq.n	8011cee <__sflush_r+0xb2>
 8011cea:	2b16      	cmp	r3, #22
 8011cec:	d101      	bne.n	8011cf2 <__sflush_r+0xb6>
 8011cee:	602f      	str	r7, [r5, #0]
 8011cf0:	e7b1      	b.n	8011c56 <__sflush_r+0x1a>
 8011cf2:	89a3      	ldrh	r3, [r4, #12]
 8011cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cf8:	81a3      	strh	r3, [r4, #12]
 8011cfa:	e7ad      	b.n	8011c58 <__sflush_r+0x1c>
 8011cfc:	690f      	ldr	r7, [r1, #16]
 8011cfe:	2f00      	cmp	r7, #0
 8011d00:	d0a9      	beq.n	8011c56 <__sflush_r+0x1a>
 8011d02:	0793      	lsls	r3, r2, #30
 8011d04:	680e      	ldr	r6, [r1, #0]
 8011d06:	bf08      	it	eq
 8011d08:	694b      	ldreq	r3, [r1, #20]
 8011d0a:	600f      	str	r7, [r1, #0]
 8011d0c:	bf18      	it	ne
 8011d0e:	2300      	movne	r3, #0
 8011d10:	eba6 0807 	sub.w	r8, r6, r7
 8011d14:	608b      	str	r3, [r1, #8]
 8011d16:	f1b8 0f00 	cmp.w	r8, #0
 8011d1a:	dd9c      	ble.n	8011c56 <__sflush_r+0x1a>
 8011d1c:	6a21      	ldr	r1, [r4, #32]
 8011d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d20:	4643      	mov	r3, r8
 8011d22:	463a      	mov	r2, r7
 8011d24:	4628      	mov	r0, r5
 8011d26:	47b0      	blx	r6
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	dc06      	bgt.n	8011d3a <__sflush_r+0xfe>
 8011d2c:	89a3      	ldrh	r3, [r4, #12]
 8011d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d32:	81a3      	strh	r3, [r4, #12]
 8011d34:	f04f 30ff 	mov.w	r0, #4294967295
 8011d38:	e78e      	b.n	8011c58 <__sflush_r+0x1c>
 8011d3a:	4407      	add	r7, r0
 8011d3c:	eba8 0800 	sub.w	r8, r8, r0
 8011d40:	e7e9      	b.n	8011d16 <__sflush_r+0xda>
 8011d42:	bf00      	nop
 8011d44:	dfbffffe 	.word	0xdfbffffe

08011d48 <_fflush_r>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	690b      	ldr	r3, [r1, #16]
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	460c      	mov	r4, r1
 8011d50:	b913      	cbnz	r3, 8011d58 <_fflush_r+0x10>
 8011d52:	2500      	movs	r5, #0
 8011d54:	4628      	mov	r0, r5
 8011d56:	bd38      	pop	{r3, r4, r5, pc}
 8011d58:	b118      	cbz	r0, 8011d62 <_fflush_r+0x1a>
 8011d5a:	6a03      	ldr	r3, [r0, #32]
 8011d5c:	b90b      	cbnz	r3, 8011d62 <_fflush_r+0x1a>
 8011d5e:	f7fd fe3f 	bl	800f9e0 <__sinit>
 8011d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d0f3      	beq.n	8011d52 <_fflush_r+0xa>
 8011d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d6c:	07d0      	lsls	r0, r2, #31
 8011d6e:	d404      	bmi.n	8011d7a <_fflush_r+0x32>
 8011d70:	0599      	lsls	r1, r3, #22
 8011d72:	d402      	bmi.n	8011d7a <_fflush_r+0x32>
 8011d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d76:	f7fd ffe0 	bl	800fd3a <__retarget_lock_acquire_recursive>
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	f7ff ff5d 	bl	8011c3c <__sflush_r>
 8011d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d84:	07da      	lsls	r2, r3, #31
 8011d86:	4605      	mov	r5, r0
 8011d88:	d4e4      	bmi.n	8011d54 <_fflush_r+0xc>
 8011d8a:	89a3      	ldrh	r3, [r4, #12]
 8011d8c:	059b      	lsls	r3, r3, #22
 8011d8e:	d4e1      	bmi.n	8011d54 <_fflush_r+0xc>
 8011d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d92:	f7fd ffd3 	bl	800fd3c <__retarget_lock_release_recursive>
 8011d96:	e7dd      	b.n	8011d54 <_fflush_r+0xc>

08011d98 <__sccl>:
 8011d98:	b570      	push	{r4, r5, r6, lr}
 8011d9a:	780b      	ldrb	r3, [r1, #0]
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	2b5e      	cmp	r3, #94	; 0x5e
 8011da0:	bf0b      	itete	eq
 8011da2:	784b      	ldrbeq	r3, [r1, #1]
 8011da4:	1c4a      	addne	r2, r1, #1
 8011da6:	1c8a      	addeq	r2, r1, #2
 8011da8:	2100      	movne	r1, #0
 8011daa:	bf08      	it	eq
 8011dac:	2101      	moveq	r1, #1
 8011dae:	3801      	subs	r0, #1
 8011db0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011db4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011db8:	42a8      	cmp	r0, r5
 8011dba:	d1fb      	bne.n	8011db4 <__sccl+0x1c>
 8011dbc:	b90b      	cbnz	r3, 8011dc2 <__sccl+0x2a>
 8011dbe:	1e50      	subs	r0, r2, #1
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
 8011dc2:	f081 0101 	eor.w	r1, r1, #1
 8011dc6:	54e1      	strb	r1, [r4, r3]
 8011dc8:	4610      	mov	r0, r2
 8011dca:	4602      	mov	r2, r0
 8011dcc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011dd0:	2d2d      	cmp	r5, #45	; 0x2d
 8011dd2:	d005      	beq.n	8011de0 <__sccl+0x48>
 8011dd4:	2d5d      	cmp	r5, #93	; 0x5d
 8011dd6:	d016      	beq.n	8011e06 <__sccl+0x6e>
 8011dd8:	2d00      	cmp	r5, #0
 8011dda:	d0f1      	beq.n	8011dc0 <__sccl+0x28>
 8011ddc:	462b      	mov	r3, r5
 8011dde:	e7f2      	b.n	8011dc6 <__sccl+0x2e>
 8011de0:	7846      	ldrb	r6, [r0, #1]
 8011de2:	2e5d      	cmp	r6, #93	; 0x5d
 8011de4:	d0fa      	beq.n	8011ddc <__sccl+0x44>
 8011de6:	42b3      	cmp	r3, r6
 8011de8:	dcf8      	bgt.n	8011ddc <__sccl+0x44>
 8011dea:	3002      	adds	r0, #2
 8011dec:	461a      	mov	r2, r3
 8011dee:	3201      	adds	r2, #1
 8011df0:	4296      	cmp	r6, r2
 8011df2:	54a1      	strb	r1, [r4, r2]
 8011df4:	dcfb      	bgt.n	8011dee <__sccl+0x56>
 8011df6:	1af2      	subs	r2, r6, r3
 8011df8:	3a01      	subs	r2, #1
 8011dfa:	1c5d      	adds	r5, r3, #1
 8011dfc:	42b3      	cmp	r3, r6
 8011dfe:	bfa8      	it	ge
 8011e00:	2200      	movge	r2, #0
 8011e02:	18ab      	adds	r3, r5, r2
 8011e04:	e7e1      	b.n	8011dca <__sccl+0x32>
 8011e06:	4610      	mov	r0, r2
 8011e08:	e7da      	b.n	8011dc0 <__sccl+0x28>

08011e0a <__submore>:
 8011e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0e:	460c      	mov	r4, r1
 8011e10:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e16:	4299      	cmp	r1, r3
 8011e18:	d11d      	bne.n	8011e56 <__submore+0x4c>
 8011e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011e1e:	f7fe fe8d 	bl	8010b3c <_malloc_r>
 8011e22:	b918      	cbnz	r0, 8011e2c <__submore+0x22>
 8011e24:	f04f 30ff 	mov.w	r0, #4294967295
 8011e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e30:	63a3      	str	r3, [r4, #56]	; 0x38
 8011e32:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011e36:	6360      	str	r0, [r4, #52]	; 0x34
 8011e38:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011e3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011e40:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011e44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011e48:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011e4c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011e50:	6020      	str	r0, [r4, #0]
 8011e52:	2000      	movs	r0, #0
 8011e54:	e7e8      	b.n	8011e28 <__submore+0x1e>
 8011e56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011e58:	0077      	lsls	r7, r6, #1
 8011e5a:	463a      	mov	r2, r7
 8011e5c:	f000 f880 	bl	8011f60 <_realloc_r>
 8011e60:	4605      	mov	r5, r0
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d0de      	beq.n	8011e24 <__submore+0x1a>
 8011e66:	eb00 0806 	add.w	r8, r0, r6
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	4640      	mov	r0, r8
 8011e70:	f7fd ff65 	bl	800fd3e <memcpy>
 8011e74:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011e78:	f8c4 8000 	str.w	r8, [r4]
 8011e7c:	e7e9      	b.n	8011e52 <__submore+0x48>

08011e7e <memmove>:
 8011e7e:	4288      	cmp	r0, r1
 8011e80:	b510      	push	{r4, lr}
 8011e82:	eb01 0402 	add.w	r4, r1, r2
 8011e86:	d902      	bls.n	8011e8e <memmove+0x10>
 8011e88:	4284      	cmp	r4, r0
 8011e8a:	4623      	mov	r3, r4
 8011e8c:	d807      	bhi.n	8011e9e <memmove+0x20>
 8011e8e:	1e43      	subs	r3, r0, #1
 8011e90:	42a1      	cmp	r1, r4
 8011e92:	d008      	beq.n	8011ea6 <memmove+0x28>
 8011e94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e9c:	e7f8      	b.n	8011e90 <memmove+0x12>
 8011e9e:	4402      	add	r2, r0
 8011ea0:	4601      	mov	r1, r0
 8011ea2:	428a      	cmp	r2, r1
 8011ea4:	d100      	bne.n	8011ea8 <memmove+0x2a>
 8011ea6:	bd10      	pop	{r4, pc}
 8011ea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011eb0:	e7f7      	b.n	8011ea2 <memmove+0x24>
	...

08011eb4 <_sbrk_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d06      	ldr	r5, [pc, #24]	; (8011ed0 <_sbrk_r+0x1c>)
 8011eb8:	2300      	movs	r3, #0
 8011eba:	4604      	mov	r4, r0
 8011ebc:	4608      	mov	r0, r1
 8011ebe:	602b      	str	r3, [r5, #0]
 8011ec0:	f7f1 fd96 	bl	80039f0 <_sbrk>
 8011ec4:	1c43      	adds	r3, r0, #1
 8011ec6:	d102      	bne.n	8011ece <_sbrk_r+0x1a>
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	b103      	cbz	r3, 8011ece <_sbrk_r+0x1a>
 8011ecc:	6023      	str	r3, [r4, #0]
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	20004a58 	.word	0x20004a58

08011ed4 <__assert_func>:
 8011ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ed6:	4614      	mov	r4, r2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <__assert_func+0x2c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4605      	mov	r5, r0
 8011ee0:	68d8      	ldr	r0, [r3, #12]
 8011ee2:	b14c      	cbz	r4, 8011ef8 <__assert_func+0x24>
 8011ee4:	4b07      	ldr	r3, [pc, #28]	; (8011f04 <__assert_func+0x30>)
 8011ee6:	9100      	str	r1, [sp, #0]
 8011ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011eec:	4906      	ldr	r1, [pc, #24]	; (8011f08 <__assert_func+0x34>)
 8011eee:	462b      	mov	r3, r5
 8011ef0:	f000 f96c 	bl	80121cc <fiprintf>
 8011ef4:	f000 f97c 	bl	80121f0 <abort>
 8011ef8:	4b04      	ldr	r3, [pc, #16]	; (8011f0c <__assert_func+0x38>)
 8011efa:	461c      	mov	r4, r3
 8011efc:	e7f3      	b.n	8011ee6 <__assert_func+0x12>
 8011efe:	bf00      	nop
 8011f00:	20000070 	.word	0x20000070
 8011f04:	08014012 	.word	0x08014012
 8011f08:	0801401f 	.word	0x0801401f
 8011f0c:	0801404d 	.word	0x0801404d

08011f10 <_calloc_r>:
 8011f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f12:	fba1 2402 	umull	r2, r4, r1, r2
 8011f16:	b94c      	cbnz	r4, 8011f2c <_calloc_r+0x1c>
 8011f18:	4611      	mov	r1, r2
 8011f1a:	9201      	str	r2, [sp, #4]
 8011f1c:	f7fe fe0e 	bl	8010b3c <_malloc_r>
 8011f20:	9a01      	ldr	r2, [sp, #4]
 8011f22:	4605      	mov	r5, r0
 8011f24:	b930      	cbnz	r0, 8011f34 <_calloc_r+0x24>
 8011f26:	4628      	mov	r0, r5
 8011f28:	b003      	add	sp, #12
 8011f2a:	bd30      	pop	{r4, r5, pc}
 8011f2c:	220c      	movs	r2, #12
 8011f2e:	6002      	str	r2, [r0, #0]
 8011f30:	2500      	movs	r5, #0
 8011f32:	e7f8      	b.n	8011f26 <_calloc_r+0x16>
 8011f34:	4621      	mov	r1, r4
 8011f36:	f7fd fe1a 	bl	800fb6e <memset>
 8011f3a:	e7f4      	b.n	8011f26 <_calloc_r+0x16>

08011f3c <__ascii_mbtowc>:
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	b901      	cbnz	r1, 8011f42 <__ascii_mbtowc+0x6>
 8011f40:	a901      	add	r1, sp, #4
 8011f42:	b142      	cbz	r2, 8011f56 <__ascii_mbtowc+0x1a>
 8011f44:	b14b      	cbz	r3, 8011f5a <__ascii_mbtowc+0x1e>
 8011f46:	7813      	ldrb	r3, [r2, #0]
 8011f48:	600b      	str	r3, [r1, #0]
 8011f4a:	7812      	ldrb	r2, [r2, #0]
 8011f4c:	1e10      	subs	r0, r2, #0
 8011f4e:	bf18      	it	ne
 8011f50:	2001      	movne	r0, #1
 8011f52:	b002      	add	sp, #8
 8011f54:	4770      	bx	lr
 8011f56:	4610      	mov	r0, r2
 8011f58:	e7fb      	b.n	8011f52 <__ascii_mbtowc+0x16>
 8011f5a:	f06f 0001 	mvn.w	r0, #1
 8011f5e:	e7f8      	b.n	8011f52 <__ascii_mbtowc+0x16>

08011f60 <_realloc_r>:
 8011f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f64:	4680      	mov	r8, r0
 8011f66:	4614      	mov	r4, r2
 8011f68:	460e      	mov	r6, r1
 8011f6a:	b921      	cbnz	r1, 8011f76 <_realloc_r+0x16>
 8011f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f70:	4611      	mov	r1, r2
 8011f72:	f7fe bde3 	b.w	8010b3c <_malloc_r>
 8011f76:	b92a      	cbnz	r2, 8011f84 <_realloc_r+0x24>
 8011f78:	f7fe fd6c 	bl	8010a54 <_free_r>
 8011f7c:	4625      	mov	r5, r4
 8011f7e:	4628      	mov	r0, r5
 8011f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f84:	f000 f93b 	bl	80121fe <_malloc_usable_size_r>
 8011f88:	4284      	cmp	r4, r0
 8011f8a:	4607      	mov	r7, r0
 8011f8c:	d802      	bhi.n	8011f94 <_realloc_r+0x34>
 8011f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f92:	d812      	bhi.n	8011fba <_realloc_r+0x5a>
 8011f94:	4621      	mov	r1, r4
 8011f96:	4640      	mov	r0, r8
 8011f98:	f7fe fdd0 	bl	8010b3c <_malloc_r>
 8011f9c:	4605      	mov	r5, r0
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d0ed      	beq.n	8011f7e <_realloc_r+0x1e>
 8011fa2:	42bc      	cmp	r4, r7
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	bf28      	it	cs
 8011faa:	463a      	movcs	r2, r7
 8011fac:	f7fd fec7 	bl	800fd3e <memcpy>
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	f7fe fd4e 	bl	8010a54 <_free_r>
 8011fb8:	e7e1      	b.n	8011f7e <_realloc_r+0x1e>
 8011fba:	4635      	mov	r5, r6
 8011fbc:	e7df      	b.n	8011f7e <_realloc_r+0x1e>
	...

08011fc0 <_strtol_l.constprop.0>:
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc6:	d001      	beq.n	8011fcc <_strtol_l.constprop.0+0xc>
 8011fc8:	2b24      	cmp	r3, #36	; 0x24
 8011fca:	d906      	bls.n	8011fda <_strtol_l.constprop.0+0x1a>
 8011fcc:	f7fd fe8a 	bl	800fce4 <__errno>
 8011fd0:	2316      	movs	r3, #22
 8011fd2:	6003      	str	r3, [r0, #0]
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80120c0 <_strtol_l.constprop.0+0x100>
 8011fde:	460d      	mov	r5, r1
 8011fe0:	462e      	mov	r6, r5
 8011fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fe6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011fea:	f017 0708 	ands.w	r7, r7, #8
 8011fee:	d1f7      	bne.n	8011fe0 <_strtol_l.constprop.0+0x20>
 8011ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8011ff2:	d132      	bne.n	801205a <_strtol_l.constprop.0+0x9a>
 8011ff4:	782c      	ldrb	r4, [r5, #0]
 8011ff6:	2701      	movs	r7, #1
 8011ff8:	1cb5      	adds	r5, r6, #2
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d05b      	beq.n	80120b6 <_strtol_l.constprop.0+0xf6>
 8011ffe:	2b10      	cmp	r3, #16
 8012000:	d109      	bne.n	8012016 <_strtol_l.constprop.0+0x56>
 8012002:	2c30      	cmp	r4, #48	; 0x30
 8012004:	d107      	bne.n	8012016 <_strtol_l.constprop.0+0x56>
 8012006:	782c      	ldrb	r4, [r5, #0]
 8012008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801200c:	2c58      	cmp	r4, #88	; 0x58
 801200e:	d14d      	bne.n	80120ac <_strtol_l.constprop.0+0xec>
 8012010:	786c      	ldrb	r4, [r5, #1]
 8012012:	2310      	movs	r3, #16
 8012014:	3502      	adds	r5, #2
 8012016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801201a:	f108 38ff 	add.w	r8, r8, #4294967295
 801201e:	f04f 0e00 	mov.w	lr, #0
 8012022:	fbb8 f9f3 	udiv	r9, r8, r3
 8012026:	4676      	mov	r6, lr
 8012028:	fb03 8a19 	mls	sl, r3, r9, r8
 801202c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012030:	f1bc 0f09 	cmp.w	ip, #9
 8012034:	d816      	bhi.n	8012064 <_strtol_l.constprop.0+0xa4>
 8012036:	4664      	mov	r4, ip
 8012038:	42a3      	cmp	r3, r4
 801203a:	dd24      	ble.n	8012086 <_strtol_l.constprop.0+0xc6>
 801203c:	f1be 3fff 	cmp.w	lr, #4294967295
 8012040:	d008      	beq.n	8012054 <_strtol_l.constprop.0+0x94>
 8012042:	45b1      	cmp	r9, r6
 8012044:	d31c      	bcc.n	8012080 <_strtol_l.constprop.0+0xc0>
 8012046:	d101      	bne.n	801204c <_strtol_l.constprop.0+0x8c>
 8012048:	45a2      	cmp	sl, r4
 801204a:	db19      	blt.n	8012080 <_strtol_l.constprop.0+0xc0>
 801204c:	fb06 4603 	mla	r6, r6, r3, r4
 8012050:	f04f 0e01 	mov.w	lr, #1
 8012054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012058:	e7e8      	b.n	801202c <_strtol_l.constprop.0+0x6c>
 801205a:	2c2b      	cmp	r4, #43	; 0x2b
 801205c:	bf04      	itt	eq
 801205e:	782c      	ldrbeq	r4, [r5, #0]
 8012060:	1cb5      	addeq	r5, r6, #2
 8012062:	e7ca      	b.n	8011ffa <_strtol_l.constprop.0+0x3a>
 8012064:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012068:	f1bc 0f19 	cmp.w	ip, #25
 801206c:	d801      	bhi.n	8012072 <_strtol_l.constprop.0+0xb2>
 801206e:	3c37      	subs	r4, #55	; 0x37
 8012070:	e7e2      	b.n	8012038 <_strtol_l.constprop.0+0x78>
 8012072:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012076:	f1bc 0f19 	cmp.w	ip, #25
 801207a:	d804      	bhi.n	8012086 <_strtol_l.constprop.0+0xc6>
 801207c:	3c57      	subs	r4, #87	; 0x57
 801207e:	e7db      	b.n	8012038 <_strtol_l.constprop.0+0x78>
 8012080:	f04f 3eff 	mov.w	lr, #4294967295
 8012084:	e7e6      	b.n	8012054 <_strtol_l.constprop.0+0x94>
 8012086:	f1be 3fff 	cmp.w	lr, #4294967295
 801208a:	d105      	bne.n	8012098 <_strtol_l.constprop.0+0xd8>
 801208c:	2322      	movs	r3, #34	; 0x22
 801208e:	6003      	str	r3, [r0, #0]
 8012090:	4646      	mov	r6, r8
 8012092:	b942      	cbnz	r2, 80120a6 <_strtol_l.constprop.0+0xe6>
 8012094:	4630      	mov	r0, r6
 8012096:	e79e      	b.n	8011fd6 <_strtol_l.constprop.0+0x16>
 8012098:	b107      	cbz	r7, 801209c <_strtol_l.constprop.0+0xdc>
 801209a:	4276      	negs	r6, r6
 801209c:	2a00      	cmp	r2, #0
 801209e:	d0f9      	beq.n	8012094 <_strtol_l.constprop.0+0xd4>
 80120a0:	f1be 0f00 	cmp.w	lr, #0
 80120a4:	d000      	beq.n	80120a8 <_strtol_l.constprop.0+0xe8>
 80120a6:	1e69      	subs	r1, r5, #1
 80120a8:	6011      	str	r1, [r2, #0]
 80120aa:	e7f3      	b.n	8012094 <_strtol_l.constprop.0+0xd4>
 80120ac:	2430      	movs	r4, #48	; 0x30
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1b1      	bne.n	8012016 <_strtol_l.constprop.0+0x56>
 80120b2:	2308      	movs	r3, #8
 80120b4:	e7af      	b.n	8012016 <_strtol_l.constprop.0+0x56>
 80120b6:	2c30      	cmp	r4, #48	; 0x30
 80120b8:	d0a5      	beq.n	8012006 <_strtol_l.constprop.0+0x46>
 80120ba:	230a      	movs	r3, #10
 80120bc:	e7ab      	b.n	8012016 <_strtol_l.constprop.0+0x56>
 80120be:	bf00      	nop
 80120c0:	0801404f 	.word	0x0801404f

080120c4 <_strtol_r>:
 80120c4:	f7ff bf7c 	b.w	8011fc0 <_strtol_l.constprop.0>

080120c8 <_strtoul_l.constprop.0>:
 80120c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120cc:	4f36      	ldr	r7, [pc, #216]	; (80121a8 <_strtoul_l.constprop.0+0xe0>)
 80120ce:	4686      	mov	lr, r0
 80120d0:	460d      	mov	r5, r1
 80120d2:	4628      	mov	r0, r5
 80120d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120d8:	5d3e      	ldrb	r6, [r7, r4]
 80120da:	f016 0608 	ands.w	r6, r6, #8
 80120de:	d1f8      	bne.n	80120d2 <_strtoul_l.constprop.0+0xa>
 80120e0:	2c2d      	cmp	r4, #45	; 0x2d
 80120e2:	d130      	bne.n	8012146 <_strtoul_l.constprop.0+0x7e>
 80120e4:	782c      	ldrb	r4, [r5, #0]
 80120e6:	2601      	movs	r6, #1
 80120e8:	1c85      	adds	r5, r0, #2
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d057      	beq.n	801219e <_strtoul_l.constprop.0+0xd6>
 80120ee:	2b10      	cmp	r3, #16
 80120f0:	d109      	bne.n	8012106 <_strtoul_l.constprop.0+0x3e>
 80120f2:	2c30      	cmp	r4, #48	; 0x30
 80120f4:	d107      	bne.n	8012106 <_strtoul_l.constprop.0+0x3e>
 80120f6:	7828      	ldrb	r0, [r5, #0]
 80120f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80120fc:	2858      	cmp	r0, #88	; 0x58
 80120fe:	d149      	bne.n	8012194 <_strtoul_l.constprop.0+0xcc>
 8012100:	786c      	ldrb	r4, [r5, #1]
 8012102:	2310      	movs	r3, #16
 8012104:	3502      	adds	r5, #2
 8012106:	f04f 38ff 	mov.w	r8, #4294967295
 801210a:	2700      	movs	r7, #0
 801210c:	fbb8 f8f3 	udiv	r8, r8, r3
 8012110:	fb03 f908 	mul.w	r9, r3, r8
 8012114:	ea6f 0909 	mvn.w	r9, r9
 8012118:	4638      	mov	r0, r7
 801211a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801211e:	f1bc 0f09 	cmp.w	ip, #9
 8012122:	d815      	bhi.n	8012150 <_strtoul_l.constprop.0+0x88>
 8012124:	4664      	mov	r4, ip
 8012126:	42a3      	cmp	r3, r4
 8012128:	dd23      	ble.n	8012172 <_strtoul_l.constprop.0+0xaa>
 801212a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801212e:	d007      	beq.n	8012140 <_strtoul_l.constprop.0+0x78>
 8012130:	4580      	cmp	r8, r0
 8012132:	d31b      	bcc.n	801216c <_strtoul_l.constprop.0+0xa4>
 8012134:	d101      	bne.n	801213a <_strtoul_l.constprop.0+0x72>
 8012136:	45a1      	cmp	r9, r4
 8012138:	db18      	blt.n	801216c <_strtoul_l.constprop.0+0xa4>
 801213a:	fb00 4003 	mla	r0, r0, r3, r4
 801213e:	2701      	movs	r7, #1
 8012140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012144:	e7e9      	b.n	801211a <_strtoul_l.constprop.0+0x52>
 8012146:	2c2b      	cmp	r4, #43	; 0x2b
 8012148:	bf04      	itt	eq
 801214a:	782c      	ldrbeq	r4, [r5, #0]
 801214c:	1c85      	addeq	r5, r0, #2
 801214e:	e7cc      	b.n	80120ea <_strtoul_l.constprop.0+0x22>
 8012150:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012154:	f1bc 0f19 	cmp.w	ip, #25
 8012158:	d801      	bhi.n	801215e <_strtoul_l.constprop.0+0x96>
 801215a:	3c37      	subs	r4, #55	; 0x37
 801215c:	e7e3      	b.n	8012126 <_strtoul_l.constprop.0+0x5e>
 801215e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012162:	f1bc 0f19 	cmp.w	ip, #25
 8012166:	d804      	bhi.n	8012172 <_strtoul_l.constprop.0+0xaa>
 8012168:	3c57      	subs	r4, #87	; 0x57
 801216a:	e7dc      	b.n	8012126 <_strtoul_l.constprop.0+0x5e>
 801216c:	f04f 37ff 	mov.w	r7, #4294967295
 8012170:	e7e6      	b.n	8012140 <_strtoul_l.constprop.0+0x78>
 8012172:	1c7b      	adds	r3, r7, #1
 8012174:	d106      	bne.n	8012184 <_strtoul_l.constprop.0+0xbc>
 8012176:	2322      	movs	r3, #34	; 0x22
 8012178:	f8ce 3000 	str.w	r3, [lr]
 801217c:	4638      	mov	r0, r7
 801217e:	b932      	cbnz	r2, 801218e <_strtoul_l.constprop.0+0xc6>
 8012180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012184:	b106      	cbz	r6, 8012188 <_strtoul_l.constprop.0+0xc0>
 8012186:	4240      	negs	r0, r0
 8012188:	2a00      	cmp	r2, #0
 801218a:	d0f9      	beq.n	8012180 <_strtoul_l.constprop.0+0xb8>
 801218c:	b107      	cbz	r7, 8012190 <_strtoul_l.constprop.0+0xc8>
 801218e:	1e69      	subs	r1, r5, #1
 8012190:	6011      	str	r1, [r2, #0]
 8012192:	e7f5      	b.n	8012180 <_strtoul_l.constprop.0+0xb8>
 8012194:	2430      	movs	r4, #48	; 0x30
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1b5      	bne.n	8012106 <_strtoul_l.constprop.0+0x3e>
 801219a:	2308      	movs	r3, #8
 801219c:	e7b3      	b.n	8012106 <_strtoul_l.constprop.0+0x3e>
 801219e:	2c30      	cmp	r4, #48	; 0x30
 80121a0:	d0a9      	beq.n	80120f6 <_strtoul_l.constprop.0+0x2e>
 80121a2:	230a      	movs	r3, #10
 80121a4:	e7af      	b.n	8012106 <_strtoul_l.constprop.0+0x3e>
 80121a6:	bf00      	nop
 80121a8:	0801404f 	.word	0x0801404f

080121ac <_strtoul_r>:
 80121ac:	f7ff bf8c 	b.w	80120c8 <_strtoul_l.constprop.0>

080121b0 <__ascii_wctomb>:
 80121b0:	b149      	cbz	r1, 80121c6 <__ascii_wctomb+0x16>
 80121b2:	2aff      	cmp	r2, #255	; 0xff
 80121b4:	bf85      	ittet	hi
 80121b6:	238a      	movhi	r3, #138	; 0x8a
 80121b8:	6003      	strhi	r3, [r0, #0]
 80121ba:	700a      	strbls	r2, [r1, #0]
 80121bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80121c0:	bf98      	it	ls
 80121c2:	2001      	movls	r0, #1
 80121c4:	4770      	bx	lr
 80121c6:	4608      	mov	r0, r1
 80121c8:	4770      	bx	lr
	...

080121cc <fiprintf>:
 80121cc:	b40e      	push	{r1, r2, r3}
 80121ce:	b503      	push	{r0, r1, lr}
 80121d0:	4601      	mov	r1, r0
 80121d2:	ab03      	add	r3, sp, #12
 80121d4:	4805      	ldr	r0, [pc, #20]	; (80121ec <fiprintf+0x20>)
 80121d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80121da:	6800      	ldr	r0, [r0, #0]
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	f000 f83f 	bl	8012260 <_vfiprintf_r>
 80121e2:	b002      	add	sp, #8
 80121e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121e8:	b003      	add	sp, #12
 80121ea:	4770      	bx	lr
 80121ec:	20000070 	.word	0x20000070

080121f0 <abort>:
 80121f0:	b508      	push	{r3, lr}
 80121f2:	2006      	movs	r0, #6
 80121f4:	f000 fa0c 	bl	8012610 <raise>
 80121f8:	2001      	movs	r0, #1
 80121fa:	f7f1 fb81 	bl	8003900 <_exit>

080121fe <_malloc_usable_size_r>:
 80121fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012202:	1f18      	subs	r0, r3, #4
 8012204:	2b00      	cmp	r3, #0
 8012206:	bfbc      	itt	lt
 8012208:	580b      	ldrlt	r3, [r1, r0]
 801220a:	18c0      	addlt	r0, r0, r3
 801220c:	4770      	bx	lr

0801220e <__sfputc_r>:
 801220e:	6893      	ldr	r3, [r2, #8]
 8012210:	3b01      	subs	r3, #1
 8012212:	2b00      	cmp	r3, #0
 8012214:	b410      	push	{r4}
 8012216:	6093      	str	r3, [r2, #8]
 8012218:	da08      	bge.n	801222c <__sfputc_r+0x1e>
 801221a:	6994      	ldr	r4, [r2, #24]
 801221c:	42a3      	cmp	r3, r4
 801221e:	db01      	blt.n	8012224 <__sfputc_r+0x16>
 8012220:	290a      	cmp	r1, #10
 8012222:	d103      	bne.n	801222c <__sfputc_r+0x1e>
 8012224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012228:	f000 b934 	b.w	8012494 <__swbuf_r>
 801222c:	6813      	ldr	r3, [r2, #0]
 801222e:	1c58      	adds	r0, r3, #1
 8012230:	6010      	str	r0, [r2, #0]
 8012232:	7019      	strb	r1, [r3, #0]
 8012234:	4608      	mov	r0, r1
 8012236:	f85d 4b04 	ldr.w	r4, [sp], #4
 801223a:	4770      	bx	lr

0801223c <__sfputs_r>:
 801223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223e:	4606      	mov	r6, r0
 8012240:	460f      	mov	r7, r1
 8012242:	4614      	mov	r4, r2
 8012244:	18d5      	adds	r5, r2, r3
 8012246:	42ac      	cmp	r4, r5
 8012248:	d101      	bne.n	801224e <__sfputs_r+0x12>
 801224a:	2000      	movs	r0, #0
 801224c:	e007      	b.n	801225e <__sfputs_r+0x22>
 801224e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012252:	463a      	mov	r2, r7
 8012254:	4630      	mov	r0, r6
 8012256:	f7ff ffda 	bl	801220e <__sfputc_r>
 801225a:	1c43      	adds	r3, r0, #1
 801225c:	d1f3      	bne.n	8012246 <__sfputs_r+0xa>
 801225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012260 <_vfiprintf_r>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	460d      	mov	r5, r1
 8012266:	b09d      	sub	sp, #116	; 0x74
 8012268:	4614      	mov	r4, r2
 801226a:	4698      	mov	r8, r3
 801226c:	4606      	mov	r6, r0
 801226e:	b118      	cbz	r0, 8012278 <_vfiprintf_r+0x18>
 8012270:	6a03      	ldr	r3, [r0, #32]
 8012272:	b90b      	cbnz	r3, 8012278 <_vfiprintf_r+0x18>
 8012274:	f7fd fbb4 	bl	800f9e0 <__sinit>
 8012278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d405      	bmi.n	801228a <_vfiprintf_r+0x2a>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	059a      	lsls	r2, r3, #22
 8012282:	d402      	bmi.n	801228a <_vfiprintf_r+0x2a>
 8012284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012286:	f7fd fd58 	bl	800fd3a <__retarget_lock_acquire_recursive>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	071b      	lsls	r3, r3, #28
 801228e:	d501      	bpl.n	8012294 <_vfiprintf_r+0x34>
 8012290:	692b      	ldr	r3, [r5, #16]
 8012292:	b99b      	cbnz	r3, 80122bc <_vfiprintf_r+0x5c>
 8012294:	4629      	mov	r1, r5
 8012296:	4630      	mov	r0, r6
 8012298:	f000 f93a 	bl	8012510 <__swsetup_r>
 801229c:	b170      	cbz	r0, 80122bc <_vfiprintf_r+0x5c>
 801229e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122a0:	07dc      	lsls	r4, r3, #31
 80122a2:	d504      	bpl.n	80122ae <_vfiprintf_r+0x4e>
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	b01d      	add	sp, #116	; 0x74
 80122aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ae:	89ab      	ldrh	r3, [r5, #12]
 80122b0:	0598      	lsls	r0, r3, #22
 80122b2:	d4f7      	bmi.n	80122a4 <_vfiprintf_r+0x44>
 80122b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122b6:	f7fd fd41 	bl	800fd3c <__retarget_lock_release_recursive>
 80122ba:	e7f3      	b.n	80122a4 <_vfiprintf_r+0x44>
 80122bc:	2300      	movs	r3, #0
 80122be:	9309      	str	r3, [sp, #36]	; 0x24
 80122c0:	2320      	movs	r3, #32
 80122c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ca:	2330      	movs	r3, #48	; 0x30
 80122cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012480 <_vfiprintf_r+0x220>
 80122d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122d4:	f04f 0901 	mov.w	r9, #1
 80122d8:	4623      	mov	r3, r4
 80122da:	469a      	mov	sl, r3
 80122dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e0:	b10a      	cbz	r2, 80122e6 <_vfiprintf_r+0x86>
 80122e2:	2a25      	cmp	r2, #37	; 0x25
 80122e4:	d1f9      	bne.n	80122da <_vfiprintf_r+0x7a>
 80122e6:	ebba 0b04 	subs.w	fp, sl, r4
 80122ea:	d00b      	beq.n	8012304 <_vfiprintf_r+0xa4>
 80122ec:	465b      	mov	r3, fp
 80122ee:	4622      	mov	r2, r4
 80122f0:	4629      	mov	r1, r5
 80122f2:	4630      	mov	r0, r6
 80122f4:	f7ff ffa2 	bl	801223c <__sfputs_r>
 80122f8:	3001      	adds	r0, #1
 80122fa:	f000 80a9 	beq.w	8012450 <_vfiprintf_r+0x1f0>
 80122fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012300:	445a      	add	r2, fp
 8012302:	9209      	str	r2, [sp, #36]	; 0x24
 8012304:	f89a 3000 	ldrb.w	r3, [sl]
 8012308:	2b00      	cmp	r3, #0
 801230a:	f000 80a1 	beq.w	8012450 <_vfiprintf_r+0x1f0>
 801230e:	2300      	movs	r3, #0
 8012310:	f04f 32ff 	mov.w	r2, #4294967295
 8012314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012318:	f10a 0a01 	add.w	sl, sl, #1
 801231c:	9304      	str	r3, [sp, #16]
 801231e:	9307      	str	r3, [sp, #28]
 8012320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012324:	931a      	str	r3, [sp, #104]	; 0x68
 8012326:	4654      	mov	r4, sl
 8012328:	2205      	movs	r2, #5
 801232a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232e:	4854      	ldr	r0, [pc, #336]	; (8012480 <_vfiprintf_r+0x220>)
 8012330:	f7ed ff76 	bl	8000220 <memchr>
 8012334:	9a04      	ldr	r2, [sp, #16]
 8012336:	b9d8      	cbnz	r0, 8012370 <_vfiprintf_r+0x110>
 8012338:	06d1      	lsls	r1, r2, #27
 801233a:	bf44      	itt	mi
 801233c:	2320      	movmi	r3, #32
 801233e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012342:	0713      	lsls	r3, r2, #28
 8012344:	bf44      	itt	mi
 8012346:	232b      	movmi	r3, #43	; 0x2b
 8012348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801234c:	f89a 3000 	ldrb.w	r3, [sl]
 8012350:	2b2a      	cmp	r3, #42	; 0x2a
 8012352:	d015      	beq.n	8012380 <_vfiprintf_r+0x120>
 8012354:	9a07      	ldr	r2, [sp, #28]
 8012356:	4654      	mov	r4, sl
 8012358:	2000      	movs	r0, #0
 801235a:	f04f 0c0a 	mov.w	ip, #10
 801235e:	4621      	mov	r1, r4
 8012360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012364:	3b30      	subs	r3, #48	; 0x30
 8012366:	2b09      	cmp	r3, #9
 8012368:	d94d      	bls.n	8012406 <_vfiprintf_r+0x1a6>
 801236a:	b1b0      	cbz	r0, 801239a <_vfiprintf_r+0x13a>
 801236c:	9207      	str	r2, [sp, #28]
 801236e:	e014      	b.n	801239a <_vfiprintf_r+0x13a>
 8012370:	eba0 0308 	sub.w	r3, r0, r8
 8012374:	fa09 f303 	lsl.w	r3, r9, r3
 8012378:	4313      	orrs	r3, r2
 801237a:	9304      	str	r3, [sp, #16]
 801237c:	46a2      	mov	sl, r4
 801237e:	e7d2      	b.n	8012326 <_vfiprintf_r+0xc6>
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	1d19      	adds	r1, r3, #4
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	9103      	str	r1, [sp, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	bfbb      	ittet	lt
 801238c:	425b      	neglt	r3, r3
 801238e:	f042 0202 	orrlt.w	r2, r2, #2
 8012392:	9307      	strge	r3, [sp, #28]
 8012394:	9307      	strlt	r3, [sp, #28]
 8012396:	bfb8      	it	lt
 8012398:	9204      	strlt	r2, [sp, #16]
 801239a:	7823      	ldrb	r3, [r4, #0]
 801239c:	2b2e      	cmp	r3, #46	; 0x2e
 801239e:	d10c      	bne.n	80123ba <_vfiprintf_r+0x15a>
 80123a0:	7863      	ldrb	r3, [r4, #1]
 80123a2:	2b2a      	cmp	r3, #42	; 0x2a
 80123a4:	d134      	bne.n	8012410 <_vfiprintf_r+0x1b0>
 80123a6:	9b03      	ldr	r3, [sp, #12]
 80123a8:	1d1a      	adds	r2, r3, #4
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	9203      	str	r2, [sp, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bfb8      	it	lt
 80123b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80123b6:	3402      	adds	r4, #2
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012490 <_vfiprintf_r+0x230>
 80123be:	7821      	ldrb	r1, [r4, #0]
 80123c0:	2203      	movs	r2, #3
 80123c2:	4650      	mov	r0, sl
 80123c4:	f7ed ff2c 	bl	8000220 <memchr>
 80123c8:	b138      	cbz	r0, 80123da <_vfiprintf_r+0x17a>
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	eba0 000a 	sub.w	r0, r0, sl
 80123d0:	2240      	movs	r2, #64	; 0x40
 80123d2:	4082      	lsls	r2, r0
 80123d4:	4313      	orrs	r3, r2
 80123d6:	3401      	adds	r4, #1
 80123d8:	9304      	str	r3, [sp, #16]
 80123da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123de:	4829      	ldr	r0, [pc, #164]	; (8012484 <_vfiprintf_r+0x224>)
 80123e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123e4:	2206      	movs	r2, #6
 80123e6:	f7ed ff1b 	bl	8000220 <memchr>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d03f      	beq.n	801246e <_vfiprintf_r+0x20e>
 80123ee:	4b26      	ldr	r3, [pc, #152]	; (8012488 <_vfiprintf_r+0x228>)
 80123f0:	bb1b      	cbnz	r3, 801243a <_vfiprintf_r+0x1da>
 80123f2:	9b03      	ldr	r3, [sp, #12]
 80123f4:	3307      	adds	r3, #7
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	3308      	adds	r3, #8
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012400:	443b      	add	r3, r7
 8012402:	9309      	str	r3, [sp, #36]	; 0x24
 8012404:	e768      	b.n	80122d8 <_vfiprintf_r+0x78>
 8012406:	fb0c 3202 	mla	r2, ip, r2, r3
 801240a:	460c      	mov	r4, r1
 801240c:	2001      	movs	r0, #1
 801240e:	e7a6      	b.n	801235e <_vfiprintf_r+0xfe>
 8012410:	2300      	movs	r3, #0
 8012412:	3401      	adds	r4, #1
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	4619      	mov	r1, r3
 8012418:	f04f 0c0a 	mov.w	ip, #10
 801241c:	4620      	mov	r0, r4
 801241e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012422:	3a30      	subs	r2, #48	; 0x30
 8012424:	2a09      	cmp	r2, #9
 8012426:	d903      	bls.n	8012430 <_vfiprintf_r+0x1d0>
 8012428:	2b00      	cmp	r3, #0
 801242a:	d0c6      	beq.n	80123ba <_vfiprintf_r+0x15a>
 801242c:	9105      	str	r1, [sp, #20]
 801242e:	e7c4      	b.n	80123ba <_vfiprintf_r+0x15a>
 8012430:	fb0c 2101 	mla	r1, ip, r1, r2
 8012434:	4604      	mov	r4, r0
 8012436:	2301      	movs	r3, #1
 8012438:	e7f0      	b.n	801241c <_vfiprintf_r+0x1bc>
 801243a:	ab03      	add	r3, sp, #12
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	462a      	mov	r2, r5
 8012440:	4b12      	ldr	r3, [pc, #72]	; (801248c <_vfiprintf_r+0x22c>)
 8012442:	a904      	add	r1, sp, #16
 8012444:	4630      	mov	r0, r6
 8012446:	f7fc fe79 	bl	800f13c <_printf_float>
 801244a:	4607      	mov	r7, r0
 801244c:	1c78      	adds	r0, r7, #1
 801244e:	d1d6      	bne.n	80123fe <_vfiprintf_r+0x19e>
 8012450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012452:	07d9      	lsls	r1, r3, #31
 8012454:	d405      	bmi.n	8012462 <_vfiprintf_r+0x202>
 8012456:	89ab      	ldrh	r3, [r5, #12]
 8012458:	059a      	lsls	r2, r3, #22
 801245a:	d402      	bmi.n	8012462 <_vfiprintf_r+0x202>
 801245c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801245e:	f7fd fc6d 	bl	800fd3c <__retarget_lock_release_recursive>
 8012462:	89ab      	ldrh	r3, [r5, #12]
 8012464:	065b      	lsls	r3, r3, #25
 8012466:	f53f af1d 	bmi.w	80122a4 <_vfiprintf_r+0x44>
 801246a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801246c:	e71c      	b.n	80122a8 <_vfiprintf_r+0x48>
 801246e:	ab03      	add	r3, sp, #12
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	462a      	mov	r2, r5
 8012474:	4b05      	ldr	r3, [pc, #20]	; (801248c <_vfiprintf_r+0x22c>)
 8012476:	a904      	add	r1, sp, #16
 8012478:	4630      	mov	r0, r6
 801247a:	f7fd f903 	bl	800f684 <_printf_i>
 801247e:	e7e4      	b.n	801244a <_vfiprintf_r+0x1ea>
 8012480:	08013fdc 	.word	0x08013fdc
 8012484:	08013fe6 	.word	0x08013fe6
 8012488:	0800f13d 	.word	0x0800f13d
 801248c:	0801223d 	.word	0x0801223d
 8012490:	08013fe2 	.word	0x08013fe2

08012494 <__swbuf_r>:
 8012494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012496:	460e      	mov	r6, r1
 8012498:	4614      	mov	r4, r2
 801249a:	4605      	mov	r5, r0
 801249c:	b118      	cbz	r0, 80124a6 <__swbuf_r+0x12>
 801249e:	6a03      	ldr	r3, [r0, #32]
 80124a0:	b90b      	cbnz	r3, 80124a6 <__swbuf_r+0x12>
 80124a2:	f7fd fa9d 	bl	800f9e0 <__sinit>
 80124a6:	69a3      	ldr	r3, [r4, #24]
 80124a8:	60a3      	str	r3, [r4, #8]
 80124aa:	89a3      	ldrh	r3, [r4, #12]
 80124ac:	071a      	lsls	r2, r3, #28
 80124ae:	d525      	bpl.n	80124fc <__swbuf_r+0x68>
 80124b0:	6923      	ldr	r3, [r4, #16]
 80124b2:	b31b      	cbz	r3, 80124fc <__swbuf_r+0x68>
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	6922      	ldr	r2, [r4, #16]
 80124b8:	1a98      	subs	r0, r3, r2
 80124ba:	6963      	ldr	r3, [r4, #20]
 80124bc:	b2f6      	uxtb	r6, r6
 80124be:	4283      	cmp	r3, r0
 80124c0:	4637      	mov	r7, r6
 80124c2:	dc04      	bgt.n	80124ce <__swbuf_r+0x3a>
 80124c4:	4621      	mov	r1, r4
 80124c6:	4628      	mov	r0, r5
 80124c8:	f7ff fc3e 	bl	8011d48 <_fflush_r>
 80124cc:	b9e0      	cbnz	r0, 8012508 <__swbuf_r+0x74>
 80124ce:	68a3      	ldr	r3, [r4, #8]
 80124d0:	3b01      	subs	r3, #1
 80124d2:	60a3      	str	r3, [r4, #8]
 80124d4:	6823      	ldr	r3, [r4, #0]
 80124d6:	1c5a      	adds	r2, r3, #1
 80124d8:	6022      	str	r2, [r4, #0]
 80124da:	701e      	strb	r6, [r3, #0]
 80124dc:	6962      	ldr	r2, [r4, #20]
 80124de:	1c43      	adds	r3, r0, #1
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d004      	beq.n	80124ee <__swbuf_r+0x5a>
 80124e4:	89a3      	ldrh	r3, [r4, #12]
 80124e6:	07db      	lsls	r3, r3, #31
 80124e8:	d506      	bpl.n	80124f8 <__swbuf_r+0x64>
 80124ea:	2e0a      	cmp	r6, #10
 80124ec:	d104      	bne.n	80124f8 <__swbuf_r+0x64>
 80124ee:	4621      	mov	r1, r4
 80124f0:	4628      	mov	r0, r5
 80124f2:	f7ff fc29 	bl	8011d48 <_fflush_r>
 80124f6:	b938      	cbnz	r0, 8012508 <__swbuf_r+0x74>
 80124f8:	4638      	mov	r0, r7
 80124fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124fc:	4621      	mov	r1, r4
 80124fe:	4628      	mov	r0, r5
 8012500:	f000 f806 	bl	8012510 <__swsetup_r>
 8012504:	2800      	cmp	r0, #0
 8012506:	d0d5      	beq.n	80124b4 <__swbuf_r+0x20>
 8012508:	f04f 37ff 	mov.w	r7, #4294967295
 801250c:	e7f4      	b.n	80124f8 <__swbuf_r+0x64>
	...

08012510 <__swsetup_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <__swsetup_r+0xac>)
 8012514:	4605      	mov	r5, r0
 8012516:	6818      	ldr	r0, [r3, #0]
 8012518:	460c      	mov	r4, r1
 801251a:	b118      	cbz	r0, 8012524 <__swsetup_r+0x14>
 801251c:	6a03      	ldr	r3, [r0, #32]
 801251e:	b90b      	cbnz	r3, 8012524 <__swsetup_r+0x14>
 8012520:	f7fd fa5e 	bl	800f9e0 <__sinit>
 8012524:	89a3      	ldrh	r3, [r4, #12]
 8012526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801252a:	0718      	lsls	r0, r3, #28
 801252c:	d422      	bmi.n	8012574 <__swsetup_r+0x64>
 801252e:	06d9      	lsls	r1, r3, #27
 8012530:	d407      	bmi.n	8012542 <__swsetup_r+0x32>
 8012532:	2309      	movs	r3, #9
 8012534:	602b      	str	r3, [r5, #0]
 8012536:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801253a:	81a3      	strh	r3, [r4, #12]
 801253c:	f04f 30ff 	mov.w	r0, #4294967295
 8012540:	e034      	b.n	80125ac <__swsetup_r+0x9c>
 8012542:	0758      	lsls	r0, r3, #29
 8012544:	d512      	bpl.n	801256c <__swsetup_r+0x5c>
 8012546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012548:	b141      	cbz	r1, 801255c <__swsetup_r+0x4c>
 801254a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801254e:	4299      	cmp	r1, r3
 8012550:	d002      	beq.n	8012558 <__swsetup_r+0x48>
 8012552:	4628      	mov	r0, r5
 8012554:	f7fe fa7e 	bl	8010a54 <_free_r>
 8012558:	2300      	movs	r3, #0
 801255a:	6363      	str	r3, [r4, #52]	; 0x34
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012562:	81a3      	strh	r3, [r4, #12]
 8012564:	2300      	movs	r3, #0
 8012566:	6063      	str	r3, [r4, #4]
 8012568:	6923      	ldr	r3, [r4, #16]
 801256a:	6023      	str	r3, [r4, #0]
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	f043 0308 	orr.w	r3, r3, #8
 8012572:	81a3      	strh	r3, [r4, #12]
 8012574:	6923      	ldr	r3, [r4, #16]
 8012576:	b94b      	cbnz	r3, 801258c <__swsetup_r+0x7c>
 8012578:	89a3      	ldrh	r3, [r4, #12]
 801257a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801257e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012582:	d003      	beq.n	801258c <__swsetup_r+0x7c>
 8012584:	4621      	mov	r1, r4
 8012586:	4628      	mov	r0, r5
 8012588:	f000 f884 	bl	8012694 <__smakebuf_r>
 801258c:	89a0      	ldrh	r0, [r4, #12]
 801258e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012592:	f010 0301 	ands.w	r3, r0, #1
 8012596:	d00a      	beq.n	80125ae <__swsetup_r+0x9e>
 8012598:	2300      	movs	r3, #0
 801259a:	60a3      	str	r3, [r4, #8]
 801259c:	6963      	ldr	r3, [r4, #20]
 801259e:	425b      	negs	r3, r3
 80125a0:	61a3      	str	r3, [r4, #24]
 80125a2:	6923      	ldr	r3, [r4, #16]
 80125a4:	b943      	cbnz	r3, 80125b8 <__swsetup_r+0xa8>
 80125a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125aa:	d1c4      	bne.n	8012536 <__swsetup_r+0x26>
 80125ac:	bd38      	pop	{r3, r4, r5, pc}
 80125ae:	0781      	lsls	r1, r0, #30
 80125b0:	bf58      	it	pl
 80125b2:	6963      	ldrpl	r3, [r4, #20]
 80125b4:	60a3      	str	r3, [r4, #8]
 80125b6:	e7f4      	b.n	80125a2 <__swsetup_r+0x92>
 80125b8:	2000      	movs	r0, #0
 80125ba:	e7f7      	b.n	80125ac <__swsetup_r+0x9c>
 80125bc:	20000070 	.word	0x20000070

080125c0 <_raise_r>:
 80125c0:	291f      	cmp	r1, #31
 80125c2:	b538      	push	{r3, r4, r5, lr}
 80125c4:	4604      	mov	r4, r0
 80125c6:	460d      	mov	r5, r1
 80125c8:	d904      	bls.n	80125d4 <_raise_r+0x14>
 80125ca:	2316      	movs	r3, #22
 80125cc:	6003      	str	r3, [r0, #0]
 80125ce:	f04f 30ff 	mov.w	r0, #4294967295
 80125d2:	bd38      	pop	{r3, r4, r5, pc}
 80125d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80125d6:	b112      	cbz	r2, 80125de <_raise_r+0x1e>
 80125d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125dc:	b94b      	cbnz	r3, 80125f2 <_raise_r+0x32>
 80125de:	4620      	mov	r0, r4
 80125e0:	f000 f830 	bl	8012644 <_getpid_r>
 80125e4:	462a      	mov	r2, r5
 80125e6:	4601      	mov	r1, r0
 80125e8:	4620      	mov	r0, r4
 80125ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ee:	f000 b817 	b.w	8012620 <_kill_r>
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d00a      	beq.n	801260c <_raise_r+0x4c>
 80125f6:	1c59      	adds	r1, r3, #1
 80125f8:	d103      	bne.n	8012602 <_raise_r+0x42>
 80125fa:	2316      	movs	r3, #22
 80125fc:	6003      	str	r3, [r0, #0]
 80125fe:	2001      	movs	r0, #1
 8012600:	e7e7      	b.n	80125d2 <_raise_r+0x12>
 8012602:	2400      	movs	r4, #0
 8012604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012608:	4628      	mov	r0, r5
 801260a:	4798      	blx	r3
 801260c:	2000      	movs	r0, #0
 801260e:	e7e0      	b.n	80125d2 <_raise_r+0x12>

08012610 <raise>:
 8012610:	4b02      	ldr	r3, [pc, #8]	; (801261c <raise+0xc>)
 8012612:	4601      	mov	r1, r0
 8012614:	6818      	ldr	r0, [r3, #0]
 8012616:	f7ff bfd3 	b.w	80125c0 <_raise_r>
 801261a:	bf00      	nop
 801261c:	20000070 	.word	0x20000070

08012620 <_kill_r>:
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	4d07      	ldr	r5, [pc, #28]	; (8012640 <_kill_r+0x20>)
 8012624:	2300      	movs	r3, #0
 8012626:	4604      	mov	r4, r0
 8012628:	4608      	mov	r0, r1
 801262a:	4611      	mov	r1, r2
 801262c:	602b      	str	r3, [r5, #0]
 801262e:	f7f1 f957 	bl	80038e0 <_kill>
 8012632:	1c43      	adds	r3, r0, #1
 8012634:	d102      	bne.n	801263c <_kill_r+0x1c>
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	b103      	cbz	r3, 801263c <_kill_r+0x1c>
 801263a:	6023      	str	r3, [r4, #0]
 801263c:	bd38      	pop	{r3, r4, r5, pc}
 801263e:	bf00      	nop
 8012640:	20004a58 	.word	0x20004a58

08012644 <_getpid_r>:
 8012644:	f7f1 b944 	b.w	80038d0 <_getpid>

08012648 <__swhatbuf_r>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	460c      	mov	r4, r1
 801264c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012650:	2900      	cmp	r1, #0
 8012652:	b096      	sub	sp, #88	; 0x58
 8012654:	4615      	mov	r5, r2
 8012656:	461e      	mov	r6, r3
 8012658:	da0d      	bge.n	8012676 <__swhatbuf_r+0x2e>
 801265a:	89a3      	ldrh	r3, [r4, #12]
 801265c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012660:	f04f 0100 	mov.w	r1, #0
 8012664:	bf0c      	ite	eq
 8012666:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801266a:	2340      	movne	r3, #64	; 0x40
 801266c:	2000      	movs	r0, #0
 801266e:	6031      	str	r1, [r6, #0]
 8012670:	602b      	str	r3, [r5, #0]
 8012672:	b016      	add	sp, #88	; 0x58
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	466a      	mov	r2, sp
 8012678:	f000 f848 	bl	801270c <_fstat_r>
 801267c:	2800      	cmp	r0, #0
 801267e:	dbec      	blt.n	801265a <__swhatbuf_r+0x12>
 8012680:	9901      	ldr	r1, [sp, #4]
 8012682:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012686:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801268a:	4259      	negs	r1, r3
 801268c:	4159      	adcs	r1, r3
 801268e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012692:	e7eb      	b.n	801266c <__swhatbuf_r+0x24>

08012694 <__smakebuf_r>:
 8012694:	898b      	ldrh	r3, [r1, #12]
 8012696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012698:	079d      	lsls	r5, r3, #30
 801269a:	4606      	mov	r6, r0
 801269c:	460c      	mov	r4, r1
 801269e:	d507      	bpl.n	80126b0 <__smakebuf_r+0x1c>
 80126a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	6123      	str	r3, [r4, #16]
 80126a8:	2301      	movs	r3, #1
 80126aa:	6163      	str	r3, [r4, #20]
 80126ac:	b002      	add	sp, #8
 80126ae:	bd70      	pop	{r4, r5, r6, pc}
 80126b0:	ab01      	add	r3, sp, #4
 80126b2:	466a      	mov	r2, sp
 80126b4:	f7ff ffc8 	bl	8012648 <__swhatbuf_r>
 80126b8:	9900      	ldr	r1, [sp, #0]
 80126ba:	4605      	mov	r5, r0
 80126bc:	4630      	mov	r0, r6
 80126be:	f7fe fa3d 	bl	8010b3c <_malloc_r>
 80126c2:	b948      	cbnz	r0, 80126d8 <__smakebuf_r+0x44>
 80126c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c8:	059a      	lsls	r2, r3, #22
 80126ca:	d4ef      	bmi.n	80126ac <__smakebuf_r+0x18>
 80126cc:	f023 0303 	bic.w	r3, r3, #3
 80126d0:	f043 0302 	orr.w	r3, r3, #2
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	e7e3      	b.n	80126a0 <__smakebuf_r+0xc>
 80126d8:	89a3      	ldrh	r3, [r4, #12]
 80126da:	6020      	str	r0, [r4, #0]
 80126dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126e0:	81a3      	strh	r3, [r4, #12]
 80126e2:	9b00      	ldr	r3, [sp, #0]
 80126e4:	6163      	str	r3, [r4, #20]
 80126e6:	9b01      	ldr	r3, [sp, #4]
 80126e8:	6120      	str	r0, [r4, #16]
 80126ea:	b15b      	cbz	r3, 8012704 <__smakebuf_r+0x70>
 80126ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126f0:	4630      	mov	r0, r6
 80126f2:	f000 f81d 	bl	8012730 <_isatty_r>
 80126f6:	b128      	cbz	r0, 8012704 <__smakebuf_r+0x70>
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	f023 0303 	bic.w	r3, r3, #3
 80126fe:	f043 0301 	orr.w	r3, r3, #1
 8012702:	81a3      	strh	r3, [r4, #12]
 8012704:	89a3      	ldrh	r3, [r4, #12]
 8012706:	431d      	orrs	r5, r3
 8012708:	81a5      	strh	r5, [r4, #12]
 801270a:	e7cf      	b.n	80126ac <__smakebuf_r+0x18>

0801270c <_fstat_r>:
 801270c:	b538      	push	{r3, r4, r5, lr}
 801270e:	4d07      	ldr	r5, [pc, #28]	; (801272c <_fstat_r+0x20>)
 8012710:	2300      	movs	r3, #0
 8012712:	4604      	mov	r4, r0
 8012714:	4608      	mov	r0, r1
 8012716:	4611      	mov	r1, r2
 8012718:	602b      	str	r3, [r5, #0]
 801271a:	f7f1 f940 	bl	800399e <_fstat>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	d102      	bne.n	8012728 <_fstat_r+0x1c>
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	b103      	cbz	r3, 8012728 <_fstat_r+0x1c>
 8012726:	6023      	str	r3, [r4, #0]
 8012728:	bd38      	pop	{r3, r4, r5, pc}
 801272a:	bf00      	nop
 801272c:	20004a58 	.word	0x20004a58

08012730 <_isatty_r>:
 8012730:	b538      	push	{r3, r4, r5, lr}
 8012732:	4d06      	ldr	r5, [pc, #24]	; (801274c <_isatty_r+0x1c>)
 8012734:	2300      	movs	r3, #0
 8012736:	4604      	mov	r4, r0
 8012738:	4608      	mov	r0, r1
 801273a:	602b      	str	r3, [r5, #0]
 801273c:	f7f1 f93f 	bl	80039be <_isatty>
 8012740:	1c43      	adds	r3, r0, #1
 8012742:	d102      	bne.n	801274a <_isatty_r+0x1a>
 8012744:	682b      	ldr	r3, [r5, #0]
 8012746:	b103      	cbz	r3, 801274a <_isatty_r+0x1a>
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	bd38      	pop	{r3, r4, r5, pc}
 801274c:	20004a58 	.word	0x20004a58

08012750 <pow>:
 8012750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012752:	ed2d 8b02 	vpush	{d8}
 8012756:	eeb0 8a40 	vmov.f32	s16, s0
 801275a:	eef0 8a60 	vmov.f32	s17, s1
 801275e:	ec55 4b11 	vmov	r4, r5, d1
 8012762:	f000 f875 	bl	8012850 <__ieee754_pow>
 8012766:	4622      	mov	r2, r4
 8012768:	462b      	mov	r3, r5
 801276a:	4620      	mov	r0, r4
 801276c:	4629      	mov	r1, r5
 801276e:	ec57 6b10 	vmov	r6, r7, d0
 8012772:	f7ee fa03 	bl	8000b7c <__aeabi_dcmpun>
 8012776:	2800      	cmp	r0, #0
 8012778:	d13b      	bne.n	80127f2 <pow+0xa2>
 801277a:	ec51 0b18 	vmov	r0, r1, d8
 801277e:	2200      	movs	r2, #0
 8012780:	2300      	movs	r3, #0
 8012782:	f7ee f9c9 	bl	8000b18 <__aeabi_dcmpeq>
 8012786:	b1b8      	cbz	r0, 80127b8 <pow+0x68>
 8012788:	2200      	movs	r2, #0
 801278a:	2300      	movs	r3, #0
 801278c:	4620      	mov	r0, r4
 801278e:	4629      	mov	r1, r5
 8012790:	f7ee f9c2 	bl	8000b18 <__aeabi_dcmpeq>
 8012794:	2800      	cmp	r0, #0
 8012796:	d146      	bne.n	8012826 <pow+0xd6>
 8012798:	ec45 4b10 	vmov	d0, r4, r5
 801279c:	f000 f84a 	bl	8012834 <finite>
 80127a0:	b338      	cbz	r0, 80127f2 <pow+0xa2>
 80127a2:	2200      	movs	r2, #0
 80127a4:	2300      	movs	r3, #0
 80127a6:	4620      	mov	r0, r4
 80127a8:	4629      	mov	r1, r5
 80127aa:	f7ee f9bf 	bl	8000b2c <__aeabi_dcmplt>
 80127ae:	b300      	cbz	r0, 80127f2 <pow+0xa2>
 80127b0:	f7fd fa98 	bl	800fce4 <__errno>
 80127b4:	2322      	movs	r3, #34	; 0x22
 80127b6:	e01b      	b.n	80127f0 <pow+0xa0>
 80127b8:	ec47 6b10 	vmov	d0, r6, r7
 80127bc:	f000 f83a 	bl	8012834 <finite>
 80127c0:	b9e0      	cbnz	r0, 80127fc <pow+0xac>
 80127c2:	eeb0 0a48 	vmov.f32	s0, s16
 80127c6:	eef0 0a68 	vmov.f32	s1, s17
 80127ca:	f000 f833 	bl	8012834 <finite>
 80127ce:	b1a8      	cbz	r0, 80127fc <pow+0xac>
 80127d0:	ec45 4b10 	vmov	d0, r4, r5
 80127d4:	f000 f82e 	bl	8012834 <finite>
 80127d8:	b180      	cbz	r0, 80127fc <pow+0xac>
 80127da:	4632      	mov	r2, r6
 80127dc:	463b      	mov	r3, r7
 80127de:	4630      	mov	r0, r6
 80127e0:	4639      	mov	r1, r7
 80127e2:	f7ee f9cb 	bl	8000b7c <__aeabi_dcmpun>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d0e2      	beq.n	80127b0 <pow+0x60>
 80127ea:	f7fd fa7b 	bl	800fce4 <__errno>
 80127ee:	2321      	movs	r3, #33	; 0x21
 80127f0:	6003      	str	r3, [r0, #0]
 80127f2:	ecbd 8b02 	vpop	{d8}
 80127f6:	ec47 6b10 	vmov	d0, r6, r7
 80127fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127fc:	2200      	movs	r2, #0
 80127fe:	2300      	movs	r3, #0
 8012800:	4630      	mov	r0, r6
 8012802:	4639      	mov	r1, r7
 8012804:	f7ee f988 	bl	8000b18 <__aeabi_dcmpeq>
 8012808:	2800      	cmp	r0, #0
 801280a:	d0f2      	beq.n	80127f2 <pow+0xa2>
 801280c:	eeb0 0a48 	vmov.f32	s0, s16
 8012810:	eef0 0a68 	vmov.f32	s1, s17
 8012814:	f000 f80e 	bl	8012834 <finite>
 8012818:	2800      	cmp	r0, #0
 801281a:	d0ea      	beq.n	80127f2 <pow+0xa2>
 801281c:	ec45 4b10 	vmov	d0, r4, r5
 8012820:	f000 f808 	bl	8012834 <finite>
 8012824:	e7c3      	b.n	80127ae <pow+0x5e>
 8012826:	4f01      	ldr	r7, [pc, #4]	; (801282c <pow+0xdc>)
 8012828:	2600      	movs	r6, #0
 801282a:	e7e2      	b.n	80127f2 <pow+0xa2>
 801282c:	3ff00000 	.word	0x3ff00000

08012830 <atan2f>:
 8012830:	f000 bd42 	b.w	80132b8 <__ieee754_atan2f>

08012834 <finite>:
 8012834:	b082      	sub	sp, #8
 8012836:	ed8d 0b00 	vstr	d0, [sp]
 801283a:	9801      	ldr	r0, [sp, #4]
 801283c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012840:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012844:	0fc0      	lsrs	r0, r0, #31
 8012846:	b002      	add	sp, #8
 8012848:	4770      	bx	lr
 801284a:	0000      	movs	r0, r0
 801284c:	0000      	movs	r0, r0
	...

08012850 <__ieee754_pow>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	ed2d 8b06 	vpush	{d8-d10}
 8012858:	b089      	sub	sp, #36	; 0x24
 801285a:	ed8d 1b00 	vstr	d1, [sp]
 801285e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012866:	ea58 0102 	orrs.w	r1, r8, r2
 801286a:	ec57 6b10 	vmov	r6, r7, d0
 801286e:	d115      	bne.n	801289c <__ieee754_pow+0x4c>
 8012870:	19b3      	adds	r3, r6, r6
 8012872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012876:	4152      	adcs	r2, r2
 8012878:	4299      	cmp	r1, r3
 801287a:	4b89      	ldr	r3, [pc, #548]	; (8012aa0 <__ieee754_pow+0x250>)
 801287c:	4193      	sbcs	r3, r2
 801287e:	f080 84d1 	bcs.w	8013224 <__ieee754_pow+0x9d4>
 8012882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	f7ed fd27 	bl	80002dc <__adddf3>
 801288e:	ec41 0b10 	vmov	d0, r0, r1
 8012892:	b009      	add	sp, #36	; 0x24
 8012894:	ecbd 8b06 	vpop	{d8-d10}
 8012898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289c:	4b81      	ldr	r3, [pc, #516]	; (8012aa4 <__ieee754_pow+0x254>)
 801289e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80128a2:	429c      	cmp	r4, r3
 80128a4:	ee10 aa10 	vmov	sl, s0
 80128a8:	463d      	mov	r5, r7
 80128aa:	dc06      	bgt.n	80128ba <__ieee754_pow+0x6a>
 80128ac:	d101      	bne.n	80128b2 <__ieee754_pow+0x62>
 80128ae:	2e00      	cmp	r6, #0
 80128b0:	d1e7      	bne.n	8012882 <__ieee754_pow+0x32>
 80128b2:	4598      	cmp	r8, r3
 80128b4:	dc01      	bgt.n	80128ba <__ieee754_pow+0x6a>
 80128b6:	d10f      	bne.n	80128d8 <__ieee754_pow+0x88>
 80128b8:	b172      	cbz	r2, 80128d8 <__ieee754_pow+0x88>
 80128ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80128be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80128c2:	ea55 050a 	orrs.w	r5, r5, sl
 80128c6:	d1dc      	bne.n	8012882 <__ieee754_pow+0x32>
 80128c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80128cc:	18db      	adds	r3, r3, r3
 80128ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80128d2:	4152      	adcs	r2, r2
 80128d4:	429d      	cmp	r5, r3
 80128d6:	e7d0      	b.n	801287a <__ieee754_pow+0x2a>
 80128d8:	2d00      	cmp	r5, #0
 80128da:	da3b      	bge.n	8012954 <__ieee754_pow+0x104>
 80128dc:	4b72      	ldr	r3, [pc, #456]	; (8012aa8 <__ieee754_pow+0x258>)
 80128de:	4598      	cmp	r8, r3
 80128e0:	dc51      	bgt.n	8012986 <__ieee754_pow+0x136>
 80128e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80128e6:	4598      	cmp	r8, r3
 80128e8:	f340 84ab 	ble.w	8013242 <__ieee754_pow+0x9f2>
 80128ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80128f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80128f4:	2b14      	cmp	r3, #20
 80128f6:	dd0f      	ble.n	8012918 <__ieee754_pow+0xc8>
 80128f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80128fc:	fa22 f103 	lsr.w	r1, r2, r3
 8012900:	fa01 f303 	lsl.w	r3, r1, r3
 8012904:	4293      	cmp	r3, r2
 8012906:	f040 849c 	bne.w	8013242 <__ieee754_pow+0x9f2>
 801290a:	f001 0101 	and.w	r1, r1, #1
 801290e:	f1c1 0302 	rsb	r3, r1, #2
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	b182      	cbz	r2, 8012938 <__ieee754_pow+0xe8>
 8012916:	e05f      	b.n	80129d8 <__ieee754_pow+0x188>
 8012918:	2a00      	cmp	r2, #0
 801291a:	d15b      	bne.n	80129d4 <__ieee754_pow+0x184>
 801291c:	f1c3 0314 	rsb	r3, r3, #20
 8012920:	fa48 f103 	asr.w	r1, r8, r3
 8012924:	fa01 f303 	lsl.w	r3, r1, r3
 8012928:	4543      	cmp	r3, r8
 801292a:	f040 8487 	bne.w	801323c <__ieee754_pow+0x9ec>
 801292e:	f001 0101 	and.w	r1, r1, #1
 8012932:	f1c1 0302 	rsb	r3, r1, #2
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	4b5c      	ldr	r3, [pc, #368]	; (8012aac <__ieee754_pow+0x25c>)
 801293a:	4598      	cmp	r8, r3
 801293c:	d132      	bne.n	80129a4 <__ieee754_pow+0x154>
 801293e:	f1b9 0f00 	cmp.w	r9, #0
 8012942:	f280 8477 	bge.w	8013234 <__ieee754_pow+0x9e4>
 8012946:	4959      	ldr	r1, [pc, #356]	; (8012aac <__ieee754_pow+0x25c>)
 8012948:	4632      	mov	r2, r6
 801294a:	463b      	mov	r3, r7
 801294c:	2000      	movs	r0, #0
 801294e:	f7ed ffa5 	bl	800089c <__aeabi_ddiv>
 8012952:	e79c      	b.n	801288e <__ieee754_pow+0x3e>
 8012954:	2300      	movs	r3, #0
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	2a00      	cmp	r2, #0
 801295a:	d13d      	bne.n	80129d8 <__ieee754_pow+0x188>
 801295c:	4b51      	ldr	r3, [pc, #324]	; (8012aa4 <__ieee754_pow+0x254>)
 801295e:	4598      	cmp	r8, r3
 8012960:	d1ea      	bne.n	8012938 <__ieee754_pow+0xe8>
 8012962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801296a:	ea53 030a 	orrs.w	r3, r3, sl
 801296e:	f000 8459 	beq.w	8013224 <__ieee754_pow+0x9d4>
 8012972:	4b4f      	ldr	r3, [pc, #316]	; (8012ab0 <__ieee754_pow+0x260>)
 8012974:	429c      	cmp	r4, r3
 8012976:	dd08      	ble.n	801298a <__ieee754_pow+0x13a>
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	f2c0 8456 	blt.w	801322c <__ieee754_pow+0x9dc>
 8012980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012984:	e783      	b.n	801288e <__ieee754_pow+0x3e>
 8012986:	2302      	movs	r3, #2
 8012988:	e7e5      	b.n	8012956 <__ieee754_pow+0x106>
 801298a:	f1b9 0f00 	cmp.w	r9, #0
 801298e:	f04f 0000 	mov.w	r0, #0
 8012992:	f04f 0100 	mov.w	r1, #0
 8012996:	f6bf af7a 	bge.w	801288e <__ieee754_pow+0x3e>
 801299a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801299e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129a2:	e774      	b.n	801288e <__ieee754_pow+0x3e>
 80129a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80129a8:	d106      	bne.n	80129b8 <__ieee754_pow+0x168>
 80129aa:	4632      	mov	r2, r6
 80129ac:	463b      	mov	r3, r7
 80129ae:	4630      	mov	r0, r6
 80129b0:	4639      	mov	r1, r7
 80129b2:	f7ed fe49 	bl	8000648 <__aeabi_dmul>
 80129b6:	e76a      	b.n	801288e <__ieee754_pow+0x3e>
 80129b8:	4b3e      	ldr	r3, [pc, #248]	; (8012ab4 <__ieee754_pow+0x264>)
 80129ba:	4599      	cmp	r9, r3
 80129bc:	d10c      	bne.n	80129d8 <__ieee754_pow+0x188>
 80129be:	2d00      	cmp	r5, #0
 80129c0:	db0a      	blt.n	80129d8 <__ieee754_pow+0x188>
 80129c2:	ec47 6b10 	vmov	d0, r6, r7
 80129c6:	b009      	add	sp, #36	; 0x24
 80129c8:	ecbd 8b06 	vpop	{d8-d10}
 80129cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d0:	f000 be9c 	b.w	801370c <__ieee754_sqrt>
 80129d4:	2300      	movs	r3, #0
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	ec47 6b10 	vmov	d0, r6, r7
 80129dc:	f000 fc62 	bl	80132a4 <fabs>
 80129e0:	ec51 0b10 	vmov	r0, r1, d0
 80129e4:	f1ba 0f00 	cmp.w	sl, #0
 80129e8:	d129      	bne.n	8012a3e <__ieee754_pow+0x1ee>
 80129ea:	b124      	cbz	r4, 80129f6 <__ieee754_pow+0x1a6>
 80129ec:	4b2f      	ldr	r3, [pc, #188]	; (8012aac <__ieee754_pow+0x25c>)
 80129ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d123      	bne.n	8012a3e <__ieee754_pow+0x1ee>
 80129f6:	f1b9 0f00 	cmp.w	r9, #0
 80129fa:	da05      	bge.n	8012a08 <__ieee754_pow+0x1b8>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	2000      	movs	r0, #0
 8012a02:	492a      	ldr	r1, [pc, #168]	; (8012aac <__ieee754_pow+0x25c>)
 8012a04:	f7ed ff4a 	bl	800089c <__aeabi_ddiv>
 8012a08:	2d00      	cmp	r5, #0
 8012a0a:	f6bf af40 	bge.w	801288e <__ieee754_pow+0x3e>
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a18:	431c      	orrs	r4, r3
 8012a1a:	d108      	bne.n	8012a2e <__ieee754_pow+0x1de>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4610      	mov	r0, r2
 8012a22:	4619      	mov	r1, r3
 8012a24:	f7ed fc58 	bl	80002d8 <__aeabi_dsub>
 8012a28:	4602      	mov	r2, r0
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	e78f      	b.n	801294e <__ieee754_pow+0xfe>
 8012a2e:	9b04      	ldr	r3, [sp, #16]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	f47f af2c 	bne.w	801288e <__ieee754_pow+0x3e>
 8012a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	e727      	b.n	801288e <__ieee754_pow+0x3e>
 8012a3e:	0feb      	lsrs	r3, r5, #31
 8012a40:	3b01      	subs	r3, #1
 8012a42:	9306      	str	r3, [sp, #24]
 8012a44:	9a06      	ldr	r2, [sp, #24]
 8012a46:	9b04      	ldr	r3, [sp, #16]
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	d102      	bne.n	8012a52 <__ieee754_pow+0x202>
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	463b      	mov	r3, r7
 8012a50:	e7e6      	b.n	8012a20 <__ieee754_pow+0x1d0>
 8012a52:	4b19      	ldr	r3, [pc, #100]	; (8012ab8 <__ieee754_pow+0x268>)
 8012a54:	4598      	cmp	r8, r3
 8012a56:	f340 80fb 	ble.w	8012c50 <__ieee754_pow+0x400>
 8012a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012a5e:	4598      	cmp	r8, r3
 8012a60:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <__ieee754_pow+0x260>)
 8012a62:	dd0c      	ble.n	8012a7e <__ieee754_pow+0x22e>
 8012a64:	429c      	cmp	r4, r3
 8012a66:	dc0f      	bgt.n	8012a88 <__ieee754_pow+0x238>
 8012a68:	f1b9 0f00 	cmp.w	r9, #0
 8012a6c:	da0f      	bge.n	8012a8e <__ieee754_pow+0x23e>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	b009      	add	sp, #36	; 0x24
 8012a72:	ecbd 8b06 	vpop	{d8-d10}
 8012a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7a:	f000 be3e 	b.w	80136fa <__math_oflow>
 8012a7e:	429c      	cmp	r4, r3
 8012a80:	dbf2      	blt.n	8012a68 <__ieee754_pow+0x218>
 8012a82:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <__ieee754_pow+0x25c>)
 8012a84:	429c      	cmp	r4, r3
 8012a86:	dd19      	ble.n	8012abc <__ieee754_pow+0x26c>
 8012a88:	f1b9 0f00 	cmp.w	r9, #0
 8012a8c:	dcef      	bgt.n	8012a6e <__ieee754_pow+0x21e>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	b009      	add	sp, #36	; 0x24
 8012a92:	ecbd 8b06 	vpop	{d8-d10}
 8012a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9a:	f000 be25 	b.w	80136e8 <__math_uflow>
 8012a9e:	bf00      	nop
 8012aa0:	fff00000 	.word	0xfff00000
 8012aa4:	7ff00000 	.word	0x7ff00000
 8012aa8:	433fffff 	.word	0x433fffff
 8012aac:	3ff00000 	.word	0x3ff00000
 8012ab0:	3fefffff 	.word	0x3fefffff
 8012ab4:	3fe00000 	.word	0x3fe00000
 8012ab8:	41e00000 	.word	0x41e00000
 8012abc:	4b60      	ldr	r3, [pc, #384]	; (8012c40 <__ieee754_pow+0x3f0>)
 8012abe:	2200      	movs	r2, #0
 8012ac0:	f7ed fc0a 	bl	80002d8 <__aeabi_dsub>
 8012ac4:	a354      	add	r3, pc, #336	; (adr r3, 8012c18 <__ieee754_pow+0x3c8>)
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	4604      	mov	r4, r0
 8012acc:	460d      	mov	r5, r1
 8012ace:	f7ed fdbb 	bl	8000648 <__aeabi_dmul>
 8012ad2:	a353      	add	r3, pc, #332	; (adr r3, 8012c20 <__ieee754_pow+0x3d0>)
 8012ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad8:	4606      	mov	r6, r0
 8012ada:	460f      	mov	r7, r1
 8012adc:	4620      	mov	r0, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	f7ed fdb2 	bl	8000648 <__aeabi_dmul>
 8012ae4:	4b57      	ldr	r3, [pc, #348]	; (8012c44 <__ieee754_pow+0x3f4>)
 8012ae6:	4682      	mov	sl, r0
 8012ae8:	468b      	mov	fp, r1
 8012aea:	2200      	movs	r2, #0
 8012aec:	4620      	mov	r0, r4
 8012aee:	4629      	mov	r1, r5
 8012af0:	f7ed fdaa 	bl	8000648 <__aeabi_dmul>
 8012af4:	4602      	mov	r2, r0
 8012af6:	460b      	mov	r3, r1
 8012af8:	a14b      	add	r1, pc, #300	; (adr r1, 8012c28 <__ieee754_pow+0x3d8>)
 8012afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012afe:	f7ed fbeb 	bl	80002d8 <__aeabi_dsub>
 8012b02:	4622      	mov	r2, r4
 8012b04:	462b      	mov	r3, r5
 8012b06:	f7ed fd9f 	bl	8000648 <__aeabi_dmul>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	2000      	movs	r0, #0
 8012b10:	494d      	ldr	r1, [pc, #308]	; (8012c48 <__ieee754_pow+0x3f8>)
 8012b12:	f7ed fbe1 	bl	80002d8 <__aeabi_dsub>
 8012b16:	4622      	mov	r2, r4
 8012b18:	4680      	mov	r8, r0
 8012b1a:	4689      	mov	r9, r1
 8012b1c:	462b      	mov	r3, r5
 8012b1e:	4620      	mov	r0, r4
 8012b20:	4629      	mov	r1, r5
 8012b22:	f7ed fd91 	bl	8000648 <__aeabi_dmul>
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	f7ed fd8b 	bl	8000648 <__aeabi_dmul>
 8012b32:	a33f      	add	r3, pc, #252	; (adr r3, 8012c30 <__ieee754_pow+0x3e0>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fd86 	bl	8000648 <__aeabi_dmul>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4650      	mov	r0, sl
 8012b42:	4659      	mov	r1, fp
 8012b44:	f7ed fbc8 	bl	80002d8 <__aeabi_dsub>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4680      	mov	r8, r0
 8012b4e:	4689      	mov	r9, r1
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed fbc2 	bl	80002dc <__adddf3>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	463b      	mov	r3, r7
 8012b5e:	4604      	mov	r4, r0
 8012b60:	460d      	mov	r5, r1
 8012b62:	f7ed fbb9 	bl	80002d8 <__aeabi_dsub>
 8012b66:	4602      	mov	r2, r0
 8012b68:	460b      	mov	r3, r1
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	4649      	mov	r1, r9
 8012b6e:	f7ed fbb3 	bl	80002d8 <__aeabi_dsub>
 8012b72:	9b04      	ldr	r3, [sp, #16]
 8012b74:	9a06      	ldr	r2, [sp, #24]
 8012b76:	3b01      	subs	r3, #1
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	4682      	mov	sl, r0
 8012b7c:	468b      	mov	fp, r1
 8012b7e:	f040 81e7 	bne.w	8012f50 <__ieee754_pow+0x700>
 8012b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012c38 <__ieee754_pow+0x3e8>
 8012b86:	eeb0 8a47 	vmov.f32	s16, s14
 8012b8a:	eef0 8a67 	vmov.f32	s17, s15
 8012b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b92:	2600      	movs	r6, #0
 8012b94:	4632      	mov	r2, r6
 8012b96:	463b      	mov	r3, r7
 8012b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b9c:	f7ed fb9c 	bl	80002d8 <__aeabi_dsub>
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	f7ed fd50 	bl	8000648 <__aeabi_dmul>
 8012ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bac:	4680      	mov	r8, r0
 8012bae:	4689      	mov	r9, r1
 8012bb0:	4650      	mov	r0, sl
 8012bb2:	4659      	mov	r1, fp
 8012bb4:	f7ed fd48 	bl	8000648 <__aeabi_dmul>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	4649      	mov	r1, r9
 8012bc0:	f7ed fb8c 	bl	80002dc <__adddf3>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	4680      	mov	r8, r0
 8012bca:	4689      	mov	r9, r1
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ed fd3a 	bl	8000648 <__aeabi_dmul>
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	460d      	mov	r5, r1
 8012bda:	4602      	mov	r2, r0
 8012bdc:	4649      	mov	r1, r9
 8012bde:	4640      	mov	r0, r8
 8012be0:	f7ed fb7c 	bl	80002dc <__adddf3>
 8012be4:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <__ieee754_pow+0x3fc>)
 8012be6:	4299      	cmp	r1, r3
 8012be8:	ec45 4b19 	vmov	d9, r4, r5
 8012bec:	4606      	mov	r6, r0
 8012bee:	460f      	mov	r7, r1
 8012bf0:	468b      	mov	fp, r1
 8012bf2:	f340 82f0 	ble.w	80131d6 <__ieee754_pow+0x986>
 8012bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012bfe:	4303      	orrs	r3, r0
 8012c00:	f000 81e4 	beq.w	8012fcc <__ieee754_pow+0x77c>
 8012c04:	ec51 0b18 	vmov	r0, r1, d8
 8012c08:	2200      	movs	r2, #0
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f7ed ff8e 	bl	8000b2c <__aeabi_dcmplt>
 8012c10:	3800      	subs	r0, #0
 8012c12:	bf18      	it	ne
 8012c14:	2001      	movne	r0, #1
 8012c16:	e72b      	b.n	8012a70 <__ieee754_pow+0x220>
 8012c18:	60000000 	.word	0x60000000
 8012c1c:	3ff71547 	.word	0x3ff71547
 8012c20:	f85ddf44 	.word	0xf85ddf44
 8012c24:	3e54ae0b 	.word	0x3e54ae0b
 8012c28:	55555555 	.word	0x55555555
 8012c2c:	3fd55555 	.word	0x3fd55555
 8012c30:	652b82fe 	.word	0x652b82fe
 8012c34:	3ff71547 	.word	0x3ff71547
 8012c38:	00000000 	.word	0x00000000
 8012c3c:	bff00000 	.word	0xbff00000
 8012c40:	3ff00000 	.word	0x3ff00000
 8012c44:	3fd00000 	.word	0x3fd00000
 8012c48:	3fe00000 	.word	0x3fe00000
 8012c4c:	408fffff 	.word	0x408fffff
 8012c50:	4bd5      	ldr	r3, [pc, #852]	; (8012fa8 <__ieee754_pow+0x758>)
 8012c52:	402b      	ands	r3, r5
 8012c54:	2200      	movs	r2, #0
 8012c56:	b92b      	cbnz	r3, 8012c64 <__ieee754_pow+0x414>
 8012c58:	4bd4      	ldr	r3, [pc, #848]	; (8012fac <__ieee754_pow+0x75c>)
 8012c5a:	f7ed fcf5 	bl	8000648 <__aeabi_dmul>
 8012c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012c62:	460c      	mov	r4, r1
 8012c64:	1523      	asrs	r3, r4, #20
 8012c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012c6a:	4413      	add	r3, r2
 8012c6c:	9305      	str	r3, [sp, #20]
 8012c6e:	4bd0      	ldr	r3, [pc, #832]	; (8012fb0 <__ieee754_pow+0x760>)
 8012c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012c78:	429c      	cmp	r4, r3
 8012c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012c7e:	dd08      	ble.n	8012c92 <__ieee754_pow+0x442>
 8012c80:	4bcc      	ldr	r3, [pc, #816]	; (8012fb4 <__ieee754_pow+0x764>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	f340 8162 	ble.w	8012f4c <__ieee754_pow+0x6fc>
 8012c88:	9b05      	ldr	r3, [sp, #20]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	9305      	str	r3, [sp, #20]
 8012c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012c92:	2400      	movs	r4, #0
 8012c94:	00e3      	lsls	r3, r4, #3
 8012c96:	9307      	str	r3, [sp, #28]
 8012c98:	4bc7      	ldr	r3, [pc, #796]	; (8012fb8 <__ieee754_pow+0x768>)
 8012c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c9e:	ed93 7b00 	vldr	d7, [r3]
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	ec53 2b17 	vmov	r2, r3, d7
 8012ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8012cac:	eef0 9a67 	vmov.f32	s19, s15
 8012cb0:	4682      	mov	sl, r0
 8012cb2:	f7ed fb11 	bl	80002d8 <__aeabi_dsub>
 8012cb6:	4652      	mov	r2, sl
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	ec51 0b19 	vmov	r0, r1, d9
 8012cc2:	f7ed fb0b 	bl	80002dc <__adddf3>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	2000      	movs	r0, #0
 8012ccc:	49bb      	ldr	r1, [pc, #748]	; (8012fbc <__ieee754_pow+0x76c>)
 8012cce:	f7ed fde5 	bl	800089c <__aeabi_ddiv>
 8012cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4630      	mov	r0, r6
 8012cdc:	4639      	mov	r1, r7
 8012cde:	f7ed fcb3 	bl	8000648 <__aeabi_dmul>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ce8:	9302      	str	r3, [sp, #8]
 8012cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012cee:	46ab      	mov	fp, r5
 8012cf0:	106d      	asrs	r5, r5, #1
 8012cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012cfa:	ec41 0b18 	vmov	d8, r0, r1
 8012cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012d02:	2200      	movs	r2, #0
 8012d04:	4640      	mov	r0, r8
 8012d06:	4649      	mov	r1, r9
 8012d08:	4614      	mov	r4, r2
 8012d0a:	461d      	mov	r5, r3
 8012d0c:	f7ed fc9c 	bl	8000648 <__aeabi_dmul>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4630      	mov	r0, r6
 8012d16:	4639      	mov	r1, r7
 8012d18:	f7ed fade 	bl	80002d8 <__aeabi_dsub>
 8012d1c:	ec53 2b19 	vmov	r2, r3, d9
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	4620      	mov	r0, r4
 8012d26:	4629      	mov	r1, r5
 8012d28:	f7ed fad6 	bl	80002d8 <__aeabi_dsub>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4650      	mov	r0, sl
 8012d32:	4659      	mov	r1, fp
 8012d34:	f7ed fad0 	bl	80002d8 <__aeabi_dsub>
 8012d38:	4642      	mov	r2, r8
 8012d3a:	464b      	mov	r3, r9
 8012d3c:	f7ed fc84 	bl	8000648 <__aeabi_dmul>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	4630      	mov	r0, r6
 8012d46:	4639      	mov	r1, r7
 8012d48:	f7ed fac6 	bl	80002d8 <__aeabi_dsub>
 8012d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8012d50:	f7ed fc7a 	bl	8000648 <__aeabi_dmul>
 8012d54:	ec53 2b18 	vmov	r2, r3, d8
 8012d58:	ec41 0b19 	vmov	d9, r0, r1
 8012d5c:	ec51 0b18 	vmov	r0, r1, d8
 8012d60:	f7ed fc72 	bl	8000648 <__aeabi_dmul>
 8012d64:	a37c      	add	r3, pc, #496	; (adr r3, 8012f58 <__ieee754_pow+0x708>)
 8012d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	f7ed fc6b 	bl	8000648 <__aeabi_dmul>
 8012d72:	a37b      	add	r3, pc, #492	; (adr r3, 8012f60 <__ieee754_pow+0x710>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f7ed fab0 	bl	80002dc <__adddf3>
 8012d7c:	4622      	mov	r2, r4
 8012d7e:	462b      	mov	r3, r5
 8012d80:	f7ed fc62 	bl	8000648 <__aeabi_dmul>
 8012d84:	a378      	add	r3, pc, #480	; (adr r3, 8012f68 <__ieee754_pow+0x718>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f7ed faa7 	bl	80002dc <__adddf3>
 8012d8e:	4622      	mov	r2, r4
 8012d90:	462b      	mov	r3, r5
 8012d92:	f7ed fc59 	bl	8000648 <__aeabi_dmul>
 8012d96:	a376      	add	r3, pc, #472	; (adr r3, 8012f70 <__ieee754_pow+0x720>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	f7ed fa9e 	bl	80002dc <__adddf3>
 8012da0:	4622      	mov	r2, r4
 8012da2:	462b      	mov	r3, r5
 8012da4:	f7ed fc50 	bl	8000648 <__aeabi_dmul>
 8012da8:	a373      	add	r3, pc, #460	; (adr r3, 8012f78 <__ieee754_pow+0x728>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	f7ed fa95 	bl	80002dc <__adddf3>
 8012db2:	4622      	mov	r2, r4
 8012db4:	462b      	mov	r3, r5
 8012db6:	f7ed fc47 	bl	8000648 <__aeabi_dmul>
 8012dba:	a371      	add	r3, pc, #452	; (adr r3, 8012f80 <__ieee754_pow+0x730>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa8c 	bl	80002dc <__adddf3>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	460f      	mov	r7, r1
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fc3a 	bl	8000648 <__aeabi_dmul>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fc34 	bl	8000648 <__aeabi_dmul>
 8012de0:	4642      	mov	r2, r8
 8012de2:	4604      	mov	r4, r0
 8012de4:	460d      	mov	r5, r1
 8012de6:	464b      	mov	r3, r9
 8012de8:	ec51 0b18 	vmov	r0, r1, d8
 8012dec:	f7ed fa76 	bl	80002dc <__adddf3>
 8012df0:	ec53 2b19 	vmov	r2, r3, d9
 8012df4:	f7ed fc28 	bl	8000648 <__aeabi_dmul>
 8012df8:	4622      	mov	r2, r4
 8012dfa:	462b      	mov	r3, r5
 8012dfc:	f7ed fa6e 	bl	80002dc <__adddf3>
 8012e00:	4642      	mov	r2, r8
 8012e02:	4682      	mov	sl, r0
 8012e04:	468b      	mov	fp, r1
 8012e06:	464b      	mov	r3, r9
 8012e08:	4640      	mov	r0, r8
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	f7ed fc1c 	bl	8000648 <__aeabi_dmul>
 8012e10:	4b6b      	ldr	r3, [pc, #428]	; (8012fc0 <__ieee754_pow+0x770>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	4606      	mov	r6, r0
 8012e16:	460f      	mov	r7, r1
 8012e18:	f7ed fa60 	bl	80002dc <__adddf3>
 8012e1c:	4652      	mov	r2, sl
 8012e1e:	465b      	mov	r3, fp
 8012e20:	f7ed fa5c 	bl	80002dc <__adddf3>
 8012e24:	2000      	movs	r0, #0
 8012e26:	4604      	mov	r4, r0
 8012e28:	460d      	mov	r5, r1
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fc09 	bl	8000648 <__aeabi_dmul>
 8012e36:	4b62      	ldr	r3, [pc, #392]	; (8012fc0 <__ieee754_pow+0x770>)
 8012e38:	4680      	mov	r8, r0
 8012e3a:	4689      	mov	r9, r1
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	f7ed fa49 	bl	80002d8 <__aeabi_dsub>
 8012e46:	4632      	mov	r2, r6
 8012e48:	463b      	mov	r3, r7
 8012e4a:	f7ed fa45 	bl	80002d8 <__aeabi_dsub>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	460b      	mov	r3, r1
 8012e52:	4650      	mov	r0, sl
 8012e54:	4659      	mov	r1, fp
 8012e56:	f7ed fa3f 	bl	80002d8 <__aeabi_dsub>
 8012e5a:	ec53 2b18 	vmov	r2, r3, d8
 8012e5e:	f7ed fbf3 	bl	8000648 <__aeabi_dmul>
 8012e62:	4622      	mov	r2, r4
 8012e64:	4606      	mov	r6, r0
 8012e66:	460f      	mov	r7, r1
 8012e68:	462b      	mov	r3, r5
 8012e6a:	ec51 0b19 	vmov	r0, r1, d9
 8012e6e:	f7ed fbeb 	bl	8000648 <__aeabi_dmul>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	4630      	mov	r0, r6
 8012e78:	4639      	mov	r1, r7
 8012e7a:	f7ed fa2f 	bl	80002dc <__adddf3>
 8012e7e:	4606      	mov	r6, r0
 8012e80:	460f      	mov	r7, r1
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	f7ed fa27 	bl	80002dc <__adddf3>
 8012e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8012f88 <__ieee754_pow+0x738>)
 8012e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e94:	2000      	movs	r0, #0
 8012e96:	4604      	mov	r4, r0
 8012e98:	460d      	mov	r5, r1
 8012e9a:	f7ed fbd5 	bl	8000648 <__aeabi_dmul>
 8012e9e:	4642      	mov	r2, r8
 8012ea0:	ec41 0b18 	vmov	d8, r0, r1
 8012ea4:	464b      	mov	r3, r9
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f7ed fa15 	bl	80002d8 <__aeabi_dsub>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	4639      	mov	r1, r7
 8012eb6:	f7ed fa0f 	bl	80002d8 <__aeabi_dsub>
 8012eba:	a335      	add	r3, pc, #212	; (adr r3, 8012f90 <__ieee754_pow+0x740>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed fbc2 	bl	8000648 <__aeabi_dmul>
 8012ec4:	a334      	add	r3, pc, #208	; (adr r3, 8012f98 <__ieee754_pow+0x748>)
 8012ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eca:	4606      	mov	r6, r0
 8012ecc:	460f      	mov	r7, r1
 8012ece:	4620      	mov	r0, r4
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	f7ed fbb9 	bl	8000648 <__aeabi_dmul>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	460b      	mov	r3, r1
 8012eda:	4630      	mov	r0, r6
 8012edc:	4639      	mov	r1, r7
 8012ede:	f7ed f9fd 	bl	80002dc <__adddf3>
 8012ee2:	9a07      	ldr	r2, [sp, #28]
 8012ee4:	4b37      	ldr	r3, [pc, #220]	; (8012fc4 <__ieee754_pow+0x774>)
 8012ee6:	4413      	add	r3, r2
 8012ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eec:	f7ed f9f6 	bl	80002dc <__adddf3>
 8012ef0:	4682      	mov	sl, r0
 8012ef2:	9805      	ldr	r0, [sp, #20]
 8012ef4:	468b      	mov	fp, r1
 8012ef6:	f7ed fb3d 	bl	8000574 <__aeabi_i2d>
 8012efa:	9a07      	ldr	r2, [sp, #28]
 8012efc:	4b32      	ldr	r3, [pc, #200]	; (8012fc8 <__ieee754_pow+0x778>)
 8012efe:	4413      	add	r3, r2
 8012f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f04:	4606      	mov	r6, r0
 8012f06:	460f      	mov	r7, r1
 8012f08:	4652      	mov	r2, sl
 8012f0a:	465b      	mov	r3, fp
 8012f0c:	ec51 0b18 	vmov	r0, r1, d8
 8012f10:	f7ed f9e4 	bl	80002dc <__adddf3>
 8012f14:	4642      	mov	r2, r8
 8012f16:	464b      	mov	r3, r9
 8012f18:	f7ed f9e0 	bl	80002dc <__adddf3>
 8012f1c:	4632      	mov	r2, r6
 8012f1e:	463b      	mov	r3, r7
 8012f20:	f7ed f9dc 	bl	80002dc <__adddf3>
 8012f24:	2000      	movs	r0, #0
 8012f26:	4632      	mov	r2, r6
 8012f28:	463b      	mov	r3, r7
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	f7ed f9d3 	bl	80002d8 <__aeabi_dsub>
 8012f32:	4642      	mov	r2, r8
 8012f34:	464b      	mov	r3, r9
 8012f36:	f7ed f9cf 	bl	80002d8 <__aeabi_dsub>
 8012f3a:	ec53 2b18 	vmov	r2, r3, d8
 8012f3e:	f7ed f9cb 	bl	80002d8 <__aeabi_dsub>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4650      	mov	r0, sl
 8012f48:	4659      	mov	r1, fp
 8012f4a:	e610      	b.n	8012b6e <__ieee754_pow+0x31e>
 8012f4c:	2401      	movs	r4, #1
 8012f4e:	e6a1      	b.n	8012c94 <__ieee754_pow+0x444>
 8012f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012fa0 <__ieee754_pow+0x750>
 8012f54:	e617      	b.n	8012b86 <__ieee754_pow+0x336>
 8012f56:	bf00      	nop
 8012f58:	4a454eef 	.word	0x4a454eef
 8012f5c:	3fca7e28 	.word	0x3fca7e28
 8012f60:	93c9db65 	.word	0x93c9db65
 8012f64:	3fcd864a 	.word	0x3fcd864a
 8012f68:	a91d4101 	.word	0xa91d4101
 8012f6c:	3fd17460 	.word	0x3fd17460
 8012f70:	518f264d 	.word	0x518f264d
 8012f74:	3fd55555 	.word	0x3fd55555
 8012f78:	db6fabff 	.word	0xdb6fabff
 8012f7c:	3fdb6db6 	.word	0x3fdb6db6
 8012f80:	33333303 	.word	0x33333303
 8012f84:	3fe33333 	.word	0x3fe33333
 8012f88:	e0000000 	.word	0xe0000000
 8012f8c:	3feec709 	.word	0x3feec709
 8012f90:	dc3a03fd 	.word	0xdc3a03fd
 8012f94:	3feec709 	.word	0x3feec709
 8012f98:	145b01f5 	.word	0x145b01f5
 8012f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8012fa0:	00000000 	.word	0x00000000
 8012fa4:	3ff00000 	.word	0x3ff00000
 8012fa8:	7ff00000 	.word	0x7ff00000
 8012fac:	43400000 	.word	0x43400000
 8012fb0:	0003988e 	.word	0x0003988e
 8012fb4:	000bb679 	.word	0x000bb679
 8012fb8:	08014150 	.word	0x08014150
 8012fbc:	3ff00000 	.word	0x3ff00000
 8012fc0:	40080000 	.word	0x40080000
 8012fc4:	08014170 	.word	0x08014170
 8012fc8:	08014160 	.word	0x08014160
 8012fcc:	a3b3      	add	r3, pc, #716	; (adr r3, 801329c <__ieee754_pow+0xa4c>)
 8012fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd2:	4640      	mov	r0, r8
 8012fd4:	4649      	mov	r1, r9
 8012fd6:	f7ed f981 	bl	80002dc <__adddf3>
 8012fda:	4622      	mov	r2, r4
 8012fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	f7ed f977 	bl	80002d8 <__aeabi_dsub>
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	ec51 0b1a 	vmov	r0, r1, d10
 8012ff2:	f7ed fdb9 	bl	8000b68 <__aeabi_dcmpgt>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f47f ae04 	bne.w	8012c04 <__ieee754_pow+0x3b4>
 8012ffc:	4aa2      	ldr	r2, [pc, #648]	; (8013288 <__ieee754_pow+0xa38>)
 8012ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013002:	4293      	cmp	r3, r2
 8013004:	f340 8107 	ble.w	8013216 <__ieee754_pow+0x9c6>
 8013008:	151b      	asrs	r3, r3, #20
 801300a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801300e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013012:	fa4a fa03 	asr.w	sl, sl, r3
 8013016:	44da      	add	sl, fp
 8013018:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801301c:	489b      	ldr	r0, [pc, #620]	; (801328c <__ieee754_pow+0xa3c>)
 801301e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013022:	4108      	asrs	r0, r1
 8013024:	ea00 030a 	and.w	r3, r0, sl
 8013028:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801302c:	f1c1 0114 	rsb	r1, r1, #20
 8013030:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013034:	fa4a fa01 	asr.w	sl, sl, r1
 8013038:	f1bb 0f00 	cmp.w	fp, #0
 801303c:	f04f 0200 	mov.w	r2, #0
 8013040:	4620      	mov	r0, r4
 8013042:	4629      	mov	r1, r5
 8013044:	bfb8      	it	lt
 8013046:	f1ca 0a00 	rsblt	sl, sl, #0
 801304a:	f7ed f945 	bl	80002d8 <__aeabi_dsub>
 801304e:	ec41 0b19 	vmov	d9, r0, r1
 8013052:	4642      	mov	r2, r8
 8013054:	464b      	mov	r3, r9
 8013056:	ec51 0b19 	vmov	r0, r1, d9
 801305a:	f7ed f93f 	bl	80002dc <__adddf3>
 801305e:	a37a      	add	r3, pc, #488	; (adr r3, 8013248 <__ieee754_pow+0x9f8>)
 8013060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013064:	2000      	movs	r0, #0
 8013066:	4604      	mov	r4, r0
 8013068:	460d      	mov	r5, r1
 801306a:	f7ed faed 	bl	8000648 <__aeabi_dmul>
 801306e:	ec53 2b19 	vmov	r2, r3, d9
 8013072:	4606      	mov	r6, r0
 8013074:	460f      	mov	r7, r1
 8013076:	4620      	mov	r0, r4
 8013078:	4629      	mov	r1, r5
 801307a:	f7ed f92d 	bl	80002d8 <__aeabi_dsub>
 801307e:	4602      	mov	r2, r0
 8013080:	460b      	mov	r3, r1
 8013082:	4640      	mov	r0, r8
 8013084:	4649      	mov	r1, r9
 8013086:	f7ed f927 	bl	80002d8 <__aeabi_dsub>
 801308a:	a371      	add	r3, pc, #452	; (adr r3, 8013250 <__ieee754_pow+0xa00>)
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	f7ed fada 	bl	8000648 <__aeabi_dmul>
 8013094:	a370      	add	r3, pc, #448	; (adr r3, 8013258 <__ieee754_pow+0xa08>)
 8013096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309a:	4680      	mov	r8, r0
 801309c:	4689      	mov	r9, r1
 801309e:	4620      	mov	r0, r4
 80130a0:	4629      	mov	r1, r5
 80130a2:	f7ed fad1 	bl	8000648 <__aeabi_dmul>
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	4640      	mov	r0, r8
 80130ac:	4649      	mov	r1, r9
 80130ae:	f7ed f915 	bl	80002dc <__adddf3>
 80130b2:	4604      	mov	r4, r0
 80130b4:	460d      	mov	r5, r1
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4630      	mov	r0, r6
 80130bc:	4639      	mov	r1, r7
 80130be:	f7ed f90d 	bl	80002dc <__adddf3>
 80130c2:	4632      	mov	r2, r6
 80130c4:	463b      	mov	r3, r7
 80130c6:	4680      	mov	r8, r0
 80130c8:	4689      	mov	r9, r1
 80130ca:	f7ed f905 	bl	80002d8 <__aeabi_dsub>
 80130ce:	4602      	mov	r2, r0
 80130d0:	460b      	mov	r3, r1
 80130d2:	4620      	mov	r0, r4
 80130d4:	4629      	mov	r1, r5
 80130d6:	f7ed f8ff 	bl	80002d8 <__aeabi_dsub>
 80130da:	4642      	mov	r2, r8
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	464b      	mov	r3, r9
 80130e2:	4640      	mov	r0, r8
 80130e4:	4649      	mov	r1, r9
 80130e6:	f7ed faaf 	bl	8000648 <__aeabi_dmul>
 80130ea:	a35d      	add	r3, pc, #372	; (adr r3, 8013260 <__ieee754_pow+0xa10>)
 80130ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f0:	4604      	mov	r4, r0
 80130f2:	460d      	mov	r5, r1
 80130f4:	f7ed faa8 	bl	8000648 <__aeabi_dmul>
 80130f8:	a35b      	add	r3, pc, #364	; (adr r3, 8013268 <__ieee754_pow+0xa18>)
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	f7ed f8eb 	bl	80002d8 <__aeabi_dsub>
 8013102:	4622      	mov	r2, r4
 8013104:	462b      	mov	r3, r5
 8013106:	f7ed fa9f 	bl	8000648 <__aeabi_dmul>
 801310a:	a359      	add	r3, pc, #356	; (adr r3, 8013270 <__ieee754_pow+0xa20>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	f7ed f8e4 	bl	80002dc <__adddf3>
 8013114:	4622      	mov	r2, r4
 8013116:	462b      	mov	r3, r5
 8013118:	f7ed fa96 	bl	8000648 <__aeabi_dmul>
 801311c:	a356      	add	r3, pc, #344	; (adr r3, 8013278 <__ieee754_pow+0xa28>)
 801311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013122:	f7ed f8d9 	bl	80002d8 <__aeabi_dsub>
 8013126:	4622      	mov	r2, r4
 8013128:	462b      	mov	r3, r5
 801312a:	f7ed fa8d 	bl	8000648 <__aeabi_dmul>
 801312e:	a354      	add	r3, pc, #336	; (adr r3, 8013280 <__ieee754_pow+0xa30>)
 8013130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013134:	f7ed f8d2 	bl	80002dc <__adddf3>
 8013138:	4622      	mov	r2, r4
 801313a:	462b      	mov	r3, r5
 801313c:	f7ed fa84 	bl	8000648 <__aeabi_dmul>
 8013140:	4602      	mov	r2, r0
 8013142:	460b      	mov	r3, r1
 8013144:	4640      	mov	r0, r8
 8013146:	4649      	mov	r1, r9
 8013148:	f7ed f8c6 	bl	80002d8 <__aeabi_dsub>
 801314c:	4604      	mov	r4, r0
 801314e:	460d      	mov	r5, r1
 8013150:	4602      	mov	r2, r0
 8013152:	460b      	mov	r3, r1
 8013154:	4640      	mov	r0, r8
 8013156:	4649      	mov	r1, r9
 8013158:	f7ed fa76 	bl	8000648 <__aeabi_dmul>
 801315c:	2200      	movs	r2, #0
 801315e:	ec41 0b19 	vmov	d9, r0, r1
 8013162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013166:	4620      	mov	r0, r4
 8013168:	4629      	mov	r1, r5
 801316a:	f7ed f8b5 	bl	80002d8 <__aeabi_dsub>
 801316e:	4602      	mov	r2, r0
 8013170:	460b      	mov	r3, r1
 8013172:	ec51 0b19 	vmov	r0, r1, d9
 8013176:	f7ed fb91 	bl	800089c <__aeabi_ddiv>
 801317a:	4632      	mov	r2, r6
 801317c:	4604      	mov	r4, r0
 801317e:	460d      	mov	r5, r1
 8013180:	463b      	mov	r3, r7
 8013182:	4640      	mov	r0, r8
 8013184:	4649      	mov	r1, r9
 8013186:	f7ed fa5f 	bl	8000648 <__aeabi_dmul>
 801318a:	4632      	mov	r2, r6
 801318c:	463b      	mov	r3, r7
 801318e:	f7ed f8a5 	bl	80002dc <__adddf3>
 8013192:	4602      	mov	r2, r0
 8013194:	460b      	mov	r3, r1
 8013196:	4620      	mov	r0, r4
 8013198:	4629      	mov	r1, r5
 801319a:	f7ed f89d 	bl	80002d8 <__aeabi_dsub>
 801319e:	4642      	mov	r2, r8
 80131a0:	464b      	mov	r3, r9
 80131a2:	f7ed f899 	bl	80002d8 <__aeabi_dsub>
 80131a6:	460b      	mov	r3, r1
 80131a8:	4602      	mov	r2, r0
 80131aa:	4939      	ldr	r1, [pc, #228]	; (8013290 <__ieee754_pow+0xa40>)
 80131ac:	2000      	movs	r0, #0
 80131ae:	f7ed f893 	bl	80002d8 <__aeabi_dsub>
 80131b2:	ec41 0b10 	vmov	d0, r0, r1
 80131b6:	ee10 3a90 	vmov	r3, s1
 80131ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80131be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131c2:	da2b      	bge.n	801321c <__ieee754_pow+0x9cc>
 80131c4:	4650      	mov	r0, sl
 80131c6:	f000 f9f3 	bl	80135b0 <scalbn>
 80131ca:	ec51 0b10 	vmov	r0, r1, d0
 80131ce:	ec53 2b18 	vmov	r2, r3, d8
 80131d2:	f7ff bbee 	b.w	80129b2 <__ieee754_pow+0x162>
 80131d6:	4b2f      	ldr	r3, [pc, #188]	; (8013294 <__ieee754_pow+0xa44>)
 80131d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80131dc:	429e      	cmp	r6, r3
 80131de:	f77f af0d 	ble.w	8012ffc <__ieee754_pow+0x7ac>
 80131e2:	4b2d      	ldr	r3, [pc, #180]	; (8013298 <__ieee754_pow+0xa48>)
 80131e4:	440b      	add	r3, r1
 80131e6:	4303      	orrs	r3, r0
 80131e8:	d009      	beq.n	80131fe <__ieee754_pow+0x9ae>
 80131ea:	ec51 0b18 	vmov	r0, r1, d8
 80131ee:	2200      	movs	r2, #0
 80131f0:	2300      	movs	r3, #0
 80131f2:	f7ed fc9b 	bl	8000b2c <__aeabi_dcmplt>
 80131f6:	3800      	subs	r0, #0
 80131f8:	bf18      	it	ne
 80131fa:	2001      	movne	r0, #1
 80131fc:	e448      	b.n	8012a90 <__ieee754_pow+0x240>
 80131fe:	4622      	mov	r2, r4
 8013200:	462b      	mov	r3, r5
 8013202:	f7ed f869 	bl	80002d8 <__aeabi_dsub>
 8013206:	4642      	mov	r2, r8
 8013208:	464b      	mov	r3, r9
 801320a:	f7ed fca3 	bl	8000b54 <__aeabi_dcmpge>
 801320e:	2800      	cmp	r0, #0
 8013210:	f43f aef4 	beq.w	8012ffc <__ieee754_pow+0x7ac>
 8013214:	e7e9      	b.n	80131ea <__ieee754_pow+0x99a>
 8013216:	f04f 0a00 	mov.w	sl, #0
 801321a:	e71a      	b.n	8013052 <__ieee754_pow+0x802>
 801321c:	ec51 0b10 	vmov	r0, r1, d0
 8013220:	4619      	mov	r1, r3
 8013222:	e7d4      	b.n	80131ce <__ieee754_pow+0x97e>
 8013224:	491a      	ldr	r1, [pc, #104]	; (8013290 <__ieee754_pow+0xa40>)
 8013226:	2000      	movs	r0, #0
 8013228:	f7ff bb31 	b.w	801288e <__ieee754_pow+0x3e>
 801322c:	2000      	movs	r0, #0
 801322e:	2100      	movs	r1, #0
 8013230:	f7ff bb2d 	b.w	801288e <__ieee754_pow+0x3e>
 8013234:	4630      	mov	r0, r6
 8013236:	4639      	mov	r1, r7
 8013238:	f7ff bb29 	b.w	801288e <__ieee754_pow+0x3e>
 801323c:	9204      	str	r2, [sp, #16]
 801323e:	f7ff bb7b 	b.w	8012938 <__ieee754_pow+0xe8>
 8013242:	2300      	movs	r3, #0
 8013244:	f7ff bb65 	b.w	8012912 <__ieee754_pow+0xc2>
 8013248:	00000000 	.word	0x00000000
 801324c:	3fe62e43 	.word	0x3fe62e43
 8013250:	fefa39ef 	.word	0xfefa39ef
 8013254:	3fe62e42 	.word	0x3fe62e42
 8013258:	0ca86c39 	.word	0x0ca86c39
 801325c:	be205c61 	.word	0xbe205c61
 8013260:	72bea4d0 	.word	0x72bea4d0
 8013264:	3e663769 	.word	0x3e663769
 8013268:	c5d26bf1 	.word	0xc5d26bf1
 801326c:	3ebbbd41 	.word	0x3ebbbd41
 8013270:	af25de2c 	.word	0xaf25de2c
 8013274:	3f11566a 	.word	0x3f11566a
 8013278:	16bebd93 	.word	0x16bebd93
 801327c:	3f66c16c 	.word	0x3f66c16c
 8013280:	5555553e 	.word	0x5555553e
 8013284:	3fc55555 	.word	0x3fc55555
 8013288:	3fe00000 	.word	0x3fe00000
 801328c:	fff00000 	.word	0xfff00000
 8013290:	3ff00000 	.word	0x3ff00000
 8013294:	4090cbff 	.word	0x4090cbff
 8013298:	3f6f3400 	.word	0x3f6f3400
 801329c:	652b82fe 	.word	0x652b82fe
 80132a0:	3c971547 	.word	0x3c971547

080132a4 <fabs>:
 80132a4:	ec51 0b10 	vmov	r0, r1, d0
 80132a8:	ee10 2a10 	vmov	r2, s0
 80132ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80132b0:	ec43 2b10 	vmov	d0, r2, r3
 80132b4:	4770      	bx	lr
	...

080132b8 <__ieee754_atan2f>:
 80132b8:	ee10 2a90 	vmov	r2, s1
 80132bc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80132c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80132c4:	b510      	push	{r4, lr}
 80132c6:	eef0 7a40 	vmov.f32	s15, s0
 80132ca:	dc06      	bgt.n	80132da <__ieee754_atan2f+0x22>
 80132cc:	ee10 0a10 	vmov	r0, s0
 80132d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80132d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80132d8:	dd04      	ble.n	80132e4 <__ieee754_atan2f+0x2c>
 80132da:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80132de:	eeb0 0a67 	vmov.f32	s0, s15
 80132e2:	bd10      	pop	{r4, pc}
 80132e4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80132e8:	d103      	bne.n	80132f2 <__ieee754_atan2f+0x3a>
 80132ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132ee:	f000 b883 	b.w	80133f8 <atanf>
 80132f2:	1794      	asrs	r4, r2, #30
 80132f4:	f004 0402 	and.w	r4, r4, #2
 80132f8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80132fc:	b943      	cbnz	r3, 8013310 <__ieee754_atan2f+0x58>
 80132fe:	2c02      	cmp	r4, #2
 8013300:	d05e      	beq.n	80133c0 <__ieee754_atan2f+0x108>
 8013302:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80133d4 <__ieee754_atan2f+0x11c>
 8013306:	2c03      	cmp	r4, #3
 8013308:	bf08      	it	eq
 801330a:	eef0 7a47 	vmoveq.f32	s15, s14
 801330e:	e7e6      	b.n	80132de <__ieee754_atan2f+0x26>
 8013310:	b941      	cbnz	r1, 8013324 <__ieee754_atan2f+0x6c>
 8013312:	eddf 7a31 	vldr	s15, [pc, #196]	; 80133d8 <__ieee754_atan2f+0x120>
 8013316:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80133dc <__ieee754_atan2f+0x124>
 801331a:	2800      	cmp	r0, #0
 801331c:	bfb8      	it	lt
 801331e:	eef0 7a47 	vmovlt.f32	s15, s14
 8013322:	e7dc      	b.n	80132de <__ieee754_atan2f+0x26>
 8013324:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013328:	d110      	bne.n	801334c <__ieee754_atan2f+0x94>
 801332a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801332e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013332:	d107      	bne.n	8013344 <__ieee754_atan2f+0x8c>
 8013334:	2c02      	cmp	r4, #2
 8013336:	d846      	bhi.n	80133c6 <__ieee754_atan2f+0x10e>
 8013338:	4b29      	ldr	r3, [pc, #164]	; (80133e0 <__ieee754_atan2f+0x128>)
 801333a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801333e:	edd3 7a00 	vldr	s15, [r3]
 8013342:	e7cc      	b.n	80132de <__ieee754_atan2f+0x26>
 8013344:	2c02      	cmp	r4, #2
 8013346:	d841      	bhi.n	80133cc <__ieee754_atan2f+0x114>
 8013348:	4b26      	ldr	r3, [pc, #152]	; (80133e4 <__ieee754_atan2f+0x12c>)
 801334a:	e7f6      	b.n	801333a <__ieee754_atan2f+0x82>
 801334c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013350:	d0df      	beq.n	8013312 <__ieee754_atan2f+0x5a>
 8013352:	1a5b      	subs	r3, r3, r1
 8013354:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013358:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801335c:	da1a      	bge.n	8013394 <__ieee754_atan2f+0xdc>
 801335e:	2a00      	cmp	r2, #0
 8013360:	da01      	bge.n	8013366 <__ieee754_atan2f+0xae>
 8013362:	313c      	adds	r1, #60	; 0x3c
 8013364:	db19      	blt.n	801339a <__ieee754_atan2f+0xe2>
 8013366:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801336a:	f000 f919 	bl	80135a0 <fabsf>
 801336e:	f000 f843 	bl	80133f8 <atanf>
 8013372:	eef0 7a40 	vmov.f32	s15, s0
 8013376:	2c01      	cmp	r4, #1
 8013378:	d012      	beq.n	80133a0 <__ieee754_atan2f+0xe8>
 801337a:	2c02      	cmp	r4, #2
 801337c:	d017      	beq.n	80133ae <__ieee754_atan2f+0xf6>
 801337e:	2c00      	cmp	r4, #0
 8013380:	d0ad      	beq.n	80132de <__ieee754_atan2f+0x26>
 8013382:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80133e8 <__ieee754_atan2f+0x130>
 8013386:	ee77 7a87 	vadd.f32	s15, s15, s14
 801338a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80133ec <__ieee754_atan2f+0x134>
 801338e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013392:	e7a4      	b.n	80132de <__ieee754_atan2f+0x26>
 8013394:	eddf 7a10 	vldr	s15, [pc, #64]	; 80133d8 <__ieee754_atan2f+0x120>
 8013398:	e7ed      	b.n	8013376 <__ieee754_atan2f+0xbe>
 801339a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80133f0 <__ieee754_atan2f+0x138>
 801339e:	e7ea      	b.n	8013376 <__ieee754_atan2f+0xbe>
 80133a0:	ee17 3a90 	vmov	r3, s15
 80133a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80133a8:	ee07 3a90 	vmov	s15, r3
 80133ac:	e797      	b.n	80132de <__ieee754_atan2f+0x26>
 80133ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80133e8 <__ieee754_atan2f+0x130>
 80133b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133b6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80133ec <__ieee754_atan2f+0x134>
 80133ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133be:	e78e      	b.n	80132de <__ieee754_atan2f+0x26>
 80133c0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80133ec <__ieee754_atan2f+0x134>
 80133c4:	e78b      	b.n	80132de <__ieee754_atan2f+0x26>
 80133c6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80133f4 <__ieee754_atan2f+0x13c>
 80133ca:	e788      	b.n	80132de <__ieee754_atan2f+0x26>
 80133cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80133f0 <__ieee754_atan2f+0x138>
 80133d0:	e785      	b.n	80132de <__ieee754_atan2f+0x26>
 80133d2:	bf00      	nop
 80133d4:	c0490fdb 	.word	0xc0490fdb
 80133d8:	3fc90fdb 	.word	0x3fc90fdb
 80133dc:	bfc90fdb 	.word	0xbfc90fdb
 80133e0:	08014180 	.word	0x08014180
 80133e4:	0801418c 	.word	0x0801418c
 80133e8:	33bbbd2e 	.word	0x33bbbd2e
 80133ec:	40490fdb 	.word	0x40490fdb
 80133f0:	00000000 	.word	0x00000000
 80133f4:	3f490fdb 	.word	0x3f490fdb

080133f8 <atanf>:
 80133f8:	b538      	push	{r3, r4, r5, lr}
 80133fa:	ee10 5a10 	vmov	r5, s0
 80133fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013402:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013406:	eef0 7a40 	vmov.f32	s15, s0
 801340a:	db10      	blt.n	801342e <atanf+0x36>
 801340c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013410:	dd04      	ble.n	801341c <atanf+0x24>
 8013412:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013416:	eeb0 0a67 	vmov.f32	s0, s15
 801341a:	bd38      	pop	{r3, r4, r5, pc}
 801341c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013554 <atanf+0x15c>
 8013420:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013558 <atanf+0x160>
 8013424:	2d00      	cmp	r5, #0
 8013426:	bfd8      	it	le
 8013428:	eef0 7a47 	vmovle.f32	s15, s14
 801342c:	e7f3      	b.n	8013416 <atanf+0x1e>
 801342e:	4b4b      	ldr	r3, [pc, #300]	; (801355c <atanf+0x164>)
 8013430:	429c      	cmp	r4, r3
 8013432:	dc10      	bgt.n	8013456 <atanf+0x5e>
 8013434:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013438:	da0a      	bge.n	8013450 <atanf+0x58>
 801343a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013560 <atanf+0x168>
 801343e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013446:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344e:	dce2      	bgt.n	8013416 <atanf+0x1e>
 8013450:	f04f 33ff 	mov.w	r3, #4294967295
 8013454:	e013      	b.n	801347e <atanf+0x86>
 8013456:	f000 f8a3 	bl	80135a0 <fabsf>
 801345a:	4b42      	ldr	r3, [pc, #264]	; (8013564 <atanf+0x16c>)
 801345c:	429c      	cmp	r4, r3
 801345e:	dc4f      	bgt.n	8013500 <atanf+0x108>
 8013460:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013464:	429c      	cmp	r4, r3
 8013466:	dc41      	bgt.n	80134ec <atanf+0xf4>
 8013468:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801346c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013470:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013474:	2300      	movs	r3, #0
 8013476:	ee30 0a27 	vadd.f32	s0, s0, s15
 801347a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801347e:	1c5a      	adds	r2, r3, #1
 8013480:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013484:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013568 <atanf+0x170>
 8013488:	eddf 5a38 	vldr	s11, [pc, #224]	; 801356c <atanf+0x174>
 801348c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013570 <atanf+0x178>
 8013490:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013494:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013498:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013574 <atanf+0x17c>
 801349c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80134a0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013578 <atanf+0x180>
 80134a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80134a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801357c <atanf+0x184>
 80134ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80134b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013580 <atanf+0x188>
 80134b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80134b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013584 <atanf+0x18c>
 80134bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80134c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013588 <atanf+0x190>
 80134c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80134c8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801358c <atanf+0x194>
 80134cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80134d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013590 <atanf+0x198>
 80134d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80134d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80134dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80134e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80134e4:	d121      	bne.n	801352a <atanf+0x132>
 80134e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80134ea:	e794      	b.n	8013416 <atanf+0x1e>
 80134ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80134f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80134f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80134f8:	2301      	movs	r3, #1
 80134fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80134fe:	e7be      	b.n	801347e <atanf+0x86>
 8013500:	4b24      	ldr	r3, [pc, #144]	; (8013594 <atanf+0x19c>)
 8013502:	429c      	cmp	r4, r3
 8013504:	dc0b      	bgt.n	801351e <atanf+0x126>
 8013506:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801350a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801350e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013512:	2302      	movs	r3, #2
 8013514:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801351c:	e7af      	b.n	801347e <atanf+0x86>
 801351e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013522:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013526:	2303      	movs	r3, #3
 8013528:	e7a9      	b.n	801347e <atanf+0x86>
 801352a:	4a1b      	ldr	r2, [pc, #108]	; (8013598 <atanf+0x1a0>)
 801352c:	491b      	ldr	r1, [pc, #108]	; (801359c <atanf+0x1a4>)
 801352e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013536:	edd3 6a00 	vldr	s13, [r3]
 801353a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801353e:	2d00      	cmp	r5, #0
 8013540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013544:	edd2 7a00 	vldr	s15, [r2]
 8013548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801354c:	bfb8      	it	lt
 801354e:	eef1 7a67 	vneglt.f32	s15, s15
 8013552:	e760      	b.n	8013416 <atanf+0x1e>
 8013554:	3fc90fdb 	.word	0x3fc90fdb
 8013558:	bfc90fdb 	.word	0xbfc90fdb
 801355c:	3edfffff 	.word	0x3edfffff
 8013560:	7149f2ca 	.word	0x7149f2ca
 8013564:	3f97ffff 	.word	0x3f97ffff
 8013568:	3c8569d7 	.word	0x3c8569d7
 801356c:	3d4bda59 	.word	0x3d4bda59
 8013570:	bd6ef16b 	.word	0xbd6ef16b
 8013574:	3d886b35 	.word	0x3d886b35
 8013578:	3dba2e6e 	.word	0x3dba2e6e
 801357c:	3e124925 	.word	0x3e124925
 8013580:	3eaaaaab 	.word	0x3eaaaaab
 8013584:	bd15a221 	.word	0xbd15a221
 8013588:	bd9d8795 	.word	0xbd9d8795
 801358c:	bde38e38 	.word	0xbde38e38
 8013590:	be4ccccd 	.word	0xbe4ccccd
 8013594:	401bffff 	.word	0x401bffff
 8013598:	08014198 	.word	0x08014198
 801359c:	080141a8 	.word	0x080141a8

080135a0 <fabsf>:
 80135a0:	ee10 3a10 	vmov	r3, s0
 80135a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135a8:	ee00 3a10 	vmov	s0, r3
 80135ac:	4770      	bx	lr
	...

080135b0 <scalbn>:
 80135b0:	b570      	push	{r4, r5, r6, lr}
 80135b2:	ec55 4b10 	vmov	r4, r5, d0
 80135b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80135ba:	4606      	mov	r6, r0
 80135bc:	462b      	mov	r3, r5
 80135be:	b999      	cbnz	r1, 80135e8 <scalbn+0x38>
 80135c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135c4:	4323      	orrs	r3, r4
 80135c6:	d03f      	beq.n	8013648 <scalbn+0x98>
 80135c8:	4b35      	ldr	r3, [pc, #212]	; (80136a0 <scalbn+0xf0>)
 80135ca:	4629      	mov	r1, r5
 80135cc:	ee10 0a10 	vmov	r0, s0
 80135d0:	2200      	movs	r2, #0
 80135d2:	f7ed f839 	bl	8000648 <__aeabi_dmul>
 80135d6:	4b33      	ldr	r3, [pc, #204]	; (80136a4 <scalbn+0xf4>)
 80135d8:	429e      	cmp	r6, r3
 80135da:	4604      	mov	r4, r0
 80135dc:	460d      	mov	r5, r1
 80135de:	da10      	bge.n	8013602 <scalbn+0x52>
 80135e0:	a327      	add	r3, pc, #156	; (adr r3, 8013680 <scalbn+0xd0>)
 80135e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e6:	e01f      	b.n	8013628 <scalbn+0x78>
 80135e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80135ec:	4291      	cmp	r1, r2
 80135ee:	d10c      	bne.n	801360a <scalbn+0x5a>
 80135f0:	ee10 2a10 	vmov	r2, s0
 80135f4:	4620      	mov	r0, r4
 80135f6:	4629      	mov	r1, r5
 80135f8:	f7ec fe70 	bl	80002dc <__adddf3>
 80135fc:	4604      	mov	r4, r0
 80135fe:	460d      	mov	r5, r1
 8013600:	e022      	b.n	8013648 <scalbn+0x98>
 8013602:	460b      	mov	r3, r1
 8013604:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013608:	3936      	subs	r1, #54	; 0x36
 801360a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801360e:	4296      	cmp	r6, r2
 8013610:	dd0d      	ble.n	801362e <scalbn+0x7e>
 8013612:	2d00      	cmp	r5, #0
 8013614:	a11c      	add	r1, pc, #112	; (adr r1, 8013688 <scalbn+0xd8>)
 8013616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801361a:	da02      	bge.n	8013622 <scalbn+0x72>
 801361c:	a11c      	add	r1, pc, #112	; (adr r1, 8013690 <scalbn+0xe0>)
 801361e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013622:	a319      	add	r3, pc, #100	; (adr r3, 8013688 <scalbn+0xd8>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ed f80e 	bl	8000648 <__aeabi_dmul>
 801362c:	e7e6      	b.n	80135fc <scalbn+0x4c>
 801362e:	1872      	adds	r2, r6, r1
 8013630:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013634:	428a      	cmp	r2, r1
 8013636:	dcec      	bgt.n	8013612 <scalbn+0x62>
 8013638:	2a00      	cmp	r2, #0
 801363a:	dd08      	ble.n	801364e <scalbn+0x9e>
 801363c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013640:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013644:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013648:	ec45 4b10 	vmov	d0, r4, r5
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013652:	da08      	bge.n	8013666 <scalbn+0xb6>
 8013654:	2d00      	cmp	r5, #0
 8013656:	a10a      	add	r1, pc, #40	; (adr r1, 8013680 <scalbn+0xd0>)
 8013658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801365c:	dac0      	bge.n	80135e0 <scalbn+0x30>
 801365e:	a10e      	add	r1, pc, #56	; (adr r1, 8013698 <scalbn+0xe8>)
 8013660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013664:	e7bc      	b.n	80135e0 <scalbn+0x30>
 8013666:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801366a:	3236      	adds	r2, #54	; 0x36
 801366c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013670:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013674:	4620      	mov	r0, r4
 8013676:	4b0c      	ldr	r3, [pc, #48]	; (80136a8 <scalbn+0xf8>)
 8013678:	2200      	movs	r2, #0
 801367a:	e7d5      	b.n	8013628 <scalbn+0x78>
 801367c:	f3af 8000 	nop.w
 8013680:	c2f8f359 	.word	0xc2f8f359
 8013684:	01a56e1f 	.word	0x01a56e1f
 8013688:	8800759c 	.word	0x8800759c
 801368c:	7e37e43c 	.word	0x7e37e43c
 8013690:	8800759c 	.word	0x8800759c
 8013694:	fe37e43c 	.word	0xfe37e43c
 8013698:	c2f8f359 	.word	0xc2f8f359
 801369c:	81a56e1f 	.word	0x81a56e1f
 80136a0:	43500000 	.word	0x43500000
 80136a4:	ffff3cb0 	.word	0xffff3cb0
 80136a8:	3c900000 	.word	0x3c900000

080136ac <with_errno>:
 80136ac:	b570      	push	{r4, r5, r6, lr}
 80136ae:	4604      	mov	r4, r0
 80136b0:	460d      	mov	r5, r1
 80136b2:	4616      	mov	r6, r2
 80136b4:	f7fc fb16 	bl	800fce4 <__errno>
 80136b8:	4629      	mov	r1, r5
 80136ba:	6006      	str	r6, [r0, #0]
 80136bc:	4620      	mov	r0, r4
 80136be:	bd70      	pop	{r4, r5, r6, pc}

080136c0 <xflow>:
 80136c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136c2:	4614      	mov	r4, r2
 80136c4:	461d      	mov	r5, r3
 80136c6:	b108      	cbz	r0, 80136cc <xflow+0xc>
 80136c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80136cc:	e9cd 2300 	strd	r2, r3, [sp]
 80136d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136d4:	4620      	mov	r0, r4
 80136d6:	4629      	mov	r1, r5
 80136d8:	f7ec ffb6 	bl	8000648 <__aeabi_dmul>
 80136dc:	2222      	movs	r2, #34	; 0x22
 80136de:	b003      	add	sp, #12
 80136e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136e4:	f7ff bfe2 	b.w	80136ac <with_errno>

080136e8 <__math_uflow>:
 80136e8:	b508      	push	{r3, lr}
 80136ea:	2200      	movs	r2, #0
 80136ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80136f0:	f7ff ffe6 	bl	80136c0 <xflow>
 80136f4:	ec41 0b10 	vmov	d0, r0, r1
 80136f8:	bd08      	pop	{r3, pc}

080136fa <__math_oflow>:
 80136fa:	b508      	push	{r3, lr}
 80136fc:	2200      	movs	r2, #0
 80136fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013702:	f7ff ffdd 	bl	80136c0 <xflow>
 8013706:	ec41 0b10 	vmov	d0, r0, r1
 801370a:	bd08      	pop	{r3, pc}

0801370c <__ieee754_sqrt>:
 801370c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	ec55 4b10 	vmov	r4, r5, d0
 8013714:	4e67      	ldr	r6, [pc, #412]	; (80138b4 <__ieee754_sqrt+0x1a8>)
 8013716:	43ae      	bics	r6, r5
 8013718:	ee10 0a10 	vmov	r0, s0
 801371c:	ee10 2a10 	vmov	r2, s0
 8013720:	4629      	mov	r1, r5
 8013722:	462b      	mov	r3, r5
 8013724:	d10d      	bne.n	8013742 <__ieee754_sqrt+0x36>
 8013726:	f7ec ff8f 	bl	8000648 <__aeabi_dmul>
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	4620      	mov	r0, r4
 8013730:	4629      	mov	r1, r5
 8013732:	f7ec fdd3 	bl	80002dc <__adddf3>
 8013736:	4604      	mov	r4, r0
 8013738:	460d      	mov	r5, r1
 801373a:	ec45 4b10 	vmov	d0, r4, r5
 801373e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013742:	2d00      	cmp	r5, #0
 8013744:	dc0b      	bgt.n	801375e <__ieee754_sqrt+0x52>
 8013746:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801374a:	4326      	orrs	r6, r4
 801374c:	d0f5      	beq.n	801373a <__ieee754_sqrt+0x2e>
 801374e:	b135      	cbz	r5, 801375e <__ieee754_sqrt+0x52>
 8013750:	f7ec fdc2 	bl	80002d8 <__aeabi_dsub>
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	f7ed f8a0 	bl	800089c <__aeabi_ddiv>
 801375c:	e7eb      	b.n	8013736 <__ieee754_sqrt+0x2a>
 801375e:	1509      	asrs	r1, r1, #20
 8013760:	f000 808d 	beq.w	801387e <__ieee754_sqrt+0x172>
 8013764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013768:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801376c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013770:	07c9      	lsls	r1, r1, #31
 8013772:	bf5c      	itt	pl
 8013774:	005b      	lslpl	r3, r3, #1
 8013776:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801377a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801377e:	bf58      	it	pl
 8013780:	0052      	lslpl	r2, r2, #1
 8013782:	2500      	movs	r5, #0
 8013784:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013788:	1076      	asrs	r6, r6, #1
 801378a:	0052      	lsls	r2, r2, #1
 801378c:	f04f 0e16 	mov.w	lr, #22
 8013790:	46ac      	mov	ip, r5
 8013792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013796:	eb0c 0001 	add.w	r0, ip, r1
 801379a:	4298      	cmp	r0, r3
 801379c:	bfde      	ittt	le
 801379e:	1a1b      	suble	r3, r3, r0
 80137a0:	eb00 0c01 	addle.w	ip, r0, r1
 80137a4:	186d      	addle	r5, r5, r1
 80137a6:	005b      	lsls	r3, r3, #1
 80137a8:	f1be 0e01 	subs.w	lr, lr, #1
 80137ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80137b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80137b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80137b8:	d1ed      	bne.n	8013796 <__ieee754_sqrt+0x8a>
 80137ba:	4674      	mov	r4, lr
 80137bc:	2720      	movs	r7, #32
 80137be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80137c2:	4563      	cmp	r3, ip
 80137c4:	eb01 000e 	add.w	r0, r1, lr
 80137c8:	dc02      	bgt.n	80137d0 <__ieee754_sqrt+0xc4>
 80137ca:	d113      	bne.n	80137f4 <__ieee754_sqrt+0xe8>
 80137cc:	4290      	cmp	r0, r2
 80137ce:	d811      	bhi.n	80137f4 <__ieee754_sqrt+0xe8>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	eb00 0e01 	add.w	lr, r0, r1
 80137d6:	da57      	bge.n	8013888 <__ieee754_sqrt+0x17c>
 80137d8:	f1be 0f00 	cmp.w	lr, #0
 80137dc:	db54      	blt.n	8013888 <__ieee754_sqrt+0x17c>
 80137de:	f10c 0801 	add.w	r8, ip, #1
 80137e2:	eba3 030c 	sub.w	r3, r3, ip
 80137e6:	4290      	cmp	r0, r2
 80137e8:	bf88      	it	hi
 80137ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80137ee:	1a12      	subs	r2, r2, r0
 80137f0:	440c      	add	r4, r1
 80137f2:	46c4      	mov	ip, r8
 80137f4:	005b      	lsls	r3, r3, #1
 80137f6:	3f01      	subs	r7, #1
 80137f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80137fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013800:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013804:	d1dd      	bne.n	80137c2 <__ieee754_sqrt+0xb6>
 8013806:	4313      	orrs	r3, r2
 8013808:	d01b      	beq.n	8013842 <__ieee754_sqrt+0x136>
 801380a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80138b8 <__ieee754_sqrt+0x1ac>
 801380e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80138bc <__ieee754_sqrt+0x1b0>
 8013812:	e9da 0100 	ldrd	r0, r1, [sl]
 8013816:	e9db 2300 	ldrd	r2, r3, [fp]
 801381a:	f7ec fd5d 	bl	80002d8 <__aeabi_dsub>
 801381e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	4640      	mov	r0, r8
 8013828:	4649      	mov	r1, r9
 801382a:	f7ed f989 	bl	8000b40 <__aeabi_dcmple>
 801382e:	b140      	cbz	r0, 8013842 <__ieee754_sqrt+0x136>
 8013830:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013834:	e9da 0100 	ldrd	r0, r1, [sl]
 8013838:	e9db 2300 	ldrd	r2, r3, [fp]
 801383c:	d126      	bne.n	801388c <__ieee754_sqrt+0x180>
 801383e:	3501      	adds	r5, #1
 8013840:	463c      	mov	r4, r7
 8013842:	106a      	asrs	r2, r5, #1
 8013844:	0863      	lsrs	r3, r4, #1
 8013846:	07e9      	lsls	r1, r5, #31
 8013848:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801384c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013850:	bf48      	it	mi
 8013852:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013856:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801385a:	461c      	mov	r4, r3
 801385c:	e76d      	b.n	801373a <__ieee754_sqrt+0x2e>
 801385e:	0ad3      	lsrs	r3, r2, #11
 8013860:	3815      	subs	r0, #21
 8013862:	0552      	lsls	r2, r2, #21
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0fa      	beq.n	801385e <__ieee754_sqrt+0x152>
 8013868:	02dc      	lsls	r4, r3, #11
 801386a:	d50a      	bpl.n	8013882 <__ieee754_sqrt+0x176>
 801386c:	f1c1 0420 	rsb	r4, r1, #32
 8013870:	fa22 f404 	lsr.w	r4, r2, r4
 8013874:	1e4d      	subs	r5, r1, #1
 8013876:	408a      	lsls	r2, r1
 8013878:	4323      	orrs	r3, r4
 801387a:	1b41      	subs	r1, r0, r5
 801387c:	e772      	b.n	8013764 <__ieee754_sqrt+0x58>
 801387e:	4608      	mov	r0, r1
 8013880:	e7f0      	b.n	8013864 <__ieee754_sqrt+0x158>
 8013882:	005b      	lsls	r3, r3, #1
 8013884:	3101      	adds	r1, #1
 8013886:	e7ef      	b.n	8013868 <__ieee754_sqrt+0x15c>
 8013888:	46e0      	mov	r8, ip
 801388a:	e7aa      	b.n	80137e2 <__ieee754_sqrt+0xd6>
 801388c:	f7ec fd26 	bl	80002dc <__adddf3>
 8013890:	e9da 8900 	ldrd	r8, r9, [sl]
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4640      	mov	r0, r8
 801389a:	4649      	mov	r1, r9
 801389c:	f7ed f946 	bl	8000b2c <__aeabi_dcmplt>
 80138a0:	b120      	cbz	r0, 80138ac <__ieee754_sqrt+0x1a0>
 80138a2:	1ca0      	adds	r0, r4, #2
 80138a4:	bf08      	it	eq
 80138a6:	3501      	addeq	r5, #1
 80138a8:	3402      	adds	r4, #2
 80138aa:	e7ca      	b.n	8013842 <__ieee754_sqrt+0x136>
 80138ac:	3401      	adds	r4, #1
 80138ae:	f024 0401 	bic.w	r4, r4, #1
 80138b2:	e7c6      	b.n	8013842 <__ieee754_sqrt+0x136>
 80138b4:	7ff00000 	.word	0x7ff00000
 80138b8:	200001e0 	.word	0x200001e0
 80138bc:	200001e8 	.word	0x200001e8

080138c0 <_init>:
 80138c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c2:	bf00      	nop
 80138c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138c6:	bc08      	pop	{r3}
 80138c8:	469e      	mov	lr, r3
 80138ca:	4770      	bx	lr

080138cc <_fini>:
 80138cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ce:	bf00      	nop
 80138d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138d2:	bc08      	pop	{r3}
 80138d4:	469e      	mov	lr, r3
 80138d6:	4770      	bx	lr
