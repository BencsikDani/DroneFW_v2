
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  0801b9b8  0801b9b8  0002b9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c798  0801c798  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c798  0801c798  0002c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7a0  0801c7a0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7a0  0801c7a0  0002c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7a4  0801c7a4  0002c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801c7a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008eb0  200001f0  0801c998  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200090a0  0801c998  000390a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b958  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000619c  00000000  00000000  0005bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f80  00000000  00000000  00061d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000185a  00000000  00000000  00063cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009ec1  00000000  00000000  00065532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d78e  00000000  00000000  0006f3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeec2  00000000  00000000  0009cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a074  00000000  00000000  0018ba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00195ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b99c 	.word	0x0801b99c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0801b99c 	.word	0x0801b99c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"
#include <stdint.h>

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->integrator = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prev_error = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	pid->prev_measurement = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->out = 0.0f;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001132:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement, bool enable_integration)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	// Check if enough time has passed for the T sample time
	bool run = false;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 8001182:	f011 ffdf 	bl	8013144 <xTaskGetTickCount>
 8001186:	4603      	mov	r3, r0
 8001188:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <PIDController_Update+0x38>
	{
		run = true;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a3a      	ldr	r2, [r7, #32]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	e01a      	b.n	80011d6 <PIDController_Update+0x6e>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b6:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001364 <PIDController_Update+0x1fc>
 80011ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	db03      	blt.n	80011d0 <PIDController_Update+0x68>
		run = true;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ce:	e002      	b.n	80011d6 <PIDController_Update+0x6e>
	// If it is too early
	else
		run = false;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ba 	beq.w	800135a <PIDController_Update+0x1f2>
	{
		//Error signal
		float error = reference - measurement;
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional_result = pid->Kp * error;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001204:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup && enable_integration)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120e:	f083 0301 	eor.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01c      	beq.n	8001252 <PIDController_Update+0xea>
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <PIDController_Update+0xea>
		{
			pid->integrator = pid->integrator + error * pid->T;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	edd3 6a03 	vldr	s13, [r3, #12]
 800122a:	edd7 7a07 	vldr	s15, [r7, #28]
 800122e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->integrator_result = pid->Ki * pid->integrator;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->differentiator = -(measurement - pid->prev_measurement) / pid->T;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001258:	ed97 7a01 	vldr	s14, [r7, #4]
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	eef1 6a67 	vneg.f32	s13, s15
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 7a03 	vldr	s14, [r3, #12]
 800126a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->differentiator_result = pid->Kd * pid->differentiator;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	ed93 7a02 	vldr	s14, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->prev_measurement = measurement;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
		// Store previous measurement for later use
		//pid->prev_measurement = measurement;


		// Compute output
		pid->out = proportional_result + pid->integrator_result + pid->differentiator_result;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001296:	edd7 7a06 	vldr	s15, [r7, #24]
 800129a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float pre_saturation_output = pid->out;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	dd04      	ble.n	80012d4 <PIDController_Update+0x16c>
			pid->out = pid->limMax;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
 80012d2:	e00e      	b.n	80012f2 <PIDController_Update+0x18a>
		else if (pid->out < pid->limMin)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d503      	bpl.n	80012f2 <PIDController_Update+0x18a>
			pid->out = pid->limMin;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (pre_saturation_output != pid->out
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80012f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d020      	beq.n	8001348 <PIDController_Update+0x1e0>
				// ...and if the integrator is trying to make saturation worse
				&& ((pre_saturation_output > 0 && error > 0) || (pre_saturation_output < 0 && error < 0)))
 8001306:	edd7 7a05 	vldr	s15, [r7, #20]
 800130a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd06      	ble.n	8001322 <PIDController_Update+0x1ba>
 8001314:	edd7 7a07 	vldr	s15, [r7, #28]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	dc0d      	bgt.n	800133e <PIDController_Update+0x1d6>
 8001322:	edd7 7a05 	vldr	s15, [r7, #20]
 8001326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d50b      	bpl.n	8001348 <PIDController_Update+0x1e0>
 8001330:	edd7 7a07 	vldr	s15, [r7, #28]
 8001334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d504      	bpl.n	8001348 <PIDController_Update+0x1e0>
			pid->antiWindup = true;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001346:	e003      	b.n	8001350 <PIDController_Update+0x1e8>
		else
			pid->antiWindup = false;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	e7ff      	b.n	800135a <PIDController_Update+0x1f2>
	}
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	447a0000 	.word	0x447a0000

08001368 <DoublePIDController_Init>:

void DoublePIDController_Init(DoublePIDController *pid)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->outer.antiWindup = false;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pid->inner.antiWindup = false;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->outer.integrator = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	66da      	str	r2, [r3, #108]	; 0x6c
	pid->inner.integrator = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
	pid->outer.differentiator  = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	679a      	str	r2, [r3, #120]	; 0x78
	pid->inner.differentiator  = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	; 0x34

	pid->outer.prev_measurement = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->inner.prev_measurement = 0.0f;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->outer.out = 0.0f;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pid->inner.out = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
	// Calculate low-pass filter parameters
	//pid->tau = 5 * pid->T;
	//pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );

	// Reset lastTick
	pid->outer.lastTick = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
	pid->inner.lastTick = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DoublePIDController_Update>:

float DoublePIDController_Update(DoublePIDController *pid, float outer_reference, float outer_measurement, float inner_measurement, bool enable_integration)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6178      	str	r0, [r7, #20]
 80013e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80013e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80013ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80013f0:	460b      	mov	r3, r1
 80013f2:	71fb      	strb	r3, [r7, #7]
	// Check if enough time has passed for the T sample time
	// I use the outer PID's properties for that
	bool run = false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t currentTick = xTaskGetTickCount();
 80013fa:	f011 fea3 	bl	8013144 <xTaskGetTickCount>
 80013fe:	4603      	mov	r3, r0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
	// First run after initialization
	if (pid->outer.lastTick == 0)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <DoublePIDController_Update+0x3c>
	{
		run = true;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		pid->outer.lastTick = currentTick;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
 8001416:	e01a      	b.n	800144e <DoublePIDController_Update+0x72>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->outer.lastTick >= (pid->outer.T * 1000))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800142e:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001734 <DoublePIDController_Update+0x358>
 8001432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	db03      	blt.n	8001448 <DoublePIDController_Update+0x6c>
		run = true;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001446:	e002      	b.n	800144e <DoublePIDController_Update+0x72>
	// If it is too early
	else
		run = false;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pid->outer.lastTick = currentTick;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001452:	655a      	str	r2, [r3, #84]	; 0x54

	// PID algorithm
	if (run)
 8001454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8166 	beq.w	800172a <DoublePIDController_Update+0x34e>
	{
		// Outer PID Controller
		//Error signal
		float outer_error = outer_reference - outer_measurement;
 800145e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001462:	edd7 7a03 	vldr	s15, [r7, #12]
 8001466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Proportional
		float outer_proportional_result = pid->outer.Kp * outer_error;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001474:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Integral with Anti-windup
		if (!pid->outer.antiWindup && enable_integration)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01c      	beq.n	80014ca <DoublePIDController_Update+0xee>
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <DoublePIDController_Update+0xee>
		{
			pid->outer.integrator = pid->outer.integrator + outer_error * pid->outer.T;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80014a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			pid->outer.integrator_result = pid->outer.Ki * pid->outer.integrator;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		}

		// Derivative
		pid->outer.differentiator = -inner_measurement;
 80014ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ce:	eef1 7a67 	vneg.f32	s15, s15
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		// Derivative with low-pass filter
		//pid->outer.differentiator = 0.4f * pid->outer.differentiator + 0.6f * (-inner_measurement);
		//pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;

		// Compute output
		pid->outer.out = outer_proportional_result + pid->outer.integrator_result + pid->outer.differentiator_result;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80014f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		float outer_pre_saturation_output = pid->outer.out;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001512:	627b      	str	r3, [r7, #36]	; 0x24

		// Saturating (clamping) the output
		if (pid->outer.out > pid->outer.limMax)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	dd05      	ble.n	8001536 <DoublePIDController_Update+0x15a>
			pid->outer.out = pid->outer.limMax;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001534:	e00f      	b.n	8001556 <DoublePIDController_Update+0x17a>
		else if (pid->outer.out < pid->outer.limMin)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d504      	bpl.n	8001556 <DoublePIDController_Update+0x17a>
			pid->outer.out = pid->outer.limMin;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Anti-windup check
		// If clamping had an effect...
		if (outer_pre_saturation_output != pid->outer.out
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800155c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001560:	eeb4 7a67 	vcmp.f32	s14, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d020      	beq.n	80015ac <DoublePIDController_Update+0x1d0>
				// ...and if the integrator is trying to make saturation worse
				&& ((outer_pre_saturation_output > 0 && outer_error > 0) || (outer_pre_saturation_output < 0 && outer_error < 0)))
 800156a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800156e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd06      	ble.n	8001586 <DoublePIDController_Update+0x1aa>
 8001578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dc0d      	bgt.n	80015a2 <DoublePIDController_Update+0x1c6>
 8001586:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800158a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d50b      	bpl.n	80015ac <DoublePIDController_Update+0x1d0>
 8001594:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d504      	bpl.n	80015ac <DoublePIDController_Update+0x1d0>
			pid->outer.antiWindup = true;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80015aa:	e003      	b.n	80015b4 <DoublePIDController_Update+0x1d8>
		else
			pid->outer.antiWindup = false;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



		// Inner PID Controller
		//Error signal
		float inner_error = pid->outer.out - inner_measurement;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80015ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a08 	vstr	s15, [r7, #32]

		// Proportional
		float inner_proportional_result = pid->inner.Kp * inner_error;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a07 	vstr	s15, [r7, #28]

		// Integral with Anti-windup
		if (!pid->inner.antiWindup && enable_integration)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01c      	beq.n	8001622 <DoublePIDController_Update+0x246>
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d019      	beq.n	8001622 <DoublePIDController_Update+0x246>
		{
			pid->inner.integrator = pid->inner.integrator + inner_error * pid->inner.T;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80015fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->inner.integrator_result = pid->inner.Ki * pid->inner.integrator;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->inner.differentiator =-(inner_measurement - pid->inner.prev_measurement) / pid->inner.T;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001628:	ed97 7a02 	vldr	s14, [r7, #8]
 800162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001630:	eef1 6a67 	vneg.f32	s13, s15
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	ed93 7a03 	vldr	s14, [r3, #12]
 800163a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	ed93 7a02 	vldr	s14, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->inner.prev_measurement = inner_measurement;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
		//pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
		// Store previous measurement for later use
		//pid->inner.prev_measurement = inner_measurement;

		// Compute output
		pid->inner.out = inner_proportional_result + pid->inner.integrator_result + pid->inner.differentiator_result;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001666:	edd7 7a07 	vldr	s15, [r7, #28]
 800166a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float inner_pre_saturation_output = pid->inner.out;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	61bb      	str	r3, [r7, #24]

		// Saturating (clamping) the output
		if (pid->inner.out > pid->inner.limMax)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd04      	ble.n	80016a4 <DoublePIDController_Update+0x2c8>
			pid->inner.out = pid->inner.limMax;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
 80016a2:	e00e      	b.n	80016c2 <DoublePIDController_Update+0x2e6>
		else if (pid->inner.out < pid->inner.limMin)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80016b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d503      	bpl.n	80016c2 <DoublePIDController_Update+0x2e6>
			pid->inner.out = pid->inner.limMin;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (inner_pre_saturation_output != pid->inner.out
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80016cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	d020      	beq.n	8001718 <DoublePIDController_Update+0x33c>
				// ...and if the integrator is trying to make saturation worse
				&& ((inner_pre_saturation_output > 0 && inner_error > 0) || (inner_pre_saturation_output < 0 && inner_error < 0)))
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dd06      	ble.n	80016f2 <DoublePIDController_Update+0x316>
 80016e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80016e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	dc0d      	bgt.n	800170e <DoublePIDController_Update+0x332>
 80016f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d50b      	bpl.n	8001718 <DoublePIDController_Update+0x33c>
 8001700:	edd7 7a08 	vldr	s15, [r7, #32]
 8001704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d504      	bpl.n	8001718 <DoublePIDController_Update+0x33c>
			pid->inner.antiWindup = true;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001716:	e003      	b.n	8001720 <DoublePIDController_Update+0x344>
		else
			pid->inner.antiWindup = false;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	e7ff      	b.n	800172a <DoublePIDController_Update+0x34e>
	}
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	447a0000 	.word	0x447a0000

08001738 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	8812      	ldrh	r2, [r2, #0]
 8001798:	b292      	uxth	r2, r2
 800179a:	801a      	strh	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	b292      	uxth	r2, r2
 80017c0:	801a      	strh	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LPF_Init>:
#include "LPF.h"

void LPF_Init(LPF *lpf)
{
 80017ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	lpf->prevU = 0.0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	lpf->prevY = 0.0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]

	lpf->tau = 1.0 / lpf->f_cutoff;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80017ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edc3 7a04 	vstr	s15, [r3, #16]

	lpf->alpha = lpf->T / (2.0 * lpf->tau + lpf->T);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fec9 	bl	8000598 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fec2 	bl	8000598 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	f7fe fd60 	bl	80002dc <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4690      	mov	r8, r2
 8001822:	4699      	mov	r9, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe feb5 	bl	8000598 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fd51 	bl	80002dc <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f82b 	bl	800089c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9f3 	bl	8000c38 <__aeabi_d2f>
 8001852:	4602      	mov	r2, r0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	615a      	str	r2, [r3, #20]
	lpf->beta = (2.0 * lpf->tau - lpf->T) / (2.0 * lpf->tau + lpf->T);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe9b 	bl	8000598 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	f7fe fd39 	bl	80002dc <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd28 	bl	80002d8 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe7f 	bl	8000598 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe72 	bl	8000598 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4640      	mov	r0, r8
 80018ba:	4649      	mov	r1, r9
 80018bc:	f7fe fd0e 	bl	80002dc <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe ffe8 	bl	800089c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f9b0 	bl	8000c38 <__aeabi_d2f>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018e8 <LPF_Calculate>:

float LPF_Calculate(LPF *lpf, float U)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	ed87 0a00 	vstr	s0, [r7]
	float Y = lpf->alpha * (U + lpf->prevU) + lpf->beta * lpf->prevY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edd3 6a00 	vldr	s13, [r3]
 8001900:	edd7 7a00 	vldr	s15, [r7]
 8001904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a01 	vldr	s15, [r3, #4]
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	edc7 7a03 	vstr	s15, [r7, #12]

	lpf->prevU = U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
	lpf->prevY = Y;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]

	return Y;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	ee07 3a90 	vmov	s15, r3
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800194c:	23c8      	movs	r3, #200	; 0xc8
 800194e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	613b      	str	r3, [r7, #16]

	// Roll
	// Outer
	DPID_Roll.outer.Kp = 5;
 800195c:	4bb0      	ldr	r3, [pc, #704]	; (8001c20 <TaskController+0x2dc>)
 800195e:	4ab1      	ldr	r2, [pc, #708]	; (8001c24 <TaskController+0x2e0>)
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Roll.outer.Ki = 0;
 8001962:	4baf      	ldr	r3, [pc, #700]	; (8001c20 <TaskController+0x2dc>)
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Roll.outer.Kd = 0.25;
 800196a:	4bad      	ldr	r3, [pc, #692]	; (8001c20 <TaskController+0x2dc>)
 800196c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Roll.outer.T = 1.0f / xFrequency;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	4ba6      	ldr	r3, [pc, #664]	; (8001c20 <TaskController+0x2dc>)
 8001986:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Roll.outer.limMin = -50;
 800198a:	4ba5      	ldr	r3, [pc, #660]	; (8001c20 <TaskController+0x2dc>)
 800198c:	4aa6      	ldr	r2, [pc, #664]	; (8001c28 <TaskController+0x2e4>)
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Roll.outer.limMax = 50;
 8001990:	4ba3      	ldr	r3, [pc, #652]	; (8001c20 <TaskController+0x2dc>)
 8001992:	4aa6      	ldr	r2, [pc, #664]	; (8001c2c <TaskController+0x2e8>)
 8001994:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Roll.inner.Kp = 1.4;
 8001996:	4ba2      	ldr	r3, [pc, #648]	; (8001c20 <TaskController+0x2dc>)
 8001998:	4aa5      	ldr	r2, [pc, #660]	; (8001c30 <TaskController+0x2ec>)
 800199a:	601a      	str	r2, [r3, #0]
	DPID_Roll.inner.Ki = 0;
 800199c:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <TaskController+0x2dc>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
	DPID_Roll.inner.Kd = 0.11;
 80019a4:	4b9e      	ldr	r3, [pc, #632]	; (8001c20 <TaskController+0x2dc>)
 80019a6:	4aa3      	ldr	r2, [pc, #652]	; (8001c34 <TaskController+0x2f0>)
 80019a8:	609a      	str	r2, [r3, #8]
	DPID_Roll.inner.T = 1.0f / xFrequency;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019bc:	4b98      	ldr	r3, [pc, #608]	; (8001c20 <TaskController+0x2dc>)
 80019be:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Roll.inner.limMin = -500;
 80019c2:	4b97      	ldr	r3, [pc, #604]	; (8001c20 <TaskController+0x2dc>)
 80019c4:	4a9c      	ldr	r2, [pc, #624]	; (8001c38 <TaskController+0x2f4>)
 80019c6:	61da      	str	r2, [r3, #28]
	DPID_Roll.inner.limMax = 500;
 80019c8:	4b95      	ldr	r3, [pc, #596]	; (8001c20 <TaskController+0x2dc>)
 80019ca:	4a9c      	ldr	r2, [pc, #624]	; (8001c3c <TaskController+0x2f8>)
 80019cc:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Roll);
 80019ce:	4894      	ldr	r0, [pc, #592]	; (8001c20 <TaskController+0x2dc>)
 80019d0:	f7ff fcca 	bl	8001368 <DoublePIDController_Init>

	// Pitch
	// Outer
	DPID_Pitch.outer.Kp = 5;
 80019d4:	4b9a      	ldr	r3, [pc, #616]	; (8001c40 <TaskController+0x2fc>)
 80019d6:	4a93      	ldr	r2, [pc, #588]	; (8001c24 <TaskController+0x2e0>)
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Pitch.outer.Ki = 0;
 80019da:	4b99      	ldr	r3, [pc, #612]	; (8001c40 <TaskController+0x2fc>)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Pitch.outer.Kd = 0.25;
 80019e2:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <TaskController+0x2fc>)
 80019e4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Pitch.outer.T = 1.0f / xFrequency;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fc:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <TaskController+0x2fc>)
 80019fe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Pitch.outer.limMin = -50;
 8001a02:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <TaskController+0x2fc>)
 8001a04:	4a88      	ldr	r2, [pc, #544]	; (8001c28 <TaskController+0x2e4>)
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Pitch.outer.limMax = 50;
 8001a08:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <TaskController+0x2fc>)
 8001a0a:	4a88      	ldr	r2, [pc, #544]	; (8001c2c <TaskController+0x2e8>)
 8001a0c:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Pitch.inner.Kp = 1.4;
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <TaskController+0x2fc>)
 8001a10:	4a87      	ldr	r2, [pc, #540]	; (8001c30 <TaskController+0x2ec>)
 8001a12:	601a      	str	r2, [r3, #0]
	DPID_Pitch.inner.Ki = 0;
 8001a14:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <TaskController+0x2fc>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
	DPID_Pitch.inner.Kd = 0.11;
 8001a1c:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <TaskController+0x2fc>)
 8001a1e:	4a85      	ldr	r2, [pc, #532]	; (8001c34 <TaskController+0x2f0>)
 8001a20:	609a      	str	r2, [r3, #8]
	DPID_Pitch.inner.T = 1.0f / xFrequency;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a34:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <TaskController+0x2fc>)
 8001a36:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Pitch.inner.limMin = -500;
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <TaskController+0x2fc>)
 8001a3c:	4a7e      	ldr	r2, [pc, #504]	; (8001c38 <TaskController+0x2f4>)
 8001a3e:	61da      	str	r2, [r3, #28]
	DPID_Pitch.inner.limMax = 500;
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <TaskController+0x2fc>)
 8001a42:	4a7e      	ldr	r2, [pc, #504]	; (8001c3c <TaskController+0x2f8>)
 8001a44:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Pitch);
 8001a46:	487e      	ldr	r0, [pc, #504]	; (8001c40 <TaskController+0x2fc>)
 8001a48:	f7ff fc8e 	bl	8001368 <DoublePIDController_Init>

	// Yaw
	PID_Yaw.Kp = 0;
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <TaskController+0x300>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	PID_Yaw.Ki = 0;
 8001a54:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <TaskController+0x300>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
	PID_Yaw.Kd = 0;
 8001a5c:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <TaskController+0x300>)
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
	PID_Yaw.T = 1.0f / xFrequency;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <TaskController+0x300>)
 8001a78:	edc3 7a03 	vstr	s15, [r3, #12]
	PID_Yaw.limMin = -500;
 8001a7c:	4b71      	ldr	r3, [pc, #452]	; (8001c44 <TaskController+0x300>)
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <TaskController+0x2f4>)
 8001a80:	61da      	str	r2, [r3, #28]
	PID_Yaw.limMax = 500;
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <TaskController+0x300>)
 8001a84:	4a6d      	ldr	r2, [pc, #436]	; (8001c3c <TaskController+0x2f8>)
 8001a86:	621a      	str	r2, [r3, #32]
	// Init
	PIDController_Init(&PID_Yaw);
 8001a88:	486e      	ldr	r0, [pc, #440]	; (8001c44 <TaskController+0x300>)
 8001a8a:	f7ff fb29 	bl	80010e0 <PIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 8001a8e:	f011 fb59 	bl	8013144 <xTaskGetTickCount>
 8001a92:	4603      	mov	r3, r0
 8001a94:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f011 f97d 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001aa2:	f011 fb4f 	bl	8013144 <xTaskGetTickCount>
 8001aa6:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8001aa8:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <TaskController+0x304>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00f ffaf 	bl	8011a14 <osMutexWait>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 816a 	bne.w	8001d92 <TaskController+0x44e>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <TaskController+0x308>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00f ffa4 	bl	8011a14 <osMutexWait>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 815f 	bne.w	8001d92 <TaskController+0x44e>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <TaskController+0x30c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00f ff99 	bl	8011a14 <osMutexWait>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 8154 	bne.w	8001d92 <TaskController+0x44e>
		{
			if (SWC > 490)
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <TaskController+0x310>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001af2:	d927      	bls.n	8001b44 <TaskController+0x200>
			{
				DPID_Roll.outer.integrator = 0.0f;
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <TaskController+0x2dc>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Roll.outer.integrator_result = 0.0f;
 8001afc:	4b48      	ldr	r3, [pc, #288]	; (8001c20 <TaskController+0x2dc>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	671a      	str	r2, [r3, #112]	; 0x70
				DPID_Roll.inner.integrator = 0.0f;
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <TaskController+0x2dc>)
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Roll.inner.integrator_result = 0.0f;
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <TaskController+0x2dc>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
				DPID_Pitch.outer.integrator = 0.0f;
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <TaskController+0x2fc>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Pitch.outer.integrator_result = 0.0f;
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <TaskController+0x2fc>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	671a      	str	r2, [r3, #112]	; 0x70
				DPID_Pitch.inner.integrator = 0.0f;
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <TaskController+0x2fc>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Pitch.inner.integrator_result = 0.0f;
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <TaskController+0x2fc>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
				PID_Yaw.integrator = 0.0f;
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <TaskController+0x300>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Yaw.integrator_result = 0.0f;
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <TaskController+0x300>)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
			DPID_Roll.inner.Kd = VRB / 2000.0f;

			DPID_Pitch.outer.Kd = VRA / 2000.0f;
			DPID_Pitch.inner.Kd = VRB / 2000.0f;
			*/
			if (Tune_single_true_double_false)
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <TaskController+0x314>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a3 	beq.w	8001c94 <TaskController+0x350>
			{
				// Roll
				PIDController_Update(&DPID_Roll.inner, (Roll_in / 10.0f), GyroData[0], (Throttle_in > 10));
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <TaskController+0x318>)
 8001b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <TaskController+0x31c>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <TaskController+0x320>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	bf8c      	ite	hi
 8001b72:	2301      	movhi	r3, #1
 8001b74:	2300      	movls	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	eef0 0a67 	vmov.f32	s1, s15
 8001b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b82:	4827      	ldr	r0, [pc, #156]	; (8001c20 <TaskController+0x2dc>)
 8001b84:	f7ff faf0 	bl	8001168 <PIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <TaskController+0x2dc>)
 8001b8a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b92:	ee17 3a90 	vmov	r3, s15
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <TaskController+0x324>)
 8001b9a:	801a      	strh	r2, [r3, #0]

				// Pitch
				PIDController_Update(&DPID_Pitch.inner, (Pitch_in / 10.0f), GyroData[1], (Throttle_in > 10));
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <TaskController+0x328>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <TaskController+0x31c>)
 8001bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <TaskController+0x320>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b0a      	cmp	r3, #10
 8001bbe:	bf8c      	ite	hi
 8001bc0:	2301      	movhi	r3, #1
 8001bc2:	2300      	movls	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	eef0 0a67 	vmov.f32	s1, s15
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	481b      	ldr	r0, [pc, #108]	; (8001c40 <TaskController+0x2fc>)
 8001bd2:	f7ff fac9 	bl	8001168 <PIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <TaskController+0x2fc>)
 8001bd8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 3a90 	vmov	r3, s15
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <TaskController+0x32c>)
 8001be8:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2], (Throttle_in > 10));
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <TaskController+0x330>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bfc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <TaskController+0x31c>)
 8001c02:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <TaskController+0x320>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	bf8c      	ite	hi
 8001c0e:	2301      	movhi	r3, #1
 8001c10:	2300      	movls	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	eef0 0a67 	vmov.f32	s1, s15
 8001c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1e:	e02b      	b.n	8001c78 <TaskController+0x334>
 8001c20:	20000218 	.word	0x20000218
 8001c24:	40a00000 	.word	0x40a00000
 8001c28:	c2480000 	.word	0xc2480000
 8001c2c:	42480000 	.word	0x42480000
 8001c30:	3fb33333 	.word	0x3fb33333
 8001c34:	3de147ae 	.word	0x3de147ae
 8001c38:	c3fa0000 	.word	0xc3fa0000
 8001c3c:	43fa0000 	.word	0x43fa0000
 8001c40:	200002a0 	.word	0x200002a0
 8001c44:	20000328 	.word	0x20000328
 8001c48:	20000da4 	.word	0x20000da4
 8001c4c:	20000d90 	.word	0x20000d90
 8001c50:	20000d94 	.word	0x20000d94
 8001c54:	2000037e 	.word	0x2000037e
 8001c58:	2000020d 	.word	0x2000020d
 8001c5c:	2000036e 	.word	0x2000036e
 8001c60:	2000040c 	.word	0x2000040c
 8001c64:	2000036c 	.word	0x2000036c
 8001c68:	20000370 	.word	0x20000370
 8001c6c:	20000372 	.word	0x20000372
 8001c70:	20000374 	.word	0x20000374
 8001c74:	20000376 	.word	0x20000376
 8001c78:	484e      	ldr	r0, [pc, #312]	; (8001db4 <TaskController+0x470>)
 8001c7a:	f7ff fa75 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <TaskController+0x470>)
 8001c80:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <TaskController+0x474>)
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	e07e      	b.n	8001d92 <TaskController+0x44e>
			}
			else
			{
				// Roll
				DoublePIDController_Update(&DPID_Roll, (Roll_in / 25.0f), Fusion_output.angle.roll, GyroData[0], (Throttle_in > 10));
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <TaskController+0x478>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001ca6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001caa:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <TaskController+0x47c>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <TaskController+0x480>)
 8001cb2:	edd3 6a00 	vldr	s13, [r3]
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <TaskController+0x484>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	bf8c      	ite	hi
 8001cbe:	2301      	movhi	r3, #1
 8001cc0:	2300      	movls	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd2:	483e      	ldr	r0, [pc, #248]	; (8001dcc <TaskController+0x488>)
 8001cd4:	f7ff fb82 	bl	80013dc <DoublePIDController_Update>
				//DoublePIDController_Update(&DPID_Roll, (SWD / 70.0f), Fusion_output.angle.roll, GyroData[0], (Throttle_in > 10));
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <TaskController+0x488>)
 8001cda:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <TaskController+0x48c>)
 8001cea:	801a      	strh	r2, [r3, #0]

				// Pitch
				DoublePIDController_Update(&DPID_Pitch, (Pitch_in / 25.0f), Fusion_output.angle.pitch, GyroData[1], (Throttle_in > 10));
 8001cec:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <TaskController+0x490>)
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001cfe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <TaskController+0x47c>)
 8001d04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <TaskController+0x480>)
 8001d0a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <TaskController+0x484>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b0a      	cmp	r3, #10
 8001d14:	bf8c      	ite	hi
 8001d16:	2301      	movhi	r3, #1
 8001d18:	2300      	movls	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	eeb0 1a66 	vmov.f32	s2, s13
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2a:	482b      	ldr	r0, [pc, #172]	; (8001dd8 <TaskController+0x494>)
 8001d2c:	f7ff fb56 	bl	80013dc <DoublePIDController_Update>
				//DoublePIDController_Update(&DPID_Pitch, (SWD / 70.0f), Fusion_output.angle.pitch, GyroData[1], (Throttle_in > 10));
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <TaskController+0x494>)
 8001d32:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3a:	ee17 3a90 	vmov	r3, s15
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <TaskController+0x498>)
 8001d42:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2], (Throttle_in > 10));
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <TaskController+0x49c>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <TaskController+0x480>)
 8001d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <TaskController+0x484>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	2b0a      	cmp	r3, #10
 8001d66:	bf8c      	ite	hi
 8001d68:	2301      	movhi	r3, #1
 8001d6a:	2300      	movls	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	eef0 0a67 	vmov.f32	s1, s15
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	480e      	ldr	r0, [pc, #56]	; (8001db4 <TaskController+0x470>)
 8001d7a:	f7ff f9f5 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <TaskController+0x470>)
 8001d80:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	ee17 3a90 	vmov	r3, s15
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <TaskController+0x474>)
 8001d90:	801a      	strh	r2, [r3, #0]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <TaskController+0x4a0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00f fe8a 	bl	8011ab0 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <TaskController+0x4a4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00f fe85 	bl	8011ab0 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <TaskController+0x4a8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00f fe80 	bl	8011ab0 <osMutexRelease>
	{
 8001db0:	e671      	b.n	8001a96 <TaskController+0x152>
 8001db2:	bf00      	nop
 8001db4:	20000328 	.word	0x20000328
 8001db8:	20000378 	.word	0x20000378
 8001dbc:	2000036e 	.word	0x2000036e
 8001dc0:	20000424 	.word	0x20000424
 8001dc4:	2000040c 	.word	0x2000040c
 8001dc8:	2000036c 	.word	0x2000036c
 8001dcc:	20000218 	.word	0x20000218
 8001dd0:	20000370 	.word	0x20000370
 8001dd4:	20000372 	.word	0x20000372
 8001dd8:	200002a0 	.word	0x200002a0
 8001ddc:	20000374 	.word	0x20000374
 8001de0:	20000376 	.word	0x20000376
 8001de4:	20000da4 	.word	0x20000da4
 8001de8:	20000d90 	.word	0x20000d90
 8001dec:	20000d94 	.word	0x20000d94

08001df0 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001df8:	af14      	add	r7, sp, #80	; 0x50
 8001dfa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001dfe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001e02:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 8001e04:	2305      	movs	r3, #5
 8001e06:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001e1a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e1e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e22:	2269      	movs	r2, #105	; 0x69
 8001e24:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001e26:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e2a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001e2e:	2266      	movs	r2, #102	; 0x66
 8001e30:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 8001e32:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e36:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001e3a:	2267      	movs	r2, #103	; 0x67
 8001e3c:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001e3e:	f011 f981 	bl	8013144 <xTaskGetTickCount>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001e48:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001e4c:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001e50:	4618      	mov	r0, r3
 8001e52:	f010 ffa3 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001e56:	f011 f975 	bl	8013144 <xTaskGetTickCount>
 8001e5a:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001e5e:	4bc3      	ldr	r3, [pc, #780]	; (800216c <TaskDiagnostics+0x37c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 31ff 	mov.w	r1, #4294967295
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00f fdd4 	bl	8011a14 <osMutexWait>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 811d 	bne.w	80020ae <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 8001e74:	4bbe      	ldr	r3, [pc, #760]	; (8002170 <TaskDiagnostics+0x380>)
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e84:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001e88:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 8001e8a:	4bb9      	ldr	r3, [pc, #740]	; (8002170 <TaskDiagnostics+0x380>)
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e9a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001e9e:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001ea0:	4bb3      	ldr	r3, [pc, #716]	; (8002170 <TaskDiagnostics+0x380>)
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001eb0:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001eb4:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 8001eb6:	4bae      	ldr	r3, [pc, #696]	; (8002170 <TaskDiagnostics+0x380>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ec6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001eca:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001ecc:	4ba9      	ldr	r3, [pc, #676]	; (8002174 <TaskDiagnostics+0x384>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ed6:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	461d      	mov	r5, r3
 8001ede:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ee2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001eee:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001efa:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	9101      	str	r1, [sp, #4]
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	499a      	ldr	r1, [pc, #616]	; (8002178 <TaskDiagnostics+0x388>)
 8001f10:	f004 fc3c 	bl	800678c <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 8001f14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4895      	ldr	r0, [pc, #596]	; (8002174 <TaskDiagnostics+0x384>)
 8001f1e:	f7ff fc30 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 8001f22:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f26:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fc28 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 8001f32:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fc20 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 8001f42:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f46:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc18 	bl	8001782 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 8001f52:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f5a:	2209      	movs	r2, #9
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc10 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8001f62:	4b86      	ldr	r3, [pc, #536]	; (800217c <TaskDiagnostics+0x38c>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f70:	4983      	ldr	r1, [pc, #524]	; (8002180 <TaskDiagnostics+0x390>)
 8001f72:	f004 fc0b 	bl	800678c <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 8001f76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f7a:	220b      	movs	r2, #11
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	487f      	ldr	r0, [pc, #508]	; (800217c <TaskDiagnostics+0x38c>)
 8001f80:	f7ff fc12 	bl	80017a8 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 8001f84:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <TaskDiagnostics+0x394>)
 8001f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8a:	4a7f      	ldr	r2, [pc, #508]	; (8002188 <TaskDiagnostics+0x398>)
 8001f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f90:	1092      	asrs	r2, r2, #2
 8001f92:	17db      	asrs	r3, r3, #31
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f9c:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001fa0:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8001fa2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fa6:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001fb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001fb6:	4975      	ldr	r1, [pc, #468]	; (800218c <TaskDiagnostics+0x39c>)
 8001fb8:	f004 fbe8 	bl	800678c <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 8001fbc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001fc0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001fc4:	220d      	movs	r2, #13
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fbee 	bl	80017a8 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8001fcc:	4b70      	ldr	r3, [pc, #448]	; (8002190 <TaskDiagnostics+0x3a0>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001fd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001fda:	496e      	ldr	r1, [pc, #440]	; (8002194 <TaskDiagnostics+0x3a4>)
 8001fdc:	f004 fbd6 	bl	800678c <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 8001fe0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4869      	ldr	r0, [pc, #420]	; (8002190 <TaskDiagnostics+0x3a0>)
 8001fea:	f7ff fbdd 	bl	80017a8 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <TaskDiagnostics+0x3a8>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ff6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ffa:	4968      	ldr	r1, [pc, #416]	; (800219c <TaskDiagnostics+0x3ac>)
 8001ffc:	f004 fbc6 	bl	800678c <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8002000:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002004:	2211      	movs	r2, #17
 8002006:	4619      	mov	r1, r3
 8002008:	4863      	ldr	r0, [pc, #396]	; (8002198 <TaskDiagnostics+0x3a8>)
 800200a:	f7ff fbba 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <TaskDiagnostics+0x3b0>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002016:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800201a:	4962      	ldr	r1, [pc, #392]	; (80021a4 <TaskDiagnostics+0x3b4>)
 800201c:	f004 fbb6 	bl	800678c <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8002020:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002024:	2213      	movs	r2, #19
 8002026:	4619      	mov	r1, r3
 8002028:	485d      	ldr	r0, [pc, #372]	; (80021a0 <TaskDiagnostics+0x3b0>)
 800202a:	f7ff fbaa 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 800202e:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <TaskDiagnostics+0x3b8>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002036:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800203a:	495c      	ldr	r1, [pc, #368]	; (80021ac <TaskDiagnostics+0x3bc>)
 800203c:	f004 fba6 	bl	800678c <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8002040:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002044:	2215      	movs	r2, #21
 8002046:	4619      	mov	r1, r3
 8002048:	4857      	ldr	r0, [pc, #348]	; (80021a8 <TaskDiagnostics+0x3b8>)
 800204a:	f7ff fb9a 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 800204e:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <TaskDiagnostics+0x3c0>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002056:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800205a:	4956      	ldr	r1, [pc, #344]	; (80021b4 <TaskDiagnostics+0x3c4>)
 800205c:	f004 fb96 	bl	800678c <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8002060:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002064:	2217      	movs	r2, #23
 8002066:	4619      	mov	r1, r3
 8002068:	4851      	ldr	r0, [pc, #324]	; (80021b0 <TaskDiagnostics+0x3c0>)
 800206a:	f7ff fb8a 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <TaskDiagnostics+0x3c8>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002076:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800207a:	4950      	ldr	r1, [pc, #320]	; (80021bc <TaskDiagnostics+0x3cc>)
 800207c:	f004 fb86 	bl	800678c <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8002080:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002084:	2219      	movs	r2, #25
 8002086:	4619      	mov	r1, r3
 8002088:	484b      	ldr	r0, [pc, #300]	; (80021b8 <TaskDiagnostics+0x3c8>)
 800208a:	f7ff fb7a 	bl	8001782 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 800208e:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <TaskDiagnostics+0x3d0>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002096:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800209a:	494a      	ldr	r1, [pc, #296]	; (80021c4 <TaskDiagnostics+0x3d4>)
 800209c:	f004 fb76 	bl	800678c <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 80020a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020a4:	221b      	movs	r2, #27
 80020a6:	4619      	mov	r1, r3
 80020a8:	4845      	ldr	r0, [pc, #276]	; (80021c0 <TaskDiagnostics+0x3d0>)
 80020aa:	f7ff fb6a 	bl	8001782 <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <TaskDiagnostics+0x37c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00f fcfc 	bl	8011ab0 <osMutexRelease>

		if (IsImuAvailable)
 80020b8:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <TaskDiagnostics+0x3d8>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8127 	beq.w	8002310 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80020c2:	4b42      	ldr	r3, [pc, #264]	; (80021cc <TaskDiagnostics+0x3dc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00f fca2 	bl	8011a14 <osMutexWait>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8117 	bne.w	8002306 <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <TaskDiagnostics+0x3e0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa5b 	bl	8000598 <__aeabi_f2d>
 80020e2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <TaskDiagnostics+0x3e4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa54 	bl	8000598 <__aeabi_f2d>
 80020f0:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 80020f4:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <TaskDiagnostics+0x3e4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa4d 	bl	8000598 <__aeabi_f2d>
 80020fe:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <TaskDiagnostics+0x3e4>)
 8002104:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fa46 	bl	8000598 <__aeabi_f2d>
 800210c:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <TaskDiagnostics+0x3e8>)
 8002112:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa3f 	bl	8000598 <__aeabi_f2d>
 800211a:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <TaskDiagnostics+0x3e8>)
 8002120:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa38 	bl	8000598 <__aeabi_f2d>
 8002128:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <TaskDiagnostics+0x3e8>)
 800212e:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa31 	bl	8000598 <__aeabi_f2d>
 8002136:	4682      	mov	sl, r0
 8002138:	468b      	mov	fp, r1
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <TaskDiagnostics+0x3ec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa2a 	bl	8000598 <__aeabi_f2d>
 8002144:	4680      	mov	r8, r0
 8002146:	4689      	mov	r9, r1
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <TaskDiagnostics+0x3f0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa23 	bl	8000598 <__aeabi_f2d>
 8002152:	4604      	mov	r4, r0
 8002154:	460d      	mov	r5, r1
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <TaskDiagnostics+0x3f4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa1c 	bl	8000598 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002168:	e03e      	b.n	80021e8 <TaskDiagnostics+0x3f8>
 800216a:	bf00      	nop
 800216c:	20000d90 	.word	0x20000d90
 8002170:	40010000 	.word	0x40010000
 8002174:	2000036c 	.word	0x2000036c
 8002178:	0801b9b8 	.word	0x0801b9b8
 800217c:	20000372 	.word	0x20000372
 8002180:	0801b9d8 	.word	0x0801b9d8
 8002184:	2000036e 	.word	0x2000036e
 8002188:	66666667 	.word	0x66666667
 800218c:	0801b9e8 	.word	0x0801b9e8
 8002190:	20000376 	.word	0x20000376
 8002194:	0801b9f8 	.word	0x0801b9f8
 8002198:	2000037a 	.word	0x2000037a
 800219c:	0801ba04 	.word	0x0801ba04
 80021a0:	2000037c 	.word	0x2000037c
 80021a4:	0801ba10 	.word	0x0801ba10
 80021a8:	2000037e 	.word	0x2000037e
 80021ac:	0801ba1c 	.word	0x0801ba1c
 80021b0:	20000380 	.word	0x20000380
 80021b4:	0801ba28 	.word	0x0801ba28
 80021b8:	20000382 	.word	0x20000382
 80021bc:	0801ba34 	.word	0x0801ba34
 80021c0:	20000384 	.word	0x20000384
 80021c4:	0801ba40 	.word	0x0801ba40
 80021c8:	20000214 	.word	0x20000214
 80021cc:	20000d94 	.word	0x20000d94
 80021d0:	20000408 	.word	0x20000408
 80021d4:	200003fc 	.word	0x200003fc
 80021d8:	2000040c 	.word	0x2000040c
 80021dc:	20000418 	.word	0x20000418
 80021e0:	2000041c 	.word	0x2000041c
 80021e4:	20000420 	.word	0x20000420
 80021e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80021ec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80021f0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80021f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80021f8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80021fc:	ed97 7b00 	vldr	d7, [r7]
 8002200:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002204:	ed97 7b02 	vldr	d7, [r7, #8]
 8002208:	ed8d 7b08 	vstr	d7, [sp, #32]
 800220c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002210:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002214:	ed97 7b06 	vldr	d7, [r7, #24]
 8002218:	ed8d 7b04 	vstr	d7, [sp, #16]
 800221c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002224:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002228:	ed8d 7b00 	vstr	d7, [sp]
 800222c:	460a      	mov	r2, r1
 800222e:	4998      	ldr	r1, [pc, #608]	; (8002490 <TaskDiagnostics+0x6a0>)
 8002230:	f004 faac 	bl	800678c <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 8002234:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002238:	2201      	movs	r2, #1
 800223a:	4619      	mov	r1, r3
 800223c:	4895      	ldr	r0, [pc, #596]	; (8002494 <TaskDiagnostics+0x6a4>)
 800223e:	f7ff fa7b 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8002242:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002246:	2205      	movs	r2, #5
 8002248:	4619      	mov	r1, r3
 800224a:	4893      	ldr	r0, [pc, #588]	; (8002498 <TaskDiagnostics+0x6a8>)
 800224c:	f7ff fa74 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8002250:	4892      	ldr	r0, [pc, #584]	; (800249c <TaskDiagnostics+0x6ac>)
 8002252:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002256:	2209      	movs	r2, #9
 8002258:	4619      	mov	r1, r3
 800225a:	f7ff fa6d 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 800225e:	4890      	ldr	r0, [pc, #576]	; (80024a0 <TaskDiagnostics+0x6b0>)
 8002260:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002264:	220d      	movs	r2, #13
 8002266:	4619      	mov	r1, r3
 8002268:	f7ff fa66 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 800226c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002270:	2211      	movs	r2, #17
 8002272:	4619      	mov	r1, r3
 8002274:	488b      	ldr	r0, [pc, #556]	; (80024a4 <TaskDiagnostics+0x6b4>)
 8002276:	f7ff fa5f 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 800227a:	488b      	ldr	r0, [pc, #556]	; (80024a8 <TaskDiagnostics+0x6b8>)
 800227c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002280:	2215      	movs	r2, #21
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff fa58 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8002288:	4888      	ldr	r0, [pc, #544]	; (80024ac <TaskDiagnostics+0x6bc>)
 800228a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800228e:	2219      	movs	r2, #25
 8002290:	4619      	mov	r1, r3
 8002292:	f7ff fa51 	bl	8001738 <FloatToUint8s>

				sprintf(UARTstr,
 8002296:	4b86      	ldr	r3, [pc, #536]	; (80024b0 <TaskDiagnostics+0x6c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe f97c 	bl	8000598 <__aeabi_f2d>
 80022a0:	4604      	mov	r4, r0
 80022a2:	460d      	mov	r5, r1
 80022a4:	4b83      	ldr	r3, [pc, #524]	; (80024b4 <TaskDiagnostics+0x6c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe f975 	bl	8000598 <__aeabi_f2d>
 80022ae:	4680      	mov	r8, r0
 80022b0:	4689      	mov	r9, r1
 80022b2:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <TaskDiagnostics+0x6c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f96e 	bl	8000598 <__aeabi_f2d>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80022c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80022c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022d0:	e9cd 4500 	strd	r4, r5, [sp]
 80022d4:	460a      	mov	r2, r1
 80022d6:	4979      	ldr	r1, [pc, #484]	; (80024bc <TaskDiagnostics+0x6cc>)
 80022d8:	f004 fa58 	bl	800678c <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 80022dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022e0:	221d      	movs	r2, #29
 80022e2:	4619      	mov	r1, r3
 80022e4:	4872      	ldr	r0, [pc, #456]	; (80024b0 <TaskDiagnostics+0x6c0>)
 80022e6:	f7ff fa27 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 80022ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	4619      	mov	r1, r3
 80022f2:	4870      	ldr	r0, [pc, #448]	; (80024b4 <TaskDiagnostics+0x6c4>)
 80022f4:	f7ff fa20 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 80022f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022fc:	2225      	movs	r2, #37	; 0x25
 80022fe:	4619      	mov	r1, r3
 8002300:	486d      	ldr	r0, [pc, #436]	; (80024b8 <TaskDiagnostics+0x6c8>)
 8002302:	f7ff fa19 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 8002306:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <TaskDiagnostics+0x6d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f00f fbd0 	bl	8011ab0 <osMutexRelease>
		}

		if (IsMagnAvailable)
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <TaskDiagnostics+0x6d4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d056      	beq.n	80023c6 <TaskDiagnostics+0x5d6>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002318:	4b6b      	ldr	r3, [pc, #428]	; (80024c8 <TaskDiagnostics+0x6d8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	4618      	mov	r0, r3
 8002322:	f00f fb77 	bl	8011a14 <osMutexWait>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d147      	bne.n	80023bc <TaskDiagnostics+0x5cc>
			{
				sprintf(UARTstr,
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <TaskDiagnostics+0x6dc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f931 	bl	8000598 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <TaskDiagnostics+0x6e0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f92a 	bl	8000598 <__aeabi_f2d>
 8002344:	4680      	mov	r8, r0
 8002346:	4689      	mov	r9, r1
 8002348:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <TaskDiagnostics+0x6e4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f923 	bl	8000598 <__aeabi_f2d>
 8002352:	4682      	mov	sl, r0
 8002354:	468b      	mov	fp, r1
 8002356:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <TaskDiagnostics+0x6e8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f91c 	bl	8000598 <__aeabi_f2d>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002368:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800236c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002370:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002374:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002378:	e9cd 4500 	strd	r4, r5, [sp]
 800237c:	460a      	mov	r2, r1
 800237e:	4957      	ldr	r1, [pc, #348]	; (80024dc <TaskDiagnostics+0x6ec>)
 8002380:	f004 fa04 	bl	800678c <sprintf_>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				FloatToUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 8002384:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002388:	2229      	movs	r2, #41	; 0x29
 800238a:	4619      	mov	r1, r3
 800238c:	484f      	ldr	r0, [pc, #316]	; (80024cc <TaskDiagnostics+0x6dc>)
 800238e:	f7ff f9d3 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 8002392:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002396:	222d      	movs	r2, #45	; 0x2d
 8002398:	4619      	mov	r1, r3
 800239a:	484d      	ldr	r0, [pc, #308]	; (80024d0 <TaskDiagnostics+0x6e0>)
 800239c:	f7ff f9cc 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 80023a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023a4:	2231      	movs	r2, #49	; 0x31
 80023a6:	4619      	mov	r1, r3
 80023a8:	484a      	ldr	r0, [pc, #296]	; (80024d4 <TaskDiagnostics+0x6e4>)
 80023aa:	f7ff f9c5 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
 80023ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023b2:	2235      	movs	r2, #53	; 0x35
 80023b4:	4619      	mov	r1, r3
 80023b6:	4848      	ldr	r0, [pc, #288]	; (80024d8 <TaskDiagnostics+0x6e8>)
 80023b8:	f7ff f9be 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <TaskDiagnostics+0x6d8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00f fb75 	bl	8011ab0 <osMutexRelease>
		}

		if (IsDistAvailable)
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <TaskDiagnostics+0x6f0>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d026      	beq.n	800241c <TaskDiagnostics+0x62c>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <TaskDiagnostics+0x6f4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 31ff 	mov.w	r1, #4294967295
 80023d6:	4618      	mov	r0, r3
 80023d8:	f00f fb1c 	bl	8011a14 <osMutexWait>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d117      	bne.n	8002412 <TaskDiagnostics+0x622>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <TaskDiagnostics+0x6f8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8d6 	bl	8000598 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80023f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80023f8:	e9cd 2300 	strd	r2, r3, [sp]
 80023fc:	460a      	mov	r2, r1
 80023fe:	493b      	ldr	r1, [pc, #236]	; (80024ec <TaskDiagnostics+0x6fc>)
 8002400:	f004 f9c4 	bl	800678c <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 8002404:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002408:	2239      	movs	r2, #57	; 0x39
 800240a:	4619      	mov	r1, r3
 800240c:	4836      	ldr	r0, [pc, #216]	; (80024e8 <TaskDiagnostics+0x6f8>)
 800240e:	f7ff f993 	bl	8001738 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <TaskDiagnostics+0x6f4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f00f fb4a 	bl	8011ab0 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 800241c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002424:	4932      	ldr	r1, [pc, #200]	; (80024f0 <TaskDiagnostics+0x700>)
 8002426:	4618      	mov	r0, r3
 8002428:	f004 f9b0 	bl	800678c <sprintf_>

		// Sending log info
		if (Diag)
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <TaskDiagnostics+0x704>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f43f ad09 	beq.w	8001e48 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8002436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd ff40 	bl	80002c0 <strlen>
 8002440:	4603      	mov	r3, r0
 8002442:	b29a      	uxth	r2, r3
 8002444:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	482a      	ldr	r0, [pc, #168]	; (80024f8 <TaskDiagnostics+0x708>)
 800244e:	f00d fdad 	bl	800ffac <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8002452:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	4827      	ldr	r0, [pc, #156]	; (80024fc <TaskDiagnostics+0x70c>)
 800245e:	f00b f8c0 	bl	800d5e2 <HAL_SPI_Transmit>
			osDelay(10);
 8002462:	200a      	movs	r0, #10
 8002464:	f00f faa9 	bl	80119ba <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8002468:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	4822      	ldr	r0, [pc, #136]	; (80024fc <TaskDiagnostics+0x70c>)
 8002474:	f00b f8b5 	bl	800d5e2 <HAL_SPI_Transmit>
			osDelay(10);
 8002478:	200a      	movs	r0, #10
 800247a:	f00f fa9e 	bl	80119ba <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 800247e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	481c      	ldr	r0, [pc, #112]	; (80024fc <TaskDiagnostics+0x70c>)
 800248a:	f00b f8aa 	bl	800d5e2 <HAL_SPI_Transmit>
	{
 800248e:	e4db      	b.n	8001e48 <TaskDiagnostics+0x58>
 8002490:	0801ba4c 	.word	0x0801ba4c
 8002494:	20000408 	.word	0x20000408
 8002498:	200003fc 	.word	0x200003fc
 800249c:	20000400 	.word	0x20000400
 80024a0:	20000404 	.word	0x20000404
 80024a4:	2000040c 	.word	0x2000040c
 80024a8:	20000410 	.word	0x20000410
 80024ac:	20000414 	.word	0x20000414
 80024b0:	20000460 	.word	0x20000460
 80024b4:	20000464 	.word	0x20000464
 80024b8:	20000468 	.word	0x20000468
 80024bc:	0801bac8 	.word	0x0801bac8
 80024c0:	20000d94 	.word	0x20000d94
 80024c4:	20000215 	.word	0x20000215
 80024c8:	20000d8c 	.word	0x20000d8c
 80024cc:	20000484 	.word	0x20000484
 80024d0:	20000488 	.word	0x20000488
 80024d4:	2000048c 	.word	0x2000048c
 80024d8:	20000490 	.word	0x20000490
 80024dc:	0801bafc 	.word	0x0801bafc
 80024e0:	20000216 	.word	0x20000216
 80024e4:	20000d9c 	.word	0x20000d9c
 80024e8:	200004cc 	.word	0x200004cc
 80024ec:	0801bb40 	.word	0x0801bb40
 80024f0:	0801bb58 	.word	0x0801bb58
 80024f4:	2000020c 	.word	0x2000020c
 80024f8:	20000c88 	.word	0x20000c88
 80024fc:	20000a18 	.word	0x20000a18

08002500 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	da02      	bge.n	8002514 <ConvertToPwm+0x14>
		raw = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	e006      	b.n	8002522 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251a:	dd02      	ble.n	8002522 <ConvertToPwm+0x22>
		raw = 1000;
 800251c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002520:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b08b      	sub	sp, #44	; 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800253c:	23c8      	movs	r3, #200	; 0xc8
 800253e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800254c:	2100      	movs	r1, #0
 800254e:	4873      	ldr	r0, [pc, #460]	; (800271c <TaskMotor+0x1e8>)
 8002550:	f00c f82e 	bl	800e5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002554:	2104      	movs	r1, #4
 8002556:	4871      	ldr	r0, [pc, #452]	; (800271c <TaskMotor+0x1e8>)
 8002558:	f00c f82a 	bl	800e5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800255c:	2108      	movs	r1, #8
 800255e:	486f      	ldr	r0, [pc, #444]	; (800271c <TaskMotor+0x1e8>)
 8002560:	f00c f826 	bl	800e5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002564:	210c      	movs	r1, #12
 8002566:	486d      	ldr	r0, [pc, #436]	; (800271c <TaskMotor+0x1e8>)
 8002568:	f00c f822 	bl	800e5b0 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <TaskMotor+0x1ec>)
 800256e:	2232      	movs	r2, #50	; 0x32
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8002572:	4b6b      	ldr	r3, [pc, #428]	; (8002720 <TaskMotor+0x1ec>)
 8002574:	2232      	movs	r2, #50	; 0x32
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8002578:	4b69      	ldr	r3, [pc, #420]	; (8002720 <TaskMotor+0x1ec>)
 800257a:	2232      	movs	r2, #50	; 0x32
 800257c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 800257e:	4b68      	ldr	r3, [pc, #416]	; (8002720 <TaskMotor+0x1ec>)
 8002580:	2232      	movs	r2, #50	; 0x32
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8002584:	f010 fdde 	bl	8013144 <xTaskGetTickCount>
 8002588:	4603      	mov	r3, r0
 800258a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	4618      	mov	r0, r3
 8002594:	f010 fc02 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002598:	f010 fdd4 	bl	8013144 <xTaskGetTickCount>
 800259c:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <TaskMotor+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 31ff 	mov.w	r1, #4294967295
 80025a6:	4618      	mov	r0, r3
 80025a8:	f00f fa34 	bl	8011a14 <osMutexWait>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 80ad 	bne.w	800270e <TaskMotor+0x1da>
		{
			// Hardware safety
			if (SWA < 10)
 80025b4:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <TaskMotor+0x1f4>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d806      	bhi.n	80025ca <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c2:	485a      	ldr	r0, [pc, #360]	; (800272c <TaskMotor+0x1f8>)
 80025c4:	f009 f902 	bl	800b7cc <HAL_GPIO_WritePin>
 80025c8:	e005      	b.n	80025d6 <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d0:	4856      	ldr	r0, [pc, #344]	; (800272c <TaskMotor+0x1f8>)
 80025d2:	f009 f8fb 	bl	800b7cc <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <TaskMotor+0x1fc>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	2b09      	cmp	r3, #9
 80025dc:	d803      	bhi.n	80025e6 <TaskMotor+0xb2>
				Rotors = false;
 80025de:	4b55      	ldr	r3, [pc, #340]	; (8002734 <TaskMotor+0x200>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e002      	b.n	80025ec <TaskMotor+0xb8>
			else
				Rotors = true;
 80025e6:	4b53      	ldr	r3, [pc, #332]	; (8002734 <TaskMotor+0x200>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <TaskMotor+0x200>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d074      	beq.n	80026de <TaskMotor+0x1aa>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 10)
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <TaskMotor+0x204>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	2b0a      	cmp	r3, #10
 80025fa:	d94f      	bls.n	800269c <TaskMotor+0x168>
				{
					if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <TaskMotor+0x208>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	4618      	mov	r0, r3
 8002606:	f00f fa05 	bl	8011a14 <osMutexWait>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d13f      	bne.n	8002690 <TaskMotor+0x15c>
					{
						ESC1_Speed = Throttle_in + Roll_controlled + Pitch_controlled - Yaw_controlled;
 8002610:	4b49      	ldr	r3, [pc, #292]	; (8002738 <TaskMotor+0x204>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <TaskMotor+0x20c>)
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	4413      	add	r3, r2
 800261e:	4a49      	ldr	r2, [pc, #292]	; (8002744 <TaskMotor+0x210>)
 8002620:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002624:	4413      	add	r3, r2
 8002626:	4a48      	ldr	r2, [pc, #288]	; (8002748 <TaskMotor+0x214>)
 8002628:	f9b2 2000 	ldrsh.w	r2, [r2]
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
						ESC2_Speed = Throttle_in - Roll_controlled + Pitch_controlled + Yaw_controlled;
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <TaskMotor+0x204>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <TaskMotor+0x20c>)
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <TaskMotor+0x210>)
 8002640:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002644:	4413      	add	r3, r2
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <TaskMotor+0x214>)
 8002648:	f9b2 2000 	ldrsh.w	r2, [r2]
 800264c:	4413      	add	r3, r2
 800264e:	623b      	str	r3, [r7, #32]
						ESC3_Speed = Throttle_in - Roll_controlled - Pitch_controlled - Yaw_controlled;
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <TaskMotor+0x204>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <TaskMotor+0x20c>)
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a39      	ldr	r2, [pc, #228]	; (8002744 <TaskMotor+0x210>)
 8002660:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <TaskMotor+0x214>)
 8002668:	f9b2 2000 	ldrsh.w	r2, [r2]
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
						ESC4_Speed = Throttle_in + Roll_controlled - Pitch_controlled + Yaw_controlled;
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <TaskMotor+0x204>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <TaskMotor+0x20c>)
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	4413      	add	r3, r2
 800267e:	4a31      	ldr	r2, [pc, #196]	; (8002744 <TaskMotor+0x210>)
 8002680:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <TaskMotor+0x214>)
 8002688:	f9b2 2000 	ldrsh.w	r2, [r2]
 800268c:	4413      	add	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
					}
					osMutexRelease(ControllerMutexHandle);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <TaskMotor+0x208>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f00f fa0b 	bl	8011ab0 <osMutexRelease>
 800269a:	e007      	b.n	80026ac <TaskMotor+0x178>
				}
				else
				{
					ESC1_Speed = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 80026ac:	4c1c      	ldr	r4, [pc, #112]	; (8002720 <TaskMotor+0x1ec>)
 80026ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b0:	f7ff ff26 	bl	8002500 <ConvertToPwm>
 80026b4:	4603      	mov	r3, r0
 80026b6:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 80026b8:	4c19      	ldr	r4, [pc, #100]	; (8002720 <TaskMotor+0x1ec>)
 80026ba:	6a38      	ldr	r0, [r7, #32]
 80026bc:	f7ff ff20 	bl	8002500 <ConvertToPwm>
 80026c0:	4603      	mov	r3, r0
 80026c2:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 80026c4:	4c16      	ldr	r4, [pc, #88]	; (8002720 <TaskMotor+0x1ec>)
 80026c6:	69f8      	ldr	r0, [r7, #28]
 80026c8:	f7ff ff1a 	bl	8002500 <ConvertToPwm>
 80026cc:	4603      	mov	r3, r0
 80026ce:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 80026d0:	4c13      	ldr	r4, [pc, #76]	; (8002720 <TaskMotor+0x1ec>)
 80026d2:	69b8      	ldr	r0, [r7, #24]
 80026d4:	f7ff ff14 	bl	8002500 <ConvertToPwm>
 80026d8:	4603      	mov	r3, r0
 80026da:	6423      	str	r3, [r4, #64]	; 0x40
 80026dc:	e017      	b.n	800270e <TaskMotor+0x1da>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 80026de:	4c10      	ldr	r4, [pc, #64]	; (8002720 <TaskMotor+0x1ec>)
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff ff0d 	bl	8002500 <ConvertToPwm>
 80026e6:	4603      	mov	r3, r0
 80026e8:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 80026ea:	4c0d      	ldr	r4, [pc, #52]	; (8002720 <TaskMotor+0x1ec>)
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff ff07 	bl	8002500 <ConvertToPwm>
 80026f2:	4603      	mov	r3, r0
 80026f4:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 80026f6:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <TaskMotor+0x1ec>)
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff ff01 	bl	8002500 <ConvertToPwm>
 80026fe:	4603      	mov	r3, r0
 8002700:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 8002702:	4c07      	ldr	r4, [pc, #28]	; (8002720 <TaskMotor+0x1ec>)
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fefb 	bl	8002500 <ConvertToPwm>
 800270a:	4603      	mov	r3, r0
 800270c:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <TaskMotor+0x1f0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f00f f9cc 	bl	8011ab0 <osMutexRelease>
	{
 8002718:	e738      	b.n	800258c <TaskMotor+0x58>
 800271a:	bf00      	nop
 800271c:	20000ae0 	.word	0x20000ae0
 8002720:	40010000 	.word	0x40010000
 8002724:	20000d90 	.word	0x20000d90
 8002728:	2000037a 	.word	0x2000037a
 800272c:	40021000 	.word	0x40021000
 8002730:	2000037c 	.word	0x2000037c
 8002734:	20000001 	.word	0x20000001
 8002738:	2000036c 	.word	0x2000036c
 800273c:	20000da4 	.word	0x20000da4
 8002740:	20000370 	.word	0x20000370
 8002744:	20000374 	.word	0x20000374
 8002748:	20000378 	.word	0x20000378

0800274c <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 8002754:	2301      	movs	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 8002764:	f010 fcee 	bl	8013144 <xTaskGetTickCount>
 8002768:	4603      	mov	r3, r0
 800276a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	4618      	mov	r0, r3
 8002774:	f010 fb12 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002778:	f010 fce4 	bl	8013144 <xTaskGetTickCount>
 800277c:	60f8      	str	r0, [r7, #12]
	{
 800277e:	e7f5      	b.n	800276c <TaskPower+0x20>

08002780 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8002788:	2332      	movs	r3, #50	; 0x32
 800278a:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800278c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8002798:	2240      	movs	r2, #64	; 0x40
 800279a:	496b      	ldr	r1, [pc, #428]	; (8002948 <TaskRemote+0x1c8>)
 800279c:	486b      	ldr	r0, [pc, #428]	; (800294c <TaskRemote+0x1cc>)
 800279e:	f00d fccc 	bl	801013a <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 80027a2:	f010 fccf 	bl	8013144 <xTaskGetTickCount>
 80027a6:	4603      	mov	r3, r0
 80027a8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	6979      	ldr	r1, [r7, #20]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f010 faf3 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80027b6:	f010 fcc5 	bl	8013144 <xTaskGetTickCount>
 80027ba:	6138      	str	r0, [r7, #16]

		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <TaskRemote+0x1d0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00f f9db 	bl	8011b80 <osSemaphoreWait>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ec      	bne.n	80027aa <TaskRemote+0x2a>
		{
			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 80027d0:	4b60      	ldr	r3, [pc, #384]	; (8002954 <TaskRemote+0x1d4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	4618      	mov	r0, r3
 80027da:	f00f f91b 	bl	8011a14 <osMutexWait>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d12f      	bne.n	8002844 <TaskRemote+0xc4>
			{
				for (int i = 32; i >= 0; i--)
 80027e4:	2320      	movs	r3, #32
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	e024      	b.n	8002834 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <TaskRemote+0x1d8>)
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d11a      	bne.n	800282e <TaskRemote+0xae>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a56      	ldr	r2, [pc, #344]	; (8002958 <TaskRemote+0x1d8>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d113      	bne.n	800282e <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	e00d      	b.n	8002828 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4413      	add	r3, r2
 8002812:	4a51      	ldr	r2, [pc, #324]	; (8002958 <TaskRemote+0x1d8>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	b2d9      	uxtb	r1, r3
 8002818:	4a50      	ldr	r2, [pc, #320]	; (800295c <TaskRemote+0x1dc>)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	4413      	add	r3, r2
 800281e:	460a      	mov	r2, r1
 8002820:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	3301      	adds	r3, #1
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b1f      	cmp	r3, #31
 800282c:	ddee      	ble.n	800280c <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	3b01      	subs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	dad7      	bge.n	80027ea <TaskRemote+0x6a>
					}
				}
				osMutexRelease(RemoteBufferMutexHandle);
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <TaskRemote+0x1d4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f00f f936 	bl	8011ab0 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	e018      	b.n	800287c <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	3303      	adds	r3, #3
 8002850:	4a42      	ldr	r2, [pc, #264]	; (800295c <TaskRemote+0x1dc>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b29a      	uxth	r2, r3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	493e      	ldr	r1, [pc, #248]	; (800295c <TaskRemote+0x1dc>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	4413      	add	r3, r2
 800286c:	b299      	uxth	r1, r3
 800286e:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <TaskRemote+0x1e0>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b09      	cmp	r3, #9
 8002880:	dde3      	ble.n	800284a <TaskRemote+0xca>

			// Setting the speed
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <TaskRemote+0x1e4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 31ff 	mov.w	r1, #4294967295
 800288a:	4618      	mov	r0, r3
 800288c:	f00f f8c2 	bl	8011a14 <osMutexWait>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d151      	bne.n	800293a <TaskRemote+0x1ba>
			{
				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <TaskRemote+0x1e0>)
 8002898:	889b      	ldrh	r3, [r3, #4]
 800289a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <TaskRemote+0x1e8>)
 80028a2:	801a      	strh	r2, [r3, #0]
				// Limit input Throttle, so the Controllers can keep the drone stable at high RPM, too
				if (Throttle_in > 800)
 80028a4:	4b30      	ldr	r3, [pc, #192]	; (8002968 <TaskRemote+0x1e8>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80028ac:	d903      	bls.n	80028b6 <TaskRemote+0x136>
					Throttle_in = 800;
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <TaskRemote+0x1e8>)
 80028b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028b4:	801a      	strh	r2, [r3, #0]

				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <TaskRemote+0x1e0>)
 80028b8:	885b      	ldrh	r3, [r3, #2]
 80028ba:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <TaskRemote+0x1ec>)
 80028c4:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <TaskRemote+0x1e0>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <TaskRemote+0x1f0>)
 80028d4:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <TaskRemote+0x1e0>)
 80028d8:	88db      	ldrh	r3, [r3, #6]
 80028da:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <TaskRemote+0x1f4>)
 80028e4:	801a      	strh	r2, [r3, #0]

				SWA = channelValues[SWA_CHANNEL] - 1000;
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <TaskRemote+0x1e0>)
 80028e8:	891b      	ldrh	r3, [r3, #8]
 80028ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <TaskRemote+0x1f8>)
 80028f2:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <TaskRemote+0x1e0>)
 80028f6:	895b      	ldrh	r3, [r3, #10]
 80028f8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <TaskRemote+0x1fc>)
 8002900:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <TaskRemote+0x1e0>)
 8002904:	899b      	ldrh	r3, [r3, #12]
 8002906:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <TaskRemote+0x200>)
 800290e:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <TaskRemote+0x1e0>)
 8002912:	89db      	ldrh	r3, [r3, #14]
 8002914:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <TaskRemote+0x204>)
 800291c:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <TaskRemote+0x1e0>)
 8002920:	8a1b      	ldrh	r3, [r3, #16]
 8002922:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <TaskRemote+0x208>)
 800292a:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <TaskRemote+0x1e0>)
 800292e:	8a5b      	ldrh	r3, [r3, #18]
 8002930:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002934:	b29a      	uxth	r2, r3
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <TaskRemote+0x20c>)
 8002938:	801a      	strh	r2, [r3, #0]
			}
			osMutexRelease(RemoteDataMutexHandle);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <TaskRemote+0x1e4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f00f f8b6 	bl	8011ab0 <osMutexRelease>
	{
 8002944:	e731      	b.n	80027aa <TaskRemote+0x2a>
 8002946:	bf00      	nop
 8002948:	200004d0 	.word	0x200004d0
 800294c:	20000c00 	.word	0x20000c00
 8002950:	20000db0 	.word	0x20000db0
 8002954:	20000da0 	.word	0x20000da0
 8002958:	20000510 	.word	0x20000510
 800295c:	20000550 	.word	0x20000550
 8002960:	20000710 	.word	0x20000710
 8002964:	20000d90 	.word	0x20000d90
 8002968:	2000036c 	.word	0x2000036c
 800296c:	20000372 	.word	0x20000372
 8002970:	2000036e 	.word	0x2000036e
 8002974:	20000376 	.word	0x20000376
 8002978:	2000037a 	.word	0x2000037a
 800297c:	2000037c 	.word	0x2000037c
 8002980:	2000037e 	.word	0x2000037e
 8002984:	20000380 	.word	0x20000380
 8002988:	20000382 	.word	0x20000382
 800298c:	20000384 	.word	0x20000384

08002990 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 800299a:	edd7 7a01 	vldr	s15, [r7, #4]
 800299e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029b4 <FusionRadiansToDegrees+0x24>
 80029a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	42652ee0 	.word	0x42652ee0

080029b8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 80029c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80029ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d2:	d802      	bhi.n	80029da <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 80029d4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002a08 <FusionAsin+0x50>
 80029d8:	e011      	b.n	80029fe <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 80029da:	edd7 7a01 	vldr	s15, [r7, #4]
 80029de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	db02      	blt.n	80029f2 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 80029ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002a0c <FusionAsin+0x54>
 80029f0:	e005      	b.n	80029fe <FusionAsin+0x46>
    }
    return asinf(value);
 80029f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80029f6:	f016 fdf3 	bl	80195e0 <asinf>
 80029fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	bfc90fdb 	.word	0xbfc90fdb
 8002a0c:	3fc90fdb 	.word	0x3fc90fdb

08002a10 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002a10:	b480      	push	{r7}
 8002a12:	b091      	sub	sp, #68	; 0x44
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	eeb0 5a40 	vmov.f32	s10, s0
 8002a1a:	eef0 5a60 	vmov.f32	s11, s1
 8002a1e:	eeb0 6a41 	vmov.f32	s12, s2
 8002a22:	eef0 6a61 	vmov.f32	s13, s3
 8002a26:	eeb0 7a42 	vmov.f32	s14, s4
 8002a2a:	eef0 7a62 	vmov.f32	s15, s5
 8002a2e:	ed87 5a07 	vstr	s10, [r7, #28]
 8002a32:	edc7 5a08 	vstr	s11, [r7, #32]
 8002a36:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002a3a:	edc7 6a04 	vstr	s13, [r7, #16]
 8002a3e:	ed87 7a05 	vstr	s14, [r7, #20]
 8002a42:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8002a46:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002a52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8002a56:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002a62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8002a66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002a72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	ee06 1a90 	vmov	s13, r1
 8002a8e:	ee07 2a10 	vmov	s14, r2
 8002a92:	ee07 3a90 	vmov	s15, r3
}
 8002a96:	eeb0 0a66 	vmov.f32	s0, s13
 8002a9a:	eef0 0a47 	vmov.f32	s1, s14
 8002a9e:	eeb0 1a67 	vmov.f32	s2, s15
 8002aa2:	3744      	adds	r7, #68	; 0x44
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002aac:	b480      	push	{r7}
 8002aae:	b091      	sub	sp, #68	; 0x44
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	eeb0 5a40 	vmov.f32	s10, s0
 8002ab6:	eef0 5a60 	vmov.f32	s11, s1
 8002aba:	eeb0 6a41 	vmov.f32	s12, s2
 8002abe:	eef0 6a61 	vmov.f32	s13, s3
 8002ac2:	eeb0 7a42 	vmov.f32	s14, s4
 8002ac6:	eef0 7a62 	vmov.f32	s15, s5
 8002aca:	ed87 5a07 	vstr	s10, [r7, #28]
 8002ace:	edc7 5a08 	vstr	s11, [r7, #32]
 8002ad2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002ad6:	edc7 6a04 	vstr	s13, [r7, #16]
 8002ada:	ed87 7a05 	vstr	s14, [r7, #20]
 8002ade:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8002ae2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002aee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8002af2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002afe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8002b02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002b0e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	ee06 1a90 	vmov	s13, r1
 8002b2a:	ee07 2a10 	vmov	s14, r2
 8002b2e:	ee07 3a90 	vmov	s15, r3
}
 8002b32:	eeb0 0a66 	vmov.f32	s0, s13
 8002b36:	eef0 0a47 	vmov.f32	s1, s14
 8002b3a:	eeb0 1a67 	vmov.f32	s2, s15
 8002b3e:	3744      	adds	r7, #68	; 0x44
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8002b48:	b084      	sub	sp, #16
 8002b4a:	b480      	push	{r7}
 8002b4c:	b08f      	sub	sp, #60	; 0x3c
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8002b54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002b58:	eef0 6a40 	vmov.f32	s13, s0
 8002b5c:	eeb0 7a60 	vmov.f32	s14, s1
 8002b60:	eef0 7a41 	vmov.f32	s15, s2
 8002b64:	edc7 6a05 	vstr	s13, [r7, #20]
 8002b68:	ed87 7a06 	vstr	s14, [r7, #24]
 8002b6c:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 8002b70:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002b9c:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 8002ba0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002ba4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bac:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002bc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002bcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 8002bd0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bdc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002bfc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8002c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c04:	f107 0220 	add.w	r2, r7, #32
 8002c08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	ee06 1a90 	vmov	s13, r1
 8002c18:	ee07 2a10 	vmov	s14, r2
 8002c1c:	ee07 3a90 	vmov	s15, r3
#undef R
}
 8002c20:	eeb0 0a66 	vmov.f32	s0, s13
 8002c24:	eef0 0a47 	vmov.f32	s1, s14
 8002c28:	eeb0 1a67 	vmov.f32	s2, s15
 8002c2c:	373c      	adds	r7, #60	; 0x3c
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	b004      	add	sp, #16
 8002c36:	4770      	bx	lr

08002c38 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	eeb0 6a40 	vmov.f32	s12, s0
 8002c42:	eef0 6a60 	vmov.f32	s13, s1
 8002c46:	eeb0 7a41 	vmov.f32	s14, s2
 8002c4a:	eef0 7a61 	vmov.f32	s15, s3
 8002c4e:	ed87 6a04 	vstr	s12, [r7, #16]
 8002c52:	edc7 6a05 	vstr	s13, [r7, #20]
 8002c56:	ed87 7a06 	vstr	s14, [r7, #24]
 8002c5a:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8002c5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8002c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c82:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c86:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002c92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca6:	eef0 0a67 	vmov.f32	s1, s15
 8002caa:	eeb0 0a66 	vmov.f32	s0, s13
 8002cae:	f016 fcc3 	bl	8019638 <atan2f>
 8002cb2:	eef0 7a40 	vmov.f32	s15, s0
 8002cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cba:	f7ff fe69 	bl	8002990 <FusionRadiansToDegrees>
 8002cbe:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002cc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8002cc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cea:	f7ff fe65 	bl	80029b8 <FusionAsin>
 8002cee:	eef0 7a40 	vmov.f32	s15, s0
 8002cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf6:	f7ff fe4b 	bl	8002990 <FusionRadiansToDegrees>
 8002cfa:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002cfe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8002d02:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d06:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d0e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002d1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d32:	eef0 0a67 	vmov.f32	s1, s15
 8002d36:	eeb0 0a66 	vmov.f32	s0, s13
 8002d3a:	f016 fc7d 	bl	8019638 <atan2f>
 8002d3e:	eef0 7a40 	vmov.f32	s15, s0
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	f7ff fe23 	bl	8002990 <FusionRadiansToDegrees>
 8002d4a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002d4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8002d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	ee06 1a90 	vmov	s13, r1
 8002d6a:	ee07 2a10 	vmov	s14, r2
 8002d6e:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002d72:	eeb0 0a66 	vmov.f32	s0, s13
 8002d76:	eef0 0a47 	vmov.f32	s1, s14
 8002d7a:	eeb0 1a67 	vmov.f32	s2, s15
 8002d7e:	3740      	adds	r7, #64	; 0x40
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8002d84:	b084      	sub	sp, #16
 8002d86:	b5b0      	push	{r4, r5, r7, lr}
 8002d88:	b09e      	sub	sp, #120	; 0x78
 8002d8a:	af06      	add	r7, sp, #24
 8002d8c:	eef0 4a41 	vmov.f32	s9, s2
 8002d90:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d98:	eeb0 5a61 	vmov.f32	s10, s3
 8002d9c:	eef0 5a42 	vmov.f32	s11, s4
 8002da0:	eeb0 6a62 	vmov.f32	s12, s5
 8002da4:	eef0 6a43 	vmov.f32	s13, s6
 8002da8:	eeb0 7a63 	vmov.f32	s14, s7
 8002dac:	eef0 7a44 	vmov.f32	s15, s8
 8002db0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8002db4:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8002db8:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8002dbc:	ed87 5a08 	vstr	s10, [r7, #32]
 8002dc0:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8002dc4:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8002dc8:	edc7 6a05 	vstr	s13, [r7, #20]
 8002dcc:	ed87 7a06 	vstr	s14, [r7, #24]
 8002dd0:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8002dd4:	ed97 5a05 	vldr	s10, [r7, #20]
 8002dd8:	edd7 5a06 	vldr	s11, [r7, #24]
 8002ddc:	ed97 6a07 	vldr	s12, [r7, #28]
 8002de0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002de4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002de8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dec:	eef0 1a45 	vmov.f32	s3, s10
 8002df0:	eeb0 2a65 	vmov.f32	s4, s11
 8002df4:	eef0 2a46 	vmov.f32	s5, s12
 8002df8:	eeb0 0a66 	vmov.f32	s0, s13
 8002dfc:	eef0 0a47 	vmov.f32	s1, s14
 8002e00:	eeb0 1a67 	vmov.f32	s2, s15
 8002e04:	f7ff fe04 	bl	8002a10 <FusionVectorSubtract>
 8002e08:	eef0 6a40 	vmov.f32	s13, s0
 8002e0c:	eeb0 7a60 	vmov.f32	s14, s1
 8002e10:	eef0 7a41 	vmov.f32	s15, s2
 8002e14:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8002e18:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8002e1c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002e20:	ed97 5a08 	vldr	s10, [r7, #32]
 8002e24:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8002e28:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002e2c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002e30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e34:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e38:	eef0 1a45 	vmov.f32	s3, s10
 8002e3c:	eeb0 2a65 	vmov.f32	s4, s11
 8002e40:	eef0 2a46 	vmov.f32	s5, s12
 8002e44:	eeb0 0a66 	vmov.f32	s0, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e50:	f7ff fe2c 	bl	8002aac <FusionVectorHadamardProduct>
 8002e54:	eef0 6a40 	vmov.f32	s13, s0
 8002e58:	eeb0 7a60 	vmov.f32	s14, s1
 8002e5c:	eef0 7a41 	vmov.f32	s15, s2
 8002e60:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8002e64:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8002e68:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8002e6c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002e70:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e78:	466d      	mov	r5, sp
 8002e7a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	602b      	str	r3, [r5, #0]
 8002e86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e8c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e90:	eef0 0a47 	vmov.f32	s1, s14
 8002e94:	eeb0 1a67 	vmov.f32	s2, s15
 8002e98:	f7ff fe56 	bl	8002b48 <FusionMatrixMultiplyVector>
 8002e9c:	eef0 6a40 	vmov.f32	s13, s0
 8002ea0:	eeb0 7a60 	vmov.f32	s14, s1
 8002ea4:	eef0 7a41 	vmov.f32	s15, s2
 8002ea8:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8002eac:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8002eb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	ee06 1a90 	vmov	s13, r1
 8002ebe:	ee07 2a10 	vmov	s14, r2
 8002ec2:	ee07 3a90 	vmov	s15, r3
}
 8002ec6:	eeb0 0a66 	vmov.f32	s0, s13
 8002eca:	eef0 0a47 	vmov.f32	s1, s14
 8002ece:	eeb0 1a67 	vmov.f32	s2, s15
 8002ed2:	3760      	adds	r7, #96	; 0x60
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002eda:	b004      	add	sp, #16
 8002edc:	4770      	bx	lr

08002ede <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 8002ede:	b084      	sub	sp, #16
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b096      	sub	sp, #88	; 0x58
 8002ee4:	af06      	add	r7, sp, #24
 8002ee6:	eeb0 5a40 	vmov.f32	s10, s0
 8002eea:	eef0 5a60 	vmov.f32	s11, s1
 8002eee:	eeb0 6a41 	vmov.f32	s12, s2
 8002ef2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002efa:	eef0 6a61 	vmov.f32	s13, s3
 8002efe:	eeb0 7a42 	vmov.f32	s14, s4
 8002f02:	eef0 7a62 	vmov.f32	s15, s5
 8002f06:	ed87 5a07 	vstr	s10, [r7, #28]
 8002f0a:	edc7 5a08 	vstr	s11, [r7, #32]
 8002f0e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002f12:	edc7 6a04 	vstr	s13, [r7, #16]
 8002f16:	ed87 7a05 	vstr	s14, [r7, #20]
 8002f1a:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionMatrixMultiplyVector(softIronMatrix, FusionVectorSubtract(uncalibrated, hardIronOffset));
 8002f1e:	ed97 5a04 	vldr	s10, [r7, #16]
 8002f22:	edd7 5a05 	vldr	s11, [r7, #20]
 8002f26:	ed97 6a06 	vldr	s12, [r7, #24]
 8002f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f36:	eef0 1a45 	vmov.f32	s3, s10
 8002f3a:	eeb0 2a65 	vmov.f32	s4, s11
 8002f3e:	eef0 2a46 	vmov.f32	s5, s12
 8002f42:	eeb0 0a66 	vmov.f32	s0, s13
 8002f46:	eef0 0a47 	vmov.f32	s1, s14
 8002f4a:	eeb0 1a67 	vmov.f32	s2, s15
 8002f4e:	f7ff fd5f 	bl	8002a10 <FusionVectorSubtract>
 8002f52:	eef0 6a40 	vmov.f32	s13, s0
 8002f56:	eeb0 7a60 	vmov.f32	s14, s1
 8002f5a:	eef0 7a41 	vmov.f32	s15, s2
 8002f5e:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8002f62:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002f66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002f6a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002f6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f76:	466d      	mov	r5, sp
 8002f78:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8002f8e:	eef0 0a47 	vmov.f32	s1, s14
 8002f92:	eeb0 1a67 	vmov.f32	s2, s15
 8002f96:	f7ff fdd7 	bl	8002b48 <FusionMatrixMultiplyVector>
 8002f9a:	eef0 6a40 	vmov.f32	s13, s0
 8002f9e:	eeb0 7a60 	vmov.f32	s14, s1
 8002fa2:	eef0 7a41 	vmov.f32	s15, s2
 8002fa6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002faa:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002fae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	ee06 1a90 	vmov	s13, r1
 8002fbc:	ee07 2a10 	vmov	s14, r2
 8002fc0:	ee07 3a90 	vmov	s15, r3
}
 8002fc4:	eeb0 0a66 	vmov.f32	s0, s13
 8002fc8:	eef0 0a47 	vmov.f32	s1, s14
 8002fcc:	eeb0 1a67 	vmov.f32	s2, s15
 8002fd0:	3740      	adds	r7, #64	; 0x40
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002fd8:	b004      	add	sp, #16
 8002fda:	4770      	bx	lr
 8002fdc:	0000      	movs	r0, r0
	...

08002fe0 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	b0e5      	sub	sp, #404	; 0x194
 8002fe4:	af06      	add	r7, sp, #24
 8002fe6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002fea:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002fee:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002ff0:	23c8      	movs	r3, #200	; 0xc8
 8002ff2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ffa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	bool Recalibrate = false;
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

	// Low Pass Filters
	LPF GyroLPF[3];

	GyroLPF[0].T = 1.0 / xFrequency;
 800300c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003010:	f7fd faa0 	bl	8000554 <__aeabi_ui2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	49cc      	ldr	r1, [pc, #816]	; (8003350 <TaskSensorData+0x370>)
 800301e:	f7fd fc3d 	bl	800089c <__aeabi_ddiv>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fe05 	bl	8000c38 <__aeabi_d2f>
 800302e:	4603      	mov	r3, r0
 8003030:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	GyroLPF[0].f_cutoff = 40;
 8003034:	4bc7      	ldr	r3, [pc, #796]	; (8003354 <TaskSensorData+0x374>)
 8003036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	LPF_Init(&(GyroLPF[0]));
 800303a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fbc5 	bl	80017ce <LPF_Init>

	GyroLPF[1].T = 1.0 / xFrequency;
 8003044:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003048:	f7fd fa84 	bl	8000554 <__aeabi_ui2d>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	49be      	ldr	r1, [pc, #760]	; (8003350 <TaskSensorData+0x370>)
 8003056:	f7fd fc21 	bl	800089c <__aeabi_ddiv>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fde9 	bl	8000c38 <__aeabi_d2f>
 8003066:	4603      	mov	r3, r0
 8003068:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	GyroLPF[1].f_cutoff = 40;
 800306c:	4bb9      	ldr	r3, [pc, #740]	; (8003354 <TaskSensorData+0x374>)
 800306e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	LPF_Init(&(GyroLPF[1]));
 8003072:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003076:	331c      	adds	r3, #28
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fba8 	bl	80017ce <LPF_Init>

	GyroLPF[2].T = 1.0 / xFrequency;
 800307e:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003082:	f7fd fa67 	bl	8000554 <__aeabi_ui2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	49b0      	ldr	r1, [pc, #704]	; (8003350 <TaskSensorData+0x370>)
 8003090:	f7fd fc04 	bl	800089c <__aeabi_ddiv>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd fdcc 	bl	8000c38 <__aeabi_d2f>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	GyroLPF[2].f_cutoff = 40;
 80030a6:	4bab      	ldr	r3, [pc, #684]	; (8003354 <TaskSensorData+0x374>)
 80030a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	LPF_Init(&(GyroLPF[2]));
 80030ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030b0:	3338      	adds	r3, #56	; 0x38
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fb8b 	bl	80017ce <LPF_Init>
	// Fusion algorithm

	// Define calibration (replace with actual calibration data if available)
	const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector gyroscopeOffset = {0.0f, 0.0f, 0.0f};
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector accelerometerOffset = {0.0f, 0.0f, 0.0f};
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	// Initialize
	FusionOffset offset;
	FusionAhrs ahrs;

	FusionOffsetInitialise(&offset, xFrequency);
 8003100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003104:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003108:	4618      	mov	r0, r3
 800310a:	f005 fc6b 	bl	80089e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 800310e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fc04 	bl	8007920 <FusionAhrsInitialise>

	// Set AHRS algorithm settings
	FusionAhrsSettings fusionSettings;
	fusionSettings.convention = FusionConventionNwu;
 8003118:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800311c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
	fusionSettings.gain = 0.5f;
 8003124:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800312c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003130:	605a      	str	r2, [r3, #4]
	fusionSettings.gyroscopeRange = 2000.0f;
 8003132:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003136:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800313a:	4a87      	ldr	r2, [pc, #540]	; (8003358 <TaskSensorData+0x378>)
 800313c:	609a      	str	r2, [r3, #8]
	fusionSettings.accelerationRejection = 10.0f;
 800313e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003142:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003146:	4a85      	ldr	r2, [pc, #532]	; (800335c <TaskSensorData+0x37c>)
 8003148:	60da      	str	r2, [r3, #12]
	fusionSettings.magneticRejection = 10.0f;
 800314a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800314e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003152:	4a82      	ldr	r2, [pc, #520]	; (800335c <TaskSensorData+0x37c>)
 8003154:	611a      	str	r2, [r3, #16]
	fusionSettings.recoveryTriggerPeriod = 5.0f * xFrequency;
 8003156:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316e:	ee17 2a90 	vmov	r2, s15
 8003172:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003176:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800317a:	615a      	str	r2, [r3, #20]
	FusionAhrsSetSettings(&ahrs, &fusionSettings);
 800317c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003180:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fc4c 	bl	8007a24 <FusionAhrsSetSettings>



	xLastWakeTime = xTaskGetTickCount();
 800318c:	f00f ffda 	bl	8013144 <xTaskGetTickCount>
 8003190:	4603      	mov	r3, r0
 8003192:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003196:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800319a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800319e:	4618      	mov	r0, r3
 80031a0:	f00f fdfc 	bl	8012d9c <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80031a4:	f00f ffce 	bl	8013144 <xTaskGetTickCount>
 80031a8:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

		// IMU Data
		if (IsImuAvailable)
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <TaskSensorData+0x380>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 808c 	beq.w	80032ce <TaskSensorData+0x2ee>
		{
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80031b6:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <TaskSensorData+0x384>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f04f 31ff 	mov.w	r1, #4294967295
 80031be:	4618      	mov	r0, r3
 80031c0:	f00e fc28 	bl	8011a14 <osMutexWait>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <TaskSensorData+0x1fc>
			{
				if (SWC > 990)
 80031ca:	4b67      	ldr	r3, [pc, #412]	; (8003368 <TaskSensorData+0x388>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f240 32de 	movw	r2, #990	; 0x3de
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d902      	bls.n	80031dc <TaskSensorData+0x1fc>
					Recalibrate = true;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			}
			osMutexRelease(RemoteDataMutexHandle);
 80031dc:	4b61      	ldr	r3, [pc, #388]	; (8003364 <TaskSensorData+0x384>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00e fc65 	bl	8011ab0 <osMutexRelease>

			MPU_readProcessedData(&hspi2, &MPU9250);
 80031e6:	4961      	ldr	r1, [pc, #388]	; (800336c <TaskSensorData+0x38c>)
 80031e8:	4861      	ldr	r0, [pc, #388]	; (8003370 <TaskSensorData+0x390>)
 80031ea:	f007 f981 	bl	800a4f0 <MPU_readProcessedData>
			BMP280_measure(&BMP280);
 80031ee:	4861      	ldr	r0, [pc, #388]	; (8003374 <TaskSensorData+0x394>)
 80031f0:	f006 f9ee 	bl	80095d0 <BMP280_measure>

			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80031f4:	4b60      	ldr	r3, [pc, #384]	; (8003378 <TaskSensorData+0x398>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00e fc09 	bl	8011a14 <osMutexWait>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d15d      	bne.n	80032c4 <TaskSensorData+0x2e4>
			{
				if (Recalibrate)
 8003208:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <TaskSensorData+0x24e>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	2210      	movs	r2, #16
 8003216:	4959      	ldr	r1, [pc, #356]	; (800337c <TaskSensorData+0x39c>)
 8003218:	4859      	ldr	r0, [pc, #356]	; (8003380 <TaskSensorData+0x3a0>)
 800321a:	f00c fec7 	bl	800ffac <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 800321e:	2214      	movs	r2, #20
 8003220:	4952      	ldr	r1, [pc, #328]	; (800336c <TaskSensorData+0x38c>)
 8003222:	4853      	ldr	r0, [pc, #332]	; (8003370 <TaskSensorData+0x390>)
 8003224:	f006 ff69 	bl	800a0fa <MPU_calibrateGyro>

					Recalibrate = false;
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
				}

				AccData[0] = MPU9250.sensorData.ax;
 800322e:	4b4f      	ldr	r3, [pc, #316]	; (800336c <TaskSensorData+0x38c>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4a54      	ldr	r2, [pc, #336]	; (8003384 <TaskSensorData+0x3a4>)
 8003234:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8003236:	4b4d      	ldr	r3, [pc, #308]	; (800336c <TaskSensorData+0x38c>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a52      	ldr	r2, [pc, #328]	; (8003384 <TaskSensorData+0x3a4>)
 800323c:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <TaskSensorData+0x38c>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a50      	ldr	r2, [pc, #320]	; (8003384 <TaskSensorData+0x3a4>)
 8003244:	6093      	str	r3, [r2, #8]

				TempData = MPU9250.sensorData.temp;
 8003246:	4b49      	ldr	r3, [pc, #292]	; (800336c <TaskSensorData+0x38c>)
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	4a4f      	ldr	r2, [pc, #316]	; (8003388 <TaskSensorData+0x3a8>)
 800324c:	6013      	str	r3, [r2, #0]

				GyroData[0] = LPF_Calculate(&(GyroLPF[0]), MPU9250.sensorData.gx);
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <TaskSensorData+0x38c>)
 8003250:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003254:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fb43 	bl	80018e8 <LPF_Calculate>
 8003262:	eef0 7a40 	vmov.f32	s15, s0
 8003266:	4b49      	ldr	r3, [pc, #292]	; (800338c <TaskSensorData+0x3ac>)
 8003268:	edc3 7a00 	vstr	s15, [r3]
				GyroData[1] = LPF_Calculate(&(GyroLPF[1]), MPU9250.sensorData.gy);
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <TaskSensorData+0x38c>)
 800326e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003272:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003276:	331c      	adds	r3, #28
 8003278:	eeb0 0a67 	vmov.f32	s0, s15
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fb33 	bl	80018e8 <LPF_Calculate>
 8003282:	eef0 7a40 	vmov.f32	s15, s0
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <TaskSensorData+0x3ac>)
 8003288:	edc3 7a01 	vstr	s15, [r3, #4]
				GyroData[2] = LPF_Calculate(&(GyroLPF[2]), MPU9250.sensorData.gz);
 800328c:	4b37      	ldr	r3, [pc, #220]	; (800336c <TaskSensorData+0x38c>)
 800328e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003292:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003296:	3338      	adds	r3, #56	; 0x38
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fb23 	bl	80018e8 <LPF_Calculate>
 80032a2:	eef0 7a40 	vmov.f32	s15, s0
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <TaskSensorData+0x3ac>)
 80032a8:	edc3 7a02 	vstr	s15, [r3, #8]

				BMP_Temp = BMP280.measurement.temperature;
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <TaskSensorData+0x394>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a37      	ldr	r2, [pc, #220]	; (8003390 <TaskSensorData+0x3b0>)
 80032b2:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <TaskSensorData+0x394>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4a36      	ldr	r2, [pc, #216]	; (8003394 <TaskSensorData+0x3b4>)
 80032ba:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <TaskSensorData+0x394>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <TaskSensorData+0x3b8>)
 80032c2:	6013      	str	r3, [r2, #0]

			}
			osMutexRelease(ImuMutexHandle);
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <TaskSensorData+0x398>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00e fbf1 	bl	8011ab0 <osMutexRelease>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <TaskSensorData+0x3bc>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 813f 	beq.w	8003556 <TaskSensorData+0x576>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <TaskSensorData+0x3c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	4618      	mov	r0, r3
 80032e2:	f00e fb97 	bl	8011a14 <osMutexWait>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 812f 	bne.w	800354c <TaskSensorData+0x56c>
			{
				struct Vector res = HMC5883L_readRaw();
 80032ee:	f005 fe51 	bl	8008f94 <HMC5883L_readRaw>
 80032f2:	eef0 6a40 	vmov.f32	s13, s0
 80032f6:	eeb0 7a60 	vmov.f32	s14, s1
 80032fa:	eef0 7a41 	vmov.f32	s15, s2
 80032fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003302:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003306:	edc3 6a00 	vstr	s13, [r3]
 800330a:	ed83 7a01 	vstr	s14, [r3, #4]
 800330e:	edc3 7a02 	vstr	s15, [r3, #8]
				MAG_X_RAW = res.XAxis;
 8003312:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003316:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <TaskSensorData+0x3c4>)
 800331e:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8003320:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003324:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <TaskSensorData+0x3c8>)
 800332c:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 800332e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003332:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <TaskSensorData+0x3cc>)
 800333a:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <TaskSensorData+0x3c8>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	f000 8099 	beq.w	8003480 <TaskSensorData+0x4a0>
 800334e:	e02f      	b.n	80033b0 <TaskSensorData+0x3d0>
 8003350:	3ff00000 	.word	0x3ff00000
 8003354:	42200000 	.word	0x42200000
 8003358:	44fa0000 	.word	0x44fa0000
 800335c:	41200000 	.word	0x41200000
 8003360:	20000214 	.word	0x20000214
 8003364:	20000d90 	.word	0x20000d90
 8003368:	2000037e 	.word	0x2000037e
 800336c:	20000388 	.word	0x20000388
 8003370:	20000a7c 	.word	0x20000a7c
 8003374:	20000430 	.word	0x20000430
 8003378:	20000d94 	.word	0x20000d94
 800337c:	0801bb60 	.word	0x0801bb60
 8003380:	20000c88 	.word	0x20000c88
 8003384:	200003fc 	.word	0x200003fc
 8003388:	20000408 	.word	0x20000408
 800338c:	2000040c 	.word	0x2000040c
 8003390:	20000460 	.word	0x20000460
 8003394:	20000464 	.word	0x20000464
 8003398:	20000468 	.word	0x20000468
 800339c:	20000215 	.word	0x20000215
 80033a0:	20000d8c 	.word	0x20000d8c
 80033a4:	20000484 	.word	0x20000484
 80033a8:	20000488 	.word	0x20000488
 80033ac:	2000048c 	.word	0x2000048c
				{
					if (MAG_Y_RAW > 0)
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <TaskSensorData+0x4e0>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd2b      	ble.n	8003418 <TaskSensorData+0x438>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <TaskSensorData+0x4e4>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <TaskSensorData+0x4e0>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	f016 f930 	bl	8019638 <atan2f>
 80033d8:	eef0 7a40 	vmov.f32	s15, s0
 80033dc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80034c8 <TaskSensorData+0x4e8>
 80033e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e4:	ee17 0a90 	vmov	r0, s15
 80033e8:	f7fd f8d6 	bl	8000598 <__aeabi_f2d>
 80033ec:	a330      	add	r3, pc, #192	; (adr r3, 80034b0 <TaskSensorData+0x4d0>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f7fd fa53 	bl	800089c <__aeabi_ddiv>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	4933      	ldr	r1, [pc, #204]	; (80034cc <TaskSensorData+0x4ec>)
 8003400:	f7fc ff6a 	bl	80002d8 <__aeabi_dsub>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fc14 	bl	8000c38 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
 8003412:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <TaskSensorData+0x4f0>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e068      	b.n	80034ea <TaskSensorData+0x50a>
					else if (MAG_Y_RAW < 0)
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <TaskSensorData+0x4e0>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	d560      	bpl.n	80034ea <TaskSensorData+0x50a>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <TaskSensorData+0x4e4>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <TaskSensorData+0x4e0>)
 8003430:	ed93 7a00 	vldr	s14, [r3]
 8003434:	eef0 0a47 	vmov.f32	s1, s14
 8003438:	eeb0 0a67 	vmov.f32	s0, s15
 800343c:	f016 f8fc 	bl	8019638 <atan2f>
 8003440:	eef0 7a40 	vmov.f32	s15, s0
 8003444:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80034c8 <TaskSensorData+0x4e8>
 8003448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344c:	ee17 0a90 	vmov	r0, s15
 8003450:	f7fd f8a2 	bl	8000598 <__aeabi_f2d>
 8003454:	a316      	add	r3, pc, #88	; (adr r3, 80034b0 <TaskSensorData+0x4d0>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd fa1f 	bl	800089c <__aeabi_ddiv>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	a115      	add	r1, pc, #84	; (adr r1, 80034b8 <TaskSensorData+0x4d8>)
 8003464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003468:	f7fc ff36 	bl	80002d8 <__aeabi_dsub>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	f7fd fbe0 	bl	8000c38 <__aeabi_d2f>
 8003478:	4603      	mov	r3, r0
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <TaskSensorData+0x4f0>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e034      	b.n	80034ea <TaskSensorData+0x50a>
				}
				else if (MAG_Y_RAW == 0)
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <TaskSensorData+0x4e0>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eef5 7a40 	vcmp.f32	s15, #0.0
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	d12c      	bne.n	80034ea <TaskSensorData+0x50a>
				{
					if (MAG_X_RAW > 0)
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <TaskSensorData+0x4e4>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	dd19      	ble.n	80034d4 <TaskSensorData+0x4f4>
						MAG_dir = 0.0f;
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <TaskSensorData+0x4f0>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e01f      	b.n	80034ea <TaskSensorData+0x50a>
 80034aa:	bf00      	nop
 80034ac:	f3af 8000 	nop.w
 80034b0:	54442d18 	.word	0x54442d18
 80034b4:	400921fb 	.word	0x400921fb
 80034b8:	00000000 	.word	0x00000000
 80034bc:	4070e000 	.word	0x4070e000
 80034c0:	20000488 	.word	0x20000488
 80034c4:	20000484 	.word	0x20000484
 80034c8:	43340000 	.word	0x43340000
 80034cc:	40568000 	.word	0x40568000
 80034d0:	20000490 	.word	0x20000490
					else if (MAG_X_RAW < 0)
 80034d4:	4bd9      	ldr	r3, [pc, #868]	; (800383c <TaskSensorData+0x85c>)
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	d502      	bpl.n	80034ea <TaskSensorData+0x50a>
						MAG_dir = 180.0f;
 80034e4:	4bd6      	ldr	r3, [pc, #856]	; (8003840 <TaskSensorData+0x860>)
 80034e6:	4ad7      	ldr	r2, [pc, #860]	; (8003844 <TaskSensorData+0x864>)
 80034e8:	601a      	str	r2, [r3, #0]
				}

				MAG_dir += declination;
 80034ea:	4bd5      	ldr	r3, [pc, #852]	; (8003840 <TaskSensorData+0x860>)
 80034ec:	ed93 7a00 	vldr	s14, [r3]
 80034f0:	4bd5      	ldr	r3, [pc, #852]	; (8003848 <TaskSensorData+0x868>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	4bd1      	ldr	r3, [pc, #836]	; (8003840 <TaskSensorData+0x860>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8003500:	4bcf      	ldr	r3, [pc, #828]	; (8003840 <TaskSensorData+0x860>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	d509      	bpl.n	8003524 <TaskSensorData+0x544>
					MAG_dir += 360.0f;
 8003510:	4bcb      	ldr	r3, [pc, #812]	; (8003840 <TaskSensorData+0x860>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	ed9f 7acd 	vldr	s14, [pc, #820]	; 800384c <TaskSensorData+0x86c>
 800351a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800351e:	4bc8      	ldr	r3, [pc, #800]	; (8003840 <TaskSensorData+0x860>)
 8003520:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8003524:	4bc6      	ldr	r3, [pc, #792]	; (8003840 <TaskSensorData+0x860>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 800384c <TaskSensorData+0x86c>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	dd09      	ble.n	800354c <TaskSensorData+0x56c>
					MAG_dir -= 360.0f;
 8003538:	4bc1      	ldr	r3, [pc, #772]	; (8003840 <TaskSensorData+0x860>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800384c <TaskSensorData+0x86c>
 8003542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003546:	4bbe      	ldr	r3, [pc, #760]	; (8003840 <TaskSensorData+0x860>)
 8003548:	edc3 7a00 	vstr	s15, [r3]
			}
			osMutexRelease(MagnMutexHandle);
 800354c:	4bc0      	ldr	r3, [pc, #768]	; (8003850 <TaskSensorData+0x870>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f00e faad 	bl	8011ab0 <osMutexRelease>
		}

		// Calculate Fusion algorithm
		if ((osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8003556:	4bbf      	ldr	r3, [pc, #764]	; (8003854 <TaskSensorData+0x874>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f04f 31ff 	mov.w	r1, #4294967295
 800355e:	4618      	mov	r0, r3
 8003560:	f00e fa58 	bl	8011a14 <osMutexWait>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 81bf 	bne.w	80038ea <TaskSensorData+0x90a>
			&& (osMutexWait(MagnMutexHandle, osWaitForever) == osOK))
 800356c:	4bb8      	ldr	r3, [pc, #736]	; (8003850 <TaskSensorData+0x870>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	4618      	mov	r0, r3
 8003576:	f00e fa4d 	bl	8011a14 <osMutexWait>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 81b4 	bne.w	80038ea <TaskSensorData+0x90a>
		{
			// Acquire latest sensor data
			//const clock_t timestamp = clock(); // replace this with actual gyroscope timestamp

			FusionVector accelerometer = {AccData[0], AccData[1], AccData[2]}; // accelerometer data in g
 8003582:	4bb5      	ldr	r3, [pc, #724]	; (8003858 <TaskSensorData+0x878>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800358a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	4bb1      	ldr	r3, [pc, #708]	; (8003858 <TaskSensorData+0x878>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003598:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	4bae      	ldr	r3, [pc, #696]	; (8003858 <TaskSensorData+0x878>)
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035a6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80035aa:	609a      	str	r2, [r3, #8]
			FusionVector gyroscope = {GyroData[0], GyroData[1], GyroData[2]}; // gyroscope data in degrees/s
 80035ac:	4bab      	ldr	r3, [pc, #684]	; (800385c <TaskSensorData+0x87c>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4ba8      	ldr	r3, [pc, #672]	; (800385c <TaskSensorData+0x87c>)
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035c2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	4ba4      	ldr	r3, [pc, #656]	; (800385c <TaskSensorData+0x87c>)
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035d4:	609a      	str	r2, [r3, #8]
			FusionVector magnetometer = {MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW}; // magnetometer data in arbitrary units
 80035d6:	4b99      	ldr	r3, [pc, #612]	; (800383c <TaskSensorData+0x85c>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <TaskSensorData+0x880>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035ec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	4b9c      	ldr	r3, [pc, #624]	; (8003864 <TaskSensorData+0x884>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035fe:	609a      	str	r2, [r3, #8]

			// Apply run-time calibration
			gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 8003600:	edd7 3a3d 	vldr	s7, [r7, #244]	; 0xf4
 8003604:	ed97 4a3e 	vldr	s8, [r7, #248]	; 0xf8
 8003608:	edd7 4a3f 	vldr	s9, [r7, #252]	; 0xfc
 800360c:	4b96      	ldr	r3, [pc, #600]	; (8003868 <TaskSensorData+0x888>)
 800360e:	ed93 5a00 	vldr	s10, [r3]
 8003612:	edd3 5a01 	vldr	s11, [r3, #4]
 8003616:	ed93 6a02 	vldr	s12, [r3, #8]
 800361a:	4e94      	ldr	r6, [pc, #592]	; (800386c <TaskSensorData+0x88c>)
 800361c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003620:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003624:	edd3 6a00 	vldr	s13, [r3]
 8003628:	ed93 7a01 	vldr	s14, [r3, #4]
 800362c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003630:	466d      	mov	r5, sp
 8003632:	f106 0410 	add.w	r4, r6, #16
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003642:	eeb0 3a63 	vmov.f32	s6, s7
 8003646:	eef0 3a44 	vmov.f32	s7, s8
 800364a:	eeb0 4a64 	vmov.f32	s8, s9
 800364e:	eef0 1a45 	vmov.f32	s3, s10
 8003652:	eeb0 2a65 	vmov.f32	s4, s11
 8003656:	eef0 2a46 	vmov.f32	s5, s12
 800365a:	eeb0 0a66 	vmov.f32	s0, s13
 800365e:	eef0 0a47 	vmov.f32	s1, s14
 8003662:	eeb0 1a67 	vmov.f32	s2, s15
 8003666:	f7ff fb8d 	bl	8002d84 <FusionCalibrationInertial>
 800366a:	eef0 6a40 	vmov.f32	s13, s0
 800366e:	eeb0 7a60 	vmov.f32	s14, s1
 8003672:	eef0 7a41 	vmov.f32	s15, s2
 8003676:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800367a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800367e:	edc3 6a00 	vstr	s13, [r3]
 8003682:	ed83 7a01 	vstr	s14, [r3, #4]
 8003686:	edc3 7a02 	vstr	s15, [r3, #8]
			accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800368a:	edd7 3a3a 	vldr	s7, [r7, #232]	; 0xe8
 800368e:	ed97 4a3b 	vldr	s8, [r7, #236]	; 0xec
 8003692:	edd7 4a3c 	vldr	s9, [r7, #240]	; 0xf0
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <TaskSensorData+0x890>)
 8003698:	ed93 5a00 	vldr	s10, [r3]
 800369c:	edd3 5a01 	vldr	s11, [r3, #4]
 80036a0:	ed93 6a02 	vldr	s12, [r3, #8]
 80036a4:	4e73      	ldr	r6, [pc, #460]	; (8003874 <TaskSensorData+0x894>)
 80036a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80036aa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80036ae:	edd3 6a00 	vldr	s13, [r3]
 80036b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80036b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ba:	466d      	mov	r5, sp
 80036bc:	f106 0410 	add.w	r4, r6, #16
 80036c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036cc:	eeb0 3a63 	vmov.f32	s6, s7
 80036d0:	eef0 3a44 	vmov.f32	s7, s8
 80036d4:	eeb0 4a64 	vmov.f32	s8, s9
 80036d8:	eef0 1a45 	vmov.f32	s3, s10
 80036dc:	eeb0 2a65 	vmov.f32	s4, s11
 80036e0:	eef0 2a46 	vmov.f32	s5, s12
 80036e4:	eeb0 0a66 	vmov.f32	s0, s13
 80036e8:	eef0 0a47 	vmov.f32	s1, s14
 80036ec:	eeb0 1a67 	vmov.f32	s2, s15
 80036f0:	f7ff fb48 	bl	8002d84 <FusionCalibrationInertial>
 80036f4:	eef0 6a40 	vmov.f32	s13, s0
 80036f8:	eeb0 7a60 	vmov.f32	s14, s1
 80036fc:	eef0 7a41 	vmov.f32	s15, s2
 8003700:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003704:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003708:	edc3 6a00 	vstr	s13, [r3]
 800370c:	ed83 7a01 	vstr	s14, [r3, #4]
 8003710:	edc3 7a02 	vstr	s15, [r3, #8]
			magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 8003714:	ed97 5a37 	vldr	s10, [r7, #220]	; 0xdc
 8003718:	edd7 5a38 	vldr	s11, [r7, #224]	; 0xe0
 800371c:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 8003720:	4e55      	ldr	r6, [pc, #340]	; (8003878 <TaskSensorData+0x898>)
 8003722:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003726:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800372a:	edd3 6a00 	vldr	s13, [r3]
 800372e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003732:	edd3 7a02 	vldr	s15, [r3, #8]
 8003736:	466d      	mov	r5, sp
 8003738:	f106 0410 	add.w	r4, r6, #16
 800373c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003748:	eef0 1a45 	vmov.f32	s3, s10
 800374c:	eeb0 2a65 	vmov.f32	s4, s11
 8003750:	eef0 2a46 	vmov.f32	s5, s12
 8003754:	eeb0 0a66 	vmov.f32	s0, s13
 8003758:	eef0 0a47 	vmov.f32	s1, s14
 800375c:	eeb0 1a67 	vmov.f32	s2, s15
 8003760:	f7ff fbbd 	bl	8002ede <FusionCalibrationMagnetic>
 8003764:	eef0 6a40 	vmov.f32	s13, s0
 8003768:	eeb0 7a60 	vmov.f32	s14, s1
 800376c:	eef0 7a41 	vmov.f32	s15, s2
 8003770:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003774:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003778:	edc3 6a00 	vstr	s13, [r3]
 800377c:	ed83 7a01 	vstr	s14, [r3, #4]
 8003780:	edc3 7a02 	vstr	s15, [r3, #8]

			// Update gyroscope offset correction algorithm
			gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8003784:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003788:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800378c:	edd3 6a00 	vldr	s13, [r3]
 8003790:	ed93 7a01 	vldr	s14, [r3, #4]
 8003794:	edd3 7a02 	vldr	s15, [r3, #8]
 8003798:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800379c:	eeb0 0a66 	vmov.f32	s0, s13
 80037a0:	eef0 0a47 	vmov.f32	s1, s14
 80037a4:	eeb0 1a67 	vmov.f32	s2, s15
 80037a8:	4618      	mov	r0, r3
 80037aa:	f005 f94d 	bl	8008a48 <FusionOffsetUpdate>
 80037ae:	eef0 6a40 	vmov.f32	s13, s0
 80037b2:	eeb0 7a60 	vmov.f32	s14, s1
 80037b6:	eef0 7a41 	vmov.f32	s15, s2
 80037ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80037be:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037c2:	edc3 6a00 	vstr	s13, [r3]
 80037c6:	ed83 7a01 	vstr	s14, [r3, #4]
 80037ca:	edc3 7a02 	vstr	s15, [r3, #8]
			//static clock_t previousTimestamp;
			//const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
			//previousTimestamp = timestamp;

			// Update gyroscope AHRS algorithm
			FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, 1.0f / xFrequency);
 80037ce:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037de:	eec7 4a27 	vdiv.f32	s9, s14, s15
 80037e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80037e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037ea:	ed93 3a00 	vldr	s6, [r3]
 80037ee:	edd3 3a01 	vldr	s7, [r3, #4]
 80037f2:	ed93 4a02 	vldr	s8, [r3, #8]
 80037f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80037fa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80037fe:	ed93 5a00 	vldr	s10, [r3]
 8003802:	edd3 5a01 	vldr	s11, [r3, #4]
 8003806:	ed93 6a02 	vldr	s12, [r3, #8]
 800380a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800380e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003812:	edd3 6a00 	vldr	s13, [r3]
 8003816:	ed93 7a01 	vldr	s14, [r3, #4]
 800381a:	edd3 7a02 	vldr	s15, [r3, #8]
 800381e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003822:	eef0 1a45 	vmov.f32	s3, s10
 8003826:	eeb0 2a65 	vmov.f32	s4, s11
 800382a:	eef0 2a46 	vmov.f32	s5, s12
 800382e:	eeb0 0a66 	vmov.f32	s0, s13
 8003832:	eef0 0a47 	vmov.f32	s1, s14
 8003836:	eeb0 1a67 	vmov.f32	s2, s15
 800383a:	e01f      	b.n	800387c <TaskSensorData+0x89c>
 800383c:	20000484 	.word	0x20000484
 8003840:	20000490 	.word	0x20000490
 8003844:	43340000 	.word	0x43340000
 8003848:	20000004 	.word	0x20000004
 800384c:	43b40000 	.word	0x43b40000
 8003850:	20000d8c 	.word	0x20000d8c
 8003854:	20000d94 	.word	0x20000d94
 8003858:	200003fc 	.word	0x200003fc
 800385c:	2000040c 	.word	0x2000040c
 8003860:	20000488 	.word	0x20000488
 8003864:	2000048c 	.word	0x2000048c
 8003868:	0801be30 	.word	0x0801be30
 800386c:	0801be0c 	.word	0x0801be0c
 8003870:	0801be60 	.word	0x0801be60
 8003874:	0801be3c 	.word	0x0801be3c
 8003878:	0801be6c 	.word	0x0801be6c
 800387c:	4618      	mov	r0, r3
 800387e:	f004 f989 	bl	8007b94 <FusionAhrsUpdate>
			//FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, 1.0f / xFrequency);

			// Algorithm outputs
			Fusion_output = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f004 ffa8 	bl	80087dc <FusionAhrsGetQuaternion>
 800388c:	eeb0 6a40 	vmov.f32	s12, s0
 8003890:	eef0 6a60 	vmov.f32	s13, s1
 8003894:	eeb0 7a41 	vmov.f32	s14, s2
 8003898:	eef0 7a61 	vmov.f32	s15, s3
 800389c:	ed87 6a56 	vstr	s12, [r7, #344]	; 0x158
 80038a0:	edc7 6a57 	vstr	s13, [r7, #348]	; 0x15c
 80038a4:	ed87 7a58 	vstr	s14, [r7, #352]	; 0x160
 80038a8:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 80038ac:	ed97 6a56 	vldr	s12, [r7, #344]	; 0x158
 80038b0:	edd7 6a57 	vldr	s13, [r7, #348]	; 0x15c
 80038b4:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 80038b8:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80038bc:	eeb0 0a46 	vmov.f32	s0, s12
 80038c0:	eef0 0a66 	vmov.f32	s1, s13
 80038c4:	eeb0 1a47 	vmov.f32	s2, s14
 80038c8:	eef0 1a67 	vmov.f32	s3, s15
 80038cc:	f7ff f9b4 	bl	8002c38 <FusionQuaternionToEuler>
 80038d0:	eef0 6a40 	vmov.f32	s13, s0
 80038d4:	eeb0 7a60 	vmov.f32	s14, s1
 80038d8:	eef0 7a41 	vmov.f32	s15, s2
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <TaskSensorData+0xa00>)
 80038de:	edc3 6a00 	vstr	s13, [r3]
 80038e2:	ed83 7a01 	vstr	s14, [r3, #4]
 80038e6:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		osMutexRelease(ImuMutexHandle);
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <TaskSensorData+0xa04>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00e f8de 	bl	8011ab0 <osMutexRelease>
		osMutexRelease(MagnMutexHandle);
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <TaskSensorData+0xa08>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00e f8d9 	bl	8011ab0 <osMutexRelease>

		// Distance Data
		if (IsDistAvailable)
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <TaskSensorData+0xa0c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d034      	beq.n	8003970 <TaskSensorData+0x990>
		{
			if (!HCSR04.Triggered)
 8003906:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <TaskSensorData+0xa10>)
 8003908:	7d1b      	ldrb	r3, [r3, #20]
 800390a:	f083 0301 	eor.w	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <TaskSensorData+0x942>
			{
				HCSR04_Trigger(&HCSR04);
 8003914:	4836      	ldr	r0, [pc, #216]	; (80039f0 <TaskSensorData+0xa10>)
 8003916:	f007 f82d 	bl	800a974 <HCSR04_Trigger>
				HCSR04.Triggered = true;
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <TaskSensorData+0xa10>)
 800391c:	2201      	movs	r2, #1
 800391e:	751a      	strb	r2, [r3, #20]
 8003920:	e026      	b.n	8003970 <TaskSensorData+0x990>
			}
			else if (HCSR04.Triggered)
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <TaskSensorData+0xa10>)
 8003924:	7d1b      	ldrb	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d022      	beq.n	8003970 <TaskSensorData+0x990>
			{
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <TaskSensorData+0xa14>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f00e f925 	bl	8011b80 <osSemaphoreWait>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d119      	bne.n	8003970 <TaskSensorData+0x990>
				{
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <TaskSensorData+0xa18>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	4618      	mov	r0, r3
 8003946:	f00e f865 	bl	8011a14 <osMutexWait>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <TaskSensorData+0x980>
						Distance = HCSR04_Read(&HCSR04);
 8003950:	4827      	ldr	r0, [pc, #156]	; (80039f0 <TaskSensorData+0xa10>)
 8003952:	f007 f82a 	bl	800a9aa <HCSR04_Read>
 8003956:	eef0 7a40 	vmov.f32	s15, s0
 800395a:	4b28      	ldr	r3, [pc, #160]	; (80039fc <TaskSensorData+0xa1c>)
 800395c:	edc3 7a00 	vstr	s15, [r3]
					osMutexRelease(DistMutexHandle);
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <TaskSensorData+0xa18>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f00e f8a3 	bl	8011ab0 <osMutexRelease>

					HCSR04.Triggered = false;
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <TaskSensorData+0xa10>)
 800396c:	2200      	movs	r2, #0
 800396e:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <TaskSensorData+0xa20>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f43f ac0e 	beq.w	8003196 <TaskSensorData+0x1b6>
		{
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <TaskSensorData+0xa24>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f04f 31ff 	mov.w	r1, #4294967295
 8003982:	4618      	mov	r0, r3
 8003984:	f00e f8fc 	bl	8011b80 <osSemaphoreWait>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f ac03 	bne.w	8003196 <TaskSensorData+0x1b6>
			{
				if (ProcessGPSPackageBuffer)
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <TaskSensorData+0xa28>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f43f abfd 	beq.w	8003196 <TaskSensorData+0x1b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <TaskSensorData+0xa2c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00e f835 	bl	8011a14 <osMutexWait>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <TaskSensorData+0x9ec>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80039b0:	4817      	ldr	r0, [pc, #92]	; (8003a10 <TaskSensorData+0xa30>)
 80039b2:	f005 f91f 	bl	8008bf4 <GPS_validate>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <TaskSensorData+0x9e2>
							GPS_parse((char*) GPSPackageBuffer);
 80039bc:	4814      	ldr	r0, [pc, #80]	; (8003a10 <TaskSensorData+0xa30>)
 80039be:	f005 f97b 	bl	8008cb8 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	2100      	movs	r1, #0
 80039c6:	4812      	ldr	r0, [pc, #72]	; (8003a10 <TaskSensorData+0xa30>)
 80039c8:	f011 fd01 	bl	80153ce <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <TaskSensorData+0xa2c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00e f86d 	bl	8011ab0 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <TaskSensorData+0xa28>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
	{
 80039dc:	f7ff bbdb 	b.w	8003196 <TaskSensorData+0x1b6>
 80039e0:	20000424 	.word	0x20000424
 80039e4:	20000d94 	.word	0x20000d94
 80039e8:	20000d8c 	.word	0x20000d8c
 80039ec:	20000216 	.word	0x20000216
 80039f0:	20000494 	.word	0x20000494
 80039f4:	20000da8 	.word	0x20000da8
 80039f8:	20000d9c 	.word	0x20000d9c
 80039fc:	200004cc 	.word	0x200004cc
 8003a00:	20000217 	.word	0x20000217
 8003a04:	20000dac 	.word	0x20000dac
 8003a08:	200006cf 	.word	0x200006cf
 8003a0c:	20000d98 	.word	0x20000d98
 8003a10:	200005d0 	.word	0x200005d0

08003a14 <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0c4      	sub	sp, #272	; 0x110
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a22:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8003a24:	2364      	movs	r3, #100	; 0x64
 8003a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8003a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 8003a3a:	2374      	movs	r3, #116	; 0x74
 8003a3c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	SpiTuneData2[0] = (uint8_t)('u');
 8003a40:	2375      	movs	r3, #117	; 0x75
 8003a42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t LastValidTuningData[6];
	bool NewTuneCommand = false;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107


	// PID controllers to be tuned
	PIDController* PID_Ro = &DPID_Roll.outer;
 8003a4c:	4bb9      	ldr	r3, [pc, #740]	; (8003d34 <TaskTune+0x320>)
 8003a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	int16_t PID_Ro_ref_devided; // Calculated in every cycle
	float PID_Ro_ref_devided_float; // Needed only for single loop tuning
	float* PID_Ro_meas = &(Fusion_output.angle.roll);
 8003a52:	4bb9      	ldr	r3, [pc, #740]	; (8003d38 <TaskTune+0x324>)
 8003a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float* PID_Ro_out = &(PID_Ro->out);
 8003a58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a5c:	3340      	adds	r3, #64	; 0x40
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	PIDController* PID_Ri = &DPID_Roll.inner;
 8003a62:	4bb6      	ldr	r3, [pc, #728]	; (8003d3c <TaskTune+0x328>)
 8003a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float* PID_Ri_ref = &(PID_Ro->out);
 8003a68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a6c:	3340      	adds	r3, #64	; 0x40
 8003a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	//float* PID_Ri_ref = &(Fusion_output.angle.roll);
	float* PID_Ri_meas = GyroData;
 8003a72:	4bb3      	ldr	r3, [pc, #716]	; (8003d40 <TaskTune+0x32c>)
 8003a74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	//float* PID_Ri_meas = &Roll_measured;
	int16_t* PID_Ri_out = &Roll_controlled;
 8003a78:	4bb2      	ldr	r3, [pc, #712]	; (8003d44 <TaskTune+0x330>)
 8003a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	PIDController* PID_Po = &DPID_Pitch.outer;
 8003a7e:	4bb2      	ldr	r3, [pc, #712]	; (8003d48 <TaskTune+0x334>)
 8003a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int16_t PID_Po_ref_devided; // Calculated in every cycle
	float PID_Po_ref_devided_float; // Needed only for single loop tuning
	float* PID_Po_meas = &(Fusion_output.angle.pitch);
 8003a84:	4bb1      	ldr	r3, [pc, #708]	; (8003d4c <TaskTune+0x338>)
 8003a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float* PID_Po_out = &(PID_Po->out);
 8003a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a8e:	3340      	adds	r3, #64	; 0x40
 8003a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	PIDController* PID_Pi = &DPID_Pitch.inner;
 8003a94:	4bae      	ldr	r3, [pc, #696]	; (8003d50 <TaskTune+0x33c>)
 8003a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float* PID_Pi_ref = &(PID_Po->out);
 8003a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9e:	3340      	adds	r3, #64	; 0x40
 8003aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float* PID_Pi_meas = GyroData+1;
 8003aa4:	4bab      	ldr	r3, [pc, #684]	; (8003d54 <TaskTune+0x340>)
 8003aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int16_t* PID_Pi_out = &Pitch_controlled;
 8003aaa:	4bab      	ldr	r3, [pc, #684]	; (8003d58 <TaskTune+0x344>)
 8003aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	PIDController* PID_Y = &PID_Yaw;
 8003ab0:	4baa      	ldr	r3, [pc, #680]	; (8003d5c <TaskTune+0x348>)
 8003ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int16_t PID_Y_ref_devided; // Calculated in every cycle
	float* PID_Y_meas = GyroData+2;
 8003ab6:	4baa      	ldr	r3, [pc, #680]	; (8003d60 <TaskTune+0x34c>)
 8003ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int16_t* PID_Y_out = &Yaw_controlled;
 8003abc:	4ba9      	ldr	r3, [pc, #676]	; (8003d64 <TaskTune+0x350>)
 8003abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0


	xLastWakeTime = xTaskGetTickCount();
 8003ac2:	f00f fb3f 	bl	8013144 <xTaskGetTickCount>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ad0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f00f f961 	bl	8012d9c <vTaskDelayUntil>

		if (Tune)
 8003ada:	4ba3      	ldr	r3, [pc, #652]	; (8003d68 <TaskTune+0x354>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 81b8 	beq.w	8003e54 <TaskTune+0x440>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8003ae4:	4ba1      	ldr	r3, [pc, #644]	; (8003d6c <TaskTune+0x358>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aec:	4618      	mov	r0, r3
 8003aee:	f00d ff91 	bl	8011a14 <osMutexWait>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 819e 	bne.w	8003e36 <TaskTune+0x422>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8003afa:	4b9d      	ldr	r3, [pc, #628]	; (8003d70 <TaskTune+0x35c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f04f 31ff 	mov.w	r1, #4294967295
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00d ff86 	bl	8011a14 <osMutexWait>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 8193 	bne.w	8003e36 <TaskTune+0x422>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8003b10:	4b98      	ldr	r3, [pc, #608]	; (8003d74 <TaskTune+0x360>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00d ff7b 	bl	8011a14 <osMutexWait>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 8188 	bne.w	8003e36 <TaskTune+0x422>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID_Ro data
				//Gains
				FloatToUint8s(&(PID_Ro->Kp), SpiTuneData1, 1);
 8003b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b2a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fe01 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Ki), SpiTuneData1, 5);
 8003b36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003b40:	2205      	movs	r2, #5
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fdf8 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Kd), SpiTuneData1, 9);
 8003b48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003b52:	2209      	movs	r2, #9
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd fdef 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Ro_ref_devided = Roll_in / 25;
 8003b5a:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <TaskTune+0x364>)
 8003b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b60:	4a86      	ldr	r2, [pc, #536]	; (8003d7c <TaskTune+0x368>)
 8003b62:	fb82 1203 	smull	r1, r2, r2, r3
 8003b66:	10d2      	asrs	r2, r2, #3
 8003b68:	17db      	asrs	r3, r3, #31
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	847b      	strh	r3, [r7, #34]	; 0x22
				//PID_Ro_ref_devided = SWD / 70;
				Int16ToUint8s(&PID_Ro_ref_devided, SpiTuneData1, 13);
 8003b70:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003b74:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003b78:	220d      	movs	r2, #13
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fe14 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Ro_meas, SpiTuneData1, 15);
 8003b80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b84:	220f      	movs	r2, #15
 8003b86:	4619      	mov	r1, r3
 8003b88:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003b8c:	f7fd fdd4 	bl	8001738 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Ro_out, SpiTuneData1, 19);
 8003b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b94:	2213      	movs	r2, #19
 8003b96:	4619      	mov	r1, r3
 8003b98:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003b9c:	f7fd fdcc 	bl	8001738 <FloatToUint8s>


				// Pack PID_Ri data
				// Gains
				FloatToUint8s(&(PID_Ri->Kp), SpiTuneData1, 23);
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003ba8:	2217      	movs	r2, #23
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fdc4 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ri->Ki), SpiTuneData1, 27);
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003bba:	221b      	movs	r2, #27
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fdbb 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Ri->Kd), SpiTuneData1, 31);
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003bcc:	221f      	movs	r2, #31
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fdb2 	bl	8001738 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <TaskTune+0x36c>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <TaskTune+0x200>
				{
					PID_Ro_ref_devided_float = Roll_in / 10.0;
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <TaskTune+0x364>)
 8003bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fcc6 	bl	8000574 <__aeabi_i2d>
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <TaskTune+0x370>)
 8003bee:	f7fc fe55 	bl	800089c <__aeabi_ddiv>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f7fd f81d 	bl	8000c38 <__aeabi_d2f>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	61fb      	str	r3, [r7, #28]
					FloatToUint8s(&PID_Ro_ref_devided_float, SpiTuneData1, 35);
 8003c02:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c06:	f107 031c 	add.w	r3, r7, #28
 8003c0a:	2223      	movs	r2, #35	; 0x23
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd fd93 	bl	8001738 <FloatToUint8s>
 8003c12:	e007      	b.n	8003c24 <TaskTune+0x210>
				}
				else
					FloatToUint8s(PID_Ri_ref, SpiTuneData1, 35);
 8003c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c18:	2223      	movs	r2, #35	; 0x23
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8003c20:	f7fd fd8a 	bl	8001738 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Ri_meas, SpiTuneData1, 39);
 8003c24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c28:	2227      	movs	r2, #39	; 0x27
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003c30:	f7fd fd82 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Ri_out, SpiTuneData1, 43);
 8003c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c38:	222b      	movs	r2, #43	; 0x2b
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003c40:	f7fd fdb2 	bl	80017a8 <Int16ToUint8s>


				// Pack PID_Po data
				//Gains
				FloatToUint8s(&(PID_Po->Kp), SpiTuneData2, 1);
 8003c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c48:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fd72 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Ki), SpiTuneData2, 5);
 8003c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c58:	3304      	adds	r3, #4
 8003c5a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c5e:	2205      	movs	r2, #5
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd fd69 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Kd), SpiTuneData2, 9);
 8003c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c70:	2209      	movs	r2, #9
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fd60 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Po_ref_devided = Pitch_in / 25;
 8003c78:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <TaskTune+0x374>)
 8003c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <TaskTune+0x368>)
 8003c80:	fb82 1203 	smull	r1, r2, r2, r3
 8003c84:	10d2      	asrs	r2, r2, #3
 8003c86:	17db      	asrs	r3, r3, #31
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	b21b      	sxth	r3, r3
 8003c8c:	837b      	strh	r3, [r7, #26]
				Int16ToUint8s(&PID_Po_ref_devided, SpiTuneData2, 13);
 8003c8e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c92:	f107 031a 	add.w	r3, r7, #26
 8003c96:	220d      	movs	r2, #13
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd fd85 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Po_meas, SpiTuneData2, 15);
 8003c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003caa:	f7fd fd45 	bl	8001738 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Po_out, SpiTuneData2, 19);
 8003cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cb2:	2213      	movs	r2, #19
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003cba:	f7fd fd3d 	bl	8001738 <FloatToUint8s>


				// Pack PID_Pi data
				// Gains
				FloatToUint8s(&(PID_Pi->Kp), SpiTuneData2, 23);
 8003cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cc2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003cc6:	2217      	movs	r2, #23
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fd35 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Pi->Ki), SpiTuneData2, 27);
 8003cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003cd8:	221b      	movs	r2, #27
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fd2c 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Pi->Kd), SpiTuneData2, 31);
 8003ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003cea:	221f      	movs	r2, #31
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fd23 	bl	8001738 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <TaskTune+0x36c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d048      	beq.n	8003d8c <TaskTune+0x378>
				{
					PID_Po_ref_devided_float = Pitch_in / 10.0;
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <TaskTune+0x374>)
 8003cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fc37 	bl	8000574 <__aeabi_i2d>
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <TaskTune+0x370>)
 8003d0c:	f7fc fdc6 	bl	800089c <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	f7fc ff8e 	bl	8000c38 <__aeabi_d2f>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	617b      	str	r3, [r7, #20]
					FloatToUint8s(&PID_Po_ref_devided_float, SpiTuneData2, 35);
 8003d20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	2223      	movs	r2, #35	; 0x23
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fd04 	bl	8001738 <FloatToUint8s>
 8003d30:	e034      	b.n	8003d9c <TaskTune+0x388>
 8003d32:	bf00      	nop
 8003d34:	2000025c 	.word	0x2000025c
 8003d38:	20000424 	.word	0x20000424
 8003d3c:	20000218 	.word	0x20000218
 8003d40:	2000040c 	.word	0x2000040c
 8003d44:	20000370 	.word	0x20000370
 8003d48:	200002e4 	.word	0x200002e4
 8003d4c:	20000428 	.word	0x20000428
 8003d50:	200002a0 	.word	0x200002a0
 8003d54:	20000410 	.word	0x20000410
 8003d58:	20000374 	.word	0x20000374
 8003d5c:	20000328 	.word	0x20000328
 8003d60:	20000414 	.word	0x20000414
 8003d64:	20000378 	.word	0x20000378
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	20000da4 	.word	0x20000da4
 8003d70:	20000d94 	.word	0x20000d94
 8003d74:	20000d90 	.word	0x20000d90
 8003d78:	2000036e 	.word	0x2000036e
 8003d7c:	51eb851f 	.word	0x51eb851f
 8003d80:	2000020d 	.word	0x2000020d
 8003d84:	40240000 	.word	0x40240000
 8003d88:	20000372 	.word	0x20000372
				}
				else
					FloatToUint8s(PID_Pi_ref, SpiTuneData2, 35);
 8003d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d90:	2223      	movs	r2, #35	; 0x23
 8003d92:	4619      	mov	r1, r3
 8003d94:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003d98:	f7fd fcce 	bl	8001738 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Pi_meas, SpiTuneData2, 39);
 8003d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003da0:	2227      	movs	r2, #39	; 0x27
 8003da2:	4619      	mov	r1, r3
 8003da4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003da8:	f7fd fcc6 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Pi_out, SpiTuneData2, 43);
 8003dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db0:	222b      	movs	r2, #43	; 0x2b
 8003db2:	4619      	mov	r1, r3
 8003db4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8003db8:	f7fd fcf6 	bl	80017a8 <Int16ToUint8s>


				// Pack PID_Y data
				// Gains
				FloatToUint8s(&(PID_Y->Kp), SpiTuneData1, 45);
 8003dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dc0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003dc4:	222d      	movs	r2, #45	; 0x2d
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fcb6 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Ki), SpiTuneData1, 49);
 8003dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003dd6:	2231      	movs	r2, #49	; 0x31
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fd fcad 	bl	8001738 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Kd), SpiTuneData1, 53);
 8003dde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003de2:	3308      	adds	r3, #8
 8003de4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003de8:	2235      	movs	r2, #53	; 0x35
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fca4 	bl	8001738 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Y_ref_devided = Yaw_in / 10;
 8003df0:	4b9f      	ldr	r3, [pc, #636]	; (8004070 <TaskTune+0x65c>)
 8003df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df6:	4a9f      	ldr	r2, [pc, #636]	; (8004074 <TaskTune+0x660>)
 8003df8:	fb82 1203 	smull	r1, r2, r2, r3
 8003dfc:	1092      	asrs	r2, r2, #2
 8003dfe:	17db      	asrs	r3, r3, #31
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	827b      	strh	r3, [r7, #18]
				Int16ToUint8s(&PID_Y_ref_devided, SpiTuneData2, 45);
 8003e06:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003e0a:	f107 0312 	add.w	r3, r7, #18
 8003e0e:	222d      	movs	r2, #45	; 0x2d
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fcc9 	bl	80017a8 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Y_meas, SpiTuneData2, 47);
 8003e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e1a:	222f      	movs	r2, #47	; 0x2f
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003e22:	f7fd fc89 	bl	8001738 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Y_out, SpiTuneData2, 51);
 8003e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2a:	2233      	movs	r2, #51	; 0x33
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003e32:	f7fd fcb9 	bl	80017a8 <Int16ToUint8s>

			}
			osMutexRelease(ControllerMutexHandle);
 8003e36:	4b90      	ldr	r3, [pc, #576]	; (8004078 <TaskTune+0x664>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00d fe38 	bl	8011ab0 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8003e40:	4b8e      	ldr	r3, [pc, #568]	; (800407c <TaskTune+0x668>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00d fe33 	bl	8011ab0 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <TaskTune+0x66c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00d fe2e 	bl	8011ab0 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003e54:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	4a88      	ldr	r2, [pc, #544]	; (8004084 <TaskTune+0x670>)
 8003e62:	4889      	ldr	r0, [pc, #548]	; (8004088 <TaskTune+0x674>)
 8003e64:	f009 fe5b 	bl	800db1e <HAL_SPI_TransmitReceive>
		osDelay(5);
 8003e68:	2005      	movs	r0, #5
 8003e6a:	f00d fda6 	bl	80119ba <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003e6e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2340      	movs	r3, #64	; 0x40
 8003e7a:	4a82      	ldr	r2, [pc, #520]	; (8004084 <TaskTune+0x670>)
 8003e7c:	4882      	ldr	r0, [pc, #520]	; (8004088 <TaskTune+0x674>)
 8003e7e:	f009 fe4e 	bl	800db1e <HAL_SPI_TransmitReceive>



		// Check if any new valid command has arrived
		if (Spi1Buffer[1] != 0)
 8003e82:	4b80      	ldr	r3, [pc, #512]	; (8004084 <TaskTune+0x670>)
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01f      	beq.n	8003ecc <TaskTune+0x4b8>
		{
			for (int i = 0; i < 6; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e92:	e017      	b.n	8003ec4 <TaskTune+0x4b0>
			{
				if (LastValidTuningData[i] == Spi1Buffer[i+1])
 8003e94:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003e98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4977      	ldr	r1, [pc, #476]	; (8004084 <TaskTune+0x670>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d003      	beq.n	8003eb8 <TaskTune+0x4a4>
					continue;
				else
				{
					NewTuneCommand = true;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
					break;
 8003eb6:	e009      	b.n	8003ecc <TaskTune+0x4b8>
					continue;
 8003eb8:	bf00      	nop
			for (int i = 0; i < 6; i++)
 8003eba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ec4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	dde3      	ble.n	8003e94 <TaskTune+0x480>
				}
			}
		}

		// If any new tuning command has arrived
		if (NewTuneCommand)
 8003ecc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f43f adfb 	beq.w	8003acc <TaskTune+0xb8>
		{
			// Tune controllers based on the received data
			float float_value = 0;
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
			FloatFromUint8s(Spi1Buffer, 3, &float_value);
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	4867      	ldr	r0, [pc, #412]	; (8004084 <TaskTune+0x670>)
 8003ee6:	f7fd fc39 	bl	800175c <FloatFromUint8s>

			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <TaskTune+0x664>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f00d fd8e 	bl	8011a14 <osMutexWait>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 80af 	bne.w	800405e <TaskTune+0x64a>
			{
				if (Spi1Buffer[1] == 1) // PID_Ro
 8003f00:	4b60      	ldr	r3, [pc, #384]	; (8004084 <TaskTune+0x670>)
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d11e      	bne.n	8003f48 <TaskTune+0x534>
				{
					if (Spi1Buffer[2] == 'p')
 8003f0a:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <TaskTune+0x670>)
 8003f0c:	789b      	ldrb	r3, [r3, #2]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d104      	bne.n	8003f1e <TaskTune+0x50a>
						PID_Ro->Kp = float_value;
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e09f      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'i')
 8003f1e:	4b59      	ldr	r3, [pc, #356]	; (8004084 <TaskTune+0x670>)
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b69      	cmp	r3, #105	; 0x69
 8003f26:	d104      	bne.n	8003f32 <TaskTune+0x51e>
						PID_Ro->Ki = float_value;
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	e095      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'd')
 8003f32:	4b54      	ldr	r3, [pc, #336]	; (8004084 <TaskTune+0x670>)
 8003f34:	789b      	ldrb	r3, [r3, #2]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	f040 8090 	bne.w	800405e <TaskTune+0x64a>
						PID_Ro->Kd = float_value;
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	e08a      	b.n	800405e <TaskTune+0x64a>
				}
				else if (Spi1Buffer[1] == 2) // PID_Ri
 8003f48:	4b4e      	ldr	r3, [pc, #312]	; (8004084 <TaskTune+0x670>)
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d11d      	bne.n	8003f8e <TaskTune+0x57a>
				{
					if (Spi1Buffer[2] == 'p')
 8003f52:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <TaskTune+0x670>)
 8003f54:	789b      	ldrb	r3, [r3, #2]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b70      	cmp	r3, #112	; 0x70
 8003f5a:	d104      	bne.n	8003f66 <TaskTune+0x552>
						PID_Ri->Kp = float_value;
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e07b      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'i')
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <TaskTune+0x670>)
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b69      	cmp	r3, #105	; 0x69
 8003f6e:	d104      	bne.n	8003f7a <TaskTune+0x566>
						PID_Ri->Ki = float_value;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	e071      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'd')
 8003f7a:	4b42      	ldr	r3, [pc, #264]	; (8004084 <TaskTune+0x670>)
 8003f7c:	789b      	ldrb	r3, [r3, #2]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b64      	cmp	r3, #100	; 0x64
 8003f82:	d16c      	bne.n	800405e <TaskTune+0x64a>
						PID_Ri->Kd = float_value;
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e067      	b.n	800405e <TaskTune+0x64a>
				}
				else if (Spi1Buffer[1] == 3) // PID_Po
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <TaskTune+0x670>)
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d11d      	bne.n	8003fd4 <TaskTune+0x5c0>
				{
					if (Spi1Buffer[2] == 'p')
 8003f98:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <TaskTune+0x670>)
 8003f9a:	789b      	ldrb	r3, [r3, #2]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b70      	cmp	r3, #112	; 0x70
 8003fa0:	d104      	bne.n	8003fac <TaskTune+0x598>
						PID_Po->Kp = float_value;
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e058      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'i')
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <TaskTune+0x670>)
 8003fae:	789b      	ldrb	r3, [r3, #2]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b69      	cmp	r3, #105	; 0x69
 8003fb4:	d104      	bne.n	8003fc0 <TaskTune+0x5ac>
						PID_Po->Ki = float_value;
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e04e      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'd')
 8003fc0:	4b30      	ldr	r3, [pc, #192]	; (8004084 <TaskTune+0x670>)
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d149      	bne.n	800405e <TaskTune+0x64a>
						PID_Po->Kd = float_value;
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	e044      	b.n	800405e <TaskTune+0x64a>
				}
				else if (Spi1Buffer[1] == 4) // PID_Pi
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <TaskTune+0x670>)
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d11d      	bne.n	800401a <TaskTune+0x606>
				{
					if (Spi1Buffer[2] == 'p')
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <TaskTune+0x670>)
 8003fe0:	789b      	ldrb	r3, [r3, #2]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d104      	bne.n	8003ff2 <TaskTune+0x5de>
						PID_Pi->Kp = float_value;
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e035      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'i')
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <TaskTune+0x670>)
 8003ff4:	789b      	ldrb	r3, [r3, #2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b69      	cmp	r3, #105	; 0x69
 8003ffa:	d104      	bne.n	8004006 <TaskTune+0x5f2>
						PID_Pi->Ki = float_value;
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	e02b      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'd')
 8004006:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <TaskTune+0x670>)
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b64      	cmp	r3, #100	; 0x64
 800400e:	d126      	bne.n	800405e <TaskTune+0x64a>
						PID_Pi->Kd = float_value;
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	e021      	b.n	800405e <TaskTune+0x64a>
				}
				else if (Spi1Buffer[1] == 5) // PID_Y
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <TaskTune+0x670>)
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b05      	cmp	r3, #5
 8004022:	d11c      	bne.n	800405e <TaskTune+0x64a>
				{
					if (Spi1Buffer[2] == 'p')
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <TaskTune+0x670>)
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b70      	cmp	r3, #112	; 0x70
 800402c:	d104      	bne.n	8004038 <TaskTune+0x624>
						PID_Y->Kp = float_value;
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e012      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'i')
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <TaskTune+0x670>)
 800403a:	789b      	ldrb	r3, [r3, #2]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b69      	cmp	r3, #105	; 0x69
 8004040:	d104      	bne.n	800404c <TaskTune+0x638>
						PID_Y->Ki = float_value;
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	e008      	b.n	800405e <TaskTune+0x64a>
					else if (Spi1Buffer[2] == 'd')
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <TaskTune+0x670>)
 800404e:	789b      	ldrb	r3, [r3, #2]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d103      	bne.n	800405e <TaskTune+0x64a>
						PID_Y->Kd = float_value;
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800405c:	609a      	str	r2, [r3, #8]
				}
			}
			osMutexRelease(ControllerMutexHandle);
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <TaskTune+0x664>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f00d fd24 	bl	8011ab0 <osMutexRelease>

			// And finally save the current tuning data
			for (int i = 0; i < 6; i++)
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800406e:	e01f      	b.n	80040b0 <TaskTune+0x69c>
 8004070:	20000376 	.word	0x20000376
 8004074:	66666667 	.word	0x66666667
 8004078:	20000da4 	.word	0x20000da4
 800407c:	20000d94 	.word	0x20000d94
 8004080:	20000d90 	.word	0x20000d90
 8004084:	200006d0 	.word	0x200006d0
 8004088:	20000a18 	.word	0x20000a18
				LastValidTuningData[i] = Spi1Buffer[i+1];
 800408c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004090:	3301      	adds	r3, #1
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <TaskTune+0x6ac>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	b2d9      	uxtb	r1, r3
 8004098:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800409c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a0:	4413      	add	r3, r2
 80040a2:	460a      	mov	r2, r1
 80040a4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++)
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040aa:	3301      	adds	r3, #1
 80040ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	dde9      	ble.n	800408c <TaskTune+0x678>

			NewTuneCommand = false;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80040be:	e505      	b.n	8003acc <TaskTune+0xb8>
 80040c0:	200006d0 	.word	0x200006d0

080040c4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80040d4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <vApplicationGetIdleTaskMemory+0x30>)
 80040da:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000724 	.word	0x20000724
 80040f4:	200007c4 	.word	0x200007c4

080040f8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_UART_RxCpltCallback+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d130      	bne.n	800416a <HAL_UART_RxCpltCallback+0x72>
	{
		Uart2CallbackCounter++;
 8004108:	4b41      	ldr	r3, [pc, #260]	; (8004210 <HAL_UART_RxCpltCallback+0x118>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a40      	ldr	r2, [pc, #256]	; (8004210 <HAL_UART_RxCpltCallback+0x118>)
 8004110:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_UART_RxCpltCallback+0x11c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f00d fc7b 	bl	8011a14 <osMutexWait>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11c      	bne.n	800415e <HAL_UART_RxCpltCallback+0x66>
		{
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e00c      	b.n	8004144 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 800412a:	4a3b      	ldr	r2, [pc, #236]	; (8004218 <HAL_UART_RxCpltCallback+0x120>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2d9      	uxtb	r1, r3
 8004134:	4a39      	ldr	r2, [pc, #228]	; (800421c <HAL_UART_RxCpltCallback+0x124>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	460a      	mov	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b3f      	cmp	r3, #63	; 0x3f
 8004148:	ddef      	ble.n	800412a <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 800414a:	4b32      	ldr	r3, [pc, #200]	; (8004214 <HAL_UART_RxCpltCallback+0x11c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f00d fcae 	bl	8011ab0 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <HAL_UART_RxCpltCallback+0x128>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f00d fd5f 	bl	8011c1c <osSemaphoreRelease>
		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	492d      	ldr	r1, [pc, #180]	; (8004218 <HAL_UART_RxCpltCallback+0x120>)
 8004162:	482a      	ldr	r0, [pc, #168]	; (800420c <HAL_UART_RxCpltCallback+0x114>)
 8004164:	f00b ffa5 	bl	80100b2 <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8004168:	e04b      	b.n	8004202 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2d      	ldr	r2, [pc, #180]	; (8004224 <HAL_UART_RxCpltCallback+0x12c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d147      	bne.n	8004202 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_UART_RxCpltCallback+0x8e>
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_UART_RxCpltCallback+0x134>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b24      	cmp	r3, #36	; 0x24
 8004184:	d013      	beq.n	80041ae <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d104      	bne.n	800419a <HAL_UART_RxCpltCallback+0xa2>
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_UART_RxCpltCallback+0x134>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b47      	cmp	r3, #71	; 0x47
 8004198:	d009      	beq.n	80041ae <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d926      	bls.n	80041f2 <HAL_UART_RxCpltCallback+0xfa>
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2bff      	cmp	r3, #255	; 0xff
 80041ac:	d021      	beq.n	80041f2 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_UART_RxCpltCallback+0x134>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b2d9      	uxtb	r1, r3
 80041bc:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <HAL_UART_RxCpltCallback+0x138>)
 80041be:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2bfd      	cmp	r3, #253	; 0xfd
 80041c8:	d807      	bhi.n	80041da <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041d6:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80041d8:	e00e      	b.n	80041f8 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_UART_RxCpltCallback+0x13c>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <HAL_UART_RxCpltCallback+0x140>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f00d fd16 	bl	8011c1c <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80041f0:	e002      	b.n	80041f8 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_UART_RxCpltCallback+0x130>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 80041f8:	2201      	movs	r2, #1
 80041fa:	490c      	ldr	r1, [pc, #48]	; (800422c <HAL_UART_RxCpltCallback+0x134>)
 80041fc:	4809      	ldr	r0, [pc, #36]	; (8004224 <HAL_UART_RxCpltCallback+0x12c>)
 80041fe:	f00b ff9c 	bl	801013a <HAL_UART_Receive_DMA>
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000c00 	.word	0x20000c00
 8004210:	20000210 	.word	0x20000210
 8004214:	20000da0 	.word	0x20000da0
 8004218:	200004d0 	.word	0x200004d0
 800421c:	20000510 	.word	0x20000510
 8004220:	20000db0 	.word	0x20000db0
 8004224:	20000b78 	.word	0x20000b78
 8004228:	200005cd 	.word	0x200005cd
 800422c:	200005cc 	.word	0x200005cc
 8004230:	200005d0 	.word	0x200005d0
 8004234:	200006cf 	.word	0x200006cf
 8004238:	20000dac 	.word	0x20000dac

0800423c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_UART_ErrorCallback+0x98>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d11c      	bne.n	8004286 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03a      	beq.n	80042cc <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	491d      	ldr	r1, [pc, #116]	; (80042d8 <HAL_UART_ErrorCallback+0x9c>)
 8004262:	4618      	mov	r0, r3
 8004264:	f002 fa92 	bl	800678c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f827 	bl	80002c0 <strlen>
 8004272:	4603      	mov	r3, r0
 8004274:	b29a      	uxth	r2, r3
 8004276:	f107 0108 	add.w	r1, r7, #8
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	4817      	ldr	r0, [pc, #92]	; (80042dc <HAL_UART_ErrorCallback+0xa0>)
 8004280:	f00b fe94 	bl	800ffac <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8004284:	e022      	b.n	80042cc <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_UART_ErrorCallback+0xa4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d11e      	bne.n	80042cc <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004294:	2b00      	cmp	r3, #0
 8004296:	d019      	beq.n	80042cc <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_UART_ErrorCallback+0xa8>)
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042a4:	f107 0308 	add.w	r3, r7, #8
 80042a8:	490f      	ldr	r1, [pc, #60]	; (80042e8 <HAL_UART_ErrorCallback+0xac>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f002 fa6e 	bl	800678c <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc f803 	bl	80002c0 <strlen>
 80042ba:	4603      	mov	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f107 0108 	add.w	r1, r7, #8
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <HAL_UART_ErrorCallback+0xa0>)
 80042c8:	f00b fe70 	bl	800ffac <HAL_UART_Transmit>
}
 80042cc:	bf00      	nop
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000c00 	.word	0x20000c00
 80042d8:	0801bb74 	.word	0x0801bb74
 80042dc:	20000c88 	.word	0x20000c88
 80042e0:	20000b78 	.word	0x20000b78
 80042e4:	2000020c 	.word	0x2000020c
 80042e8:	0801bb90 	.word	0x0801bb90

080042ec <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <HAL_TIM_IC_CaptureCallback+0x20>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4804      	ldr	r0, [pc, #16]	; (8004310 <HAL_TIM_IC_CaptureCallback+0x24>)
 8004300:	f006 f9f2 	bl	800a6e8 <HCSR04_TMR_IC_ISR>
	}
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000b2c 	.word	0x20000b2c
 8004310:	20000494 	.word	0x20000494

08004314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004314:	b5b0      	push	{r4, r5, r7, lr}
 8004316:	b0c6      	sub	sp, #280	; 0x118
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800431a:	f006 fb7e 	bl	800aa1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800431e:	f000 f9eb 	bl	80046f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004322:	f000 fce7 	bl	8004cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004326:	f000 fcc7 	bl	8004cb8 <MX_DMA_Init>
  MX_SPI1_Init();
 800432a:	f000 fa91 	bl	8004850 <MX_SPI1_Init>
  MX_SPI2_Init();
 800432e:	f000 facd 	bl	80048cc <MX_SPI2_Init>
  MX_TIM1_Init();
 8004332:	f000 fb09 	bl	8004948 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004336:	f000 fbd7 	bl	8004ae8 <MX_TIM3_Init>
  MX_UART4_Init();
 800433a:	f000 fc29 	bl	8004b90 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800433e:	f000 fc57 	bl	8004bf0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004342:	f000 fa45 	bl	80047d0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004346:	f000 fc87 	bl	8004c58 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800434a:	4916      	ldr	r1, [pc, #88]	; (80043a4 <main+0x90>)
 800434c:	4816      	ldr	r0, [pc, #88]	; (80043a8 <main+0x94>)
 800434e:	f005 fdd7 	bl	8009f00 <MPU_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <main+0x5a>
 8004358:	4914      	ldr	r1, [pc, #80]	; (80043ac <main+0x98>)
 800435a:	4813      	ldr	r0, [pc, #76]	; (80043a8 <main+0x94>)
 800435c:	f004 ff82 	bl	8009264 <BMP280_initialize>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <main+0x5a>
  		IsImuAvailable = true;
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <main+0x9c>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e002      	b.n	8004374 <main+0x60>
  	else
  		IsImuAvailable = false;
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <main+0x9c>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8004374:	f004 fdf8 	bl	8008f68 <HMC5883L_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <main+0x72>
  		IsMagnAvailable = true;
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <main+0xa0>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e002      	b.n	800438c <main+0x78>
  	else
  		IsMagnAvailable = false;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <main+0xa0>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 800438c:	490a      	ldr	r1, [pc, #40]	; (80043b8 <main+0xa4>)
 800438e:	480b      	ldr	r0, [pc, #44]	; (80043bc <main+0xa8>)
 8004390:	f006 f95c 	bl	800a64c <HCSR04_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d114      	bne.n	80043c4 <main+0xb0>
  		IsDistAvailable = false;
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <main+0xac>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e013      	b.n	80043ca <main+0xb6>
 80043a2:	bf00      	nop
 80043a4:	20000388 	.word	0x20000388
 80043a8:	20000a7c 	.word	0x20000a7c
 80043ac:	20000430 	.word	0x20000430
 80043b0:	20000214 	.word	0x20000214
 80043b4:	20000215 	.word	0x20000215
 80043b8:	20000b2c 	.word	0x20000b2c
 80043bc:	20000494 	.word	0x20000494
 80043c0:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 80043c4:	4bb3      	ldr	r3, [pc, #716]	; (8004694 <main+0x380>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80043d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043da:	4618      	mov	r0, r3
 80043dc:	f00d fb01 	bl	80119e2 <osMutexCreate>
 80043e0:	4603      	mov	r3, r0
 80043e2:	4aad      	ldr	r2, [pc, #692]	; (8004698 <main+0x384>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 80043f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f6:	4618      	mov	r0, r3
 80043f8:	f00d faf3 	bl	80119e2 <osMutexCreate>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4aa7      	ldr	r2, [pc, #668]	; (800469c <main+0x388>)
 8004400:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 800440e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004412:	4618      	mov	r0, r3
 8004414:	f00d fae5 	bl	80119e2 <osMutexCreate>
 8004418:	4603      	mov	r3, r0
 800441a:	4aa1      	ldr	r2, [pc, #644]	; (80046a0 <main+0x38c>)
 800441c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 800442a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800442e:	4618      	mov	r0, r3
 8004430:	f00d fad7 	bl	80119e2 <osMutexCreate>
 8004434:	4603      	mov	r3, r0
 8004436:	4a9b      	ldr	r2, [pc, #620]	; (80046a4 <main+0x390>)
 8004438:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8004446:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800444a:	4618      	mov	r0, r3
 800444c:	f00d fac9 	bl	80119e2 <osMutexCreate>
 8004450:	4603      	mov	r3, r0
 8004452:	4a95      	ldr	r2, [pc, #596]	; (80046a8 <main+0x394>)
 8004454:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 8004462:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004466:	4618      	mov	r0, r3
 8004468:	f00d fabb 	bl	80119e2 <osMutexCreate>
 800446c:	4603      	mov	r3, r0
 800446e:	4a8f      	ldr	r2, [pc, #572]	; (80046ac <main+0x398>)
 8004470:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 800447e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004482:	4618      	mov	r0, r3
 8004484:	f00d faad 	bl	80119e2 <osMutexCreate>
 8004488:	4603      	mov	r3, r0
 800448a:	4a89      	ldr	r2, [pc, #548]	; (80046b0 <main+0x39c>)
 800448c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 800448e:	4b82      	ldr	r3, [pc, #520]	; (8004698 <main+0x384>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f00d fb0c 	bl	8011ab0 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 8004498:	4b80      	ldr	r3, [pc, #512]	; (800469c <main+0x388>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f00d fb07 	bl	8011ab0 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80044a2:	4b7f      	ldr	r3, [pc, #508]	; (80046a0 <main+0x38c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f00d fb02 	bl	8011ab0 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 80044ac:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <main+0x390>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f00d fafd 	bl	8011ab0 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 80044b6:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <main+0x398>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f00d faf8 	bl	8011ab0 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 80044c0:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <main+0x39c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f00d faf3 	bl	8011ab0 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 80044ca:	2300      	movs	r3, #0
 80044cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 80044d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f00d fb1d 	bl	8011b1c <osSemaphoreCreate>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4a73      	ldr	r2, [pc, #460]	; (80046b4 <main+0x3a0>)
 80044e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 80044f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f00d fb0e 	bl	8011b1c <osSemaphoreCreate>
 8004500:	4603      	mov	r3, r0
 8004502:	4a6d      	ldr	r2, [pc, #436]	; (80046b8 <main+0x3a4>)
 8004504:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8004512:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f00d faff 	bl	8011b1c <osSemaphoreCreate>
 800451e:	4603      	mov	r3, r0
 8004520:	4a66      	ldr	r2, [pc, #408]	; (80046bc <main+0x3a8>)
 8004522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <main+0x3a0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f00d fbad 	bl	8011c88 <osSemaphoreGetCount>
 800452e:	4603      	mov	r3, r0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d106      	bne.n	8004542 <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8004534:	4b5f      	ldr	r3, [pc, #380]	; (80046b4 <main+0x3a0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	4618      	mov	r0, r3
 800453e:	f00d fb1f 	bl	8011b80 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <main+0x3a4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f00d fb9e 	bl	8011c88 <osSemaphoreGetCount>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8004552:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <main+0x3a4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f04f 31ff 	mov.w	r1, #4294967295
 800455a:	4618      	mov	r0, r3
 800455c:	f00d fb10 	bl	8011b80 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8004560:	4b56      	ldr	r3, [pc, #344]	; (80046bc <main+0x3a8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f00d fb8f 	bl	8011c88 <osSemaphoreGetCount>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <main+0x3a8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f04f 31ff 	mov.w	r1, #4294967295
 8004578:	4618      	mov	r0, r3
 800457a:	f00d fb01 	bl	8011b80 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 800457e:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <main+0x3ac>)
 8004580:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8004584:	461d      	mov	r5, r3
 8004586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800458e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 8004592:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f00d f9c2 	bl	8011922 <osThreadCreate>
 800459e:	4603      	mov	r3, r0
 80045a0:	4a48      	ldr	r2, [pc, #288]	; (80046c4 <main+0x3b0>)
 80045a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 80045a4:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <main+0x3b4>)
 80045a6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80045aa:	461d      	mov	r5, r3
 80045ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80045b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f00d f9af 	bl	8011922 <osThreadCreate>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4a41      	ldr	r2, [pc, #260]	; (80046cc <main+0x3b8>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <main+0x3bc>)
 80045cc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80045d0:	461d      	mov	r5, r3
 80045d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 80045de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f00d f99c 	bl	8011922 <osThreadCreate>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a39      	ldr	r2, [pc, #228]	; (80046d4 <main+0x3c0>)
 80045ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <main+0x3c4>)
 80045f2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80045f6:	461d      	mov	r5, r3
 80045f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8004604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f00d f989 	bl	8011922 <osThreadCreate>
 8004610:	4603      	mov	r3, r0
 8004612:	4a32      	ldr	r2, [pc, #200]	; (80046dc <main+0x3c8>)
 8004614:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 8004616:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <main+0x3cc>)
 8004618:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800461c:	461d      	mov	r5, r3
 800461e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 800462a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f00d f976 	bl	8011922 <osThreadCreate>
 8004636:	4603      	mov	r3, r0
 8004638:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <main+0x3d0>)
 800463a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <main+0x3d4>)
 800463e:	f107 0420 	add.w	r4, r7, #32
 8004642:	461d      	mov	r5, r3
 8004644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800464c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8004650:	f107 0320 	add.w	r3, r7, #32
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f00d f963 	bl	8011922 <osThreadCreate>
 800465c:	4603      	mov	r3, r0
 800465e:	4a23      	ldr	r2, [pc, #140]	; (80046ec <main+0x3d8>)
 8004660:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 8004662:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004666:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <main+0x3dc>)
 800466c:	461c      	mov	r4, r3
 800466e:	4615      	mov	r5, r2
 8004670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f00d f94e 	bl	8011922 <osThreadCreate>
 8004686:	4603      	mov	r3, r0
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <main+0x3e0>)
 800468a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800468c:	f00d f942 	bl	8011914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004690:	e7fe      	b.n	8004690 <main+0x37c>
 8004692:	bf00      	nop
 8004694:	20000216 	.word	0x20000216
 8004698:	20000d8c 	.word	0x20000d8c
 800469c:	20000d90 	.word	0x20000d90
 80046a0:	20000d94 	.word	0x20000d94
 80046a4:	20000d98 	.word	0x20000d98
 80046a8:	20000d9c 	.word	0x20000d9c
 80046ac:	20000da0 	.word	0x20000da0
 80046b0:	20000da4 	.word	0x20000da4
 80046b4:	20000da8 	.word	0x20000da8
 80046b8:	20000dac 	.word	0x20000dac
 80046bc:	20000db0 	.word	0x20000db0
 80046c0:	0801bbd8 	.word	0x0801bbd8
 80046c4:	20000d70 	.word	0x20000d70
 80046c8:	0801bc04 	.word	0x0801bc04
 80046cc:	20000d74 	.word	0x20000d74
 80046d0:	0801bc2c 	.word	0x0801bc2c
 80046d4:	20000d78 	.word	0x20000d78
 80046d8:	0801bc54 	.word	0x0801bc54
 80046dc:	20000d7c 	.word	0x20000d7c
 80046e0:	0801bc7c 	.word	0x0801bc7c
 80046e4:	20000d80 	.word	0x20000d80
 80046e8:	0801bca8 	.word	0x0801bca8
 80046ec:	20000d84 	.word	0x20000d84
 80046f0:	0801bcd0 	.word	0x0801bcd0
 80046f4:	20000d88 	.word	0x20000d88

080046f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b094      	sub	sp, #80	; 0x50
 80046fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	2230      	movs	r2, #48	; 0x30
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f010 fe61 	bl	80153ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <SystemClock_Config+0xd0>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <SystemClock_Config+0xd0>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004726:	6413      	str	r3, [r2, #64]	; 0x40
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <SystemClock_Config+0xd0>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <SystemClock_Config+0xd4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <SystemClock_Config+0xd4>)
 800473a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b22      	ldr	r3, [pc, #136]	; (80047cc <SystemClock_Config+0xd4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800474c:	2302      	movs	r3, #2
 800474e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004750:	2301      	movs	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004754:	2310      	movs	r3, #16
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004758:	2302      	movs	r3, #2
 800475a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800475c:	2300      	movs	r3, #0
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004760:	2308      	movs	r3, #8
 8004762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004764:	23d8      	movs	r3, #216	; 0xd8
 8004766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004768:	2302      	movs	r3, #2
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800476c:	2302      	movs	r3, #2
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004770:	f107 0320 	add.w	r3, r7, #32
 8004774:	4618      	mov	r0, r3
 8004776:	f007 fe83 	bl	800c480 <HAL_RCC_OscConfig>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004780:	f000 fbac 	bl	8004edc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004784:	f007 fe2c 	bl	800c3e0 <HAL_PWREx_EnableOverDrive>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800478e:	f000 fba5 	bl	8004edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004792:	230f      	movs	r3, #15
 8004794:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004796:	2302      	movs	r3, #2
 8004798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800479e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	2107      	movs	r1, #7
 80047b0:	4618      	mov	r0, r3
 80047b2:	f008 f909 	bl	800c9c8 <HAL_RCC_ClockConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80047bc:	f000 fb8e 	bl	8004edc <Error_Handler>
  }
}
 80047c0:	bf00      	nop
 80047c2:	3750      	adds	r7, #80	; 0x50
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000

080047d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <MX_I2C1_Init+0x74>)
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <MX_I2C1_Init+0x78>)
 80047d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <MX_I2C1_Init+0x74>)
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <MX_I2C1_Init+0x7c>)
 80047de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <MX_I2C1_Init+0x74>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <MX_I2C1_Init+0x74>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <MX_I2C1_Init+0x74>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <MX_I2C1_Init+0x74>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <MX_I2C1_Init+0x74>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <MX_I2C1_Init+0x74>)
 8004800:	2200      	movs	r2, #0
 8004802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <MX_I2C1_Init+0x74>)
 8004806:	2200      	movs	r2, #0
 8004808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800480a:	480e      	ldr	r0, [pc, #56]	; (8004844 <MX_I2C1_Init+0x74>)
 800480c:	f006 fff8 	bl	800b800 <HAL_I2C_Init>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004816:	f000 fb61 	bl	8004edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800481a:	2100      	movs	r1, #0
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <MX_I2C1_Init+0x74>)
 800481e:	f007 fd47 	bl	800c2b0 <HAL_I2CEx_ConfigAnalogFilter>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004828:	f000 fb58 	bl	8004edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800482c:	2100      	movs	r1, #0
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MX_I2C1_Init+0x74>)
 8004830:	f007 fd89 	bl	800c346 <HAL_I2CEx_ConfigDigitalFilter>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800483a:	f000 fb4f 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200009c4 	.word	0x200009c4
 8004848:	40005400 	.word	0x40005400
 800484c:	a0404e72 	.word	0xa0404e72

08004850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <MX_SPI1_Init+0x78>)
 8004858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800485a:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <MX_SPI1_Init+0x74>)
 800485c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <MX_SPI1_Init+0x74>)
 800486a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800486e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004872:	2202      	movs	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004878:	2201      	movs	r2, #1
 800487a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <MX_SPI1_Init+0x74>)
 800487e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004882:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004886:	2220      	movs	r2, #32
 8004888:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <MX_SPI1_Init+0x74>)
 800488c:	2200      	movs	r2, #0
 800488e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004892:	2200      	movs	r2, #0
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <MX_SPI1_Init+0x74>)
 8004898:	2200      	movs	r2, #0
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <MX_SPI1_Init+0x74>)
 800489e:	2207      	movs	r2, #7
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <MX_SPI1_Init+0x74>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <MX_SPI1_Init+0x74>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048ae:	4805      	ldr	r0, [pc, #20]	; (80048c4 <MX_SPI1_Init+0x74>)
 80048b0:	f008 fdec 	bl	800d48c <HAL_SPI_Init>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80048ba:	f000 fb0f 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000a18 	.word	0x20000a18
 80048c8:	40013000 	.word	0x40013000

080048cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <MX_SPI2_Init+0x74>)
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <MX_SPI2_Init+0x78>)
 80048d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <MX_SPI2_Init+0x74>)
 80048d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <MX_SPI2_Init+0x74>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80048e4:	4b16      	ldr	r3, [pc, #88]	; (8004940 <MX_SPI2_Init+0x74>)
 80048e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <MX_SPI2_Init+0x74>)
 80048ee:	2202      	movs	r2, #2
 80048f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <MX_SPI2_Init+0x74>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <MX_SPI2_Init+0x74>)
 80048fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <MX_SPI2_Init+0x74>)
 8004902:	2228      	movs	r2, #40	; 0x28
 8004904:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <MX_SPI2_Init+0x74>)
 8004908:	2200      	movs	r2, #0
 800490a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <MX_SPI2_Init+0x74>)
 800490e:	2200      	movs	r2, #0
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <MX_SPI2_Init+0x74>)
 8004914:	2200      	movs	r2, #0
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <MX_SPI2_Init+0x74>)
 800491a:	2207      	movs	r2, #7
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <MX_SPI2_Init+0x74>)
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <MX_SPI2_Init+0x74>)
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800492a:	4805      	ldr	r0, [pc, #20]	; (8004940 <MX_SPI2_Init+0x74>)
 800492c:	f008 fdae 	bl	800d48c <HAL_SPI_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004936:	f000 fad1 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000a7c 	.word	0x20000a7c
 8004944:	40003800 	.word	0x40003800

08004948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b09a      	sub	sp, #104	; 0x68
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800494e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800495c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
 8004978:	615a      	str	r2, [r3, #20]
 800497a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	222c      	movs	r2, #44	; 0x2c
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f010 fd23 	bl	80153ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004988:	4b55      	ldr	r3, [pc, #340]	; (8004ae0 <MX_TIM1_Init+0x198>)
 800498a:	4a56      	ldr	r2, [pc, #344]	; (8004ae4 <MX_TIM1_Init+0x19c>)
 800498c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004990:	22d7      	movs	r2, #215	; 0xd7
 8004992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004994:	4b52      	ldr	r3, [pc, #328]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800499a:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <MX_TIM1_Init+0x198>)
 800499c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a2:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049a8:	4b4d      	ldr	r3, [pc, #308]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049b4:	484a      	ldr	r0, [pc, #296]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049b6:	f009 fcc9 	bl	800e34c <HAL_TIM_Base_Init>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80049c0:	f000 fa8c 	bl	8004edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049ce:	4619      	mov	r1, r3
 80049d0:	4843      	ldr	r0, [pc, #268]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049d2:	f00a fb5f 	bl	800f094 <HAL_TIM_ConfigClockSource>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80049dc:	f000 fa7e 	bl	8004edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049e0:	483f      	ldr	r0, [pc, #252]	; (8004ae0 <MX_TIM1_Init+0x198>)
 80049e2:	f009 fd83 	bl	800e4ec <HAL_TIM_PWM_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80049ec:	f000 fa76 	bl	8004edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f0:	2300      	movs	r3, #0
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80049f4:	2300      	movs	r3, #0
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a00:	4619      	mov	r1, r3
 8004a02:	4837      	ldr	r0, [pc, #220]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004a04:	f00b f95a 	bl	800fcbc <HAL_TIMEx_MasterConfigSynchronization>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004a0e:	f000 fa65 	bl	8004edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a12:	2360      	movs	r3, #96	; 0x60
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004a22:	2304      	movs	r3, #4
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a32:	2200      	movs	r2, #0
 8004a34:	4619      	mov	r1, r3
 8004a36:	482a      	ldr	r0, [pc, #168]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004a38:	f00a fa18 	bl	800ee6c <HAL_TIM_PWM_ConfigChannel>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004a42:	f000 fa4b 	bl	8004edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4824      	ldr	r0, [pc, #144]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004a50:	f00a fa0c 	bl	800ee6c <HAL_TIM_PWM_ConfigChannel>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004a5a:	f000 fa3f 	bl	8004edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a62:	2208      	movs	r2, #8
 8004a64:	4619      	mov	r1, r3
 8004a66:	481e      	ldr	r0, [pc, #120]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004a68:	f00a fa00 	bl	800ee6c <HAL_TIM_PWM_ConfigChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004a72:	f000 fa33 	bl	8004edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4818      	ldr	r0, [pc, #96]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004a80:	f00a f9f4 	bl	800ee6c <HAL_TIM_PWM_ConfigChannel>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8004a8a:	f000 fa27 	bl	8004edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4807      	ldr	r0, [pc, #28]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004ac4:	f00b f988 	bl	800fdd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8004ace:	f000 fa05 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <MX_TIM1_Init+0x198>)
 8004ad4:	f001 ffe0 	bl	8006a98 <HAL_TIM_MspPostInit>

}
 8004ad8:	bf00      	nop
 8004ada:	3768      	adds	r7, #104	; 0x68
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000ae0 	.word	0x20000ae0
 8004ae4:	40010000 	.word	0x40010000

08004ae8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <MX_TIM3_Init+0xa4>)
 8004b0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b0e:	226b      	movs	r2, #107	; 0x6b
 8004b10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b12:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004b2c:	4816      	ldr	r0, [pc, #88]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b2e:	f009 fe39 	bl	800e7a4 <HAL_TIM_IC_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004b38:	f000 f9d0 	bl	8004edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	4619      	mov	r1, r3
 8004b4a:	480f      	ldr	r0, [pc, #60]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b4c:	f00b f8b6 	bl	800fcbc <HAL_TIMEx_MasterConfigSynchronization>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8004b56:	f000 f9c1 	bl	8004edc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4805      	ldr	r0, [pc, #20]	; (8004b88 <MX_TIM3_Init+0xa0>)
 8004b72:	f00a f8de 	bl	800ed32 <HAL_TIM_IC_ConfigChannel>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004b7c:	f000 f9ae 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b80:	bf00      	nop
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000b2c 	.word	0x20000b2c
 8004b8c:	40000400 	.word	0x40000400

08004b90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b94:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <MX_UART4_Init+0x58>)
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <MX_UART4_Init+0x5c>)
 8004b98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <MX_UART4_Init+0x58>)
 8004b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ba0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <MX_UART4_Init+0x58>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <MX_UART4_Init+0x58>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004bae:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bb6:	220c      	movs	r2, #12
 8004bb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004bd2:	4805      	ldr	r0, [pc, #20]	; (8004be8 <MX_UART4_Init+0x58>)
 8004bd4:	f00b f99c 	bl	800ff10 <HAL_UART_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004bde:	f000 f97d 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000b78 	.word	0x20000b78
 8004bec:	40004c00 	.word	0x40004c00

08004bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bf4:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <MX_USART2_UART_Init+0x64>)
 8004bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c16:	2204      	movs	r2, #4
 8004c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c2e:	2210      	movs	r2, #16
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c3a:	4805      	ldr	r0, [pc, #20]	; (8004c50 <MX_USART2_UART_Init+0x60>)
 8004c3c:	f00b f968 	bl	800ff10 <HAL_UART_Init>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8004c46:	f000 f949 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000c00 	.word	0x20000c00
 8004c54:	40004400 	.word	0x40004400

08004c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c5e:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <MX_USART3_UART_Init+0x5c>)
 8004c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c64:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c7e:	2208      	movs	r2, #8
 8004c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c9a:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <MX_USART3_UART_Init+0x58>)
 8004c9c:	f00b f938 	bl	800ff10 <HAL_UART_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004ca6:	f000 f919 	bl	8004edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000c88 	.word	0x20000c88
 8004cb4:	40004800 	.word	0x40004800

08004cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <MX_DMA_Init+0x38>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <MX_DMA_Init+0x38>)
 8004cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <MX_DMA_Init+0x38>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2108      	movs	r1, #8
 8004cda:	2010      	movs	r0, #16
 8004cdc:	f005 ffa6 	bl	800ac2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004ce0:	2010      	movs	r0, #16
 8004ce2:	f005 ffbf 	bl	800ac64 <HAL_NVIC_EnableIRQ>

}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800

08004cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	; 0x28
 8004cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfa:	f107 0314 	add.w	r3, r7, #20
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a40      	ldr	r2, [pc, #256]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4a3a      	ldr	r2, [pc, #232]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d28:	f043 0310 	orr.w	r3, r3, #16
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2e:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3a:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d52:	4b2f      	ldr	r3, [pc, #188]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	4a2e      	ldr	r2, [pc, #184]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d70:	f043 0304 	orr.w	r3, r3, #4
 8004d74:	6313      	str	r3, [r2, #48]	; 0x30
 8004d76:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <MX_GPIO_Init+0x11c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d88:	4822      	ldr	r0, [pc, #136]	; (8004e14 <MX_GPIO_Init+0x120>)
 8004d8a:	f006 fd1f 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8004d94:	4820      	ldr	r0, [pc, #128]	; (8004e18 <MX_GPIO_Init+0x124>)
 8004d96:	f006 fd19 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4619      	mov	r1, r3
 8004dac:	481b      	ldr	r0, [pc, #108]	; (8004e1c <MX_GPIO_Init+0x128>)
 8004dae:	f006 fb71 	bl	800b494 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8004db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db8:	2301      	movs	r3, #1
 8004dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4812      	ldr	r0, [pc, #72]	; (8004e14 <MX_GPIO_Init+0x120>)
 8004dcc:	f006 fb62 	bl	800b494 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8004dd0:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8004dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004de2:	f107 0314 	add.w	r3, r7, #20
 8004de6:	4619      	mov	r1, r3
 8004de8:	480b      	ldr	r0, [pc, #44]	; (8004e18 <MX_GPIO_Init+0x124>)
 8004dea:	f006 fb53 	bl	800b494 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8004dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	4807      	ldr	r0, [pc, #28]	; (8004e20 <MX_GPIO_Init+0x12c>)
 8004e04:	f006 fb46 	bl	800b494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004e08:	bf00      	nop
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40020c00 	.word	0x40020c00
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	40020400 	.word	0x40020400

08004e24 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fe f8d7 	bl	8002fe0 <TaskSensorData>
  /* USER CODE END 5 */
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc fd7e 	bl	8001944 <TaskController>
  /* USER CODE END RunTaskController */
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fd fc91 	bl	8002780 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fb60 	bl	8002534 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fd fc61 	bl	800274c <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc ffa8 	bl	8001df0 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fe fdaf 	bl	8003a14 <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ed0:	f005 fdb0 	bl	800aa34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ee0:	b672      	cpsid	i
}
 8004ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ee4:	e7fe      	b.n	8004ee4 <Error_Handler+0x8>

08004ee6 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d204      	bcs.n	8004f08 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4413      	add	r3, r2
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	701a      	strb	r2, [r3, #0]
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e002      	b.n	8004f46 <_strnlen_s+0x16>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <_strnlen_s+0x28>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	603a      	str	r2, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f3      	bne.n	8004f40 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b2f      	cmp	r3, #47	; 0x2f
 8004f78:	d904      	bls.n	8004f84 <_is_digit+0x1a>
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b39      	cmp	r3, #57	; 0x39
 8004f7e:	d801      	bhi.n	8004f84 <_is_digit+0x1a>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <_is_digit+0x1c>
 8004f84:	2300      	movs	r3, #0
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004fa4:	e00e      	b.n	8004fc4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6011      	str	r1, [r2, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4403      	add	r3, r0
 8004fc0:	3b30      	subs	r3, #48	; 0x30
 8004fc2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ffcd 	bl	8004f6a <_is_digit>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e7      	bne.n	8004fa6 <_atoi+0xe>
  }
  return i;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d125      	bne.n	8005048 <_out_rev+0x68>
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d120      	bne.n	8005048 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e00a      	b.n	8005022 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	1c53      	adds	r3, r2, #1
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	68fc      	ldr	r4, [r7, #12]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	2020      	movs	r0, #32
 800501a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3301      	adds	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	429a      	cmp	r2, r3
 8005028:	d3f0      	bcc.n	800500c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800502a:	e00d      	b.n	8005048 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	3b01      	subs	r3, #1
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	4413      	add	r3, r2
 8005038:	7818      	ldrb	r0, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	1c53      	adds	r3, r2, #1
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	68fc      	ldr	r4, [r7, #12]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	47a0      	blx	r4
  while (len) {
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ee      	bne.n	800502c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8005058:	e007      	b.n	800506a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	1c53      	adds	r3, r2, #1
 800505e:	607b      	str	r3, [r7, #4]
 8005060:	68fc      	ldr	r4, [r7, #12]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	2020      	movs	r0, #32
 8005068:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005072:	429a      	cmp	r2, r3
 8005074:	d8f1      	bhi.n	800505a <_out_rev+0x7a>
    }
  }

  return idx;
 8005076:	687b      	ldr	r3, [r7, #4]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd90      	pop	{r4, r7, pc}

08005080 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af04      	add	r7, sp, #16
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d136      	bne.n	8005106 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <_ntoa_format+0x50>
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <_ntoa_format+0x50>
 80050a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <_ntoa_format+0x3a>
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <_ntoa_format+0x50>
      width--;
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	3b01      	subs	r3, #1
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050c0:	e006      	b.n	80050d0 <_ntoa_format+0x50>
      buf[len++] = '0';
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	61fa      	str	r2, [r7, #28]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4413      	add	r3, r2
 80050cc:	2230      	movs	r2, #48	; 0x30
 80050ce:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d20a      	bcs.n	80050ee <_ntoa_format+0x6e>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b1f      	cmp	r3, #31
 80050dc:	d9f1      	bls.n	80050c2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050de:	e006      	b.n	80050ee <_ntoa_format+0x6e>
      buf[len++] = '0';
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4413      	add	r3, r2
 80050ea:	2230      	movs	r2, #48	; 0x30
 80050ec:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d006      	beq.n	8005106 <_ntoa_format+0x86>
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d202      	bcs.n	8005106 <_ntoa_format+0x86>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b1f      	cmp	r3, #31
 8005104:	d9ec      	bls.n	80050e0 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d058      	beq.n	80051c2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <_ntoa_format+0xc8>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <_ntoa_format+0xc8>
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	429a      	cmp	r2, r3
 8005126:	d003      	beq.n	8005130 <_ntoa_format+0xb0>
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	429a      	cmp	r2, r3
 800512e:	d10b      	bne.n	8005148 <_ntoa_format+0xc8>
      len--;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3b01      	subs	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <_ntoa_format+0xc8>
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	2b10      	cmp	r3, #16
 8005140:	d102      	bne.n	8005148 <_ntoa_format+0xc8>
        len--;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b01      	subs	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2b10      	cmp	r3, #16
 800514c:	d10f      	bne.n	800516e <_ntoa_format+0xee>
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <_ntoa_format+0xee>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b1f      	cmp	r3, #31
 800515c:	d807      	bhi.n	800516e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	61fa      	str	r2, [r7, #28]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4413      	add	r3, r2
 8005168:	2278      	movs	r2, #120	; 0x78
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	e01f      	b.n	80051ae <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	2b10      	cmp	r3, #16
 8005172:	d10f      	bne.n	8005194 <_ntoa_format+0x114>
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <_ntoa_format+0x114>
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b1f      	cmp	r3, #31
 8005182:	d807      	bhi.n	8005194 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	61fa      	str	r2, [r7, #28]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	2258      	movs	r2, #88	; 0x58
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	e00c      	b.n	80051ae <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	2b02      	cmp	r3, #2
 8005198:	d109      	bne.n	80051ae <_ntoa_format+0x12e>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b1f      	cmp	r3, #31
 800519e:	d806      	bhi.n	80051ae <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	61fa      	str	r2, [r7, #28]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4413      	add	r3, r2
 80051aa:	2262      	movs	r2, #98	; 0x62
 80051ac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b1f      	cmp	r3, #31
 80051b2:	d806      	bhi.n	80051c2 <_ntoa_format+0x142>
      buf[len++] = '0';
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	61fa      	str	r2, [r7, #28]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4413      	add	r3, r2
 80051be:	2230      	movs	r2, #48	; 0x30
 80051c0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b1f      	cmp	r3, #31
 80051c6:	d824      	bhi.n	8005212 <_ntoa_format+0x192>
    if (negative) {
 80051c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <_ntoa_format+0x160>
      buf[len++] = '-';
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	61fa      	str	r2, [r7, #28]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4413      	add	r3, r2
 80051da:	222d      	movs	r2, #45	; 0x2d
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e018      	b.n	8005212 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4413      	add	r3, r2
 80051f4:	222b      	movs	r2, #43	; 0x2b
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e00b      	b.n	8005212 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	61fa      	str	r2, [r7, #28]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4413      	add	r3, r2
 800520e:	2220      	movs	r2, #32
 8005210:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	9303      	str	r3, [sp, #12]
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff fed9 	bl	8004fe0 <_out_rev>
 800522e:	4603      	mov	r3, r0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b096      	sub	sp, #88	; 0x58
 800523c:	af08      	add	r7, sp, #32
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800524a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8005250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <_ntoa_long+0x30>
 8005262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d032      	beq.n	80052ce <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005270:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005272:	fb01 f202 	mul.w	r2, r1, r2
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800527c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005280:	2b09      	cmp	r3, #9
 8005282:	d804      	bhi.n	800528e <_ntoa_long+0x56>
 8005284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005288:	3330      	adds	r3, #48	; 0x30
 800528a:	b2da      	uxtb	r2, r3
 800528c:	e00d      	b.n	80052aa <_ntoa_long+0x72>
 800528e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <_ntoa_long+0x64>
 8005298:	2241      	movs	r2, #65	; 0x41
 800529a:	e000      	b.n	800529e <_ntoa_long+0x66>
 800529c:	2261      	movs	r2, #97	; 0x61
 800529e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052a2:	4413      	add	r3, r2
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	3b0a      	subs	r3, #10
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	6379      	str	r1, [r7, #52]	; 0x34
 80052b0:	3338      	adds	r3, #56	; 0x38
 80052b2:	443b      	add	r3, r7
 80052b4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80052b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <_ntoa_long+0x96>
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	2b1f      	cmp	r3, #31
 80052cc:	d9cc      	bls.n	8005268 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80052ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fec3 	bl	8005080 <_ntoa_format>
 80052fa:	4603      	mov	r3, r0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3738      	adds	r7, #56	; 0x38
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b096      	sub	sp, #88	; 0x58
 8005308:	af08      	add	r7, sp, #32
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800531a:	4313      	orrs	r3, r2
 800531c:	d103      	bne.n	8005326 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800531e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <_ntoa_long_long+0x34>
 8005330:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005334:	4313      	orrs	r3, r2
 8005336:	d037      	beq.n	80053a8 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8005338:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800533c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005340:	f7fb fd1a 	bl	8000d78 <__aeabi_uldivmod>
 8005344:	4613      	mov	r3, r2
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800534a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800534e:	2b09      	cmp	r3, #9
 8005350:	d804      	bhi.n	800535c <_ntoa_long_long+0x58>
 8005352:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005356:	3330      	adds	r3, #48	; 0x30
 8005358:	b2da      	uxtb	r2, r3
 800535a:	e00d      	b.n	8005378 <_ntoa_long_long+0x74>
 800535c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <_ntoa_long_long+0x66>
 8005366:	2241      	movs	r2, #65	; 0x41
 8005368:	e000      	b.n	800536c <_ntoa_long_long+0x68>
 800536a:	2261      	movs	r2, #97	; 0x61
 800536c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005370:	4413      	add	r3, r2
 8005372:	b2db      	uxtb	r3, r3
 8005374:	3b0a      	subs	r3, #10
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6379      	str	r1, [r7, #52]	; 0x34
 800537e:	3338      	adds	r3, #56	; 0x38
 8005380:	443b      	add	r3, r7
 8005382:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8005386:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800538a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800538e:	f7fb fcf3 	bl	8000d78 <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800539a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800539e:	4313      	orrs	r3, r2
 80053a0:	d002      	beq.n	80053a8 <_ntoa_long_long+0xa4>
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	2b1f      	cmp	r3, #31
 80053a6:	d9c7      	bls.n	8005338 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80053a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ac:	9206      	str	r2, [sp, #24]
 80053ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b0:	9205      	str	r2, [sp, #20]
 80053b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053b4:	9204      	str	r2, [sp, #16]
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80053bc:	9302      	str	r3, [sp, #8]
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	f107 0310 	add.w	r3, r7, #16
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fe56 	bl	8005080 <_ntoa_format>
 80053d4:	4603      	mov	r3, r0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3738      	adds	r7, #56	; 0x38
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b09d      	sub	sp, #116	; 0x74
 80053e4:	af04      	add	r7, sp, #16
 80053e6:	6178      	str	r0, [r7, #20]
 80053e8:	6139      	str	r1, [r7, #16]
 80053ea:	60fa      	str	r2, [r7, #12]
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8005402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800540a:	f7fb fb85 	bl	8000b18 <__aeabi_dcmpeq>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	2303      	movs	r3, #3
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	4ba7      	ldr	r3, [pc, #668]	; (80056c0 <_ftoa+0x2e0>)
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6939      	ldr	r1, [r7, #16]
 800542a:	6978      	ldr	r0, [r7, #20]
 800542c:	f7ff fdd8 	bl	8004fe0 <_out_rev>
 8005430:	4603      	mov	r3, r0
 8005432:	e222      	b.n	800587a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800543c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005440:	f7fb fb74 	bl	8000b2c <__aeabi_dcmplt>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00f      	beq.n	800546a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800544a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544c:	9303      	str	r3, [sp, #12]
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	2304      	movs	r3, #4
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	4b9b      	ldr	r3, [pc, #620]	; (80056c4 <_ftoa+0x2e4>)
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	6978      	ldr	r0, [r7, #20]
 8005462:	f7ff fdbd 	bl	8004fe0 <_out_rev>
 8005466:	4603      	mov	r3, r0
 8005468:	e207      	b.n	800587a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	4b96      	ldr	r3, [pc, #600]	; (80056c8 <_ftoa+0x2e8>)
 8005470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005474:	f7fb fb78 	bl	8000b68 <__aeabi_dcmpgt>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01d      	beq.n	80054ba <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800547e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <_ftoa+0xac>
 8005488:	4b90      	ldr	r3, [pc, #576]	; (80056cc <_ftoa+0x2ec>)
 800548a:	e000      	b.n	800548e <_ftoa+0xae>
 800548c:	4b90      	ldr	r3, [pc, #576]	; (80056d0 <_ftoa+0x2f0>)
 800548e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005490:	f002 0204 	and.w	r2, r2, #4
 8005494:	2a00      	cmp	r2, #0
 8005496:	d001      	beq.n	800549c <_ftoa+0xbc>
 8005498:	2204      	movs	r2, #4
 800549a:	e000      	b.n	800549e <_ftoa+0xbe>
 800549c:	2203      	movs	r2, #3
 800549e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80054a0:	9103      	str	r1, [sp, #12]
 80054a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80054a4:	9102      	str	r1, [sp, #8]
 80054a6:	9201      	str	r2, [sp, #4]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6939      	ldr	r1, [r7, #16]
 80054b0:	6978      	ldr	r0, [r7, #20]
 80054b2:	f7ff fd95 	bl	8004fe0 <_out_rev>
 80054b6:	4603      	mov	r3, r0
 80054b8:	e1df      	b.n	800587a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80054ba:	a37d      	add	r3, pc, #500	; (adr r3, 80056b0 <_ftoa+0x2d0>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c4:	f7fb fb50 	bl	8000b68 <__aeabi_dcmpgt>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <_ftoa+0x102>
 80054ce:	a37a      	add	r3, pc, #488	; (adr r3, 80056b8 <_ftoa+0x2d8>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054d8:	f7fb fb28 	bl	8000b2c <__aeabi_dcmplt>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00f      	beq.n	8005502 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80054e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	ed97 0b00 	vldr	d0, [r7]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6939      	ldr	r1, [r7, #16]
 80054f8:	6978      	ldr	r0, [r7, #20]
 80054fa:	f000 f9c9 	bl	8005890 <_etoa>
 80054fe:	4603      	mov	r3, r0
 8005500:	e1bb      	b.n	800587a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005514:	f7fb fb0a 	bl	8000b2c <__aeabi_dcmplt>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <_ftoa+0x15c>
    negative = true;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8005524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005528:	f04f 0000 	mov.w	r0, #0
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f7fa fed2 	bl	80002d8 <__aeabi_dsub>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800553c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005546:	2306      	movs	r3, #6
 8005548:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800554a:	e00a      	b.n	8005562 <_ftoa+0x182>
    buf[len++] = '0';
 800554c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005552:	3360      	adds	r3, #96	; 0x60
 8005554:	443b      	add	r3, r7
 8005556:	2230      	movs	r2, #48	; 0x30
 8005558:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800555c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800555e:	3b01      	subs	r3, #1
 8005560:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005564:	2b1f      	cmp	r3, #31
 8005566:	d802      	bhi.n	800556e <_ftoa+0x18e>
 8005568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800556a:	2b09      	cmp	r3, #9
 800556c:	d8ee      	bhi.n	800554c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800556e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005572:	f7fb fb19 	bl	8000ba8 <__aeabi_d2iz>
 8005576:	4603      	mov	r3, r0
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800557a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800557c:	f7fa fffa 	bl	8000574 <__aeabi_i2d>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005588:	f7fa fea6 	bl	80002d8 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	4a4f      	ldr	r2, [pc, #316]	; (80056d4 <_ftoa+0x2f4>)
 8005596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4413      	add	r3, r2
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fb f852 	bl	8000648 <__aeabi_dmul>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80055ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055b0:	f7fb fb22 	bl	8000bf8 <__aeabi_d2uiz>
 80055b4:	4603      	mov	r3, r0
 80055b6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80055b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80055ba:	f7fa ffcb 	bl	8000554 <__aeabi_ui2d>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055c6:	f7fa fe87 	bl	80002d8 <__aeabi_dsub>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	4b40      	ldr	r3, [pc, #256]	; (80056d8 <_ftoa+0x2f8>)
 80055d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80055dc:	f7fb fac4 	bl	8000b68 <__aeabi_dcmpgt>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <_ftoa+0x234>
    ++frac;
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	3301      	adds	r3, #1
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80055ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80055ee:	f7fa ffb1 	bl	8000554 <__aeabi_ui2d>
 80055f2:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <_ftoa+0x2f4>)
 80055f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb faa9 	bl	8000b54 <__aeabi_dcmpge>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <_ftoa+0x25e>
      frac = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800560c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560e:	3301      	adds	r3, #1
 8005610:	657b      	str	r3, [r7, #84]	; 0x54
 8005612:	e014      	b.n	800563e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <_ftoa+0x2f8>)
 800561a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800561e:	f7fb fa85 	bl	8000b2c <__aeabi_dcmplt>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8005628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <_ftoa+0x258>
 800562e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8005638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563a:	3301      	adds	r3, #1
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800563e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005640:	2b00      	cmp	r3, #0
 8005642:	d14b      	bne.n	80056dc <_ftoa+0x2fc>
    diff = value - (double)whole;
 8005644:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005646:	f7fa ff95 	bl	8000574 <__aeabi_i2d>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005652:	f7fa fe41 	bl	80002d8 <__aeabi_dsub>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800565e:	2301      	movs	r3, #1
 8005660:	461c      	mov	r4, r3
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <_ftoa+0x2f8>)
 8005668:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800566c:	f7fb fa5e 	bl	8000b2c <__aeabi_dcmplt>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <_ftoa+0x29a>
 8005676:	2300      	movs	r3, #0
 8005678:	461c      	mov	r4, r3
 800567a:	b2e3      	uxtb	r3, r4
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <_ftoa+0x2ba>
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <_ftoa+0x2f8>)
 800568c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005690:	f7fb fa6a 	bl	8000b68 <__aeabi_dcmpgt>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d064      	beq.n	8005764 <_ftoa+0x384>
 800569a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8081 	beq.w	80057a8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80056a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a8:	3301      	adds	r3, #1
 80056aa:	657b      	str	r3, [r7, #84]	; 0x54
 80056ac:	e07c      	b.n	80057a8 <_ftoa+0x3c8>
 80056ae:	bf00      	nop
 80056b0:	00000000 	.word	0x00000000
 80056b4:	41cdcd65 	.word	0x41cdcd65
 80056b8:	00000000 	.word	0x00000000
 80056bc:	c1cdcd65 	.word	0xc1cdcd65
 80056c0:	0801bcec 	.word	0x0801bcec
 80056c4:	0801bcf0 	.word	0x0801bcf0
 80056c8:	7fefffff 	.word	0x7fefffff
 80056cc:	0801bcf8 	.word	0x0801bcf8
 80056d0:	0801bd00 	.word	0x0801bd00
 80056d4:	0801be90 	.word	0x0801be90
 80056d8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80056dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80056e0:	e01f      	b.n	8005722 <_ftoa+0x342>
      --count;
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	3b01      	subs	r3, #1
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80056e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056ea:	4b66      	ldr	r3, [pc, #408]	; (8005884 <_ftoa+0x4a4>)
 80056ec:	fba3 2301 	umull	r2, r3, r3, r1
 80056f0:	08da      	lsrs	r2, r3, #3
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	1aca      	subs	r2, r1, r3
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005704:	3230      	adds	r2, #48	; 0x30
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	3360      	adds	r3, #96	; 0x60
 800570a:	443b      	add	r3, r7
 800570c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8005710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005712:	4a5c      	ldr	r2, [pc, #368]	; (8005884 <_ftoa+0x4a4>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	653b      	str	r3, [r7, #80]	; 0x50
 800571c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	2b1f      	cmp	r3, #31
 8005726:	d9dc      	bls.n	80056e2 <_ftoa+0x302>
 8005728:	e009      	b.n	800573e <_ftoa+0x35e>
        break;
 800572a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800572c:	e007      	b.n	800573e <_ftoa+0x35e>
      buf[len++] = '0';
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005734:	3360      	adds	r3, #96	; 0x60
 8005736:	443b      	add	r3, r7
 8005738:	2230      	movs	r2, #48	; 0x30
 800573a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800573e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005740:	2b1f      	cmp	r3, #31
 8005742:	d804      	bhi.n	800574e <_ftoa+0x36e>
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	1e5a      	subs	r2, r3, #1
 8005748:	64fa      	str	r2, [r7, #76]	; 0x4c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ef      	bne.n	800572e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800574e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005750:	2b1f      	cmp	r3, #31
 8005752:	d829      	bhi.n	80057a8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8005754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	65fa      	str	r2, [r7, #92]	; 0x5c
 800575a:	3360      	adds	r3, #96	; 0x60
 800575c:	443b      	add	r3, r7
 800575e:	222e      	movs	r2, #46	; 0x2e
 8005760:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005764:	e020      	b.n	80057a8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8005766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005768:	4b47      	ldr	r3, [pc, #284]	; (8005888 <_ftoa+0x4a8>)
 800576a:	fb83 1302 	smull	r1, r3, r3, r2
 800576e:	1099      	asrs	r1, r3, #2
 8005770:	17d3      	asrs	r3, r2, #31
 8005772:	1ac9      	subs	r1, r1, r3
 8005774:	460b      	mov	r3, r1
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	1ad1      	subs	r1, r2, r3
 800577e:	b2ca      	uxtb	r2, r1
 8005780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005786:	3230      	adds	r2, #48	; 0x30
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	3360      	adds	r3, #96	; 0x60
 800578c:	443b      	add	r3, r7
 800578e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8005792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005794:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <_ftoa+0x4a8>)
 8005796:	fb82 1203 	smull	r1, r2, r2, r3
 800579a:	1092      	asrs	r2, r2, #2
 800579c:	17db      	asrs	r3, r3, #31
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	657b      	str	r3, [r7, #84]	; 0x54
 80057a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057aa:	2b1f      	cmp	r3, #31
 80057ac:	d9db      	bls.n	8005766 <_ftoa+0x386>
 80057ae:	e000      	b.n	80057b2 <_ftoa+0x3d2>
      break;
 80057b0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80057b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d123      	bne.n	8005804 <_ftoa+0x424>
 80057bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01e      	beq.n	8005804 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80057c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d014      	beq.n	80057f6 <_ftoa+0x416>
 80057cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <_ftoa+0x3fe>
 80057d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <_ftoa+0x416>
      width--;
 80057de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e0:	3b01      	subs	r3, #1
 80057e2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80057e4:	e007      	b.n	80057f6 <_ftoa+0x416>
      buf[len++] = '0';
 80057e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057ec:	3360      	adds	r3, #96	; 0x60
 80057ee:	443b      	add	r3, r7
 80057f0:	2230      	movs	r2, #48	; 0x30
 80057f2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80057f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d202      	bcs.n	8005804 <_ftoa+0x424>
 80057fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005800:	2b1f      	cmp	r3, #31
 8005802:	d9f0      	bls.n	80057e6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005806:	2b1f      	cmp	r3, #31
 8005808:	d827      	bhi.n	800585a <_ftoa+0x47a>
    if (negative) {
 800580a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <_ftoa+0x444>
      buf[len++] = '-';
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005818:	3360      	adds	r3, #96	; 0x60
 800581a:	443b      	add	r3, r7
 800581c:	222d      	movs	r2, #45	; 0x2d
 800581e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005822:	e01a      	b.n	800585a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8005824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800582e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005834:	3360      	adds	r3, #96	; 0x60
 8005836:	443b      	add	r3, r7
 8005838:	222b      	movs	r2, #43	; 0x2b
 800583a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800583e:	e00c      	b.n	800585a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8005840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <_ftoa+0x47a>
      buf[len++] = ' ';
 800584a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005850:	3360      	adds	r3, #96	; 0x60
 8005852:	443b      	add	r3, r7
 8005854:	2220      	movs	r2, #32
 8005856:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800585a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585c:	9303      	str	r3, [sp, #12]
 800585e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	f107 0318 	add.w	r3, r7, #24
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	6939      	ldr	r1, [r7, #16]
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff fbb4 	bl	8004fe0 <_out_rev>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3764      	adds	r7, #100	; 0x64
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}
 8005882:	bf00      	nop
 8005884:	cccccccd 	.word	0xcccccccd
 8005888:	66666667 	.word	0x66666667
 800588c:	00000000 	.word	0x00000000

08005890 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	b09f      	sub	sp, #124	; 0x7c
 8005896:	af06      	add	r7, sp, #24
 8005898:	6278      	str	r0, [r7, #36]	; 0x24
 800589a:	6239      	str	r1, [r7, #32]
 800589c:	61fa      	str	r2, [r7, #28]
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80058a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058ac:	f7fb f934 	bl	8000b18 <__aeabi_dcmpeq>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <_etoa+0x50>
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ba:	4bc1      	ldr	r3, [pc, #772]	; (8005bc0 <_etoa+0x330>)
 80058bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058c0:	f7fb f952 	bl	8000b68 <__aeabi_dcmpgt>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <_etoa+0x50>
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295
 80058ce:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80058d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058d6:	f7fb f929 	bl	8000b2c <__aeabi_dcmplt>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80058e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	ed97 0b04 	vldr	d0, [r7, #16]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	6a39      	ldr	r1, [r7, #32]
 80058fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058fe:	f7ff fd6f 	bl	80053e0 <_ftoa>
 8005902:	4603      	mov	r3, r0
 8005904:	e23f      	b.n	8005d86 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8005906:	2301      	movs	r3, #1
 8005908:	461e      	mov	r6, r3
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005916:	f7fb f909 	bl	8000b2c <__aeabi_dcmplt>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <_etoa+0x94>
 8005920:	2300      	movs	r3, #0
 8005922:	461e      	mov	r6, r3
 8005924:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8005928:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <_etoa+0xb4>
    value = -value;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	ed97 7b00 	vldr	d7, [r7]
 8005940:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8005944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005950:	2306      	movs	r3, #6
 8005952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8005956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800595a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800595e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	0d0a      	lsrs	r2, r1, #20
 800596c:	2300      	movs	r3, #0
 800596e:	4613      	mov	r3, r2
 8005970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005974:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800597a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800597e:	4690      	mov	r8, r2
 8005980:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8005984:	4644      	mov	r4, r8
 8005986:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800598a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800598e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005992:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005994:	f7fa fdee 	bl	8000574 <__aeabi_i2d>
 8005998:	a37d      	add	r3, pc, #500	; (adr r3, 8005b90 <_etoa+0x300>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fe53 	bl	8000648 <__aeabi_dmul>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4610      	mov	r0, r2
 80059a8:	4619      	mov	r1, r3
 80059aa:	a37b      	add	r3, pc, #492	; (adr r3, 8005b98 <_etoa+0x308>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc94 	bl	80002dc <__adddf3>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	461d      	mov	r5, r3
 80059bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	4b7f      	ldr	r3, [pc, #508]	; (8005bc4 <_etoa+0x334>)
 80059c6:	f7fa fc87 	bl	80002d8 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	a373      	add	r3, pc, #460	; (adr r3, 8005ba0 <_etoa+0x310>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fe36 	bl	8000648 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa fc7a 	bl	80002dc <__adddf3>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4610      	mov	r0, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7fb f8da 	bl	8000ba8 <__aeabi_d2iz>
 80059f4:	4603      	mov	r3, r0
 80059f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80059f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80059fa:	f7fa fdbb 	bl	8000574 <__aeabi_i2d>
 80059fe:	a36a      	add	r3, pc, #424	; (adr r3, 8005ba8 <_etoa+0x318>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fe20 	bl	8000648 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <_etoa+0x338>)
 8005a16:	f7fa fc61 	bl	80002dc <__adddf3>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7fb f8c1 	bl	8000ba8 <__aeabi_d2iz>
 8005a26:	4603      	mov	r3, r0
 8005a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005a2a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005a2c:	f7fa fda2 	bl	8000574 <__aeabi_i2d>
 8005a30:	a35f      	add	r3, pc, #380	; (adr r3, 8005bb0 <_etoa+0x320>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fe07 	bl	8000648 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4614      	mov	r4, r2
 8005a40:	461d      	mov	r5, r3
 8005a42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a44:	f7fa fd96 	bl	8000574 <__aeabi_i2d>
 8005a48:	a35b      	add	r3, pc, #364	; (adr r3, 8005bb8 <_etoa+0x328>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fdfb 	bl	8000648 <__aeabi_dmul>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fa fc3d 	bl	80002d8 <__aeabi_dsub>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8005a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005a6e:	f7fa fdeb 	bl	8000648 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005a80:	17da      	asrs	r2, r3, #31
 8005a82:	469a      	mov	sl, r3
 8005a84:	4693      	mov	fp, r2
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8005a92:	2200      	movs	r2, #0
 8005a94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005a98:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005a9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	f7fa fc1a 	bl	80002dc <__adddf3>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4690      	mov	r8, r2
 8005aae:	4699      	mov	r9, r3
 8005ab0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005abc:	f7fa fc0c 	bl	80002d8 <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4692      	mov	sl, r2
 8005ac6:	469b      	mov	fp, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <_etoa+0x33c>)
 8005ace:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ad2:	f7fa fee3 	bl	800089c <__aeabi_ddiv>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <_etoa+0x340>)
 8005ae4:	f7fa fbfa 	bl	80002dc <__adddf3>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005af0:	f7fa fed4 	bl	800089c <__aeabi_ddiv>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4610      	mov	r0, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <_etoa+0x344>)
 8005b02:	f7fa fbeb 	bl	80002dc <__adddf3>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b0e:	f7fa fec5 	bl	800089c <__aeabi_ddiv>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	f7fa fbdf 	bl	80002dc <__adddf3>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4640      	mov	r0, r8
 8005b24:	4649      	mov	r1, r9
 8005b26:	f7fa feb9 	bl	800089c <__aeabi_ddiv>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <_etoa+0x348>)
 8005b38:	f7fa fbd0 	bl	80002dc <__adddf3>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4620      	mov	r0, r4
 8005b42:	4629      	mov	r1, r5
 8005b44:	f7fa fd80 	bl	8000648 <__aeabi_dmul>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8005b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b58:	f7fa ffe8 	bl	8000b2c <__aeabi_dcmplt>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <_etoa+0x2ee>
    expval--;
 8005b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b64:	3b01      	subs	r3, #1
 8005b66:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8005b68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <_etoa+0x340>)
 8005b72:	f7fa fe93 	bl	800089c <__aeabi_ddiv>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	2b63      	cmp	r3, #99	; 0x63
 8005b82:	dc2b      	bgt.n	8005bdc <_etoa+0x34c>
 8005b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b86:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005b8a:	db27      	blt.n	8005bdc <_etoa+0x34c>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e026      	b.n	8005bde <_etoa+0x34e>
 8005b90:	509f79fb 	.word	0x509f79fb
 8005b94:	3fd34413 	.word	0x3fd34413
 8005b98:	8b60c8b3 	.word	0x8b60c8b3
 8005b9c:	3fc68a28 	.word	0x3fc68a28
 8005ba0:	636f4361 	.word	0x636f4361
 8005ba4:	3fd287a7 	.word	0x3fd287a7
 8005ba8:	0979a371 	.word	0x0979a371
 8005bac:	400a934f 	.word	0x400a934f
 8005bb0:	bbb55516 	.word	0xbbb55516
 8005bb4:	40026bb1 	.word	0x40026bb1
 8005bb8:	fefa39ef 	.word	0xfefa39ef
 8005bbc:	3fe62e42 	.word	0x3fe62e42
 8005bc0:	7fefffff 	.word	0x7fefffff
 8005bc4:	3ff80000 	.word	0x3ff80000
 8005bc8:	3fe00000 	.word	0x3fe00000
 8005bcc:	402c0000 	.word	0x402c0000
 8005bd0:	40240000 	.word	0x40240000
 8005bd4:	40180000 	.word	0x40180000
 8005bd8:	3ff00000 	.word	0x3ff00000
 8005bdc:	2305      	movs	r3, #5
 8005bde:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d03d      	beq.n	8005c68 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005bec:	a368      	add	r3, pc, #416	; (adr r3, 8005d90 <_etoa+0x500>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bf6:	f7fa ffad 	bl	8000b54 <__aeabi_dcmpge>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d024      	beq.n	8005c4a <_etoa+0x3ba>
 8005c00:	a365      	add	r3, pc, #404	; (adr r3, 8005d98 <_etoa+0x508>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c0a:	f7fa ff8f 	bl	8000b2c <__aeabi_dcmplt>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8005c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	da07      	bge.n	8005c2e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8005c1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c2c:	e002      	b.n	8005c34 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c48:	e00e      	b.n	8005c68 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <_etoa+0x3d8>
 8005c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <_etoa+0x3d8>
        --prec;
 8005c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8005c6e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d904      	bls.n	8005c82 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	e001      	b.n	8005c86 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <_etoa+0x40c>
 8005c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8005c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <_etoa+0x426>
    value /= conv.F;
 8005ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005caa:	f7fa fdf7 	bl	800089c <__aeabi_ddiv>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005cba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <_etoa+0x440>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e003      	b.n	8005cd8 <_etoa+0x448>
 8005cd0:	ed97 7b04 	vldr	d7, [r7, #16]
 8005cd4:	ed87 7b02 	vstr	d7, [r7, #8]
 8005cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	ed97 0b02 	vldr	d0, [r7, #8]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	6a39      	ldr	r1, [r7, #32]
 8005cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cf8:	f7ff fb72 	bl	80053e0 <_ftoa>
 8005cfc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8005cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d03f      	beq.n	8005d84 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <_etoa+0x484>
 8005d10:	2045      	movs	r0, #69	; 0x45
 8005d12:	e000      	b.n	8005d16 <_etoa+0x486>
 8005d14:	2065      	movs	r0, #101	; 0x65
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	1c53      	adds	r3, r2, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6a39      	ldr	r1, [r7, #32]
 8005d22:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfb8      	it	lt
 8005d2a:	425b      	neglt	r3, r3
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d30:	0fdb      	lsrs	r3, r3, #31
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d36:	3a01      	subs	r2, #1
 8005d38:	2105      	movs	r1, #5
 8005d3a:	9105      	str	r1, [sp, #20]
 8005d3c:	9204      	str	r2, [sp, #16]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	9203      	str	r2, [sp, #12]
 8005d42:	220a      	movs	r2, #10
 8005d44:	9202      	str	r2, [sp, #8]
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	9000      	str	r0, [sp, #0]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	6a39      	ldr	r1, [r7, #32]
 8005d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d52:	f7ff fa71 	bl	8005238 <_ntoa_long>
 8005d56:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005d64:	e007      	b.n	8005d76 <_etoa+0x4e6>
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	1c53      	adds	r3, r2, #1
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6a39      	ldr	r1, [r7, #32]
 8005d72:	2020      	movs	r0, #32
 8005d74:	47a0      	blx	r4
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d8f0      	bhi.n	8005d66 <_etoa+0x4d6>
    }
  }
  return idx;
 8005d84:	69fb      	ldr	r3, [r7, #28]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3764      	adds	r7, #100	; 0x64
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d90:	eb1c432d 	.word	0xeb1c432d
 8005d94:	3f1a36e2 	.word	0x3f1a36e2
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	412e8480 	.word	0x412e8480

08005da0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b0a3      	sub	sp, #140	; 0x8c
 8005da6:	af0a      	add	r7, sp, #40	; 0x28
 8005da8:	6178      	str	r0, [r7, #20]
 8005daa:	6139      	str	r1, [r7, #16]
 8005dac:	60fa      	str	r2, [r7, #12]
 8005dae:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 84cf 	bne.w	800675a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8005dbc:	4ba8      	ldr	r3, [pc, #672]	; (8006060 <_vsnprintf+0x2c0>)
 8005dbe:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005dc0:	f000 bccb 	b.w	800675a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b25      	cmp	r3, #37	; 0x25
 8005dca:	d00d      	beq.n	8005de8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	7818      	ldrb	r0, [r3, #0]
 8005dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dd2:	1c53      	adds	r3, r2, #1
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd6:	697c      	ldr	r4, [r7, #20]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6939      	ldr	r1, [r7, #16]
 8005ddc:	47a0      	blx	r4
      format++;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60bb      	str	r3, [r7, #8]
      continue;
 8005de4:	f000 bcb9 	b.w	800675a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	3b20      	subs	r3, #32
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d857      	bhi.n	8005eac <_vsnprintf+0x10c>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <_vsnprintf+0x64>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e85 	.word	0x08005e85
 8005e08:	08005ead 	.word	0x08005ead
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005e99 	.word	0x08005e99
 8005e14:	08005ead 	.word	0x08005ead
 8005e18:	08005ead 	.word	0x08005ead
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ead 	.word	0x08005ead
 8005e24:	08005ead 	.word	0x08005ead
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005e71 	.word	0x08005e71
 8005e34:	08005ead 	.word	0x08005ead
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005e49 	.word	0x08005e49
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	2301      	movs	r3, #1
 8005e58:	653b      	str	r3, [r7, #80]	; 0x50
 8005e5a:	e02a      	b.n	8005eb2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5e:	f043 0302 	orr.w	r3, r3, #2
 8005e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6e:	e020      	b.n	8005eb2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	f043 0304 	orr.w	r3, r3, #4
 8005e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	653b      	str	r3, [r7, #80]	; 0x50
 8005e82:	e016      	b.n	8005eb2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e86:	f043 0308 	orr.w	r3, r3, #8
 8005e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	2301      	movs	r3, #1
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
 8005e96:	e00c      	b.n	8005eb2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9a:	f043 0310 	orr.w	r3, r3, #16
 8005e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eaa:	e002      	b.n	8005eb2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8005eac:	2300      	movs	r3, #0
 8005eae:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb0:	bf00      	nop
      }
    } while (n);
 8005eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d19c      	bne.n	8005df2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f852 	bl	8004f6a <_is_digit>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d006      	beq.n	8005eda <_vsnprintf+0x13a>
      width = _atoi(&format);
 8005ecc:	f107 0308 	add.w	r3, r7, #8
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff f861 	bl	8004f98 <_atoi>
 8005ed6:	65b8      	str	r0, [r7, #88]	; 0x58
 8005ed8:	e01a      	b.n	8005f10 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee0:	d116      	bne.n	8005f10 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da07      	bge.n	8005f06 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	425b      	negs	r3, r3
 8005f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f04:	e001      	b.n	8005f0a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1a:	d127      	bne.n	8005f6c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8005f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f22:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff f81b 	bl	8004f6a <_is_digit>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff f82a 	bl	8004f98 <_atoi>
 8005f44:	6578      	str	r0, [r7, #84]	; 0x54
 8005f46:	e011      	b.n	8005f6c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d10d      	bne.n	8005f6c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8005f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f64:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3b68      	subs	r3, #104	; 0x68
 8005f72:	2b12      	cmp	r3, #18
 8005f74:	d866      	bhi.n	8006044 <_vsnprintf+0x2a4>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <_vsnprintf+0x1dc>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fef 	.word	0x08005fef
 8005f80:	08006045 	.word	0x08006045
 8005f84:	08006025 	.word	0x08006025
 8005f88:	08006045 	.word	0x08006045
 8005f8c:	08005fc9 	.word	0x08005fc9
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08006045 	.word	0x08006045
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	08006045 	.word	0x08006045
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006045 	.word	0x08006045
 8005fa8:	08006045 	.word	0x08006045
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08006045 	.word	0x08006045
 8005fb4:	08006045 	.word	0x08006045
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	08006045 	.word	0x08006045
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006035 	.word	0x08006035
      case 'l' :
        flags |= FLAGS_LONG;
 8005fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b6c      	cmp	r3, #108	; 0x6c
 8005fdc:	d134      	bne.n	8006048 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8005fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005fec:	e02c      	b.n	8006048 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b68      	cmp	r3, #104	; 0x68
 8006002:	d123      	bne.n	800604c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8006004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	3301      	adds	r3, #1
 8006010:	60bb      	str	r3, [r7, #8]
        }
        break;
 8006012:	e01b      	b.n	800604c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	3301      	adds	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
        break;
 8006022:	e014      	b.n	800604e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800602a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3301      	adds	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
        break;
 8006032:	e00c      	b.n	800604e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3301      	adds	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]
        break;
 8006042:	e004      	b.n	800604e <_vsnprintf+0x2ae>
      default :
        break;
 8006044:	bf00      	nop
 8006046:	e002      	b.n	800604e <_vsnprintf+0x2ae>
        break;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <_vsnprintf+0x2ae>
        break;
 800604c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b67      	cmp	r3, #103	; 0x67
 8006054:	f300 80b8 	bgt.w	80061c8 <_vsnprintf+0x428>
 8006058:	2b25      	cmp	r3, #37	; 0x25
 800605a:	da27      	bge.n	80060ac <_vsnprintf+0x30c>
 800605c:	e370      	b.n	8006740 <_vsnprintf+0x9a0>
 800605e:	bf00      	nop
 8006060:	08004f15 	.word	0x08004f15
 8006064:	3b69      	subs	r3, #105	; 0x69
 8006066:	2201      	movs	r2, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	f249 0241 	movw	r2, #36929	; 0x9041
 8006070:	401a      	ands	r2, r3
 8006072:	2a00      	cmp	r2, #0
 8006074:	bf14      	ite	ne
 8006076:	2201      	movne	r2, #1
 8006078:	2200      	moveq	r2, #0
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	2a00      	cmp	r2, #0
 800607e:	f040 80aa 	bne.w	80061d6 <_vsnprintf+0x436>
 8006082:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8006086:	2a00      	cmp	r2, #0
 8006088:	bf14      	ite	ne
 800608a:	2201      	movne	r2, #1
 800608c:	2200      	moveq	r2, #0
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	2a00      	cmp	r2, #0
 8006092:	f040 82fb 	bne.w	800668c <_vsnprintf+0x8ec>
 8006096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609a:	2b00      	cmp	r3, #0
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 828d 	bne.w	80065c4 <_vsnprintf+0x824>
 80060aa:	e349      	b.n	8006740 <_vsnprintf+0x9a0>
 80060ac:	3b25      	subs	r3, #37	; 0x25
 80060ae:	2b42      	cmp	r3, #66	; 0x42
 80060b0:	f200 8346 	bhi.w	8006740 <_vsnprintf+0x9a0>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <_vsnprintf+0x31c>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	08006729 	.word	0x08006729
 80060c0:	08006741 	.word	0x08006741
 80060c4:	08006741 	.word	0x08006741
 80060c8:	08006741 	.word	0x08006741
 80060cc:	08006741 	.word	0x08006741
 80060d0:	08006741 	.word	0x08006741
 80060d4:	08006741 	.word	0x08006741
 80060d8:	08006741 	.word	0x08006741
 80060dc:	08006741 	.word	0x08006741
 80060e0:	08006741 	.word	0x08006741
 80060e4:	08006741 	.word	0x08006741
 80060e8:	08006741 	.word	0x08006741
 80060ec:	08006741 	.word	0x08006741
 80060f0:	08006741 	.word	0x08006741
 80060f4:	08006741 	.word	0x08006741
 80060f8:	08006741 	.word	0x08006741
 80060fc:	08006741 	.word	0x08006741
 8006100:	08006741 	.word	0x08006741
 8006104:	08006741 	.word	0x08006741
 8006108:	08006741 	.word	0x08006741
 800610c:	08006741 	.word	0x08006741
 8006110:	08006741 	.word	0x08006741
 8006114:	08006741 	.word	0x08006741
 8006118:	08006741 	.word	0x08006741
 800611c:	08006741 	.word	0x08006741
 8006120:	08006741 	.word	0x08006741
 8006124:	08006741 	.word	0x08006741
 8006128:	08006741 	.word	0x08006741
 800612c:	08006741 	.word	0x08006741
 8006130:	08006741 	.word	0x08006741
 8006134:	08006741 	.word	0x08006741
 8006138:	08006741 	.word	0x08006741
 800613c:	080064dd 	.word	0x080064dd
 8006140:	0800648d 	.word	0x0800648d
 8006144:	080064dd 	.word	0x080064dd
 8006148:	08006741 	.word	0x08006741
 800614c:	08006741 	.word	0x08006741
 8006150:	08006741 	.word	0x08006741
 8006154:	08006741 	.word	0x08006741
 8006158:	08006741 	.word	0x08006741
 800615c:	08006741 	.word	0x08006741
 8006160:	08006741 	.word	0x08006741
 8006164:	08006741 	.word	0x08006741
 8006168:	08006741 	.word	0x08006741
 800616c:	08006741 	.word	0x08006741
 8006170:	08006741 	.word	0x08006741
 8006174:	08006741 	.word	0x08006741
 8006178:	08006741 	.word	0x08006741
 800617c:	08006741 	.word	0x08006741
 8006180:	08006741 	.word	0x08006741
 8006184:	08006741 	.word	0x08006741
 8006188:	080061d7 	.word	0x080061d7
 800618c:	08006741 	.word	0x08006741
 8006190:	08006741 	.word	0x08006741
 8006194:	08006741 	.word	0x08006741
 8006198:	08006741 	.word	0x08006741
 800619c:	08006741 	.word	0x08006741
 80061a0:	08006741 	.word	0x08006741
 80061a4:	08006741 	.word	0x08006741
 80061a8:	08006741 	.word	0x08006741
 80061ac:	08006741 	.word	0x08006741
 80061b0:	080061d7 	.word	0x080061d7
 80061b4:	0800654d 	.word	0x0800654d
 80061b8:	080061d7 	.word	0x080061d7
 80061bc:	080064dd 	.word	0x080064dd
 80061c0:	0800648d 	.word	0x0800648d
 80061c4:	080064dd 	.word	0x080064dd
 80061c8:	2b78      	cmp	r3, #120	; 0x78
 80061ca:	f300 82b9 	bgt.w	8006740 <_vsnprintf+0x9a0>
 80061ce:	2b69      	cmp	r3, #105	; 0x69
 80061d0:	f6bf af48 	bge.w	8006064 <_vsnprintf+0x2c4>
 80061d4:	e2b4      	b.n	8006740 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b78      	cmp	r3, #120	; 0x78
 80061dc:	d003      	beq.n	80061e6 <_vsnprintf+0x446>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b58      	cmp	r3, #88	; 0x58
 80061e4:	d102      	bne.n	80061ec <_vsnprintf+0x44c>
          base = 16U;
 80061e6:	2310      	movs	r3, #16
 80061e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ea:	e013      	b.n	8006214 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b6f      	cmp	r3, #111	; 0x6f
 80061f2:	d102      	bne.n	80061fa <_vsnprintf+0x45a>
          base =  8U;
 80061f4:	2308      	movs	r3, #8
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f8:	e00c      	b.n	8006214 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b62      	cmp	r3, #98	; 0x62
 8006200:	d102      	bne.n	8006208 <_vsnprintf+0x468>
          base =  2U;
 8006202:	2302      	movs	r3, #2
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
 8006206:	e005      	b.n	8006214 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8006208:	230a      	movs	r3, #10
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800620c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620e:	f023 0310 	bic.w	r3, r3, #16
 8006212:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b58      	cmp	r3, #88	; 0x58
 800621a:	d103      	bne.n	8006224 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800621c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621e:	f043 0320 	orr.w	r3, r3, #32
 8006222:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b69      	cmp	r3, #105	; 0x69
 800622a:	d007      	beq.n	800623c <_vsnprintf+0x49c>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b64      	cmp	r3, #100	; 0x64
 8006232:	d003      	beq.n	800623c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006236:	f023 030c 	bic.w	r3, r3, #12
 800623a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800623c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8006246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b69      	cmp	r3, #105	; 0x69
 8006254:	d004      	beq.n	8006260 <_vsnprintf+0x4c0>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	f040 8098 	bne.w	8006390 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8006260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006266:	2b00      	cmp	r3, #0
 8006268:	d031      	beq.n	80062ce <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800626a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800626e:	3307      	adds	r3, #7
 8006270:	f023 0307 	bic.w	r3, r3, #7
 8006274:	f103 0208 	add.w	r2, r3, #8
 8006278:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	da06      	bge.n	800629a <_vsnprintf+0x4fa>
 800628c:	2100      	movs	r1, #0
 800628e:	f1d2 0800 	rsbs	r8, r2, #0
 8006292:	eb61 0903 	sbc.w	r9, r1, r3
 8006296:	4642      	mov	r2, r8
 8006298:	464b      	mov	r3, r9
 800629a:	69f9      	ldr	r1, [r7, #28]
 800629c:	0fc9      	lsrs	r1, r1, #31
 800629e:	b2c9      	uxtb	r1, r1
 80062a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80062a2:	2400      	movs	r4, #0
 80062a4:	4682      	mov	sl, r0
 80062a6:	46a3      	mov	fp, r4
 80062a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80062aa:	9008      	str	r0, [sp, #32]
 80062ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80062ae:	9007      	str	r0, [sp, #28]
 80062b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80062b2:	9006      	str	r0, [sp, #24]
 80062b4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80062b8:	9102      	str	r1, [sp, #8]
 80062ba:	e9cd 2300 	strd	r2, r3, [sp]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062c2:	6939      	ldr	r1, [r7, #16]
 80062c4:	6978      	ldr	r0, [r7, #20]
 80062c6:	f7ff f81d 	bl	8005304 <_ntoa_long_long>
 80062ca:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80062cc:	e0da      	b.n	8006484 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80062ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d020      	beq.n	800631a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80062d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfb8      	it	lt
 80062ec:	425b      	neglt	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	0fdb      	lsrs	r3, r3, #31
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062f8:	9205      	str	r2, [sp, #20]
 80062fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062fc:	9204      	str	r2, [sp, #16]
 80062fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006300:	9203      	str	r2, [sp, #12]
 8006302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	9100      	str	r1, [sp, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800630e:	6939      	ldr	r1, [r7, #16]
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f7fe ff91 	bl	8005238 <_ntoa_long>
 8006316:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8006318:	e0b4      	b.n	8006484 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <_vsnprintf+0x594>
 8006324:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	e012      	b.n	800635a <_vsnprintf+0x5ba>
 8006334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <_vsnprintf+0x5ae>
 800633e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	b21b      	sxth	r3, r3
 800634c:	e005      	b.n	800635a <_vsnprintf+0x5ba>
 800634e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	bfb8      	it	lt
 8006362:	425b      	neglt	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	0fdb      	lsrs	r3, r3, #31
 800636a:	b2db      	uxtb	r3, r3
 800636c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800636e:	9205      	str	r2, [sp, #20]
 8006370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006372:	9204      	str	r2, [sp, #16]
 8006374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006376:	9203      	str	r2, [sp, #12]
 8006378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637a:	9202      	str	r2, [sp, #8]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	9100      	str	r1, [sp, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006384:	6939      	ldr	r1, [r7, #16]
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f7fe ff56 	bl	8005238 <_ntoa_long>
 800638c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800638e:	e079      	b.n	8006484 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8006390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006396:	2b00      	cmp	r3, #0
 8006398:	d022      	beq.n	80063e0 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800639a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800639e:	3307      	adds	r3, #7
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	f103 0208 	add.w	r2, r3, #8
 80063a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063b2:	2000      	movs	r0, #0
 80063b4:	460d      	mov	r5, r1
 80063b6:	4606      	mov	r6, r0
 80063b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80063ba:	9108      	str	r1, [sp, #32]
 80063bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063be:	9107      	str	r1, [sp, #28]
 80063c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c2:	9106      	str	r1, [sp, #24]
 80063c4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80063c8:	2100      	movs	r1, #0
 80063ca:	9102      	str	r1, [sp, #8]
 80063cc:	e9cd 2300 	strd	r2, r3, [sp]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d4:	6939      	ldr	r1, [r7, #16]
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7fe ff94 	bl	8005304 <_ntoa_long_long>
 80063dc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80063de:	e051      	b.n	8006484 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80063e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d018      	beq.n	800641c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80063ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063f8:	9205      	str	r2, [sp, #20]
 80063fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fc:	9204      	str	r2, [sp, #16]
 80063fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006400:	9203      	str	r2, [sp, #12]
 8006402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006404:	9202      	str	r2, [sp, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	9201      	str	r2, [sp, #4]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006410:	6939      	ldr	r1, [r7, #16]
 8006412:	6978      	ldr	r0, [r7, #20]
 8006414:	f7fe ff10 	bl	8005238 <_ntoa_long>
 8006418:	64f8      	str	r0, [r7, #76]	; 0x4c
 800641a:	e033      	b.n	8006484 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800641c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <_vsnprintf+0x696>
 8006426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e012      	b.n	800645c <_vsnprintf+0x6bc>
 8006436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <_vsnprintf+0x6b0>
 8006440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	e005      	b.n	800645c <_vsnprintf+0x6bc>
 8006450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800645e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646c:	9302      	str	r3, [sp, #8]
 800646e:	2300      	movs	r3, #0
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800647a:	6939      	ldr	r1, [r7, #16]
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f7fe fedb 	bl	8005238 <_ntoa_long>
 8006482:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	3301      	adds	r3, #1
 8006488:	60bb      	str	r3, [r7, #8]
        break;
 800648a:	e166      	b.n	800675a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b46      	cmp	r3, #70	; 0x46
 8006492:	d103      	bne.n	800649c <_vsnprintf+0x6fc>
 8006494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006496:	f043 0320 	orr.w	r3, r3, #32
 800649a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800649c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064a0:	3307      	adds	r3, #7
 80064a2:	f023 0307 	bic.w	r3, r3, #7
 80064a6:	f103 0208 	add.w	r2, r3, #8
 80064aa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80064ae:	ed93 7b00 	vldr	d7, [r3]
 80064b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	eeb0 0a47 	vmov.f32	s0, s14
 80064c2:	eef0 0a67 	vmov.f32	s1, s15
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f7fe ff87 	bl	80053e0 <_ftoa>
 80064d2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60bb      	str	r3, [r7, #8]
        break;
 80064da:	e13e      	b.n	800675a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b67      	cmp	r3, #103	; 0x67
 80064e2:	d003      	beq.n	80064ec <_vsnprintf+0x74c>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b47      	cmp	r3, #71	; 0x47
 80064ea:	d103      	bne.n	80064f4 <_vsnprintf+0x754>
 80064ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b45      	cmp	r3, #69	; 0x45
 80064fa:	d003      	beq.n	8006504 <_vsnprintf+0x764>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b47      	cmp	r3, #71	; 0x47
 8006502:	d103      	bne.n	800650c <_vsnprintf+0x76c>
 8006504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800650c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	f103 0208 	add.w	r2, r3, #8
 800651a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800651e:	ed93 7b00 	vldr	d7, [r3]
 8006522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	eeb0 0a47 	vmov.f32	s0, s14
 8006532:	eef0 0a67 	vmov.f32	s1, s15
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800653a:	6939      	ldr	r1, [r7, #16]
 800653c:	6978      	ldr	r0, [r7, #20]
 800653e:	f7ff f9a7 	bl	8005890 <_etoa>
 8006542:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3301      	adds	r3, #1
 8006548:	60bb      	str	r3, [r7, #8]
        break;
 800654a:	e106      	b.n	800675a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10e      	bne.n	8006578 <_vsnprintf+0x7d8>
          while (l++ < width) {
 800655a:	e007      	b.n	800656c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 800655c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800655e:	1c53      	adds	r3, r2, #1
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006562:	697c      	ldr	r4, [r7, #20]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6939      	ldr	r1, [r7, #16]
 8006568:	2020      	movs	r0, #32
 800656a:	47a0      	blx	r4
          while (l++ < width) {
 800656c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	647a      	str	r2, [r7, #68]	; 0x44
 8006572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006574:	429a      	cmp	r2, r3
 8006576:	d8f1      	bhi.n	800655c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8006578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2d8      	uxtb	r0, r3
 8006586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006588:	1c53      	adds	r3, r2, #1
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658c:	697c      	ldr	r4, [r7, #20]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6939      	ldr	r1, [r7, #16]
 8006592:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8006594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <_vsnprintf+0x81c>
          while (l++ < width) {
 800659e:	e007      	b.n	80065b0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80065a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a2:	1c53      	adds	r3, r2, #1
 80065a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a6:	697c      	ldr	r4, [r7, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6939      	ldr	r1, [r7, #16]
 80065ac:	2020      	movs	r0, #32
 80065ae:	47a0      	blx	r4
          while (l++ < width) {
 80065b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	647a      	str	r2, [r7, #68]	; 0x44
 80065b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d8f1      	bhi.n	80065a0 <_vsnprintf+0x800>
          }
        }
        format++;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3301      	adds	r3, #1
 80065c0:	60bb      	str	r3, [r7, #8]
        break;
 80065c2:	e0ca      	b.n	800675a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80065c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80065d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <_vsnprintf+0x83c>
 80065d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065da:	e001      	b.n	80065e0 <_vsnprintf+0x840>
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	4619      	mov	r1, r3
 80065e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80065e4:	f7fe fca4 	bl	8004f30 <_strnlen_s>
 80065e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80065ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80065f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf28      	it	cs
 80065fc:	4613      	movcs	r3, r2
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8006600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11a      	bne.n	8006640 <_vsnprintf+0x8a0>
          while (l++ < width) {
 800660a:	e007      	b.n	800661c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 800660c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800660e:	1c53      	adds	r3, r2, #1
 8006610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006612:	697c      	ldr	r4, [r7, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6939      	ldr	r1, [r7, #16]
 8006618:	2020      	movs	r0, #32
 800661a:	47a0      	blx	r4
          while (l++ < width) {
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006624:	429a      	cmp	r2, r3
 8006626:	d8f1      	bhi.n	800660c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006628:	e00a      	b.n	8006640 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 800662a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	643a      	str	r2, [r7, #64]	; 0x40
 8006630:	7818      	ldrb	r0, [r3, #0]
 8006632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006634:	1c53      	adds	r3, r2, #1
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	697c      	ldr	r4, [r7, #20]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6939      	ldr	r1, [r7, #16]
 800663e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <_vsnprintf+0x8bc>
 8006648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0eb      	beq.n	800662a <_vsnprintf+0x88a>
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	657a      	str	r2, [r7, #84]	; 0x54
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800665c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8006666:	e007      	b.n	8006678 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8006668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800666a:	1c53      	adds	r3, r2, #1
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666e:	697c      	ldr	r4, [r7, #20]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6939      	ldr	r1, [r7, #16]
 8006674:	2020      	movs	r0, #32
 8006676:	47a0      	blx	r4
          while (l++ < width) {
 8006678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800667e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006680:	429a      	cmp	r2, r3
 8006682:	d8f1      	bhi.n	8006668 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3301      	adds	r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
        break;
 800668a:	e066      	b.n	800675a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800668c:	2308      	movs	r3, #8
 800668e:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006692:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8006696:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800669e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d023      	beq.n	80066ee <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80066a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	603a      	str	r2, [r7, #0]
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c4:	9306      	str	r3, [sp, #24]
 80066c6:	f04f 0210 	mov.w	r2, #16
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9302      	str	r3, [sp, #8]
 80066d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066da:	e9cd 3400 	strd	r3, r4, [sp]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066e2:	6939      	ldr	r1, [r7, #16]
 80066e4:	6978      	ldr	r0, [r7, #20]
 80066e6:	f7fe fe0d 	bl	8005304 <_ntoa_long_long>
 80066ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80066ec:	e018      	b.n	8006720 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80066ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fe:	9305      	str	r3, [sp, #20]
 8006700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	2310      	movs	r3, #16
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	2300      	movs	r3, #0
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	9200      	str	r2, [sp, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	6978      	ldr	r0, [r7, #20]
 800671a:	f7fe fd8d 	bl	8005238 <_ntoa_long>
 800671e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3301      	adds	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
        break;
 8006726:	e018      	b.n	800675a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800672a:	1c53      	adds	r3, r2, #1
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672e:	697c      	ldr	r4, [r7, #20]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6939      	ldr	r1, [r7, #16]
 8006734:	2025      	movs	r0, #37	; 0x25
 8006736:	47a0      	blx	r4
        format++;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	3301      	adds	r3, #1
 800673c:	60bb      	str	r3, [r7, #8]
        break;
 800673e:	e00c      	b.n	800675a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	7818      	ldrb	r0, [r3, #0]
 8006744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006746:	1c53      	adds	r3, r2, #1
 8006748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800674a:	697c      	ldr	r4, [r7, #20]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6939      	ldr	r1, [r7, #16]
 8006750:	47a0      	blx	r4
        format++;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	3301      	adds	r3, #1
 8006756:	60bb      	str	r3, [r7, #8]
        break;
 8006758:	bf00      	nop
  while (*format)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f47f ab30 	bne.w	8005dc4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <_vsnprintf+0x9d2>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e5a      	subs	r2, r3, #1
 8006770:	e000      	b.n	8006774 <_vsnprintf+0x9d4>
 8006772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006774:	697c      	ldr	r4, [r7, #20]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6939      	ldr	r1, [r7, #16]
 800677a:	2000      	movs	r0, #0
 800677c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006780:	4618      	mov	r0, r3
 8006782:	3764      	adds	r7, #100	; 0x64
 8006784:	46bd      	mov	sp, r7
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	bf00      	nop

0800678c <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800678c:	b40e      	push	{r1, r2, r3}
 800678e:	b580      	push	{r7, lr}
 8006790:	b087      	sub	sp, #28
 8006792:	af02      	add	r7, sp, #8
 8006794:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8006796:	f107 0320 	add.w	r3, r7, #32
 800679a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4805      	ldr	r0, [pc, #20]	; (80067c0 <sprintf_+0x34>)
 80067aa:	f7ff faf9 	bl	8005da0 <_vsnprintf>
 80067ae:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80067b0:	68fb      	ldr	r3, [r7, #12]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067bc:	b003      	add	sp, #12
 80067be:	4770      	bx	lr
 80067c0:	08004ee7 	.word	0x08004ee7

080067c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_MspInit+0x4c>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <HAL_MspInit+0x4c>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
 80067d6:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <HAL_MspInit+0x4c>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_MspInit+0x4c>)
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <HAL_MspInit+0x4c>)
 80067e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067ec:	6453      	str	r3, [r2, #68]	; 0x44
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <HAL_MspInit+0x4c>)
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80067fa:	2200      	movs	r2, #0
 80067fc:	210f      	movs	r1, #15
 80067fe:	f06f 0001 	mvn.w	r0, #1
 8006802:	f004 fa13 	bl	800ac2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40023800 	.word	0x40023800

08006814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b0aa      	sub	sp, #168	; 0xa8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	2280      	movs	r2, #128	; 0x80
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f00e fdca 	bl	80153ce <memset>
  if(hi2c->Instance==I2C1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_I2C_MspInit+0xb4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d13c      	bne.n	80068be <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006848:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800684a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800684e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	4618      	mov	r0, r3
 8006856:	f006 facf 	bl	800cdf8 <HAL_RCCEx_PeriphCLKConfig>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8006860:	f7fe fb3c 	bl	8004edc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006864:	4b19      	ldr	r3, [pc, #100]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 800686a:	f043 0302 	orr.w	r3, r3, #2
 800686e:	6313      	str	r3, [r2, #48]	; 0x30
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 800687c:	23c0      	movs	r3, #192	; 0xc0
 800687e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006882:	2312      	movs	r3, #18
 8006884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688e:	2303      	movs	r3, #3
 8006890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006894:	2304      	movs	r3, #4
 8006896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800689a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800689e:	4619      	mov	r1, r3
 80068a0:	480b      	ldr	r0, [pc, #44]	; (80068d0 <HAL_I2C_MspInit+0xbc>)
 80068a2:	f004 fdf7 	bl	800b494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 80068ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068b0:	6413      	str	r3, [r2, #64]	; 0x40
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_I2C_MspInit+0xb8>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80068be:	bf00      	nop
 80068c0:	37a8      	adds	r7, #168	; 0xa8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40005400 	.word	0x40005400
 80068cc:	40023800 	.word	0x40023800
 80068d0:	40020400 	.word	0x40020400

080068d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 031c 	add.w	r3, r7, #28
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2e      	ldr	r2, [pc, #184]	; (80069ac <HAL_SPI_MspInit+0xd8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d128      	bne.n	8006948 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068f6:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 80068f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fa:	4a2d      	ldr	r2, [pc, #180]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 80068fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006900:	6453      	str	r3, [r2, #68]	; 0x44
 8006902:	4b2b      	ldr	r3, [pc, #172]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800690e:	4b28      	ldr	r3, [pc, #160]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6313      	str	r3, [r2, #48]	; 0x30
 800691a:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8006926:	23f0      	movs	r3, #240	; 0xf0
 8006928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800692a:	2302      	movs	r3, #2
 800692c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006932:	2303      	movs	r3, #3
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006936:	2305      	movs	r3, #5
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800693a:	f107 031c 	add.w	r3, r7, #28
 800693e:	4619      	mov	r1, r3
 8006940:	481c      	ldr	r0, [pc, #112]	; (80069b4 <HAL_SPI_MspInit+0xe0>)
 8006942:	f004 fda7 	bl	800b494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006946:	e02d      	b.n	80069a4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_SPI_MspInit+0xe4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d128      	bne.n	80069a4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a16      	ldr	r2, [pc, #88]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	6313      	str	r3, [r2, #48]	; 0x30
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <HAL_SPI_MspInit+0xdc>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 8006982:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006988:	2302      	movs	r3, #2
 800698a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006994:	2305      	movs	r3, #5
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006998:	f107 031c 	add.w	r3, r7, #28
 800699c:	4619      	mov	r1, r3
 800699e:	4807      	ldr	r0, [pc, #28]	; (80069bc <HAL_SPI_MspInit+0xe8>)
 80069a0:	f004 fd78 	bl	800b494 <HAL_GPIO_Init>
}
 80069a4:	bf00      	nop
 80069a6:	3730      	adds	r7, #48	; 0x30
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40013000 	.word	0x40013000
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40020000 	.word	0x40020000
 80069b8:	40003800 	.word	0x40003800
 80069bc:	40020400 	.word	0x40020400

080069c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <HAL_TIM_Base_MspInit+0x38>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10b      	bne.n	80069ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <HAL_TIM_Base_MspInit+0x3c>)
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	4a09      	ldr	r2, [pc, #36]	; (80069fc <HAL_TIM_Base_MspInit+0x3c>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6453      	str	r3, [r2, #68]	; 0x44
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <HAL_TIM_Base_MspInit+0x3c>)
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40023800 	.word	0x40023800

08006a00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIM_IC_MspInit+0x8c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d12f      	bne.n	8006a82 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a28:	f043 0302 	orr.w	r3, r3, #2
 8006a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a2e:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a40:	f043 0304 	orr.w	r3, r3, #4
 8006a44:	6313      	str	r3, [r2, #48]	; 0x30
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <HAL_TIM_IC_MspInit+0x90>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a56:	2302      	movs	r3, #2
 8006a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a62:	2302      	movs	r3, #2
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4809      	ldr	r0, [pc, #36]	; (8006a94 <HAL_TIM_IC_MspInit+0x94>)
 8006a6e:	f004 fd11 	bl	800b494 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006a72:	2200      	movs	r2, #0
 8006a74:	2106      	movs	r1, #6
 8006a76:	201d      	movs	r0, #29
 8006a78:	f004 f8d8 	bl	800ac2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a7c:	201d      	movs	r0, #29
 8006a7e:	f004 f8f1 	bl	800ac64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006a82:	bf00      	nop
 8006a84:	3728      	adds	r7, #40	; 0x28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40023800 	.word	0x40023800
 8006a94:	40020800 	.word	0x40020800

08006a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	605a      	str	r2, [r3, #4]
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <HAL_TIM_MspPostInit+0x64>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d11c      	bne.n	8006af4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <HAL_TIM_MspPostInit+0x68>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <HAL_TIM_MspPostInit+0x68>)
 8006ac0:	f043 0310 	orr.w	r3, r3, #16
 8006ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <HAL_TIM_MspPostInit+0x68>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 8006ad2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8006ad6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ae8:	f107 030c 	add.w	r3, r7, #12
 8006aec:	4619      	mov	r1, r3
 8006aee:	4805      	ldr	r0, [pc, #20]	; (8006b04 <HAL_TIM_MspPostInit+0x6c>)
 8006af0:	f004 fcd0 	bl	800b494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40021000 	.word	0x40021000

08006b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b0ae      	sub	sp, #184	; 0xb8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b24:	2280      	movs	r2, #128	; 0x80
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f00e fc50 	bl	80153ce <memset>
  if(huart->Instance==UART4)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a83      	ldr	r2, [pc, #524]	; (8006d40 <HAL_UART_MspInit+0x238>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d144      	bne.n	8006bc2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f006 f956 	bl	800cdf8 <HAL_RCCEx_PeriphCLKConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006b52:	f7fe f9c3 	bl	8004edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006b56:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	4a7a      	ldr	r2, [pc, #488]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b60:	6413      	str	r3, [r2, #64]	; 0x40
 8006b62:	4b78      	ldr	r3, [pc, #480]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b6e:	4b75      	ldr	r3, [pc, #468]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a74      	ldr	r2, [pc, #464]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7a:	4b72      	ldr	r3, [pc, #456]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8006b86:	2303      	movs	r3, #3
 8006b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4867      	ldr	r0, [pc, #412]	; (8006d48 <HAL_UART_MspInit+0x240>)
 8006bac:	f004 fc72 	bl	800b494 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2106      	movs	r1, #6
 8006bb4:	2034      	movs	r0, #52	; 0x34
 8006bb6:	f004 f839 	bl	800ac2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006bba:	2034      	movs	r0, #52	; 0x34
 8006bbc:	f004 f852 	bl	800ac64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006bc0:	e0b9      	b.n	8006d36 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a61      	ldr	r2, [pc, #388]	; (8006d4c <HAL_UART_MspInit+0x244>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d172      	bne.n	8006cb2 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f006 f90d 	bl	800cdf8 <HAL_RCCEx_PeriphCLKConfig>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006be4:	f7fe f97a 	bl	8004edc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006be8:	4b56      	ldr	r3, [pc, #344]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	4a55      	ldr	r2, [pc, #340]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf4:	4b53      	ldr	r3, [pc, #332]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	4a4f      	ldr	r2, [pc, #316]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006c06:	f043 0308 	orr.w	r3, r3, #8
 8006c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0c:	4b4d      	ldr	r3, [pc, #308]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8006c18:	2360      	movs	r3, #96	; 0x60
 8006c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c30:	2307      	movs	r3, #7
 8006c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4844      	ldr	r0, [pc, #272]	; (8006d50 <HAL_UART_MspInit+0x248>)
 8006c3e:	f004 fc29 	bl	800b494 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006c42:	4b44      	ldr	r3, [pc, #272]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c44:	4a44      	ldr	r2, [pc, #272]	; (8006d58 <HAL_UART_MspInit+0x250>)
 8006c46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c50:	4b40      	ldr	r3, [pc, #256]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c56:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c5c:	4b3d      	ldr	r3, [pc, #244]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c64:	4b3b      	ldr	r3, [pc, #236]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c6a:	4b3a      	ldr	r3, [pc, #232]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006c70:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c76:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006c7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c7e:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006c84:	4833      	ldr	r0, [pc, #204]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c86:	f003 fffb 	bl	800ac80 <HAL_DMA_Init>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8006c90:	f7fe f924 	bl	8004edc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a2f      	ldr	r2, [pc, #188]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c98:	675a      	str	r2, [r3, #116]	; 0x74
 8006c9a:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <HAL_UART_MspInit+0x24c>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2107      	movs	r1, #7
 8006ca4:	2026      	movs	r0, #38	; 0x26
 8006ca6:	f003 ffc1 	bl	800ac2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006caa:	2026      	movs	r0, #38	; 0x26
 8006cac:	f003 ffda 	bl	800ac64 <HAL_NVIC_EnableIRQ>
}
 8006cb0:	e041      	b.n	8006d36 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <HAL_UART_MspInit+0x254>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d13c      	bne.n	8006d36 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f006 f894 	bl	800cdf8 <HAL_RCCEx_PeriphCLKConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8006cd6:	f7fe f901 	bl	8004edc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006cda:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ce6:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006cf8:	f043 0304 	orr.w	r3, r3, #4
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_UART_MspInit+0x23c>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8006d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d12:	2302      	movs	r3, #2
 8006d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d24:	2307      	movs	r3, #7
 8006d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	480b      	ldr	r0, [pc, #44]	; (8006d60 <HAL_UART_MspInit+0x258>)
 8006d32:	f004 fbaf 	bl	800b494 <HAL_GPIO_Init>
}
 8006d36:	bf00      	nop
 8006d38:	37b8      	adds	r7, #184	; 0xb8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40004c00 	.word	0x40004c00
 8006d44:	40023800 	.word	0x40023800
 8006d48:	40020000 	.word	0x40020000
 8006d4c:	40004400 	.word	0x40004400
 8006d50:	40020c00 	.word	0x40020c00
 8006d54:	20000d10 	.word	0x20000d10
 8006d58:	40026088 	.word	0x40026088
 8006d5c:	40004800 	.word	0x40004800
 8006d60:	40020800 	.word	0x40020800

08006d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006d74:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <HAL_InitTick+0xe4>)
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <HAL_InitTick+0xe4>)
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d80:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <HAL_InitTick+0xe4>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d8c:	f107 0210 	add.w	r2, r7, #16
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f005 fffc 	bl	800cd94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d103      	bne.n	8006dae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006da6:	f005 ffcd 	bl	800cd44 <HAL_RCC_GetPCLK1Freq>
 8006daa:	6378      	str	r0, [r7, #52]	; 0x34
 8006dac:	e004      	b.n	8006db8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006dae:	f005 ffc9 	bl	800cd44 <HAL_RCC_GetPCLK1Freq>
 8006db2:	4603      	mov	r3, r0
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <HAL_InitTick+0xe8>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	0c9b      	lsrs	r3, r3, #18
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <HAL_InitTick+0xec>)
 8006dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <HAL_InitTick+0xec>)
 8006dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_InitTick+0xec>)
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <HAL_InitTick+0xec>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <HAL_InitTick+0xec>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_InitTick+0xec>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8006dee:	4818      	ldr	r0, [pc, #96]	; (8006e50 <HAL_InitTick+0xec>)
 8006df0:	f007 faac 	bl	800e34c <HAL_TIM_Base_Init>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11b      	bne.n	8006e3a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006e02:	4813      	ldr	r0, [pc, #76]	; (8006e50 <HAL_InitTick+0xec>)
 8006e04:	f007 fafa 	bl	800e3fc <HAL_TIM_Base_Start_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d111      	bne.n	8006e3a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e16:	201c      	movs	r0, #28
 8006e18:	f003 ff24 	bl	800ac64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d808      	bhi.n	8006e34 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006e22:	2200      	movs	r2, #0
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	201c      	movs	r0, #28
 8006e28:	f003 ff00 	bl	800ac2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e2c:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <HAL_InitTick+0xf0>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	e002      	b.n	8006e3a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3738      	adds	r7, #56	; 0x38
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	431bde83 	.word	0x431bde83
 8006e50:	20000db4 	.word	0x20000db4
 8006e54:	2000000c 	.word	0x2000000c

08006e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e5c:	e7fe      	b.n	8006e5c <NMI_Handler+0x4>

08006e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e62:	e7fe      	b.n	8006e62 <HardFault_Handler+0x4>

08006e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e68:	e7fe      	b.n	8006e68 <MemManage_Handler+0x4>

08006e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e6e:	e7fe      	b.n	8006e6e <BusFault_Handler+0x4>

08006e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e74:	e7fe      	b.n	8006e74 <UsageFault_Handler+0x4>

08006e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e76:	b480      	push	{r7}
 8006e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <DMA1_Stream5_IRQHandler+0x10>)
 8006e8a:	f004 f899 	bl	800afc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000d10 	.word	0x20000d10

08006e98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006e9c:	4802      	ldr	r0, [pc, #8]	; (8006ea8 <TIM2_IRQHandler+0x10>)
 8006e9e:	f007 fe29 	bl	800eaf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000db4 	.word	0x20000db4

08006eac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006eb0:	4802      	ldr	r0, [pc, #8]	; (8006ebc <TIM3_IRQHandler+0x10>)
 8006eb2:	f007 fe1f 	bl	800eaf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000b2c 	.word	0x20000b2c

08006ec0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006ec4:	4802      	ldr	r0, [pc, #8]	; (8006ed0 <USART2_IRQHandler+0x10>)
 8006ec6:	f009 f97d 	bl	80101c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000c00 	.word	0x20000c00

08006ed4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006ed8:	4802      	ldr	r0, [pc, #8]	; (8006ee4 <UART4_IRQHandler+0x10>)
 8006eda:	f009 f973 	bl	80101c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006ede:	bf00      	nop
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000b78 	.word	0x20000b78

08006ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  return 1;
 8006eec:	2301      	movs	r3, #1
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <_kill>:

int _kill(int pid, int sig)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f02:	f00e fb1f 	bl	8015544 <__errno>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2216      	movs	r2, #22
 8006f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_exit>:

void _exit (int status)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f20:	f04f 31ff 	mov.w	r1, #4294967295
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ffe7 	bl	8006ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f2a:	e7fe      	b.n	8006f2a <_exit+0x12>

08006f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	e00a      	b.n	8006f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006f3e:	f3af 8000 	nop.w
 8006f42:	4601      	mov	r1, r0
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	60ba      	str	r2, [r7, #8]
 8006f4a:	b2ca      	uxtb	r2, r1
 8006f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	3301      	adds	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	dbf0      	blt.n	8006f3e <_read+0x12>
  }

  return len;
 8006f5c:	687b      	ldr	r3, [r7, #4]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e009      	b.n	8006f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	60ba      	str	r2, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	dbf1      	blt.n	8006f78 <_write+0x12>
  }
  return len;
 8006f94:	687b      	ldr	r3, [r7, #4]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <_close>:

int _close(int file)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <_isatty>:

int _isatty(int file)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006fde:	2301      	movs	r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <_sbrk+0x5c>)
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <_sbrk+0x60>)
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <_sbrk+0x64>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <_sbrk+0x64>)
 8007026:	4a12      	ldr	r2, [pc, #72]	; (8007070 <_sbrk+0x68>)
 8007028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <_sbrk+0x64>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d207      	bcs.n	8007048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007038:	f00e fa84 	bl	8015544 <__errno>
 800703c:	4603      	mov	r3, r0
 800703e:	220c      	movs	r2, #12
 8007040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	e009      	b.n	800705c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <_sbrk+0x64>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <_sbrk+0x64>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <_sbrk+0x64>)
 8007058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800705a:	68fb      	ldr	r3, [r7, #12]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20040000 	.word	0x20040000
 8007068:	00000400 	.word	0x00000400
 800706c:	20000e00 	.word	0x20000e00
 8007070:	200090a0 	.word	0x200090a0

08007074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <SystemInit+0x20>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	4a05      	ldr	r2, [pc, #20]	; (8007094 <SystemInit+0x20>)
 8007080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000ed00 	.word	0xe000ed00

08007098 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80070a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80070a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070bc <FusionDegreesToRadians+0x24>
 80070aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070ae:	eeb0 0a67 	vmov.f32	s0, s15
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	3c8efa35 	.word	0x3c8efa35

080070c0 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	105a      	asrs	r2, r3, #1
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <FusionFastInverseSqrt+0x54>)
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80070d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80070dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80070e0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8007118 <FusionFastInverseSqrt+0x58>
 80070e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80070e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80070f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070f8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800711c <FusionFastInverseSqrt+0x5c>
 80070fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007104:	eeb0 0a67 	vmov.f32	s0, s15
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	5f1f1412 	.word	0x5f1f1412
 8007118:	3f36d312 	.word	0x3f36d312
 800711c:	3fd851ff 	.word	0x3fd851ff

08007120 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	eef0 6a40 	vmov.f32	s13, s0
 800712a:	eeb0 7a60 	vmov.f32	s14, s1
 800712e:	eef0 7a41 	vmov.f32	s15, s2
 8007132:	edc7 6a01 	vstr	s13, [r7, #4]
 8007136:	ed87 7a02 	vstr	s14, [r7, #8]
 800713a:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800713e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714a:	d10f      	bne.n	800716c <FusionVectorIsZero+0x4c>
 800714c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007158:	d108      	bne.n	800716c <FusionVectorIsZero+0x4c>
 800715a:	edd7 7a03 	vldr	s15, [r7, #12]
 800715e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	d101      	bne.n	800716c <FusionVectorIsZero+0x4c>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <FusionVectorIsZero+0x4e>
 800716c:	2300      	movs	r3, #0
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2db      	uxtb	r3, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8007180:	b480      	push	{r7}
 8007182:	b091      	sub	sp, #68	; 0x44
 8007184:	af00      	add	r7, sp, #0
 8007186:	eeb0 5a40 	vmov.f32	s10, s0
 800718a:	eef0 5a60 	vmov.f32	s11, s1
 800718e:	eeb0 6a41 	vmov.f32	s12, s2
 8007192:	eef0 6a61 	vmov.f32	s13, s3
 8007196:	eeb0 7a42 	vmov.f32	s14, s4
 800719a:	eef0 7a62 	vmov.f32	s15, s5
 800719e:	ed87 5a07 	vstr	s10, [r7, #28]
 80071a2:	edc7 5a08 	vstr	s11, [r7, #32]
 80071a6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80071aa:	edc7 6a04 	vstr	s13, [r7, #16]
 80071ae:	ed87 7a05 	vstr	s14, [r7, #20]
 80071b2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80071b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80071ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80071be:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80071c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80071c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80071ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80071ce:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80071d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80071d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80071da:	edd7 7a06 	vldr	s15, [r7, #24]
 80071de:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80071e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80071e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80071f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	ee06 1a90 	vmov	s13, r1
 80071fe:	ee07 2a10 	vmov	s14, r2
 8007202:	ee07 3a90 	vmov	s15, r3
}
 8007206:	eeb0 0a66 	vmov.f32	s0, s13
 800720a:	eef0 0a47 	vmov.f32	s1, s14
 800720e:	eeb0 1a67 	vmov.f32	s2, s15
 8007212:	3744      	adds	r7, #68	; 0x44
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	eef0 6a40 	vmov.f32	s13, s0
 8007226:	eeb0 7a60 	vmov.f32	s14, s1
 800722a:	eef0 7a41 	vmov.f32	s15, s2
 800722e:	edc7 6a01 	vstr	s13, [r7, #4]
 8007232:	ed87 7a02 	vstr	s14, [r7, #8]
 8007236:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800723a:	ed97 7a01 	vldr	s14, [r7, #4]
 800723e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007246:	edd7 7a03 	vldr	s15, [r7, #12]
 800724a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800724e:	eeb0 0a67 	vmov.f32	s0, s15
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800725c:	b480      	push	{r7}
 800725e:	b08f      	sub	sp, #60	; 0x3c
 8007260:	af00      	add	r7, sp, #0
 8007262:	eef0 6a40 	vmov.f32	s13, s0
 8007266:	eeb0 7a60 	vmov.f32	s14, s1
 800726a:	eef0 7a41 	vmov.f32	s15, s2
 800726e:	edc7 1a04 	vstr	s3, [r7, #16]
 8007272:	edc7 6a05 	vstr	s13, [r7, #20]
 8007276:	ed87 7a06 	vstr	s14, [r7, #24]
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800727e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007282:	edd7 7a04 	vldr	s15, [r7, #16]
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800728a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800728e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007292:	edd7 7a04 	vldr	s15, [r7, #16]
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800729a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800729e:	ed97 7a07 	vldr	s14, [r7, #28]
 80072a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80072aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80072ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072b2:	f107 0220 	add.w	r2, r7, #32
 80072b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80072b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80072bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	ee06 1a90 	vmov	s13, r1
 80072c6:	ee07 2a10 	vmov	s14, r2
 80072ca:	ee07 3a90 	vmov	s15, r3
}
 80072ce:	eeb0 0a66 	vmov.f32	s0, s13
 80072d2:	eef0 0a47 	vmov.f32	s1, s14
 80072d6:	eeb0 1a67 	vmov.f32	s2, s15
 80072da:	373c      	adds	r7, #60	; 0x3c
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80072e4:	b480      	push	{r7}
 80072e6:	b091      	sub	sp, #68	; 0x44
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	eeb0 5a40 	vmov.f32	s10, s0
 80072ee:	eef0 5a60 	vmov.f32	s11, s1
 80072f2:	eeb0 6a41 	vmov.f32	s12, s2
 80072f6:	eef0 6a61 	vmov.f32	s13, s3
 80072fa:	eeb0 7a42 	vmov.f32	s14, s4
 80072fe:	eef0 7a62 	vmov.f32	s15, s5
 8007302:	ed87 5a07 	vstr	s10, [r7, #28]
 8007306:	edc7 5a08 	vstr	s11, [r7, #32]
 800730a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800730e:	edc7 6a04 	vstr	s13, [r7, #16]
 8007312:	ed87 7a05 	vstr	s14, [r7, #20]
 8007316:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800731a:	ed97 7a07 	vldr	s14, [r7, #28]
 800731e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007326:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800732a:	ed97 7a08 	vldr	s14, [r7, #32]
 800732e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007336:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800733a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800733e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007346:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800734a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800734e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007352:	ca07      	ldmia	r2, {r0, r1, r2}
 8007354:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007358:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800735a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	ee06 1a90 	vmov	s13, r1
 8007362:	ee07 2a10 	vmov	s14, r2
 8007366:	ee07 3a90 	vmov	s15, r3
}
 800736a:	eeb0 0a66 	vmov.f32	s0, s13
 800736e:	eef0 0a47 	vmov.f32	s1, s14
 8007372:	eeb0 1a67 	vmov.f32	s2, s15
 8007376:	3744      	adds	r7, #68	; 0x44
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007380:	b480      	push	{r7}
 8007382:	b091      	sub	sp, #68	; 0x44
 8007384:	af00      	add	r7, sp, #0
 8007386:	eeb0 5a40 	vmov.f32	s10, s0
 800738a:	eef0 5a60 	vmov.f32	s11, s1
 800738e:	eeb0 6a41 	vmov.f32	s12, s2
 8007392:	eef0 6a61 	vmov.f32	s13, s3
 8007396:	eeb0 7a42 	vmov.f32	s14, s4
 800739a:	eef0 7a62 	vmov.f32	s15, s5
 800739e:	ed87 5a07 	vstr	s10, [r7, #28]
 80073a2:	edc7 5a08 	vstr	s11, [r7, #32]
 80073a6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80073aa:	edc7 6a04 	vstr	s13, [r7, #16]
 80073ae:	ed87 7a05 	vstr	s14, [r7, #20]
 80073b2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80073b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80073ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80073be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80073c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80073ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ce:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80073d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80073d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80073da:	edd7 7a04 	vldr	s15, [r7, #16]
 80073de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80073ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ee:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80073f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80073f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80073fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80073fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007402:	edd7 6a08 	vldr	s13, [r7, #32]
 8007406:	edd7 7a04 	vldr	s15, [r7, #16]
 800740a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800740e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007412:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8007416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800741a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800741e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007420:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	ee06 1a90 	vmov	s13, r1
 800742e:	ee07 2a10 	vmov	s14, r2
 8007432:	ee07 3a90 	vmov	s15, r3
}
 8007436:	eeb0 0a66 	vmov.f32	s0, s13
 800743a:	eef0 0a47 	vmov.f32	s1, s14
 800743e:	eeb0 1a67 	vmov.f32	s2, s15
 8007442:	3744      	adds	r7, #68	; 0x44
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	eeb0 5a40 	vmov.f32	s10, s0
 8007456:	eef0 5a60 	vmov.f32	s11, s1
 800745a:	eeb0 6a41 	vmov.f32	s12, s2
 800745e:	eef0 6a61 	vmov.f32	s13, s3
 8007462:	eeb0 7a42 	vmov.f32	s14, s4
 8007466:	eef0 7a62 	vmov.f32	s15, s5
 800746a:	ed87 5a03 	vstr	s10, [r7, #12]
 800746e:	edc7 5a04 	vstr	s11, [r7, #16]
 8007472:	ed87 6a05 	vstr	s12, [r7, #20]
 8007476:	edc7 6a00 	vstr	s13, [r7]
 800747a:	ed87 7a01 	vstr	s14, [r7, #4]
 800747e:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 8007482:	ed97 5a00 	vldr	s10, [r7]
 8007486:	edd7 5a01 	vldr	s11, [r7, #4]
 800748a:	ed97 6a02 	vldr	s12, [r7, #8]
 800748e:	edd7 6a03 	vldr	s13, [r7, #12]
 8007492:	ed97 7a04 	vldr	s14, [r7, #16]
 8007496:	edd7 7a05 	vldr	s15, [r7, #20]
 800749a:	eef0 1a45 	vmov.f32	s3, s10
 800749e:	eeb0 2a65 	vmov.f32	s4, s11
 80074a2:	eef0 2a46 	vmov.f32	s5, s12
 80074a6:	eeb0 0a66 	vmov.f32	s0, s13
 80074aa:	eef0 0a47 	vmov.f32	s1, s14
 80074ae:	eeb0 1a67 	vmov.f32	s2, s15
 80074b2:	f7ff ff17 	bl	80072e4 <FusionVectorHadamardProduct>
 80074b6:	eef0 6a40 	vmov.f32	s13, s0
 80074ba:	eeb0 7a60 	vmov.f32	s14, s1
 80074be:	eef0 7a41 	vmov.f32	s15, s2
 80074c2:	edc7 6a07 	vstr	s13, [r7, #28]
 80074c6:	ed87 7a08 	vstr	s14, [r7, #32]
 80074ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80074ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80074d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80074da:	eeb0 0a66 	vmov.f32	s0, s13
 80074de:	eef0 0a47 	vmov.f32	s1, s14
 80074e2:	eeb0 1a67 	vmov.f32	s2, s15
 80074e6:	f7ff fe99 	bl	800721c <FusionVectorSum>
 80074ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80074ee:	eeb0 0a67 	vmov.f32	s0, s15
 80074f2:	3728      	adds	r7, #40	; 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	eef0 6a40 	vmov.f32	s13, s0
 8007502:	eeb0 7a60 	vmov.f32	s14, s1
 8007506:	eef0 7a41 	vmov.f32	s15, s2
 800750a:	edc7 6a01 	vstr	s13, [r7, #4]
 800750e:	ed87 7a02 	vstr	s14, [r7, #8]
 8007512:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8007516:	ed97 5a01 	vldr	s10, [r7, #4]
 800751a:	edd7 5a02 	vldr	s11, [r7, #8]
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	edd7 6a01 	vldr	s13, [r7, #4]
 8007526:	ed97 7a02 	vldr	s14, [r7, #8]
 800752a:	edd7 7a03 	vldr	s15, [r7, #12]
 800752e:	eef0 1a45 	vmov.f32	s3, s10
 8007532:	eeb0 2a65 	vmov.f32	s4, s11
 8007536:	eef0 2a46 	vmov.f32	s5, s12
 800753a:	eeb0 0a66 	vmov.f32	s0, s13
 800753e:	eef0 0a47 	vmov.f32	s1, s14
 8007542:	eeb0 1a67 	vmov.f32	s2, s15
 8007546:	f7ff fecd 	bl	80072e4 <FusionVectorHadamardProduct>
 800754a:	eef0 6a40 	vmov.f32	s13, s0
 800754e:	eeb0 7a60 	vmov.f32	s14, s1
 8007552:	eef0 7a41 	vmov.f32	s15, s2
 8007556:	edc7 6a05 	vstr	s13, [r7, #20]
 800755a:	ed87 7a06 	vstr	s14, [r7, #24]
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
 8007562:	edd7 6a05 	vldr	s13, [r7, #20]
 8007566:	ed97 7a06 	vldr	s14, [r7, #24]
 800756a:	edd7 7a07 	vldr	s15, [r7, #28]
 800756e:	eeb0 0a66 	vmov.f32	s0, s13
 8007572:	eef0 0a47 	vmov.f32	s1, s14
 8007576:	eeb0 1a67 	vmov.f32	s2, s15
 800757a:	f7ff fe4f 	bl	800721c <FusionVectorSum>
 800757e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007582:	eeb0 0a67 	vmov.f32	s0, s15
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b08c      	sub	sp, #48	; 0x30
 8007590:	af00      	add	r7, sp, #0
 8007592:	eef0 6a40 	vmov.f32	s13, s0
 8007596:	eeb0 7a60 	vmov.f32	s14, s1
 800759a:	eef0 7a41 	vmov.f32	s15, s2
 800759e:	edc7 6a05 	vstr	s13, [r7, #20]
 80075a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80075aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80075ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80075b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80075b6:	eeb0 0a66 	vmov.f32	s0, s13
 80075ba:	eef0 0a47 	vmov.f32	s1, s14
 80075be:	eeb0 1a67 	vmov.f32	s2, s15
 80075c2:	f7ff ff99 	bl	80074f8 <FusionVectorMagnitudeSquared>
 80075c6:	eef0 7a40 	vmov.f32	s15, s0
 80075ca:	eeb0 0a67 	vmov.f32	s0, s15
 80075ce:	f7ff fd77 	bl	80070c0 <FusionFastInverseSqrt>
 80075d2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80075d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80075da:	ed97 7a06 	vldr	s14, [r7, #24]
 80075de:	edd7 7a07 	vldr	s15, [r7, #28]
 80075e2:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 80075e6:	eeb0 0a66 	vmov.f32	s0, s13
 80075ea:	eef0 0a47 	vmov.f32	s1, s14
 80075ee:	eeb0 1a67 	vmov.f32	s2, s15
 80075f2:	f7ff fe33 	bl	800725c <FusionVectorMultiplyScalar>
 80075f6:	eef0 6a40 	vmov.f32	s13, s0
 80075fa:	eeb0 7a60 	vmov.f32	s14, s1
 80075fe:	eef0 7a41 	vmov.f32	s15, s2
 8007602:	edc7 6a08 	vstr	s13, [r7, #32]
 8007606:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800760a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800760e:	6a39      	ldr	r1, [r7, #32]
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	ee06 1a90 	vmov	s13, r1
 8007618:	ee07 2a10 	vmov	s14, r2
 800761c:	ee07 3a90 	vmov	s15, r3
}
 8007620:	eeb0 0a66 	vmov.f32	s0, s13
 8007624:	eef0 0a47 	vmov.f32	s1, s14
 8007628:	eeb0 1a67 	vmov.f32	s2, s15
 800762c:	3730      	adds	r7, #48	; 0x30
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8007632:	b490      	push	{r4, r7}
 8007634:	b094      	sub	sp, #80	; 0x50
 8007636:	af00      	add	r7, sp, #0
 8007638:	eeb0 4a40 	vmov.f32	s8, s0
 800763c:	eef0 4a60 	vmov.f32	s9, s1
 8007640:	eeb0 5a41 	vmov.f32	s10, s2
 8007644:	eef0 5a61 	vmov.f32	s11, s3
 8007648:	eeb0 6a42 	vmov.f32	s12, s4
 800764c:	eef0 6a62 	vmov.f32	s13, s5
 8007650:	eeb0 7a43 	vmov.f32	s14, s6
 8007654:	eef0 7a63 	vmov.f32	s15, s7
 8007658:	ed87 4a08 	vstr	s8, [r7, #32]
 800765c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8007660:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8007664:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8007668:	ed87 6a04 	vstr	s12, [r7, #16]
 800766c:	edc7 6a05 	vstr	s13, [r7, #20]
 8007670:	ed87 7a06 	vstr	s14, [r7, #24]
 8007674:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8007678:	ed97 7a08 	vldr	s14, [r7, #32]
 800767c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007680:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007684:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8007688:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800768c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007690:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007694:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8007698:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800769c:	edd7 7a06 	vldr	s15, [r7, #24]
 80076a0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80076a4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 80076a8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80076ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80076b0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80076b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80076b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80076bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80076c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ce:	ee06 0a10 	vmov	s12, r0
 80076d2:	ee06 1a90 	vmov	s13, r1
 80076d6:	ee07 2a10 	vmov	s14, r2
 80076da:	ee07 3a90 	vmov	s15, r3
}
 80076de:	eeb0 0a46 	vmov.f32	s0, s12
 80076e2:	eef0 0a66 	vmov.f32	s1, s13
 80076e6:	eeb0 1a47 	vmov.f32	s2, s14
 80076ea:	eef0 1a67 	vmov.f32	s3, s15
 80076ee:	3750      	adds	r7, #80	; 0x50
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc90      	pop	{r4, r7}
 80076f4:	4770      	bx	lr

080076f6 <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 80076f6:	b490      	push	{r4, r7}
 80076f8:	b094      	sub	sp, #80	; 0x50
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	eef0 4a40 	vmov.f32	s9, s0
 8007700:	eeb0 5a60 	vmov.f32	s10, s1
 8007704:	eef0 5a41 	vmov.f32	s11, s2
 8007708:	eeb0 6a61 	vmov.f32	s12, s3
 800770c:	eef0 6a42 	vmov.f32	s13, s4
 8007710:	eeb0 7a62 	vmov.f32	s14, s5
 8007714:	eef0 7a43 	vmov.f32	s15, s6
 8007718:	edc7 4a08 	vstr	s9, [r7, #32]
 800771c:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8007720:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8007724:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8007728:	edc7 6a05 	vstr	s13, [r7, #20]
 800772c:	ed87 7a06 	vstr	s14, [r7, #24]
 8007730:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8007734:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007738:	eeb1 7a67 	vneg.f32	s14, s15
 800773c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007744:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007748:	edd7 7a06 	vldr	s15, [r7, #24]
 800774c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007754:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007758:	edd7 7a07 	vldr	s15, [r7, #28]
 800775c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007760:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007764:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8007768:	ed97 7a08 	vldr	s14, [r7, #32]
 800776c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007774:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007778:	edd7 7a07 	vldr	s15, [r7, #28]
 800777c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007784:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007788:	edd7 7a06 	vldr	s15, [r7, #24]
 800778c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007790:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007794:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8007798:	ed97 7a08 	vldr	s14, [r7, #32]
 800779c:	edd7 7a06 	vldr	s15, [r7, #24]
 80077a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80077a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80077ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80077b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80077bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077c0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80077c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80077c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80077cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80077d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80077dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80077e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80077ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077f0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80077f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80077f8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80077fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007802:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007806:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800780a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780e:	ee06 0a10 	vmov	s12, r0
 8007812:	ee06 1a90 	vmov	s13, r1
 8007816:	ee07 2a10 	vmov	s14, r2
 800781a:	ee07 3a90 	vmov	s15, r3
}
 800781e:	eeb0 0a46 	vmov.f32	s0, s12
 8007822:	eef0 0a66 	vmov.f32	s1, s13
 8007826:	eeb0 1a47 	vmov.f32	s2, s14
 800782a:	eef0 1a67 	vmov.f32	s3, s15
 800782e:	3750      	adds	r7, #80	; 0x50
 8007830:	46bd      	mov	sp, r7
 8007832:	bc90      	pop	{r4, r7}
 8007834:	4770      	bx	lr

08007836 <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8007836:	b590      	push	{r4, r7, lr}
 8007838:	b093      	sub	sp, #76	; 0x4c
 800783a:	af00      	add	r7, sp, #0
 800783c:	eeb0 6a40 	vmov.f32	s12, s0
 8007840:	eef0 6a60 	vmov.f32	s13, s1
 8007844:	eeb0 7a41 	vmov.f32	s14, s2
 8007848:	eef0 7a61 	vmov.f32	s15, s3
 800784c:	ed87 6a04 	vstr	s12, [r7, #16]
 8007850:	edc7 6a05 	vstr	s13, [r7, #20]
 8007854:	ed87 7a06 	vstr	s14, [r7, #24]
 8007858:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800785c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007860:	edd7 7a04 	vldr	s15, [r7, #16]
 8007864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007868:	edd7 6a05 	vldr	s13, [r7, #20]
 800786c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007878:	edd7 6a06 	vldr	s13, [r7, #24]
 800787c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007888:	edd7 6a07 	vldr	s13, [r7, #28]
 800788c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007898:	eeb0 0a67 	vmov.f32	s0, s15
 800789c:	f7ff fc10 	bl	80070c0 <FusionFastInverseSqrt>
 80078a0:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 80078a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80078a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80078ac:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80078b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 80078b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80078b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80078bc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80078c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80078c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80078c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80078cc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80078d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80078d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80078d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80078dc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80078e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80078e4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80078e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80078f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fa:	ee06 0a10 	vmov	s12, r0
 80078fe:	ee06 1a90 	vmov	s13, r1
 8007902:	ee07 2a10 	vmov	s14, r2
 8007906:	ee07 3a90 	vmov	s15, r3
}
 800790a:	eeb0 0a46 	vmov.f32	s0, s12
 800790e:	eef0 0a66 	vmov.f32	s1, s13
 8007912:	eeb0 1a47 	vmov.f32	s2, s14
 8007916:	eef0 1a67 	vmov.f32	s3, s15
 800791a:	374c      	adds	r7, #76	; 0x4c
 800791c:	46bd      	mov	sp, r7
 800791e:	bd90      	pop	{r4, r7, pc}

08007920 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8007920:	b5b0      	push	{r4, r5, r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <FusionAhrsInitialise+0x38>)
 800792a:	f107 0408 	add.w	r4, r7, #8
 800792e:	461d      	mov	r5, r3
 8007930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007934:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007938:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800793c:	f107 0308 	add.w	r3, r7, #8
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f86e 	bl	8007a24 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f807 	bl	800795c <FusionAhrsReset>
}
 800794e:	bf00      	nop
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bdb0      	pop	{r4, r5, r7, pc}
 8007956:	bf00      	nop
 8007958:	0801bd04 	.word	0x0801bd04

0800795c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800795c:	b480      	push	{r7}
 800795e:	b091      	sub	sp, #68	; 0x44
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800796a:	619a      	str	r2, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	61da      	str	r2, [r3, #28]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	621a      	str	r2, [r3, #32]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <FusionAhrsReset+0xc4>)
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	649a      	str	r2, [r3, #72]	; 0x48
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	651a      	str	r2, [r3, #80]	; 0x50
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007a12:	bf00      	nop
 8007a14:	3744      	adds	r7, #68	; 0x44
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	41200000 	.word	0x41200000

08007a24 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d007      	beq.n	8007a5e <FusionAhrsSetSettings+0x3a>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a54:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007b88 <FusionAhrsSetSettings+0x164>
 8007a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a5c:	e001      	b.n	8007a62 <FusionAhrsSetSettings+0x3e>
 8007a5e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8007b8c <FusionAhrsSetSettings+0x168>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007a6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	d01b      	beq.n	8007ab0 <FusionAhrsSetSettings+0x8c>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a82:	f7ff fb09 	bl	8007098 <FusionDegreesToRadians>
 8007a86:	eef0 7a40 	vmov.f32	s15, s0
 8007a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a8e:	f011 fe33 	bl	80196f8 <sinf>
 8007a92:	eef0 7a40 	vmov.f32	s15, s0
 8007a96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a9e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8007aa6:	f011 fdc9 	bl	801963c <powf>
 8007aaa:	eef0 7a40 	vmov.f32	s15, s0
 8007aae:	e001      	b.n	8007ab4 <FusionAhrsSetSettings+0x90>
 8007ab0:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007b8c <FusionAhrsSetSettings+0x168>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ac0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	d01b      	beq.n	8007b02 <FusionAhrsSetSettings+0xde>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad4:	f7ff fae0 	bl	8007098 <FusionDegreesToRadians>
 8007ad8:	eef0 7a40 	vmov.f32	s15, s0
 8007adc:	eeb0 0a67 	vmov.f32	s0, s15
 8007ae0:	f011 fe0a 	bl	80196f8 <sinf>
 8007ae4:	eef0 7a40 	vmov.f32	s15, s0
 8007ae8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007af0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007af4:	eeb0 0a67 	vmov.f32	s0, s15
 8007af8:	f011 fda0 	bl	801963c <powf>
 8007afc:	eef0 7a40 	vmov.f32	s15, s0
 8007b00:	e001      	b.n	8007b06 <FusionAhrsSetSettings+0xe2>
 8007b02:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007b8c <FusionAhrsSetSettings+0x168>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b36:	d003      	beq.n	8007b40 <FusionAhrsSetSettings+0x11c>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <FusionAhrsSetSettings+0x16c>)
 8007b44:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <FusionAhrsSetSettings+0x16c>)
 8007b4a:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b52:	f083 0301 	eor.w	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b72:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	3f7ae148 	.word	0x3f7ae148
 8007b8c:	7f7fffff 	.word	0x7f7fffff
 8007b90:	7f7fffff 	.word	0x7f7fffff

08007b94 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b0bf      	sub	sp, #252	; 0xfc
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b9c:	eeb0 5a61 	vmov.f32	s10, s3
 8007ba0:	eef0 5a42 	vmov.f32	s11, s4
 8007ba4:	eeb0 6a62 	vmov.f32	s12, s5
 8007ba8:	eef0 6a43 	vmov.f32	s13, s6
 8007bac:	eeb0 7a63 	vmov.f32	s14, s7
 8007bb0:	eef0 7a44 	vmov.f32	s15, s8
 8007bb4:	edc7 4a01 	vstr	s9, [r7, #4]
 8007bb8:	ed87 0a08 	vstr	s0, [r7, #32]
 8007bbc:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8007bc0:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8007bc4:	ed87 5a05 	vstr	s10, [r7, #20]
 8007bc8:	edc7 5a06 	vstr	s11, [r7, #24]
 8007bcc:	ed87 6a07 	vstr	s12, [r7, #28]
 8007bd0:	edc7 6a02 	vstr	s13, [r7, #8]
 8007bd4:	ed87 7a03 	vstr	s14, [r7, #12]
 8007bd8:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	3328      	adds	r3, #40	; 0x28
 8007be0:	f107 0214 	add.w	r2, r7, #20
 8007be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007be6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 8007bea:	edd7 7a08 	vldr	s15, [r7, #32]
 8007bee:	eeb0 7ae7 	vabs.f32	s14, s15
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8007bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c00:	dc17      	bgt.n	8007c32 <FusionAhrsUpdate+0x9e>
 8007c02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007c06:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c18:	dc0b      	bgt.n	8007c32 <FusionAhrsUpdate+0x9e>
 8007c1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c1e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c30:	dd15      	ble.n	8007c5e <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8007c38:	3318      	adds	r3, #24
 8007c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f7ff fe8b 	bl	800795c <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	f103 0418 	add.w	r4, r3, #24
 8007c4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8007c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9a:	d407      	bmi.n	8007cac <FusionAhrsUpdate+0x118>
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	d10b      	bne.n	8007cc4 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8007cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cc6:	f000 faf4 	bl	80082b2 <HalfGravity>
 8007cca:	eef0 6a40 	vmov.f32	s13, s0
 8007cce:	eeb0 7a60 	vmov.f32	s14, s1
 8007cd2:	eef0 7a41 	vmov.f32	s15, s2
 8007cd6:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8007cda:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8007cde:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8007d02:	edd7 6a05 	vldr	s13, [r7, #20]
 8007d06:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d0e:	eeb0 0a66 	vmov.f32	s0, s13
 8007d12:	eef0 0a47 	vmov.f32	s1, s14
 8007d16:	eeb0 1a67 	vmov.f32	s2, s15
 8007d1a:	f7ff fa01 	bl	8007120 <FusionVectorIsZero>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f083 0301 	eor.w	r3, r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 809c 	beq.w	8007e64 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8007d2c:	edd7 6a05 	vldr	s13, [r7, #20]
 8007d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d38:	eeb0 0a66 	vmov.f32	s0, s13
 8007d3c:	eef0 0a47 	vmov.f32	s1, s14
 8007d40:	eeb0 1a67 	vmov.f32	s2, s15
 8007d44:	f7ff fc22 	bl	800758c <FusionVectorNormalise>
 8007d48:	eef0 6a40 	vmov.f32	s13, s0
 8007d4c:	eeb0 7a60 	vmov.f32	s14, s1
 8007d50:	eef0 7a41 	vmov.f32	s15, s2
 8007d54:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8007d58:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8007d5c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8007d60:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007d62:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8007d66:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8007d6a:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007d6e:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007d72:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007d76:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007d7a:	eef0 1a45 	vmov.f32	s3, s10
 8007d7e:	eeb0 2a65 	vmov.f32	s4, s11
 8007d82:	eef0 2a46 	vmov.f32	s5, s12
 8007d86:	eeb0 0a66 	vmov.f32	s0, s13
 8007d8a:	eef0 0a47 	vmov.f32	s1, s14
 8007d8e:	eeb0 1a67 	vmov.f32	s2, s15
 8007d92:	f000 fc55 	bl	8008640 <Feedback>
 8007d96:	eef0 6a40 	vmov.f32	s13, s0
 8007d9a:	eeb0 7a60 	vmov.f32	s14, s1
 8007d9e:	eef0 7a41 	vmov.f32	s15, s2
 8007da2:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8007da6:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007daa:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d118      	bne.n	8007dea <FusionAhrsUpdate+0x256>
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007dbe:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007dc2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007dc6:	eeb0 0a66 	vmov.f32	s0, s13
 8007dca:	eef0 0a47 	vmov.f32	s1, s14
 8007dce:	eeb0 1a67 	vmov.f32	s2, s15
 8007dd2:	f7ff fb91 	bl	80074f8 <FusionVectorMagnitudeSquared>
 8007dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	edd3 7a03 	vldr	s15, [r3, #12]
 8007de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de8:	d80a      	bhi.n	8007e00 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	f1a3 0209 	sub.w	r2, r3, #9
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60
 8007dfe:	e004      	b.n	8007e0a <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dd07      	ble.n	8007e26 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	2200      	movs	r2, #0
 8007e1a:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007e24:	e004      	b.n	8007e30 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f000 fcb5 	bl	80087aa <Clamp>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e4c:	f083 0301 	eor.w	r3, r3, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8007e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007e5c:	3244      	adds	r2, #68	; 0x44
 8007e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007e64:	f04f 0300 	mov.w	r3, #0
 8007e68:	673b      	str	r3, [r7, #112]	; 0x70
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8007e7e:	edd7 6a02 	vldr	s13, [r7, #8]
 8007e82:	ed97 7a03 	vldr	s14, [r7, #12]
 8007e86:	edd7 7a04 	vldr	s15, [r7, #16]
 8007e8a:	eeb0 0a66 	vmov.f32	s0, s13
 8007e8e:	eef0 0a47 	vmov.f32	s1, s14
 8007e92:	eeb0 1a67 	vmov.f32	s2, s15
 8007e96:	f7ff f943 	bl	8007120 <FusionVectorIsZero>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f083 0301 	eor.w	r3, r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80d1 	beq.w	800804a <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8007ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eaa:	f000 fabf 	bl	800842c <HalfMagnetic>
 8007eae:	eef0 6a40 	vmov.f32	s13, s0
 8007eb2:	eeb0 7a60 	vmov.f32	s14, s1
 8007eb6:	eef0 7a41 	vmov.f32	s15, s2
 8007eba:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8007ebe:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8007ec2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8007ec6:	ed97 5a02 	vldr	s10, [r7, #8]
 8007eca:	edd7 5a03 	vldr	s11, [r7, #12]
 8007ece:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ed2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8007ed6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007eda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007ede:	eef0 1a45 	vmov.f32	s3, s10
 8007ee2:	eeb0 2a65 	vmov.f32	s4, s11
 8007ee6:	eef0 2a46 	vmov.f32	s5, s12
 8007eea:	eeb0 0a66 	vmov.f32	s0, s13
 8007eee:	eef0 0a47 	vmov.f32	s1, s14
 8007ef2:	eeb0 1a67 	vmov.f32	s2, s15
 8007ef6:	f7ff fa43 	bl	8007380 <FusionVectorCrossProduct>
 8007efa:	eef0 6a40 	vmov.f32	s13, s0
 8007efe:	eeb0 7a60 	vmov.f32	s14, s1
 8007f02:	eef0 7a41 	vmov.f32	s15, s2
 8007f06:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8007f0a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8007f0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8007f12:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8007f16:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007f1a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007f1e:	eeb0 0a66 	vmov.f32	s0, s13
 8007f22:	eef0 0a47 	vmov.f32	s1, s14
 8007f26:	eeb0 1a67 	vmov.f32	s2, s15
 8007f2a:	f7ff fb2f 	bl	800758c <FusionVectorNormalise>
 8007f2e:	eef0 6a40 	vmov.f32	s13, s0
 8007f32:	eeb0 7a60 	vmov.f32	s14, s1
 8007f36:	eef0 7a41 	vmov.f32	s15, s2
 8007f3a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8007f3e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8007f42:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8007f46:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007f48:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8007f4c:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8007f50:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8007f54:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8007f58:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8007f5c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007f60:	eef0 1a45 	vmov.f32	s3, s10
 8007f64:	eeb0 2a65 	vmov.f32	s4, s11
 8007f68:	eef0 2a46 	vmov.f32	s5, s12
 8007f6c:	eeb0 0a66 	vmov.f32	s0, s13
 8007f70:	eef0 0a47 	vmov.f32	s1, s14
 8007f74:	eeb0 1a67 	vmov.f32	s2, s15
 8007f78:	f000 fb62 	bl	8008640 <Feedback>
 8007f7c:	eef0 6a40 	vmov.f32	s13, s0
 8007f80:	eeb0 7a60 	vmov.f32	s14, s1
 8007f84:	eef0 7a41 	vmov.f32	s15, s2
 8007f88:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 8007f8c:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8007f90:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d118      	bne.n	8007fd0 <FusionAhrsUpdate+0x43c>
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8007fa4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007fa8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007fac:	eeb0 0a66 	vmov.f32	s0, s13
 8007fb0:	eef0 0a47 	vmov.f32	s1, s14
 8007fb4:	eeb0 1a67 	vmov.f32	s2, s15
 8007fb8:	f7ff fa9e 	bl	80074f8 <FusionVectorMagnitudeSquared>
 8007fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8007fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fce:	d80a      	bhi.n	8007fe6 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fdc:	f1a3 0209 	sub.w	r2, r3, #9
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	66da      	str	r2, [r3, #108]	; 0x6c
 8007fe4:	e004      	b.n	8007ff0 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	dd07      	ble.n	800800c <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	2200      	movs	r2, #0
 8008000:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800800a:	e004      	b.n	8008016 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	461a      	mov	r2, r3
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	461a      	mov	r2, r3
 8008020:	2100      	movs	r1, #0
 8008022:	f000 fbc2 	bl	80087aa <Clamp>
 8008026:	4602      	mov	r2, r0
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008032:	f083 0301 	eor.w	r3, r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800803c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008042:	3250      	adds	r2, #80	; 0x50
 8008044:	ca07      	ldmia	r2, {r0, r1, r2}
 8008046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800804a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800804e:	f7ff f823 	bl	8007098 <FusionDegreesToRadians>
 8008052:	eeb0 6a40 	vmov.f32	s12, s0
 8008056:	edd7 6a08 	vldr	s13, [r7, #32]
 800805a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800805e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008062:	eef0 1a46 	vmov.f32	s3, s12
 8008066:	eeb0 0a66 	vmov.f32	s0, s13
 800806a:	eef0 0a47 	vmov.f32	s1, s14
 800806e:	eeb0 1a67 	vmov.f32	s2, s15
 8008072:	f7ff f8f3 	bl	800725c <FusionVectorMultiplyScalar>
 8008076:	eef0 6a40 	vmov.f32	s13, s0
 800807a:	eeb0 7a60 	vmov.f32	s14, s1
 800807e:	eef0 7a41 	vmov.f32	s15, s2
 8008082:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8008086:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800808a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800808e:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8008092:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8008096:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800809a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800809e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80080a2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80080a6:	eef0 1a45 	vmov.f32	s3, s10
 80080aa:	eeb0 2a65 	vmov.f32	s4, s11
 80080ae:	eef0 2a46 	vmov.f32	s5, s12
 80080b2:	eeb0 0a66 	vmov.f32	s0, s13
 80080b6:	eef0 0a47 	vmov.f32	s1, s14
 80080ba:	eeb0 1a67 	vmov.f32	s2, s15
 80080be:	f7ff f85f 	bl	8007180 <FusionVectorAdd>
 80080c2:	eef0 6a40 	vmov.f32	s13, s0
 80080c6:	eeb0 7a60 	vmov.f32	s14, s1
 80080ca:	eef0 7a41 	vmov.f32	s15, s2
 80080ce:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 80080d2:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 80080d6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 80080e0:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 80080e4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80080e8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80080ec:	eef0 1a46 	vmov.f32	s3, s12
 80080f0:	eeb0 0a66 	vmov.f32	s0, s13
 80080f4:	eef0 0a47 	vmov.f32	s1, s14
 80080f8:	eeb0 1a67 	vmov.f32	s2, s15
 80080fc:	f7ff f8ae 	bl	800725c <FusionVectorMultiplyScalar>
 8008100:	eef0 6a40 	vmov.f32	s13, s0
 8008104:	eeb0 7a60 	vmov.f32	s14, s1
 8008108:	eef0 7a41 	vmov.f32	s15, s2
 800810c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8008110:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8008114:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8008118:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800811c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8008120:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8008124:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008128:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800812c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008130:	eef0 1a45 	vmov.f32	s3, s10
 8008134:	eeb0 2a65 	vmov.f32	s4, s11
 8008138:	eef0 2a46 	vmov.f32	s5, s12
 800813c:	eeb0 0a66 	vmov.f32	s0, s13
 8008140:	eef0 0a47 	vmov.f32	s1, s14
 8008144:	eeb0 1a67 	vmov.f32	s2, s15
 8008148:	f7ff f81a 	bl	8007180 <FusionVectorAdd>
 800814c:	eef0 6a40 	vmov.f32	s13, s0
 8008150:	eeb0 7a60 	vmov.f32	s14, s1
 8008154:	eef0 7a41 	vmov.f32	s15, s2
 8008158:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800815c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8008160:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8008164:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8008168:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800816c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008170:	edd7 1a01 	vldr	s3, [r7, #4]
 8008174:	eeb0 0a66 	vmov.f32	s0, s13
 8008178:	eef0 0a47 	vmov.f32	s1, s14
 800817c:	eeb0 1a67 	vmov.f32	s2, s15
 8008180:	f7ff f86c 	bl	800725c <FusionVectorMultiplyScalar>
 8008184:	eef0 6a40 	vmov.f32	s13, s0
 8008188:	eeb0 7a60 	vmov.f32	s14, s1
 800818c:	eef0 7a41 	vmov.f32	s15, s2
 8008190:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8008194:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8008198:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800819c:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80081a0:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80081a4:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	ed93 6a06 	vldr	s12, [r3, #24]
 80081ae:	edd3 6a07 	vldr	s13, [r3, #28]
 80081b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80081b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80081ba:	eeb0 2a64 	vmov.f32	s4, s9
 80081be:	eef0 2a45 	vmov.f32	s5, s10
 80081c2:	eeb0 3a65 	vmov.f32	s6, s11
 80081c6:	eeb0 0a46 	vmov.f32	s0, s12
 80081ca:	eef0 0a66 	vmov.f32	s1, s13
 80081ce:	eeb0 1a47 	vmov.f32	s2, s14
 80081d2:	eef0 1a67 	vmov.f32	s3, s15
 80081d6:	f7ff fa8e 	bl	80076f6 <FusionQuaternionMultiplyVector>
 80081da:	eeb0 6a40 	vmov.f32	s12, s0
 80081de:	eef0 6a60 	vmov.f32	s13, s1
 80081e2:	eeb0 7a41 	vmov.f32	s14, s2
 80081e6:	eef0 7a61 	vmov.f32	s15, s3
 80081ea:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 80081ee:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 80081f2:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 80081f6:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 80081fa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80081fc:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8008200:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8008204:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8008208:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	ed93 6a06 	vldr	s12, [r3, #24]
 8008212:	edd3 6a07 	vldr	s13, [r3, #28]
 8008216:	ed93 7a08 	vldr	s14, [r3, #32]
 800821a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800821e:	eeb0 2a44 	vmov.f32	s4, s8
 8008222:	eef0 2a64 	vmov.f32	s5, s9
 8008226:	eeb0 3a45 	vmov.f32	s6, s10
 800822a:	eef0 3a65 	vmov.f32	s7, s11
 800822e:	eeb0 0a46 	vmov.f32	s0, s12
 8008232:	eef0 0a66 	vmov.f32	s1, s13
 8008236:	eeb0 1a47 	vmov.f32	s2, s14
 800823a:	eef0 1a67 	vmov.f32	s3, s15
 800823e:	f7ff f9f8 	bl	8007632 <FusionQuaternionAdd>
 8008242:	eeb0 6a40 	vmov.f32	s12, s0
 8008246:	eef0 6a60 	vmov.f32	s13, s1
 800824a:	eeb0 7a41 	vmov.f32	s14, s2
 800824e:	eef0 7a61 	vmov.f32	s15, s3
 8008252:	ed84 6a06 	vstr	s12, [r4, #24]
 8008256:	edc4 6a07 	vstr	s13, [r4, #28]
 800825a:	ed84 7a08 	vstr	s14, [r4, #32]
 800825e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8008262:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	ed93 6a06 	vldr	s12, [r3, #24]
 800826a:	edd3 6a07 	vldr	s13, [r3, #28]
 800826e:	ed93 7a08 	vldr	s14, [r3, #32]
 8008272:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008276:	eeb0 0a46 	vmov.f32	s0, s12
 800827a:	eef0 0a66 	vmov.f32	s1, s13
 800827e:	eeb0 1a47 	vmov.f32	s2, s14
 8008282:	eef0 1a67 	vmov.f32	s3, s15
 8008286:	f7ff fad6 	bl	8007836 <FusionQuaternionNormalise>
 800828a:	eeb0 6a40 	vmov.f32	s12, s0
 800828e:	eef0 6a60 	vmov.f32	s13, s1
 8008292:	eeb0 7a41 	vmov.f32	s14, s2
 8008296:	eef0 7a61 	vmov.f32	s15, s3
 800829a:	ed84 6a06 	vstr	s12, [r4, #24]
 800829e:	edc4 6a07 	vstr	s13, [r4, #28]
 80082a2:	ed84 7a08 	vstr	s14, [r4, #32]
 80082a6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 80082aa:	bf00      	nop
 80082ac:	37fc      	adds	r7, #252	; 0xfc
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd90      	pop	{r4, r7, pc}

080082b2 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80082b2:	b480      	push	{r7}
 80082b4:	b093      	sub	sp, #76	; 0x4c
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	dc02      	bgt.n	80082c8 <HalfGravity+0x16>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da03      	bge.n	80082ce <HalfGravity+0x1c>
 80082c6:	e094      	b.n	80083f2 <HalfGravity+0x140>
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d048      	beq.n	800835e <HalfGravity+0xac>
 80082cc:	e091      	b.n	80083f2 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80082ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80082f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	ed93 7a08 	vldr	s14, [r3, #32]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	edd3 6a06 	vldr	s13, [r3, #24]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008316:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800831a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	ed93 7a06 	vldr	s14, [r3, #24]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	edd3 7a06 	vldr	s15, [r3, #24]
 800832a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008332:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008346:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800834a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800834e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008352:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008356:	ca07      	ldmia	r2, {r0, r1, r2}
 8008358:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800835c:	e052      	b.n	8008404 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	ed93 7a06 	vldr	s14, [r3, #24]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	edd3 7a08 	vldr	s15, [r3, #32]
 800836a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	edd3 6a07 	vldr	s13, [r3, #28]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800837a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800837e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008382:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	ed93 7a08 	vldr	s14, [r3, #32]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	edd3 6a06 	vldr	s13, [r3, #24]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	edd3 7a07 	vldr	s15, [r3, #28]
 80083a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083aa:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80083c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083da:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80083de:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80083e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083e6:	f107 0218 	add.w	r2, r7, #24
 80083ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80083ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083f0:	e008      	b.n	8008404 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	643b      	str	r3, [r7, #64]	; 0x40
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8008404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840a:	ee06 1a90 	vmov	s13, r1
 800840e:	ee07 2a10 	vmov	s14, r2
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eeb0 0a66 	vmov.f32	s0, s13
 800841a:	eef0 0a47 	vmov.f32	s1, s14
 800841e:	eeb0 1a67 	vmov.f32	s2, s15
 8008422:	374c      	adds	r7, #76	; 0x4c
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800842c:	b480      	push	{r7}
 800842e:	b097      	sub	sp, #92	; 0x5c
 8008430:	af00      	add	r7, sp, #0
 8008432:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b02      	cmp	r3, #2
 800843a:	f000 809a 	beq.w	8008572 <HalfMagnetic+0x146>
 800843e:	2b02      	cmp	r3, #2
 8008440:	f300 80e1 	bgt.w	8008606 <HalfMagnetic+0x1da>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HalfMagnetic+0x22>
 8008448:	2b01      	cmp	r3, #1
 800844a:	d048      	beq.n	80084de <HalfMagnetic+0xb2>
 800844c:	e0db      	b.n	8008606 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	ed93 7a07 	vldr	s14, [r3, #28]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	edd3 7a08 	vldr	s15, [r3, #32]
 800845a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	edd3 6a06 	vldr	s13, [r3, #24]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800846a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800846e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008472:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	ed93 7a06 	vldr	s14, [r3, #24]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008486:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800848a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	edd3 6a08 	vldr	s13, [r3, #32]
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	edd3 7a08 	vldr	s15, [r3, #32]
 800849a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800849e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80084a2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80084b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	edd3 7a07 	vldr	s15, [r3, #28]
 80084c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80084ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 80084ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80084d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80084d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80084d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80084dc:	e09c      	b.n	8008618 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80084ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	edd3 6a07 	vldr	s13, [r3, #28]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8008502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008506:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800850a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	ed93 7a06 	vldr	s14, [r3, #24]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800851a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	edd3 6a07 	vldr	s13, [r3, #28]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	edd3 7a08 	vldr	s15, [r3, #32]
 800852a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800852e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008532:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	ed93 7a07 	vldr	s14, [r3, #28]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	edd3 6a06 	vldr	s13, [r3, #24]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800855a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800855e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8008562:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008566:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800856a:	ca07      	ldmia	r2, {r0, r1, r2}
 800856c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008570:	e052      	b.n	8008618 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ed93 7a07 	vldr	s14, [r3, #28]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	edd3 7a08 	vldr	s15, [r3, #32]
 800857e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	edd3 6a06 	vldr	s13, [r3, #24]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800858e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008596:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800859a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	edd3 6a08 	vldr	s13, [r3, #32]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	edd3 7a08 	vldr	s15, [r3, #32]
 80085c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80085ca:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80085da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	edd3 6a08 	vldr	s13, [r3, #32]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80085f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80085f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80085fa:	f107 021c 	add.w	r2, r7, #28
 80085fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008604:	e008      	b.n	8008618 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	653b      	str	r3, [r7, #80]	; 0x50
 8008612:	f04f 0300 	mov.w	r3, #0
 8008616:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8008618:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800861a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800861c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861e:	ee06 1a90 	vmov	s13, r1
 8008622:	ee07 2a10 	vmov	s14, r2
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eeb0 0a66 	vmov.f32	s0, s13
 800862e:	eef0 0a47 	vmov.f32	s1, s14
 8008632:	eeb0 1a67 	vmov.f32	s2, s15
 8008636:	375c      	adds	r7, #92	; 0x5c
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8008640:	b580      	push	{r7, lr}
 8008642:	b090      	sub	sp, #64	; 0x40
 8008644:	af00      	add	r7, sp, #0
 8008646:	eeb0 5a40 	vmov.f32	s10, s0
 800864a:	eef0 5a60 	vmov.f32	s11, s1
 800864e:	eeb0 6a41 	vmov.f32	s12, s2
 8008652:	eef0 6a61 	vmov.f32	s13, s3
 8008656:	eeb0 7a42 	vmov.f32	s14, s4
 800865a:	eef0 7a62 	vmov.f32	s15, s5
 800865e:	ed87 5a07 	vstr	s10, [r7, #28]
 8008662:	edc7 5a08 	vstr	s11, [r7, #32]
 8008666:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800866a:	edc7 6a04 	vstr	s13, [r7, #16]
 800866e:	ed87 7a05 	vstr	s14, [r7, #20]
 8008672:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 8008676:	ed97 5a04 	vldr	s10, [r7, #16]
 800867a:	edd7 5a05 	vldr	s11, [r7, #20]
 800867e:	ed97 6a06 	vldr	s12, [r7, #24]
 8008682:	edd7 6a07 	vldr	s13, [r7, #28]
 8008686:	ed97 7a08 	vldr	s14, [r7, #32]
 800868a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800868e:	eef0 1a45 	vmov.f32	s3, s10
 8008692:	eeb0 2a65 	vmov.f32	s4, s11
 8008696:	eef0 2a46 	vmov.f32	s5, s12
 800869a:	eeb0 0a66 	vmov.f32	s0, s13
 800869e:	eef0 0a47 	vmov.f32	s1, s14
 80086a2:	eeb0 1a67 	vmov.f32	s2, s15
 80086a6:	f7fe fed1 	bl	800744c <FusionVectorDotProduct>
 80086aa:	eef0 7a40 	vmov.f32	s15, s0
 80086ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b6:	d540      	bpl.n	800873a <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 80086b8:	ed97 5a04 	vldr	s10, [r7, #16]
 80086bc:	edd7 5a05 	vldr	s11, [r7, #20]
 80086c0:	ed97 6a06 	vldr	s12, [r7, #24]
 80086c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80086cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086d0:	eef0 1a45 	vmov.f32	s3, s10
 80086d4:	eeb0 2a65 	vmov.f32	s4, s11
 80086d8:	eef0 2a46 	vmov.f32	s5, s12
 80086dc:	eeb0 0a66 	vmov.f32	s0, s13
 80086e0:	eef0 0a47 	vmov.f32	s1, s14
 80086e4:	eeb0 1a67 	vmov.f32	s2, s15
 80086e8:	f7fe fe4a 	bl	8007380 <FusionVectorCrossProduct>
 80086ec:	eef0 6a40 	vmov.f32	s13, s0
 80086f0:	eeb0 7a60 	vmov.f32	s14, s1
 80086f4:	eef0 7a41 	vmov.f32	s15, s2
 80086f8:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80086fc:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8008700:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8008704:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8008708:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800870c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008710:	eeb0 0a66 	vmov.f32	s0, s13
 8008714:	eef0 0a47 	vmov.f32	s1, s14
 8008718:	eeb0 1a67 	vmov.f32	s2, s15
 800871c:	f7fe ff36 	bl	800758c <FusionVectorNormalise>
 8008720:	eef0 6a40 	vmov.f32	s13, s0
 8008724:	eeb0 7a60 	vmov.f32	s14, s1
 8008728:	eef0 7a41 	vmov.f32	s15, s2
 800872c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8008730:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8008734:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008738:	e025      	b.n	8008786 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800873a:	ed97 5a04 	vldr	s10, [r7, #16]
 800873e:	edd7 5a05 	vldr	s11, [r7, #20]
 8008742:	ed97 6a06 	vldr	s12, [r7, #24]
 8008746:	edd7 6a07 	vldr	s13, [r7, #28]
 800874a:	ed97 7a08 	vldr	s14, [r7, #32]
 800874e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008752:	eef0 1a45 	vmov.f32	s3, s10
 8008756:	eeb0 2a65 	vmov.f32	s4, s11
 800875a:	eef0 2a46 	vmov.f32	s5, s12
 800875e:	eeb0 0a66 	vmov.f32	s0, s13
 8008762:	eef0 0a47 	vmov.f32	s1, s14
 8008766:	eeb0 1a67 	vmov.f32	s2, s15
 800876a:	f7fe fe09 	bl	8007380 <FusionVectorCrossProduct>
 800876e:	eef0 6a40 	vmov.f32	s13, s0
 8008772:	eeb0 7a60 	vmov.f32	s14, s1
 8008776:	eef0 7a41 	vmov.f32	s15, s2
 800877a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800877e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8008782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 8008786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	ee06 1a90 	vmov	s13, r1
 8008790:	ee07 2a10 	vmov	s14, r2
 8008794:	ee07 3a90 	vmov	s15, r3
 8008798:	eeb0 0a66 	vmov.f32	s0, s13
 800879c:	eef0 0a47 	vmov.f32	s1, s14
 80087a0:	eeb0 1a67 	vmov.f32	s2, s15
 80087a4:	3740      	adds	r7, #64	; 0x40
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 80087aa:	b480      	push	{r7}
 80087ac:	b085      	sub	sp, #20
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
    if (value < min) {
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	da01      	bge.n	80087c2 <Clamp+0x18>
        return min;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	e006      	b.n	80087d0 <Clamp+0x26>
    }
    if (value > max) {
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	dd01      	ble.n	80087ce <Clamp+0x24>
        return max;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	e000      	b.n	80087d0 <Clamp+0x26>
    }
    return value;
 80087ce:	68fb      	ldr	r3, [r7, #12]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 80087dc:	b490      	push	{r4, r7}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f107 0418 	add.w	r4, r7, #24
 80087ea:	3318      	adds	r3, #24
 80087ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80087f2:	69b8      	ldr	r0, [r7, #24]
 80087f4:	69f9      	ldr	r1, [r7, #28]
 80087f6:	6a3a      	ldr	r2, [r7, #32]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	ee06 0a10 	vmov	s12, r0
 80087fe:	ee06 1a90 	vmov	s13, r1
 8008802:	ee07 2a10 	vmov	s14, r2
 8008806:	ee07 3a90 	vmov	s15, r3
}
 800880a:	eeb0 0a46 	vmov.f32	s0, s12
 800880e:	eef0 0a66 	vmov.f32	s1, s13
 8008812:	eeb0 1a47 	vmov.f32	s2, s14
 8008816:	eef0 1a67 	vmov.f32	s3, s15
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bc90      	pop	{r4, r7}
 8008820:	4770      	bx	lr

08008822 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8008822:	b480      	push	{r7}
 8008824:	b091      	sub	sp, #68	; 0x44
 8008826:	af00      	add	r7, sp, #0
 8008828:	eeb0 5a40 	vmov.f32	s10, s0
 800882c:	eef0 5a60 	vmov.f32	s11, s1
 8008830:	eeb0 6a41 	vmov.f32	s12, s2
 8008834:	eef0 6a61 	vmov.f32	s13, s3
 8008838:	eeb0 7a42 	vmov.f32	s14, s4
 800883c:	eef0 7a62 	vmov.f32	s15, s5
 8008840:	ed87 5a07 	vstr	s10, [r7, #28]
 8008844:	edc7 5a08 	vstr	s11, [r7, #32]
 8008848:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800884c:	edc7 6a04 	vstr	s13, [r7, #16]
 8008850:	ed87 7a05 	vstr	s14, [r7, #20]
 8008854:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8008858:	ed97 7a07 	vldr	s14, [r7, #28]
 800885c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008860:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008864:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8008868:	ed97 7a08 	vldr	s14, [r7, #32]
 800886c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008870:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008874:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8008878:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800887c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008880:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008884:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8008888:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800888c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008890:	ca07      	ldmia	r2, {r0, r1, r2}
 8008892:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889c:	ee06 1a90 	vmov	s13, r1
 80088a0:	ee07 2a10 	vmov	s14, r2
 80088a4:	ee07 3a90 	vmov	s15, r3
}
 80088a8:	eeb0 0a66 	vmov.f32	s0, s13
 80088ac:	eef0 0a47 	vmov.f32	s1, s14
 80088b0:	eeb0 1a67 	vmov.f32	s2, s15
 80088b4:	3744      	adds	r7, #68	; 0x44
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80088be:	b480      	push	{r7}
 80088c0:	b091      	sub	sp, #68	; 0x44
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	eeb0 5a40 	vmov.f32	s10, s0
 80088c8:	eef0 5a60 	vmov.f32	s11, s1
 80088cc:	eeb0 6a41 	vmov.f32	s12, s2
 80088d0:	eef0 6a61 	vmov.f32	s13, s3
 80088d4:	eeb0 7a42 	vmov.f32	s14, s4
 80088d8:	eef0 7a62 	vmov.f32	s15, s5
 80088dc:	ed87 5a07 	vstr	s10, [r7, #28]
 80088e0:	edc7 5a08 	vstr	s11, [r7, #32]
 80088e4:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80088e8:	edc7 6a04 	vstr	s13, [r7, #16]
 80088ec:	ed87 7a05 	vstr	s14, [r7, #20]
 80088f0:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80088f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80088f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80088fc:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008900:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8008904:	ed97 7a08 	vldr	s14, [r7, #32]
 8008908:	edd7 7a05 	vldr	s15, [r7, #20]
 800890c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008910:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8008914:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008918:	edd7 7a06 	vldr	s15, [r7, #24]
 800891c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008920:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8008924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008928:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800892c:	ca07      	ldmia	r2, {r0, r1, r2}
 800892e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	ee06 1a90 	vmov	s13, r1
 800893c:	ee07 2a10 	vmov	s14, r2
 8008940:	ee07 3a90 	vmov	s15, r3
}
 8008944:	eeb0 0a66 	vmov.f32	s0, s13
 8008948:	eef0 0a47 	vmov.f32	s1, s14
 800894c:	eeb0 1a67 	vmov.f32	s2, s15
 8008950:	3744      	adds	r7, #68	; 0x44
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800895a:	b480      	push	{r7}
 800895c:	b08f      	sub	sp, #60	; 0x3c
 800895e:	af00      	add	r7, sp, #0
 8008960:	eef0 6a40 	vmov.f32	s13, s0
 8008964:	eeb0 7a60 	vmov.f32	s14, s1
 8008968:	eef0 7a41 	vmov.f32	s15, s2
 800896c:	edc7 1a04 	vstr	s3, [r7, #16]
 8008970:	edc7 6a05 	vstr	s13, [r7, #20]
 8008974:	ed87 7a06 	vstr	s14, [r7, #24]
 8008978:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800897c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008980:	edd7 7a04 	vldr	s15, [r7, #16]
 8008984:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008988:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800898c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008990:	edd7 7a04 	vldr	s15, [r7, #16]
 8008994:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008998:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800899c:	ed97 7a07 	vldr	s14, [r7, #28]
 80089a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80089a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80089ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089b0:	f107 0220 	add.w	r2, r7, #32
 80089b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80089b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	ee06 1a90 	vmov	s13, r1
 80089c4:	ee07 2a10 	vmov	s14, r2
 80089c8:	ee07 3a90 	vmov	s15, r3
}
 80089cc:	eeb0 0a66 	vmov.f32	s0, s13
 80089d0:	eef0 0a47 	vmov.f32	s1, s14
 80089d4:	eeb0 1a67 	vmov.f32	s2, s15
 80089d8:	373c      	adds	r7, #60	; 0x3c
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008a44 <FusionOffsetInitialise+0x60>
 8008a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	60da      	str	r2, [r3, #12]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	611a      	str	r2, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	615a      	str	r2, [r3, #20]
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	3e00adfd 	.word	0x3e00adfd

08008a48 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b08f      	sub	sp, #60	; 0x3c
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	61f8      	str	r0, [r7, #28]
 8008a50:	eef0 6a40 	vmov.f32	s13, s0
 8008a54:	eeb0 7a60 	vmov.f32	s14, s1
 8008a58:	eef0 7a41 	vmov.f32	s15, s2
 8008a5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8008a60:	ed87 7a05 	vstr	s14, [r7, #20]
 8008a64:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8008a6e:	edd3 5a04 	vldr	s11, [r3, #16]
 8008a72:	ed93 6a05 	vldr	s12, [r3, #20]
 8008a76:	edd7 6a04 	vldr	s13, [r7, #16]
 8008a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a82:	eef0 1a45 	vmov.f32	s3, s10
 8008a86:	eeb0 2a65 	vmov.f32	s4, s11
 8008a8a:	eef0 2a46 	vmov.f32	s5, s12
 8008a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8008a92:	eef0 0a47 	vmov.f32	s1, s14
 8008a96:	eeb0 1a67 	vmov.f32	s2, s15
 8008a9a:	f7ff ff10 	bl	80088be <FusionVectorSubtract>
 8008a9e:	eef0 6a40 	vmov.f32	s13, s0
 8008aa2:	eeb0 7a60 	vmov.f32	s14, s1
 8008aa6:	eef0 7a41 	vmov.f32	s15, s2
 8008aaa:	edc7 6a04 	vstr	s13, [r7, #16]
 8008aae:	ed87 7a05 	vstr	s14, [r7, #20]
 8008ab2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8008ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008aba:	eef0 7ae7 	vabs.f32	s15, s15
 8008abe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	dc15      	bgt.n	8008af8 <FusionOffsetUpdate+0xb0>
 8008acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8008ad4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae0:	dc0a      	bgt.n	8008af8 <FusionOffsetUpdate+0xb0>
 8008ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8008aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af6:	dd0a      	ble.n	8008b0e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2200      	movs	r2, #0
 8008afc:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008afe:	f107 0320 	add.w	r3, r7, #32
 8008b02:	f107 0210 	add.w	r2, r7, #16
 8008b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b0c:	e060      	b.n	8008bd0 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d20c      	bcs.n	8008b34 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008b24:	f107 0320 	add.w	r3, r7, #32
 8008b28:	f107 0210 	add.w	r2, r7, #16
 8008b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b32:	e04d      	b.n	8008bd0 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	ed93 6a00 	vldr	s12, [r3]
 8008b3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8008b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b46:	eef0 1a46 	vmov.f32	s3, s12
 8008b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8008b4e:	eef0 0a47 	vmov.f32	s1, s14
 8008b52:	eeb0 1a67 	vmov.f32	s2, s15
 8008b56:	f7ff ff00 	bl	800895a <FusionVectorMultiplyScalar>
 8008b5a:	eef0 6a40 	vmov.f32	s13, s0
 8008b5e:	eeb0 7a60 	vmov.f32	s14, s1
 8008b62:	eef0 7a41 	vmov.f32	s15, s2
 8008b66:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008b6a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008b72:	69fc      	ldr	r4, [r7, #28]
 8008b74:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8008b78:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8008b7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	edd3 6a03 	vldr	s13, [r3, #12]
 8008b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8008b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008b8e:	eef0 1a45 	vmov.f32	s3, s10
 8008b92:	eeb0 2a65 	vmov.f32	s4, s11
 8008b96:	eef0 2a46 	vmov.f32	s5, s12
 8008b9a:	eeb0 0a66 	vmov.f32	s0, s13
 8008b9e:	eef0 0a47 	vmov.f32	s1, s14
 8008ba2:	eeb0 1a67 	vmov.f32	s2, s15
 8008ba6:	f7ff fe3c 	bl	8008822 <FusionVectorAdd>
 8008baa:	eef0 6a40 	vmov.f32	s13, s0
 8008bae:	eeb0 7a60 	vmov.f32	s14, s1
 8008bb2:	eef0 7a41 	vmov.f32	s15, s2
 8008bb6:	edc4 6a03 	vstr	s13, [r4, #12]
 8008bba:	ed84 7a04 	vstr	s14, [r4, #16]
 8008bbe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8008bc2:	f107 0320 	add.w	r3, r7, #32
 8008bc6:	f107 0210 	add.w	r2, r7, #16
 8008bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008bd0:	6a39      	ldr	r1, [r7, #32]
 8008bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	ee06 1a90 	vmov	s13, r1
 8008bda:	ee07 2a10 	vmov	s14, r2
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eeb0 0a66 	vmov.f32	s0, s13
 8008be6:	eef0 0a47 	vmov.f32	s1, s14
 8008bea:	eeb0 1a67 	vmov.f32	s2, s15
 8008bee:	373c      	adds	r7, #60	; 0x3c
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4413      	add	r3, r2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b24      	cmp	r3, #36	; 0x24
 8008c0e:	d103      	bne.n	8008c18 <GPS_validate+0x24>
		i++;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	3301      	adds	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c16:	e00c      	b.n	8008c32 <GPS_validate+0x3e>
		return 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e047      	b.n	8008cac <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4053      	eors	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
		i++;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <GPS_validate+0x5c>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	4413      	add	r3, r2
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b2a      	cmp	r3, #42	; 0x2a
 8008c48:	d002      	beq.n	8008c50 <GPS_validate+0x5c>
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b4a      	cmp	r3, #74	; 0x4a
 8008c4e:	dde5      	ble.n	8008c1c <GPS_validate+0x28>
	}

	if (i >= 75)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b4a      	cmp	r3, #74	; 0x4a
 8008c54:	dd01      	ble.n	8008c5a <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8008c56:	2300      	movs	r3, #0
 8008c58:	e028      	b.n	8008cac <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b2a      	cmp	r3, #42	; 0x2a
 8008c64:	d119      	bne.n	8008c9a <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	3302      	adds	r3, #2
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8008c82:	f107 0308 	add.w	r3, r7, #8
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	490a      	ldr	r1, [pc, #40]	; (8008cb4 <GPS_validate+0xc0>)
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00c fb0e 	bl	80152ac <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008c90:	7a3a      	ldrb	r2, [r7, #8]
 8008c92:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d108      	bne.n	8008caa <GPS_validate+0xb6>
 8008c98:	e001      	b.n	8008c9e <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e006      	b.n	8008cac <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008c9e:	7a7a      	ldrb	r2, [r7, #9]
 8008ca0:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d101      	bne.n	8008caa <GPS_validate+0xb6>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <GPS_validate+0xb8>
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	0801bd1c 	.word	0x0801bd1c

08008cb8 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af08      	add	r7, sp, #32
 8008cbe:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8008cc0:	2206      	movs	r2, #6
 8008cc2:	4964      	ldr	r1, [pc, #400]	; (8008e54 <GPS_parse+0x19c>)
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f00c fb8a 	bl	80153de <strncmp>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d138      	bne.n	8008d42 <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8008cd0:	4b61      	ldr	r3, [pc, #388]	; (8008e58 <GPS_parse+0x1a0>)
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	4b61      	ldr	r3, [pc, #388]	; (8008e5c <GPS_parse+0x1a4>)
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	4b61      	ldr	r3, [pc, #388]	; (8008e60 <GPS_parse+0x1a8>)
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <GPS_parse+0x1ac>)
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	4b61      	ldr	r3, [pc, #388]	; (8008e68 <GPS_parse+0x1b0>)
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	4b61      	ldr	r3, [pc, #388]	; (8008e6c <GPS_parse+0x1b4>)
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <GPS_parse+0x1b8>)
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	4b61      	ldr	r3, [pc, #388]	; (8008e74 <GPS_parse+0x1bc>)
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <GPS_parse+0x1c0>)
 8008cf2:	4a62      	ldr	r2, [pc, #392]	; (8008e7c <GPS_parse+0x1c4>)
 8008cf4:	4962      	ldr	r1, [pc, #392]	; (8008e80 <GPS_parse+0x1c8>)
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f00c faf8 	bl	80152ec <siscanf>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f340 80a4 	ble.w	8008e4c <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8008d04:	4b5f      	ldr	r3, [pc, #380]	; (8008e84 <GPS_parse+0x1cc>)
 8008d06:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d0a:	4b5e      	ldr	r3, [pc, #376]	; (8008e84 <GPS_parse+0x1cc>)
 8008d0c:	7d1b      	ldrb	r3, [r3, #20]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	eeb0 0a67 	vmov.f32	s0, s15
 8008d14:	f000 f8da 	bl	8008ecc <GPS_nmea_to_dec>
 8008d18:	eef0 7a40 	vmov.f32	s15, s0
 8008d1c:	4b59      	ldr	r3, [pc, #356]	; (8008e84 <GPS_parse+0x1cc>)
 8008d1e:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8008d22:	4b58      	ldr	r3, [pc, #352]	; (8008e84 <GPS_parse+0x1cc>)
 8008d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d28:	4b56      	ldr	r3, [pc, #344]	; (8008e84 <GPS_parse+0x1cc>)
 8008d2a:	7f1b      	ldrb	r3, [r3, #28]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d32:	f000 f8cb 	bl	8008ecc <GPS_nmea_to_dec>
 8008d36:	eef0 7a40 	vmov.f32	s15, s0
 8008d3a:	4b52      	ldr	r3, [pc, #328]	; (8008e84 <GPS_parse+0x1cc>)
 8008d3c:	edc3 7a00 	vstr	s15, [r3]
			return;
 8008d40:	e084      	b.n	8008e4c <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8008d42:	2206      	movs	r2, #6
 8008d44:	4950      	ldr	r1, [pc, #320]	; (8008e88 <GPS_parse+0x1d0>)
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f00c fb49 	bl	80153de <strncmp>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d123      	bne.n	8008d9a <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8008d52:	4b4e      	ldr	r3, [pc, #312]	; (8008e8c <GPS_parse+0x1d4>)
 8008d54:	9305      	str	r3, [sp, #20]
 8008d56:	4b4e      	ldr	r3, [pc, #312]	; (8008e90 <GPS_parse+0x1d8>)
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	4b4e      	ldr	r3, [pc, #312]	; (8008e94 <GPS_parse+0x1dc>)
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	4b43      	ldr	r3, [pc, #268]	; (8008e6c <GPS_parse+0x1b4>)
 8008d60:	9302      	str	r3, [sp, #8]
 8008d62:	4b43      	ldr	r3, [pc, #268]	; (8008e70 <GPS_parse+0x1b8>)
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	4b43      	ldr	r3, [pc, #268]	; (8008e74 <GPS_parse+0x1bc>)
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4b43      	ldr	r3, [pc, #268]	; (8008e78 <GPS_parse+0x1c0>)
 8008d6c:	4a43      	ldr	r2, [pc, #268]	; (8008e7c <GPS_parse+0x1c4>)
 8008d6e:	494a      	ldr	r1, [pc, #296]	; (8008e98 <GPS_parse+0x1e0>)
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f00c fabb 	bl	80152ec <siscanf>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dd67      	ble.n	8008e4c <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8008d7c:	4b41      	ldr	r3, [pc, #260]	; (8008e84 <GPS_parse+0x1cc>)
 8008d7e:	7d1b      	ldrb	r3, [r3, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <GPS_parse+0xd2>
				GPS.ns = ' ';
 8008d84:	4b3f      	ldr	r3, [pc, #252]	; (8008e84 <GPS_parse+0x1cc>)
 8008d86:	2220      	movs	r2, #32
 8008d88:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008d8a:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <GPS_parse+0x1cc>)
 8008d8c:	7f1b      	ldrb	r3, [r3, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d157      	bne.n	8008e42 <GPS_parse+0x18a>
				GPS.ew = ' ';
 8008d92:	4b3c      	ldr	r3, [pc, #240]	; (8008e84 <GPS_parse+0x1cc>)
 8008d94:	2220      	movs	r2, #32
 8008d96:	771a      	strb	r2, [r3, #28]
			return;
 8008d98:	e053      	b.n	8008e42 <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8008d9a:	2206      	movs	r2, #6
 8008d9c:	493f      	ldr	r1, [pc, #252]	; (8008e9c <GPS_parse+0x1e4>)
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f00c fb1d 	bl	80153de <strncmp>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d11f      	bne.n	8008dea <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8008daa:	4b3d      	ldr	r3, [pc, #244]	; (8008ea0 <GPS_parse+0x1e8>)
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	4b33      	ldr	r3, [pc, #204]	; (8008e7c <GPS_parse+0x1c4>)
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <GPS_parse+0x1b4>)
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	4b2e      	ldr	r3, [pc, #184]	; (8008e70 <GPS_parse+0x1b8>)
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	4b2e      	ldr	r3, [pc, #184]	; (8008e74 <GPS_parse+0x1bc>)
 8008dbc:	4a2e      	ldr	r2, [pc, #184]	; (8008e78 <GPS_parse+0x1c0>)
 8008dbe:	4939      	ldr	r1, [pc, #228]	; (8008ea4 <GPS_parse+0x1ec>)
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f00c fa93 	bl	80152ec <siscanf>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd3f      	ble.n	8008e4c <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8008dcc:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <GPS_parse+0x1cc>)
 8008dce:	7d1b      	ldrb	r3, [r3, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <GPS_parse+0x122>
				GPS.ns = '?';
 8008dd4:	4b2b      	ldr	r3, [pc, #172]	; (8008e84 <GPS_parse+0x1cc>)
 8008dd6:	223f      	movs	r2, #63	; 0x3f
 8008dd8:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <GPS_parse+0x1cc>)
 8008ddc:	7f1b      	ldrb	r3, [r3, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d131      	bne.n	8008e46 <GPS_parse+0x18e>
				GPS.ew = '?';
 8008de2:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <GPS_parse+0x1cc>)
 8008de4:	223f      	movs	r2, #63	; 0x3f
 8008de6:	771a      	strb	r2, [r3, #28]
			return;
 8008de8:	e02d      	b.n	8008e46 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8008dea:	2206      	movs	r2, #6
 8008dec:	492e      	ldr	r1, [pc, #184]	; (8008ea8 <GPS_parse+0x1f0>)
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f00c faf5 	bl	80153de <strncmp>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d128      	bne.n	8008e4c <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8008dfa:	4b2c      	ldr	r3, [pc, #176]	; (8008eac <GPS_parse+0x1f4>)
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	4b2c      	ldr	r3, [pc, #176]	; (8008eb0 <GPS_parse+0x1f8>)
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	4b2c      	ldr	r3, [pc, #176]	; (8008eb4 <GPS_parse+0x1fc>)
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <GPS_parse+0x1dc>)
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <GPS_parse+0x200>)
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <GPS_parse+0x204>)
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <GPS_parse+0x208>)
 8008e14:	4a2b      	ldr	r2, [pc, #172]	; (8008ec4 <GPS_parse+0x20c>)
 8008e16:	492c      	ldr	r1, [pc, #176]	; (8008ec8 <GPS_parse+0x210>)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f00c fa67 	bl	80152ec <siscanf>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd13      	ble.n	8008e4c <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <GPS_parse+0x1cc>)
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <GPS_parse+0x17a>
				GPS.ns = '?';
 8008e2c:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <GPS_parse+0x1cc>)
 8008e2e:	223f      	movs	r2, #63	; 0x3f
 8008e30:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008e32:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <GPS_parse+0x1cc>)
 8008e34:	7f1b      	ldrb	r3, [r3, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d107      	bne.n	8008e4a <GPS_parse+0x192>
				GPS.ew = '?';
 8008e3a:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <GPS_parse+0x1cc>)
 8008e3c:	223f      	movs	r2, #63	; 0x3f
 8008e3e:	771a      	strb	r2, [r3, #28]
			return;
 8008e40:	e003      	b.n	8008e4a <GPS_parse+0x192>
			return;
 8008e42:	bf00      	nop
 8008e44:	e002      	b.n	8008e4c <GPS_parse+0x194>
			return;
 8008e46:	bf00      	nop
 8008e48:	e000      	b.n	8008e4c <GPS_parse+0x194>
			return;
 8008e4a:	bf00      	nop
		}
	}
}
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	0801bd24 	.word	0x0801bd24
 8008e58:	200005a0 	.word	0x200005a0
 8008e5c:	2000059c 	.word	0x2000059c
 8008e60:	20000598 	.word	0x20000598
 8008e64:	20000594 	.word	0x20000594
 8008e68:	20000590 	.word	0x20000590
 8008e6c:	2000058c 	.word	0x2000058c
 8008e70:	20000588 	.word	0x20000588
 8008e74:	20000584 	.word	0x20000584
 8008e78:	20000580 	.word	0x20000580
 8008e7c:	2000057c 	.word	0x2000057c
 8008e80:	0801bd2c 	.word	0x0801bd2c
 8008e84:	20000570 	.word	0x20000570
 8008e88:	0801bd54 	.word	0x0801bd54
 8008e8c:	200005ac 	.word	0x200005ac
 8008e90:	200005a8 	.word	0x200005a8
 8008e94:	200005a4 	.word	0x200005a4
 8008e98:	0801bd5c 	.word	0x0801bd5c
 8008e9c:	0801bd7c 	.word	0x0801bd7c
 8008ea0:	200005b0 	.word	0x200005b0
 8008ea4:	0801bd84 	.word	0x0801bd84
 8008ea8:	0801bda0 	.word	0x0801bda0
 8008eac:	200005c8 	.word	0x200005c8
 8008eb0:	200005c4 	.word	0x200005c4
 8008eb4:	200005c1 	.word	0x200005c1
 8008eb8:	200005c0 	.word	0x200005c0
 8008ebc:	200005bc 	.word	0x200005bc
 8008ec0:	200005b8 	.word	0x200005b8
 8008ec4:	200005b4 	.word	0x200005b4
 8008ec8:	0801bda8 	.word	0x0801bda8

08008ecc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	ed87 0a01 	vstr	s0, [r7, #4]
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8008eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8008ede:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008f60 <GPS_nmea_to_dec+0x94>
 8008ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eea:	ee17 3a90 	vmov	r3, s15
 8008eee:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2264      	movs	r2, #100	; 0x64
 8008ef4:	fb02 f303 	mul.w	r3, r2, r3
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f00:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f08:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8008f0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f10:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008f64 <GPS_nmea_to_dec+0x98>
 8008f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f18:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f26:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f2e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	2b53      	cmp	r3, #83	; 0x53
 8008f36:	d002      	beq.n	8008f3e <GPS_nmea_to_dec+0x72>
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	2b57      	cmp	r3, #87	; 0x57
 8008f3c:	d105      	bne.n	8008f4a <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8008f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f42:	eef1 7a67 	vneg.f32	s15, s15
 8008f46:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	ee07 3a90 	vmov	s15, r3
}
 8008f50:	eeb0 0a67 	vmov.f32	s0, s15
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	42c80000 	.word	0x42c80000
 8008f64:	42700000 	.word	0x42700000

08008f68 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8008f6c:	2007      	movs	r0, #7
 8008f6e:	f000 f871 	bl	8009054 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8008f72:	2000      	movs	r0, #0
 8008f74:	f000 f8c8 	bl	8009108 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_75HZ);
 8008f78:	2006      	movs	r0, #6
 8008f7a:	f000 f8e0 	bl	800913e <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8008f7e:	2002      	movs	r0, #2
 8008f80:	f000 f8fc 	bl	800917c <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8008f84:	2100      	movs	r1, #0
 8008f86:	2000      	movs	r0, #0
 8008f88:	f000 f84e 	bl	8009028 <HMC5883L_setOffset>

	return 0;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8008f9a:	2003      	movs	r0, #3
 8008f9c:	f000 f946 	bl	800922c <HMC5883L_readRegister16>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	; (800901c <HMC5883L_readRaw+0x88>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fb2:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <HMC5883L_readRaw+0x8c>)
 8008fb4:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8008fb8:	2007      	movs	r0, #7
 8008fba:	f000 f937 	bl	800922c <HMC5883L_readRegister16>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <HMC5883L_readRaw+0x90>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd0:	4b13      	ldr	r3, [pc, #76]	; (8009020 <HMC5883L_readRaw+0x8c>)
 8008fd2:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8008fd6:	2005      	movs	r0, #5
 8008fd8:	f000 f928 	bl	800922c <HMC5883L_readRegister16>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <HMC5883L_readRaw+0x8c>)
 8008fe8:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8008fec:	4a0c      	ldr	r2, [pc, #48]	; (8009020 <HMC5883L_readRaw+0x8c>)
 8008fee:	f107 0314 	add.w	r3, r7, #20
 8008ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ff8:	6979      	ldr	r1, [r7, #20]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	ee06 1a90 	vmov	s13, r1
 8009002:	ee07 2a10 	vmov	s14, r2
 8009006:	ee07 3a90 	vmov	s15, r3
}
 800900a:	eeb0 0a66 	vmov.f32	s0, s13
 800900e:	eef0 0a47 	vmov.f32	s1, s14
 8009012:	eeb0 1a67 	vmov.f32	s2, s15
 8009016:	3720      	adds	r7, #32
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	2000047c 	.word	0x2000047c
 8009020:	20000470 	.word	0x20000470
 8009024:	20000480 	.word	0x20000480

08009028 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8009032:	4a06      	ldr	r2, [pc, #24]	; (800904c <HMC5883L_setOffset+0x24>)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8009038:	4a05      	ldr	r2, [pc, #20]	; (8009050 <HMC5883L_setOffset+0x28>)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6013      	str	r3, [r2, #0]
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	2000047c 	.word	0x2000047c
 8009050:	20000480 	.word	0x20000480

08009054 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
    switch(range)
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	2b07      	cmp	r3, #7
 8009062:	d833      	bhi.n	80090cc <HMC5883L_setRange+0x78>
 8009064:	a201      	add	r2, pc, #4	; (adr r2, 800906c <HMC5883L_setRange+0x18>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009095 	.word	0x08009095
 8009074:	0800909d 	.word	0x0800909d
 8009078:	080090a5 	.word	0x080090a5
 800907c:	080090ad 	.word	0x080090ad
 8009080:	080090b5 	.word	0x080090b5
 8009084:	080090bd 	.word	0x080090bd
 8009088:	080090c5 	.word	0x080090c5
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <HMC5883L_setRange+0x90>)
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <HMC5883L_setRange+0x94>)
 8009090:	601a      	str	r2, [r3, #0]
	    break;
 8009092:	e01c      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8009094:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <HMC5883L_setRange+0x90>)
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <HMC5883L_setRange+0x98>)
 8009098:	601a      	str	r2, [r3, #0]
	    break;
 800909a:	e018      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <HMC5883L_setRange+0x90>)
 800909e:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <HMC5883L_setRange+0x9c>)
 80090a0:	601a      	str	r2, [r3, #0]
	    break;
 80090a2:	e014      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <HMC5883L_setRange+0x90>)
 80090a6:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <HMC5883L_setRange+0xa0>)
 80090a8:	601a      	str	r2, [r3, #0]
	    break;
 80090aa:	e010      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <HMC5883L_setRange+0x90>)
 80090ae:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <HMC5883L_setRange+0xa4>)
 80090b0:	601a      	str	r2, [r3, #0]
	    break;
 80090b2:	e00c      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 80090b4:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <HMC5883L_setRange+0x90>)
 80090b6:	4a11      	ldr	r2, [pc, #68]	; (80090fc <HMC5883L_setRange+0xa8>)
 80090b8:	601a      	str	r2, [r3, #0]
	    break;
 80090ba:	e008      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <HMC5883L_setRange+0x90>)
 80090be:	4a10      	ldr	r2, [pc, #64]	; (8009100 <HMC5883L_setRange+0xac>)
 80090c0:	601a      	str	r2, [r3, #0]
	    break;
 80090c2:	e004      	b.n	80090ce <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <HMC5883L_setRange+0x90>)
 80090c6:	4a0f      	ldr	r2, [pc, #60]	; (8009104 <HMC5883L_setRange+0xb0>)
 80090c8:	601a      	str	r2, [r3, #0]
	    break;
 80090ca:	e000      	b.n	80090ce <HMC5883L_setRange+0x7a>

	default:
	    break;
 80090cc:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	015b      	lsls	r3, r3, #5
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	2001      	movs	r0, #1
 80090d8:	f000 f870 	bl	80091bc <HMC5883L_writeRegister8>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	2000046c 	.word	0x2000046c
 80090e8:	3d958106 	.word	0x3d958106
 80090ec:	3f6b851f 	.word	0x3f6b851f
 80090f0:	3f9c28f6 	.word	0x3f9c28f6
 80090f4:	3fc28f5c 	.word	0x3fc28f5c
 80090f8:	401147ae 	.word	0x401147ae
 80090fc:	4023d70a 	.word	0x4023d70a
 8009100:	4041eb85 	.word	0x4041eb85
 8009104:	408b3333 	.word	0x408b3333

08009108 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8009112:	2002      	movs	r0, #2
 8009114:	f000 f86e 	bl	80091f4 <HMC5883L_readRegister8>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]
    // Mask out the lower 2 bits
    value &= 0b11111100;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	73fb      	strb	r3, [r7, #15]
    // Set the lower 2 bits
    value |= mode;
 8009124:	7bfa      	ldrb	r2, [r7, #15]
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	4313      	orrs	r3, r2
 800912a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	4619      	mov	r1, r3
 8009130:	2002      	movs	r0, #2
 8009132:	f000 f843 	bl	80091bc <HMC5883L_writeRegister8>
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	4603      	mov	r3, r0
 8009146:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8009148:	2000      	movs	r0, #0
 800914a:	f000 f853 	bl	80091f4 <HMC5883L_readRegister8>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b11100011;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	f023 031c 	bic.w	r3, r3, #28
 8009158:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (dataRate << 2);
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	b25a      	sxtb	r2, r3
 8009160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009164:	4313      	orrs	r3, r2
 8009166:	b25b      	sxtb	r3, r3
 8009168:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	4619      	mov	r1, r3
 800916e:	2000      	movs	r0, #0
 8009170:	f000 f824 	bl	80091bc <HMC5883L_writeRegister8>
}
 8009174:	bf00      	nop
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8009186:	2000      	movs	r0, #0
 8009188:	f000 f834 	bl	80091f4 <HMC5883L_readRegister8>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b10011111;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009196:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (samples << 5);
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	015b      	lsls	r3, r3, #5
 800919c:	b25a      	sxtb	r2, r3
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	4619      	mov	r1, r3
 80091ac:	2000      	movs	r0, #0
 80091ae:	f000 f805 	bl	80091bc <HMC5883L_writeRegister8>
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af04      	add	r7, sp, #16
 80091c2:	4603      	mov	r3, r0
 80091c4:	460a      	mov	r2, r1
 80091c6:	71fb      	strb	r3, [r7, #7]
 80091c8:	4613      	mov	r3, r2
 80091ca:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80091d4:	9302      	str	r3, [sp, #8]
 80091d6:	2301      	movs	r3, #1
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	1dbb      	adds	r3, r7, #6
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2301      	movs	r3, #1
 80091e0:	213c      	movs	r1, #60	; 0x3c
 80091e2:	4803      	ldr	r0, [pc, #12]	; (80091f0 <HMC5883L_writeRegister8+0x34>)
 80091e4:	f002 fb9c 	bl	800b920 <HAL_I2C_Mem_Write>
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	200009c4 	.word	0x200009c4

080091f4 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af04      	add	r7, sp, #16
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	b29a      	uxth	r2, r3
 8009202:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	2301      	movs	r3, #1
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	f107 030f 	add.w	r3, r7, #15
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	2301      	movs	r3, #1
 8009214:	213c      	movs	r1, #60	; 0x3c
 8009216:	4804      	ldr	r0, [pc, #16]	; (8009228 <HMC5883L_readRegister8+0x34>)
 8009218:	f002 fc96 	bl	800bb48 <HAL_I2C_Mem_Read>
    return value;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200009c4 	.word	0x200009c4

0800922c <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af04      	add	r7, sp, #16
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	b29a      	uxth	r2, r3
 800923a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	2302      	movs	r3, #2
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	f107 030e 	add.w	r3, r7, #14
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2301      	movs	r3, #1
 800924c:	213c      	movs	r1, #60	; 0x3c
 800924e:	4804      	ldr	r0, [pc, #16]	; (8009260 <HMC5883L_readRegister16+0x34>)
 8009250:	f002 fc7a 	bl	800bb48 <HAL_I2C_Mem_Read>
    return value;
 8009254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200009c4 	.word	0x200009c4

08009264 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 800926e:	2201      	movs	r2, #1
 8009270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009274:	481a      	ldr	r0, [pc, #104]	; (80092e0 <BMP280_initialize+0x7c>)
 8009276:	f002 faa9 	bl	800b7cc <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8009280:	6838      	ldr	r0, [r7, #0]
 8009282:	f000 f83c 	bl	80092fe <BMP280_getID>
 8009286:	4603      	mov	r3, r0
 8009288:	2b58      	cmp	r3, #88	; 0x58
 800928a:	d001      	beq.n	8009290 <BMP280_initialize+0x2c>
    {
        return 1;
 800928c:	2301      	movs	r3, #1
 800928e:	e023      	b.n	80092d8 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8009290:	6838      	ldr	r0, [r7, #0]
 8009292:	f000 f827 	bl	80092e4 <BMP280_reset>
    HAL_Delay(500);
 8009296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800929a:	f001 fbeb 	bl	800aa74 <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 800929e:	2105      	movs	r1, #5
 80092a0:	6838      	ldr	r0, [r7, #0]
 80092a2:	f000 f8ef 	bl	8009484 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 80092a6:	2102      	movs	r1, #2
 80092a8:	6838      	ldr	r0, [r7, #0]
 80092aa:	f000 f90c 	bl	80094c6 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 80092ae:	2103      	movs	r1, #3
 80092b0:	6838      	ldr	r0, [r7, #0]
 80092b2:	f000 f929 	bl	8009508 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 80092b6:	2104      	movs	r1, #4
 80092b8:	6838      	ldr	r0, [r7, #0]
 80092ba:	f000 f966 	bl	800958a <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 80092be:	2100      	movs	r1, #0
 80092c0:	6838      	ldr	r0, [r7, #0]
 80092c2:	f000 f941 	bl	8009548 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 80092c6:	6838      	ldr	r0, [r7, #0]
 80092c8:	f000 f826 	bl	8009318 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 80092cc:	2232      	movs	r2, #50	; 0x32
 80092ce:	2164      	movs	r1, #100	; 0x64
 80092d0:	6838      	ldr	r0, [r7, #0]
 80092d2:	f000 f89e 	bl	8009412 <BMP280_setReferencePressure>

    return 0;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40020c00 	.word	0x40020c00

080092e4 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80092ec:	22b6      	movs	r2, #182	; 0xb6
 80092ee:	21e0      	movs	r1, #224	; 0xe0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa27 	bl	8009744 <BMP280_writeRegister>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 8009306:	21d0      	movs	r1, #208	; 0xd0
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f9ff 	bl	800970c <BMP280_readRegister>
 800930e:	4603      	mov	r3, r0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 8009320:	f107 0208 	add.w	r2, r7, #8
 8009324:	2318      	movs	r3, #24
 8009326:	2188      	movs	r1, #136	; 0x88
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa2a 	bl	8009782 <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 800932e:	7a7b      	ldrb	r3, [r7, #9]
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	b21a      	sxth	r2, r3
 8009334:	7a3b      	ldrb	r3, [r7, #8]
 8009336:	b21b      	sxth	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b21b      	sxth	r3, r3
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8009342:	7afb      	ldrb	r3, [r7, #11]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	b21a      	sxth	r2, r3
 8009348:	7abb      	ldrb	r3, [r7, #10]
 800934a:	b21b      	sxth	r3, r3
 800934c:	4313      	orrs	r3, r2
 800934e:	b21a      	sxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8009354:	7b7b      	ldrb	r3, [r7, #13]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	b21a      	sxth	r2, r3
 800935a:	7b3b      	ldrb	r3, [r7, #12]
 800935c:	b21b      	sxth	r3, r3
 800935e:	4313      	orrs	r3, r2
 8009360:	b21a      	sxth	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b21a      	sxth	r2, r3
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	b21b      	sxth	r3, r3
 8009370:	4313      	orrs	r3, r2
 8009372:	b21b      	sxth	r3, r3
 8009374:	b29a      	uxth	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 800937a:	7c7b      	ldrb	r3, [r7, #17]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	b21a      	sxth	r2, r3
 8009380:	7c3b      	ldrb	r3, [r7, #16]
 8009382:	b21b      	sxth	r3, r3
 8009384:	4313      	orrs	r3, r2
 8009386:	b21a      	sxth	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 800938c:	7cfb      	ldrb	r3, [r7, #19]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	b21a      	sxth	r2, r3
 8009392:	7cbb      	ldrb	r3, [r7, #18]
 8009394:	b21b      	sxth	r3, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	b21a      	sxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 800939e:	7d7b      	ldrb	r3, [r7, #21]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	b21a      	sxth	r2, r3
 80093a4:	7d3b      	ldrb	r3, [r7, #20]
 80093a6:	b21b      	sxth	r3, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b21a      	sxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b21a      	sxth	r2, r3
 80093b6:	7dbb      	ldrb	r3, [r7, #22]
 80093b8:	b21b      	sxth	r3, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b21a      	sxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 80093c2:	7e7b      	ldrb	r3, [r7, #25]
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	7e3b      	ldrb	r3, [r7, #24]
 80093ca:	b21b      	sxth	r3, r3
 80093cc:	4313      	orrs	r3, r2
 80093ce:	b21a      	sxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 80093d4:	7efb      	ldrb	r3, [r7, #27]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	b21a      	sxth	r2, r3
 80093da:	7ebb      	ldrb	r3, [r7, #26]
 80093dc:	b21b      	sxth	r3, r3
 80093de:	4313      	orrs	r3, r2
 80093e0:	b21a      	sxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 80093e6:	7f7b      	ldrb	r3, [r7, #29]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	b21a      	sxth	r2, r3
 80093ec:	7f3b      	ldrb	r3, [r7, #28]
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 80093f8:	7ffb      	ldrb	r3, [r7, #31]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	b21a      	sxth	r2, r3
 80093fe:	7fbb      	ldrb	r3, [r7, #30]
 8009400:	b21b      	sxth	r3, r3
 8009402:	4313      	orrs	r3, r2
 8009404:	b21a      	sxth	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 800940a:	bf00      	nop
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	807b      	strh	r3, [r7, #2]
 800941e:	4613      	mov	r3, r2
 8009420:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 8009422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009426:	f001 fb25 	bl	800aa74 <HAL_Delay>
    float sum = 0;
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8009430:	2300      	movs	r3, #0
 8009432:	60bb      	str	r3, [r7, #8]
 8009434:	e012      	b.n	800945c <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f8ca 	bl	80095d0 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009442:	ed97 7a03 	vldr	s14, [r7, #12]
 8009446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800944a:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 800944e:	787b      	ldrb	r3, [r7, #1]
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fb0f 	bl	800aa74 <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	3301      	adds	r3, #1
 800945a:	60bb      	str	r3, [r7, #8]
 800945c:	887b      	ldrh	r3, [r7, #2]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	dbe8      	blt.n	8009436 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8009464:	887b      	ldrh	r3, [r7, #2]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800946e:	edd7 6a03 	vldr	s13, [r7, #12]
 8009472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8009490:	21f4      	movs	r1, #244	; 0xf4
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f93a 	bl	800970c <BMP280_readRegister>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 800949c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a0:	f023 031c 	bic.w	r3, r3, #28
 80094a4:	b25a      	sxtb	r2, r3
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	b25b      	sxtb	r3, r3
 80094ac:	4313      	orrs	r3, r2
 80094ae:	b25b      	sxtb	r3, r3
 80094b0:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	461a      	mov	r2, r3
 80094b6:	21f4      	movs	r1, #244	; 0xf4
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f943 	bl	8009744 <BMP280_writeRegister>
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80094d2:	21f4      	movs	r1, #244	; 0xf4
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f919 	bl	800970c <BMP280_readRegister>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	b25a      	sxtb	r2, r3
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	015b      	lsls	r3, r3, #5
 80094ec:	b25b      	sxtb	r3, r3
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b25b      	sxtb	r3, r3
 80094f2:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	461a      	mov	r2, r3
 80094f8:	21f4      	movs	r1, #244	; 0xf4
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f922 	bl	8009744 <BMP280_writeRegister>
}
 8009500:	bf00      	nop
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8009514:	21f4      	movs	r1, #244	; 0xf4
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8f8 	bl	800970c <BMP280_readRegister>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 8009520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009524:	f023 0303 	bic.w	r3, r3, #3
 8009528:	b25a      	sxtb	r2, r3
 800952a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800952e:	4313      	orrs	r3, r2
 8009530:	b25b      	sxtb	r3, r3
 8009532:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	461a      	mov	r2, r3
 8009538:	21f4      	movs	r1, #244	; 0xf4
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f902 	bl	8009744 <BMP280_writeRegister>
}
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8009554:	21f5      	movs	r1, #245	; 0xf5
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f8d8 	bl	800970c <BMP280_readRegister>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8009560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	b25a      	sxtb	r2, r3
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	015b      	lsls	r3, r3, #5
 800956e:	b25b      	sxtb	r3, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	b25b      	sxtb	r3, r3
 8009574:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	461a      	mov	r2, r3
 800957a:	21f5      	movs	r1, #245	; 0xf5
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f8e1 	bl	8009744 <BMP280_writeRegister>
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8009596:	21f5      	movs	r1, #245	; 0xf5
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f8b7 	bl	800970c <BMP280_readRegister>
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 80095a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a6:	f023 031c 	bic.w	r3, r3, #28
 80095aa:	b25a      	sxtb	r2, r3
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b25b      	sxtb	r3, r3
 80095b6:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	461a      	mov	r2, r3
 80095bc:	21f5      	movs	r1, #245	; 0xf5
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f8c0 	bl	8009744 <BMP280_writeRegister>
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	0000      	movs	r0, r0
	...

080095d0 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 80095d8:	f107 0208 	add.w	r2, r7, #8
 80095dc:	2306      	movs	r3, #6
 80095de:	21f7      	movs	r1, #247	; 0xf7
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f8ce 	bl	8009782 <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80095e6:	7a3b      	ldrb	r3, [r7, #8]
 80095e8:	031a      	lsls	r2, r3, #12
 80095ea:	7a7b      	ldrb	r3, [r7, #9]
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	4313      	orrs	r3, r2
 80095f0:	7aba      	ldrb	r2, [r7, #10]
 80095f2:	0912      	lsrs	r2, r2, #4
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	031a      	lsls	r2, r3, #12
 80095fe:	7b3b      	ldrb	r3, [r7, #12]
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	4313      	orrs	r3, r2
 8009604:	7b7a      	ldrb	r2, [r7, #13]
 8009606:	0912      	lsrs	r2, r2, #4
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 800960e:	6939      	ldr	r1, [r7, #16]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f917 	bl	8009844 <BMP280_compensate_temperature>
 8009616:	ee07 0a90 	vmov	s15, r0
 800961a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961e:	ee17 0a90 	vmov	r0, s15
 8009622:	f7f6 ffb9 	bl	8000598 <__aeabi_f2d>
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	4b35      	ldr	r3, [pc, #212]	; (8009700 <BMP280_measure+0x130>)
 800962c:	f7f7 f936 	bl	800089c <__aeabi_ddiv>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	f7f7 fafe 	bl	8000c38 <__aeabi_d2f>
 800963c:	4602      	mov	r2, r0
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 8009642:	6979      	ldr	r1, [r7, #20]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f953 	bl	80098f0 <BMP280_compensate_pressure>
 800964a:	ee07 0a90 	vmov	s15, r0
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	ee17 0a90 	vmov	r0, s15
 8009656:	f7f6 ff9f 	bl	8000598 <__aeabi_f2d>
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	4b29      	ldr	r3, [pc, #164]	; (8009704 <BMP280_measure+0x134>)
 8009660:	f7f7 f91c 	bl	800089c <__aeabi_ddiv>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4610      	mov	r0, r2
 800966a:	4619      	mov	r1, r3
 800966c:	f7f7 fae4 	bl	8000c38 <__aeabi_d2f>
 8009670:	4602      	mov	r2, r0
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	edd3 7a01 	vldr	s15, [r3, #4]
 800967c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009684:	dc00      	bgt.n	8009688 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 8009686:	e02c      	b.n	80096e2 <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	ed93 7a04 	vldr	s14, [r3, #16]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	edd3 7a01 	vldr	s15, [r3, #4]
 8009694:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009698:	ee16 0a90 	vmov	r0, s13
 800969c:	f7f6 ff7c 	bl	8000598 <__aeabi_f2d>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80096f0 <BMP280_measure+0x120>
 80096a8:	ec43 2b10 	vmov	d0, r2, r3
 80096ac:	f00f ff28 	bl	8019500 <pow>
 80096b0:	ec53 2b10 	vmov	r2, r3, d0
 80096b4:	f04f 0000 	mov.w	r0, #0
 80096b8:	4913      	ldr	r1, [pc, #76]	; (8009708 <BMP280_measure+0x138>)
 80096ba:	f7f6 fe0d 	bl	80002d8 <__aeabi_dsub>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	a30c      	add	r3, pc, #48	; (adr r3, 80096f8 <BMP280_measure+0x128>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f7f6 ffbc 	bl	8000648 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4610      	mov	r0, r2
 80096d6:	4619      	mov	r1, r3
 80096d8:	f7f7 faae 	bl	8000c38 <__aeabi_d2f>
 80096dc:	4602      	mov	r2, r0
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	615a      	str	r2, [r3, #20]
}
 80096e2:	bf00      	nop
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	f3af 8000 	nop.w
 80096f0:	1a36e2eb 	.word	0x1a36e2eb
 80096f4:	3fc85bc0 	.word	0x3fc85bc0
 80096f8:	00000000 	.word	0x00000000
 80096fc:	4150e92d 	.word	0x4150e92d
 8009700:	40590000 	.word	0x40590000
 8009704:	40700000 	.word	0x40700000
 8009708:	3ff00000 	.word	0x3ff00000

0800970c <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f883 	bl	8009824 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f855 	bl	80097d2 <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8009728:	2100      	movs	r1, #0
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f851 	bl	80097d2 <BMP280_spiReadWrite>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f865 	bl	8009804 <BMP280_spiCSNhigh>
    return value;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
 8009750:	4613      	mov	r3, r2
 8009752:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f865 	bl	8009824 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009760:	b2db      	uxtb	r3, r3
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f834 	bl	80097d2 <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 800976a:	78bb      	ldrb	r3, [r7, #2]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f82f 	bl	80097d2 <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f845 	bl	8009804 <BMP280_spiCSNhigh>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 8009782:	b590      	push	{r4, r7, lr}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	461a      	mov	r2, r3
 800978e:	460b      	mov	r3, r1
 8009790:	72fb      	strb	r3, [r7, #11]
 8009792:	4613      	mov	r3, r2
 8009794:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 f844 	bl	8009824 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f816 	bl	80097d2 <BMP280_spiReadWrite>
    while (length--)
 80097a6:	e008      	b.n	80097ba <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 80097a8:	687c      	ldr	r4, [r7, #4]
 80097aa:	1c63      	adds	r3, r4, #1
 80097ac:	607b      	str	r3, [r7, #4]
 80097ae:	2100      	movs	r1, #0
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f80e 	bl	80097d2 <BMP280_spiReadWrite>
 80097b6:	4603      	mov	r3, r0
 80097b8:	7023      	strb	r3, [r4, #0]
    while (length--)
 80097ba:	7abb      	ldrb	r3, [r7, #10]
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	72ba      	strb	r2, [r7, #10]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1f1      	bne.n	80097a8 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f81d 	bl	8009804 <BMP280_spiCSNhigh>
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd90      	pop	{r4, r7, pc}

080097d2 <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 80097de:	23ff      	movs	r3, #255	; 0xff
 80097e0:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f107 020f 	add.w	r2, r7, #15
 80097ea:	1cf9      	adds	r1, r7, #3
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	2301      	movs	r3, #1
 80097f4:	f004 f993 	bl	800db1e <HAL_SPI_TransmitReceive>
    return rx_message;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 800980c:	2201      	movs	r2, #1
 800980e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009812:	4803      	ldr	r0, [pc, #12]	; (8009820 <BMP280_spiCSNhigh+0x1c>)
 8009814:	f001 ffda 	bl	800b7cc <HAL_GPIO_WritePin>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	40020c00 	.word	0x40020c00

08009824 <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 800982c:	2200      	movs	r2, #0
 800982e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009832:	4803      	ldr	r0, [pc, #12]	; (8009840 <BMP280_spiCSNlow+0x1c>)
 8009834:	f001 ffca 	bl	800b7cc <HAL_GPIO_WritePin>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40020c00 	.word	0x40020c00

08009844 <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da00      	bge.n	8009856 <BMP280_compensate_temperature+0x12>
 8009854:	3307      	adds	r3, #7
 8009856:	10db      	asrs	r3, r3, #3
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	8b1b      	ldrh	r3, [r3, #24]
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8009868:	fb02 f303 	mul.w	r3, r2, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	da01      	bge.n	8009874 <BMP280_compensate_temperature+0x30>
 8009870:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009874:	12db      	asrs	r3, r3, #11
 8009876:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	da00      	bge.n	8009880 <BMP280_compensate_temperature+0x3c>
 800987e:	330f      	adds	r3, #15
 8009880:	111b      	asrs	r3, r3, #4
 8009882:	461a      	mov	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8b1b      	ldrh	r3, [r3, #24]
 8009888:	1ad2      	subs	r2, r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	da00      	bge.n	8009892 <BMP280_compensate_temperature+0x4e>
 8009890:	330f      	adds	r3, #15
 8009892:	111b      	asrs	r3, r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8b1b      	ldrh	r3, [r3, #24]
 800989a:	1acb      	subs	r3, r1, r3
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da01      	bge.n	80098a8 <BMP280_compensate_temperature+0x64>
 80098a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80098a8:	131b      	asrs	r3, r3, #12
 80098aa:	461a      	mov	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da03      	bge.n	80098c2 <BMP280_compensate_temperature+0x7e>
 80098ba:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80098be:	441a      	add	r2, r3
 80098c0:	4613      	mov	r3, r2
 80098c2:	139b      	asrs	r3, r3, #14
 80098c4:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	441a      	add	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	3380      	adds	r3, #128	; 0x80
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da00      	bge.n	80098e2 <BMP280_compensate_temperature+0x9e>
 80098e0:	33ff      	adds	r3, #255	; 0xff
 80098e2:	121b      	asrs	r3, r3, #8
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 80098f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f4:	b0d6      	sub	sp, #344	; 0x158
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80098fc:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8009900:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	17da      	asrs	r2, r3, #31
 8009908:	461c      	mov	r4, r3
 800990a:	4615      	mov	r5, r2
 800990c:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8009910:	f145 3bff 	adc.w	fp, r5, #4294967295
 8009914:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8009918:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800991c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009920:	fb03 f102 	mul.w	r1, r3, r2
 8009924:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009928:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800992c:	fb02 f303 	mul.w	r3, r2, r3
 8009930:	18ca      	adds	r2, r1, r3
 8009932:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009936:	fba3 8903 	umull	r8, r9, r3, r3
 800993a:	eb02 0309 	add.w	r3, r2, r9
 800993e:	4699      	mov	r9, r3
 8009940:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009944:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8009948:	b21b      	sxth	r3, r3
 800994a:	17da      	asrs	r2, r3, #31
 800994c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009950:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009954:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009958:	4603      	mov	r3, r0
 800995a:	fb03 f209 	mul.w	r2, r3, r9
 800995e:	460b      	mov	r3, r1
 8009960:	fb08 f303 	mul.w	r3, r8, r3
 8009964:	4413      	add	r3, r2
 8009966:	4602      	mov	r2, r0
 8009968:	fba8 1202 	umull	r1, r2, r8, r2
 800996c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009970:	460a      	mov	r2, r1
 8009972:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009976:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800997a:	4413      	add	r3, r2
 800997c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009980:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8009984:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8009988:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 800998c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009990:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8009994:	b21b      	sxth	r3, r3
 8009996:	17da      	asrs	r2, r3, #31
 8009998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800999c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80099a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099a4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80099a8:	462a      	mov	r2, r5
 80099aa:	fb02 f203 	mul.w	r2, r2, r3
 80099ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80099b2:	4621      	mov	r1, r4
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	441a      	add	r2, r3
 80099ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099be:	4621      	mov	r1, r4
 80099c0:	fba3 1301 	umull	r1, r3, r3, r1
 80099c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80099c8:	460b      	mov	r3, r1
 80099ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80099ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099d2:	18d3      	adds	r3, r2, r3
 80099d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80099d8:	f04f 0000 	mov.w	r0, #0
 80099dc:	f04f 0100 	mov.w	r1, #0
 80099e0:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80099e4:	462b      	mov	r3, r5
 80099e6:	0459      	lsls	r1, r3, #17
 80099e8:	4623      	mov	r3, r4
 80099ea:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80099ee:	4623      	mov	r3, r4
 80099f0:	0458      	lsls	r0, r3, #17
 80099f2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80099f6:	1814      	adds	r4, r2, r0
 80099f8:	67bc      	str	r4, [r7, #120]	; 0x78
 80099fa:	414b      	adcs	r3, r1
 80099fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099fe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009a02:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 8009a06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a0a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	17da      	asrs	r2, r3, #31
 8009a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a1a:	f04f 0000 	mov.w	r0, #0
 8009a1e:	f04f 0100 	mov.w	r1, #0
 8009a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a26:	00d9      	lsls	r1, r3, #3
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a2e:	1814      	adds	r4, r2, r0
 8009a30:	673c      	str	r4, [r7, #112]	; 0x70
 8009a32:	414b      	adcs	r3, r1
 8009a34:	677b      	str	r3, [r7, #116]	; 0x74
 8009a36:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8009a3a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8009a3e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a42:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a46:	fb03 f102 	mul.w	r1, r3, r2
 8009a4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a4e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	18ca      	adds	r2, r1, r3
 8009a58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a5c:	fba3 1303 	umull	r1, r3, r3, r3
 8009a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a64:	460b      	mov	r3, r1
 8009a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6e:	18d3      	adds	r3, r2, r3
 8009a70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a78:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009a7c:	b21b      	sxth	r3, r3
 8009a7e:	17da      	asrs	r2, r3, #31
 8009a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a88:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a92:	4642      	mov	r2, r8
 8009a94:	fb02 f203 	mul.w	r2, r2, r3
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	fb01 f303 	mul.w	r3, r1, r3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	fba2 1201 	umull	r1, r2, r2, r1
 8009aaa:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009aae:	460a      	mov	r2, r1
 8009ab0:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8009ab4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009ab8:	4413      	add	r3, r2
 8009aba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009abe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da07      	bge.n	8009ad6 <BMP280_compensate_pressure+0x1e6>
 8009ac6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009aca:	66b9      	str	r1, [r7, #104]	; 0x68
 8009acc:	f143 0300 	adc.w	r3, r3, #0
 8009ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ad2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009ad6:	f04f 0000 	mov.w	r0, #0
 8009ada:	f04f 0100 	mov.w	r1, #0
 8009ade:	0a10      	lsrs	r0, r2, #8
 8009ae0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009ae4:	1219      	asrs	r1, r3, #8
 8009ae6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009aea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009aee:	b21b      	sxth	r3, r3
 8009af0:	17da      	asrs	r2, r3, #31
 8009af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009af6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009afa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009afe:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8009b02:	464a      	mov	r2, r9
 8009b04:	fb02 f203 	mul.w	r2, r2, r3
 8009b08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b0c:	4644      	mov	r4, r8
 8009b0e:	fb04 f303 	mul.w	r3, r4, r3
 8009b12:	441a      	add	r2, r3
 8009b14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b18:	4644      	mov	r4, r8
 8009b1a:	fba3 4304 	umull	r4, r3, r3, r4
 8009b1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b22:	4623      	mov	r3, r4
 8009b24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b2c:	18d3      	adds	r3, r2, r3
 8009b2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009b3e:	464c      	mov	r4, r9
 8009b40:	0323      	lsls	r3, r4, #12
 8009b42:	4644      	mov	r4, r8
 8009b44:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009b48:	4644      	mov	r4, r8
 8009b4a:	0322      	lsls	r2, r4, #12
 8009b4c:	1884      	adds	r4, r0, r2
 8009b4e:	663c      	str	r4, [r7, #96]	; 0x60
 8009b50:	eb41 0303 	adc.w	r3, r1, r3
 8009b54:	667b      	str	r3, [r7, #100]	; 0x64
 8009b56:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8009b5a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8009b5e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009b62:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8009b66:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8009b6a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009b6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b72:	8bdb      	ldrh	r3, [r3, #30]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b80:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009b84:	462b      	mov	r3, r5
 8009b86:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	fb02 f203 	mul.w	r2, r2, r3
 8009b90:	464b      	mov	r3, r9
 8009b92:	4621      	mov	r1, r4
 8009b94:	fb01 f303 	mul.w	r3, r1, r3
 8009b98:	4413      	add	r3, r2
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	fba2 1201 	umull	r1, r2, r2, r1
 8009ba2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009bac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bb6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da06      	bge.n	8009bcc <BMP280_compensate_pressure+0x2dc>
 8009bbe:	1e51      	subs	r1, r2, #1
 8009bc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bc2:	f143 0301 	adc.w	r3, r3, #1
 8009bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bcc:	f04f 0000 	mov.w	r0, #0
 8009bd0:	f04f 0100 	mov.w	r1, #0
 8009bd4:	1058      	asrs	r0, r3, #1
 8009bd6:	17d9      	asrs	r1, r3, #31
 8009bd8:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8009bdc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009be0:	4313      	orrs	r3, r2
 8009be2:	d101      	bne.n	8009be8 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e182      	b.n	8009eee <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8009be8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8009bf0:	17da      	asrs	r2, r3, #31
 8009bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8009bf4:	657a      	str	r2, [r7, #84]	; 0x54
 8009bf6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8009bfa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8009bfe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009c02:	f04f 0000 	mov.w	r0, #0
 8009c06:	f04f 0100 	mov.w	r1, #0
 8009c0a:	07d9      	lsls	r1, r3, #31
 8009c0c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8009c10:	07d0      	lsls	r0, r2, #31
 8009c12:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c16:	1a84      	subs	r4, r0, r2
 8009c18:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009c1c:	eb61 0303 	sbc.w	r3, r1, r3
 8009c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c24:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8009c28:	4622      	mov	r2, r4
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	1891      	adds	r1, r2, r2
 8009c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c30:	415b      	adcs	r3, r3
 8009c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c38:	4621      	mov	r1, r4
 8009c3a:	1851      	adds	r1, r2, r1
 8009c3c:	6439      	str	r1, [r7, #64]	; 0x40
 8009c3e:	4629      	mov	r1, r5
 8009c40:	414b      	adcs	r3, r1
 8009c42:	647b      	str	r3, [r7, #68]	; 0x44
 8009c44:	f04f 0200 	mov.w	r2, #0
 8009c48:	f04f 0300 	mov.w	r3, #0
 8009c4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009c50:	4649      	mov	r1, r9
 8009c52:	018b      	lsls	r3, r1, #6
 8009c54:	4641      	mov	r1, r8
 8009c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c5a:	4641      	mov	r1, r8
 8009c5c:	018a      	lsls	r2, r1, #6
 8009c5e:	4641      	mov	r1, r8
 8009c60:	1889      	adds	r1, r1, r2
 8009c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c64:	4649      	mov	r1, r9
 8009c66:	eb43 0101 	adc.w	r1, r3, r1
 8009c6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009c78:	4649      	mov	r1, r9
 8009c7a:	008b      	lsls	r3, r1, #2
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c82:	4641      	mov	r1, r8
 8009c84:	008a      	lsls	r2, r1, #2
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	189b      	adds	r3, r3, r2
 8009c90:	633b      	str	r3, [r7, #48]	; 0x30
 8009c92:	460b      	mov	r3, r1
 8009c94:	462a      	mov	r2, r5
 8009c96:	eb42 0303 	adc.w	r3, r2, r3
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8009ca8:	4649      	mov	r1, r9
 8009caa:	008b      	lsls	r3, r1, #2
 8009cac:	4641      	mov	r1, r8
 8009cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	008a      	lsls	r2, r1, #2
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	eb42 0303 	adc.w	r3, r2, r3
 8009ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cd0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009cd4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009cd8:	f7f6 fffe 	bl	8000cd8 <__aeabi_ldivmod>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8009ce4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009ce8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8009cec:	b21b      	sxth	r3, r3
 8009cee:	17da      	asrs	r2, r3, #31
 8009cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cf4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cf8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da08      	bge.n	8009d12 <BMP280_compensate_pressure+0x422>
 8009d00:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009d04:	1851      	adds	r1, r2, r1
 8009d06:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d08:	f143 0300 	adc.w	r3, r3, #0
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f04f 0100 	mov.w	r1, #0
 8009d1a:	0b50      	lsrs	r0, r2, #13
 8009d1c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009d20:	1359      	asrs	r1, r3, #13
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	fb02 f001 	mul.w	r0, r2, r1
 8009d30:	4621      	mov	r1, r4
 8009d32:	fb01 f103 	mul.w	r1, r1, r3
 8009d36:	4401      	add	r1, r0
 8009d38:	4620      	mov	r0, r4
 8009d3a:	fba0 2302 	umull	r2, r3, r0, r2
 8009d3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d42:	4613      	mov	r3, r2
 8009d44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d4c:	18cb      	adds	r3, r1, r3
 8009d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d52:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da08      	bge.n	8009d6c <BMP280_compensate_pressure+0x47c>
 8009d5a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009d5e:	1851      	adds	r1, r2, r1
 8009d60:	6239      	str	r1, [r7, #32]
 8009d62:	f143 0300 	adc.w	r3, r3, #0
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
 8009d68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d6c:	f04f 0000 	mov.w	r0, #0
 8009d70:	f04f 0100 	mov.w	r1, #0
 8009d74:	0b50      	lsrs	r0, r2, #13
 8009d76:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009d7a:	1359      	asrs	r1, r3, #13
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8009d84:	4629      	mov	r1, r5
 8009d86:	fb02 f001 	mul.w	r0, r2, r1
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	fb01 f103 	mul.w	r1, r1, r3
 8009d90:	4401      	add	r1, r0
 8009d92:	4620      	mov	r0, r4
 8009d94:	fba0 2302 	umull	r2, r3, r0, r2
 8009d98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da6:	18cb      	adds	r3, r1, r3
 8009da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009dac:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	da08      	bge.n	8009dc6 <BMP280_compensate_pressure+0x4d6>
 8009db4:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009db8:	1851      	adds	r1, r2, r1
 8009dba:	61b9      	str	r1, [r7, #24]
 8009dbc:	f143 0300 	adc.w	r3, r3, #0
 8009dc0:	61fb      	str	r3, [r7, #28]
 8009dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dc6:	f04f 0000 	mov.w	r0, #0
 8009dca:	f04f 0100 	mov.w	r1, #0
 8009dce:	0e50      	lsrs	r0, r2, #25
 8009dd0:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8009dd4:	1659      	asrs	r1, r3, #25
 8009dd6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8009dda:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009dde:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	17da      	asrs	r2, r3, #31
 8009de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009dea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009dee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009df2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009df6:	462a      	mov	r2, r5
 8009df8:	fb02 f203 	mul.w	r2, r2, r3
 8009dfc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e00:	4621      	mov	r1, r4
 8009e02:	fb01 f303 	mul.w	r3, r1, r3
 8009e06:	441a      	add	r2, r3
 8009e08:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	fba3 1301 	umull	r1, r3, r3, r1
 8009e12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e16:	460b      	mov	r3, r1
 8009e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e20:	18d3      	adds	r3, r2, r3
 8009e22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e26:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009e2a:	2900      	cmp	r1, #0
 8009e2c:	da07      	bge.n	8009e3e <BMP280_compensate_pressure+0x54e>
 8009e2e:	4b33      	ldr	r3, [pc, #204]	; (8009efc <BMP280_compensate_pressure+0x60c>)
 8009e30:	18c3      	adds	r3, r0, r3
 8009e32:	613b      	str	r3, [r7, #16]
 8009e34:	f141 0300 	adc.w	r3, r1, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	0cc2      	lsrs	r2, r0, #19
 8009e48:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009e4c:	14cb      	asrs	r3, r1, #19
 8009e4e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8009e52:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009e56:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009e5a:	1884      	adds	r4, r0, r2
 8009e5c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009e60:	eb41 0303 	adc.w	r3, r1, r3
 8009e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e68:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009e6c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e70:	4621      	mov	r1, r4
 8009e72:	1889      	adds	r1, r1, r2
 8009e74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009e78:	4629      	mov	r1, r5
 8009e7a:	eb43 0101 	adc.w	r1, r3, r1
 8009e7e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8009e82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da07      	bge.n	8009e9a <BMP280_compensate_pressure+0x5aa>
 8009e8a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	f143 0300 	adc.w	r3, r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e9a:	f04f 0000 	mov.w	r0, #0
 8009e9e:	f04f 0100 	mov.w	r1, #0
 8009ea2:	0a10      	lsrs	r0, r2, #8
 8009ea4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009ea8:	1219      	asrs	r1, r3, #8
 8009eaa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009eae:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8009eb2:	b21b      	sxth	r3, r3
 8009eb4:	17da      	asrs	r2, r3, #31
 8009eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009eba:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009eca:	464c      	mov	r4, r9
 8009ecc:	0123      	lsls	r3, r4, #4
 8009ece:	4644      	mov	r4, r8
 8009ed0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009ed4:	4644      	mov	r4, r8
 8009ed6:	0122      	lsls	r2, r4, #4
 8009ed8:	1884      	adds	r4, r0, r2
 8009eda:	603c      	str	r4, [r7, #0]
 8009edc:	eb41 0303 	adc.w	r3, r1, r3
 8009ee0:	607b      	str	r3, [r7, #4]
 8009ee2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009ee6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8009eea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009efa:	bf00      	nop
 8009efc:	0007ffff 	.word	0x0007ffff

08009f00 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8009f00:	b5b0      	push	{r4, r5, r7, lr}
 8009f02:	b09c      	sub	sp, #112	; 0x70
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f10:	482c      	ldr	r0, [pc, #176]	; (8009fc4 <MPU_Init+0xc4>)
 8009f12:	f001 fc5b 	bl	800b7cc <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_2000DPS;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_16G;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2203      	movs	r2, #3
 8009f22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f2c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	4a24      	ldr	r2, [pc, #144]	; (8009fc4 <MPU_Init+0xc4>)
 8009f34:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	4a23      	ldr	r2, [pc, #140]	; (8009fc8 <MPU_Init+0xc8>)
 8009f3a:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f843 	bl	8009fd8 <MPU_begin>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d023      	beq.n	8009fa0 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8009f58:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <MPU_Init+0xcc>)
 8009f5a:	f107 040c 	add.w	r4, r7, #12
 8009f5e:	461d      	mov	r5, r3
 8009f60:	6828      	ldr	r0, [r5, #0]
 8009f62:	6869      	ldr	r1, [r5, #4]
 8009f64:	68aa      	ldr	r2, [r5, #8]
 8009f66:	68eb      	ldr	r3, [r5, #12]
 8009f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f6a:	6928      	ldr	r0, [r5, #16]
 8009f6c:	6969      	ldr	r1, [r5, #20]
 8009f6e:	69aa      	ldr	r2, [r5, #24]
 8009f70:	c407      	stmia	r4!, {r0, r1, r2}
 8009f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f76:	2248      	movs	r2, #72	; 0x48
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f00b fa27 	bl	80153ce <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8009f80:	f107 030c 	add.w	r3, r7, #12
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f6 f99b 	bl	80002c0 <strlen>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	f107 010c 	add.w	r1, r7, #12
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	480e      	ldr	r0, [pc, #56]	; (8009fd0 <MPU_Init+0xd0>)
 8009f98:	f006 f808 	bl	800ffac <HAL_UART_Transmit>
		return 1;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e00c      	b.n	8009fba <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	490b      	ldr	r1, [pc, #44]	; (8009fd4 <MPU_Init+0xd4>)
 8009fa8:	4809      	ldr	r0, [pc, #36]	; (8009fd0 <MPU_Init+0xd0>)
 8009faa:	f005 ffff 	bl	800ffac <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 8009fae:	2214      	movs	r2, #20
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f8a1 	bl	800a0fa <MPU_calibrateGyro>

	return 0;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3770      	adds	r7, #112	; 0x70
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	40020c00 	.word	0x40020c00
 8009fc8:	3f7ae148 	.word	0x3f7ae148
 8009fcc:	0801bddc 	.word	0x0801bddc
 8009fd0:	20000c88 	.word	0x20000c88
 8009fd4:	0801bdc8 	.word	0x0801bdc8

08009fd8 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8009fe2:	f107 030f 	add.w	r3, r7, #15
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	9200      	str	r2, [sp, #0]
 8009fea:	2275      	movs	r2, #117	; 0x75
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f90d 	bl	800a20e <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	2b70      	cmp	r3, #112	; 0x70
 8009ff8:	d17a      	bne.n	800a0f0 <MPU_begin+0x118>
    {
    	// Reset the sensor
    	addr = PWR_MGMT_1;
 8009ffa:	236b      	movs	r3, #107	; 0x6b
 8009ffc:	73bb      	strb	r3, [r7, #14]
        val = 0x80;
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	737b      	strb	r3, [r7, #13]
    	MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a002:	f107 030d 	add.w	r3, r7, #13
 800a006:	f107 020e 	add.w	r2, r7, #14
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f8dd 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a012:	2032      	movs	r0, #50	; 0x32
 800a014:	f000 fd2e 	bl	800aa74 <HAL_Delay>

        // Startup & use PLL
        addr = PWR_MGMT_1;
 800a018:	236b      	movs	r3, #107	; 0x6b
 800a01a:	73bb      	strb	r3, [r7, #14]
        val = 0x01;
 800a01c:	2301      	movs	r3, #1
 800a01e:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a020:	f107 030d 	add.w	r3, r7, #13
 800a024:	f107 020e 	add.w	r2, r7, #14
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f8ce 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a030:	2032      	movs	r0, #50	; 0x32
 800a032:	f000 fd1f 	bl	800aa74 <HAL_Delay>

        // Enable everything
        addr = PWR_MGMT_2;
 800a036:	236c      	movs	r3, #108	; 0x6c
 800a038:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800a03a:	2300      	movs	r3, #0
 800a03c:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a03e:	f107 030d 	add.w	r3, r7, #13
 800a042:	f107 020e 	add.w	r2, r7, #14
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f8bf 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a04e:	2032      	movs	r0, #50	; 0x32
 800a050:	f000 fd10 	bl	800aa74 <HAL_Delay>

        // Sample rate is 1000 Hz
		addr = SMPLRT_DIV;
 800a054:	2319      	movs	r3, #25
 800a056:	73bb      	strb	r3, [r7, #14]
		val = 0x00;
 800a058:	2300      	movs	r3, #0
 800a05a:	737b      	strb	r3, [r7, #13]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a05c:	f107 030d 	add.w	r3, r7, #13
 800a060:	f107 020e 	add.w	r2, r7, #14
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f8b0 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a06c:	2032      	movs	r0, #50	; 0x32
 800a06e:	f000 fd01 	bl	800aa74 <HAL_Delay>


    	// Gyro
    	// Set 20 Hz LPF for gyro
		uint8_t addr = CONFIG;
 800a072:	231a      	movs	r3, #26
 800a074:	733b      	strb	r3, [r7, #12]
		uint8_t val = 0x04;
 800a076:	2304      	movs	r3, #4
 800a078:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a07a:	f107 030b 	add.w	r3, r7, #11
 800a07e:	f107 020c 	add.w	r2, r7, #12
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f8a1 	bl	800a1cc <MPU_REG_WRITE>
		HAL_Delay(50);
 800a08a:	2032      	movs	r0, #50	; 0x32
 800a08c:	f000 fcf2 	bl	800aa74 <HAL_Delay>

		// Set the full scale range for gyro
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a096:	461a      	mov	r2, r3
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f95c 	bl	800a358 <MPU_writeGyroFullScaleRange>


		// Accel
		// Set the full scale range for accel
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8ea 	bl	800a284 <MPU_writeAccFullScaleRange>

        // Set 44.8 Hz LPF for accel
		addr = ACCEL_CONFIG_2;
 800a0b0:	231d      	movs	r3, #29
 800a0b2:	733b      	strb	r3, [r7, #12]
		val = 0x03;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0b8:	f107 030b 	add.w	r3, r7, #11
 800a0bc:	f107 020c 	add.w	r2, r7, #12
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f882 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a0c8:	2032      	movs	r0, #50	; 0x32
 800a0ca:	f000 fcd3 	bl	800aa74 <HAL_Delay>


        // Disable I2C (SPI only)
        addr = USER_CTRL;
 800a0ce:	236a      	movs	r3, #106	; 0x6a
 800a0d0:	733b      	strb	r3, [r7, #12]
        val = 0x10;
 800a0d2:	2310      	movs	r3, #16
 800a0d4:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0d6:	f107 030b 	add.w	r3, r7, #11
 800a0da:	f107 020c 	add.w	r2, r7, #12
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f873 	bl	800a1cc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a0e6:	2032      	movs	r0, #50	; 0x32
 800a0e8:	f000 fcc4 	bl	800aa74 <HAL_Delay>

        return 1;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <MPU_begin+0x11a>
    }
    else
        return 0;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	4613      	mov	r3, r2
 800a106:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800a114:	88fb      	ldrh	r3, [r7, #6]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800a11a:	2301      	movs	r3, #1
 800a11c:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a11e:	2300      	movs	r3, #0
 800a120:	827b      	strh	r3, [r7, #18]
 800a122:	e01e      	b.n	800a162 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 f984 	bl	800a434 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a132:	461a      	mov	r2, r3
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4413      	add	r3, r2
 800a138:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a140:	461a      	mov	r2, r3
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	4413      	add	r3, r2
 800a146:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a14e:	461a      	mov	r2, r3
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	4413      	add	r3, r2
 800a154:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800a156:	2003      	movs	r0, #3
 800a158:	f000 fc8c 	bl	800aa74 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a15c:	8a7b      	ldrh	r3, [r7, #18]
 800a15e:	3301      	adds	r3, #1
 800a160:	827b      	strh	r3, [r7, #18]
 800a162:	8a7a      	ldrh	r2, [r7, #18]
 800a164:	88fb      	ldrh	r3, [r7, #6]
 800a166:	429a      	cmp	r2, r3
 800a168:	d3dc      	bcc.n	800a124 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	ee07 3a90 	vmov	s15, r3
 800a170:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a174:	88fb      	ldrh	r3, [r7, #6]
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a19c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 800a1c4:	bf00      	nop
 800a1c6:	3720      	adds	r7, #32
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 800a1da:	2100      	movs	r1, #0
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f000 f83e 	bl	800a25e <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 800a1e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f003 f9f9 	bl	800d5e2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800a1f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f003 f9f2 	bl	800d5e2 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a1fe:	2101      	movs	r1, #1
 800a200:	68b8      	ldr	r0, [r7, #8]
 800a202:	f000 f82c 	bl	800a25e <MPU_CS>
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b086      	sub	sp, #24
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800a21e:	2100      	movs	r1, #0
 800a220:	68b8      	ldr	r0, [r7, #8]
 800a222:	f000 f81c 	bl	800a25e <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 800a230:	f107 0117 	add.w	r1, r7, #23
 800a234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a238:	2201      	movs	r2, #1
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f003 f9d1 	bl	800d5e2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 800a240:	8c3a      	ldrh	r2, [r7, #32]
 800a242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f003 fb38 	bl	800d8be <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a24e:	2101      	movs	r1, #1
 800a250:	68b8      	ldr	r0, [r7, #8]
 800a252:	f000 f804 	bl	800a25e <MPU_CS>
}
 800a256:	bf00      	nop
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	4619      	mov	r1, r3
 800a278:	f001 faa8 	bl	800b7cc <HAL_GPIO_WritePin>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	4613      	mov	r3, r2
 800a290:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800a292:	231c      	movs	r3, #28
 800a294:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d847      	bhi.n	800a32c <MPU_writeAccFullScaleRange+0xa8>
 800a29c:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <MPU_writeAccFullScaleRange+0x20>)
 800a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a2:	bf00      	nop
 800a2a4:	0800a2b5 	.word	0x0800a2b5
 800a2a8:	0800a2d3 	.word	0x0800a2d3
 800a2ac:	0800a2f1 	.word	0x0800a2f1
 800a2b0:	0800a30f 	.word	0x0800a30f
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a2ba:	615a      	str	r2, [r3, #20]
        val = 0x00;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a2c0:	f107 0316 	add.w	r3, r7, #22
 800a2c4:	f107 0217 	add.w	r2, r7, #23
 800a2c8:	68b9      	ldr	r1, [r7, #8]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f7ff ff7e 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a2d0:	e03b      	b.n	800a34a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a2d8:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a2da:	2308      	movs	r3, #8
 800a2dc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a2de:	f107 0316 	add.w	r3, r7, #22
 800a2e2:	f107 0217 	add.w	r2, r7, #23
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7ff ff6f 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a2ee:	e02c      	b.n	800a34a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800a2f6:	615a      	str	r2, [r3, #20]
        val = 0x10;
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a2fc:	f107 0316 	add.w	r3, r7, #22
 800a300:	f107 0217 	add.w	r2, r7, #23
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff ff60 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a30c:	e01d      	b.n	800a34a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800a314:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800a316:	2318      	movs	r3, #24
 800a318:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a31a:	f107 0316 	add.w	r3, r7, #22
 800a31e:	f107 0217 	add.w	r2, r7, #23
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff ff51 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a32a:	e00e      	b.n	800a34a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a332:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a334:	2308      	movs	r3, #8
 800a336:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a338:	f107 0316 	add.w	r3, r7, #22
 800a33c:	f107 0217 	add.w	r2, r7, #23
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff ff42 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a348:	bf00      	nop
    }
	HAL_Delay(50);
 800a34a:	2032      	movs	r0, #50	; 0x32
 800a34c:	f000 fb92 	bl	800aa74 <HAL_Delay>
}
 800a350:	bf00      	nop
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4613      	mov	r3, r2
 800a364:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800a366:	231b      	movs	r3, #27
 800a368:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d843      	bhi.n	800a3f8 <MPU_writeGyroFullScaleRange+0xa0>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <MPU_writeGyroFullScaleRange+0x20>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3c1 	.word	0x0800a3c1
 800a384:	0800a3dd 	.word	0x0800a3dd
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4a26      	ldr	r2, [pc, #152]	; (800a424 <MPU_writeGyroFullScaleRange+0xcc>)
 800a38c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 800a38e:	2300      	movs	r3, #0
 800a390:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a392:	f107 0316 	add.w	r3, r7, #22
 800a396:	f107 0217 	add.w	r2, r7, #23
 800a39a:	68b9      	ldr	r1, [r7, #8]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f7ff ff15 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a3a2:	e037      	b.n	800a414 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4a20      	ldr	r2, [pc, #128]	; (800a428 <MPU_writeGyroFullScaleRange+0xd0>)
 800a3a8:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3ae:	f107 0316 	add.w	r3, r7, #22
 800a3b2:	f107 0217 	add.w	r2, r7, #23
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff ff07 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a3be:	e029      	b.n	800a414 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4a1a      	ldr	r2, [pc, #104]	; (800a42c <MPU_writeGyroFullScaleRange+0xd4>)
 800a3c4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3ca:	f107 0316 	add.w	r3, r7, #22
 800a3ce:	f107 0217 	add.w	r2, r7, #23
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff fef9 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a3da:	e01b      	b.n	800a414 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4a14      	ldr	r2, [pc, #80]	; (800a430 <MPU_writeGyroFullScaleRange+0xd8>)
 800a3e0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 800a3e2:	2318      	movs	r3, #24
 800a3e4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3e6:	f107 0316 	add.w	r3, r7, #22
 800a3ea:	f107 0217 	add.w	r2, r7, #23
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff feeb 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a3f6:	e00d      	b.n	800a414 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a0b      	ldr	r2, [pc, #44]	; (800a428 <MPU_writeGyroFullScaleRange+0xd0>)
 800a3fc:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a3fe:	2308      	movs	r3, #8
 800a400:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a402:	f107 0316 	add.w	r3, r7, #22
 800a406:	f107 0217 	add.w	r2, r7, #23
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fedd 	bl	800a1cc <MPU_REG_WRITE>
        break;
 800a412:	bf00      	nop
    }
	HAL_Delay(50);
 800a414:	2032      	movs	r0, #50	; 0x32
 800a416:	f000 fb2d 	bl	800aa74 <HAL_Delay>
}
 800a41a:	bf00      	nop
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	43030000 	.word	0x43030000
 800a428:	42830000 	.word	0x42830000
 800a42c:	42033333 	.word	0x42033333
 800a430:	41833333 	.word	0x41833333

0800a434 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08e      	sub	sp, #56	; 0x38
 800a438:	af02      	add	r7, sp, #8
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800a43e:	f107 0308 	add.w	r3, r7, #8
 800a442:	2226      	movs	r2, #38	; 0x26
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	223b      	movs	r2, #59	; 0x3b
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fedf 	bl	800a20e <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800a450:	7a3b      	ldrb	r3, [r7, #8]
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	b21a      	sxth	r2, r3
 800a456:	7a7b      	ldrb	r3, [r7, #9]
 800a458:	b21b      	sxth	r3, r3
 800a45a:	4313      	orrs	r3, r2
 800a45c:	b21a      	sxth	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800a462:	7abb      	ldrb	r3, [r7, #10]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	b21a      	sxth	r2, r3
 800a468:	7afb      	ldrb	r3, [r7, #11]
 800a46a:	b21b      	sxth	r3, r3
 800a46c:	4313      	orrs	r3, r2
 800a46e:	b21a      	sxth	r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 800a474:	7b3b      	ldrb	r3, [r7, #12]
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	b21a      	sxth	r2, r3
 800a47a:	7b7b      	ldrb	r3, [r7, #13]
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b21a      	sxth	r2, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	021b      	lsls	r3, r3, #8
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	b21b      	sxth	r3, r3
 800a490:	4313      	orrs	r3, r2
 800a492:	b21a      	sxth	r2, r3
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 800a498:	7c3b      	ldrb	r3, [r7, #16]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	b21a      	sxth	r2, r3
 800a49e:	7c7b      	ldrb	r3, [r7, #17]
 800a4a0:	b21b      	sxth	r3, r3
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b21b      	sxth	r3, r3
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	b21a      	sxth	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 800a4b2:	7cbb      	ldrb	r3, [r7, #18]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	b21a      	sxth	r2, r3
 800a4b8:	7cfb      	ldrb	r3, [r7, #19]
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	b21b      	sxth	r3, r3
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	425b      	negs	r3, r3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 800a4cc:	7d3b      	ldrb	r3, [r7, #20]
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	b21a      	sxth	r2, r3
 800a4d2:	7d7b      	ldrb	r3, [r7, #21]
 800a4d4:	b21b      	sxth	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	425b      	negs	r3, r3
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	b21a      	sxth	r2, r3
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 800a4e6:	bf00      	nop
 800a4e8:	3730      	adds	r7, #48	; 0x30
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ff99 	bl	800a434 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a508:	ee07 3a90 	vmov	s15, r3
 800a50c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	ed93 7a05 	vldr	s14, [r3, #20]
 800a516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	ed93 7a05 	vldr	s14, [r3, #20]
 800a534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	ed93 7a05 	vldr	s14, [r3, #20]
 800a552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a562:	4618      	mov	r0, r3
 800a564:	f7f6 f806 	bl	8000574 <__aeabi_i2d>
 800a568:	a336      	add	r3, pc, #216	; (adr r3, 800a644 <MPU_readProcessedData+0x154>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f6 f995 	bl	800089c <__aeabi_ddiv>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4610      	mov	r0, r2
 800a578:	4619      	mov	r1, r3
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	4b30      	ldr	r3, [pc, #192]	; (800a640 <MPU_readProcessedData+0x150>)
 800a580:	f7f5 feac 	bl	80002dc <__adddf3>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4610      	mov	r0, r2
 800a58a:	4619      	mov	r1, r3
 800a58c:	f7f6 fb54 	bl	8000c38 <__aeabi_d2f>
 800a590:	4602      	mov	r2, r0
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a5e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a5fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	f3af 8000 	nop.w
 800a640:	40350000 	.word	0x40350000
 800a644:	851eb852 	.word	0x851eb852
 800a648:	4074ddeb 	.word	0x4074ddeb

0800a64c <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a21      	ldr	r2, [pc, #132]	; (800a6e0 <HCSR04_Init+0x94>)
 800a65a:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a662:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a1f      	ldr	r2, [pc, #124]	; (800a6e4 <HCSR04_Init+0x98>)
 800a668:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	226c      	movs	r2, #108	; 0x6c
 800a674:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d104      	bne.n	800a68e <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a68c:	e019      	b.n	800a6c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	2b04      	cmp	r3, #4
 800a694:	d104      	bne.n	800a6a0 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2202      	movs	r2, #2
 800a69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a69e:	e010      	b.n	800a6c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d104      	bne.n	800a6b2 <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2204      	movs	r2, #4
 800a6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6b0:	e007      	b.n	800a6c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b0c      	cmp	r3, #12
 800a6b8:	d103      	bne.n	800a6c2 <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f003 fe9a 	bl	800e3fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6838      	ldr	r0, [r7, #0]
 800a6d0:	f004 f8c0 	bl	800e854 <HAL_TIM_IC_Start_IT>

	return 0;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40020c00 	.word	0x40020c00
 800a6e4:	40000400 	.word	0x40000400

0800a6e8 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	f040 812e 	bne.w	800a960 <HCSR04_TMR_IC_ISR+0x278>
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	7f1a      	ldrb	r2, [r3, #28]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a70e:	429a      	cmp	r2, r3
 800a710:	f040 8126 	bne.w	800a960 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7d5b      	ldrb	r3, [r3, #21]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d16d      	bne.n	800a7f8 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	4619      	mov	r1, r3
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f004 fd80 	bl	800f228 <HAL_TIM_ReadCapturedValue>
 800a728:	4602      	mov	r2, r0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d108      	bne.n	800a74e <HCSR04_TMR_IC_ISR+0x66>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 020a 	bic.w	r2, r2, #10
 800a74a:	621a      	str	r2, [r3, #32]
 800a74c:	e021      	b.n	800a792 <HCSR04_TMR_IC_ISR+0xaa>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	2b04      	cmp	r3, #4
 800a754:	d108      	bne.n	800a768 <HCSR04_TMR_IC_ISR+0x80>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a764:	6213      	str	r3, [r2, #32]
 800a766:	e014      	b.n	800a792 <HCSR04_TMR_IC_ISR+0xaa>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d108      	bne.n	800a782 <HCSR04_TMR_IC_ISR+0x9a>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a77e:	6213      	str	r3, [r2, #32]
 800a780:	e007      	b.n	800a792 <HCSR04_TMR_IC_ISR+0xaa>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a790:	6213      	str	r3, [r2, #32]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d108      	bne.n	800a7ac <HCSR04_TMR_IC_ISR+0xc4>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6a1a      	ldr	r2, [r3, #32]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0202 	orr.w	r2, r2, #2
 800a7a8:	621a      	str	r2, [r3, #32]
 800a7aa:	e021      	b.n	800a7f0 <HCSR04_TMR_IC_ISR+0x108>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d108      	bne.n	800a7c6 <HCSR04_TMR_IC_ISR+0xde>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	f043 0320 	orr.w	r3, r3, #32
 800a7c2:	6213      	str	r3, [r2, #32]
 800a7c4:	e014      	b.n	800a7f0 <HCSR04_TMR_IC_ISR+0x108>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d108      	bne.n	800a7e0 <HCSR04_TMR_IC_ISR+0xf8>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	6812      	ldr	r2, [r2, #0]
 800a7d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7dc:	6213      	str	r3, [r2, #32]
 800a7de:	e007      	b.n	800a7f0 <HCSR04_TMR_IC_ISR+0x108>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	6812      	ldr	r2, [r2, #0]
 800a7ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a7ee:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800a7f6:	e0b3      	b.n	800a960 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7d5b      	ldrb	r3, [r3, #21]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	f040 80af 	bne.w	800a960 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a808:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	4619      	mov	r1, r3
 800a81a:	6838      	ldr	r0, [r7, #0]
 800a81c:	f004 fd04 	bl	800f228 <HAL_TIM_ReadCapturedValue>
 800a820:	4602      	mov	r2, r0
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1a      	ldr	r2, [r3, #32]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	429a      	cmp	r2, r3
 800a830:	d207      	bcs.n	800a842 <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	629a      	str	r2, [r3, #40]	; 0x28
 800a840:	e00f      	b.n	800a862 <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d209      	bcs.n	800a862 <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a85c:	4413      	add	r3, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a86e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800a968 <HCSR04_TMR_IC_ISR+0x280>
 800a872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a876:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800a96c <HCSR04_TMR_IC_ISR+0x284>
 800a87a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a87e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691a      	ldr	r2, [r3, #16]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d108      	bne.n	800a8c4 <HCSR04_TMR_IC_ISR+0x1dc>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6a1a      	ldr	r2, [r3, #32]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 020a 	bic.w	r2, r2, #10
 800a8c0:	621a      	str	r2, [r3, #32]
 800a8c2:	e021      	b.n	800a908 <HCSR04_TMR_IC_ISR+0x220>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d108      	bne.n	800a8de <HCSR04_TMR_IC_ISR+0x1f6>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	6812      	ldr	r2, [r2, #0]
 800a8d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8da:	6213      	str	r3, [r2, #32]
 800a8dc:	e014      	b.n	800a908 <HCSR04_TMR_IC_ISR+0x220>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d108      	bne.n	800a8f8 <HCSR04_TMR_IC_ISR+0x210>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	6812      	ldr	r2, [r2, #0]
 800a8f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a8f4:	6213      	str	r3, [r2, #32]
 800a8f6:	e007      	b.n	800a908 <HCSR04_TMR_IC_ISR+0x220>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	6812      	ldr	r2, [r2, #0]
 800a902:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a906:	6213      	str	r3, [r2, #32]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d106      	bne.n	800a91e <HCSR04_TMR_IC_ISR+0x236>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6a12      	ldr	r2, [r2, #32]
 800a91a:	621a      	str	r2, [r3, #32]
 800a91c:	e01b      	b.n	800a956 <HCSR04_TMR_IC_ISR+0x26e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	2b04      	cmp	r3, #4
 800a924:	d106      	bne.n	800a934 <HCSR04_TMR_IC_ISR+0x24c>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	6213      	str	r3, [r2, #32]
 800a932:	e010      	b.n	800a956 <HCSR04_TMR_IC_ISR+0x26e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	2b08      	cmp	r3, #8
 800a93a:	d106      	bne.n	800a94a <HCSR04_TMR_IC_ISR+0x262>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	6213      	str	r3, [r2, #32]
 800a948:	e005      	b.n	800a956 <HCSR04_TMR_IC_ISR+0x26e>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800a956:	4b06      	ldr	r3, [pc, #24]	; (800a970 <HCSR04_TMR_IC_ISR+0x288>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f007 f95e 	bl	8011c1c <osSemaphoreRelease>
}
 800a960:	bf00      	nop
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	447a0000 	.word	0x447a0000
 800a96c:	43aa0000 	.word	0x43aa0000
 800a970:	20000da8 	.word	0x20000da8

0800a974 <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	889b      	ldrh	r3, [r3, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	4619      	mov	r1, r3
 800a988:	f000 ff20 	bl	800b7cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a98c:	2001      	movs	r0, #1
 800a98e:	f000 f871 	bl	800aa74 <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	889b      	ldrh	r3, [r3, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	4619      	mov	r1, r3
 800a99e:	f000 ff15 	bl	800b7cc <HAL_GPIO_WritePin>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	ee07 3a90 	vmov	s15, r3
}
 800a9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800a9c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aa00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a9cc:	480d      	ldr	r0, [pc, #52]	; (800aa04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a9ce:	490e      	ldr	r1, [pc, #56]	; (800aa08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a9d0:	4a0e      	ldr	r2, [pc, #56]	; (800aa0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a9d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a9d4:	e002      	b.n	800a9dc <LoopCopyDataInit>

0800a9d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a9d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a9d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a9da:	3304      	adds	r3, #4

0800a9dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a9dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a9de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a9e0:	d3f9      	bcc.n	800a9d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a9e2:	4a0b      	ldr	r2, [pc, #44]	; (800aa10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a9e4:	4c0b      	ldr	r4, [pc, #44]	; (800aa14 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a9e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a9e8:	e001      	b.n	800a9ee <LoopFillZerobss>

0800a9ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a9ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a9ec:	3204      	adds	r2, #4

0800a9ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a9ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a9f0:	d3fb      	bcc.n	800a9ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a9f2:	f7fc fb3f 	bl	8007074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a9f6:	f00a fdab 	bl	8015550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a9fa:	f7f9 fc8b 	bl	8004314 <main>
  bx  lr    
 800a9fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800aa00:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800aa04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa08:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800aa0c:	0801c7a8 	.word	0x0801c7a8
  ldr r2, =_sbss
 800aa10:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800aa14:	200090a0 	.word	0x200090a0

0800aa18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aa18:	e7fe      	b.n	800aa18 <ADC_IRQHandler>

0800aa1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa1e:	2003      	movs	r0, #3
 800aa20:	f000 f8f9 	bl	800ac16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800aa24:	200f      	movs	r0, #15
 800aa26:	f7fc f99d 	bl	8006d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800aa2a:	f7fb fecb 	bl	80067c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_IncTick+0x20>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <HAL_IncTick+0x24>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4413      	add	r3, r2
 800aa44:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <HAL_IncTick+0x24>)
 800aa46:	6013      	str	r3, [r2, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000010 	.word	0x20000010
 800aa58:	20000e04 	.word	0x20000e04

0800aa5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
  return uwTick;
 800aa60:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <HAL_GetTick+0x14>)
 800aa62:	681b      	ldr	r3, [r3, #0]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20000e04 	.word	0x20000e04

0800aa74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa7c:	f7ff ffee 	bl	800aa5c <HAL_GetTick>
 800aa80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8c:	d005      	beq.n	800aa9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa8e:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <HAL_Delay+0x44>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aa9a:	bf00      	nop
 800aa9c:	f7ff ffde 	bl	800aa5c <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d8f7      	bhi.n	800aa9c <HAL_Delay+0x28>
  {
  }
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20000010 	.word	0x20000010

0800aabc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <__NVIC_SetPriorityGrouping+0x40>)
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aad8:	4013      	ands	r3, r2
 800aada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800aae4:	4b06      	ldr	r3, [pc, #24]	; (800ab00 <__NVIC_SetPriorityGrouping+0x44>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aaea:	4a04      	ldr	r2, [pc, #16]	; (800aafc <__NVIC_SetPriorityGrouping+0x40>)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	60d3      	str	r3, [r2, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	e000ed00 	.word	0xe000ed00
 800ab00:	05fa0000 	.word	0x05fa0000

0800ab04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab08:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <__NVIC_GetPriorityGrouping+0x18>)
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	0a1b      	lsrs	r3, r3, #8
 800ab0e:	f003 0307 	and.w	r3, r3, #7
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	e000ed00 	.word	0xe000ed00

0800ab20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	db0b      	blt.n	800ab4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	f003 021f 	and.w	r2, r3, #31
 800ab38:	4907      	ldr	r1, [pc, #28]	; (800ab58 <__NVIC_EnableIRQ+0x38>)
 800ab3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab3e:	095b      	lsrs	r3, r3, #5
 800ab40:	2001      	movs	r0, #1
 800ab42:	fa00 f202 	lsl.w	r2, r0, r2
 800ab46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	e000e100 	.word	0xe000e100

0800ab5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	6039      	str	r1, [r7, #0]
 800ab66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	db0a      	blt.n	800ab86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	490c      	ldr	r1, [pc, #48]	; (800aba8 <__NVIC_SetPriority+0x4c>)
 800ab76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab7a:	0112      	lsls	r2, r2, #4
 800ab7c:	b2d2      	uxtb	r2, r2
 800ab7e:	440b      	add	r3, r1
 800ab80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab84:	e00a      	b.n	800ab9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	4908      	ldr	r1, [pc, #32]	; (800abac <__NVIC_SetPriority+0x50>)
 800ab8c:	79fb      	ldrb	r3, [r7, #7]
 800ab8e:	f003 030f 	and.w	r3, r3, #15
 800ab92:	3b04      	subs	r3, #4
 800ab94:	0112      	lsls	r2, r2, #4
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	440b      	add	r3, r1
 800ab9a:	761a      	strb	r2, [r3, #24]
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	e000e100 	.word	0xe000e100
 800abac:	e000ed00 	.word	0xe000ed00

0800abb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	; 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f003 0307 	and.w	r3, r3, #7
 800abc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	f1c3 0307 	rsb	r3, r3, #7
 800abca:	2b04      	cmp	r3, #4
 800abcc:	bf28      	it	cs
 800abce:	2304      	movcs	r3, #4
 800abd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	3304      	adds	r3, #4
 800abd6:	2b06      	cmp	r3, #6
 800abd8:	d902      	bls.n	800abe0 <NVIC_EncodePriority+0x30>
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	3b03      	subs	r3, #3
 800abde:	e000      	b.n	800abe2 <NVIC_EncodePriority+0x32>
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abe4:	f04f 32ff 	mov.w	r2, #4294967295
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	fa02 f303 	lsl.w	r3, r2, r3
 800abee:	43da      	mvns	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	401a      	ands	r2, r3
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800abf8:	f04f 31ff 	mov.w	r1, #4294967295
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ac02:	43d9      	mvns	r1, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac08:	4313      	orrs	r3, r2
         );
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3724      	adds	r7, #36	; 0x24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff ff4c 	bl	800aabc <__NVIC_SetPriorityGrouping>
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac3e:	f7ff ff61 	bl	800ab04 <__NVIC_GetPriorityGrouping>
 800ac42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	6978      	ldr	r0, [r7, #20]
 800ac4a:	f7ff ffb1 	bl	800abb0 <NVIC_EncodePriority>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff ff80 	bl	800ab5c <__NVIC_SetPriority>
}
 800ac5c:	bf00      	nop
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff ff54 	bl	800ab20 <__NVIC_EnableIRQ>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ac8c:	f7ff fee6 	bl	800aa5c <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e099      	b.n	800add0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0201 	bic.w	r2, r2, #1
 800acba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800acbc:	e00f      	b.n	800acde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800acbe:	f7ff fecd 	bl	800aa5c <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	2b05      	cmp	r3, #5
 800acca:	d908      	bls.n	800acde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2203      	movs	r2, #3
 800acd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e078      	b.n	800add0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1e8      	bne.n	800acbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4b38      	ldr	r3, [pc, #224]	; (800add8 <HAL_DMA_Init+0x158>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d107      	bne.n	800ad48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	4313      	orrs	r3, r2
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f023 0307 	bic.w	r3, r3, #7
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d117      	bne.n	800ada2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00e      	beq.n	800ada2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fb09 	bl	800b39c <DMA_CheckFifoParam>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d008      	beq.n	800ada2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2240      	movs	r2, #64	; 0x40
 800ad94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e016      	b.n	800add0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fac0 	bl	800b330 <DMA_CalcBaseAndBitshift>
 800adb0:	4603      	mov	r3, r0
 800adb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb8:	223f      	movs	r2, #63	; 0x3f
 800adba:	409a      	lsls	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	e010803f 	.word	0xe010803f

0800addc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d101      	bne.n	800ae02 <HAL_DMA_Start_IT+0x26>
 800adfe:	2302      	movs	r3, #2
 800ae00:	e048      	b.n	800ae94 <HAL_DMA_Start_IT+0xb8>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d137      	bne.n	800ae86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 fa52 	bl	800b2d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae34:	223f      	movs	r2, #63	; 0x3f
 800ae36:	409a      	lsls	r2, r3
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0216 	orr.w	r2, r2, #22
 800ae4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695a      	ldr	r2, [r3, #20]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0208 	orr.w	r2, r2, #8
 800ae72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e005      	b.n	800ae92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ae8e:	2302      	movs	r3, #2
 800ae90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800aeaa:	f7ff fdd7 	bl	800aa5c <HAL_GetTick>
 800aeae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d008      	beq.n	800aece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2280      	movs	r2, #128	; 0x80
 800aec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e052      	b.n	800af74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0216 	bic.w	r2, r2, #22
 800aedc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	695a      	ldr	r2, [r3, #20]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <HAL_DMA_Abort+0x62>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d007      	beq.n	800af0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0208 	bic.w	r2, r2, #8
 800af0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0201 	bic.w	r2, r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af1e:	e013      	b.n	800af48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800af20:	f7ff fd9c 	bl	800aa5c <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b05      	cmp	r3, #5
 800af2c:	d90c      	bls.n	800af48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2203      	movs	r2, #3
 800af38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e015      	b.n	800af74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e4      	bne.n	800af20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af5a:	223f      	movs	r2, #63	; 0x3f
 800af5c:	409a      	lsls	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d004      	beq.n	800af9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2280      	movs	r2, #128	; 0x80
 800af94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e00c      	b.n	800afb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2205      	movs	r2, #5
 800af9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0201 	bic.w	r2, r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800afcc:	4b8e      	ldr	r3, [pc, #568]	; (800b208 <HAL_DMA_IRQHandler+0x248>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a8e      	ldr	r2, [pc, #568]	; (800b20c <HAL_DMA_IRQHandler+0x24c>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	0a9b      	lsrs	r3, r3, #10
 800afd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afea:	2208      	movs	r2, #8
 800afec:	409a      	lsls	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4013      	ands	r3, r2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01a      	beq.n	800b02c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d013      	beq.n	800b02c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0204 	bic.w	r2, r2, #4
 800b012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b018:	2208      	movs	r2, #8
 800b01a:	409a      	lsls	r2, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b024:	f043 0201 	orr.w	r2, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b030:	2201      	movs	r2, #1
 800b032:	409a      	lsls	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4013      	ands	r3, r2
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d012      	beq.n	800b062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00b      	beq.n	800b062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b04e:	2201      	movs	r2, #1
 800b050:	409a      	lsls	r2, r3
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	f043 0202 	orr.w	r2, r3, #2
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b066:	2204      	movs	r2, #4
 800b068:	409a      	lsls	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4013      	ands	r3, r2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d012      	beq.n	800b098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b084:	2204      	movs	r2, #4
 800b086:	409a      	lsls	r2, r3
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b090:	f043 0204 	orr.w	r2, r3, #4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b09c:	2210      	movs	r2, #16
 800b09e:	409a      	lsls	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d043      	beq.n	800b130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d03c      	beq.n	800b130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ba:	2210      	movs	r2, #16
 800b0bc:	409a      	lsls	r2, r3
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d108      	bne.n	800b0f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d024      	beq.n	800b130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
 800b0ee:	e01f      	b.n	800b130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d01b      	beq.n	800b130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
 800b100:	e016      	b.n	800b130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d107      	bne.n	800b120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0208 	bic.w	r2, r2, #8
 800b11e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b134:	2220      	movs	r2, #32
 800b136:	409a      	lsls	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 808f 	beq.w	800b260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8087 	beq.w	800b260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b156:	2220      	movs	r2, #32
 800b158:	409a      	lsls	r2, r3
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b05      	cmp	r3, #5
 800b168:	d136      	bne.n	800b1d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0216 	bic.w	r2, r2, #22
 800b178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	695a      	ldr	r2, [r3, #20]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d103      	bne.n	800b19a <HAL_DMA_IRQHandler+0x1da>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0208 	bic.w	r2, r2, #8
 800b1a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ae:	223f      	movs	r2, #63	; 0x3f
 800b1b0:	409a      	lsls	r2, r3
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d07e      	beq.n	800b2cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	4798      	blx	r3
        }
        return;
 800b1d6:	e079      	b.n	800b2cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d01d      	beq.n	800b222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10d      	bne.n	800b210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d031      	beq.n	800b260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	4798      	blx	r3
 800b204:	e02c      	b.n	800b260 <HAL_DMA_IRQHandler+0x2a0>
 800b206:	bf00      	nop
 800b208:	20000008 	.word	0x20000008
 800b20c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d023      	beq.n	800b260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
 800b220:	e01e      	b.n	800b260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10f      	bne.n	800b250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0210 	bic.w	r2, r2, #16
 800b23e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b264:	2b00      	cmp	r3, #0
 800b266:	d032      	beq.n	800b2ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d022      	beq.n	800b2ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2205      	movs	r2, #5
 800b278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 0201 	bic.w	r2, r2, #1
 800b28a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3301      	adds	r3, #1
 800b290:	60bb      	str	r3, [r7, #8]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	d307      	bcc.n	800b2a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f2      	bne.n	800b28c <HAL_DMA_IRQHandler+0x2cc>
 800b2a6:	e000      	b.n	800b2aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b2a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
 800b2ca:	e000      	b.n	800b2ce <HAL_DMA_IRQHandler+0x30e>
        return;
 800b2cc:	bf00      	nop
    }
  }
}
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b2f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b40      	cmp	r3, #64	; 0x40
 800b300:	d108      	bne.n	800b314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b312:	e007      	b.n	800b324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	3b10      	subs	r3, #16
 800b340:	4a13      	ldr	r2, [pc, #76]	; (800b390 <DMA_CalcBaseAndBitshift+0x60>)
 800b342:	fba2 2303 	umull	r2, r3, r2, r3
 800b346:	091b      	lsrs	r3, r3, #4
 800b348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b34a:	4a12      	ldr	r2, [pc, #72]	; (800b394 <DMA_CalcBaseAndBitshift+0x64>)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d908      	bls.n	800b370 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <DMA_CalcBaseAndBitshift+0x68>)
 800b366:	4013      	ands	r3, r2
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	659a      	str	r2, [r3, #88]	; 0x58
 800b36e:	e006      	b.n	800b37e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	4b08      	ldr	r3, [pc, #32]	; (800b398 <DMA_CalcBaseAndBitshift+0x68>)
 800b378:	4013      	ands	r3, r2
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	aaaaaaab 	.word	0xaaaaaaab
 800b394:	0801bef8 	.word	0x0801bef8
 800b398:	fffffc00 	.word	0xfffffc00

0800b39c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d11f      	bne.n	800b3f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d856      	bhi.n	800b46a <DMA_CheckFifoParam+0xce>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <DMA_CheckFifoParam+0x28>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3d5 	.word	0x0800b3d5
 800b3c8:	0800b3e7 	.word	0x0800b3e7
 800b3cc:	0800b3d5 	.word	0x0800b3d5
 800b3d0:	0800b46b 	.word	0x0800b46b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d046      	beq.n	800b46e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3e4:	e043      	b.n	800b46e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b3ee:	d140      	bne.n	800b472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3f4:	e03d      	b.n	800b472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fe:	d121      	bne.n	800b444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d837      	bhi.n	800b476 <DMA_CheckFifoParam+0xda>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <DMA_CheckFifoParam+0x70>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b41d 	.word	0x0800b41d
 800b410:	0800b423 	.word	0x0800b423
 800b414:	0800b41d 	.word	0x0800b41d
 800b418:	0800b435 	.word	0x0800b435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	73fb      	strb	r3, [r7, #15]
      break;
 800b420:	e030      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d025      	beq.n	800b47a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b432:	e022      	b.n	800b47a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b43c:	d11f      	bne.n	800b47e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b442:	e01c      	b.n	800b47e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d903      	bls.n	800b452 <DMA_CheckFifoParam+0xb6>
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	d003      	beq.n	800b458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b450:	e018      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	73fb      	strb	r3, [r7, #15]
      break;
 800b456:	e015      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
      break;
 800b468:	e00b      	b.n	800b482 <DMA_CheckFifoParam+0xe6>
      break;
 800b46a:	bf00      	nop
 800b46c:	e00a      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;
 800b46e:	bf00      	nop
 800b470:	e008      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;
 800b472:	bf00      	nop
 800b474:	e006      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;
 800b476:	bf00      	nop
 800b478:	e004      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;
 800b47a:	bf00      	nop
 800b47c:	e002      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;   
 800b47e:	bf00      	nop
 800b480:	e000      	b.n	800b484 <DMA_CheckFifoParam+0xe8>
      break;
 800b482:	bf00      	nop
    }
  } 
  
  return status; 
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop

0800b494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b494:	b480      	push	{r7}
 800b496:	b089      	sub	sp, #36	; 0x24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	61fb      	str	r3, [r7, #28]
 800b4b2:	e169      	b.n	800b788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	f040 8158 	bne.w	800b782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d005      	beq.n	800b4ea <HAL_GPIO_Init+0x56>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d130      	bne.n	800b54c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fa:	43db      	mvns	r3, r3
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4013      	ands	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	fa02 f303 	lsl.w	r3, r2, r3
 800b50e:	69ba      	ldr	r2, [r7, #24]
 800b510:	4313      	orrs	r3, r2
 800b512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b520:	2201      	movs	r2, #1
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	fa02 f303 	lsl.w	r3, r2, r3
 800b528:	43db      	mvns	r3, r3
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	4013      	ands	r3, r2
 800b52e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	091b      	lsrs	r3, r3, #4
 800b536:	f003 0201 	and.w	r2, r3, #1
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	4313      	orrs	r3, r2
 800b544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	2b03      	cmp	r3, #3
 800b556:	d017      	beq.n	800b588 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	2203      	movs	r2, #3
 800b564:	fa02 f303 	lsl.w	r3, r2, r3
 800b568:	43db      	mvns	r3, r3
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	4013      	ands	r3, r2
 800b56e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	fa02 f303 	lsl.w	r3, r2, r3
 800b57c:	69ba      	ldr	r2, [r7, #24]
 800b57e:	4313      	orrs	r3, r2
 800b580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	69ba      	ldr	r2, [r7, #24]
 800b586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f003 0303 	and.w	r3, r3, #3
 800b590:	2b02      	cmp	r3, #2
 800b592:	d123      	bne.n	800b5dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	08da      	lsrs	r2, r3, #3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3208      	adds	r2, #8
 800b59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	f003 0307 	and.w	r3, r3, #7
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	220f      	movs	r2, #15
 800b5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b0:	43db      	mvns	r3, r3
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	69ba      	ldr	r2, [r7, #24]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	08da      	lsrs	r2, r3, #3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3208      	adds	r2, #8
 800b5d6:	69b9      	ldr	r1, [r7, #24]
 800b5d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ec:	43db      	mvns	r3, r3
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	f003 0203 	and.w	r2, r3, #3
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	fa02 f303 	lsl.w	r3, r2, r3
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	4313      	orrs	r3, r2
 800b608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 80b2 	beq.w	800b782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b61e:	4b60      	ldr	r3, [pc, #384]	; (800b7a0 <HAL_GPIO_Init+0x30c>)
 800b620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b622:	4a5f      	ldr	r2, [pc, #380]	; (800b7a0 <HAL_GPIO_Init+0x30c>)
 800b624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b628:	6453      	str	r3, [r2, #68]	; 0x44
 800b62a:	4b5d      	ldr	r3, [pc, #372]	; (800b7a0 <HAL_GPIO_Init+0x30c>)
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b636:	4a5b      	ldr	r2, [pc, #364]	; (800b7a4 <HAL_GPIO_Init+0x310>)
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	089b      	lsrs	r3, r3, #2
 800b63c:	3302      	adds	r3, #2
 800b63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	220f      	movs	r2, #15
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	43db      	mvns	r3, r3
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	4013      	ands	r3, r2
 800b658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a52      	ldr	r2, [pc, #328]	; (800b7a8 <HAL_GPIO_Init+0x314>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d02b      	beq.n	800b6ba <HAL_GPIO_Init+0x226>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a51      	ldr	r2, [pc, #324]	; (800b7ac <HAL_GPIO_Init+0x318>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d025      	beq.n	800b6b6 <HAL_GPIO_Init+0x222>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a50      	ldr	r2, [pc, #320]	; (800b7b0 <HAL_GPIO_Init+0x31c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d01f      	beq.n	800b6b2 <HAL_GPIO_Init+0x21e>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a4f      	ldr	r2, [pc, #316]	; (800b7b4 <HAL_GPIO_Init+0x320>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d019      	beq.n	800b6ae <HAL_GPIO_Init+0x21a>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a4e      	ldr	r2, [pc, #312]	; (800b7b8 <HAL_GPIO_Init+0x324>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d013      	beq.n	800b6aa <HAL_GPIO_Init+0x216>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a4d      	ldr	r2, [pc, #308]	; (800b7bc <HAL_GPIO_Init+0x328>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d00d      	beq.n	800b6a6 <HAL_GPIO_Init+0x212>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a4c      	ldr	r2, [pc, #304]	; (800b7c0 <HAL_GPIO_Init+0x32c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d007      	beq.n	800b6a2 <HAL_GPIO_Init+0x20e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a4b      	ldr	r2, [pc, #300]	; (800b7c4 <HAL_GPIO_Init+0x330>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d101      	bne.n	800b69e <HAL_GPIO_Init+0x20a>
 800b69a:	2307      	movs	r3, #7
 800b69c:	e00e      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b69e:	2308      	movs	r3, #8
 800b6a0:	e00c      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6a2:	2306      	movs	r3, #6
 800b6a4:	e00a      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6a6:	2305      	movs	r3, #5
 800b6a8:	e008      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6aa:	2304      	movs	r3, #4
 800b6ac:	e006      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e004      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	e002      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <HAL_GPIO_Init+0x228>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	f002 0203 	and.w	r2, r2, #3
 800b6c2:	0092      	lsls	r2, r2, #2
 800b6c4:	4093      	lsls	r3, r2
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b6cc:	4935      	ldr	r1, [pc, #212]	; (800b7a4 <HAL_GPIO_Init+0x310>)
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	089b      	lsrs	r3, r3, #2
 800b6d2:	3302      	adds	r3, #2
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b6da:	4b3b      	ldr	r3, [pc, #236]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	43db      	mvns	r3, r3
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b6fe:	4a32      	ldr	r2, [pc, #200]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b704:	4b30      	ldr	r3, [pc, #192]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	43db      	mvns	r3, r3
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	4013      	ands	r3, r2
 800b712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	4313      	orrs	r3, r2
 800b726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b728:	4a27      	ldr	r2, [pc, #156]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b72e:	4b26      	ldr	r3, [pc, #152]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	43db      	mvns	r3, r3
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	4013      	ands	r3, r2
 800b73c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	4313      	orrs	r3, r2
 800b750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b752:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b758:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	43db      	mvns	r3, r3
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	4013      	ands	r3, r2
 800b766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	4313      	orrs	r3, r2
 800b77a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b77c:	4a12      	ldr	r2, [pc, #72]	; (800b7c8 <HAL_GPIO_Init+0x334>)
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	3301      	adds	r3, #1
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	2b0f      	cmp	r3, #15
 800b78c:	f67f ae92 	bls.w	800b4b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	3724      	adds	r7, #36	; 0x24
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	40023800 	.word	0x40023800
 800b7a4:	40013800 	.word	0x40013800
 800b7a8:	40020000 	.word	0x40020000
 800b7ac:	40020400 	.word	0x40020400
 800b7b0:	40020800 	.word	0x40020800
 800b7b4:	40020c00 	.word	0x40020c00
 800b7b8:	40021000 	.word	0x40021000
 800b7bc:	40021400 	.word	0x40021400
 800b7c0:	40021800 	.word	0x40021800
 800b7c4:	40021c00 	.word	0x40021c00
 800b7c8:	40013c00 	.word	0x40013c00

0800b7cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b7dc:	787b      	ldrb	r3, [r7, #1]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7e2:	887a      	ldrh	r2, [r7, #2]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b7e8:	e003      	b.n	800b7f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b7ea:	887b      	ldrh	r3, [r7, #2]
 800b7ec:	041a      	lsls	r2, r3, #16
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	619a      	str	r2, [r3, #24]
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
	...

0800b800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e07f      	b.n	800b912 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7fa fff4 	bl	8006814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2224      	movs	r2, #36	; 0x24
 800b830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f022 0201 	bic.w	r2, r2, #1
 800b842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d107      	bne.n	800b87a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	689a      	ldr	r2, [r3, #8]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b876:	609a      	str	r2, [r3, #8]
 800b878:	e006      	b.n	800b888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d104      	bne.n	800b89a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6859      	ldr	r1, [r3, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <HAL_I2C_Init+0x11c>)
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691a      	ldr	r2, [r3, #16]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69d9      	ldr	r1, [r3, #28]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a1a      	ldr	r2, [r3, #32]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0201 	orr.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	02008000 	.word	0x02008000

0800b920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af02      	add	r7, sp, #8
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	4608      	mov	r0, r1
 800b92a:	4611      	mov	r1, r2
 800b92c:	461a      	mov	r2, r3
 800b92e:	4603      	mov	r3, r0
 800b930:	817b      	strh	r3, [r7, #10]
 800b932:	460b      	mov	r3, r1
 800b934:	813b      	strh	r3, [r7, #8]
 800b936:	4613      	mov	r3, r2
 800b938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b20      	cmp	r3, #32
 800b944:	f040 80f9 	bne.w	800bb3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <HAL_I2C_Mem_Write+0x34>
 800b94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b950:	2b00      	cmp	r3, #0
 800b952:	d105      	bne.n	800b960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b95a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e0ed      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_I2C_Mem_Write+0x4e>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e0e6      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b976:	f7ff f871 	bl	800aa5c <HAL_GetTick>
 800b97a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	2319      	movs	r3, #25
 800b982:	2201      	movs	r2, #1
 800b984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 fac3 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e0d1      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2221      	movs	r2, #33	; 0x21
 800b99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2240      	movs	r2, #64	; 0x40
 800b9a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a3a      	ldr	r2, [r7, #32]
 800b9b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b9c0:	88f8      	ldrh	r0, [r7, #6]
 800b9c2:	893a      	ldrh	r2, [r7, #8]
 800b9c4:	8979      	ldrh	r1, [r7, #10]
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 f9d3 	bl	800bd7c <I2C_RequestMemoryWrite>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e0a9      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	2bff      	cmp	r3, #255	; 0xff
 800b9f0:	d90e      	bls.n	800ba10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	22ff      	movs	r2, #255	; 0xff
 800b9f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	8979      	ldrh	r1, [r7, #10]
 800ba00:	2300      	movs	r3, #0
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 fc1f 	bl	800c24c <I2C_TransferConfig>
 800ba0e:	e00f      	b.n	800ba30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	8979      	ldrh	r1, [r7, #10]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 fc0e 	bl	800c24c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 faad 	bl	800bf94 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e07b      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	781a      	ldrb	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	3b01      	subs	r3, #1
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d034      	beq.n	800bae8 <HAL_I2C_Mem_Write+0x1c8>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d130      	bne.n	800bae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2180      	movs	r1, #128	; 0x80
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fa3f 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e04d      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	2bff      	cmp	r3, #255	; 0xff
 800baa8:	d90e      	bls.n	800bac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	22ff      	movs	r2, #255	; 0xff
 800baae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	8979      	ldrh	r1, [r7, #10]
 800bab8:	2300      	movs	r3, #0
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 fbc3 	bl	800c24c <I2C_TransferConfig>
 800bac6:	e00f      	b.n	800bae8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	8979      	ldrh	r1, [r7, #10]
 800bada:	2300      	movs	r3, #0
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f000 fbb2 	bl	800c24c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baec:	b29b      	uxth	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d19e      	bne.n	800ba30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 fa8c 	bl	800c014 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e01a      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6859      	ldr	r1, [r3, #4]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <HAL_I2C_Mem_Write+0x224>)
 800bb1a:	400b      	ands	r3, r1
 800bb1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e000      	b.n	800bb3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bb3a:	2302      	movs	r3, #2
  }
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	fe00e800 	.word	0xfe00e800

0800bb48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	4608      	mov	r0, r1
 800bb52:	4611      	mov	r1, r2
 800bb54:	461a      	mov	r2, r3
 800bb56:	4603      	mov	r3, r0
 800bb58:	817b      	strh	r3, [r7, #10]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	813b      	strh	r3, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b20      	cmp	r3, #32
 800bb6c:	f040 80fd 	bne.w	800bd6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <HAL_I2C_Mem_Read+0x34>
 800bb76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d105      	bne.n	800bb88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e0f1      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_I2C_Mem_Read+0x4e>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e0ea      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bb9e:	f7fe ff5d 	bl	800aa5c <HAL_GetTick>
 800bba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	2319      	movs	r3, #25
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 f9af 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e0d5      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2222      	movs	r2, #34	; 0x22
 800bbc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2240      	movs	r2, #64	; 0x40
 800bbcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbe8:	88f8      	ldrh	r0, [r7, #6]
 800bbea:	893a      	ldrh	r2, [r7, #8]
 800bbec:	8979      	ldrh	r1, [r7, #10]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f913 	bl	800be24 <I2C_RequestMemoryRead>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d005      	beq.n	800bc10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0ad      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	2bff      	cmp	r3, #255	; 0xff
 800bc18:	d90e      	bls.n	800bc38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	22ff      	movs	r2, #255	; 0xff
 800bc1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	8979      	ldrh	r1, [r7, #10]
 800bc28:	4b52      	ldr	r3, [pc, #328]	; (800bd74 <HAL_I2C_Mem_Read+0x22c>)
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 fb0b 	bl	800c24c <I2C_TransferConfig>
 800bc36:	e00f      	b.n	800bc58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	8979      	ldrh	r1, [r7, #10]
 800bc4a:	4b4a      	ldr	r3, [pc, #296]	; (800bd74 <HAL_I2C_Mem_Read+0x22c>)
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 fafa 	bl	800c24c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2104      	movs	r1, #4
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f956 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e07c      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	b2d2      	uxtb	r2, r2
 800bc7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d034      	beq.n	800bd18 <HAL_I2C_Mem_Read+0x1d0>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d130      	bne.n	800bd18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2180      	movs	r1, #128	; 0x80
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f927 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e04d      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	2bff      	cmp	r3, #255	; 0xff
 800bcd8:	d90e      	bls.n	800bcf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	8979      	ldrh	r1, [r7, #10]
 800bce8:	2300      	movs	r3, #0
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 faab 	bl	800c24c <I2C_TransferConfig>
 800bcf6:	e00f      	b.n	800bd18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	8979      	ldrh	r1, [r7, #10]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 fa9a 	bl	800c24c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d19a      	bne.n	800bc58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 f974 	bl	800c014 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e01a      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6859      	ldr	r1, [r3, #4]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <HAL_I2C_Mem_Read+0x230>)
 800bd4a:	400b      	ands	r3, r1
 800bd4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e000      	b.n	800bd6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bd6a:	2302      	movs	r3, #2
  }
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	80002400 	.word	0x80002400
 800bd78:	fe00e800 	.word	0xfe00e800

0800bd7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	817b      	strh	r3, [r7, #10]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	813b      	strh	r3, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	8979      	ldrh	r1, [r7, #10]
 800bd9c:	4b20      	ldr	r3, [pc, #128]	; (800be20 <I2C_RequestMemoryWrite+0xa4>)
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 fa51 	bl	800c24c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f8f0 	bl	800bf94 <I2C_WaitOnTXISFlagUntilTimeout>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e02c      	b.n	800be18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d105      	bne.n	800bdd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdc4:	893b      	ldrh	r3, [r7, #8]
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	629a      	str	r2, [r3, #40]	; 0x28
 800bdce:	e015      	b.n	800bdfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bdd0:	893b      	ldrh	r3, [r7, #8]
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdde:	69fa      	ldr	r2, [r7, #28]
 800bde0:	69b9      	ldr	r1, [r7, #24]
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 f8d6 	bl	800bf94 <I2C_WaitOnTXISFlagUntilTimeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e012      	b.n	800be18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdf2:	893b      	ldrh	r3, [r7, #8]
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	2200      	movs	r2, #0
 800be04:	2180      	movs	r1, #128	; 0x80
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f884 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	80002000 	.word	0x80002000

0800be24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	4608      	mov	r0, r1
 800be2e:	4611      	mov	r1, r2
 800be30:	461a      	mov	r2, r3
 800be32:	4603      	mov	r3, r0
 800be34:	817b      	strh	r3, [r7, #10]
 800be36:	460b      	mov	r3, r1
 800be38:	813b      	strh	r3, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be3e:	88fb      	ldrh	r3, [r7, #6]
 800be40:	b2da      	uxtb	r2, r3
 800be42:	8979      	ldrh	r1, [r7, #10]
 800be44:	4b20      	ldr	r3, [pc, #128]	; (800bec8 <I2C_RequestMemoryRead+0xa4>)
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	2300      	movs	r3, #0
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f9fe 	bl	800c24c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	69b9      	ldr	r1, [r7, #24]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f000 f89d 	bl	800bf94 <I2C_WaitOnTXISFlagUntilTimeout>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e02c      	b.n	800bebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be64:	88fb      	ldrh	r3, [r7, #6]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d105      	bne.n	800be76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be6a:	893b      	ldrh	r3, [r7, #8]
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	629a      	str	r2, [r3, #40]	; 0x28
 800be74:	e015      	b.n	800bea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be76:	893b      	ldrh	r3, [r7, #8]
 800be78:	0a1b      	lsrs	r3, r3, #8
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be84:	69fa      	ldr	r2, [r7, #28]
 800be86:	69b9      	ldr	r1, [r7, #24]
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f883 	bl	800bf94 <I2C_WaitOnTXISFlagUntilTimeout>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e012      	b.n	800bebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be98:	893b      	ldrh	r3, [r7, #8]
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2200      	movs	r2, #0
 800beaa:	2140      	movs	r1, #64	; 0x40
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 f831 	bl	800bf14 <I2C_WaitOnFlagUntilTimeout>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d001      	beq.n	800bebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e000      	b.n	800bebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	80002000 	.word	0x80002000

0800becc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d103      	bne.n	800beea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2200      	movs	r2, #0
 800bee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d007      	beq.n	800bf08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	699a      	ldr	r2, [r3, #24]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	619a      	str	r2, [r3, #24]
  }
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	4613      	mov	r3, r2
 800bf22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf24:	e022      	b.n	800bf6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d01e      	beq.n	800bf6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf2e:	f7fe fd95 	bl	800aa5c <HAL_GetTick>
 800bf32:	4602      	mov	r2, r0
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d302      	bcc.n	800bf44 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d113      	bne.n	800bf6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf48:	f043 0220 	orr.w	r2, r3, #32
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e00f      	b.n	800bf8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4013      	ands	r3, r2
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	bf0c      	ite	eq
 800bf7c:	2301      	moveq	r3, #1
 800bf7e:	2300      	movne	r3, #0
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	461a      	mov	r2, r3
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d0cd      	beq.n	800bf26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bfa0:	e02c      	b.n	800bffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 f870 	bl	800c08c <I2C_IsErrorOccurred>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e02a      	b.n	800c00c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d01e      	beq.n	800bffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfbe:	f7fe fd4d 	bl	800aa5c <HAL_GetTick>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d302      	bcc.n	800bfd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d113      	bne.n	800bffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd8:	f043 0220 	orr.w	r2, r3, #32
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e007      	b.n	800c00c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b02      	cmp	r3, #2
 800c008:	d1cb      	bne.n	800bfa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c020:	e028      	b.n	800c074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	68b9      	ldr	r1, [r7, #8]
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 f830 	bl	800c08c <I2C_IsErrorOccurred>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e026      	b.n	800c084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c036:	f7fe fd11 	bl	800aa5c <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	429a      	cmp	r2, r3
 800c044:	d302      	bcc.n	800c04c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d113      	bne.n	800c074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c050:	f043 0220 	orr.w	r2, r3, #32
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e007      	b.n	800c084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	2b20      	cmp	r3, #32
 800c080:	d1cf      	bne.n	800c022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08a      	sub	sp, #40	; 0x28
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d068      	beq.n	800c18a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c0c0:	e049      	b.n	800c156 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d045      	beq.n	800c156 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c0ca:	f7fe fcc7 	bl	800aa5c <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d302      	bcc.n	800c0e0 <I2C_IsErrorOccurred+0x54>
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d13a      	bne.n	800c156 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c102:	d121      	bne.n	800c148 <I2C_IsErrorOccurred+0xbc>
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c10a:	d01d      	beq.n	800c148 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c10c:	7cfb      	ldrb	r3, [r7, #19]
 800c10e:	2b20      	cmp	r3, #32
 800c110:	d01a      	beq.n	800c148 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c120:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c122:	f7fe fc9b 	bl	800aa5c <HAL_GetTick>
 800c126:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c128:	e00e      	b.n	800c148 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c12a:	f7fe fc97 	bl	800aa5c <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	2b19      	cmp	r3, #25
 800c136:	d907      	bls.n	800c148 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	f043 0320 	orr.w	r3, r3, #32
 800c13e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c146:	e006      	b.n	800c156 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	f003 0320 	and.w	r3, r3, #32
 800c152:	2b20      	cmp	r3, #32
 800c154:	d1e9      	bne.n	800c12a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	f003 0320 	and.w	r3, r3, #32
 800c160:	2b20      	cmp	r3, #32
 800c162:	d003      	beq.n	800c16c <I2C_IsErrorOccurred+0xe0>
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0aa      	beq.n	800c0c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2220      	movs	r2, #32
 800c17a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	f043 0304 	orr.w	r3, r3, #4
 800c182:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00b      	beq.n	800c1d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	f043 0308 	orr.w	r3, r3, #8
 800c1c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00b      	beq.n	800c1f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	f043 0302 	orr.w	r3, r3, #2
 800c1e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01c      	beq.n	800c23a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fe63 	bl	800becc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6859      	ldr	r1, [r3, #4]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <I2C_IsErrorOccurred+0x1bc>)
 800c212:	400b      	ands	r3, r1
 800c214:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	431a      	orrs	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	fe00e800 	.word	0xfe00e800

0800c24c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	817b      	strh	r3, [r7, #10]
 800c25a:	4613      	mov	r3, r2
 800c25c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c25e:	897b      	ldrh	r3, [r7, #10]
 800c260:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c264:	7a7b      	ldrb	r3, [r7, #9]
 800c266:	041b      	lsls	r3, r3, #16
 800c268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c26c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	4313      	orrs	r3, r2
 800c276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c27a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	0d5b      	lsrs	r3, r3, #21
 800c286:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c28a:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <I2C_TransferConfig+0x60>)
 800c28c:	430b      	orrs	r3, r1
 800c28e:	43db      	mvns	r3, r3
 800c290:	ea02 0103 	and.w	r1, r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	430a      	orrs	r2, r1
 800c29c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	03ff63ff 	.word	0x03ff63ff

0800c2b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b20      	cmp	r3, #32
 800c2c4:	d138      	bne.n	800c338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e032      	b.n	800c33a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2224      	movs	r2, #36	; 0x24
 800c2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f022 0201 	bic.w	r2, r2, #1
 800c2f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6819      	ldr	r1, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0201 	orr.w	r2, r2, #1
 800c322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2220      	movs	r2, #32
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	e000      	b.n	800c33a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c338:	2302      	movs	r3, #2
  }
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c346:	b480      	push	{r7}
 800c348:	b085      	sub	sp, #20
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b20      	cmp	r3, #32
 800c35a:	d139      	bne.n	800c3d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c362:	2b01      	cmp	r3, #1
 800c364:	d101      	bne.n	800c36a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c366:	2302      	movs	r3, #2
 800c368:	e033      	b.n	800c3d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2224      	movs	r2, #36	; 0x24
 800c376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 0201 	bic.w	r2, r2, #1
 800c388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f042 0201 	orr.w	r2, r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	e000      	b.n	800c3d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c3d0:	2302      	movs	r3, #2
  }
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
	...

0800c3e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c3ea:	4b23      	ldr	r3, [pc, #140]	; (800c478 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	4a22      	ldr	r2, [pc, #136]	; (800c478 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c3f6:	4b20      	ldr	r3, [pc, #128]	; (800c478 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c402:	4b1e      	ldr	r3, [pc, #120]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a1d      	ldr	r2, [pc, #116]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c40c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c40e:	f7fe fb25 	bl	800aa5c <HAL_GetTick>
 800c412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c414:	e009      	b.n	800c42a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c416:	f7fe fb21 	bl	800aa5c <HAL_GetTick>
 800c41a:	4602      	mov	r2, r0
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c424:	d901      	bls.n	800c42a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e022      	b.n	800c470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c42a:	4b14      	ldr	r3, [pc, #80]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c436:	d1ee      	bne.n	800c416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c438:	4b10      	ldr	r3, [pc, #64]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a0f      	ldr	r2, [pc, #60]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c444:	f7fe fb0a 	bl	800aa5c <HAL_GetTick>
 800c448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c44a:	e009      	b.n	800c460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c44c:	f7fe fb06 	bl	800aa5c <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c45a:	d901      	bls.n	800c460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e007      	b.n	800c470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c460:	4b06      	ldr	r3, [pc, #24]	; (800c47c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c46c:	d1ee      	bne.n	800c44c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	40023800 	.word	0x40023800
 800c47c:	40007000 	.word	0x40007000

0800c480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c488:	2300      	movs	r3, #0
 800c48a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e291      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 8087 	beq.w	800c5b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4a4:	4b96      	ldr	r3, [pc, #600]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f003 030c 	and.w	r3, r3, #12
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d00c      	beq.n	800c4ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4b0:	4b93      	ldr	r3, [pc, #588]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f003 030c 	and.w	r3, r3, #12
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d112      	bne.n	800c4e2 <HAL_RCC_OscConfig+0x62>
 800c4bc:	4b90      	ldr	r3, [pc, #576]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4c8:	d10b      	bne.n	800c4e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4ca:	4b8d      	ldr	r3, [pc, #564]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d06c      	beq.n	800c5b0 <HAL_RCC_OscConfig+0x130>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d168      	bne.n	800c5b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e26b      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ea:	d106      	bne.n	800c4fa <HAL_RCC_OscConfig+0x7a>
 800c4ec:	4b84      	ldr	r3, [pc, #528]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a83      	ldr	r2, [pc, #524]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c4f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e02e      	b.n	800c558 <HAL_RCC_OscConfig+0xd8>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10c      	bne.n	800c51c <HAL_RCC_OscConfig+0x9c>
 800c502:	4b7f      	ldr	r3, [pc, #508]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a7e      	ldr	r2, [pc, #504]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	4b7c      	ldr	r3, [pc, #496]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a7b      	ldr	r2, [pc, #492]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	e01d      	b.n	800c558 <HAL_RCC_OscConfig+0xd8>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c524:	d10c      	bne.n	800c540 <HAL_RCC_OscConfig+0xc0>
 800c526:	4b76      	ldr	r3, [pc, #472]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a75      	ldr	r2, [pc, #468]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c52c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c530:	6013      	str	r3, [r2, #0]
 800c532:	4b73      	ldr	r3, [pc, #460]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a72      	ldr	r2, [pc, #456]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	e00b      	b.n	800c558 <HAL_RCC_OscConfig+0xd8>
 800c540:	4b6f      	ldr	r3, [pc, #444]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a6e      	ldr	r2, [pc, #440]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	4b6c      	ldr	r3, [pc, #432]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a6b      	ldr	r2, [pc, #428]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d013      	beq.n	800c588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c560:	f7fe fa7c 	bl	800aa5c <HAL_GetTick>
 800c564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c566:	e008      	b.n	800c57a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c568:	f7fe fa78 	bl	800aa5c <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	2b64      	cmp	r3, #100	; 0x64
 800c574:	d901      	bls.n	800c57a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e21f      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c57a:	4b61      	ldr	r3, [pc, #388]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0f0      	beq.n	800c568 <HAL_RCC_OscConfig+0xe8>
 800c586:	e014      	b.n	800c5b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c588:	f7fe fa68 	bl	800aa5c <HAL_GetTick>
 800c58c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c58e:	e008      	b.n	800c5a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c590:	f7fe fa64 	bl	800aa5c <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	2b64      	cmp	r3, #100	; 0x64
 800c59c:	d901      	bls.n	800c5a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e20b      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5a2:	4b57      	ldr	r3, [pc, #348]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1f0      	bne.n	800c590 <HAL_RCC_OscConfig+0x110>
 800c5ae:	e000      	b.n	800c5b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 0302 	and.w	r3, r3, #2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d069      	beq.n	800c692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c5be:	4b50      	ldr	r3, [pc, #320]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	f003 030c 	and.w	r3, r3, #12
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00b      	beq.n	800c5e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5ca:	4b4d      	ldr	r3, [pc, #308]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	f003 030c 	and.w	r3, r3, #12
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d11c      	bne.n	800c610 <HAL_RCC_OscConfig+0x190>
 800c5d6:	4b4a      	ldr	r3, [pc, #296]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d116      	bne.n	800c610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5e2:	4b47      	ldr	r3, [pc, #284]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d005      	beq.n	800c5fa <HAL_RCC_OscConfig+0x17a>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d001      	beq.n	800c5fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e1df      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5fa:	4b41      	ldr	r3, [pc, #260]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	493d      	ldr	r1, [pc, #244]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c60e:	e040      	b.n	800c692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d023      	beq.n	800c660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c618:	4b39      	ldr	r3, [pc, #228]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a38      	ldr	r2, [pc, #224]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c624:	f7fe fa1a 	bl	800aa5c <HAL_GetTick>
 800c628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c62a:	e008      	b.n	800c63e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c62c:	f7fe fa16 	bl	800aa5c <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	2b02      	cmp	r3, #2
 800c638:	d901      	bls.n	800c63e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c63a:	2303      	movs	r3, #3
 800c63c:	e1bd      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c63e:	4b30      	ldr	r3, [pc, #192]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d0f0      	beq.n	800c62c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c64a:	4b2d      	ldr	r3, [pc, #180]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	4929      	ldr	r1, [pc, #164]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c65a:	4313      	orrs	r3, r2
 800c65c:	600b      	str	r3, [r1, #0]
 800c65e:	e018      	b.n	800c692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a26      	ldr	r2, [pc, #152]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c666:	f023 0301 	bic.w	r3, r3, #1
 800c66a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c66c:	f7fe f9f6 	bl	800aa5c <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c672:	e008      	b.n	800c686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c674:	f7fe f9f2 	bl	800aa5c <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e199      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c686:	4b1e      	ldr	r3, [pc, #120]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1f0      	bne.n	800c674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d038      	beq.n	800c710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d019      	beq.n	800c6da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6a6:	4b16      	ldr	r3, [pc, #88]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6aa:	4a15      	ldr	r2, [pc, #84]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c6ac:	f043 0301 	orr.w	r3, r3, #1
 800c6b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b2:	f7fe f9d3 	bl	800aa5c <HAL_GetTick>
 800c6b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6b8:	e008      	b.n	800c6cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6ba:	f7fe f9cf 	bl	800aa5c <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d901      	bls.n	800c6cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e176      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d0f0      	beq.n	800c6ba <HAL_RCC_OscConfig+0x23a>
 800c6d8:	e01a      	b.n	800c710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6de:	4a08      	ldr	r2, [pc, #32]	; (800c700 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	f023 0301 	bic.w	r3, r3, #1
 800c6e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6e6:	f7fe f9b9 	bl	800aa5c <HAL_GetTick>
 800c6ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6ec:	e00a      	b.n	800c704 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6ee:	f7fe f9b5 	bl	800aa5c <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d903      	bls.n	800c704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e15c      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
 800c700:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c704:	4b91      	ldr	r3, [pc, #580]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1ee      	bne.n	800c6ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f000 80a4 	beq.w	800c866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c71e:	4b8b      	ldr	r3, [pc, #556]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10d      	bne.n	800c746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c72a:	4b88      	ldr	r3, [pc, #544]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72e:	4a87      	ldr	r2, [pc, #540]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c734:	6413      	str	r3, [r2, #64]	; 0x40
 800c736:	4b85      	ldr	r3, [pc, #532]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c73e:	60bb      	str	r3, [r7, #8]
 800c740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c742:	2301      	movs	r3, #1
 800c744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c746:	4b82      	ldr	r3, [pc, #520]	; (800c950 <HAL_RCC_OscConfig+0x4d0>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d118      	bne.n	800c784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c752:	4b7f      	ldr	r3, [pc, #508]	; (800c950 <HAL_RCC_OscConfig+0x4d0>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a7e      	ldr	r2, [pc, #504]	; (800c950 <HAL_RCC_OscConfig+0x4d0>)
 800c758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c75c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c75e:	f7fe f97d 	bl	800aa5c <HAL_GetTick>
 800c762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c764:	e008      	b.n	800c778 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c766:	f7fe f979 	bl	800aa5c <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	2b64      	cmp	r3, #100	; 0x64
 800c772:	d901      	bls.n	800c778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	e120      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c778:	4b75      	ldr	r3, [pc, #468]	; (800c950 <HAL_RCC_OscConfig+0x4d0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0f0      	beq.n	800c766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d106      	bne.n	800c79a <HAL_RCC_OscConfig+0x31a>
 800c78c:	4b6f      	ldr	r3, [pc, #444]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c790:	4a6e      	ldr	r2, [pc, #440]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c792:	f043 0301 	orr.w	r3, r3, #1
 800c796:	6713      	str	r3, [r2, #112]	; 0x70
 800c798:	e02d      	b.n	800c7f6 <HAL_RCC_OscConfig+0x376>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10c      	bne.n	800c7bc <HAL_RCC_OscConfig+0x33c>
 800c7a2:	4b6a      	ldr	r3, [pc, #424]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a6:	4a69      	ldr	r2, [pc, #420]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7a8:	f023 0301 	bic.w	r3, r3, #1
 800c7ac:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ae:	4b67      	ldr	r3, [pc, #412]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b2:	4a66      	ldr	r2, [pc, #408]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7b4:	f023 0304 	bic.w	r3, r3, #4
 800c7b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ba:	e01c      	b.n	800c7f6 <HAL_RCC_OscConfig+0x376>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b05      	cmp	r3, #5
 800c7c2:	d10c      	bne.n	800c7de <HAL_RCC_OscConfig+0x35e>
 800c7c4:	4b61      	ldr	r3, [pc, #388]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c8:	4a60      	ldr	r2, [pc, #384]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7ca:	f043 0304 	orr.w	r3, r3, #4
 800c7ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c7d0:	4b5e      	ldr	r3, [pc, #376]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d4:	4a5d      	ldr	r2, [pc, #372]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7d6:	f043 0301 	orr.w	r3, r3, #1
 800c7da:	6713      	str	r3, [r2, #112]	; 0x70
 800c7dc:	e00b      	b.n	800c7f6 <HAL_RCC_OscConfig+0x376>
 800c7de:	4b5b      	ldr	r3, [pc, #364]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e2:	4a5a      	ldr	r2, [pc, #360]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7e4:	f023 0301 	bic.w	r3, r3, #1
 800c7e8:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ea:	4b58      	ldr	r3, [pc, #352]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ee:	4a57      	ldr	r2, [pc, #348]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c7f0:	f023 0304 	bic.w	r3, r3, #4
 800c7f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d015      	beq.n	800c82a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7fe:	f7fe f92d 	bl	800aa5c <HAL_GetTick>
 800c802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c804:	e00a      	b.n	800c81c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c806:	f7fe f929 	bl	800aa5c <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	f241 3288 	movw	r2, #5000	; 0x1388
 800c814:	4293      	cmp	r3, r2
 800c816:	d901      	bls.n	800c81c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e0ce      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c81c:	4b4b      	ldr	r3, [pc, #300]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	f003 0302 	and.w	r3, r3, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0ee      	beq.n	800c806 <HAL_RCC_OscConfig+0x386>
 800c828:	e014      	b.n	800c854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c82a:	f7fe f917 	bl	800aa5c <HAL_GetTick>
 800c82e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c830:	e00a      	b.n	800c848 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c832:	f7fe f913 	bl	800aa5c <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c840:	4293      	cmp	r3, r2
 800c842:	d901      	bls.n	800c848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e0b8      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c848:	4b40      	ldr	r3, [pc, #256]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1ee      	bne.n	800c832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d105      	bne.n	800c866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c85a:	4b3c      	ldr	r3, [pc, #240]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85e:	4a3b      	ldr	r2, [pc, #236]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 80a4 	beq.w	800c9b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c870:	4b36      	ldr	r3, [pc, #216]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f003 030c 	and.w	r3, r3, #12
 800c878:	2b08      	cmp	r3, #8
 800c87a:	d06b      	beq.n	800c954 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d149      	bne.n	800c918 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c884:	4b31      	ldr	r3, [pc, #196]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a30      	ldr	r2, [pc, #192]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c88a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c88e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c890:	f7fe f8e4 	bl	800aa5c <HAL_GetTick>
 800c894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c896:	e008      	b.n	800c8aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c898:	f7fe f8e0 	bl	800aa5c <HAL_GetTick>
 800c89c:	4602      	mov	r2, r0
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d901      	bls.n	800c8aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e087      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8aa:	4b28      	ldr	r3, [pc, #160]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1f0      	bne.n	800c898 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	69da      	ldr	r2, [r3, #28]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	019b      	lsls	r3, r3, #6
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8cc:	085b      	lsrs	r3, r3, #1
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	061b      	lsls	r3, r3, #24
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	4a1b      	ldr	r2, [pc, #108]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c8de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8e4:	4b19      	ldr	r3, [pc, #100]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a18      	ldr	r2, [pc, #96]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c8ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8f0:	f7fe f8b4 	bl	800aa5c <HAL_GetTick>
 800c8f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8f6:	e008      	b.n	800c90a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8f8:	f7fe f8b0 	bl	800aa5c <HAL_GetTick>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	2b02      	cmp	r3, #2
 800c904:	d901      	bls.n	800c90a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	e057      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c90a:	4b10      	ldr	r3, [pc, #64]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f0      	beq.n	800c8f8 <HAL_RCC_OscConfig+0x478>
 800c916:	e04f      	b.n	800c9b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c918:	4b0c      	ldr	r3, [pc, #48]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a0b      	ldr	r2, [pc, #44]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c91e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c924:	f7fe f89a 	bl	800aa5c <HAL_GetTick>
 800c928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c92a:	e008      	b.n	800c93e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c92c:	f7fe f896 	bl	800aa5c <HAL_GetTick>
 800c930:	4602      	mov	r2, r0
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	2b02      	cmp	r3, #2
 800c938:	d901      	bls.n	800c93e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e03d      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c93e:	4b03      	ldr	r3, [pc, #12]	; (800c94c <HAL_RCC_OscConfig+0x4cc>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f0      	bne.n	800c92c <HAL_RCC_OscConfig+0x4ac>
 800c94a:	e035      	b.n	800c9b8 <HAL_RCC_OscConfig+0x538>
 800c94c:	40023800 	.word	0x40023800
 800c950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c954:	4b1b      	ldr	r3, [pc, #108]	; (800c9c4 <HAL_RCC_OscConfig+0x544>)
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d028      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d121      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d11a      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c984:	4013      	ands	r3, r2
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c98a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d111      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	085b      	lsrs	r3, r3, #1
 800c99c:	3b01      	subs	r3, #1
 800c99e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d107      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d001      	beq.n	800c9b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e000      	b.n	800c9ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	40023800 	.word	0x40023800

0800c9c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e0d0      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c9e0:	4b6a      	ldr	r3, [pc, #424]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d910      	bls.n	800ca10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9ee:	4b67      	ldr	r3, [pc, #412]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f023 020f 	bic.w	r2, r3, #15
 800c9f6:	4965      	ldr	r1, [pc, #404]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9fe:	4b63      	ldr	r3, [pc, #396]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 030f 	and.w	r3, r3, #15
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d001      	beq.n	800ca10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e0b8      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d020      	beq.n	800ca5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0304 	and.w	r3, r3, #4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca28:	4b59      	ldr	r3, [pc, #356]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	4a58      	ldr	r2, [pc, #352]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ca32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca40:	4b53      	ldr	r3, [pc, #332]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	4a52      	ldr	r2, [pc, #328]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ca4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca4c:	4b50      	ldr	r3, [pc, #320]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	494d      	ldr	r1, [pc, #308]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d040      	beq.n	800caec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d107      	bne.n	800ca82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca72:	4b47      	ldr	r3, [pc, #284]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d115      	bne.n	800caaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e07f      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d107      	bne.n	800ca9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca8a:	4b41      	ldr	r3, [pc, #260]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d109      	bne.n	800caaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e073      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca9a:	4b3d      	ldr	r3, [pc, #244]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0302 	and.w	r3, r3, #2
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e06b      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800caaa:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f023 0203 	bic.w	r2, r3, #3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	4936      	ldr	r1, [pc, #216]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cab8:	4313      	orrs	r3, r2
 800caba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cabc:	f7fd ffce 	bl	800aa5c <HAL_GetTick>
 800cac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cac2:	e00a      	b.n	800cada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cac4:	f7fd ffca 	bl	800aa5c <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d901      	bls.n	800cada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e053      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cada:	4b2d      	ldr	r3, [pc, #180]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f003 020c 	and.w	r2, r3, #12
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	429a      	cmp	r2, r3
 800caea:	d1eb      	bne.n	800cac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800caec:	4b27      	ldr	r3, [pc, #156]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 030f 	and.w	r3, r3, #15
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d210      	bcs.n	800cb1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cafa:	4b24      	ldr	r3, [pc, #144]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f023 020f 	bic.w	r2, r3, #15
 800cb02:	4922      	ldr	r1, [pc, #136]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb0a:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <HAL_RCC_ClockConfig+0x1c4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d001      	beq.n	800cb1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e032      	b.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0304 	and.w	r3, r3, #4
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d008      	beq.n	800cb3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb28:	4b19      	ldr	r3, [pc, #100]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	4916      	ldr	r1, [pc, #88]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cb36:	4313      	orrs	r3, r2
 800cb38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0308 	and.w	r3, r3, #8
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cb46:	4b12      	ldr	r3, [pc, #72]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	490e      	ldr	r1, [pc, #56]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cb5a:	f000 f821 	bl	800cba0 <HAL_RCC_GetSysClockFreq>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <HAL_RCC_ClockConfig+0x1c8>)
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	091b      	lsrs	r3, r3, #4
 800cb66:	f003 030f 	and.w	r3, r3, #15
 800cb6a:	490a      	ldr	r1, [pc, #40]	; (800cb94 <HAL_RCC_ClockConfig+0x1cc>)
 800cb6c:	5ccb      	ldrb	r3, [r1, r3]
 800cb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb72:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <HAL_RCC_ClockConfig+0x1d0>)
 800cb74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cb76:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <HAL_RCC_ClockConfig+0x1d4>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fa f8f2 	bl	8006d64 <HAL_InitTick>

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	40023c00 	.word	0x40023c00
 800cb90:	40023800 	.word	0x40023800
 800cb94:	0801bee0 	.word	0x0801bee0
 800cb98:	20000008 	.word	0x20000008
 800cb9c:	2000000c 	.word	0x2000000c

0800cba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cba4:	b090      	sub	sp, #64	; 0x40
 800cba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	637b      	str	r3, [r7, #52]	; 0x34
 800cbac:	2300      	movs	r3, #0
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cbb8:	4b59      	ldr	r3, [pc, #356]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f003 030c 	and.w	r3, r3, #12
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d00d      	beq.n	800cbe0 <HAL_RCC_GetSysClockFreq+0x40>
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	f200 80a1 	bhi.w	800cd0c <HAL_RCC_GetSysClockFreq+0x16c>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <HAL_RCC_GetSysClockFreq+0x34>
 800cbce:	2b04      	cmp	r3, #4
 800cbd0:	d003      	beq.n	800cbda <HAL_RCC_GetSysClockFreq+0x3a>
 800cbd2:	e09b      	b.n	800cd0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cbd4:	4b53      	ldr	r3, [pc, #332]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x184>)
 800cbd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cbd8:	e09b      	b.n	800cd12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cbda:	4b53      	ldr	r3, [pc, #332]	; (800cd28 <HAL_RCC_GetSysClockFreq+0x188>)
 800cbdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cbde:	e098      	b.n	800cd12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cbe0:	4b4f      	ldr	r3, [pc, #316]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbe8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cbea:	4b4d      	ldr	r3, [pc, #308]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d028      	beq.n	800cc48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbf6:	4b4a      	ldr	r3, [pc, #296]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	099b      	lsrs	r3, r3, #6
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	623b      	str	r3, [r7, #32]
 800cc00:	627a      	str	r2, [r7, #36]	; 0x24
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cc08:	2100      	movs	r1, #0
 800cc0a:	4b47      	ldr	r3, [pc, #284]	; (800cd28 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc0c:	fb03 f201 	mul.w	r2, r3, r1
 800cc10:	2300      	movs	r3, #0
 800cc12:	fb00 f303 	mul.w	r3, r0, r3
 800cc16:	4413      	add	r3, r2
 800cc18:	4a43      	ldr	r2, [pc, #268]	; (800cd28 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc1a:	fba0 1202 	umull	r1, r2, r0, r2
 800cc1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc20:	460a      	mov	r2, r1
 800cc22:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc26:	4413      	add	r3, r2
 800cc28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	61bb      	str	r3, [r7, #24]
 800cc30:	61fa      	str	r2, [r7, #28]
 800cc32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cc3a:	f7f4 f89d 	bl	8000d78 <__aeabi_uldivmod>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4613      	mov	r3, r2
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc46:	e053      	b.n	800ccf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc48:	4b35      	ldr	r3, [pc, #212]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	099b      	lsrs	r3, r3, #6
 800cc4e:	2200      	movs	r2, #0
 800cc50:	613b      	str	r3, [r7, #16]
 800cc52:	617a      	str	r2, [r7, #20]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800cc5a:	f04f 0b00 	mov.w	fp, #0
 800cc5e:	4652      	mov	r2, sl
 800cc60:	465b      	mov	r3, fp
 800cc62:	f04f 0000 	mov.w	r0, #0
 800cc66:	f04f 0100 	mov.w	r1, #0
 800cc6a:	0159      	lsls	r1, r3, #5
 800cc6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc70:	0150      	lsls	r0, r2, #5
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	ebb2 080a 	subs.w	r8, r2, sl
 800cc7a:	eb63 090b 	sbc.w	r9, r3, fp
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	f04f 0300 	mov.w	r3, #0
 800cc86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800cc8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800cc8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800cc92:	ebb2 0408 	subs.w	r4, r2, r8
 800cc96:	eb63 0509 	sbc.w	r5, r3, r9
 800cc9a:	f04f 0200 	mov.w	r2, #0
 800cc9e:	f04f 0300 	mov.w	r3, #0
 800cca2:	00eb      	lsls	r3, r5, #3
 800cca4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cca8:	00e2      	lsls	r2, r4, #3
 800ccaa:	4614      	mov	r4, r2
 800ccac:	461d      	mov	r5, r3
 800ccae:	eb14 030a 	adds.w	r3, r4, sl
 800ccb2:	603b      	str	r3, [r7, #0]
 800ccb4:	eb45 030b 	adc.w	r3, r5, fp
 800ccb8:	607b      	str	r3, [r7, #4]
 800ccba:	f04f 0200 	mov.w	r2, #0
 800ccbe:	f04f 0300 	mov.w	r3, #0
 800ccc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	028b      	lsls	r3, r1, #10
 800ccca:	4621      	mov	r1, r4
 800cccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	028a      	lsls	r2, r1, #10
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccda:	2200      	movs	r2, #0
 800ccdc:	60bb      	str	r3, [r7, #8]
 800ccde:	60fa      	str	r2, [r7, #12]
 800cce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cce4:	f7f4 f848 	bl	8000d78 <__aeabi_uldivmod>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4613      	mov	r3, r2
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <HAL_RCC_GetSysClockFreq+0x180>)
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	0c1b      	lsrs	r3, r3, #16
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800cd00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd0a:	e002      	b.n	800cd12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd0c:	4b05      	ldr	r3, [pc, #20]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x184>)
 800cd0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd10:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3740      	adds	r7, #64	; 0x40
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd1e:	bf00      	nop
 800cd20:	40023800 	.word	0x40023800
 800cd24:	00f42400 	.word	0x00f42400
 800cd28:	017d7840 	.word	0x017d7840

0800cd2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd30:	4b03      	ldr	r3, [pc, #12]	; (800cd40 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd32:	681b      	ldr	r3, [r3, #0]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	20000008 	.word	0x20000008

0800cd44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cd48:	f7ff fff0 	bl	800cd2c <HAL_RCC_GetHCLKFreq>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	0a9b      	lsrs	r3, r3, #10
 800cd54:	f003 0307 	and.w	r3, r3, #7
 800cd58:	4903      	ldr	r1, [pc, #12]	; (800cd68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cd5a:	5ccb      	ldrb	r3, [r1, r3]
 800cd5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	40023800 	.word	0x40023800
 800cd68:	0801bef0 	.word	0x0801bef0

0800cd6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cd70:	f7ff ffdc 	bl	800cd2c <HAL_RCC_GetHCLKFreq>
 800cd74:	4602      	mov	r2, r0
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	0b5b      	lsrs	r3, r3, #13
 800cd7c:	f003 0307 	and.w	r3, r3, #7
 800cd80:	4903      	ldr	r1, [pc, #12]	; (800cd90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd82:	5ccb      	ldrb	r3, [r1, r3]
 800cd84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	0801bef0 	.word	0x0801bef0

0800cd94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	220f      	movs	r2, #15
 800cda2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f003 0203 	and.w	r2, r3, #3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cdbc:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cdc8:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	08db      	lsrs	r3, r3, #3
 800cdce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <HAL_RCC_GetClockConfig+0x60>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 020f 	and.w	r2, r3, #15
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	601a      	str	r2, [r3, #0]
}
 800cde2:	bf00      	nop
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	40023800 	.word	0x40023800
 800cdf4:	40023c00 	.word	0x40023c00

0800cdf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d012      	beq.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ce1c:	4b65      	ldr	r3, [pc, #404]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	4a64      	ldr	r2, [pc, #400]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce26:	6093      	str	r3, [r2, #8]
 800ce28:	4b62      	ldr	r3, [pc, #392]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	4960      	ldr	r1, [pc, #384]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce32:	4313      	orrs	r3, r2
 800ce34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d017      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce4e:	4b59      	ldr	r3, [pc, #356]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5c:	4955      	ldr	r1, [pc, #340]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce6c:	d101      	bne.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d017      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ce8a:	4b4a      	ldr	r3, [pc, #296]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	4946      	ldr	r1, [pc, #280]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cea8:	d101      	bne.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d101      	bne.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0320 	and.w	r3, r3, #32
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 808b 	beq.w	800cfde <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cec8:	4b3a      	ldr	r3, [pc, #232]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	4a39      	ldr	r2, [pc, #228]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ced2:	6413      	str	r3, [r2, #64]	; 0x40
 800ced4:	4b37      	ldr	r3, [pc, #220]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cee0:	4b35      	ldr	r3, [pc, #212]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a34      	ldr	r2, [pc, #208]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceec:	f7fd fdb6 	bl	800aa5c <HAL_GetTick>
 800cef0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cef2:	e008      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cef4:	f7fd fdb2 	bl	800aa5c <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	2b64      	cmp	r3, #100	; 0x64
 800cf00:	d901      	bls.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e2bc      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf06:	4b2c      	ldr	r3, [pc, #176]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0f0      	beq.n	800cef4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cf12:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d035      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d02e      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf30:	4b20      	ldr	r3, [pc, #128]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cf3a:	4b1e      	ldr	r3, [pc, #120]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3e:	4a1d      	ldr	r2, [pc, #116]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cf46:	4b1b      	ldr	r3, [pc, #108]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4a:	4a1a      	ldr	r2, [pc, #104]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cf52:	4a18      	ldr	r2, [pc, #96]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cf58:	4b16      	ldr	r3, [pc, #88]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d114      	bne.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf64:	f7fd fd7a 	bl	800aa5c <HAL_GetTick>
 800cf68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf6a:	e00a      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf6c:	f7fd fd76 	bl	800aa5c <HAL_GetTick>
 800cf70:	4602      	mov	r2, r0
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d901      	bls.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e27e      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf82:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf86:	f003 0302 	and.w	r3, r3, #2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d0ee      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf9a:	d111      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800cf9c:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800cfa8:	4b04      	ldr	r3, [pc, #16]	; (800cfbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800cfaa:	400b      	ands	r3, r1
 800cfac:	4901      	ldr	r1, [pc, #4]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	608b      	str	r3, [r1, #8]
 800cfb2:	e00b      	b.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800cfb4:	40023800 	.word	0x40023800
 800cfb8:	40007000 	.word	0x40007000
 800cfbc:	0ffffcff 	.word	0x0ffffcff
 800cfc0:	4ba4      	ldr	r3, [pc, #656]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	4aa3      	ldr	r2, [pc, #652]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cfc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cfca:	6093      	str	r3, [r2, #8]
 800cfcc:	4ba1      	ldr	r3, [pc, #644]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cfce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfd8:	499e      	ldr	r1, [pc, #632]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0310 	and.w	r3, r3, #16
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d010      	beq.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfea:	4b9a      	ldr	r3, [pc, #616]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cfec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cff0:	4a98      	ldr	r2, [pc, #608]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cffa:	4b96      	ldr	r3, [pc, #600]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800cffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d004:	4993      	ldr	r1, [pc, #588]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d006:	4313      	orrs	r3, r2
 800d008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d018:	4b8e      	ldr	r3, [pc, #568]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d01e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d026:	498b      	ldr	r1, [pc, #556]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d028:	4313      	orrs	r3, r2
 800d02a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d03a:	4b86      	ldr	r3, [pc, #536]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d048:	4982      	ldr	r1, [pc, #520]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d04a:	4313      	orrs	r3, r2
 800d04c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00a      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d05c:	4b7d      	ldr	r3, [pc, #500]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d06a:	497a      	ldr	r1, [pc, #488]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d07e:	4b75      	ldr	r3, [pc, #468]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d084:	f023 0203 	bic.w	r2, r3, #3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08c:	4971      	ldr	r1, [pc, #452]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00a      	beq.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0a0:	4b6c      	ldr	r3, [pc, #432]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a6:	f023 020c 	bic.w	r2, r3, #12
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ae:	4969      	ldr	r1, [pc, #420]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00a      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d0c2:	4b64      	ldr	r3, [pc, #400]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d0:	4960      	ldr	r1, [pc, #384]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00a      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d0e4:	4b5b      	ldr	r3, [pc, #364]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0f2:	4958      	ldr	r1, [pc, #352]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00a      	beq.n	800d11c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d106:	4b53      	ldr	r3, [pc, #332]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d10c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d114:	494f      	ldr	r1, [pc, #316]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d116:	4313      	orrs	r3, r2
 800d118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00a      	beq.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d128:	4b4a      	ldr	r3, [pc, #296]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d136:	4947      	ldr	r1, [pc, #284]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d138:	4313      	orrs	r3, r2
 800d13a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d14a:	4b42      	ldr	r3, [pc, #264]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d158:	493e      	ldr	r1, [pc, #248]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d15a:	4313      	orrs	r3, r2
 800d15c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d16c:	4b39      	ldr	r3, [pc, #228]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d172:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d17a:	4936      	ldr	r1, [pc, #216]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d17c:	4313      	orrs	r3, r2
 800d17e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d011      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d18e:	4b31      	ldr	r3, [pc, #196]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d194:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d19c:	492d      	ldr	r1, [pc, #180]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1ac:	d101      	bne.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00a      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1be:	4b25      	ldr	r3, [pc, #148]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1cc:	4921      	ldr	r1, [pc, #132]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00a      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1e0:	4b1c      	ldr	r3, [pc, #112]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1ee:	4919      	ldr	r1, [pc, #100]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00a      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d202:	4b14      	ldr	r3, [pc, #80]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d208:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d210:	4910      	ldr	r1, [pc, #64]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d212:	4313      	orrs	r3, r2
 800d214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d006      	beq.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 809d 	beq.w	800d366 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d22c:	4b09      	ldr	r3, [pc, #36]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a08      	ldr	r2, [pc, #32]	; (800d254 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d238:	f7fd fc10 	bl	800aa5c <HAL_GetTick>
 800d23c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d23e:	e00b      	b.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d240:	f7fd fc0c 	bl	800aa5c <HAL_GetTick>
 800d244:	4602      	mov	r2, r0
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	2b64      	cmp	r3, #100	; 0x64
 800d24c:	d904      	bls.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d24e:	2303      	movs	r3, #3
 800d250:	e116      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800d252:	bf00      	nop
 800d254:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d258:	4b8b      	ldr	r3, [pc, #556]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1ed      	bne.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d017      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d113      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d278:	4b83      	ldr	r3, [pc, #524]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d27e:	0e1b      	lsrs	r3, r3, #24
 800d280:	f003 030f 	and.w	r3, r3, #15
 800d284:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	019a      	lsls	r2, r3, #6
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	061b      	lsls	r3, r3, #24
 800d290:	431a      	orrs	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	071b      	lsls	r3, r3, #28
 800d298:	497b      	ldr	r1, [pc, #492]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2b4:	d00a      	beq.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d024      	beq.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2ca:	d11f      	bne.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2cc:	4b6e      	ldr	r3, [pc, #440]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2d2:	0f1b      	lsrs	r3, r3, #28
 800d2d4:	f003 0307 	and.w	r3, r3, #7
 800d2d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	019a      	lsls	r2, r3, #6
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	061b      	lsls	r3, r3, #24
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	071b      	lsls	r3, r3, #28
 800d2ec:	4966      	ldr	r1, [pc, #408]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d2f4:	4b64      	ldr	r3, [pc, #400]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fa:	f023 021f 	bic.w	r2, r3, #31
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	3b01      	subs	r3, #1
 800d304:	4960      	ldr	r1, [pc, #384]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d306:	4313      	orrs	r3, r2
 800d308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00d      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	019a      	lsls	r2, r3, #6
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	061b      	lsls	r3, r3, #24
 800d324:	431a      	orrs	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	071b      	lsls	r3, r3, #28
 800d32c:	4956      	ldr	r1, [pc, #344]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d32e:	4313      	orrs	r3, r2
 800d330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d334:	4b54      	ldr	r3, [pc, #336]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a53      	ldr	r2, [pc, #332]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d33a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d33e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d340:	f7fd fb8c 	bl	800aa5c <HAL_GetTick>
 800d344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d346:	e008      	b.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d348:	f7fd fb88 	bl	800aa5c <HAL_GetTick>
 800d34c:	4602      	mov	r2, r0
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	2b64      	cmp	r3, #100	; 0x64
 800d354:	d901      	bls.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d356:	2303      	movs	r3, #3
 800d358:	e092      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d35a:	4b4b      	ldr	r3, [pc, #300]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d362:	2b00      	cmp	r3, #0
 800d364:	d0f0      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	f040 8088 	bne.w	800d47e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d36e:	4b46      	ldr	r3, [pc, #280]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a45      	ldr	r2, [pc, #276]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d37a:	f7fd fb6f 	bl	800aa5c <HAL_GetTick>
 800d37e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d380:	e008      	b.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d382:	f7fd fb6b 	bl	800aa5c <HAL_GetTick>
 800d386:	4602      	mov	r2, r0
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	2b64      	cmp	r3, #100	; 0x64
 800d38e:	d901      	bls.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e075      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d394:	4b3c      	ldr	r3, [pc, #240]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d39c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3a0:	d0ef      	beq.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d024      	beq.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d120      	bne.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3ca:	4b2f      	ldr	r3, [pc, #188]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3d0:	0c1b      	lsrs	r3, r3, #16
 800d3d2:	f003 0303 	and.w	r3, r3, #3
 800d3d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	019a      	lsls	r2, r3, #6
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	041b      	lsls	r3, r3, #16
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	061b      	lsls	r3, r3, #24
 800d3ea:	4927      	ldr	r1, [pc, #156]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d3f2:	4b25      	ldr	r3, [pc, #148]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	3b01      	subs	r3, #1
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	4920      	ldr	r1, [pc, #128]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d406:	4313      	orrs	r3, r2
 800d408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d018      	beq.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x652>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d420:	d113      	bne.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d422:	4b19      	ldr	r3, [pc, #100]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d428:	0e1b      	lsrs	r3, r3, #24
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	019a      	lsls	r2, r3, #6
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	699b      	ldr	r3, [r3, #24]
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	431a      	orrs	r2, r3
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	061b      	lsls	r3, r3, #24
 800d442:	4911      	ldr	r1, [pc, #68]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d444:	4313      	orrs	r3, r2
 800d446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a0e      	ldr	r2, [pc, #56]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d456:	f7fd fb01 	bl	800aa5c <HAL_GetTick>
 800d45a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d45c:	e008      	b.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d45e:	f7fd fafd 	bl	800aa5c <HAL_GetTick>
 800d462:	4602      	mov	r2, r0
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	2b64      	cmp	r3, #100	; 0x64
 800d46a:	d901      	bls.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e007      	b.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d470:	4b05      	ldr	r3, [pc, #20]	; (800d488 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d47c:	d1ef      	bne.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	40023800 	.word	0x40023800

0800d48c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e09d      	b.n	800d5da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d108      	bne.n	800d4b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4ae:	d009      	beq.n	800d4c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	61da      	str	r2, [r3, #28]
 800d4b6:	e005      	b.n	800d4c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7f9 f9f8 	bl	80068d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d504:	d902      	bls.n	800d50c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d506:	2300      	movs	r3, #0
 800d508:	60fb      	str	r3, [r7, #12]
 800d50a:	e002      	b.n	800d512 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d50c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d510:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d51a:	d007      	beq.n	800d52c <HAL_SPI_Init+0xa0>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d524:	d002      	beq.n	800d52c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d53c:	431a      	orrs	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	431a      	orrs	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	431a      	orrs	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d55a:	431a      	orrs	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d564:	431a      	orrs	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56e:	ea42 0103 	orr.w	r1, r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d576:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	430a      	orrs	r2, r1
 800d580:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	0c1b      	lsrs	r3, r3, #16
 800d588:	f003 0204 	and.w	r2, r3, #4
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	431a      	orrs	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	f003 0308 	and.w	r3, r3, #8
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d5a8:	ea42 0103 	orr.w	r1, r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	69da      	ldr	r2, [r3, #28]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b088      	sub	sp, #32
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	603b      	str	r3, [r7, #0]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d101      	bne.n	800d604 <HAL_SPI_Transmit+0x22>
 800d600:	2302      	movs	r3, #2
 800d602:	e158      	b.n	800d8b6 <HAL_SPI_Transmit+0x2d4>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d60c:	f7fd fa26 	bl	800aa5c <HAL_GetTick>
 800d610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d612:	88fb      	ldrh	r3, [r7, #6]
 800d614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d002      	beq.n	800d628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d622:	2302      	movs	r3, #2
 800d624:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d626:	e13d      	b.n	800d8a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <HAL_SPI_Transmit+0x52>
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d638:	e134      	b.n	800d8a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2203      	movs	r2, #3
 800d63e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	88fa      	ldrh	r2, [r7, #6]
 800d652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	88fa      	ldrh	r2, [r7, #6]
 800d658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d684:	d10f      	bne.n	800d6a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b0:	2b40      	cmp	r3, #64	; 0x40
 800d6b2:	d007      	beq.n	800d6c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6cc:	d94b      	bls.n	800d766 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <HAL_SPI_Transmit+0xfa>
 800d6d6:	8afb      	ldrh	r3, [r7, #22]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d13e      	bne.n	800d75a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e0:	881a      	ldrh	r2, [r3, #0]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ec:	1c9a      	adds	r2, r3, #2
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d700:	e02b      	b.n	800d75a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d112      	bne.n	800d736 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	881a      	ldrh	r2, [r3, #0]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	1c9a      	adds	r2, r3, #2
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	3b01      	subs	r3, #1
 800d72e:	b29a      	uxth	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d734:	e011      	b.n	800d75a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d736:	f7fd f991 	bl	800aa5c <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	683a      	ldr	r2, [r7, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d803      	bhi.n	800d74e <HAL_SPI_Transmit+0x16c>
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74c:	d102      	bne.n	800d754 <HAL_SPI_Transmit+0x172>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d758:	e0a4      	b.n	800d8a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d75e:	b29b      	uxth	r3, r3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1ce      	bne.n	800d702 <HAL_SPI_Transmit+0x120>
 800d764:	e07c      	b.n	800d860 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <HAL_SPI_Transmit+0x192>
 800d76e:	8afb      	ldrh	r3, [r7, #22]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d170      	bne.n	800d856 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d778:	b29b      	uxth	r3, r3
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d912      	bls.n	800d7a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	881a      	ldrh	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	1c9a      	adds	r2, r3, #2
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d798:	b29b      	uxth	r3, r3
 800d79a:	3b02      	subs	r3, #2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d7a2:	e058      	b.n	800d856 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	330c      	adds	r3, #12
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d7ca:	e044      	b.n	800d856 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f003 0302 	and.w	r3, r3, #2
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	d12b      	bne.n	800d832 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d912      	bls.n	800d80a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	881a      	ldrh	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	1c9a      	adds	r2, r3, #2
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b02      	subs	r3, #2
 800d802:	b29a      	uxth	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d808:	e025      	b.n	800d856 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	330c      	adds	r3, #12
 800d814:	7812      	ldrb	r2, [r2, #0]
 800d816:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d826:	b29b      	uxth	r3, r3
 800d828:	3b01      	subs	r3, #1
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d830:	e011      	b.n	800d856 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d832:	f7fd f913 	bl	800aa5c <HAL_GetTick>
 800d836:	4602      	mov	r2, r0
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d803      	bhi.n	800d84a <HAL_SPI_Transmit+0x268>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d848:	d102      	bne.n	800d850 <HAL_SPI_Transmit+0x26e>
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d854:	e026      	b.n	800d8a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1b5      	bne.n	800d7cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 fd07 	bl	800e278 <SPI_EndRxTxTransaction>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2220      	movs	r2, #32
 800d874:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d87e:	2300      	movs	r3, #0
 800d880:	613b      	str	r3, [r7, #16]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	613b      	str	r3, [r7, #16]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	613b      	str	r3, [r7, #16]
 800d892:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	77fb      	strb	r3, [r7, #31]
 800d8a0:	e000      	b.n	800d8a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800d8a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d8b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b088      	sub	sp, #32
 800d8c2:	af02      	add	r7, sp, #8
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	60b9      	str	r1, [r7, #8]
 800d8c8:	603b      	str	r3, [r7, #0]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8da:	d112      	bne.n	800d902 <HAL_SPI_Receive+0x44>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10e      	bne.n	800d902 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2204      	movs	r2, #4
 800d8e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d8ec:	88fa      	ldrh	r2, [r7, #6]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 f910 	bl	800db1e <HAL_SPI_TransmitReceive>
 800d8fe:	4603      	mov	r3, r0
 800d900:	e109      	b.n	800db16 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d101      	bne.n	800d910 <HAL_SPI_Receive+0x52>
 800d90c:	2302      	movs	r3, #2
 800d90e:	e102      	b.n	800db16 <HAL_SPI_Receive+0x258>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d918:	f7fd f8a0 	bl	800aa5c <HAL_GetTick>
 800d91c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b01      	cmp	r3, #1
 800d928:	d002      	beq.n	800d930 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d92a:	2302      	movs	r3, #2
 800d92c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d92e:	e0e9      	b.n	800db04 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <HAL_SPI_Receive+0x7e>
 800d936:	88fb      	ldrh	r3, [r7, #6]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d940:	e0e0      	b.n	800db04 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2204      	movs	r2, #4
 800d946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	88fa      	ldrh	r2, [r7, #6]
 800d95a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	88fa      	ldrh	r2, [r7, #6]
 800d962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d98c:	d908      	bls.n	800d9a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	e007      	b.n	800d9b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9b8:	d10f      	bne.n	800d9da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d9d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e4:	2b40      	cmp	r3, #64	; 0x40
 800d9e6:	d007      	beq.n	800d9f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da00:	d867      	bhi.n	800dad2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da02:	e030      	b.n	800da66 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d117      	bne.n	800da42 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f103 020c 	add.w	r2, r3, #12
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da1e:	7812      	ldrb	r2, [r2, #0]
 800da20:	b2d2      	uxtb	r2, r2
 800da22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800da34:	b29b      	uxth	r3, r3
 800da36:	3b01      	subs	r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800da40:	e011      	b.n	800da66 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da42:	f7fd f80b 	bl	800aa5c <HAL_GetTick>
 800da46:	4602      	mov	r2, r0
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d803      	bhi.n	800da5a <HAL_SPI_Receive+0x19c>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da58:	d102      	bne.n	800da60 <HAL_SPI_Receive+0x1a2>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da64:	e04e      	b.n	800db04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1c8      	bne.n	800da04 <HAL_SPI_Receive+0x146>
 800da72:	e034      	b.n	800dade <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d115      	bne.n	800daae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68da      	ldr	r2, [r3, #12]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8c:	b292      	uxth	r2, r2
 800da8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da94:	1c9a      	adds	r2, r3, #2
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800daac:	e011      	b.n	800dad2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800daae:	f7fc ffd5 	bl	800aa5c <HAL_GetTick>
 800dab2:	4602      	mov	r2, r0
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d803      	bhi.n	800dac6 <HAL_SPI_Receive+0x208>
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac4:	d102      	bne.n	800dacc <HAL_SPI_Receive+0x20e>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dad0:	e018      	b.n	800db04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dad8:	b29b      	uxth	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1ca      	bne.n	800da74 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fb4c 	bl	800e180 <SPI_EndRxTransaction>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d002      	beq.n	800daf4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2220      	movs	r2, #32
 800daf2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	75fb      	strb	r3, [r7, #23]
 800db00:	e000      	b.n	800db04 <HAL_SPI_Receive+0x246>
  }

error :
 800db02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b08a      	sub	sp, #40	; 0x28
 800db22:	af00      	add	r7, sp, #0
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
 800db2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db2c:	2301      	movs	r3, #1
 800db2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d101      	bne.n	800db44 <HAL_SPI_TransmitReceive+0x26>
 800db40:	2302      	movs	r3, #2
 800db42:	e1fb      	b.n	800df3c <HAL_SPI_TransmitReceive+0x41e>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db4c:	f7fc ff86 	bl	800aa5c <HAL_GetTick>
 800db50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800db60:	887b      	ldrh	r3, [r7, #2]
 800db62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800db64:	887b      	ldrh	r3, [r7, #2]
 800db66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db68:	7efb      	ldrb	r3, [r7, #27]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d00e      	beq.n	800db8c <HAL_SPI_TransmitReceive+0x6e>
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db74:	d106      	bne.n	800db84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <HAL_SPI_TransmitReceive+0x66>
 800db7e:	7efb      	ldrb	r3, [r7, #27]
 800db80:	2b04      	cmp	r3, #4
 800db82:	d003      	beq.n	800db8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800db84:	2302      	movs	r3, #2
 800db86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800db8a:	e1cd      	b.n	800df28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d005      	beq.n	800db9e <HAL_SPI_TransmitReceive+0x80>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <HAL_SPI_TransmitReceive+0x80>
 800db98:	887b      	ldrh	r3, [r7, #2]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d103      	bne.n	800dba6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dba4:	e1c0      	b.n	800df28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	2b04      	cmp	r3, #4
 800dbb0:	d003      	beq.n	800dbba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2205      	movs	r2, #5
 800dbb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	887a      	ldrh	r2, [r7, #2]
 800dbca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	887a      	ldrh	r2, [r7, #2]
 800dbd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	887a      	ldrh	r2, [r7, #2]
 800dbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	887a      	ldrh	r2, [r7, #2]
 800dbe6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dbfc:	d802      	bhi.n	800dc04 <HAL_SPI_TransmitReceive+0xe6>
 800dbfe:	8a3b      	ldrh	r3, [r7, #16]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d908      	bls.n	800dc16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc12:	605a      	str	r2, [r3, #4]
 800dc14:	e007      	b.n	800dc26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc30:	2b40      	cmp	r3, #64	; 0x40
 800dc32:	d007      	beq.n	800dc44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc4c:	d97c      	bls.n	800dd48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d002      	beq.n	800dc5c <HAL_SPI_TransmitReceive+0x13e>
 800dc56:	8a7b      	ldrh	r3, [r7, #18]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d169      	bne.n	800dd30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	881a      	ldrh	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6c:	1c9a      	adds	r2, r3, #2
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc80:	e056      	b.n	800dd30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d11b      	bne.n	800dcc8 <HAL_SPI_TransmitReceive+0x1aa>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d016      	beq.n	800dcc8 <HAL_SPI_TransmitReceive+0x1aa>
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d113      	bne.n	800dcc8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca4:	881a      	ldrh	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	1c9a      	adds	r2, r3, #2
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d11c      	bne.n	800dd10 <HAL_SPI_TransmitReceive+0x1f2>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d016      	beq.n	800dd10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68da      	ldr	r2, [r3, #12]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcec:	b292      	uxth	r2, r2
 800dcee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf4:	1c9a      	adds	r2, r3, #2
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3b01      	subs	r3, #1
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd10:	f7fc fea4 	bl	800aa5c <HAL_GetTick>
 800dd14:	4602      	mov	r2, r0
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d807      	bhi.n	800dd30 <HAL_SPI_TransmitReceive+0x212>
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd26:	d003      	beq.n	800dd30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dd2e:	e0fb      	b.n	800df28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1a3      	bne.n	800dc82 <HAL_SPI_TransmitReceive+0x164>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d19d      	bne.n	800dc82 <HAL_SPI_TransmitReceive+0x164>
 800dd46:	e0df      	b.n	800df08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d003      	beq.n	800dd58 <HAL_SPI_TransmitReceive+0x23a>
 800dd50:	8a7b      	ldrh	r3, [r7, #18]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	f040 80cb 	bne.w	800deee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d912      	bls.n	800dd88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd66:	881a      	ldrh	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd72:	1c9a      	adds	r2, r3, #2
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	3b02      	subs	r3, #2
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd86:	e0b2      	b.n	800deee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	330c      	adds	r3, #12
 800dd92:	7812      	ldrb	r2, [r2, #0]
 800dd94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	3b01      	subs	r3, #1
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddae:	e09e      	b.n	800deee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f003 0302 	and.w	r3, r3, #2
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d134      	bne.n	800de28 <HAL_SPI_TransmitReceive+0x30a>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d02f      	beq.n	800de28 <HAL_SPI_TransmitReceive+0x30a>
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d12c      	bne.n	800de28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d912      	bls.n	800ddfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	881a      	ldrh	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde8:	1c9a      	adds	r2, r3, #2
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	3b02      	subs	r3, #2
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddfc:	e012      	b.n	800de24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	330c      	adds	r3, #12
 800de08:	7812      	ldrb	r2, [r2, #0]
 800de0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	3b01      	subs	r3, #1
 800de1e:	b29a      	uxth	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de24:	2300      	movs	r3, #0
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	2b01      	cmp	r3, #1
 800de34:	d148      	bne.n	800dec8 <HAL_SPI_TransmitReceive+0x3aa>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d042      	beq.n	800dec8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de48:	b29b      	uxth	r3, r3
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d923      	bls.n	800de96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	b292      	uxth	r2, r2
 800de5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de60:	1c9a      	adds	r2, r3, #2
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b02      	subs	r3, #2
 800de70:	b29a      	uxth	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de7e:	b29b      	uxth	r3, r3
 800de80:	2b01      	cmp	r3, #1
 800de82:	d81f      	bhi.n	800dec4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de92:	605a      	str	r2, [r3, #4]
 800de94:	e016      	b.n	800dec4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f103 020c 	add.w	r2, r3, #12
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea2:	7812      	ldrb	r2, [r2, #0]
 800dea4:	b2d2      	uxtb	r2, r2
 800dea6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dec4:	2301      	movs	r3, #1
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dec8:	f7fc fdc8 	bl	800aa5c <HAL_GetTick>
 800decc:	4602      	mov	r2, r0
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d803      	bhi.n	800dee0 <HAL_SPI_TransmitReceive+0x3c2>
 800ded8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dede:	d102      	bne.n	800dee6 <HAL_SPI_TransmitReceive+0x3c8>
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d103      	bne.n	800deee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800deec:	e01c      	b.n	800df28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800def2:	b29b      	uxth	r3, r3
 800def4:	2b00      	cmp	r3, #0
 800def6:	f47f af5b 	bne.w	800ddb0 <HAL_SPI_TransmitReceive+0x292>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df00:	b29b      	uxth	r3, r3
 800df02:	2b00      	cmp	r3, #0
 800df04:	f47f af54 	bne.w	800ddb0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f000 f9b3 	bl	800e278 <SPI_EndRxTxTransaction>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d006      	beq.n	800df26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2220      	movs	r2, #32
 800df22:	661a      	str	r2, [r3, #96]	; 0x60
 800df24:	e000      	b.n	800df28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800df26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800df38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3728      	adds	r7, #40	; 0x28
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	603b      	str	r3, [r7, #0]
 800df50:	4613      	mov	r3, r2
 800df52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800df54:	f7fc fd82 	bl	800aa5c <HAL_GetTick>
 800df58:	4602      	mov	r2, r0
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	1a9b      	subs	r3, r3, r2
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	4413      	add	r3, r2
 800df62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800df64:	f7fc fd7a 	bl	800aa5c <HAL_GetTick>
 800df68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800df6a:	4b39      	ldr	r3, [pc, #228]	; (800e050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	015b      	lsls	r3, r3, #5
 800df70:	0d1b      	lsrs	r3, r3, #20
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	fb02 f303 	mul.w	r3, r2, r3
 800df78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df7a:	e054      	b.n	800e026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df82:	d050      	beq.n	800e026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800df84:	f7fc fd6a 	bl	800aa5c <HAL_GetTick>
 800df88:	4602      	mov	r2, r0
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	69fa      	ldr	r2, [r7, #28]
 800df90:	429a      	cmp	r2, r3
 800df92:	d902      	bls.n	800df9a <SPI_WaitFlagStateUntilTimeout+0x56>
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d13d      	bne.n	800e016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfb2:	d111      	bne.n	800dfd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfbc:	d004      	beq.n	800dfc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfc6:	d107      	bne.n	800dfd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfe0:	d10f      	bne.n	800e002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2201      	movs	r2, #1
 800e006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e012:	2303      	movs	r3, #3
 800e014:	e017      	b.n	800e046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	3b01      	subs	r3, #1
 800e024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	689a      	ldr	r2, [r3, #8]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4013      	ands	r3, r2
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	429a      	cmp	r2, r3
 800e034:	bf0c      	ite	eq
 800e036:	2301      	moveq	r3, #1
 800e038:	2300      	movne	r3, #0
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	461a      	mov	r2, r3
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	429a      	cmp	r2, r3
 800e042:	d19b      	bne.n	800df7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3720      	adds	r7, #32
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	20000008 	.word	0x20000008

0800e054 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08a      	sub	sp, #40	; 0x28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
 800e060:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e062:	2300      	movs	r3, #0
 800e064:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e066:	f7fc fcf9 	bl	800aa5c <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	1a9b      	subs	r3, r3, r2
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	4413      	add	r3, r2
 800e074:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e076:	f7fc fcf1 	bl	800aa5c <HAL_GetTick>
 800e07a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	330c      	adds	r3, #12
 800e082:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e084:	4b3d      	ldr	r3, [pc, #244]	; (800e17c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	00da      	lsls	r2, r3, #3
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	0d1b      	lsrs	r3, r3, #20
 800e094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e096:	fb02 f303 	mul.w	r3, r2, r3
 800e09a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e09c:	e060      	b.n	800e160 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e0a4:	d107      	bne.n	800e0b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d104      	bne.n	800e0b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0bc:	d050      	beq.n	800e160 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e0be:	f7fc fccd 	bl	800aa5c <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d902      	bls.n	800e0d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d13d      	bne.n	800e150 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e0e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0ec:	d111      	bne.n	800e112 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0f6:	d004      	beq.n	800e102 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e100:	d107      	bne.n	800e112 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e110:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e11a:	d10f      	bne.n	800e13c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e13a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e010      	b.n	800e172 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d101      	bne.n	800e15a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	4013      	ands	r3, r2
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d196      	bne.n	800e09e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3728      	adds	r7, #40	; 0x28
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20000008 	.word	0x20000008

0800e180 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af02      	add	r7, sp, #8
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e194:	d111      	bne.n	800e1ba <SPI_EndRxTransaction+0x3a>
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e19e:	d004      	beq.n	800e1aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1a8:	d107      	bne.n	800e1ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1c2:	d112      	bne.n	800e1ea <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	2180      	movs	r1, #128	; 0x80
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff feb8 	bl	800df44 <SPI_WaitFlagStateUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d021      	beq.n	800e21e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1de:	f043 0220 	orr.w	r2, r3, #32
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e03d      	b.n	800e266 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e1ea:	4b21      	ldr	r3, [pc, #132]	; (800e270 <SPI_EndRxTransaction+0xf0>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a21      	ldr	r2, [pc, #132]	; (800e274 <SPI_EndRxTransaction+0xf4>)
 800e1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f4:	0d5b      	lsrs	r3, r3, #21
 800e1f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1fa:	fb02 f303 	mul.w	r3, r2, r3
 800e1fe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	3b01      	subs	r3, #1
 800e20a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e216:	2b80      	cmp	r3, #128	; 0x80
 800e218:	d0f2      	beq.n	800e200 <SPI_EndRxTransaction+0x80>
 800e21a:	e000      	b.n	800e21e <SPI_EndRxTransaction+0x9e>
        break;
 800e21c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e226:	d11d      	bne.n	800e264 <SPI_EndRxTransaction+0xe4>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e230:	d004      	beq.n	800e23c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e23a:	d113      	bne.n	800e264 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2200      	movs	r2, #0
 800e244:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7ff ff03 	bl	800e054 <SPI_WaitFifoStateUntilTimeout>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d007      	beq.n	800e264 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e258:	f043 0220 	orr.w	r2, r3, #32
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e260:	2303      	movs	r3, #3
 800e262:	e000      	b.n	800e266 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	20000008 	.word	0x20000008
 800e274:	165e9f81 	.word	0x165e9f81

0800e278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff fedf 	bl	800e054 <SPI_WaitFifoStateUntilTimeout>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2a0:	f043 0220 	orr.w	r2, r3, #32
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e046      	b.n	800e33a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e2ac:	4b25      	ldr	r3, [pc, #148]	; (800e344 <SPI_EndRxTxTransaction+0xcc>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a25      	ldr	r2, [pc, #148]	; (800e348 <SPI_EndRxTxTransaction+0xd0>)
 800e2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b6:	0d5b      	lsrs	r3, r3, #21
 800e2b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e2bc:	fb02 f303 	mul.w	r3, r2, r3
 800e2c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2ca:	d112      	bne.n	800e2f2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	9300      	str	r3, [sp, #0]
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2180      	movs	r1, #128	; 0x80
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff fe34 	bl	800df44 <SPI_WaitFlagStateUntilTimeout>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d016      	beq.n	800e310 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2e6:	f043 0220 	orr.w	r2, r3, #32
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e023      	b.n	800e33a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00a      	beq.n	800e30e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e308:	2b80      	cmp	r3, #128	; 0x80
 800e30a:	d0f2      	beq.n	800e2f2 <SPI_EndRxTxTransaction+0x7a>
 800e30c:	e000      	b.n	800e310 <SPI_EndRxTxTransaction+0x98>
        break;
 800e30e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2200      	movs	r2, #0
 800e318:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff fe99 	bl	800e054 <SPI_WaitFifoStateUntilTimeout>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d007      	beq.n	800e338 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e32c:	f043 0220 	orr.w	r2, r3, #32
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e334:	2303      	movs	r3, #3
 800e336:	e000      	b.n	800e33a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20000008 	.word	0x20000008
 800e348:	165e9f81 	.word	0x165e9f81

0800e34c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e049      	b.n	800e3f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7f8 fb24 	bl	80069c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2202      	movs	r2, #2
 800e37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3304      	adds	r3, #4
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f000 ffae 	bl	800f2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d001      	beq.n	800e414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e054      	b.n	800e4be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2202      	movs	r2, #2
 800e418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68da      	ldr	r2, [r3, #12]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f042 0201 	orr.w	r2, r2, #1
 800e42a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a26      	ldr	r2, [pc, #152]	; (800e4cc <HAL_TIM_Base_Start_IT+0xd0>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d022      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e43e:	d01d      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a22      	ldr	r2, [pc, #136]	; (800e4d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d018      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a21      	ldr	r2, [pc, #132]	; (800e4d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d013      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a1f      	ldr	r2, [pc, #124]	; (800e4d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d00e      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a1e      	ldr	r2, [pc, #120]	; (800e4dc <HAL_TIM_Base_Start_IT+0xe0>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d009      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a1c      	ldr	r2, [pc, #112]	; (800e4e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d004      	beq.n	800e47c <HAL_TIM_Base_Start_IT+0x80>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a1b      	ldr	r2, [pc, #108]	; (800e4e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d115      	bne.n	800e4a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	689a      	ldr	r2, [r3, #8]
 800e482:	4b19      	ldr	r3, [pc, #100]	; (800e4e8 <HAL_TIM_Base_Start_IT+0xec>)
 800e484:	4013      	ands	r3, r2
 800e486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b06      	cmp	r3, #6
 800e48c:	d015      	beq.n	800e4ba <HAL_TIM_Base_Start_IT+0xbe>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e494:	d011      	beq.n	800e4ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f042 0201 	orr.w	r2, r2, #1
 800e4a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4a6:	e008      	b.n	800e4ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f042 0201 	orr.w	r2, r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	e000      	b.n	800e4bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	40010000 	.word	0x40010000
 800e4d0:	40000400 	.word	0x40000400
 800e4d4:	40000800 	.word	0x40000800
 800e4d8:	40000c00 	.word	0x40000c00
 800e4dc:	40010400 	.word	0x40010400
 800e4e0:	40014000 	.word	0x40014000
 800e4e4:	40001800 	.word	0x40001800
 800e4e8:	00010007 	.word	0x00010007

0800e4ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e049      	b.n	800e592 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f841 	bl	800e59a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2202      	movs	r2, #2
 800e51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3304      	adds	r3, #4
 800e528:	4619      	mov	r1, r3
 800e52a:	4610      	mov	r0, r2
 800e52c:	f000 fede 	bl	800f2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e59a:	b480      	push	{r7}
 800e59c:	b083      	sub	sp, #12
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e5a2:	bf00      	nop
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
	...

0800e5b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <HAL_TIM_PWM_Start+0x24>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	bf14      	ite	ne
 800e5cc:	2301      	movne	r3, #1
 800e5ce:	2300      	moveq	r3, #0
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	e03c      	b.n	800e64e <HAL_TIM_PWM_Start+0x9e>
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	2b04      	cmp	r3, #4
 800e5d8:	d109      	bne.n	800e5ee <HAL_TIM_PWM_Start+0x3e>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	bf14      	ite	ne
 800e5e6:	2301      	movne	r3, #1
 800e5e8:	2300      	moveq	r3, #0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	e02f      	b.n	800e64e <HAL_TIM_PWM_Start+0x9e>
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d109      	bne.n	800e608 <HAL_TIM_PWM_Start+0x58>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	bf14      	ite	ne
 800e600:	2301      	movne	r3, #1
 800e602:	2300      	moveq	r3, #0
 800e604:	b2db      	uxtb	r3, r3
 800e606:	e022      	b.n	800e64e <HAL_TIM_PWM_Start+0x9e>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b0c      	cmp	r3, #12
 800e60c:	d109      	bne.n	800e622 <HAL_TIM_PWM_Start+0x72>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b01      	cmp	r3, #1
 800e618:	bf14      	ite	ne
 800e61a:	2301      	movne	r3, #1
 800e61c:	2300      	moveq	r3, #0
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	e015      	b.n	800e64e <HAL_TIM_PWM_Start+0x9e>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2b10      	cmp	r3, #16
 800e626:	d109      	bne.n	800e63c <HAL_TIM_PWM_Start+0x8c>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b01      	cmp	r3, #1
 800e632:	bf14      	ite	ne
 800e634:	2301      	movne	r3, #1
 800e636:	2300      	moveq	r3, #0
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	e008      	b.n	800e64e <HAL_TIM_PWM_Start+0x9e>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b01      	cmp	r3, #1
 800e646:	bf14      	ite	ne
 800e648:	2301      	movne	r3, #1
 800e64a:	2300      	moveq	r3, #0
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e092      	b.n	800e77c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <HAL_TIM_PWM_Start+0xb6>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2202      	movs	r2, #2
 800e660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e664:	e023      	b.n	800e6ae <HAL_TIM_PWM_Start+0xfe>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d104      	bne.n	800e676 <HAL_TIM_PWM_Start+0xc6>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2202      	movs	r2, #2
 800e670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e674:	e01b      	b.n	800e6ae <HAL_TIM_PWM_Start+0xfe>
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b08      	cmp	r3, #8
 800e67a:	d104      	bne.n	800e686 <HAL_TIM_PWM_Start+0xd6>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e684:	e013      	b.n	800e6ae <HAL_TIM_PWM_Start+0xfe>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b0c      	cmp	r3, #12
 800e68a:	d104      	bne.n	800e696 <HAL_TIM_PWM_Start+0xe6>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2202      	movs	r2, #2
 800e690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e694:	e00b      	b.n	800e6ae <HAL_TIM_PWM_Start+0xfe>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b10      	cmp	r3, #16
 800e69a:	d104      	bne.n	800e6a6 <HAL_TIM_PWM_Start+0xf6>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2202      	movs	r2, #2
 800e6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6a4:	e003      	b.n	800e6ae <HAL_TIM_PWM_Start+0xfe>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	6839      	ldr	r1, [r7, #0]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f001 fada 	bl	800fc70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a30      	ldr	r2, [pc, #192]	; (800e784 <HAL_TIM_PWM_Start+0x1d4>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d004      	beq.n	800e6d0 <HAL_TIM_PWM_Start+0x120>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a2f      	ldr	r2, [pc, #188]	; (800e788 <HAL_TIM_PWM_Start+0x1d8>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d101      	bne.n	800e6d4 <HAL_TIM_PWM_Start+0x124>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e000      	b.n	800e6d6 <HAL_TIM_PWM_Start+0x126>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d007      	beq.n	800e6ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e6e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a25      	ldr	r2, [pc, #148]	; (800e784 <HAL_TIM_PWM_Start+0x1d4>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d022      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6fc:	d01d      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a22      	ldr	r2, [pc, #136]	; (800e78c <HAL_TIM_PWM_Start+0x1dc>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d018      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a20      	ldr	r2, [pc, #128]	; (800e790 <HAL_TIM_PWM_Start+0x1e0>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d013      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a1f      	ldr	r2, [pc, #124]	; (800e794 <HAL_TIM_PWM_Start+0x1e4>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d00e      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a19      	ldr	r2, [pc, #100]	; (800e788 <HAL_TIM_PWM_Start+0x1d8>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d009      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a1b      	ldr	r2, [pc, #108]	; (800e798 <HAL_TIM_PWM_Start+0x1e8>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d004      	beq.n	800e73a <HAL_TIM_PWM_Start+0x18a>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a19      	ldr	r2, [pc, #100]	; (800e79c <HAL_TIM_PWM_Start+0x1ec>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d115      	bne.n	800e766 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	4b17      	ldr	r3, [pc, #92]	; (800e7a0 <HAL_TIM_PWM_Start+0x1f0>)
 800e742:	4013      	ands	r3, r2
 800e744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b06      	cmp	r3, #6
 800e74a:	d015      	beq.n	800e778 <HAL_TIM_PWM_Start+0x1c8>
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e752:	d011      	beq.n	800e778 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f042 0201 	orr.w	r2, r2, #1
 800e762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e764:	e008      	b.n	800e778 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f042 0201 	orr.w	r2, r2, #1
 800e774:	601a      	str	r2, [r3, #0]
 800e776:	e000      	b.n	800e77a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	40010000 	.word	0x40010000
 800e788:	40010400 	.word	0x40010400
 800e78c:	40000400 	.word	0x40000400
 800e790:	40000800 	.word	0x40000800
 800e794:	40000c00 	.word	0x40000c00
 800e798:	40014000 	.word	0x40014000
 800e79c:	40001800 	.word	0x40001800
 800e7a0:	00010007 	.word	0x00010007

0800e7a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e049      	b.n	800e84a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d106      	bne.n	800e7d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7f8 f918 	bl	8006a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	f000 fd82 	bl	800f2ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e85e:	2300      	movs	r3, #0
 800e860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d104      	bne.n	800e872 <HAL_TIM_IC_Start_IT+0x1e>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	e023      	b.n	800e8ba <HAL_TIM_IC_Start_IT+0x66>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b04      	cmp	r3, #4
 800e876:	d104      	bne.n	800e882 <HAL_TIM_IC_Start_IT+0x2e>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	e01b      	b.n	800e8ba <HAL_TIM_IC_Start_IT+0x66>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b08      	cmp	r3, #8
 800e886:	d104      	bne.n	800e892 <HAL_TIM_IC_Start_IT+0x3e>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	e013      	b.n	800e8ba <HAL_TIM_IC_Start_IT+0x66>
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b0c      	cmp	r3, #12
 800e896:	d104      	bne.n	800e8a2 <HAL_TIM_IC_Start_IT+0x4e>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	e00b      	b.n	800e8ba <HAL_TIM_IC_Start_IT+0x66>
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b10      	cmp	r3, #16
 800e8a6:	d104      	bne.n	800e8b2 <HAL_TIM_IC_Start_IT+0x5e>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	e003      	b.n	800e8ba <HAL_TIM_IC_Start_IT+0x66>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <HAL_TIM_IC_Start_IT+0x78>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	e013      	b.n	800e8f4 <HAL_TIM_IC_Start_IT+0xa0>
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	2b04      	cmp	r3, #4
 800e8d0:	d104      	bne.n	800e8dc <HAL_TIM_IC_Start_IT+0x88>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	e00b      	b.n	800e8f4 <HAL_TIM_IC_Start_IT+0xa0>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b08      	cmp	r3, #8
 800e8e0:	d104      	bne.n	800e8ec <HAL_TIM_IC_Start_IT+0x98>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	e003      	b.n	800e8f4 <HAL_TIM_IC_Start_IT+0xa0>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e8f6:	7bbb      	ldrb	r3, [r7, #14]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d102      	bne.n	800e902 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e8fc:	7b7b      	ldrb	r3, [r7, #13]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d001      	beq.n	800e906 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e0e2      	b.n	800eacc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d104      	bne.n	800e916 <HAL_TIM_IC_Start_IT+0xc2>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2202      	movs	r2, #2
 800e910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e914:	e023      	b.n	800e95e <HAL_TIM_IC_Start_IT+0x10a>
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d104      	bne.n	800e926 <HAL_TIM_IC_Start_IT+0xd2>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2202      	movs	r2, #2
 800e920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e924:	e01b      	b.n	800e95e <HAL_TIM_IC_Start_IT+0x10a>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	2b08      	cmp	r3, #8
 800e92a:	d104      	bne.n	800e936 <HAL_TIM_IC_Start_IT+0xe2>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e934:	e013      	b.n	800e95e <HAL_TIM_IC_Start_IT+0x10a>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b0c      	cmp	r3, #12
 800e93a:	d104      	bne.n	800e946 <HAL_TIM_IC_Start_IT+0xf2>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2202      	movs	r2, #2
 800e940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e944:	e00b      	b.n	800e95e <HAL_TIM_IC_Start_IT+0x10a>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	2b10      	cmp	r3, #16
 800e94a:	d104      	bne.n	800e956 <HAL_TIM_IC_Start_IT+0x102>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e954:	e003      	b.n	800e95e <HAL_TIM_IC_Start_IT+0x10a>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2202      	movs	r2, #2
 800e95a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d104      	bne.n	800e96e <HAL_TIM_IC_Start_IT+0x11a>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e96c:	e013      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x142>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b04      	cmp	r3, #4
 800e972:	d104      	bne.n	800e97e <HAL_TIM_IC_Start_IT+0x12a>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e97c:	e00b      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x142>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b08      	cmp	r3, #8
 800e982:	d104      	bne.n	800e98e <HAL_TIM_IC_Start_IT+0x13a>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e98c:	e003      	b.n	800e996 <HAL_TIM_IC_Start_IT+0x142>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2202      	movs	r2, #2
 800e992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2b0c      	cmp	r3, #12
 800e99a:	d841      	bhi.n	800ea20 <HAL_TIM_IC_Start_IT+0x1cc>
 800e99c:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <HAL_TIM_IC_Start_IT+0x150>)
 800e99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a2:	bf00      	nop
 800e9a4:	0800e9d9 	.word	0x0800e9d9
 800e9a8:	0800ea21 	.word	0x0800ea21
 800e9ac:	0800ea21 	.word	0x0800ea21
 800e9b0:	0800ea21 	.word	0x0800ea21
 800e9b4:	0800e9eb 	.word	0x0800e9eb
 800e9b8:	0800ea21 	.word	0x0800ea21
 800e9bc:	0800ea21 	.word	0x0800ea21
 800e9c0:	0800ea21 	.word	0x0800ea21
 800e9c4:	0800e9fd 	.word	0x0800e9fd
 800e9c8:	0800ea21 	.word	0x0800ea21
 800e9cc:	0800ea21 	.word	0x0800ea21
 800e9d0:	0800ea21 	.word	0x0800ea21
 800e9d4:	0800ea0f 	.word	0x0800ea0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0202 	orr.w	r2, r2, #2
 800e9e6:	60da      	str	r2, [r3, #12]
      break;
 800e9e8:	e01d      	b.n	800ea26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f042 0204 	orr.w	r2, r2, #4
 800e9f8:	60da      	str	r2, [r3, #12]
      break;
 800e9fa:	e014      	b.n	800ea26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68da      	ldr	r2, [r3, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f042 0208 	orr.w	r2, r2, #8
 800ea0a:	60da      	str	r2, [r3, #12]
      break;
 800ea0c:	e00b      	b.n	800ea26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68da      	ldr	r2, [r3, #12]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f042 0210 	orr.w	r2, r2, #16
 800ea1c:	60da      	str	r2, [r3, #12]
      break;
 800ea1e:	e002      	b.n	800ea26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	73fb      	strb	r3, [r7, #15]
      break;
 800ea24:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d14e      	bne.n	800eaca <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2201      	movs	r2, #1
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f001 f91b 	bl	800fc70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4a25      	ldr	r2, [pc, #148]	; (800ead4 <HAL_TIM_IC_Start_IT+0x280>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d022      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea4c:	d01d      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a21      	ldr	r2, [pc, #132]	; (800ead8 <HAL_TIM_IC_Start_IT+0x284>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d018      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a1f      	ldr	r2, [pc, #124]	; (800eadc <HAL_TIM_IC_Start_IT+0x288>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d013      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <HAL_TIM_IC_Start_IT+0x28c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d00e      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a1c      	ldr	r2, [pc, #112]	; (800eae4 <HAL_TIM_IC_Start_IT+0x290>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d009      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a1b      	ldr	r2, [pc, #108]	; (800eae8 <HAL_TIM_IC_Start_IT+0x294>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d004      	beq.n	800ea8a <HAL_TIM_IC_Start_IT+0x236>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a19      	ldr	r2, [pc, #100]	; (800eaec <HAL_TIM_IC_Start_IT+0x298>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d115      	bne.n	800eab6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	689a      	ldr	r2, [r3, #8]
 800ea90:	4b17      	ldr	r3, [pc, #92]	; (800eaf0 <HAL_TIM_IC_Start_IT+0x29c>)
 800ea92:	4013      	ands	r3, r2
 800ea94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2b06      	cmp	r3, #6
 800ea9a:	d015      	beq.n	800eac8 <HAL_TIM_IC_Start_IT+0x274>
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa2:	d011      	beq.n	800eac8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f042 0201 	orr.w	r2, r2, #1
 800eab2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eab4:	e008      	b.n	800eac8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f042 0201 	orr.w	r2, r2, #1
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	e000      	b.n	800eaca <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eac8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	40010000 	.word	0x40010000
 800ead8:	40000400 	.word	0x40000400
 800eadc:	40000800 	.word	0x40000800
 800eae0:	40000c00 	.word	0x40000c00
 800eae4:	40010400 	.word	0x40010400
 800eae8:	40014000 	.word	0x40014000
 800eaec:	40001800 	.word	0x40001800
 800eaf0:	00010007 	.word	0x00010007

0800eaf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	f003 0302 	and.w	r3, r3, #2
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d122      	bne.n	800eb50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	f003 0302 	and.w	r3, r3, #2
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d11b      	bne.n	800eb50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f06f 0202 	mvn.w	r2, #2
 800eb20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2201      	movs	r2, #1
 800eb26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	f003 0303 	and.w	r3, r3, #3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7f5 fbd8 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800eb3c:	e005      	b.n	800eb4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 fbb6 	bl	800f2b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fbbd 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	691b      	ldr	r3, [r3, #16]
 800eb56:	f003 0304 	and.w	r3, r3, #4
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d122      	bne.n	800eba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	f003 0304 	and.w	r3, r3, #4
 800eb68:	2b04      	cmp	r3, #4
 800eb6a:	d11b      	bne.n	800eba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f06f 0204 	mvn.w	r2, #4
 800eb74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2202      	movs	r2, #2
 800eb7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7f5 fbae 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800eb90:	e005      	b.n	800eb9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fb8c 	bl	800f2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 fb93 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	f003 0308 	and.w	r3, r3, #8
 800ebae:	2b08      	cmp	r3, #8
 800ebb0:	d122      	bne.n	800ebf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	f003 0308 	and.w	r3, r3, #8
 800ebbc:	2b08      	cmp	r3, #8
 800ebbe:	d11b      	bne.n	800ebf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f06f 0208 	mvn.w	r2, #8
 800ebc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2204      	movs	r2, #4
 800ebce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	f003 0303 	and.w	r3, r3, #3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d003      	beq.n	800ebe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7f5 fb84 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800ebe4:	e005      	b.n	800ebf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fb62 	bl	800f2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 fb69 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	f003 0310 	and.w	r3, r3, #16
 800ec02:	2b10      	cmp	r3, #16
 800ec04:	d122      	bne.n	800ec4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	f003 0310 	and.w	r3, r3, #16
 800ec10:	2b10      	cmp	r3, #16
 800ec12:	d11b      	bne.n	800ec4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f06f 0210 	mvn.w	r2, #16
 800ec1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2208      	movs	r2, #8
 800ec22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	69db      	ldr	r3, [r3, #28]
 800ec2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7f5 fb5a 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800ec38:	e005      	b.n	800ec46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fb38 	bl	800f2b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fb3f 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d10e      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d107      	bne.n	800ec78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f06f 0201 	mvn.w	r2, #1
 800ec70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7f6 f923 	bl	8004ebe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec82:	2b80      	cmp	r3, #128	; 0x80
 800ec84:	d10e      	bne.n	800eca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec90:	2b80      	cmp	r3, #128	; 0x80
 800ec92:	d107      	bne.n	800eca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f001 f922 	bl	800fee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecb2:	d10e      	bne.n	800ecd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecbe:	2b80      	cmp	r3, #128	; 0x80
 800ecc0:	d107      	bne.n	800ecd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ecca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f001 f915 	bl	800fefc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	691b      	ldr	r3, [r3, #16]
 800ecd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecdc:	2b40      	cmp	r3, #64	; 0x40
 800ecde:	d10e      	bne.n	800ecfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecea:	2b40      	cmp	r3, #64	; 0x40
 800ecec:	d107      	bne.n	800ecfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ecf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 faed 	bl	800f2d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	f003 0320 	and.w	r3, r3, #32
 800ed08:	2b20      	cmp	r3, #32
 800ed0a:	d10e      	bne.n	800ed2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	f003 0320 	and.w	r3, r3, #32
 800ed16:	2b20      	cmp	r3, #32
 800ed18:	d107      	bne.n	800ed2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f06f 0220 	mvn.w	r2, #32
 800ed22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f001 f8d5 	bl	800fed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed2a:	bf00      	nop
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b086      	sub	sp, #24
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	60f8      	str	r0, [r7, #12]
 800ed3a:	60b9      	str	r1, [r7, #8]
 800ed3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d101      	bne.n	800ed50 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	e088      	b.n	800ee62 <HAL_TIM_IC_ConfigChannel+0x130>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d11b      	bne.n	800ed96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ed6e:	f000 fdbb 	bl	800f8e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	699a      	ldr	r2, [r3, #24]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f022 020c 	bic.w	r2, r2, #12
 800ed80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6999      	ldr	r1, [r3, #24]
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	430a      	orrs	r2, r1
 800ed92:	619a      	str	r2, [r3, #24]
 800ed94:	e060      	b.n	800ee58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b04      	cmp	r3, #4
 800ed9a:	d11c      	bne.n	800edd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800edac:	f000 fe3f 	bl	800fa2e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	699a      	ldr	r2, [r3, #24]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800edbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6999      	ldr	r1, [r3, #24]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	021a      	lsls	r2, r3, #8
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	430a      	orrs	r2, r1
 800edd2:	619a      	str	r2, [r3, #24]
 800edd4:	e040      	b.n	800ee58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b08      	cmp	r3, #8
 800edda:	d11b      	bne.n	800ee14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800edec:	f000 fe8c 	bl	800fb08 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	69da      	ldr	r2, [r3, #28]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 020c 	bic.w	r2, r2, #12
 800edfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	69d9      	ldr	r1, [r3, #28]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	689a      	ldr	r2, [r3, #8]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	61da      	str	r2, [r3, #28]
 800ee12:	e021      	b.n	800ee58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b0c      	cmp	r3, #12
 800ee18:	d11c      	bne.n	800ee54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ee2a:	f000 fea9 	bl	800fb80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	69da      	ldr	r2, [r3, #28]
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ee3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	69d9      	ldr	r1, [r3, #28]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	021a      	lsls	r2, r3, #8
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	61da      	str	r2, [r3, #28]
 800ee52:	e001      	b.n	800ee58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d101      	bne.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee86:	2302      	movs	r3, #2
 800ee88:	e0ff      	b.n	800f08a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b14      	cmp	r3, #20
 800ee96:	f200 80f0 	bhi.w	800f07a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee9a:	a201      	add	r2, pc, #4	; (adr r2, 800eea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea0:	0800eef5 	.word	0x0800eef5
 800eea4:	0800f07b 	.word	0x0800f07b
 800eea8:	0800f07b 	.word	0x0800f07b
 800eeac:	0800f07b 	.word	0x0800f07b
 800eeb0:	0800ef35 	.word	0x0800ef35
 800eeb4:	0800f07b 	.word	0x0800f07b
 800eeb8:	0800f07b 	.word	0x0800f07b
 800eebc:	0800f07b 	.word	0x0800f07b
 800eec0:	0800ef77 	.word	0x0800ef77
 800eec4:	0800f07b 	.word	0x0800f07b
 800eec8:	0800f07b 	.word	0x0800f07b
 800eecc:	0800f07b 	.word	0x0800f07b
 800eed0:	0800efb7 	.word	0x0800efb7
 800eed4:	0800f07b 	.word	0x0800f07b
 800eed8:	0800f07b 	.word	0x0800f07b
 800eedc:	0800f07b 	.word	0x0800f07b
 800eee0:	0800eff9 	.word	0x0800eff9
 800eee4:	0800f07b 	.word	0x0800f07b
 800eee8:	0800f07b 	.word	0x0800f07b
 800eeec:	0800f07b 	.word	0x0800f07b
 800eef0:	0800f039 	.word	0x0800f039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68b9      	ldr	r1, [r7, #8]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 fa96 	bl	800f42c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	699a      	ldr	r2, [r3, #24]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f042 0208 	orr.w	r2, r2, #8
 800ef0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	699a      	ldr	r2, [r3, #24]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f022 0204 	bic.w	r2, r2, #4
 800ef1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6999      	ldr	r1, [r3, #24]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	691a      	ldr	r2, [r3, #16]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	430a      	orrs	r2, r1
 800ef30:	619a      	str	r2, [r3, #24]
      break;
 800ef32:	e0a5      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fae8 	bl	800f510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	699a      	ldr	r2, [r3, #24]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699a      	ldr	r2, [r3, #24]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6999      	ldr	r1, [r3, #24]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	021a      	lsls	r2, r3, #8
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	430a      	orrs	r2, r1
 800ef72:	619a      	str	r2, [r3, #24]
      break;
 800ef74:	e084      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68b9      	ldr	r1, [r7, #8]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 fb3f 	bl	800f600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	69da      	ldr	r2, [r3, #28]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f042 0208 	orr.w	r2, r2, #8
 800ef90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	69da      	ldr	r2, [r3, #28]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f022 0204 	bic.w	r2, r2, #4
 800efa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	69d9      	ldr	r1, [r3, #28]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	691a      	ldr	r2, [r3, #16]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	430a      	orrs	r2, r1
 800efb2:	61da      	str	r2, [r3, #28]
      break;
 800efb4:	e064      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68b9      	ldr	r1, [r7, #8]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fb95 	bl	800f6ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	69da      	ldr	r2, [r3, #28]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	69da      	ldr	r2, [r3, #28]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	69d9      	ldr	r1, [r3, #28]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	691b      	ldr	r3, [r3, #16]
 800efec:	021a      	lsls	r2, r3, #8
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	430a      	orrs	r2, r1
 800eff4:	61da      	str	r2, [r3, #28]
      break;
 800eff6:	e043      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68b9      	ldr	r1, [r7, #8]
 800effe:	4618      	mov	r0, r3
 800f000:	f000 fbcc 	bl	800f79c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f042 0208 	orr.w	r2, r2, #8
 800f012:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f022 0204 	bic.w	r2, r2, #4
 800f022:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	691a      	ldr	r2, [r3, #16]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	430a      	orrs	r2, r1
 800f034:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f036:	e023      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68b9      	ldr	r1, [r7, #8]
 800f03e:	4618      	mov	r0, r3
 800f040:	f000 fbfe 	bl	800f840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	021a      	lsls	r2, r3, #8
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	430a      	orrs	r2, r1
 800f076:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f078:	e002      	b.n	800f080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f07a:	2301      	movs	r3, #1
 800f07c:	75fb      	strb	r3, [r7, #23]
      break;
 800f07e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f088:	7dfb      	ldrb	r3, [r7, #23]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop

0800f094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d101      	bne.n	800f0b0 <HAL_TIM_ConfigClockSource+0x1c>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e0b4      	b.n	800f21a <HAL_TIM_ConfigClockSource+0x186>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	4b56      	ldr	r3, [pc, #344]	; (800f224 <HAL_TIM_ConfigClockSource+0x190>)
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0e8:	d03e      	beq.n	800f168 <HAL_TIM_ConfigClockSource+0xd4>
 800f0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0ee:	f200 8087 	bhi.w	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0f6:	f000 8086 	beq.w	800f206 <HAL_TIM_ConfigClockSource+0x172>
 800f0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0fe:	d87f      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f100:	2b70      	cmp	r3, #112	; 0x70
 800f102:	d01a      	beq.n	800f13a <HAL_TIM_ConfigClockSource+0xa6>
 800f104:	2b70      	cmp	r3, #112	; 0x70
 800f106:	d87b      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f108:	2b60      	cmp	r3, #96	; 0x60
 800f10a:	d050      	beq.n	800f1ae <HAL_TIM_ConfigClockSource+0x11a>
 800f10c:	2b60      	cmp	r3, #96	; 0x60
 800f10e:	d877      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f110:	2b50      	cmp	r3, #80	; 0x50
 800f112:	d03c      	beq.n	800f18e <HAL_TIM_ConfigClockSource+0xfa>
 800f114:	2b50      	cmp	r3, #80	; 0x50
 800f116:	d873      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f118:	2b40      	cmp	r3, #64	; 0x40
 800f11a:	d058      	beq.n	800f1ce <HAL_TIM_ConfigClockSource+0x13a>
 800f11c:	2b40      	cmp	r3, #64	; 0x40
 800f11e:	d86f      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f120:	2b30      	cmp	r3, #48	; 0x30
 800f122:	d064      	beq.n	800f1ee <HAL_TIM_ConfigClockSource+0x15a>
 800f124:	2b30      	cmp	r3, #48	; 0x30
 800f126:	d86b      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f128:	2b20      	cmp	r3, #32
 800f12a:	d060      	beq.n	800f1ee <HAL_TIM_ConfigClockSource+0x15a>
 800f12c:	2b20      	cmp	r3, #32
 800f12e:	d867      	bhi.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
 800f130:	2b00      	cmp	r3, #0
 800f132:	d05c      	beq.n	800f1ee <HAL_TIM_ConfigClockSource+0x15a>
 800f134:	2b10      	cmp	r3, #16
 800f136:	d05a      	beq.n	800f1ee <HAL_TIM_ConfigClockSource+0x15a>
 800f138:	e062      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f14a:	f000 fd71 	bl	800fc30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f15c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	609a      	str	r2, [r3, #8]
      break;
 800f166:	e04f      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f178:	f000 fd5a 	bl	800fc30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689a      	ldr	r2, [r3, #8]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f18a:	609a      	str	r2, [r3, #8]
      break;
 800f18c:	e03c      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f19a:	461a      	mov	r2, r3
 800f19c:	f000 fc18 	bl	800f9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2150      	movs	r1, #80	; 0x50
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 fd27 	bl	800fbfa <TIM_ITRx_SetConfig>
      break;
 800f1ac:	e02c      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	f000 fc74 	bl	800faa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2160      	movs	r1, #96	; 0x60
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 fd17 	bl	800fbfa <TIM_ITRx_SetConfig>
      break;
 800f1cc:	e01c      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1da:	461a      	mov	r2, r3
 800f1dc:	f000 fbf8 	bl	800f9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2140      	movs	r1, #64	; 0x40
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fd07 	bl	800fbfa <TIM_ITRx_SetConfig>
      break;
 800f1ec:	e00c      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	f000 fcfe 	bl	800fbfa <TIM_ITRx_SetConfig>
      break;
 800f1fe:	e003      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f200:	2301      	movs	r3, #1
 800f202:	73fb      	strb	r3, [r7, #15]
      break;
 800f204:	e000      	b.n	800f208 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f218:	7bfb      	ldrb	r3, [r7, #15]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	fffeff88 	.word	0xfffeff88

0800f228 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800f232:	2300      	movs	r3, #0
 800f234:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b0c      	cmp	r3, #12
 800f23a:	d831      	bhi.n	800f2a0 <HAL_TIM_ReadCapturedValue+0x78>
 800f23c:	a201      	add	r2, pc, #4	; (adr r2, 800f244 <HAL_TIM_ReadCapturedValue+0x1c>)
 800f23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f242:	bf00      	nop
 800f244:	0800f279 	.word	0x0800f279
 800f248:	0800f2a1 	.word	0x0800f2a1
 800f24c:	0800f2a1 	.word	0x0800f2a1
 800f250:	0800f2a1 	.word	0x0800f2a1
 800f254:	0800f283 	.word	0x0800f283
 800f258:	0800f2a1 	.word	0x0800f2a1
 800f25c:	0800f2a1 	.word	0x0800f2a1
 800f260:	0800f2a1 	.word	0x0800f2a1
 800f264:	0800f28d 	.word	0x0800f28d
 800f268:	0800f2a1 	.word	0x0800f2a1
 800f26c:	0800f2a1 	.word	0x0800f2a1
 800f270:	0800f2a1 	.word	0x0800f2a1
 800f274:	0800f297 	.word	0x0800f297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f27e:	60fb      	str	r3, [r7, #12]

      break;
 800f280:	e00f      	b.n	800f2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f288:	60fb      	str	r3, [r7, #12]

      break;
 800f28a:	e00a      	b.n	800f2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f292:	60fb      	str	r3, [r7, #12]

      break;
 800f294:	e005      	b.n	800f2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f29c:	60fb      	str	r3, [r7, #12]

      break;
 800f29e:	e000      	b.n	800f2a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800f2a0:	bf00      	nop
  }

  return tmpreg;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3714      	adds	r7, #20
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a40      	ldr	r2, [pc, #256]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d013      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f30a:	d00f      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a3d      	ldr	r2, [pc, #244]	; (800f404 <TIM_Base_SetConfig+0x118>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d00b      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a3c      	ldr	r2, [pc, #240]	; (800f408 <TIM_Base_SetConfig+0x11c>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d007      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a3b      	ldr	r2, [pc, #236]	; (800f40c <TIM_Base_SetConfig+0x120>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d003      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a3a      	ldr	r2, [pc, #232]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d108      	bne.n	800f33e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a2f      	ldr	r2, [pc, #188]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d02b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f34c:	d027      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a2c      	ldr	r2, [pc, #176]	; (800f404 <TIM_Base_SetConfig+0x118>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d023      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a2b      	ldr	r2, [pc, #172]	; (800f408 <TIM_Base_SetConfig+0x11c>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d01f      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a2a      	ldr	r2, [pc, #168]	; (800f40c <TIM_Base_SetConfig+0x120>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d01b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a29      	ldr	r2, [pc, #164]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d017      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a28      	ldr	r2, [pc, #160]	; (800f414 <TIM_Base_SetConfig+0x128>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d013      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a27      	ldr	r2, [pc, #156]	; (800f418 <TIM_Base_SetConfig+0x12c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d00f      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a26      	ldr	r2, [pc, #152]	; (800f41c <TIM_Base_SetConfig+0x130>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d00b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a25      	ldr	r2, [pc, #148]	; (800f420 <TIM_Base_SetConfig+0x134>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d007      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a24      	ldr	r2, [pc, #144]	; (800f424 <TIM_Base_SetConfig+0x138>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d003      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a23      	ldr	r2, [pc, #140]	; (800f428 <TIM_Base_SetConfig+0x13c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d108      	bne.n	800f3b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	689a      	ldr	r2, [r3, #8]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a0a      	ldr	r2, [pc, #40]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d003      	beq.n	800f3e4 <TIM_Base_SetConfig+0xf8>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a0c      	ldr	r2, [pc, #48]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d103      	bne.n	800f3ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	691a      	ldr	r2, [r3, #16]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	615a      	str	r2, [r3, #20]
}
 800f3f2:	bf00      	nop
 800f3f4:	3714      	adds	r7, #20
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	40010000 	.word	0x40010000
 800f404:	40000400 	.word	0x40000400
 800f408:	40000800 	.word	0x40000800
 800f40c:	40000c00 	.word	0x40000c00
 800f410:	40010400 	.word	0x40010400
 800f414:	40014000 	.word	0x40014000
 800f418:	40014400 	.word	0x40014400
 800f41c:	40014800 	.word	0x40014800
 800f420:	40001800 	.word	0x40001800
 800f424:	40001c00 	.word	0x40001c00
 800f428:	40002000 	.word	0x40002000

0800f42c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	f023 0201 	bic.w	r2, r3, #1
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <TIM_OC1_SetConfig+0xd8>)
 800f458:	4013      	ands	r3, r2
 800f45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f023 0303 	bic.w	r3, r3, #3
 800f462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f023 0302 	bic.w	r3, r3, #2
 800f474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a21      	ldr	r2, [pc, #132]	; (800f508 <TIM_OC1_SetConfig+0xdc>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d003      	beq.n	800f490 <TIM_OC1_SetConfig+0x64>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a20      	ldr	r2, [pc, #128]	; (800f50c <TIM_OC1_SetConfig+0xe0>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d10c      	bne.n	800f4aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f023 0308 	bic.w	r3, r3, #8
 800f496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	f023 0304 	bic.w	r3, r3, #4
 800f4a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a16      	ldr	r2, [pc, #88]	; (800f508 <TIM_OC1_SetConfig+0xdc>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d003      	beq.n	800f4ba <TIM_OC1_SetConfig+0x8e>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a15      	ldr	r2, [pc, #84]	; (800f50c <TIM_OC1_SetConfig+0xe0>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d111      	bne.n	800f4de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	621a      	str	r2, [r3, #32]
}
 800f4f8:	bf00      	nop
 800f4fa:	371c      	adds	r7, #28
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	fffeff8f 	.word	0xfffeff8f
 800f508:	40010000 	.word	0x40010000
 800f50c:	40010400 	.word	0x40010400

0800f510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f510:	b480      	push	{r7}
 800f512:	b087      	sub	sp, #28
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a1b      	ldr	r3, [r3, #32]
 800f51e:	f023 0210 	bic.w	r2, r3, #16
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	699b      	ldr	r3, [r3, #24]
 800f536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	4b2e      	ldr	r3, [pc, #184]	; (800f5f4 <TIM_OC2_SetConfig+0xe4>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	021b      	lsls	r3, r3, #8
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	4313      	orrs	r3, r2
 800f552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	f023 0320 	bic.w	r3, r3, #32
 800f55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	011b      	lsls	r3, r3, #4
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	4313      	orrs	r3, r2
 800f566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a23      	ldr	r2, [pc, #140]	; (800f5f8 <TIM_OC2_SetConfig+0xe8>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d003      	beq.n	800f578 <TIM_OC2_SetConfig+0x68>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a22      	ldr	r2, [pc, #136]	; (800f5fc <TIM_OC2_SetConfig+0xec>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d10d      	bne.n	800f594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	011b      	lsls	r3, r3, #4
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	4313      	orrs	r3, r2
 800f58a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a18      	ldr	r2, [pc, #96]	; (800f5f8 <TIM_OC2_SetConfig+0xe8>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d003      	beq.n	800f5a4 <TIM_OC2_SetConfig+0x94>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a17      	ldr	r2, [pc, #92]	; (800f5fc <TIM_OC2_SetConfig+0xec>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d113      	bne.n	800f5cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	699b      	ldr	r3, [r3, #24]
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	693a      	ldr	r2, [r7, #16]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68fa      	ldr	r2, [r7, #12]
 800f5d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	697a      	ldr	r2, [r7, #20]
 800f5e4:	621a      	str	r2, [r3, #32]
}
 800f5e6:	bf00      	nop
 800f5e8:	371c      	adds	r7, #28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	feff8fff 	.word	0xfeff8fff
 800f5f8:	40010000 	.word	0x40010000
 800f5fc:	40010400 	.word	0x40010400

0800f600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f600:	b480      	push	{r7}
 800f602:	b087      	sub	sp, #28
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	69db      	ldr	r3, [r3, #28]
 800f626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4b2d      	ldr	r3, [pc, #180]	; (800f6e0 <TIM_OC3_SetConfig+0xe0>)
 800f62c:	4013      	ands	r3, r2
 800f62e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f023 0303 	bic.w	r3, r3, #3
 800f636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	021b      	lsls	r3, r3, #8
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	4313      	orrs	r3, r2
 800f654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a22      	ldr	r2, [pc, #136]	; (800f6e4 <TIM_OC3_SetConfig+0xe4>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d003      	beq.n	800f666 <TIM_OC3_SetConfig+0x66>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a21      	ldr	r2, [pc, #132]	; (800f6e8 <TIM_OC3_SetConfig+0xe8>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d10d      	bne.n	800f682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f66c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	021b      	lsls	r3, r3, #8
 800f674:	697a      	ldr	r2, [r7, #20]
 800f676:	4313      	orrs	r3, r2
 800f678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a17      	ldr	r2, [pc, #92]	; (800f6e4 <TIM_OC3_SetConfig+0xe4>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d003      	beq.n	800f692 <TIM_OC3_SetConfig+0x92>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <TIM_OC3_SetConfig+0xe8>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d113      	bne.n	800f6ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	011b      	lsls	r3, r3, #4
 800f6a8:	693a      	ldr	r2, [r7, #16]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	699b      	ldr	r3, [r3, #24]
 800f6b2:	011b      	lsls	r3, r3, #4
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	621a      	str	r2, [r3, #32]
}
 800f6d4:	bf00      	nop
 800f6d6:	371c      	adds	r7, #28
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	fffeff8f 	.word	0xfffeff8f
 800f6e4:	40010000 	.word	0x40010000
 800f6e8:	40010400 	.word	0x40010400

0800f6ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b087      	sub	sp, #28
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	69db      	ldr	r3, [r3, #28]
 800f712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	4b1e      	ldr	r3, [pc, #120]	; (800f790 <TIM_OC4_SetConfig+0xa4>)
 800f718:	4013      	ands	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	021b      	lsls	r3, r3, #8
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	031b      	lsls	r3, r3, #12
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	4313      	orrs	r3, r2
 800f742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4a13      	ldr	r2, [pc, #76]	; (800f794 <TIM_OC4_SetConfig+0xa8>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d003      	beq.n	800f754 <TIM_OC4_SetConfig+0x68>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4a12      	ldr	r2, [pc, #72]	; (800f798 <TIM_OC4_SetConfig+0xac>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d109      	bne.n	800f768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f75a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	019b      	lsls	r3, r3, #6
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	4313      	orrs	r3, r2
 800f766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	621a      	str	r2, [r3, #32]
}
 800f782:	bf00      	nop
 800f784:	371c      	adds	r7, #28
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	feff8fff 	.word	0xfeff8fff
 800f794:	40010000 	.word	0x40010000
 800f798:	40010400 	.word	0x40010400

0800f79c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b087      	sub	sp, #28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a1b      	ldr	r3, [r3, #32]
 800f7b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	4b1b      	ldr	r3, [pc, #108]	; (800f834 <TIM_OC5_SetConfig+0x98>)
 800f7c8:	4013      	ands	r3, r2
 800f7ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f7dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a12      	ldr	r2, [pc, #72]	; (800f838 <TIM_OC5_SetConfig+0x9c>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d003      	beq.n	800f7fa <TIM_OC5_SetConfig+0x5e>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a11      	ldr	r2, [pc, #68]	; (800f83c <TIM_OC5_SetConfig+0xa0>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d109      	bne.n	800f80e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	021b      	lsls	r3, r3, #8
 800f808:	697a      	ldr	r2, [r7, #20]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	693a      	ldr	r2, [r7, #16]
 800f826:	621a      	str	r2, [r3, #32]
}
 800f828:	bf00      	nop
 800f82a:	371c      	adds	r7, #28
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	fffeff8f 	.word	0xfffeff8f
 800f838:	40010000 	.word	0x40010000
 800f83c:	40010400 	.word	0x40010400

0800f840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f840:	b480      	push	{r7}
 800f842:	b087      	sub	sp, #28
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a1b      	ldr	r3, [r3, #32]
 800f84e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6a1b      	ldr	r3, [r3, #32]
 800f85a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	4b1c      	ldr	r3, [pc, #112]	; (800f8dc <TIM_OC6_SetConfig+0x9c>)
 800f86c:	4013      	ands	r3, r2
 800f86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	021b      	lsls	r3, r3, #8
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	4313      	orrs	r3, r2
 800f87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	051b      	lsls	r3, r3, #20
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a13      	ldr	r2, [pc, #76]	; (800f8e0 <TIM_OC6_SetConfig+0xa0>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d003      	beq.n	800f8a0 <TIM_OC6_SetConfig+0x60>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a12      	ldr	r2, [pc, #72]	; (800f8e4 <TIM_OC6_SetConfig+0xa4>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d109      	bne.n	800f8b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	695b      	ldr	r3, [r3, #20]
 800f8ac:	029b      	lsls	r3, r3, #10
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	685a      	ldr	r2, [r3, #4]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	693a      	ldr	r2, [r7, #16]
 800f8cc:	621a      	str	r2, [r3, #32]
}
 800f8ce:	bf00      	nop
 800f8d0:	371c      	adds	r7, #28
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	feff8fff 	.word	0xfeff8fff
 800f8e0:	40010000 	.word	0x40010000
 800f8e4:	40010400 	.word	0x40010400

0800f8e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	f023 0201 	bic.w	r2, r3, #1
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	4a28      	ldr	r2, [pc, #160]	; (800f9b4 <TIM_TI1_SetConfig+0xcc>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d01b      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f91c:	d017      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	4a25      	ldr	r2, [pc, #148]	; (800f9b8 <TIM_TI1_SetConfig+0xd0>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d013      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	4a24      	ldr	r2, [pc, #144]	; (800f9bc <TIM_TI1_SetConfig+0xd4>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d00f      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	4a23      	ldr	r2, [pc, #140]	; (800f9c0 <TIM_TI1_SetConfig+0xd8>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d00b      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4a22      	ldr	r2, [pc, #136]	; (800f9c4 <TIM_TI1_SetConfig+0xdc>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d007      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	4a21      	ldr	r2, [pc, #132]	; (800f9c8 <TIM_TI1_SetConfig+0xe0>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d003      	beq.n	800f94e <TIM_TI1_SetConfig+0x66>
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4a20      	ldr	r2, [pc, #128]	; (800f9cc <TIM_TI1_SetConfig+0xe4>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d101      	bne.n	800f952 <TIM_TI1_SetConfig+0x6a>
 800f94e:	2301      	movs	r3, #1
 800f950:	e000      	b.n	800f954 <TIM_TI1_SetConfig+0x6c>
 800f952:	2300      	movs	r3, #0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d008      	beq.n	800f96a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	f023 0303 	bic.w	r3, r3, #3
 800f95e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4313      	orrs	r3, r2
 800f966:	617b      	str	r3, [r7, #20]
 800f968:	e003      	b.n	800f972 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f043 0301 	orr.w	r3, r3, #1
 800f970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	011b      	lsls	r3, r3, #4
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	4313      	orrs	r3, r2
 800f984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	f023 030a 	bic.w	r3, r3, #10
 800f98c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f003 030a 	and.w	r3, r3, #10
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	4313      	orrs	r3, r2
 800f998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	621a      	str	r2, [r3, #32]
}
 800f9a6:	bf00      	nop
 800f9a8:	371c      	adds	r7, #28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	40010000 	.word	0x40010000
 800f9b8:	40000400 	.word	0x40000400
 800f9bc:	40000800 	.word	0x40000800
 800f9c0:	40000c00 	.word	0x40000c00
 800f9c4:	40010400 	.word	0x40010400
 800f9c8:	40014000 	.word	0x40014000
 800f9cc:	40001800 	.word	0x40001800

0800f9d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b087      	sub	sp, #28
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	f023 0201 	bic.w	r2, r3, #1
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	011b      	lsls	r3, r3, #4
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f023 030a 	bic.w	r3, r3, #10
 800fa0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	697a      	ldr	r2, [r7, #20]
 800fa20:	621a      	str	r2, [r3, #32]
}
 800fa22:	bf00      	nop
 800fa24:	371c      	adds	r7, #28
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa2e:	b480      	push	{r7}
 800fa30:	b087      	sub	sp, #28
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	60f8      	str	r0, [r7, #12]
 800fa36:	60b9      	str	r1, [r7, #8]
 800fa38:	607a      	str	r2, [r7, #4]
 800fa3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	f023 0210 	bic.w	r2, r3, #16
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	699b      	ldr	r3, [r3, #24]
 800fa4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	021b      	lsls	r3, r3, #8
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	031b      	lsls	r3, r3, #12
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fa80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	011b      	lsls	r3, r3, #4
 800fa86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fa8a:	693a      	ldr	r2, [r7, #16]
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	697a      	ldr	r2, [r7, #20]
 800fa94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	621a      	str	r2, [r3, #32]
}
 800fa9c:	bf00      	nop
 800fa9e:	371c      	adds	r7, #28
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b087      	sub	sp, #28
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6a1b      	ldr	r3, [r3, #32]
 800fab8:	f023 0210 	bic.w	r2, r3, #16
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	031b      	lsls	r3, r3, #12
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	4313      	orrs	r3, r2
 800fadc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	011b      	lsls	r3, r3, #4
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	4313      	orrs	r3, r2
 800faee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	621a      	str	r2, [r3, #32]
}
 800fafc:	bf00      	nop
 800fafe:	371c      	adds	r7, #28
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6a1b      	ldr	r3, [r3, #32]
 800fb2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f023 0303 	bic.w	r3, r3, #3
 800fb34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fb58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	021b      	lsls	r3, r3, #8
 800fb5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	697a      	ldr	r2, [r7, #20]
 800fb6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	621a      	str	r2, [r3, #32]
}
 800fb74:	bf00      	nop
 800fb76:	371c      	adds	r7, #28
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	69db      	ldr	r3, [r3, #28]
 800fb9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	021b      	lsls	r3, r3, #8
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	031b      	lsls	r3, r3, #12
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fbd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	031b      	lsls	r3, r3, #12
 800fbd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	693a      	ldr	r2, [r7, #16]
 800fbec:	621a      	str	r2, [r3, #32]
}
 800fbee:	bf00      	nop
 800fbf0:	371c      	adds	r7, #28
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr

0800fbfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	b085      	sub	sp, #20
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
 800fc02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	f043 0307 	orr.w	r3, r3, #7
 800fc1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	609a      	str	r2, [r3, #8]
}
 800fc24:	bf00      	nop
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	021a      	lsls	r2, r3, #8
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	431a      	orrs	r2, r3
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	4313      	orrs	r3, r2
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	609a      	str	r2, [r3, #8]
}
 800fc64:	bf00      	nop
 800fc66:	371c      	adds	r7, #28
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b087      	sub	sp, #28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	f003 031f 	and.w	r3, r3, #31
 800fc82:	2201      	movs	r2, #1
 800fc84:	fa02 f303 	lsl.w	r3, r2, r3
 800fc88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6a1a      	ldr	r2, [r3, #32]
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	43db      	mvns	r3, r3
 800fc92:	401a      	ands	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6a1a      	ldr	r2, [r3, #32]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f003 031f 	and.w	r3, r3, #31
 800fca2:	6879      	ldr	r1, [r7, #4]
 800fca4:	fa01 f303 	lsl.w	r3, r1, r3
 800fca8:	431a      	orrs	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	621a      	str	r2, [r3, #32]
}
 800fcae:	bf00      	nop
 800fcb0:	371c      	adds	r7, #28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr
	...

0800fcbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d101      	bne.n	800fcd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	e06d      	b.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a30      	ldr	r2, [pc, #192]	; (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d004      	beq.n	800fd08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a2f      	ldr	r2, [pc, #188]	; (800fdc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d108      	bne.n	800fd1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68fa      	ldr	r2, [r7, #12]
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a20      	ldr	r2, [pc, #128]	; (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d022      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd46:	d01d      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a1d      	ldr	r2, [pc, #116]	; (800fdc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d018      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a1c      	ldr	r2, [pc, #112]	; (800fdc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d013      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a1a      	ldr	r2, [pc, #104]	; (800fdcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d00e      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a15      	ldr	r2, [pc, #84]	; (800fdc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d009      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a16      	ldr	r2, [pc, #88]	; (800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d004      	beq.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a15      	ldr	r2, [pc, #84]	; (800fdd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d10c      	bne.n	800fd9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	4313      	orrs	r3, r2
 800fd94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2201      	movs	r2, #1
 800fda2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3714      	adds	r7, #20
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	40010000 	.word	0x40010000
 800fdc0:	40010400 	.word	0x40010400
 800fdc4:	40000400 	.word	0x40000400
 800fdc8:	40000800 	.word	0x40000800
 800fdcc:	40000c00 	.word	0x40000c00
 800fdd0:	40014000 	.word	0x40014000
 800fdd4:	40001800 	.word	0x40001800

0800fdd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d101      	bne.n	800fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	e065      	b.n	800fec0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	695b      	ldr	r3, [r3, #20]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	041b      	lsls	r3, r3, #16
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a16      	ldr	r2, [pc, #88]	; (800fecc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d004      	beq.n	800fe82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a14      	ldr	r2, [pc, #80]	; (800fed0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d115      	bne.n	800feae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8c:	051b      	lsls	r3, r3, #20
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	69db      	ldr	r3, [r3, #28]
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	4313      	orrs	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68fa      	ldr	r2, [r7, #12]
 800feb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	40010000 	.word	0x40010000
 800fed0:	40010400 	.word	0x40010400

0800fed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d101      	bne.n	800ff22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e040      	b.n	800ffa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7f6 fde8 	bl	8006b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2224      	movs	r2, #36	; 0x24
 800ff3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 0201 	bic.w	r2, r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fc2a 	bl	80107a8 <UART_SetConfig>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d101      	bne.n	800ff5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e022      	b.n	800ffa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 fe82 	bl	8010c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689a      	ldr	r2, [r3, #8]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f042 0201 	orr.w	r2, r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 ff09 	bl	8010db4 <UART_CheckIdleState>
 800ffa2:	4603      	mov	r3, r0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b08a      	sub	sp, #40	; 0x28
 800ffb0:	af02      	add	r7, sp, #8
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	603b      	str	r3, [r7, #0]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffc0:	2b20      	cmp	r3, #32
 800ffc2:	d171      	bne.n	80100a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <HAL_UART_Transmit+0x24>
 800ffca:	88fb      	ldrh	r3, [r7, #6]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e06a      	b.n	80100aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2221      	movs	r2, #33	; 0x21
 800ffe0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffe2:	f7fa fd3b 	bl	800aa5c <HAL_GetTick>
 800ffe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	88fa      	ldrh	r2, [r7, #6]
 800ffec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	88fa      	ldrh	r2, [r7, #6]
 800fff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010000:	d108      	bne.n	8010014 <HAL_UART_Transmit+0x68>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d104      	bne.n	8010014 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801000a:	2300      	movs	r3, #0
 801000c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	e003      	b.n	801001c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010018:	2300      	movs	r3, #0
 801001a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801001c:	e02c      	b.n	8010078 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	2200      	movs	r2, #0
 8010026:	2180      	movs	r1, #128	; 0x80
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f000 fefa 	bl	8010e22 <UART_WaitOnFlagUntilTimeout>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8010034:	2303      	movs	r3, #3
 8010036:	e038      	b.n	80100aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8010038:	69fb      	ldr	r3, [r7, #28]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d10b      	bne.n	8010056 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	461a      	mov	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801004c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	3302      	adds	r3, #2
 8010052:	61bb      	str	r3, [r7, #24]
 8010054:	e007      	b.n	8010066 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	781a      	ldrb	r2, [r3, #0]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	3301      	adds	r3, #1
 8010064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801006c:	b29b      	uxth	r3, r3
 801006e:	3b01      	subs	r3, #1
 8010070:	b29a      	uxth	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801007e:	b29b      	uxth	r3, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1cc      	bne.n	801001e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	2200      	movs	r2, #0
 801008c:	2140      	movs	r1, #64	; 0x40
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f000 fec7 	bl	8010e22 <UART_WaitOnFlagUntilTimeout>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801009a:	2303      	movs	r3, #3
 801009c:	e005      	b.n	80100aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2220      	movs	r2, #32
 80100a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	e000      	b.n	80100aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80100a8:	2302      	movs	r3, #2
  }
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3720      	adds	r7, #32
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b08a      	sub	sp, #40	; 0x28
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	4613      	mov	r3, r2
 80100be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c6:	2b20      	cmp	r3, #32
 80100c8:	d132      	bne.n	8010130 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <HAL_UART_Receive_IT+0x24>
 80100d0:	88fb      	ldrh	r3, [r7, #6]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80100d6:	2301      	movs	r3, #1
 80100d8:	e02b      	b.n	8010132 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d018      	beq.n	8010120 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	e853 3f00 	ldrex	r3, [r3]
 80100fa:	613b      	str	r3, [r7, #16]
   return(result);
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010102:	627b      	str	r3, [r7, #36]	; 0x24
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	461a      	mov	r2, r3
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	623b      	str	r3, [r7, #32]
 801010e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010110:	69f9      	ldr	r1, [r7, #28]
 8010112:	6a3a      	ldr	r2, [r7, #32]
 8010114:	e841 2300 	strex	r3, r2, [r1]
 8010118:	61bb      	str	r3, [r7, #24]
   return(result);
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1e6      	bne.n	80100ee <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010120:	88fb      	ldrh	r3, [r7, #6]
 8010122:	461a      	mov	r2, r3
 8010124:	68b9      	ldr	r1, [r7, #8]
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f000 ff42 	bl	8010fb0 <UART_Start_Receive_IT>
 801012c:	4603      	mov	r3, r0
 801012e:	e000      	b.n	8010132 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010130:	2302      	movs	r3, #2
  }
}
 8010132:	4618      	mov	r0, r3
 8010134:	3728      	adds	r7, #40	; 0x28
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b08a      	sub	sp, #40	; 0x28
 801013e:	af00      	add	r7, sp, #0
 8010140:	60f8      	str	r0, [r7, #12]
 8010142:	60b9      	str	r1, [r7, #8]
 8010144:	4613      	mov	r3, r2
 8010146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801014e:	2b20      	cmp	r3, #32
 8010150:	d132      	bne.n	80101b8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <HAL_UART_Receive_DMA+0x24>
 8010158:	88fb      	ldrh	r3, [r7, #6]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d101      	bne.n	8010162 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801015e:	2301      	movs	r3, #1
 8010160:	e02b      	b.n	80101ba <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010172:	2b00      	cmp	r3, #0
 8010174:	d018      	beq.n	80101a8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	e853 3f00 	ldrex	r3, [r3]
 8010182:	613b      	str	r3, [r7, #16]
   return(result);
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	623b      	str	r3, [r7, #32]
 8010196:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010198:	69f9      	ldr	r1, [r7, #28]
 801019a:	6a3a      	ldr	r2, [r7, #32]
 801019c:	e841 2300 	strex	r3, r2, [r1]
 80101a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1e6      	bne.n	8010176 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80101a8:	88fb      	ldrh	r3, [r7, #6]
 80101aa:	461a      	mov	r2, r3
 80101ac:	68b9      	ldr	r1, [r7, #8]
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 ffc4 	bl	801113c <UART_Start_Receive_DMA>
 80101b4:	4603      	mov	r3, r0
 80101b6:	e000      	b.n	80101ba <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80101b8:	2302      	movs	r3, #2
  }
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3728      	adds	r7, #40	; 0x28
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b0ba      	sub	sp, #232	; 0xe8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	69db      	ldr	r3, [r3, #28]
 80101d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80101ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80101ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80101f2:	4013      	ands	r3, r2
 80101f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80101f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d115      	bne.n	801022c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010204:	f003 0320 	and.w	r3, r3, #32
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00f      	beq.n	801022c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801020c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010210:	f003 0320 	and.w	r3, r3, #32
 8010214:	2b00      	cmp	r3, #0
 8010216:	d009      	beq.n	801022c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 8297 	beq.w	8010750 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	4798      	blx	r3
      }
      return;
 801022a:	e291      	b.n	8010750 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801022c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 8117 	beq.w	8010464 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801023a:	f003 0301 	and.w	r3, r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d106      	bne.n	8010250 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010246:	4b85      	ldr	r3, [pc, #532]	; (801045c <HAL_UART_IRQHandler+0x298>)
 8010248:	4013      	ands	r3, r2
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 810a 	beq.w	8010464 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d011      	beq.n	8010280 <HAL_UART_IRQHandler+0xbc>
 801025c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00b      	beq.n	8010280 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2201      	movs	r2, #1
 801026e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010276:	f043 0201 	orr.w	r2, r3, #1
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010284:	f003 0302 	and.w	r3, r3, #2
 8010288:	2b00      	cmp	r3, #0
 801028a:	d011      	beq.n	80102b0 <HAL_UART_IRQHandler+0xec>
 801028c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010290:	f003 0301 	and.w	r3, r3, #1
 8010294:	2b00      	cmp	r3, #0
 8010296:	d00b      	beq.n	80102b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2202      	movs	r2, #2
 801029e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102a6:	f043 0204 	orr.w	r2, r3, #4
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102b4:	f003 0304 	and.w	r3, r3, #4
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d011      	beq.n	80102e0 <HAL_UART_IRQHandler+0x11c>
 80102bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102c0:	f003 0301 	and.w	r3, r3, #1
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00b      	beq.n	80102e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2204      	movs	r2, #4
 80102ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102d6:	f043 0202 	orr.w	r2, r3, #2
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102e4:	f003 0308 	and.w	r3, r3, #8
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d017      	beq.n	801031c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80102ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102f0:	f003 0320 	and.w	r3, r3, #32
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d105      	bne.n	8010304 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80102f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00b      	beq.n	801031c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2208      	movs	r2, #8
 801030a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010312:	f043 0208 	orr.w	r2, r3, #8
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801031c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010324:	2b00      	cmp	r3, #0
 8010326:	d012      	beq.n	801034e <HAL_UART_IRQHandler+0x18a>
 8010328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801032c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00c      	beq.n	801034e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801033c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010344:	f043 0220 	orr.w	r2, r3, #32
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 81fd 	beq.w	8010754 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801035a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801035e:	f003 0320 	and.w	r3, r3, #32
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00d      	beq.n	8010382 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801036a:	f003 0320 	and.w	r3, r3, #32
 801036e:	2b00      	cmp	r3, #0
 8010370:	d007      	beq.n	8010382 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010376:	2b00      	cmp	r3, #0
 8010378:	d003      	beq.n	8010382 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010396:	2b40      	cmp	r3, #64	; 0x40
 8010398:	d005      	beq.n	80103a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801039a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801039e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d04f      	beq.n	8010446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 ff8e 	bl	80112c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103b6:	2b40      	cmp	r3, #64	; 0x40
 80103b8:	d141      	bne.n	801043e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103c8:	e853 3f00 	ldrex	r3, [r3]
 80103cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80103d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	3308      	adds	r3, #8
 80103e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80103e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80103ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80103f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80103f6:	e841 2300 	strex	r3, r2, [r1]
 80103fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80103fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1d9      	bne.n	80103ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801040a:	2b00      	cmp	r3, #0
 801040c:	d013      	beq.n	8010436 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010412:	4a13      	ldr	r2, [pc, #76]	; (8010460 <HAL_UART_IRQHandler+0x29c>)
 8010414:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801041a:	4618      	mov	r0, r3
 801041c:	f7fa fdae 	bl	800af7c <HAL_DMA_Abort_IT>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d017      	beq.n	8010456 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801042a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010430:	4610      	mov	r0, r2
 8010432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010434:	e00f      	b.n	8010456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7f3 ff00 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801043c:	e00b      	b.n	8010456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7f3 fefc 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010444:	e007      	b.n	8010456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f7f3 fef8 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8010454:	e17e      	b.n	8010754 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010456:	bf00      	nop
    return;
 8010458:	e17c      	b.n	8010754 <HAL_UART_IRQHandler+0x590>
 801045a:	bf00      	nop
 801045c:	04000120 	.word	0x04000120
 8010460:	08011575 	.word	0x08011575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010468:	2b01      	cmp	r3, #1
 801046a:	f040 814c 	bne.w	8010706 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801046e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010472:	f003 0310 	and.w	r3, r3, #16
 8010476:	2b00      	cmp	r3, #0
 8010478:	f000 8145 	beq.w	8010706 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801047c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010480:	f003 0310 	and.w	r3, r3, #16
 8010484:	2b00      	cmp	r3, #0
 8010486:	f000 813e 	beq.w	8010706 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2210      	movs	r2, #16
 8010490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801049c:	2b40      	cmp	r3, #64	; 0x40
 801049e:	f040 80b6 	bne.w	801060e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80104ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 8150 	beq.w	8010758 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80104be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80104c2:	429a      	cmp	r2, r3
 80104c4:	f080 8148 	bcs.w	8010758 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80104ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d6:	69db      	ldr	r3, [r3, #28]
 80104d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104dc:	f000 8086 	beq.w	80105ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104ec:	e853 3f00 	ldrex	r3, [r3]
 80104f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80104f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80104f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	461a      	mov	r2, r3
 8010506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801050a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801050e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010512:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010516:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d1da      	bne.n	80104e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	3308      	adds	r3, #8
 8010530:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010534:	e853 3f00 	ldrex	r3, [r3]
 8010538:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801053a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801053c:	f023 0301 	bic.w	r3, r3, #1
 8010540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3308      	adds	r3, #8
 801054a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801054e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010552:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010554:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e1      	bne.n	801052a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010570:	e853 3f00 	ldrex	r3, [r3]
 8010574:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801057c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3308      	adds	r3, #8
 8010586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801058a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801058c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010590:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010592:	e841 2300 	strex	r3, r2, [r1]
 8010596:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1e3      	bne.n	8010566 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2220      	movs	r2, #32
 80105a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b4:	e853 3f00 	ldrex	r3, [r3]
 80105b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105bc:	f023 0310 	bic.w	r3, r3, #16
 80105c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80105d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105d6:	e841 2300 	strex	r3, r2, [r1]
 80105da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e4      	bne.n	80105ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fa fc58 	bl	800ae9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2202      	movs	r2, #2
 80105f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80105fe:	b29b      	uxth	r3, r3
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	b29b      	uxth	r3, r3
 8010604:	4619      	mov	r1, r3
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 f8c2 	bl	8010790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801060c:	e0a4      	b.n	8010758 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801061a:	b29b      	uxth	r3, r3
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010628:	b29b      	uxth	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	f000 8096 	beq.w	801075c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8010630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 8091 	beq.w	801075c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	e853 3f00 	ldrex	r3, [r3]
 8010646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801064e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	461a      	mov	r2, r3
 8010658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801065c:	647b      	str	r3, [r7, #68]	; 0x44
 801065e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010664:	e841 2300 	strex	r3, r2, [r1]
 8010668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801066a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1e4      	bne.n	801063a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3308      	adds	r3, #8
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	e853 3f00 	ldrex	r3, [r3]
 801067e:	623b      	str	r3, [r7, #32]
   return(result);
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	f023 0301 	bic.w	r3, r3, #1
 8010686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3308      	adds	r3, #8
 8010690:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010694:	633a      	str	r2, [r7, #48]	; 0x30
 8010696:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801069a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801069c:	e841 2300 	strex	r3, r2, [r1]
 80106a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e3      	bne.n	8010670 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2220      	movs	r2, #32
 80106ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f023 0310 	bic.w	r3, r3, #16
 80106d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80106de:	61fb      	str	r3, [r7, #28]
 80106e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e2:	69b9      	ldr	r1, [r7, #24]
 80106e4:	69fa      	ldr	r2, [r7, #28]
 80106e6:	e841 2300 	strex	r3, r2, [r1]
 80106ea:	617b      	str	r3, [r7, #20]
   return(result);
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e4      	bne.n	80106bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2202      	movs	r2, #2
 80106f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80106f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80106fc:	4619      	mov	r1, r3
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f846 	bl	8010790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010704:	e02a      	b.n	801075c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00e      	beq.n	8010730 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801071a:	2b00      	cmp	r3, #0
 801071c:	d008      	beq.n	8010730 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010722:	2b00      	cmp	r3, #0
 8010724:	d01c      	beq.n	8010760 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	4798      	blx	r3
    }
    return;
 801072e:	e017      	b.n	8010760 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010738:	2b00      	cmp	r3, #0
 801073a:	d012      	beq.n	8010762 <HAL_UART_IRQHandler+0x59e>
 801073c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00c      	beq.n	8010762 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 ff29 	bl	80115a0 <UART_EndTransmit_IT>
    return;
 801074e:	e008      	b.n	8010762 <HAL_UART_IRQHandler+0x59e>
      return;
 8010750:	bf00      	nop
 8010752:	e006      	b.n	8010762 <HAL_UART_IRQHandler+0x59e>
    return;
 8010754:	bf00      	nop
 8010756:	e004      	b.n	8010762 <HAL_UART_IRQHandler+0x59e>
      return;
 8010758:	bf00      	nop
 801075a:	e002      	b.n	8010762 <HAL_UART_IRQHandler+0x59e>
      return;
 801075c:	bf00      	nop
 801075e:	e000      	b.n	8010762 <HAL_UART_IRQHandler+0x59e>
    return;
 8010760:	bf00      	nop
  }

}
 8010762:	37e8      	adds	r7, #232	; 0xe8
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010784:	bf00      	nop
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	460b      	mov	r3, r1
 801079a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801079c:	bf00      	nop
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	689a      	ldr	r2, [r3, #8]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	431a      	orrs	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	695b      	ldr	r3, [r3, #20]
 80107c2:	431a      	orrs	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	4313      	orrs	r3, r2
 80107ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	4ba6      	ldr	r3, [pc, #664]	; (8010a6c <UART_SetConfig+0x2c4>)
 80107d4:	4013      	ands	r3, r2
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	6812      	ldr	r2, [r2, #0]
 80107da:	6979      	ldr	r1, [r7, #20]
 80107dc:	430b      	orrs	r3, r1
 80107de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68da      	ldr	r2, [r3, #12]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	430a      	orrs	r2, r1
 80107f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	699b      	ldr	r3, [r3, #24]
 80107fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6a1b      	ldr	r3, [r3, #32]
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	4313      	orrs	r3, r2
 8010804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	430a      	orrs	r2, r1
 8010818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4a94      	ldr	r2, [pc, #592]	; (8010a70 <UART_SetConfig+0x2c8>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d120      	bne.n	8010866 <UART_SetConfig+0xbe>
 8010824:	4b93      	ldr	r3, [pc, #588]	; (8010a74 <UART_SetConfig+0x2cc>)
 8010826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801082a:	f003 0303 	and.w	r3, r3, #3
 801082e:	2b03      	cmp	r3, #3
 8010830:	d816      	bhi.n	8010860 <UART_SetConfig+0xb8>
 8010832:	a201      	add	r2, pc, #4	; (adr r2, 8010838 <UART_SetConfig+0x90>)
 8010834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010838:	08010849 	.word	0x08010849
 801083c:	08010855 	.word	0x08010855
 8010840:	0801084f 	.word	0x0801084f
 8010844:	0801085b 	.word	0x0801085b
 8010848:	2301      	movs	r3, #1
 801084a:	77fb      	strb	r3, [r7, #31]
 801084c:	e150      	b.n	8010af0 <UART_SetConfig+0x348>
 801084e:	2302      	movs	r3, #2
 8010850:	77fb      	strb	r3, [r7, #31]
 8010852:	e14d      	b.n	8010af0 <UART_SetConfig+0x348>
 8010854:	2304      	movs	r3, #4
 8010856:	77fb      	strb	r3, [r7, #31]
 8010858:	e14a      	b.n	8010af0 <UART_SetConfig+0x348>
 801085a:	2308      	movs	r3, #8
 801085c:	77fb      	strb	r3, [r7, #31]
 801085e:	e147      	b.n	8010af0 <UART_SetConfig+0x348>
 8010860:	2310      	movs	r3, #16
 8010862:	77fb      	strb	r3, [r7, #31]
 8010864:	e144      	b.n	8010af0 <UART_SetConfig+0x348>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a83      	ldr	r2, [pc, #524]	; (8010a78 <UART_SetConfig+0x2d0>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d132      	bne.n	80108d6 <UART_SetConfig+0x12e>
 8010870:	4b80      	ldr	r3, [pc, #512]	; (8010a74 <UART_SetConfig+0x2cc>)
 8010872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010876:	f003 030c 	and.w	r3, r3, #12
 801087a:	2b0c      	cmp	r3, #12
 801087c:	d828      	bhi.n	80108d0 <UART_SetConfig+0x128>
 801087e:	a201      	add	r2, pc, #4	; (adr r2, 8010884 <UART_SetConfig+0xdc>)
 8010880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010884:	080108b9 	.word	0x080108b9
 8010888:	080108d1 	.word	0x080108d1
 801088c:	080108d1 	.word	0x080108d1
 8010890:	080108d1 	.word	0x080108d1
 8010894:	080108c5 	.word	0x080108c5
 8010898:	080108d1 	.word	0x080108d1
 801089c:	080108d1 	.word	0x080108d1
 80108a0:	080108d1 	.word	0x080108d1
 80108a4:	080108bf 	.word	0x080108bf
 80108a8:	080108d1 	.word	0x080108d1
 80108ac:	080108d1 	.word	0x080108d1
 80108b0:	080108d1 	.word	0x080108d1
 80108b4:	080108cb 	.word	0x080108cb
 80108b8:	2300      	movs	r3, #0
 80108ba:	77fb      	strb	r3, [r7, #31]
 80108bc:	e118      	b.n	8010af0 <UART_SetConfig+0x348>
 80108be:	2302      	movs	r3, #2
 80108c0:	77fb      	strb	r3, [r7, #31]
 80108c2:	e115      	b.n	8010af0 <UART_SetConfig+0x348>
 80108c4:	2304      	movs	r3, #4
 80108c6:	77fb      	strb	r3, [r7, #31]
 80108c8:	e112      	b.n	8010af0 <UART_SetConfig+0x348>
 80108ca:	2308      	movs	r3, #8
 80108cc:	77fb      	strb	r3, [r7, #31]
 80108ce:	e10f      	b.n	8010af0 <UART_SetConfig+0x348>
 80108d0:	2310      	movs	r3, #16
 80108d2:	77fb      	strb	r3, [r7, #31]
 80108d4:	e10c      	b.n	8010af0 <UART_SetConfig+0x348>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a68      	ldr	r2, [pc, #416]	; (8010a7c <UART_SetConfig+0x2d4>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d120      	bne.n	8010922 <UART_SetConfig+0x17a>
 80108e0:	4b64      	ldr	r3, [pc, #400]	; (8010a74 <UART_SetConfig+0x2cc>)
 80108e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80108ea:	2b30      	cmp	r3, #48	; 0x30
 80108ec:	d013      	beq.n	8010916 <UART_SetConfig+0x16e>
 80108ee:	2b30      	cmp	r3, #48	; 0x30
 80108f0:	d814      	bhi.n	801091c <UART_SetConfig+0x174>
 80108f2:	2b20      	cmp	r3, #32
 80108f4:	d009      	beq.n	801090a <UART_SetConfig+0x162>
 80108f6:	2b20      	cmp	r3, #32
 80108f8:	d810      	bhi.n	801091c <UART_SetConfig+0x174>
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d002      	beq.n	8010904 <UART_SetConfig+0x15c>
 80108fe:	2b10      	cmp	r3, #16
 8010900:	d006      	beq.n	8010910 <UART_SetConfig+0x168>
 8010902:	e00b      	b.n	801091c <UART_SetConfig+0x174>
 8010904:	2300      	movs	r3, #0
 8010906:	77fb      	strb	r3, [r7, #31]
 8010908:	e0f2      	b.n	8010af0 <UART_SetConfig+0x348>
 801090a:	2302      	movs	r3, #2
 801090c:	77fb      	strb	r3, [r7, #31]
 801090e:	e0ef      	b.n	8010af0 <UART_SetConfig+0x348>
 8010910:	2304      	movs	r3, #4
 8010912:	77fb      	strb	r3, [r7, #31]
 8010914:	e0ec      	b.n	8010af0 <UART_SetConfig+0x348>
 8010916:	2308      	movs	r3, #8
 8010918:	77fb      	strb	r3, [r7, #31]
 801091a:	e0e9      	b.n	8010af0 <UART_SetConfig+0x348>
 801091c:	2310      	movs	r3, #16
 801091e:	77fb      	strb	r3, [r7, #31]
 8010920:	e0e6      	b.n	8010af0 <UART_SetConfig+0x348>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a56      	ldr	r2, [pc, #344]	; (8010a80 <UART_SetConfig+0x2d8>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d120      	bne.n	801096e <UART_SetConfig+0x1c6>
 801092c:	4b51      	ldr	r3, [pc, #324]	; (8010a74 <UART_SetConfig+0x2cc>)
 801092e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010936:	2bc0      	cmp	r3, #192	; 0xc0
 8010938:	d013      	beq.n	8010962 <UART_SetConfig+0x1ba>
 801093a:	2bc0      	cmp	r3, #192	; 0xc0
 801093c:	d814      	bhi.n	8010968 <UART_SetConfig+0x1c0>
 801093e:	2b80      	cmp	r3, #128	; 0x80
 8010940:	d009      	beq.n	8010956 <UART_SetConfig+0x1ae>
 8010942:	2b80      	cmp	r3, #128	; 0x80
 8010944:	d810      	bhi.n	8010968 <UART_SetConfig+0x1c0>
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <UART_SetConfig+0x1a8>
 801094a:	2b40      	cmp	r3, #64	; 0x40
 801094c:	d006      	beq.n	801095c <UART_SetConfig+0x1b4>
 801094e:	e00b      	b.n	8010968 <UART_SetConfig+0x1c0>
 8010950:	2300      	movs	r3, #0
 8010952:	77fb      	strb	r3, [r7, #31]
 8010954:	e0cc      	b.n	8010af0 <UART_SetConfig+0x348>
 8010956:	2302      	movs	r3, #2
 8010958:	77fb      	strb	r3, [r7, #31]
 801095a:	e0c9      	b.n	8010af0 <UART_SetConfig+0x348>
 801095c:	2304      	movs	r3, #4
 801095e:	77fb      	strb	r3, [r7, #31]
 8010960:	e0c6      	b.n	8010af0 <UART_SetConfig+0x348>
 8010962:	2308      	movs	r3, #8
 8010964:	77fb      	strb	r3, [r7, #31]
 8010966:	e0c3      	b.n	8010af0 <UART_SetConfig+0x348>
 8010968:	2310      	movs	r3, #16
 801096a:	77fb      	strb	r3, [r7, #31]
 801096c:	e0c0      	b.n	8010af0 <UART_SetConfig+0x348>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4a44      	ldr	r2, [pc, #272]	; (8010a84 <UART_SetConfig+0x2dc>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d125      	bne.n	80109c4 <UART_SetConfig+0x21c>
 8010978:	4b3e      	ldr	r3, [pc, #248]	; (8010a74 <UART_SetConfig+0x2cc>)
 801097a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801097e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010986:	d017      	beq.n	80109b8 <UART_SetConfig+0x210>
 8010988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801098c:	d817      	bhi.n	80109be <UART_SetConfig+0x216>
 801098e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010992:	d00b      	beq.n	80109ac <UART_SetConfig+0x204>
 8010994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010998:	d811      	bhi.n	80109be <UART_SetConfig+0x216>
 801099a:	2b00      	cmp	r3, #0
 801099c:	d003      	beq.n	80109a6 <UART_SetConfig+0x1fe>
 801099e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109a2:	d006      	beq.n	80109b2 <UART_SetConfig+0x20a>
 80109a4:	e00b      	b.n	80109be <UART_SetConfig+0x216>
 80109a6:	2300      	movs	r3, #0
 80109a8:	77fb      	strb	r3, [r7, #31]
 80109aa:	e0a1      	b.n	8010af0 <UART_SetConfig+0x348>
 80109ac:	2302      	movs	r3, #2
 80109ae:	77fb      	strb	r3, [r7, #31]
 80109b0:	e09e      	b.n	8010af0 <UART_SetConfig+0x348>
 80109b2:	2304      	movs	r3, #4
 80109b4:	77fb      	strb	r3, [r7, #31]
 80109b6:	e09b      	b.n	8010af0 <UART_SetConfig+0x348>
 80109b8:	2308      	movs	r3, #8
 80109ba:	77fb      	strb	r3, [r7, #31]
 80109bc:	e098      	b.n	8010af0 <UART_SetConfig+0x348>
 80109be:	2310      	movs	r3, #16
 80109c0:	77fb      	strb	r3, [r7, #31]
 80109c2:	e095      	b.n	8010af0 <UART_SetConfig+0x348>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a2f      	ldr	r2, [pc, #188]	; (8010a88 <UART_SetConfig+0x2e0>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d125      	bne.n	8010a1a <UART_SetConfig+0x272>
 80109ce:	4b29      	ldr	r3, [pc, #164]	; (8010a74 <UART_SetConfig+0x2cc>)
 80109d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80109d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80109dc:	d017      	beq.n	8010a0e <UART_SetConfig+0x266>
 80109de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80109e2:	d817      	bhi.n	8010a14 <UART_SetConfig+0x26c>
 80109e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109e8:	d00b      	beq.n	8010a02 <UART_SetConfig+0x25a>
 80109ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109ee:	d811      	bhi.n	8010a14 <UART_SetConfig+0x26c>
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d003      	beq.n	80109fc <UART_SetConfig+0x254>
 80109f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109f8:	d006      	beq.n	8010a08 <UART_SetConfig+0x260>
 80109fa:	e00b      	b.n	8010a14 <UART_SetConfig+0x26c>
 80109fc:	2301      	movs	r3, #1
 80109fe:	77fb      	strb	r3, [r7, #31]
 8010a00:	e076      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a02:	2302      	movs	r3, #2
 8010a04:	77fb      	strb	r3, [r7, #31]
 8010a06:	e073      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	77fb      	strb	r3, [r7, #31]
 8010a0c:	e070      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a0e:	2308      	movs	r3, #8
 8010a10:	77fb      	strb	r3, [r7, #31]
 8010a12:	e06d      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a14:	2310      	movs	r3, #16
 8010a16:	77fb      	strb	r3, [r7, #31]
 8010a18:	e06a      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	4a1b      	ldr	r2, [pc, #108]	; (8010a8c <UART_SetConfig+0x2e4>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d138      	bne.n	8010a96 <UART_SetConfig+0x2ee>
 8010a24:	4b13      	ldr	r3, [pc, #76]	; (8010a74 <UART_SetConfig+0x2cc>)
 8010a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a32:	d017      	beq.n	8010a64 <UART_SetConfig+0x2bc>
 8010a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a38:	d82a      	bhi.n	8010a90 <UART_SetConfig+0x2e8>
 8010a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a3e:	d00b      	beq.n	8010a58 <UART_SetConfig+0x2b0>
 8010a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a44:	d824      	bhi.n	8010a90 <UART_SetConfig+0x2e8>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d003      	beq.n	8010a52 <UART_SetConfig+0x2aa>
 8010a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a4e:	d006      	beq.n	8010a5e <UART_SetConfig+0x2b6>
 8010a50:	e01e      	b.n	8010a90 <UART_SetConfig+0x2e8>
 8010a52:	2300      	movs	r3, #0
 8010a54:	77fb      	strb	r3, [r7, #31]
 8010a56:	e04b      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a58:	2302      	movs	r3, #2
 8010a5a:	77fb      	strb	r3, [r7, #31]
 8010a5c:	e048      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a5e:	2304      	movs	r3, #4
 8010a60:	77fb      	strb	r3, [r7, #31]
 8010a62:	e045      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a64:	2308      	movs	r3, #8
 8010a66:	77fb      	strb	r3, [r7, #31]
 8010a68:	e042      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a6a:	bf00      	nop
 8010a6c:	efff69f3 	.word	0xefff69f3
 8010a70:	40011000 	.word	0x40011000
 8010a74:	40023800 	.word	0x40023800
 8010a78:	40004400 	.word	0x40004400
 8010a7c:	40004800 	.word	0x40004800
 8010a80:	40004c00 	.word	0x40004c00
 8010a84:	40005000 	.word	0x40005000
 8010a88:	40011400 	.word	0x40011400
 8010a8c:	40007800 	.word	0x40007800
 8010a90:	2310      	movs	r3, #16
 8010a92:	77fb      	strb	r3, [r7, #31]
 8010a94:	e02c      	b.n	8010af0 <UART_SetConfig+0x348>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4a72      	ldr	r2, [pc, #456]	; (8010c64 <UART_SetConfig+0x4bc>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d125      	bne.n	8010aec <UART_SetConfig+0x344>
 8010aa0:	4b71      	ldr	r3, [pc, #452]	; (8010c68 <UART_SetConfig+0x4c0>)
 8010aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010aaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010aae:	d017      	beq.n	8010ae0 <UART_SetConfig+0x338>
 8010ab0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010ab4:	d817      	bhi.n	8010ae6 <UART_SetConfig+0x33e>
 8010ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aba:	d00b      	beq.n	8010ad4 <UART_SetConfig+0x32c>
 8010abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ac0:	d811      	bhi.n	8010ae6 <UART_SetConfig+0x33e>
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d003      	beq.n	8010ace <UART_SetConfig+0x326>
 8010ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010aca:	d006      	beq.n	8010ada <UART_SetConfig+0x332>
 8010acc:	e00b      	b.n	8010ae6 <UART_SetConfig+0x33e>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	77fb      	strb	r3, [r7, #31]
 8010ad2:	e00d      	b.n	8010af0 <UART_SetConfig+0x348>
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	77fb      	strb	r3, [r7, #31]
 8010ad8:	e00a      	b.n	8010af0 <UART_SetConfig+0x348>
 8010ada:	2304      	movs	r3, #4
 8010adc:	77fb      	strb	r3, [r7, #31]
 8010ade:	e007      	b.n	8010af0 <UART_SetConfig+0x348>
 8010ae0:	2308      	movs	r3, #8
 8010ae2:	77fb      	strb	r3, [r7, #31]
 8010ae4:	e004      	b.n	8010af0 <UART_SetConfig+0x348>
 8010ae6:	2310      	movs	r3, #16
 8010ae8:	77fb      	strb	r3, [r7, #31]
 8010aea:	e001      	b.n	8010af0 <UART_SetConfig+0x348>
 8010aec:	2310      	movs	r3, #16
 8010aee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	69db      	ldr	r3, [r3, #28]
 8010af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010af8:	d15b      	bne.n	8010bb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010afa:	7ffb      	ldrb	r3, [r7, #31]
 8010afc:	2b08      	cmp	r3, #8
 8010afe:	d828      	bhi.n	8010b52 <UART_SetConfig+0x3aa>
 8010b00:	a201      	add	r2, pc, #4	; (adr r2, 8010b08 <UART_SetConfig+0x360>)
 8010b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b06:	bf00      	nop
 8010b08:	08010b2d 	.word	0x08010b2d
 8010b0c:	08010b35 	.word	0x08010b35
 8010b10:	08010b3d 	.word	0x08010b3d
 8010b14:	08010b53 	.word	0x08010b53
 8010b18:	08010b43 	.word	0x08010b43
 8010b1c:	08010b53 	.word	0x08010b53
 8010b20:	08010b53 	.word	0x08010b53
 8010b24:	08010b53 	.word	0x08010b53
 8010b28:	08010b4b 	.word	0x08010b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b2c:	f7fc f90a 	bl	800cd44 <HAL_RCC_GetPCLK1Freq>
 8010b30:	61b8      	str	r0, [r7, #24]
        break;
 8010b32:	e013      	b.n	8010b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b34:	f7fc f91a 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8010b38:	61b8      	str	r0, [r7, #24]
        break;
 8010b3a:	e00f      	b.n	8010b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b3c:	4b4b      	ldr	r3, [pc, #300]	; (8010c6c <UART_SetConfig+0x4c4>)
 8010b3e:	61bb      	str	r3, [r7, #24]
        break;
 8010b40:	e00c      	b.n	8010b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b42:	f7fc f82d 	bl	800cba0 <HAL_RCC_GetSysClockFreq>
 8010b46:	61b8      	str	r0, [r7, #24]
        break;
 8010b48:	e008      	b.n	8010b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b4e:	61bb      	str	r3, [r7, #24]
        break;
 8010b50:	e004      	b.n	8010b5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010b52:	2300      	movs	r3, #0
 8010b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	77bb      	strb	r3, [r7, #30]
        break;
 8010b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d074      	beq.n	8010c4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	005a      	lsls	r2, r3, #1
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	085b      	lsrs	r3, r3, #1
 8010b6c:	441a      	add	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	2b0f      	cmp	r3, #15
 8010b7c:	d916      	bls.n	8010bac <UART_SetConfig+0x404>
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b84:	d212      	bcs.n	8010bac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	f023 030f 	bic.w	r3, r3, #15
 8010b8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	085b      	lsrs	r3, r3, #1
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	f003 0307 	and.w	r3, r3, #7
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	89fb      	ldrh	r3, [r7, #14]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	89fa      	ldrh	r2, [r7, #14]
 8010ba8:	60da      	str	r2, [r3, #12]
 8010baa:	e04f      	b.n	8010c4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010bac:	2301      	movs	r3, #1
 8010bae:	77bb      	strb	r3, [r7, #30]
 8010bb0:	e04c      	b.n	8010c4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010bb2:	7ffb      	ldrb	r3, [r7, #31]
 8010bb4:	2b08      	cmp	r3, #8
 8010bb6:	d828      	bhi.n	8010c0a <UART_SetConfig+0x462>
 8010bb8:	a201      	add	r2, pc, #4	; (adr r2, 8010bc0 <UART_SetConfig+0x418>)
 8010bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bbe:	bf00      	nop
 8010bc0:	08010be5 	.word	0x08010be5
 8010bc4:	08010bed 	.word	0x08010bed
 8010bc8:	08010bf5 	.word	0x08010bf5
 8010bcc:	08010c0b 	.word	0x08010c0b
 8010bd0:	08010bfb 	.word	0x08010bfb
 8010bd4:	08010c0b 	.word	0x08010c0b
 8010bd8:	08010c0b 	.word	0x08010c0b
 8010bdc:	08010c0b 	.word	0x08010c0b
 8010be0:	08010c03 	.word	0x08010c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010be4:	f7fc f8ae 	bl	800cd44 <HAL_RCC_GetPCLK1Freq>
 8010be8:	61b8      	str	r0, [r7, #24]
        break;
 8010bea:	e013      	b.n	8010c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010bec:	f7fc f8be 	bl	800cd6c <HAL_RCC_GetPCLK2Freq>
 8010bf0:	61b8      	str	r0, [r7, #24]
        break;
 8010bf2:	e00f      	b.n	8010c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010bf4:	4b1d      	ldr	r3, [pc, #116]	; (8010c6c <UART_SetConfig+0x4c4>)
 8010bf6:	61bb      	str	r3, [r7, #24]
        break;
 8010bf8:	e00c      	b.n	8010c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010bfa:	f7fb ffd1 	bl	800cba0 <HAL_RCC_GetSysClockFreq>
 8010bfe:	61b8      	str	r0, [r7, #24]
        break;
 8010c00:	e008      	b.n	8010c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c06:	61bb      	str	r3, [r7, #24]
        break;
 8010c08:	e004      	b.n	8010c14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	77bb      	strb	r3, [r7, #30]
        break;
 8010c12:	bf00      	nop
    }

    if (pclk != 0U)
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d018      	beq.n	8010c4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	085a      	lsrs	r2, r3, #1
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	441a      	add	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	2b0f      	cmp	r3, #15
 8010c32:	d909      	bls.n	8010c48 <UART_SetConfig+0x4a0>
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c3a:	d205      	bcs.n	8010c48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	60da      	str	r2, [r3, #12]
 8010c46:	e001      	b.n	8010c4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	40007c00 	.word	0x40007c00
 8010c68:	40023800 	.word	0x40023800
 8010c6c:	00f42400 	.word	0x00f42400

08010c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7c:	f003 0301 	and.w	r3, r3, #1
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00a      	beq.n	8010c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00a      	beq.n	8010cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	430a      	orrs	r2, r1
 8010cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc0:	f003 0304 	and.w	r3, r3, #4
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00a      	beq.n	8010cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	430a      	orrs	r2, r1
 8010cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce2:	f003 0308 	and.w	r3, r3, #8
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	430a      	orrs	r2, r1
 8010cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d04:	f003 0310 	and.w	r3, r3, #16
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00a      	beq.n	8010d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	689b      	ldr	r3, [r3, #8]
 8010d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	430a      	orrs	r2, r1
 8010d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d26:	f003 0320 	and.w	r3, r3, #32
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00a      	beq.n	8010d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	689b      	ldr	r3, [r3, #8]
 8010d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	430a      	orrs	r2, r1
 8010d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d01a      	beq.n	8010d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	430a      	orrs	r2, r1
 8010d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d6e:	d10a      	bne.n	8010d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	430a      	orrs	r2, r1
 8010d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00a      	beq.n	8010da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	430a      	orrs	r2, r1
 8010da6:	605a      	str	r2, [r3, #4]
  }
}
 8010da8:	bf00      	nop
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af02      	add	r7, sp, #8
 8010dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010dc4:	f7f9 fe4a 	bl	800aa5c <HAL_GetTick>
 8010dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f003 0308 	and.w	r3, r3, #8
 8010dd4:	2b08      	cmp	r3, #8
 8010dd6:	d10e      	bne.n	8010df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 f81b 	bl	8010e22 <UART_WaitOnFlagUntilTimeout>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010df2:	2303      	movs	r3, #3
 8010df4:	e011      	b.n	8010e1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2220      	movs	r2, #32
 8010dfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2220      	movs	r2, #32
 8010e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b09c      	sub	sp, #112	; 0x70
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	60f8      	str	r0, [r7, #12]
 8010e2a:	60b9      	str	r1, [r7, #8]
 8010e2c:	603b      	str	r3, [r7, #0]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e32:	e0a7      	b.n	8010f84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3a:	f000 80a3 	beq.w	8010f84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e3e:	f7f9 fe0d 	bl	800aa5c <HAL_GetTick>
 8010e42:	4602      	mov	r2, r0
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d302      	bcc.n	8010e54 <UART_WaitOnFlagUntilTimeout+0x32>
 8010e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d13f      	bne.n	8010ed4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e5c:	e853 3f00 	ldrex	r3, [r3]
 8010e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010e68:	667b      	str	r3, [r7, #100]	; 0x64
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e7a:	e841 2300 	strex	r3, r2, [r1]
 8010e7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1e6      	bne.n	8010e54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3308      	adds	r3, #8
 8010e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e90:	e853 3f00 	ldrex	r3, [r3]
 8010e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e98:	f023 0301 	bic.w	r3, r3, #1
 8010e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3308      	adds	r3, #8
 8010ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ea6:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eae:	e841 2300 	strex	r3, r2, [r1]
 8010eb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1e5      	bne.n	8010e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2220      	movs	r2, #32
 8010ebe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2220      	movs	r2, #32
 8010ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e068      	b.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f003 0304 	and.w	r3, r3, #4
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d050      	beq.n	8010f84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	69db      	ldr	r3, [r3, #28]
 8010ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ef0:	d148      	bne.n	8010f84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010efa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f04:	e853 3f00 	ldrex	r3, [r3]
 8010f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	461a      	mov	r2, r3
 8010f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f22:	e841 2300 	strex	r3, r2, [r1]
 8010f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1e6      	bne.n	8010efc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3308      	adds	r3, #8
 8010f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	e853 3f00 	ldrex	r3, [r3]
 8010f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	f023 0301 	bic.w	r3, r3, #1
 8010f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	3308      	adds	r3, #8
 8010f4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f4e:	623a      	str	r2, [r7, #32]
 8010f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f52:	69f9      	ldr	r1, [r7, #28]
 8010f54:	6a3a      	ldr	r2, [r7, #32]
 8010f56:	e841 2300 	strex	r3, r2, [r1]
 8010f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1e5      	bne.n	8010f2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2220      	movs	r2, #32
 8010f66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2220      	movs	r2, #32
 8010f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2220      	movs	r2, #32
 8010f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8010f80:	2303      	movs	r3, #3
 8010f82:	e010      	b.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	69da      	ldr	r2, [r3, #28]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	4013      	ands	r3, r2
 8010f8e:	68ba      	ldr	r2, [r7, #8]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	bf0c      	ite	eq
 8010f94:	2301      	moveq	r3, #1
 8010f96:	2300      	movne	r3, #0
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	79fb      	ldrb	r3, [r7, #7]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	f43f af48 	beq.w	8010e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3770      	adds	r7, #112	; 0x70
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
	...

08010fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b097      	sub	sp, #92	; 0x5c
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	68ba      	ldr	r2, [r7, #8]
 8010fc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	88fa      	ldrh	r2, [r7, #6]
 8010fc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	88fa      	ldrh	r2, [r7, #6]
 8010fd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fe2:	d10e      	bne.n	8011002 <UART_Start_Receive_IT+0x52>
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d105      	bne.n	8010ff8 <UART_Start_Receive_IT+0x48>
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010ff2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010ff6:	e02d      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	22ff      	movs	r2, #255	; 0xff
 8010ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011000:	e028      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d10d      	bne.n	8011026 <UART_Start_Receive_IT+0x76>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d104      	bne.n	801101c <UART_Start_Receive_IT+0x6c>
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	22ff      	movs	r2, #255	; 0xff
 8011016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801101a:	e01b      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	227f      	movs	r2, #127	; 0x7f
 8011020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011024:	e016      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801102e:	d10d      	bne.n	801104c <UART_Start_Receive_IT+0x9c>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d104      	bne.n	8011042 <UART_Start_Receive_IT+0x92>
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	227f      	movs	r2, #127	; 0x7f
 801103c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011040:	e008      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	223f      	movs	r2, #63	; 0x3f
 8011046:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801104a:	e003      	b.n	8011054 <UART_Start_Receive_IT+0xa4>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2200      	movs	r2, #0
 8011058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2222      	movs	r2, #34	; 0x22
 8011060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	3308      	adds	r3, #8
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801106e:	e853 3f00 	ldrex	r3, [r3]
 8011072:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	f043 0301 	orr.w	r3, r3, #1
 801107a:	657b      	str	r3, [r7, #84]	; 0x54
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3308      	adds	r3, #8
 8011082:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011084:	64ba      	str	r2, [r7, #72]	; 0x48
 8011086:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801108a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801108c:	e841 2300 	strex	r3, r2, [r1]
 8011090:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1e5      	bne.n	8011064 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110a0:	d107      	bne.n	80110b2 <UART_Start_Receive_IT+0x102>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d103      	bne.n	80110b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	4a21      	ldr	r2, [pc, #132]	; (8011134 <UART_Start_Receive_IT+0x184>)
 80110ae:	669a      	str	r2, [r3, #104]	; 0x68
 80110b0:	e002      	b.n	80110b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	4a20      	ldr	r2, [pc, #128]	; (8011138 <UART_Start_Receive_IT+0x188>)
 80110b6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d019      	beq.n	80110f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c8:	e853 3f00 	ldrex	r3, [r3]
 80110cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80110d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110de:	637b      	str	r3, [r7, #52]	; 0x34
 80110e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80110e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110e6:	e841 2300 	strex	r3, r2, [r1]
 80110ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1e6      	bne.n	80110c0 <UART_Start_Receive_IT+0x110>
 80110f2:	e018      	b.n	8011126 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	e853 3f00 	ldrex	r3, [r3]
 8011100:	613b      	str	r3, [r7, #16]
   return(result);
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	f043 0320 	orr.w	r3, r3, #32
 8011108:	653b      	str	r3, [r7, #80]	; 0x50
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	461a      	mov	r2, r3
 8011110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011112:	623b      	str	r3, [r7, #32]
 8011114:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011116:	69f9      	ldr	r1, [r7, #28]
 8011118:	6a3a      	ldr	r2, [r7, #32]
 801111a:	e841 2300 	strex	r3, r2, [r1]
 801111e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1e6      	bne.n	80110f4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	375c      	adds	r7, #92	; 0x5c
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	0801175b 	.word	0x0801175b
 8011138:	080115f5 	.word	0x080115f5

0801113c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b096      	sub	sp, #88	; 0x58
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	4613      	mov	r3, r2
 8011148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	68ba      	ldr	r2, [r7, #8]
 801114e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	88fa      	ldrh	r2, [r7, #6]
 8011154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2200      	movs	r2, #0
 801115c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2222      	movs	r2, #34	; 0x22
 8011164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801116c:	2b00      	cmp	r3, #0
 801116e:	d028      	beq.n	80111c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011174:	4a3e      	ldr	r2, [pc, #248]	; (8011270 <UART_Start_Receive_DMA+0x134>)
 8011176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801117c:	4a3d      	ldr	r2, [pc, #244]	; (8011274 <UART_Start_Receive_DMA+0x138>)
 801117e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011184:	4a3c      	ldr	r2, [pc, #240]	; (8011278 <UART_Start_Receive_DMA+0x13c>)
 8011186:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118c:	2200      	movs	r2, #0
 801118e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3324      	adds	r3, #36	; 0x24
 801119a:	4619      	mov	r1, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111a0:	461a      	mov	r2, r3
 80111a2:	88fb      	ldrh	r3, [r7, #6]
 80111a4:	f7f9 fe1a 	bl	800addc <HAL_DMA_Start_IT>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d009      	beq.n	80111c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2210      	movs	r2, #16
 80111b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2220      	movs	r2, #32
 80111ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	e051      	b.n	8011266 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d018      	beq.n	80111fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d2:	e853 3f00 	ldrex	r3, [r3]
 80111d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80111d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111de:	657b      	str	r3, [r7, #84]	; 0x54
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	461a      	mov	r2, r3
 80111e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80111ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80111ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111f0:	e841 2300 	strex	r3, r2, [r1]
 80111f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80111f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d1e6      	bne.n	80111ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	3308      	adds	r3, #8
 8011202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	e853 3f00 	ldrex	r3, [r3]
 801120a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120e:	f043 0301 	orr.w	r3, r3, #1
 8011212:	653b      	str	r3, [r7, #80]	; 0x50
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	3308      	adds	r3, #8
 801121a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801121c:	637a      	str	r2, [r7, #52]	; 0x34
 801121e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011224:	e841 2300 	strex	r3, r2, [r1]
 8011228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1e5      	bne.n	80111fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	3308      	adds	r3, #8
 8011236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	e853 3f00 	ldrex	r3, [r3]
 801123e:	613b      	str	r3, [r7, #16]
   return(result);
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	3308      	adds	r3, #8
 801124e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011250:	623a      	str	r2, [r7, #32]
 8011252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011254:	69f9      	ldr	r1, [r7, #28]
 8011256:	6a3a      	ldr	r2, [r7, #32]
 8011258:	e841 2300 	strex	r3, r2, [r1]
 801125c:	61bb      	str	r3, [r7, #24]
   return(result);
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1e5      	bne.n	8011230 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3758      	adds	r7, #88	; 0x58
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	08011391 	.word	0x08011391
 8011274:	080114b9 	.word	0x080114b9
 8011278:	080114f7 	.word	0x080114f7

0801127c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801127c:	b480      	push	{r7}
 801127e:	b089      	sub	sp, #36	; 0x24
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	e853 3f00 	ldrex	r3, [r3]
 8011290:	60bb      	str	r3, [r7, #8]
   return(result);
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011298:	61fb      	str	r3, [r7, #28]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	61bb      	str	r3, [r7, #24]
 80112a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a6:	6979      	ldr	r1, [r7, #20]
 80112a8:	69ba      	ldr	r2, [r7, #24]
 80112aa:	e841 2300 	strex	r3, r2, [r1]
 80112ae:	613b      	str	r3, [r7, #16]
   return(result);
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d1e6      	bne.n	8011284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2220      	movs	r2, #32
 80112ba:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80112bc:	bf00      	nop
 80112be:	3724      	adds	r7, #36	; 0x24
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr

080112c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b095      	sub	sp, #84	; 0x54
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d8:	e853 3f00 	ldrex	r3, [r3]
 80112dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80112de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80112e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	461a      	mov	r2, r3
 80112ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ee:	643b      	str	r3, [r7, #64]	; 0x40
 80112f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112f6:	e841 2300 	strex	r3, r2, [r1]
 80112fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d1e6      	bne.n	80112d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	3308      	adds	r3, #8
 8011308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	e853 3f00 	ldrex	r3, [r3]
 8011310:	61fb      	str	r3, [r7, #28]
   return(result);
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	f023 0301 	bic.w	r3, r3, #1
 8011318:	64bb      	str	r3, [r7, #72]	; 0x48
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	3308      	adds	r3, #8
 8011320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801132a:	e841 2300 	strex	r3, r2, [r1]
 801132e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1e5      	bne.n	8011302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801133a:	2b01      	cmp	r3, #1
 801133c:	d118      	bne.n	8011370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	e853 3f00 	ldrex	r3, [r3]
 801134a:	60bb      	str	r3, [r7, #8]
   return(result);
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	f023 0310 	bic.w	r3, r3, #16
 8011352:	647b      	str	r3, [r7, #68]	; 0x44
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	461a      	mov	r2, r3
 801135a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135c:	61bb      	str	r3, [r7, #24]
 801135e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011360:	6979      	ldr	r1, [r7, #20]
 8011362:	69ba      	ldr	r2, [r7, #24]
 8011364:	e841 2300 	strex	r3, r2, [r1]
 8011368:	613b      	str	r3, [r7, #16]
   return(result);
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1e6      	bne.n	801133e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2220      	movs	r2, #32
 8011374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	669a      	str	r2, [r3, #104]	; 0x68
}
 8011384:	bf00      	nop
 8011386:	3754      	adds	r7, #84	; 0x54
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b09c      	sub	sp, #112	; 0x70
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	69db      	ldr	r3, [r3, #28]
 80113a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113a6:	d071      	beq.n	801148c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80113a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113aa:	2200      	movs	r2, #0
 80113ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b8:	e853 3f00 	ldrex	r3, [r3]
 80113bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80113be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80113c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	461a      	mov	r2, r3
 80113cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80113d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80113d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80113d6:	e841 2300 	strex	r3, r2, [r1]
 80113da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80113dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1e6      	bne.n	80113b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	3308      	adds	r3, #8
 80113e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ec:	e853 3f00 	ldrex	r3, [r3]
 80113f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80113f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f4:	f023 0301 	bic.w	r3, r3, #1
 80113f8:	667b      	str	r3, [r7, #100]	; 0x64
 80113fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	3308      	adds	r3, #8
 8011400:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011402:	647a      	str	r2, [r7, #68]	; 0x44
 8011404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801140a:	e841 2300 	strex	r3, r2, [r1]
 801140e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1e5      	bne.n	80113e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	3308      	adds	r3, #8
 801141c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	e853 3f00 	ldrex	r3, [r3]
 8011424:	623b      	str	r3, [r7, #32]
   return(result);
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801142c:	663b      	str	r3, [r7, #96]	; 0x60
 801142e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	3308      	adds	r3, #8
 8011434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011436:	633a      	str	r2, [r7, #48]	; 0x30
 8011438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801143a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801143c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801143e:	e841 2300 	strex	r3, r2, [r1]
 8011442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1e5      	bne.n	8011416 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801144a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801144c:	2220      	movs	r2, #32
 801144e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011456:	2b01      	cmp	r3, #1
 8011458:	d118      	bne.n	801148c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801145a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	e853 3f00 	ldrex	r3, [r3]
 8011466:	60fb      	str	r3, [r7, #12]
   return(result);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f023 0310 	bic.w	r3, r3, #16
 801146e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	461a      	mov	r2, r3
 8011476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011478:	61fb      	str	r3, [r7, #28]
 801147a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147c:	69b9      	ldr	r1, [r7, #24]
 801147e:	69fa      	ldr	r2, [r7, #28]
 8011480:	e841 2300 	strex	r3, r2, [r1]
 8011484:	617b      	str	r3, [r7, #20]
   return(result);
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d1e6      	bne.n	801145a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801148c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801148e:	2200      	movs	r2, #0
 8011490:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011496:	2b01      	cmp	r3, #1
 8011498:	d107      	bne.n	80114aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801149a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801149c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80114a0:	4619      	mov	r1, r3
 80114a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114a4:	f7ff f974 	bl	8010790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80114a8:	e002      	b.n	80114b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80114aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114ac:	f7f2 fe24 	bl	80040f8 <HAL_UART_RxCpltCallback>
}
 80114b0:	bf00      	nop
 80114b2:	3770      	adds	r7, #112	; 0x70
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2201      	movs	r2, #1
 80114ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d109      	bne.n	80114e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80114da:	085b      	lsrs	r3, r3, #1
 80114dc:	b29b      	uxth	r3, r3
 80114de:	4619      	mov	r1, r3
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff f955 	bl	8010790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80114e6:	e002      	b.n	80114ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f7ff f947 	bl	801077c <HAL_UART_RxHalfCpltCallback>
}
 80114ee:	bf00      	nop
 80114f0:	3710      	adds	r7, #16
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b086      	sub	sp, #24
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011502:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011508:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011510:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801151c:	2b80      	cmp	r3, #128	; 0x80
 801151e:	d109      	bne.n	8011534 <UART_DMAError+0x3e>
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	2b21      	cmp	r3, #33	; 0x21
 8011524:	d106      	bne.n	8011534 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	2200      	movs	r2, #0
 801152a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801152e:	6978      	ldr	r0, [r7, #20]
 8011530:	f7ff fea4 	bl	801127c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801153e:	2b40      	cmp	r3, #64	; 0x40
 8011540:	d109      	bne.n	8011556 <UART_DMAError+0x60>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b22      	cmp	r3, #34	; 0x22
 8011546:	d106      	bne.n	8011556 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2200      	movs	r2, #0
 801154c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011550:	6978      	ldr	r0, [r7, #20]
 8011552:	f7ff feb9 	bl	80112c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801155c:	f043 0210 	orr.w	r2, r3, #16
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011566:	6978      	ldr	r0, [r7, #20]
 8011568:	f7f2 fe68 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801156c:	bf00      	nop
 801156e:	3718      	adds	r7, #24
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}

08011574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2200      	movs	r2, #0
 801158e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f7f2 fe52 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011598:	bf00      	nop
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b088      	sub	sp, #32
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	e853 3f00 	ldrex	r3, [r3]
 80115b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115bc:	61fb      	str	r3, [r7, #28]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	461a      	mov	r2, r3
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	61bb      	str	r3, [r7, #24]
 80115c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ca:	6979      	ldr	r1, [r7, #20]
 80115cc:	69ba      	ldr	r2, [r7, #24]
 80115ce:	e841 2300 	strex	r3, r2, [r1]
 80115d2:	613b      	str	r3, [r7, #16]
   return(result);
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1e6      	bne.n	80115a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2220      	movs	r2, #32
 80115de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7ff f8be 	bl	8010768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115ec:	bf00      	nop
 80115ee:	3720      	adds	r7, #32
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b096      	sub	sp, #88	; 0x58
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011602:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801160c:	2b22      	cmp	r3, #34	; 0x22
 801160e:	f040 8098 	bne.w	8011742 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011618:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801161c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8011620:	b2d9      	uxtb	r1, r3
 8011622:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011626:	b2da      	uxtb	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801162c:	400a      	ands	r2, r1
 801162e:	b2d2      	uxtb	r2, r2
 8011630:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011636:	1c5a      	adds	r2, r3, #1
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011642:	b29b      	uxth	r3, r3
 8011644:	3b01      	subs	r3, #1
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011654:	b29b      	uxth	r3, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	d17b      	bne.n	8011752 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	e853 3f00 	ldrex	r3, [r3]
 8011666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801166e:	653b      	str	r3, [r7, #80]	; 0x50
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	461a      	mov	r2, r3
 8011676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011678:	647b      	str	r3, [r7, #68]	; 0x44
 801167a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801167c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801167e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011680:	e841 2300 	strex	r3, r2, [r1]
 8011684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1e6      	bne.n	801165a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3308      	adds	r3, #8
 8011692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	e853 3f00 	ldrex	r3, [r3]
 801169a:	623b      	str	r3, [r7, #32]
   return(result);
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	f023 0301 	bic.w	r3, r3, #1
 80116a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	3308      	adds	r3, #8
 80116aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116ac:	633a      	str	r2, [r7, #48]	; 0x30
 80116ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b4:	e841 2300 	strex	r3, r2, [r1]
 80116b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1e5      	bne.n	801168c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2220      	movs	r2, #32
 80116c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d12e      	bne.n	801173a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	e853 3f00 	ldrex	r3, [r3]
 80116ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f023 0310 	bic.w	r3, r3, #16
 80116f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	461a      	mov	r2, r3
 80116fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011700:	61fb      	str	r3, [r7, #28]
 8011702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011704:	69b9      	ldr	r1, [r7, #24]
 8011706:	69fa      	ldr	r2, [r7, #28]
 8011708:	e841 2300 	strex	r3, r2, [r1]
 801170c:	617b      	str	r3, [r7, #20]
   return(result);
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1e6      	bne.n	80116e2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	69db      	ldr	r3, [r3, #28]
 801171a:	f003 0310 	and.w	r3, r3, #16
 801171e:	2b10      	cmp	r3, #16
 8011720:	d103      	bne.n	801172a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2210      	movs	r2, #16
 8011728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011730:	4619      	mov	r1, r3
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7ff f82c 	bl	8010790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011738:	e00b      	b.n	8011752 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7f2 fcdc 	bl	80040f8 <HAL_UART_RxCpltCallback>
}
 8011740:	e007      	b.n	8011752 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	699a      	ldr	r2, [r3, #24]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f042 0208 	orr.w	r2, r2, #8
 8011750:	619a      	str	r2, [r3, #24]
}
 8011752:	bf00      	nop
 8011754:	3758      	adds	r7, #88	; 0x58
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b096      	sub	sp, #88	; 0x58
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011768:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011772:	2b22      	cmp	r3, #34	; 0x22
 8011774:	f040 8098 	bne.w	80118a8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011786:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8011788:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801178c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011790:	4013      	ands	r3, r2
 8011792:	b29a      	uxth	r2, r3
 8011794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011796:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801179c:	1c9a      	adds	r2, r3, #2
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	3b01      	subs	r3, #1
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d17b      	bne.n	80118b8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c8:	e853 3f00 	ldrex	r3, [r3]
 80117cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80117d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117de:	643b      	str	r3, [r7, #64]	; 0x40
 80117e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117e6:	e841 2300 	strex	r3, r2, [r1]
 80117ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1e6      	bne.n	80117c0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3308      	adds	r3, #8
 80117f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fa:	6a3b      	ldr	r3, [r7, #32]
 80117fc:	e853 3f00 	ldrex	r3, [r3]
 8011800:	61fb      	str	r3, [r7, #28]
   return(result);
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	f023 0301 	bic.w	r3, r3, #1
 8011808:	64bb      	str	r3, [r7, #72]	; 0x48
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	3308      	adds	r3, #8
 8011810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1e5      	bne.n	80117f2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2220      	movs	r2, #32
 801182a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801183e:	2b01      	cmp	r3, #1
 8011840:	d12e      	bne.n	80118a0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	e853 3f00 	ldrex	r3, [r3]
 8011854:	60bb      	str	r3, [r7, #8]
   return(result);
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	f023 0310 	bic.w	r3, r3, #16
 801185c:	647b      	str	r3, [r7, #68]	; 0x44
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	461a      	mov	r2, r3
 8011864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011866:	61bb      	str	r3, [r7, #24]
 8011868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186a:	6979      	ldr	r1, [r7, #20]
 801186c:	69ba      	ldr	r2, [r7, #24]
 801186e:	e841 2300 	strex	r3, r2, [r1]
 8011872:	613b      	str	r3, [r7, #16]
   return(result);
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d1e6      	bne.n	8011848 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	69db      	ldr	r3, [r3, #28]
 8011880:	f003 0310 	and.w	r3, r3, #16
 8011884:	2b10      	cmp	r3, #16
 8011886:	d103      	bne.n	8011890 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2210      	movs	r2, #16
 801188e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011896:	4619      	mov	r1, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7fe ff79 	bl	8010790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801189e:	e00b      	b.n	80118b8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7f2 fc29 	bl	80040f8 <HAL_UART_RxCpltCallback>
}
 80118a6:	e007      	b.n	80118b8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	699a      	ldr	r2, [r3, #24]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f042 0208 	orr.w	r2, r2, #8
 80118b6:	619a      	str	r2, [r3, #24]
}
 80118b8:	bf00      	nop
 80118ba:	3758      	adds	r7, #88	; 0x58
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80118ca:	2300      	movs	r3, #0
 80118cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80118ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d2:	2b84      	cmp	r3, #132	; 0x84
 80118d4:	d005      	beq.n	80118e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80118d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	3303      	adds	r3, #3
 80118e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80118e2:	68fb      	ldr	r3, [r7, #12]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3714      	adds	r7, #20
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118f6:	f3ef 8305 	mrs	r3, IPSR
 80118fa:	607b      	str	r3, [r7, #4]
  return(result);
 80118fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80118fe:	2b00      	cmp	r3, #0
 8011900:	bf14      	ite	ne
 8011902:	2301      	movne	r3, #1
 8011904:	2300      	moveq	r3, #0
 8011906:	b2db      	uxtb	r3, r3
}
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011918:	f001 fafa 	bl	8012f10 <vTaskStartScheduler>
  
  return osOK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	bd80      	pop	{r7, pc}

08011922 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011924:	b089      	sub	sp, #36	; 0x24
 8011926:	af04      	add	r7, sp, #16
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d020      	beq.n	8011976 <osThreadCreate+0x54>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d01c      	beq.n	8011976 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685c      	ldr	r4, [r3, #4]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	691e      	ldr	r6, [r3, #16]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801194e:	4618      	mov	r0, r3
 8011950:	f7ff ffb6 	bl	80118c0 <makeFreeRtosPriority>
 8011954:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801195e:	9202      	str	r2, [sp, #8]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	9100      	str	r1, [sp, #0]
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	4632      	mov	r2, r6
 8011968:	4629      	mov	r1, r5
 801196a:	4620      	mov	r0, r4
 801196c:	f001 f864 	bl	8012a38 <xTaskCreateStatic>
 8011970:	4603      	mov	r3, r0
 8011972:	60fb      	str	r3, [r7, #12]
 8011974:	e01c      	b.n	80119b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685c      	ldr	r4, [r3, #4]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011982:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801198a:	4618      	mov	r0, r3
 801198c:	f7ff ff98 	bl	80118c0 <makeFreeRtosPriority>
 8011990:	4602      	mov	r2, r0
 8011992:	f107 030c 	add.w	r3, r7, #12
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	9200      	str	r2, [sp, #0]
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	4632      	mov	r2, r6
 801199e:	4629      	mov	r1, r5
 80119a0:	4620      	mov	r0, r4
 80119a2:	f001 f8ac 	bl	8012afe <xTaskCreate>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d001      	beq.n	80119b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80119ac:	2300      	movs	r3, #0
 80119ae:	e000      	b.n	80119b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80119b0:	68fb      	ldr	r3, [r7, #12]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b084      	sub	sp, #16
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <osDelay+0x16>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e000      	b.n	80119d2 <osDelay+0x18>
 80119d0:	2301      	movs	r3, #1
 80119d2:	4618      	mov	r0, r3
 80119d4:	f001 fa66 	bl	8012ea4 <vTaskDelay>
  
  return osOK;
 80119d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b082      	sub	sp, #8
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d007      	beq.n	8011a02 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	4619      	mov	r1, r3
 80119f8:	2001      	movs	r0, #1
 80119fa:	f000 fb84 	bl	8012106 <xQueueCreateMutexStatic>
 80119fe:	4603      	mov	r3, r0
 8011a00:	e003      	b.n	8011a0a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011a02:	2001      	movs	r0, #1
 8011a04:	f000 fb67 	bl	80120d6 <xQueueCreateMutex>
 8011a08:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
	...

08011a14 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <osMutexWait+0x18>
    return osErrorParameter;
 8011a28:	2380      	movs	r3, #128	; 0x80
 8011a2a:	e03a      	b.n	8011aa2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a36:	d103      	bne.n	8011a40 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011a38:	f04f 33ff 	mov.w	r3, #4294967295
 8011a3c:	60fb      	str	r3, [r7, #12]
 8011a3e:	e009      	b.n	8011a54 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d006      	beq.n	8011a54 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <osMutexWait+0x40>
      ticks = 1;
 8011a50:	2301      	movs	r3, #1
 8011a52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011a54:	f7ff ff4c 	bl	80118f0 <inHandlerMode>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d017      	beq.n	8011a8e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011a5e:	f107 0308 	add.w	r3, r7, #8
 8011a62:	461a      	mov	r2, r3
 8011a64:	2100      	movs	r1, #0
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fe18 	bl	801269c <xQueueReceiveFromISR>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d001      	beq.n	8011a76 <osMutexWait+0x62>
      return osErrorOS;
 8011a72:	23ff      	movs	r3, #255	; 0xff
 8011a74:	e015      	b.n	8011aa2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d011      	beq.n	8011aa0 <osMutexWait+0x8c>
 8011a7c:	4b0b      	ldr	r3, [pc, #44]	; (8011aac <osMutexWait+0x98>)
 8011a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	e008      	b.n	8011aa0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011a8e:	68f9      	ldr	r1, [r7, #12]
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fcef 	bl	8012474 <xQueueSemaphoreTake>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d001      	beq.n	8011aa0 <osMutexWait+0x8c>
    return osErrorOS;
 8011a9c:	23ff      	movs	r3, #255	; 0xff
 8011a9e:	e000      	b.n	8011aa2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	e000ed04 	.word	0xe000ed04

08011ab0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011abc:	2300      	movs	r3, #0
 8011abe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011ac0:	f7ff ff16 	bl	80118f0 <inHandlerMode>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d016      	beq.n	8011af8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011aca:	f107 0308 	add.w	r3, r7, #8
 8011ace:	4619      	mov	r1, r3
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fc39 	bl	8012348 <xQueueGiveFromISR>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d001      	beq.n	8011ae0 <osMutexRelease+0x30>
      return osErrorOS;
 8011adc:	23ff      	movs	r3, #255	; 0xff
 8011ade:	e017      	b.n	8011b10 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d013      	beq.n	8011b0e <osMutexRelease+0x5e>
 8011ae6:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <osMutexRelease+0x68>)
 8011ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	f3bf 8f6f 	isb	sy
 8011af6:	e00a      	b.n	8011b0e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011af8:	2300      	movs	r3, #0
 8011afa:	2200      	movs	r2, #0
 8011afc:	2100      	movs	r1, #0
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fb1c 	bl	801213c <xQueueGenericSend>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d001      	beq.n	8011b0e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011b0a:	23ff      	movs	r3, #255	; 0xff
 8011b0c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	e000ed04 	.word	0xe000ed04

08011b1c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af02      	add	r7, sp, #8
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00f      	beq.n	8011b4e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d10a      	bne.n	8011b4a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	2203      	movs	r2, #3
 8011b3a:	9200      	str	r2, [sp, #0]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2100      	movs	r1, #0
 8011b40:	2001      	movs	r0, #1
 8011b42:	f000 f9cb 	bl	8011edc <xQueueGenericCreateStatic>
 8011b46:	4603      	mov	r3, r0
 8011b48:	e016      	b.n	8011b78 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	e014      	b.n	8011b78 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d110      	bne.n	8011b76 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011b54:	2203      	movs	r2, #3
 8011b56:	2100      	movs	r1, #0
 8011b58:	2001      	movs	r0, #1
 8011b5a:	f000 fa41 	bl	8011fe0 <xQueueGenericCreate>
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d005      	beq.n	8011b72 <osSemaphoreCreate+0x56>
 8011b66:	2300      	movs	r3, #0
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 fae5 	bl	801213c <xQueueGenericSend>
      return sema;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	e000      	b.n	8011b78 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011b76:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3710      	adds	r7, #16
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d101      	bne.n	8011b98 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011b94:	2380      	movs	r3, #128	; 0x80
 8011b96:	e03a      	b.n	8011c0e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba2:	d103      	bne.n	8011bac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba8:	60fb      	str	r3, [r7, #12]
 8011baa:	e009      	b.n	8011bc0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d006      	beq.n	8011bc0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <osSemaphoreWait+0x40>
      ticks = 1;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011bc0:	f7ff fe96 	bl	80118f0 <inHandlerMode>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d017      	beq.n	8011bfa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011bca:	f107 0308 	add.w	r3, r7, #8
 8011bce:	461a      	mov	r2, r3
 8011bd0:	2100      	movs	r1, #0
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f000 fd62 	bl	801269c <xQueueReceiveFromISR>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d001      	beq.n	8011be2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011bde:	23ff      	movs	r3, #255	; 0xff
 8011be0:	e015      	b.n	8011c0e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d011      	beq.n	8011c0c <osSemaphoreWait+0x8c>
 8011be8:	4b0b      	ldr	r3, [pc, #44]	; (8011c18 <osSemaphoreWait+0x98>)
 8011bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	e008      	b.n	8011c0c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011bfa:	68f9      	ldr	r1, [r7, #12]
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f000 fc39 	bl	8012474 <xQueueSemaphoreTake>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d001      	beq.n	8011c0c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011c08:	23ff      	movs	r3, #255	; 0xff
 8011c0a:	e000      	b.n	8011c0e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011c0c:	2300      	movs	r3, #0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	e000ed04 	.word	0xe000ed04

08011c1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c24:	2300      	movs	r3, #0
 8011c26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011c2c:	f7ff fe60 	bl	80118f0 <inHandlerMode>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d016      	beq.n	8011c64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c36:	f107 0308 	add.w	r3, r7, #8
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fb83 	bl	8012348 <xQueueGiveFromISR>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d001      	beq.n	8011c4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011c48:	23ff      	movs	r3, #255	; 0xff
 8011c4a:	e017      	b.n	8011c7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d013      	beq.n	8011c7a <osSemaphoreRelease+0x5e>
 8011c52:	4b0c      	ldr	r3, [pc, #48]	; (8011c84 <osSemaphoreRelease+0x68>)
 8011c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	e00a      	b.n	8011c7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011c64:	2300      	movs	r3, #0
 8011c66:	2200      	movs	r2, #0
 8011c68:	2100      	movs	r1, #0
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fa66 	bl	801213c <xQueueGenericSend>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d001      	beq.n	8011c7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011c76:	23ff      	movs	r3, #255	; 0xff
 8011c78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	e000ed04 	.word	0xe000ed04

08011c88 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fd89 	bl	80127a8 <uxQueueMessagesWaiting>
 8011c96:	4603      	mov	r3, r0
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f103 0208 	add.w	r2, r3, #8
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f103 0208 	add.w	r2, r3, #8
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f103 0208 	add.w	r2, r3, #8
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011cee:	bf00      	nop
 8011cf0:	370c      	adds	r7, #12
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr

08011cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011cfa:	b480      	push	{r7}
 8011cfc:	b085      	sub	sp, #20
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
 8011d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	683a      	ldr	r2, [r7, #0]
 8011d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	601a      	str	r2, [r3, #0]
}
 8011d36:	bf00      	nop
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d42:	b480      	push	{r7}
 8011d44:	b085      	sub	sp, #20
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d103      	bne.n	8011d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	691b      	ldr	r3, [r3, #16]
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	e00c      	b.n	8011d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3308      	adds	r3, #8
 8011d66:	60fb      	str	r3, [r7, #12]
 8011d68:	e002      	b.n	8011d70 <vListInsert+0x2e>
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	60fb      	str	r3, [r7, #12]
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d2f6      	bcs.n	8011d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	685a      	ldr	r2, [r3, #4]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	683a      	ldr	r2, [r7, #0]
 8011d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	683a      	ldr	r2, [r7, #0]
 8011d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	1c5a      	adds	r2, r3, #1
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	601a      	str	r2, [r3, #0]
}
 8011da8:	bf00      	nop
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	6892      	ldr	r2, [r2, #8]
 8011dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	6852      	ldr	r2, [r2, #4]
 8011dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d103      	bne.n	8011de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689a      	ldr	r2, [r3, #8]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	1e5a      	subs	r2, r3, #1
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3714      	adds	r7, #20
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d10c      	bne.n	8011e36 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e20:	b672      	cpsid	i
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	f3bf 8f4f 	dsb	sy
 8011e2e:	b662      	cpsie	i
 8011e30:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011e32:	bf00      	nop
 8011e34:	e7fe      	b.n	8011e34 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011e36:	f001 fff1 	bl	8013e1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e42:	68f9      	ldr	r1, [r7, #12]
 8011e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e46:	fb01 f303 	mul.w	r3, r1, r3
 8011e4a:	441a      	add	r2, r3
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e66:	3b01      	subs	r3, #1
 8011e68:	68f9      	ldr	r1, [r7, #12]
 8011e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e6c:	fb01 f303 	mul.w	r3, r1, r3
 8011e70:	441a      	add	r2, r3
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	22ff      	movs	r2, #255	; 0xff
 8011e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	22ff      	movs	r2, #255	; 0xff
 8011e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d114      	bne.n	8011eb6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d01a      	beq.n	8011eca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	3310      	adds	r3, #16
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f001 faa7 	bl	80133ec <xTaskRemoveFromEventList>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d012      	beq.n	8011eca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011ea4:	4b0c      	ldr	r3, [pc, #48]	; (8011ed8 <xQueueGenericReset+0xd0>)
 8011ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eaa:	601a      	str	r2, [r3, #0]
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	f3bf 8f6f 	isb	sy
 8011eb4:	e009      	b.n	8011eca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	3310      	adds	r3, #16
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff fef0 	bl	8011ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3324      	adds	r3, #36	; 0x24
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7ff feeb 	bl	8011ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011eca:	f001 ffdb 	bl	8013e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011ece:	2301      	movs	r3, #1
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	e000ed04 	.word	0xe000ed04

08011edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b08e      	sub	sp, #56	; 0x38
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	607a      	str	r2, [r7, #4]
 8011ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10c      	bne.n	8011f0a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f06:	bf00      	nop
 8011f08:	e7fe      	b.n	8011f08 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d10c      	bne.n	8011f2a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8011f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f14:	b672      	cpsid	i
 8011f16:	f383 8811 	msr	BASEPRI, r3
 8011f1a:	f3bf 8f6f 	isb	sy
 8011f1e:	f3bf 8f4f 	dsb	sy
 8011f22:	b662      	cpsie	i
 8011f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011f26:	bf00      	nop
 8011f28:	e7fe      	b.n	8011f28 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d002      	beq.n	8011f36 <xQueueGenericCreateStatic+0x5a>
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <xQueueGenericCreateStatic+0x5e>
 8011f36:	2301      	movs	r3, #1
 8011f38:	e000      	b.n	8011f3c <xQueueGenericCreateStatic+0x60>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10c      	bne.n	8011f5a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8011f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	623b      	str	r3, [r7, #32]
}
 8011f56:	bf00      	nop
 8011f58:	e7fe      	b.n	8011f58 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <xQueueGenericCreateStatic+0x8a>
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <xQueueGenericCreateStatic+0x8e>
 8011f66:	2301      	movs	r3, #1
 8011f68:	e000      	b.n	8011f6c <xQueueGenericCreateStatic+0x90>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10c      	bne.n	8011f8a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f74:	b672      	cpsid	i
 8011f76:	f383 8811 	msr	BASEPRI, r3
 8011f7a:	f3bf 8f6f 	isb	sy
 8011f7e:	f3bf 8f4f 	dsb	sy
 8011f82:	b662      	cpsie	i
 8011f84:	61fb      	str	r3, [r7, #28]
}
 8011f86:	bf00      	nop
 8011f88:	e7fe      	b.n	8011f88 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011f8a:	2348      	movs	r3, #72	; 0x48
 8011f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b48      	cmp	r3, #72	; 0x48
 8011f92:	d00c      	beq.n	8011fae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f98:	b672      	cpsid	i
 8011f9a:	f383 8811 	msr	BASEPRI, r3
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	f3bf 8f4f 	dsb	sy
 8011fa6:	b662      	cpsie	i
 8011fa8:	61bb      	str	r3, [r7, #24]
}
 8011faa:	bf00      	nop
 8011fac:	e7fe      	b.n	8011fac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011fae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00d      	beq.n	8011fd6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011fc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	9300      	str	r3, [sp, #0]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	68b9      	ldr	r1, [r7, #8]
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f000 f847 	bl	8012064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3730      	adds	r7, #48	; 0x30
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b08a      	sub	sp, #40	; 0x28
 8011fe4:	af02      	add	r7, sp, #8
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	4613      	mov	r3, r2
 8011fec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10c      	bne.n	801200e <xQueueGenericCreate+0x2e>
	__asm volatile
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	b672      	cpsid	i
 8011ffa:	f383 8811 	msr	BASEPRI, r3
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f3bf 8f4f 	dsb	sy
 8012006:	b662      	cpsie	i
 8012008:	613b      	str	r3, [r7, #16]
}
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d102      	bne.n	801201a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012014:	2300      	movs	r3, #0
 8012016:	61fb      	str	r3, [r7, #28]
 8012018:	e004      	b.n	8012024 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	fb02 f303 	mul.w	r3, r2, r3
 8012022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	3348      	adds	r3, #72	; 0x48
 8012028:	4618      	mov	r0, r3
 801202a:	f002 f823 	bl	8014074 <pvPortMalloc>
 801202e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d011      	beq.n	801205a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	3348      	adds	r3, #72	; 0x48
 801203e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	2200      	movs	r2, #0
 8012044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012048:	79fa      	ldrb	r2, [r7, #7]
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	4613      	mov	r3, r2
 8012050:	697a      	ldr	r2, [r7, #20]
 8012052:	68b9      	ldr	r1, [r7, #8]
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f000 f805 	bl	8012064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801205a:	69bb      	ldr	r3, [r7, #24]
	}
 801205c:	4618      	mov	r0, r3
 801205e:	3720      	adds	r7, #32
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d103      	bne.n	8012080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	69ba      	ldr	r2, [r7, #24]
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	e002      	b.n	8012086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	68fa      	ldr	r2, [r7, #12]
 801208a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	68ba      	ldr	r2, [r7, #8]
 8012090:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012092:	2101      	movs	r1, #1
 8012094:	69b8      	ldr	r0, [r7, #24]
 8012096:	f7ff feb7 	bl	8011e08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801209a:	bf00      	nop
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b082      	sub	sp, #8
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00e      	beq.n	80120ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80120c2:	2300      	movs	r3, #0
 80120c4:	2200      	movs	r2, #0
 80120c6:	2100      	movs	r1, #0
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 f837 	bl	801213c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80120ce:	bf00      	nop
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b086      	sub	sp, #24
 80120da:	af00      	add	r7, sp, #0
 80120dc:	4603      	mov	r3, r0
 80120de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80120e0:	2301      	movs	r3, #1
 80120e2:	617b      	str	r3, [r7, #20]
 80120e4:	2300      	movs	r3, #0
 80120e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80120e8:	79fb      	ldrb	r3, [r7, #7]
 80120ea:	461a      	mov	r2, r3
 80120ec:	6939      	ldr	r1, [r7, #16]
 80120ee:	6978      	ldr	r0, [r7, #20]
 80120f0:	f7ff ff76 	bl	8011fe0 <xQueueGenericCreate>
 80120f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ff ffd3 	bl	80120a2 <prvInitialiseMutex>

		return xNewQueue;
 80120fc:	68fb      	ldr	r3, [r7, #12]
	}
 80120fe:	4618      	mov	r0, r3
 8012100:	3718      	adds	r7, #24
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012106:	b580      	push	{r7, lr}
 8012108:	b088      	sub	sp, #32
 801210a:	af02      	add	r7, sp, #8
 801210c:	4603      	mov	r3, r0
 801210e:	6039      	str	r1, [r7, #0]
 8012110:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012112:	2301      	movs	r3, #1
 8012114:	617b      	str	r3, [r7, #20]
 8012116:	2300      	movs	r3, #0
 8012118:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801211a:	79fb      	ldrb	r3, [r7, #7]
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2200      	movs	r2, #0
 8012122:	6939      	ldr	r1, [r7, #16]
 8012124:	6978      	ldr	r0, [r7, #20]
 8012126:	f7ff fed9 	bl	8011edc <xQueueGenericCreateStatic>
 801212a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7ff ffb8 	bl	80120a2 <prvInitialiseMutex>

		return xNewQueue;
 8012132:	68fb      	ldr	r3, [r7, #12]
	}
 8012134:	4618      	mov	r0, r3
 8012136:	3718      	adds	r7, #24
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b08e      	sub	sp, #56	; 0x38
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
 8012148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801214a:	2300      	movs	r3, #0
 801214c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10c      	bne.n	8012172 <xQueueGenericSend+0x36>
	__asm volatile
 8012158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215c:	b672      	cpsid	i
 801215e:	f383 8811 	msr	BASEPRI, r3
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	f3bf 8f4f 	dsb	sy
 801216a:	b662      	cpsie	i
 801216c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801216e:	bf00      	nop
 8012170:	e7fe      	b.n	8012170 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d103      	bne.n	8012180 <xQueueGenericSend+0x44>
 8012178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801217c:	2b00      	cmp	r3, #0
 801217e:	d101      	bne.n	8012184 <xQueueGenericSend+0x48>
 8012180:	2301      	movs	r3, #1
 8012182:	e000      	b.n	8012186 <xQueueGenericSend+0x4a>
 8012184:	2300      	movs	r3, #0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d10c      	bne.n	80121a4 <xQueueGenericSend+0x68>
	__asm volatile
 801218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218e:	b672      	cpsid	i
 8012190:	f383 8811 	msr	BASEPRI, r3
 8012194:	f3bf 8f6f 	isb	sy
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	b662      	cpsie	i
 801219e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121a0:	bf00      	nop
 80121a2:	e7fe      	b.n	80121a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d103      	bne.n	80121b2 <xQueueGenericSend+0x76>
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d101      	bne.n	80121b6 <xQueueGenericSend+0x7a>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <xQueueGenericSend+0x7c>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d10c      	bne.n	80121d6 <xQueueGenericSend+0x9a>
	__asm volatile
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	b672      	cpsid	i
 80121c2:	f383 8811 	msr	BASEPRI, r3
 80121c6:	f3bf 8f6f 	isb	sy
 80121ca:	f3bf 8f4f 	dsb	sy
 80121ce:	b662      	cpsie	i
 80121d0:	623b      	str	r3, [r7, #32]
}
 80121d2:	bf00      	nop
 80121d4:	e7fe      	b.n	80121d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121d6:	f001 fad1 	bl	801377c <xTaskGetSchedulerState>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d102      	bne.n	80121e6 <xQueueGenericSend+0xaa>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <xQueueGenericSend+0xae>
 80121e6:	2301      	movs	r3, #1
 80121e8:	e000      	b.n	80121ec <xQueueGenericSend+0xb0>
 80121ea:	2300      	movs	r3, #0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10c      	bne.n	801220a <xQueueGenericSend+0xce>
	__asm volatile
 80121f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f4:	b672      	cpsid	i
 80121f6:	f383 8811 	msr	BASEPRI, r3
 80121fa:	f3bf 8f6f 	isb	sy
 80121fe:	f3bf 8f4f 	dsb	sy
 8012202:	b662      	cpsie	i
 8012204:	61fb      	str	r3, [r7, #28]
}
 8012206:	bf00      	nop
 8012208:	e7fe      	b.n	8012208 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801220a:	f001 fe07 	bl	8013e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012216:	429a      	cmp	r2, r3
 8012218:	d302      	bcc.n	8012220 <xQueueGenericSend+0xe4>
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	2b02      	cmp	r3, #2
 801221e:	d129      	bne.n	8012274 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012220:	683a      	ldr	r2, [r7, #0]
 8012222:	68b9      	ldr	r1, [r7, #8]
 8012224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012226:	f000 faf7 	bl	8012818 <prvCopyDataToQueue>
 801222a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	d010      	beq.n	8012256 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012236:	3324      	adds	r3, #36	; 0x24
 8012238:	4618      	mov	r0, r3
 801223a:	f001 f8d7 	bl	80133ec <xTaskRemoveFromEventList>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d013      	beq.n	801226c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012244:	4b3f      	ldr	r3, [pc, #252]	; (8012344 <xQueueGenericSend+0x208>)
 8012246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801224a:	601a      	str	r2, [r3, #0]
 801224c:	f3bf 8f4f 	dsb	sy
 8012250:	f3bf 8f6f 	isb	sy
 8012254:	e00a      	b.n	801226c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012258:	2b00      	cmp	r3, #0
 801225a:	d007      	beq.n	801226c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801225c:	4b39      	ldr	r3, [pc, #228]	; (8012344 <xQueueGenericSend+0x208>)
 801225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012262:	601a      	str	r2, [r3, #0]
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801226c:	f001 fe0a 	bl	8013e84 <vPortExitCritical>
				return pdPASS;
 8012270:	2301      	movs	r3, #1
 8012272:	e063      	b.n	801233c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d103      	bne.n	8012282 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801227a:	f001 fe03 	bl	8013e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801227e:	2300      	movs	r3, #0
 8012280:	e05c      	b.n	801233c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012288:	f107 0314 	add.w	r3, r7, #20
 801228c:	4618      	mov	r0, r3
 801228e:	f001 f911 	bl	80134b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012292:	2301      	movs	r3, #1
 8012294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012296:	f001 fdf5 	bl	8013e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801229a:	f000 fea7 	bl	8012fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801229e:	f001 fdbd 	bl	8013e1c <vPortEnterCritical>
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122a8:	b25b      	sxtb	r3, r3
 80122aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ae:	d103      	bne.n	80122b8 <xQueueGenericSend+0x17c>
 80122b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b2:	2200      	movs	r2, #0
 80122b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122be:	b25b      	sxtb	r3, r3
 80122c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122c4:	d103      	bne.n	80122ce <xQueueGenericSend+0x192>
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	2200      	movs	r2, #0
 80122ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122ce:	f001 fdd9 	bl	8013e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122d2:	1d3a      	adds	r2, r7, #4
 80122d4:	f107 0314 	add.w	r3, r7, #20
 80122d8:	4611      	mov	r1, r2
 80122da:	4618      	mov	r0, r3
 80122dc:	f001 f900 	bl	80134e0 <xTaskCheckForTimeOut>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d124      	bne.n	8012330 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80122e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122e8:	f000 fb8e 	bl	8012a08 <prvIsQueueFull>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d018      	beq.n	8012324 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80122f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f4:	3310      	adds	r3, #16
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	4611      	mov	r1, r2
 80122fa:	4618      	mov	r0, r3
 80122fc:	f001 f850 	bl	80133a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012302:	f000 fb19 	bl	8012938 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012306:	f000 fe7f 	bl	8013008 <xTaskResumeAll>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	f47f af7c 	bne.w	801220a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012312:	4b0c      	ldr	r3, [pc, #48]	; (8012344 <xQueueGenericSend+0x208>)
 8012314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012318:	601a      	str	r2, [r3, #0]
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	f3bf 8f6f 	isb	sy
 8012322:	e772      	b.n	801220a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012326:	f000 fb07 	bl	8012938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801232a:	f000 fe6d 	bl	8013008 <xTaskResumeAll>
 801232e:	e76c      	b.n	801220a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012332:	f000 fb01 	bl	8012938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012336:	f000 fe67 	bl	8013008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801233a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801233c:	4618      	mov	r0, r3
 801233e:	3738      	adds	r7, #56	; 0x38
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	e000ed04 	.word	0xe000ed04

08012348 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b08e      	sub	sp, #56	; 0x38
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	2b00      	cmp	r3, #0
 801235a:	d10c      	bne.n	8012376 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012360:	b672      	cpsid	i
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	b662      	cpsie	i
 8012370:	623b      	str	r3, [r7, #32]
}
 8012372:	bf00      	nop
 8012374:	e7fe      	b.n	8012374 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801237a:	2b00      	cmp	r3, #0
 801237c:	d00c      	beq.n	8012398 <xQueueGiveFromISR+0x50>
	__asm volatile
 801237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012382:	b672      	cpsid	i
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	b662      	cpsie	i
 8012392:	61fb      	str	r3, [r7, #28]
}
 8012394:	bf00      	nop
 8012396:	e7fe      	b.n	8012396 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d103      	bne.n	80123a8 <xQueueGiveFromISR+0x60>
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	689b      	ldr	r3, [r3, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d101      	bne.n	80123ac <xQueueGiveFromISR+0x64>
 80123a8:	2301      	movs	r3, #1
 80123aa:	e000      	b.n	80123ae <xQueueGiveFromISR+0x66>
 80123ac:	2300      	movs	r3, #0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10c      	bne.n	80123cc <xQueueGiveFromISR+0x84>
	__asm volatile
 80123b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b6:	b672      	cpsid	i
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	b662      	cpsie	i
 80123c6:	61bb      	str	r3, [r7, #24]
}
 80123c8:	bf00      	nop
 80123ca:	e7fe      	b.n	80123ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80123cc:	f001 fe0e 	bl	8013fec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80123d0:	f3ef 8211 	mrs	r2, BASEPRI
 80123d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d8:	b672      	cpsid	i
 80123da:	f383 8811 	msr	BASEPRI, r3
 80123de:	f3bf 8f6f 	isb	sy
 80123e2:	f3bf 8f4f 	dsb	sy
 80123e6:	b662      	cpsie	i
 80123e8:	617a      	str	r2, [r7, #20]
 80123ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80123ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80123f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d22b      	bcs.n	8012458 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	1c5a      	adds	r2, r3, #1
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012412:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241a:	d112      	bne.n	8012442 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012420:	2b00      	cmp	r3, #0
 8012422:	d016      	beq.n	8012452 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	3324      	adds	r3, #36	; 0x24
 8012428:	4618      	mov	r0, r3
 801242a:	f000 ffdf 	bl	80133ec <xTaskRemoveFromEventList>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00e      	beq.n	8012452 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00b      	beq.n	8012452 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	2201      	movs	r2, #1
 801243e:	601a      	str	r2, [r3, #0]
 8012440:	e007      	b.n	8012452 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012446:	3301      	adds	r3, #1
 8012448:	b2db      	uxtb	r3, r3
 801244a:	b25a      	sxtb	r2, r3
 801244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012452:	2301      	movs	r3, #1
 8012454:	637b      	str	r3, [r7, #52]	; 0x34
 8012456:	e001      	b.n	801245c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012458:	2300      	movs	r3, #0
 801245a:	637b      	str	r3, [r7, #52]	; 0x34
 801245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012466:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801246a:	4618      	mov	r0, r3
 801246c:	3738      	adds	r7, #56	; 0x38
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
	...

08012474 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b08e      	sub	sp, #56	; 0x38
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801247e:	2300      	movs	r3, #0
 8012480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012486:	2300      	movs	r3, #0
 8012488:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10c      	bne.n	80124aa <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012494:	b672      	cpsid	i
 8012496:	f383 8811 	msr	BASEPRI, r3
 801249a:	f3bf 8f6f 	isb	sy
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	b662      	cpsie	i
 80124a4:	623b      	str	r3, [r7, #32]
}
 80124a6:	bf00      	nop
 80124a8:	e7fe      	b.n	80124a8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80124aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00c      	beq.n	80124cc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	b672      	cpsid	i
 80124b8:	f383 8811 	msr	BASEPRI, r3
 80124bc:	f3bf 8f6f 	isb	sy
 80124c0:	f3bf 8f4f 	dsb	sy
 80124c4:	b662      	cpsie	i
 80124c6:	61fb      	str	r3, [r7, #28]
}
 80124c8:	bf00      	nop
 80124ca:	e7fe      	b.n	80124ca <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124cc:	f001 f956 	bl	801377c <xTaskGetSchedulerState>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d102      	bne.n	80124dc <xQueueSemaphoreTake+0x68>
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d101      	bne.n	80124e0 <xQueueSemaphoreTake+0x6c>
 80124dc:	2301      	movs	r3, #1
 80124de:	e000      	b.n	80124e2 <xQueueSemaphoreTake+0x6e>
 80124e0:	2300      	movs	r3, #0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10c      	bne.n	8012500 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	b672      	cpsid	i
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	b662      	cpsie	i
 80124fa:	61bb      	str	r3, [r7, #24]
}
 80124fc:	bf00      	nop
 80124fe:	e7fe      	b.n	80124fe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012500:	f001 fc8c 	bl	8013e1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012508:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250c:	2b00      	cmp	r3, #0
 801250e:	d024      	beq.n	801255a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012512:	1e5a      	subs	r2, r3, #1
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d104      	bne.n	801252a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012520:	f001 faf2 	bl	8013b08 <pvTaskIncrementMutexHeldCount>
 8012524:	4602      	mov	r2, r0
 8012526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012528:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d00f      	beq.n	8012552 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	3310      	adds	r3, #16
 8012536:	4618      	mov	r0, r3
 8012538:	f000 ff58 	bl	80133ec <xTaskRemoveFromEventList>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d007      	beq.n	8012552 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012542:	4b55      	ldr	r3, [pc, #340]	; (8012698 <xQueueSemaphoreTake+0x224>)
 8012544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	f3bf 8f4f 	dsb	sy
 801254e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012552:	f001 fc97 	bl	8013e84 <vPortExitCritical>
				return pdPASS;
 8012556:	2301      	movs	r3, #1
 8012558:	e099      	b.n	801268e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d113      	bne.n	8012588 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012562:	2b00      	cmp	r3, #0
 8012564:	d00c      	beq.n	8012580 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256a:	b672      	cpsid	i
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	b662      	cpsie	i
 801257a:	617b      	str	r3, [r7, #20]
}
 801257c:	bf00      	nop
 801257e:	e7fe      	b.n	801257e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012580:	f001 fc80 	bl	8013e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012584:	2300      	movs	r3, #0
 8012586:	e082      	b.n	801268e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801258a:	2b00      	cmp	r3, #0
 801258c:	d106      	bne.n	801259c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801258e:	f107 030c 	add.w	r3, r7, #12
 8012592:	4618      	mov	r0, r3
 8012594:	f000 ff8e 	bl	80134b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012598:	2301      	movs	r3, #1
 801259a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801259c:	f001 fc72 	bl	8013e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125a0:	f000 fd24 	bl	8012fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125a4:	f001 fc3a 	bl	8013e1c <vPortEnterCritical>
 80125a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125ae:	b25b      	sxtb	r3, r3
 80125b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b4:	d103      	bne.n	80125be <xQueueSemaphoreTake+0x14a>
 80125b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b8:	2200      	movs	r2, #0
 80125ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125c4:	b25b      	sxtb	r3, r3
 80125c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ca:	d103      	bne.n	80125d4 <xQueueSemaphoreTake+0x160>
 80125cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ce:	2200      	movs	r2, #0
 80125d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125d4:	f001 fc56 	bl	8013e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125d8:	463a      	mov	r2, r7
 80125da:	f107 030c 	add.w	r3, r7, #12
 80125de:	4611      	mov	r1, r2
 80125e0:	4618      	mov	r0, r3
 80125e2:	f000 ff7d 	bl	80134e0 <xTaskCheckForTimeOut>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d132      	bne.n	8012652 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125ee:	f000 f9f5 	bl	80129dc <prvIsQueueEmpty>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d026      	beq.n	8012646 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d109      	bne.n	8012614 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012600:	f001 fc0c 	bl	8013e1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	4618      	mov	r0, r3
 801260a:	f001 f8d5 	bl	80137b8 <xTaskPriorityInherit>
 801260e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012610:	f001 fc38 	bl	8013e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012616:	3324      	adds	r3, #36	; 0x24
 8012618:	683a      	ldr	r2, [r7, #0]
 801261a:	4611      	mov	r1, r2
 801261c:	4618      	mov	r0, r3
 801261e:	f000 febf 	bl	80133a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012624:	f000 f988 	bl	8012938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012628:	f000 fcee 	bl	8013008 <xTaskResumeAll>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	f47f af66 	bne.w	8012500 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012634:	4b18      	ldr	r3, [pc, #96]	; (8012698 <xQueueSemaphoreTake+0x224>)
 8012636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	f3bf 8f4f 	dsb	sy
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	e75c      	b.n	8012500 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012648:	f000 f976 	bl	8012938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801264c:	f000 fcdc 	bl	8013008 <xTaskResumeAll>
 8012650:	e756      	b.n	8012500 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012654:	f000 f970 	bl	8012938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012658:	f000 fcd6 	bl	8013008 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801265c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801265e:	f000 f9bd 	bl	80129dc <prvIsQueueEmpty>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	f43f af4b 	beq.w	8012500 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00d      	beq.n	801268c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012670:	f001 fbd4 	bl	8013e1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012676:	f000 f8b7 	bl	80127e8 <prvGetDisinheritPriorityAfterTimeout>
 801267a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012682:	4618      	mov	r0, r3
 8012684:	f001 f9a2 	bl	80139cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012688:	f001 fbfc 	bl	8013e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801268c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801268e:	4618      	mov	r0, r3
 8012690:	3738      	adds	r7, #56	; 0x38
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	e000ed04 	.word	0xe000ed04

0801269c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b08e      	sub	sp, #56	; 0x38
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80126ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d10c      	bne.n	80126cc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80126b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b6:	b672      	cpsid	i
 80126b8:	f383 8811 	msr	BASEPRI, r3
 80126bc:	f3bf 8f6f 	isb	sy
 80126c0:	f3bf 8f4f 	dsb	sy
 80126c4:	b662      	cpsie	i
 80126c6:	623b      	str	r3, [r7, #32]
}
 80126c8:	bf00      	nop
 80126ca:	e7fe      	b.n	80126ca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d103      	bne.n	80126da <xQueueReceiveFromISR+0x3e>
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d101      	bne.n	80126de <xQueueReceiveFromISR+0x42>
 80126da:	2301      	movs	r3, #1
 80126dc:	e000      	b.n	80126e0 <xQueueReceiveFromISR+0x44>
 80126de:	2300      	movs	r3, #0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d10c      	bne.n	80126fe <xQueueReceiveFromISR+0x62>
	__asm volatile
 80126e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e8:	b672      	cpsid	i
 80126ea:	f383 8811 	msr	BASEPRI, r3
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	b662      	cpsie	i
 80126f8:	61fb      	str	r3, [r7, #28]
}
 80126fa:	bf00      	nop
 80126fc:	e7fe      	b.n	80126fc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126fe:	f001 fc75 	bl	8013fec <vPortValidateInterruptPriority>
	__asm volatile
 8012702:	f3ef 8211 	mrs	r2, BASEPRI
 8012706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270a:	b672      	cpsid	i
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	b662      	cpsie	i
 801271a:	61ba      	str	r2, [r7, #24]
 801271c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801271e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012726:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	2b00      	cmp	r3, #0
 801272c:	d02f      	beq.n	801278e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012738:	68b9      	ldr	r1, [r7, #8]
 801273a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801273c:	f000 f8d6 	bl	80128ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012742:	1e5a      	subs	r2, r3, #1
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012748:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012750:	d112      	bne.n	8012778 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	691b      	ldr	r3, [r3, #16]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d016      	beq.n	8012788 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	3310      	adds	r3, #16
 801275e:	4618      	mov	r0, r3
 8012760:	f000 fe44 	bl	80133ec <xTaskRemoveFromEventList>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00e      	beq.n	8012788 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00b      	beq.n	8012788 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2201      	movs	r2, #1
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	e007      	b.n	8012788 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801277c:	3301      	adds	r3, #1
 801277e:	b2db      	uxtb	r3, r3
 8012780:	b25a      	sxtb	r2, r3
 8012782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012788:	2301      	movs	r3, #1
 801278a:	637b      	str	r3, [r7, #52]	; 0x34
 801278c:	e001      	b.n	8012792 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801278e:	2300      	movs	r3, #0
 8012790:	637b      	str	r3, [r7, #52]	; 0x34
 8012792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012794:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	f383 8811 	msr	BASEPRI, r3
}
 801279c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3738      	adds	r7, #56	; 0x38
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d10c      	bne.n	80127d0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80127b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ba:	b672      	cpsid	i
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	b662      	cpsie	i
 80127ca:	60bb      	str	r3, [r7, #8]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80127d0:	f001 fb24 	bl	8013e1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80127da:	f001 fb53 	bl	8013e84 <vPortExitCritical>

	return uxReturn;
 80127de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80127e0:	4618      	mov	r0, r3
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d006      	beq.n	8012806 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f1c3 0307 	rsb	r3, r3, #7
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	e001      	b.n	801280a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012806:	2300      	movs	r3, #0
 8012808:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801280a:	68fb      	ldr	r3, [r7, #12]
	}
 801280c:	4618      	mov	r0, r3
 801280e:	3714      	adds	r7, #20
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b086      	sub	sp, #24
 801281c:	af00      	add	r7, sp, #0
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	60b9      	str	r1, [r7, #8]
 8012822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012824:	2300      	movs	r3, #0
 8012826:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801282c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012832:	2b00      	cmp	r3, #0
 8012834:	d10d      	bne.n	8012852 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d14d      	bne.n	80128da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	4618      	mov	r0, r3
 8012844:	f001 f838 	bl	80138b8 <xTaskPriorityDisinherit>
 8012848:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2200      	movs	r2, #0
 801284e:	609a      	str	r2, [r3, #8]
 8012850:	e043      	b.n	80128da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d119      	bne.n	801288c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6858      	ldr	r0, [r3, #4]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012860:	461a      	mov	r2, r3
 8012862:	68b9      	ldr	r1, [r7, #8]
 8012864:	f002 fe9b 	bl	801559e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	685a      	ldr	r2, [r3, #4]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012870:	441a      	add	r2, r3
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	685a      	ldr	r2, [r3, #4]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	429a      	cmp	r2, r3
 8012880:	d32b      	bcc.n	80128da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	605a      	str	r2, [r3, #4]
 801288a:	e026      	b.n	80128da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	68d8      	ldr	r0, [r3, #12]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012894:	461a      	mov	r2, r3
 8012896:	68b9      	ldr	r1, [r7, #8]
 8012898:	f002 fe81 	bl	801559e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	68da      	ldr	r2, [r3, #12]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a4:	425b      	negs	r3, r3
 80128a6:	441a      	add	r2, r3
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	68da      	ldr	r2, [r3, #12]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d207      	bcs.n	80128c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	689a      	ldr	r2, [r3, #8]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c0:	425b      	negs	r3, r3
 80128c2:	441a      	add	r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b02      	cmp	r3, #2
 80128cc:	d105      	bne.n	80128da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d002      	beq.n	80128da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	3b01      	subs	r3, #1
 80128d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	1c5a      	adds	r2, r3, #1
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80128e2:	697b      	ldr	r3, [r7, #20]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3718      	adds	r7, #24
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d018      	beq.n	8012930 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	68da      	ldr	r2, [r3, #12]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012906:	441a      	add	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	68da      	ldr	r2, [r3, #12]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	429a      	cmp	r2, r3
 8012916:	d303      	bcc.n	8012920 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	68d9      	ldr	r1, [r3, #12]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012928:	461a      	mov	r2, r3
 801292a:	6838      	ldr	r0, [r7, #0]
 801292c:	f002 fe37 	bl	801559e <memcpy>
	}
}
 8012930:	bf00      	nop
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012940:	f001 fa6c 	bl	8013e1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801294a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801294c:	e011      	b.n	8012972 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012952:	2b00      	cmp	r3, #0
 8012954:	d012      	beq.n	801297c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3324      	adds	r3, #36	; 0x24
 801295a:	4618      	mov	r0, r3
 801295c:	f000 fd46 	bl	80133ec <xTaskRemoveFromEventList>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d001      	beq.n	801296a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012966:	f000 fe21 	bl	80135ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801296a:	7bfb      	ldrb	r3, [r7, #15]
 801296c:	3b01      	subs	r3, #1
 801296e:	b2db      	uxtb	r3, r3
 8012970:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012976:	2b00      	cmp	r3, #0
 8012978:	dce9      	bgt.n	801294e <prvUnlockQueue+0x16>
 801297a:	e000      	b.n	801297e <prvUnlockQueue+0x46>
					break;
 801297c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	22ff      	movs	r2, #255	; 0xff
 8012982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012986:	f001 fa7d 	bl	8013e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801298a:	f001 fa47 	bl	8013e1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012994:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012996:	e011      	b.n	80129bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	691b      	ldr	r3, [r3, #16]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d012      	beq.n	80129c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3310      	adds	r3, #16
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 fd21 	bl	80133ec <xTaskRemoveFromEventList>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80129b0:	f000 fdfc 	bl	80135ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80129b4:	7bbb      	ldrb	r3, [r7, #14]
 80129b6:	3b01      	subs	r3, #1
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	dce9      	bgt.n	8012998 <prvUnlockQueue+0x60>
 80129c4:	e000      	b.n	80129c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80129c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	22ff      	movs	r2, #255	; 0xff
 80129cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80129d0:	f001 fa58 	bl	8013e84 <vPortExitCritical>
}
 80129d4:	bf00      	nop
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80129e4:	f001 fa1a 	bl	8013e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d102      	bne.n	80129f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80129f0:	2301      	movs	r3, #1
 80129f2:	60fb      	str	r3, [r7, #12]
 80129f4:	e001      	b.n	80129fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80129f6:	2300      	movs	r3, #0
 80129f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80129fa:	f001 fa43 	bl	8013e84 <vPortExitCritical>

	return xReturn;
 80129fe:	68fb      	ldr	r3, [r7, #12]
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a10:	f001 fa04 	bl	8013e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d102      	bne.n	8012a26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a20:	2301      	movs	r3, #1
 8012a22:	60fb      	str	r3, [r7, #12]
 8012a24:	e001      	b.n	8012a2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a26:	2300      	movs	r3, #0
 8012a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a2a:	f001 fa2b 	bl	8013e84 <vPortExitCritical>

	return xReturn;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3710      	adds	r7, #16
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b08e      	sub	sp, #56	; 0x38
 8012a3c:	af04      	add	r7, sp, #16
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
 8012a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10c      	bne.n	8012a66 <xTaskCreateStatic+0x2e>
	__asm volatile
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	b672      	cpsid	i
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	b662      	cpsie	i
 8012a60:	623b      	str	r3, [r7, #32]
}
 8012a62:	bf00      	nop
 8012a64:	e7fe      	b.n	8012a64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d10c      	bne.n	8012a86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8012a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a70:	b672      	cpsid	i
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	b662      	cpsie	i
 8012a80:	61fb      	str	r3, [r7, #28]
}
 8012a82:	bf00      	nop
 8012a84:	e7fe      	b.n	8012a84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012a86:	23a0      	movs	r3, #160	; 0xa0
 8012a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	2ba0      	cmp	r3, #160	; 0xa0
 8012a8e:	d00c      	beq.n	8012aaa <xTaskCreateStatic+0x72>
	__asm volatile
 8012a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a94:	b672      	cpsid	i
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	b662      	cpsie	i
 8012aa4:	61bb      	str	r3, [r7, #24]
}
 8012aa6:	bf00      	nop
 8012aa8:	e7fe      	b.n	8012aa8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d01e      	beq.n	8012af0 <xTaskCreateStatic+0xb8>
 8012ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d01b      	beq.n	8012af0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac4:	2202      	movs	r2, #2
 8012ac6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012aca:	2300      	movs	r3, #0
 8012acc:	9303      	str	r3, [sp, #12]
 8012ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad0:	9302      	str	r3, [sp, #8]
 8012ad2:	f107 0314 	add.w	r3, r7, #20
 8012ad6:	9301      	str	r3, [sp, #4]
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	68b9      	ldr	r1, [r7, #8]
 8012ae2:	68f8      	ldr	r0, [r7, #12]
 8012ae4:	f000 f850 	bl	8012b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aea:	f000 f8ed 	bl	8012cc8 <prvAddNewTaskToReadyList>
 8012aee:	e001      	b.n	8012af4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012af4:	697b      	ldr	r3, [r7, #20]
	}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3728      	adds	r7, #40	; 0x28
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b08c      	sub	sp, #48	; 0x30
 8012b02:	af04      	add	r7, sp, #16
 8012b04:	60f8      	str	r0, [r7, #12]
 8012b06:	60b9      	str	r1, [r7, #8]
 8012b08:	603b      	str	r3, [r7, #0]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b0e:	88fb      	ldrh	r3, [r7, #6]
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f001 faae 	bl	8014074 <pvPortMalloc>
 8012b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d00e      	beq.n	8012b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b20:	20a0      	movs	r0, #160	; 0xa0
 8012b22:	f001 faa7 	bl	8014074 <pvPortMalloc>
 8012b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d003      	beq.n	8012b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	697a      	ldr	r2, [r7, #20]
 8012b32:	631a      	str	r2, [r3, #48]	; 0x30
 8012b34:	e005      	b.n	8012b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012b36:	6978      	ldr	r0, [r7, #20]
 8012b38:	f001 fb66 	bl	8014208 <vPortFree>
 8012b3c:	e001      	b.n	8012b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d017      	beq.n	8012b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012b48:	69fb      	ldr	r3, [r7, #28]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012b50:	88fa      	ldrh	r2, [r7, #6]
 8012b52:	2300      	movs	r3, #0
 8012b54:	9303      	str	r3, [sp, #12]
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	9302      	str	r3, [sp, #8]
 8012b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5c:	9301      	str	r3, [sp, #4]
 8012b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	68b9      	ldr	r1, [r7, #8]
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f000 f80e 	bl	8012b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b6c:	69f8      	ldr	r0, [r7, #28]
 8012b6e:	f000 f8ab 	bl	8012cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012b72:	2301      	movs	r3, #1
 8012b74:	61bb      	str	r3, [r7, #24]
 8012b76:	e002      	b.n	8012b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3720      	adds	r7, #32
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b088      	sub	sp, #32
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	607a      	str	r2, [r7, #4]
 8012b94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b9a:	6879      	ldr	r1, [r7, #4]
 8012b9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012ba0:	440b      	add	r3, r1
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	4413      	add	r3, r2
 8012ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	f023 0307 	bic.w	r3, r3, #7
 8012bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	f003 0307 	and.w	r3, r3, #7
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00c      	beq.n	8012bd4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	b672      	cpsid	i
 8012bc0:	f383 8811 	msr	BASEPRI, r3
 8012bc4:	f3bf 8f6f 	isb	sy
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	b662      	cpsie	i
 8012bce:	617b      	str	r3, [r7, #20]
}
 8012bd0:	bf00      	nop
 8012bd2:	e7fe      	b.n	8012bd2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d01f      	beq.n	8012c1a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012bda:	2300      	movs	r3, #0
 8012bdc:	61fb      	str	r3, [r7, #28]
 8012bde:	e012      	b.n	8012c06 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012be0:	68ba      	ldr	r2, [r7, #8]
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	4413      	add	r3, r2
 8012be6:	7819      	ldrb	r1, [r3, #0]
 8012be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	4413      	add	r3, r2
 8012bee:	3334      	adds	r3, #52	; 0x34
 8012bf0:	460a      	mov	r2, r1
 8012bf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012bf4:	68ba      	ldr	r2, [r7, #8]
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d006      	beq.n	8012c0e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	3301      	adds	r3, #1
 8012c04:	61fb      	str	r3, [r7, #28]
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	2b0f      	cmp	r3, #15
 8012c0a:	d9e9      	bls.n	8012be0 <prvInitialiseNewTask+0x58>
 8012c0c:	e000      	b.n	8012c10 <prvInitialiseNewTask+0x88>
			{
				break;
 8012c0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c12:	2200      	movs	r2, #0
 8012c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012c18:	e003      	b.n	8012c22 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c24:	2b06      	cmp	r3, #6
 8012c26:	d901      	bls.n	8012c2c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c28:	2306      	movs	r3, #6
 8012c2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c40:	3304      	adds	r3, #4
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7ff f84c 	bl	8011ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4a:	3318      	adds	r3, #24
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff f847 	bl	8011ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5a:	f1c3 0207 	rsb	r2, r3, #7
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c72:	2200      	movs	r2, #0
 8012c74:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7a:	334c      	adds	r3, #76	; 0x4c
 8012c7c:	224c      	movs	r2, #76	; 0x4c
 8012c7e:	2100      	movs	r1, #0
 8012c80:	4618      	mov	r0, r3
 8012c82:	f002 fba4 	bl	80153ce <memset>
 8012c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c88:	4a0c      	ldr	r2, [pc, #48]	; (8012cbc <prvInitialiseNewTask+0x134>)
 8012c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8e:	4a0c      	ldr	r2, [pc, #48]	; (8012cc0 <prvInitialiseNewTask+0x138>)
 8012c90:	655a      	str	r2, [r3, #84]	; 0x54
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	4a0b      	ldr	r2, [pc, #44]	; (8012cc4 <prvInitialiseNewTask+0x13c>)
 8012c96:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	68f9      	ldr	r1, [r7, #12]
 8012c9c:	69b8      	ldr	r0, [r7, #24]
 8012c9e:	f000 ffad 	bl	8013bfc <pxPortInitialiseStack>
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d002      	beq.n	8012cb4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cb4:	bf00      	nop
 8012cb6:	3720      	adds	r7, #32
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20008f54 	.word	0x20008f54
 8012cc0:	20008fbc 	.word	0x20008fbc
 8012cc4:	20009024 	.word	0x20009024

08012cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012cd0:	f001 f8a4 	bl	8013e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012cd4:	4b2a      	ldr	r3, [pc, #168]	; (8012d80 <prvAddNewTaskToReadyList+0xb8>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	4a29      	ldr	r2, [pc, #164]	; (8012d80 <prvAddNewTaskToReadyList+0xb8>)
 8012cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012cde:	4b29      	ldr	r3, [pc, #164]	; (8012d84 <prvAddNewTaskToReadyList+0xbc>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d109      	bne.n	8012cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012ce6:	4a27      	ldr	r2, [pc, #156]	; (8012d84 <prvAddNewTaskToReadyList+0xbc>)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012cec:	4b24      	ldr	r3, [pc, #144]	; (8012d80 <prvAddNewTaskToReadyList+0xb8>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d110      	bne.n	8012d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012cf4:	f000 fc7e 	bl	80135f4 <prvInitialiseTaskLists>
 8012cf8:	e00d      	b.n	8012d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012cfa:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <prvAddNewTaskToReadyList+0xc0>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d109      	bne.n	8012d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012d02:	4b20      	ldr	r3, [pc, #128]	; (8012d84 <prvAddNewTaskToReadyList+0xbc>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d802      	bhi.n	8012d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012d10:	4a1c      	ldr	r2, [pc, #112]	; (8012d84 <prvAddNewTaskToReadyList+0xbc>)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012d16:	4b1d      	ldr	r3, [pc, #116]	; (8012d8c <prvAddNewTaskToReadyList+0xc4>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	4a1b      	ldr	r2, [pc, #108]	; (8012d8c <prvAddNewTaskToReadyList+0xc4>)
 8012d1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d24:	2201      	movs	r2, #1
 8012d26:	409a      	lsls	r2, r3
 8012d28:	4b19      	ldr	r3, [pc, #100]	; (8012d90 <prvAddNewTaskToReadyList+0xc8>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	4a18      	ldr	r2, [pc, #96]	; (8012d90 <prvAddNewTaskToReadyList+0xc8>)
 8012d30:	6013      	str	r3, [r2, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d36:	4613      	mov	r3, r2
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	4413      	add	r3, r2
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	4a15      	ldr	r2, [pc, #84]	; (8012d94 <prvAddNewTaskToReadyList+0xcc>)
 8012d40:	441a      	add	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	3304      	adds	r3, #4
 8012d46:	4619      	mov	r1, r3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	f7fe ffd6 	bl	8011cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012d4e:	f001 f899 	bl	8013e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012d52:	4b0d      	ldr	r3, [pc, #52]	; (8012d88 <prvAddNewTaskToReadyList+0xc0>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00e      	beq.n	8012d78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012d5a:	4b0a      	ldr	r3, [pc, #40]	; (8012d84 <prvAddNewTaskToReadyList+0xbc>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d207      	bcs.n	8012d78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012d68:	4b0b      	ldr	r3, [pc, #44]	; (8012d98 <prvAddNewTaskToReadyList+0xd0>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d78:	bf00      	nop
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	20000f08 	.word	0x20000f08
 8012d84:	20000e08 	.word	0x20000e08
 8012d88:	20000f14 	.word	0x20000f14
 8012d8c:	20000f24 	.word	0x20000f24
 8012d90:	20000f10 	.word	0x20000f10
 8012d94:	20000e0c 	.word	0x20000e0c
 8012d98:	e000ed04 	.word	0xe000ed04

08012d9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b08a      	sub	sp, #40	; 0x28
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012da6:	2300      	movs	r3, #0
 8012da8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d10c      	bne.n	8012dca <vTaskDelayUntil+0x2e>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	b672      	cpsid	i
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	b662      	cpsie	i
 8012dc4:	617b      	str	r3, [r7, #20]
}
 8012dc6:	bf00      	nop
 8012dc8:	e7fe      	b.n	8012dc8 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10c      	bne.n	8012dea <vTaskDelayUntil+0x4e>
	__asm volatile
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	b672      	cpsid	i
 8012dd6:	f383 8811 	msr	BASEPRI, r3
 8012dda:	f3bf 8f6f 	isb	sy
 8012dde:	f3bf 8f4f 	dsb	sy
 8012de2:	b662      	cpsie	i
 8012de4:	613b      	str	r3, [r7, #16]
}
 8012de6:	bf00      	nop
 8012de8:	e7fe      	b.n	8012de8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8012dea:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <vTaskDelayUntil+0xfc>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00c      	beq.n	8012e0c <vTaskDelayUntil+0x70>
	__asm volatile
 8012df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df6:	b672      	cpsid	i
 8012df8:	f383 8811 	msr	BASEPRI, r3
 8012dfc:	f3bf 8f6f 	isb	sy
 8012e00:	f3bf 8f4f 	dsb	sy
 8012e04:	b662      	cpsie	i
 8012e06:	60fb      	str	r3, [r7, #12]
}
 8012e08:	bf00      	nop
 8012e0a:	e7fe      	b.n	8012e0a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8012e0c:	f000 f8ee 	bl	8012fec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012e10:	4b22      	ldr	r3, [pc, #136]	; (8012e9c <vTaskDelayUntil+0x100>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	683a      	ldr	r2, [r7, #0]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	6a3a      	ldr	r2, [r7, #32]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d20b      	bcs.n	8012e42 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	69fa      	ldr	r2, [r7, #28]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d211      	bcs.n	8012e58 <vTaskDelayUntil+0xbc>
 8012e34:	69fa      	ldr	r2, [r7, #28]
 8012e36:	6a3b      	ldr	r3, [r7, #32]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d90d      	bls.n	8012e58 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8012e40:	e00a      	b.n	8012e58 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	69fa      	ldr	r2, [r7, #28]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d303      	bcc.n	8012e54 <vTaskDelayUntil+0xb8>
 8012e4c:	69fa      	ldr	r2, [r7, #28]
 8012e4e:	6a3b      	ldr	r3, [r7, #32]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d901      	bls.n	8012e58 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012e54:	2301      	movs	r3, #1
 8012e56:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	69fa      	ldr	r2, [r7, #28]
 8012e5c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d006      	beq.n	8012e72 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012e64:	69fa      	ldr	r2, [r7, #28]
 8012e66:	6a3b      	ldr	r3, [r7, #32]
 8012e68:	1ad3      	subs	r3, r2, r3
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f000 fe5f 	bl	8013b30 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012e72:	f000 f8c9 	bl	8013008 <xTaskResumeAll>
 8012e76:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d107      	bne.n	8012e8e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8012e7e:	4b08      	ldr	r3, [pc, #32]	; (8012ea0 <vTaskDelayUntil+0x104>)
 8012e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e84:	601a      	str	r2, [r3, #0]
 8012e86:	f3bf 8f4f 	dsb	sy
 8012e8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e8e:	bf00      	nop
 8012e90:	3728      	adds	r7, #40	; 0x28
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	20000f30 	.word	0x20000f30
 8012e9c:	20000f0c 	.word	0x20000f0c
 8012ea0:	e000ed04 	.word	0xe000ed04

08012ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012eac:	2300      	movs	r3, #0
 8012eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d019      	beq.n	8012eea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <vTaskDelay+0x64>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00c      	beq.n	8012ed8 <vTaskDelay+0x34>
	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec2:	b672      	cpsid	i
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	b662      	cpsie	i
 8012ed2:	60bb      	str	r3, [r7, #8]
}
 8012ed4:	bf00      	nop
 8012ed6:	e7fe      	b.n	8012ed6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012ed8:	f000 f888 	bl	8012fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012edc:	2100      	movs	r1, #0
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 fe26 	bl	8013b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ee4:	f000 f890 	bl	8013008 <xTaskResumeAll>
 8012ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d107      	bne.n	8012f00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012ef0:	4b06      	ldr	r3, [pc, #24]	; (8012f0c <vTaskDelay+0x68>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f00:	bf00      	nop
 8012f02:	3710      	adds	r7, #16
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	20000f30 	.word	0x20000f30
 8012f0c:	e000ed04 	.word	0xe000ed04

08012f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08a      	sub	sp, #40	; 0x28
 8012f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f16:	2300      	movs	r3, #0
 8012f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f1e:	463a      	mov	r2, r7
 8012f20:	1d39      	adds	r1, r7, #4
 8012f22:	f107 0308 	add.w	r3, r7, #8
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7f1 f8cc 	bl	80040c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	9202      	str	r2, [sp, #8]
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	2300      	movs	r3, #0
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	4923      	ldr	r1, [pc, #140]	; (8012fcc <vTaskStartScheduler+0xbc>)
 8012f40:	4823      	ldr	r0, [pc, #140]	; (8012fd0 <vTaskStartScheduler+0xc0>)
 8012f42:	f7ff fd79 	bl	8012a38 <xTaskCreateStatic>
 8012f46:	4603      	mov	r3, r0
 8012f48:	4a22      	ldr	r2, [pc, #136]	; (8012fd4 <vTaskStartScheduler+0xc4>)
 8012f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f4c:	4b21      	ldr	r3, [pc, #132]	; (8012fd4 <vTaskStartScheduler+0xc4>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f54:	2301      	movs	r3, #1
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e001      	b.n	8012f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d11d      	bne.n	8012fa0 <vTaskStartScheduler+0x90>
	__asm volatile
 8012f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f68:	b672      	cpsid	i
 8012f6a:	f383 8811 	msr	BASEPRI, r3
 8012f6e:	f3bf 8f6f 	isb	sy
 8012f72:	f3bf 8f4f 	dsb	sy
 8012f76:	b662      	cpsie	i
 8012f78:	613b      	str	r3, [r7, #16]
}
 8012f7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012f7c:	4b16      	ldr	r3, [pc, #88]	; (8012fd8 <vTaskStartScheduler+0xc8>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	334c      	adds	r3, #76	; 0x4c
 8012f82:	4a16      	ldr	r2, [pc, #88]	; (8012fdc <vTaskStartScheduler+0xcc>)
 8012f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f86:	4b16      	ldr	r3, [pc, #88]	; (8012fe0 <vTaskStartScheduler+0xd0>)
 8012f88:	f04f 32ff 	mov.w	r2, #4294967295
 8012f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f8e:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <vTaskStartScheduler+0xd4>)
 8012f90:	2201      	movs	r2, #1
 8012f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012f94:	4b14      	ldr	r3, [pc, #80]	; (8012fe8 <vTaskStartScheduler+0xd8>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012f9a:	f000 fec1 	bl	8013d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012f9e:	e010      	b.n	8012fc2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa6:	d10c      	bne.n	8012fc2 <vTaskStartScheduler+0xb2>
	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fac:	b672      	cpsid	i
 8012fae:	f383 8811 	msr	BASEPRI, r3
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	f3bf 8f4f 	dsb	sy
 8012fba:	b662      	cpsie	i
 8012fbc:	60fb      	str	r3, [r7, #12]
}
 8012fbe:	bf00      	nop
 8012fc0:	e7fe      	b.n	8012fc0 <vTaskStartScheduler+0xb0>
}
 8012fc2:	bf00      	nop
 8012fc4:	3718      	adds	r7, #24
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	0801bdf8 	.word	0x0801bdf8
 8012fd0:	080135c5 	.word	0x080135c5
 8012fd4:	20000f2c 	.word	0x20000f2c
 8012fd8:	20000e08 	.word	0x20000e08
 8012fdc:	20000070 	.word	0x20000070
 8012fe0:	20000f28 	.word	0x20000f28
 8012fe4:	20000f14 	.word	0x20000f14
 8012fe8:	20000f0c 	.word	0x20000f0c

08012fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012fec:	b480      	push	{r7}
 8012fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012ff0:	4b04      	ldr	r3, [pc, #16]	; (8013004 <vTaskSuspendAll+0x18>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	4a03      	ldr	r2, [pc, #12]	; (8013004 <vTaskSuspendAll+0x18>)
 8012ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012ffa:	bf00      	nop
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr
 8013004:	20000f30 	.word	0x20000f30

08013008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801300e:	2300      	movs	r3, #0
 8013010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013012:	2300      	movs	r3, #0
 8013014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013016:	4b42      	ldr	r3, [pc, #264]	; (8013120 <xTaskResumeAll+0x118>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d10c      	bne.n	8013038 <xTaskResumeAll+0x30>
	__asm volatile
 801301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013022:	b672      	cpsid	i
 8013024:	f383 8811 	msr	BASEPRI, r3
 8013028:	f3bf 8f6f 	isb	sy
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	b662      	cpsie	i
 8013032:	603b      	str	r3, [r7, #0]
}
 8013034:	bf00      	nop
 8013036:	e7fe      	b.n	8013036 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013038:	f000 fef0 	bl	8013e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801303c:	4b38      	ldr	r3, [pc, #224]	; (8013120 <xTaskResumeAll+0x118>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	3b01      	subs	r3, #1
 8013042:	4a37      	ldr	r2, [pc, #220]	; (8013120 <xTaskResumeAll+0x118>)
 8013044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013046:	4b36      	ldr	r3, [pc, #216]	; (8013120 <xTaskResumeAll+0x118>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d161      	bne.n	8013112 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801304e:	4b35      	ldr	r3, [pc, #212]	; (8013124 <xTaskResumeAll+0x11c>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d05d      	beq.n	8013112 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013056:	e02e      	b.n	80130b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013058:	4b33      	ldr	r3, [pc, #204]	; (8013128 <xTaskResumeAll+0x120>)
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	3318      	adds	r3, #24
 8013064:	4618      	mov	r0, r3
 8013066:	f7fe fea5 	bl	8011db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	3304      	adds	r3, #4
 801306e:	4618      	mov	r0, r3
 8013070:	f7fe fea0 	bl	8011db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013078:	2201      	movs	r2, #1
 801307a:	409a      	lsls	r2, r3
 801307c:	4b2b      	ldr	r3, [pc, #172]	; (801312c <xTaskResumeAll+0x124>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4313      	orrs	r3, r2
 8013082:	4a2a      	ldr	r2, [pc, #168]	; (801312c <xTaskResumeAll+0x124>)
 8013084:	6013      	str	r3, [r2, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308a:	4613      	mov	r3, r2
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	4413      	add	r3, r2
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	4a27      	ldr	r2, [pc, #156]	; (8013130 <xTaskResumeAll+0x128>)
 8013094:	441a      	add	r2, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	3304      	adds	r3, #4
 801309a:	4619      	mov	r1, r3
 801309c:	4610      	mov	r0, r2
 801309e:	f7fe fe2c 	bl	8011cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a6:	4b23      	ldr	r3, [pc, #140]	; (8013134 <xTaskResumeAll+0x12c>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d302      	bcc.n	80130b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80130b0:	4b21      	ldr	r3, [pc, #132]	; (8013138 <xTaskResumeAll+0x130>)
 80130b2:	2201      	movs	r2, #1
 80130b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130b6:	4b1c      	ldr	r3, [pc, #112]	; (8013128 <xTaskResumeAll+0x120>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1cc      	bne.n	8013058 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130c4:	f000 fb3a 	bl	801373c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80130c8:	4b1c      	ldr	r3, [pc, #112]	; (801313c <xTaskResumeAll+0x134>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d010      	beq.n	80130f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130d4:	f000 f846 	bl	8013164 <xTaskIncrementTick>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80130de:	4b16      	ldr	r3, [pc, #88]	; (8013138 <xTaskResumeAll+0x130>)
 80130e0:	2201      	movs	r2, #1
 80130e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3b01      	subs	r3, #1
 80130e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d1f1      	bne.n	80130d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80130f0:	4b12      	ldr	r3, [pc, #72]	; (801313c <xTaskResumeAll+0x134>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130f6:	4b10      	ldr	r3, [pc, #64]	; (8013138 <xTaskResumeAll+0x130>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d009      	beq.n	8013112 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130fe:	2301      	movs	r3, #1
 8013100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013102:	4b0f      	ldr	r3, [pc, #60]	; (8013140 <xTaskResumeAll+0x138>)
 8013104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013112:	f000 feb7 	bl	8013e84 <vPortExitCritical>

	return xAlreadyYielded;
 8013116:	68bb      	ldr	r3, [r7, #8]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3710      	adds	r7, #16
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	20000f30 	.word	0x20000f30
 8013124:	20000f08 	.word	0x20000f08
 8013128:	20000ec8 	.word	0x20000ec8
 801312c:	20000f10 	.word	0x20000f10
 8013130:	20000e0c 	.word	0x20000e0c
 8013134:	20000e08 	.word	0x20000e08
 8013138:	20000f1c 	.word	0x20000f1c
 801313c:	20000f18 	.word	0x20000f18
 8013140:	e000ed04 	.word	0xe000ed04

08013144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801314a:	4b05      	ldr	r3, [pc, #20]	; (8013160 <xTaskGetTickCount+0x1c>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013150:	687b      	ldr	r3, [r7, #4]
}
 8013152:	4618      	mov	r0, r3
 8013154:	370c      	adds	r7, #12
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	20000f0c 	.word	0x20000f0c

08013164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801316e:	4b4f      	ldr	r3, [pc, #316]	; (80132ac <xTaskIncrementTick+0x148>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	f040 808a 	bne.w	801328c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013178:	4b4d      	ldr	r3, [pc, #308]	; (80132b0 <xTaskIncrementTick+0x14c>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	3301      	adds	r3, #1
 801317e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013180:	4a4b      	ldr	r2, [pc, #300]	; (80132b0 <xTaskIncrementTick+0x14c>)
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d122      	bne.n	80131d2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801318c:	4b49      	ldr	r3, [pc, #292]	; (80132b4 <xTaskIncrementTick+0x150>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00c      	beq.n	80131b0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	b672      	cpsid	i
 801319c:	f383 8811 	msr	BASEPRI, r3
 80131a0:	f3bf 8f6f 	isb	sy
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	b662      	cpsie	i
 80131aa:	603b      	str	r3, [r7, #0]
}
 80131ac:	bf00      	nop
 80131ae:	e7fe      	b.n	80131ae <xTaskIncrementTick+0x4a>
 80131b0:	4b40      	ldr	r3, [pc, #256]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	60fb      	str	r3, [r7, #12]
 80131b6:	4b40      	ldr	r3, [pc, #256]	; (80132b8 <xTaskIncrementTick+0x154>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4a3e      	ldr	r2, [pc, #248]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	4a3e      	ldr	r2, [pc, #248]	; (80132b8 <xTaskIncrementTick+0x154>)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6013      	str	r3, [r2, #0]
 80131c4:	4b3d      	ldr	r3, [pc, #244]	; (80132bc <xTaskIncrementTick+0x158>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	3301      	adds	r3, #1
 80131ca:	4a3c      	ldr	r2, [pc, #240]	; (80132bc <xTaskIncrementTick+0x158>)
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	f000 fab5 	bl	801373c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131d2:	4b3b      	ldr	r3, [pc, #236]	; (80132c0 <xTaskIncrementTick+0x15c>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	693a      	ldr	r2, [r7, #16]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d348      	bcc.n	801326e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131dc:	4b35      	ldr	r3, [pc, #212]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d104      	bne.n	80131f0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e6:	4b36      	ldr	r3, [pc, #216]	; (80132c0 <xTaskIncrementTick+0x15c>)
 80131e8:	f04f 32ff 	mov.w	r2, #4294967295
 80131ec:	601a      	str	r2, [r3, #0]
					break;
 80131ee:	e03e      	b.n	801326e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131f0:	4b30      	ldr	r3, [pc, #192]	; (80132b4 <xTaskIncrementTick+0x150>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	68db      	ldr	r3, [r3, #12]
 80131f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013200:	693a      	ldr	r2, [r7, #16]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	429a      	cmp	r2, r3
 8013206:	d203      	bcs.n	8013210 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013208:	4a2d      	ldr	r2, [pc, #180]	; (80132c0 <xTaskIncrementTick+0x15c>)
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801320e:	e02e      	b.n	801326e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	3304      	adds	r3, #4
 8013214:	4618      	mov	r0, r3
 8013216:	f7fe fdcd 	bl	8011db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801321e:	2b00      	cmp	r3, #0
 8013220:	d004      	beq.n	801322c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	3318      	adds	r3, #24
 8013226:	4618      	mov	r0, r3
 8013228:	f7fe fdc4 	bl	8011db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013230:	2201      	movs	r2, #1
 8013232:	409a      	lsls	r2, r3
 8013234:	4b23      	ldr	r3, [pc, #140]	; (80132c4 <xTaskIncrementTick+0x160>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4313      	orrs	r3, r2
 801323a:	4a22      	ldr	r2, [pc, #136]	; (80132c4 <xTaskIncrementTick+0x160>)
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013242:	4613      	mov	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	4413      	add	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	4a1f      	ldr	r2, [pc, #124]	; (80132c8 <xTaskIncrementTick+0x164>)
 801324c:	441a      	add	r2, r3
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	3304      	adds	r3, #4
 8013252:	4619      	mov	r1, r3
 8013254:	4610      	mov	r0, r2
 8013256:	f7fe fd50 	bl	8011cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325e:	4b1b      	ldr	r3, [pc, #108]	; (80132cc <xTaskIncrementTick+0x168>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013264:	429a      	cmp	r2, r3
 8013266:	d3b9      	bcc.n	80131dc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013268:	2301      	movs	r3, #1
 801326a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801326c:	e7b6      	b.n	80131dc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801326e:	4b17      	ldr	r3, [pc, #92]	; (80132cc <xTaskIncrementTick+0x168>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013274:	4914      	ldr	r1, [pc, #80]	; (80132c8 <xTaskIncrementTick+0x164>)
 8013276:	4613      	mov	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	440b      	add	r3, r1
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2b01      	cmp	r3, #1
 8013284:	d907      	bls.n	8013296 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013286:	2301      	movs	r3, #1
 8013288:	617b      	str	r3, [r7, #20]
 801328a:	e004      	b.n	8013296 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801328c:	4b10      	ldr	r3, [pc, #64]	; (80132d0 <xTaskIncrementTick+0x16c>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	3301      	adds	r3, #1
 8013292:	4a0f      	ldr	r2, [pc, #60]	; (80132d0 <xTaskIncrementTick+0x16c>)
 8013294:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013296:	4b0f      	ldr	r3, [pc, #60]	; (80132d4 <xTaskIncrementTick+0x170>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d001      	beq.n	80132a2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801329e:	2301      	movs	r3, #1
 80132a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80132a2:	697b      	ldr	r3, [r7, #20]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	20000f30 	.word	0x20000f30
 80132b0:	20000f0c 	.word	0x20000f0c
 80132b4:	20000ec0 	.word	0x20000ec0
 80132b8:	20000ec4 	.word	0x20000ec4
 80132bc:	20000f20 	.word	0x20000f20
 80132c0:	20000f28 	.word	0x20000f28
 80132c4:	20000f10 	.word	0x20000f10
 80132c8:	20000e0c 	.word	0x20000e0c
 80132cc:	20000e08 	.word	0x20000e08
 80132d0:	20000f18 	.word	0x20000f18
 80132d4:	20000f1c 	.word	0x20000f1c

080132d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132d8:	b480      	push	{r7}
 80132da:	b087      	sub	sp, #28
 80132dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132de:	4b2a      	ldr	r3, [pc, #168]	; (8013388 <vTaskSwitchContext+0xb0>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132e6:	4b29      	ldr	r3, [pc, #164]	; (801338c <vTaskSwitchContext+0xb4>)
 80132e8:	2201      	movs	r2, #1
 80132ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132ec:	e046      	b.n	801337c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80132ee:	4b27      	ldr	r3, [pc, #156]	; (801338c <vTaskSwitchContext+0xb4>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132f4:	4b26      	ldr	r3, [pc, #152]	; (8013390 <vTaskSwitchContext+0xb8>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	fab3 f383 	clz	r3, r3
 8013300:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013302:	7afb      	ldrb	r3, [r7, #11]
 8013304:	f1c3 031f 	rsb	r3, r3, #31
 8013308:	617b      	str	r3, [r7, #20]
 801330a:	4922      	ldr	r1, [pc, #136]	; (8013394 <vTaskSwitchContext+0xbc>)
 801330c:	697a      	ldr	r2, [r7, #20]
 801330e:	4613      	mov	r3, r2
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4413      	add	r3, r2
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	440b      	add	r3, r1
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d10c      	bne.n	8013338 <vTaskSwitchContext+0x60>
	__asm volatile
 801331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013322:	b672      	cpsid	i
 8013324:	f383 8811 	msr	BASEPRI, r3
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	b662      	cpsie	i
 8013332:	607b      	str	r3, [r7, #4]
}
 8013334:	bf00      	nop
 8013336:	e7fe      	b.n	8013336 <vTaskSwitchContext+0x5e>
 8013338:	697a      	ldr	r2, [r7, #20]
 801333a:	4613      	mov	r3, r2
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4a14      	ldr	r2, [pc, #80]	; (8013394 <vTaskSwitchContext+0xbc>)
 8013344:	4413      	add	r3, r2
 8013346:	613b      	str	r3, [r7, #16]
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	685a      	ldr	r2, [r3, #4]
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	3308      	adds	r3, #8
 801335a:	429a      	cmp	r2, r3
 801335c:	d104      	bne.n	8013368 <vTaskSwitchContext+0x90>
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	605a      	str	r2, [r3, #4]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	68db      	ldr	r3, [r3, #12]
 801336e:	4a0a      	ldr	r2, [pc, #40]	; (8013398 <vTaskSwitchContext+0xc0>)
 8013370:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013372:	4b09      	ldr	r3, [pc, #36]	; (8013398 <vTaskSwitchContext+0xc0>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	334c      	adds	r3, #76	; 0x4c
 8013378:	4a08      	ldr	r2, [pc, #32]	; (801339c <vTaskSwitchContext+0xc4>)
 801337a:	6013      	str	r3, [r2, #0]
}
 801337c:	bf00      	nop
 801337e:	371c      	adds	r7, #28
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr
 8013388:	20000f30 	.word	0x20000f30
 801338c:	20000f1c 	.word	0x20000f1c
 8013390:	20000f10 	.word	0x20000f10
 8013394:	20000e0c 	.word	0x20000e0c
 8013398:	20000e08 	.word	0x20000e08
 801339c:	20000070 	.word	0x20000070

080133a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b084      	sub	sp, #16
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d10c      	bne.n	80133ca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80133b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b4:	b672      	cpsid	i
 80133b6:	f383 8811 	msr	BASEPRI, r3
 80133ba:	f3bf 8f6f 	isb	sy
 80133be:	f3bf 8f4f 	dsb	sy
 80133c2:	b662      	cpsie	i
 80133c4:	60fb      	str	r3, [r7, #12]
}
 80133c6:	bf00      	nop
 80133c8:	e7fe      	b.n	80133c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133ca:	4b07      	ldr	r3, [pc, #28]	; (80133e8 <vTaskPlaceOnEventList+0x48>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	3318      	adds	r3, #24
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7fe fcb5 	bl	8011d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133d8:	2101      	movs	r1, #1
 80133da:	6838      	ldr	r0, [r7, #0]
 80133dc:	f000 fba8 	bl	8013b30 <prvAddCurrentTaskToDelayedList>
}
 80133e0:	bf00      	nop
 80133e2:	3710      	adds	r7, #16
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	20000e08 	.word	0x20000e08

080133ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10c      	bne.n	801341c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013406:	b672      	cpsid	i
 8013408:	f383 8811 	msr	BASEPRI, r3
 801340c:	f3bf 8f6f 	isb	sy
 8013410:	f3bf 8f4f 	dsb	sy
 8013414:	b662      	cpsie	i
 8013416:	60fb      	str	r3, [r7, #12]
}
 8013418:	bf00      	nop
 801341a:	e7fe      	b.n	801341a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	3318      	adds	r3, #24
 8013420:	4618      	mov	r0, r3
 8013422:	f7fe fcc7 	bl	8011db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013426:	4b1d      	ldr	r3, [pc, #116]	; (801349c <xTaskRemoveFromEventList+0xb0>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d11c      	bne.n	8013468 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	3304      	adds	r3, #4
 8013432:	4618      	mov	r0, r3
 8013434:	f7fe fcbe 	bl	8011db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343c:	2201      	movs	r2, #1
 801343e:	409a      	lsls	r2, r3
 8013440:	4b17      	ldr	r3, [pc, #92]	; (80134a0 <xTaskRemoveFromEventList+0xb4>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4313      	orrs	r3, r2
 8013446:	4a16      	ldr	r2, [pc, #88]	; (80134a0 <xTaskRemoveFromEventList+0xb4>)
 8013448:	6013      	str	r3, [r2, #0]
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344e:	4613      	mov	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	4a13      	ldr	r2, [pc, #76]	; (80134a4 <xTaskRemoveFromEventList+0xb8>)
 8013458:	441a      	add	r2, r3
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	3304      	adds	r3, #4
 801345e:	4619      	mov	r1, r3
 8013460:	4610      	mov	r0, r2
 8013462:	f7fe fc4a 	bl	8011cfa <vListInsertEnd>
 8013466:	e005      	b.n	8013474 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	3318      	adds	r3, #24
 801346c:	4619      	mov	r1, r3
 801346e:	480e      	ldr	r0, [pc, #56]	; (80134a8 <xTaskRemoveFromEventList+0xbc>)
 8013470:	f7fe fc43 	bl	8011cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013478:	4b0c      	ldr	r3, [pc, #48]	; (80134ac <xTaskRemoveFromEventList+0xc0>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347e:	429a      	cmp	r2, r3
 8013480:	d905      	bls.n	801348e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013482:	2301      	movs	r3, #1
 8013484:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013486:	4b0a      	ldr	r3, [pc, #40]	; (80134b0 <xTaskRemoveFromEventList+0xc4>)
 8013488:	2201      	movs	r2, #1
 801348a:	601a      	str	r2, [r3, #0]
 801348c:	e001      	b.n	8013492 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801348e:	2300      	movs	r3, #0
 8013490:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013492:	697b      	ldr	r3, [r7, #20]
}
 8013494:	4618      	mov	r0, r3
 8013496:	3718      	adds	r7, #24
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	20000f30 	.word	0x20000f30
 80134a0:	20000f10 	.word	0x20000f10
 80134a4:	20000e0c 	.word	0x20000e0c
 80134a8:	20000ec8 	.word	0x20000ec8
 80134ac:	20000e08 	.word	0x20000e08
 80134b0:	20000f1c 	.word	0x20000f1c

080134b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134bc:	4b06      	ldr	r3, [pc, #24]	; (80134d8 <vTaskInternalSetTimeOutState+0x24>)
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134c4:	4b05      	ldr	r3, [pc, #20]	; (80134dc <vTaskInternalSetTimeOutState+0x28>)
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	605a      	str	r2, [r3, #4]
}
 80134cc:	bf00      	nop
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr
 80134d8:	20000f20 	.word	0x20000f20
 80134dc:	20000f0c 	.word	0x20000f0c

080134e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b088      	sub	sp, #32
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d10c      	bne.n	801350a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80134f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f4:	b672      	cpsid	i
 80134f6:	f383 8811 	msr	BASEPRI, r3
 80134fa:	f3bf 8f6f 	isb	sy
 80134fe:	f3bf 8f4f 	dsb	sy
 8013502:	b662      	cpsie	i
 8013504:	613b      	str	r3, [r7, #16]
}
 8013506:	bf00      	nop
 8013508:	e7fe      	b.n	8013508 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10c      	bne.n	801352a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	b672      	cpsid	i
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	b662      	cpsie	i
 8013524:	60fb      	str	r3, [r7, #12]
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801352a:	f000 fc77 	bl	8013e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801352e:	4b1d      	ldr	r3, [pc, #116]	; (80135a4 <xTaskCheckForTimeOut+0xc4>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	69ba      	ldr	r2, [r7, #24]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013546:	d102      	bne.n	801354e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013548:	2300      	movs	r3, #0
 801354a:	61fb      	str	r3, [r7, #28]
 801354c:	e023      	b.n	8013596 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	4b15      	ldr	r3, [pc, #84]	; (80135a8 <xTaskCheckForTimeOut+0xc8>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	429a      	cmp	r2, r3
 8013558:	d007      	beq.n	801356a <xTaskCheckForTimeOut+0x8a>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	69ba      	ldr	r2, [r7, #24]
 8013560:	429a      	cmp	r2, r3
 8013562:	d302      	bcc.n	801356a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013564:	2301      	movs	r3, #1
 8013566:	61fb      	str	r3, [r7, #28]
 8013568:	e015      	b.n	8013596 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	429a      	cmp	r2, r3
 8013572:	d20b      	bcs.n	801358c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	1ad2      	subs	r2, r2, r3
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f7ff ff97 	bl	80134b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013586:	2300      	movs	r3, #0
 8013588:	61fb      	str	r3, [r7, #28]
 801358a:	e004      	b.n	8013596 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	2200      	movs	r2, #0
 8013590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013592:	2301      	movs	r3, #1
 8013594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013596:	f000 fc75 	bl	8013e84 <vPortExitCritical>

	return xReturn;
 801359a:	69fb      	ldr	r3, [r7, #28]
}
 801359c:	4618      	mov	r0, r3
 801359e:	3720      	adds	r7, #32
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	20000f0c 	.word	0x20000f0c
 80135a8:	20000f20 	.word	0x20000f20

080135ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80135ac:	b480      	push	{r7}
 80135ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135b0:	4b03      	ldr	r3, [pc, #12]	; (80135c0 <vTaskMissedYield+0x14>)
 80135b2:	2201      	movs	r2, #1
 80135b4:	601a      	str	r2, [r3, #0]
}
 80135b6:	bf00      	nop
 80135b8:	46bd      	mov	sp, r7
 80135ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135be:	4770      	bx	lr
 80135c0:	20000f1c 	.word	0x20000f1c

080135c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80135cc:	f000 f852 	bl	8013674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135d0:	4b06      	ldr	r3, [pc, #24]	; (80135ec <prvIdleTask+0x28>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d9f9      	bls.n	80135cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80135d8:	4b05      	ldr	r3, [pc, #20]	; (80135f0 <prvIdleTask+0x2c>)
 80135da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80135e8:	e7f0      	b.n	80135cc <prvIdleTask+0x8>
 80135ea:	bf00      	nop
 80135ec:	20000e0c 	.word	0x20000e0c
 80135f0:	e000ed04 	.word	0xe000ed04

080135f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135fa:	2300      	movs	r3, #0
 80135fc:	607b      	str	r3, [r7, #4]
 80135fe:	e00c      	b.n	801361a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	4613      	mov	r3, r2
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	4413      	add	r3, r2
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	4a12      	ldr	r2, [pc, #72]	; (8013654 <prvInitialiseTaskLists+0x60>)
 801360c:	4413      	add	r3, r2
 801360e:	4618      	mov	r0, r3
 8013610:	f7fe fb46 	bl	8011ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	3301      	adds	r3, #1
 8013618:	607b      	str	r3, [r7, #4]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b06      	cmp	r3, #6
 801361e:	d9ef      	bls.n	8013600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013620:	480d      	ldr	r0, [pc, #52]	; (8013658 <prvInitialiseTaskLists+0x64>)
 8013622:	f7fe fb3d 	bl	8011ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013626:	480d      	ldr	r0, [pc, #52]	; (801365c <prvInitialiseTaskLists+0x68>)
 8013628:	f7fe fb3a 	bl	8011ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801362c:	480c      	ldr	r0, [pc, #48]	; (8013660 <prvInitialiseTaskLists+0x6c>)
 801362e:	f7fe fb37 	bl	8011ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013632:	480c      	ldr	r0, [pc, #48]	; (8013664 <prvInitialiseTaskLists+0x70>)
 8013634:	f7fe fb34 	bl	8011ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013638:	480b      	ldr	r0, [pc, #44]	; (8013668 <prvInitialiseTaskLists+0x74>)
 801363a:	f7fe fb31 	bl	8011ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801363e:	4b0b      	ldr	r3, [pc, #44]	; (801366c <prvInitialiseTaskLists+0x78>)
 8013640:	4a05      	ldr	r2, [pc, #20]	; (8013658 <prvInitialiseTaskLists+0x64>)
 8013642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013644:	4b0a      	ldr	r3, [pc, #40]	; (8013670 <prvInitialiseTaskLists+0x7c>)
 8013646:	4a05      	ldr	r2, [pc, #20]	; (801365c <prvInitialiseTaskLists+0x68>)
 8013648:	601a      	str	r2, [r3, #0]
}
 801364a:	bf00      	nop
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	20000e0c 	.word	0x20000e0c
 8013658:	20000e98 	.word	0x20000e98
 801365c:	20000eac 	.word	0x20000eac
 8013660:	20000ec8 	.word	0x20000ec8
 8013664:	20000edc 	.word	0x20000edc
 8013668:	20000ef4 	.word	0x20000ef4
 801366c:	20000ec0 	.word	0x20000ec0
 8013670:	20000ec4 	.word	0x20000ec4

08013674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801367a:	e019      	b.n	80136b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801367c:	f000 fbce 	bl	8013e1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013680:	4b10      	ldr	r3, [pc, #64]	; (80136c4 <prvCheckTasksWaitingTermination+0x50>)
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	3304      	adds	r3, #4
 801368c:	4618      	mov	r0, r3
 801368e:	f7fe fb91 	bl	8011db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013692:	4b0d      	ldr	r3, [pc, #52]	; (80136c8 <prvCheckTasksWaitingTermination+0x54>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	3b01      	subs	r3, #1
 8013698:	4a0b      	ldr	r2, [pc, #44]	; (80136c8 <prvCheckTasksWaitingTermination+0x54>)
 801369a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801369c:	4b0b      	ldr	r3, [pc, #44]	; (80136cc <prvCheckTasksWaitingTermination+0x58>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3b01      	subs	r3, #1
 80136a2:	4a0a      	ldr	r2, [pc, #40]	; (80136cc <prvCheckTasksWaitingTermination+0x58>)
 80136a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80136a6:	f000 fbed 	bl	8013e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 f810 	bl	80136d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136b0:	4b06      	ldr	r3, [pc, #24]	; (80136cc <prvCheckTasksWaitingTermination+0x58>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d1e1      	bne.n	801367c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136b8:	bf00      	nop
 80136ba:	bf00      	nop
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	20000edc 	.word	0x20000edc
 80136c8:	20000f08 	.word	0x20000f08
 80136cc:	20000ef0 	.word	0x20000ef0

080136d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	334c      	adds	r3, #76	; 0x4c
 80136dc:	4618      	mov	r0, r3
 80136de:	f001 fea5 	bl	801542c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d108      	bne.n	80136fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f0:	4618      	mov	r0, r3
 80136f2:	f000 fd89 	bl	8014208 <vPortFree>
				vPortFree( pxTCB );
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 fd86 	bl	8014208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80136fc:	e01a      	b.n	8013734 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013704:	2b01      	cmp	r3, #1
 8013706:	d103      	bne.n	8013710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f000 fd7d 	bl	8014208 <vPortFree>
	}
 801370e:	e011      	b.n	8013734 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013716:	2b02      	cmp	r3, #2
 8013718:	d00c      	beq.n	8013734 <prvDeleteTCB+0x64>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	b672      	cpsid	i
 8013720:	f383 8811 	msr	BASEPRI, r3
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	b662      	cpsie	i
 801372e:	60fb      	str	r3, [r7, #12]
}
 8013730:	bf00      	nop
 8013732:	e7fe      	b.n	8013732 <prvDeleteTCB+0x62>
	}
 8013734:	bf00      	nop
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013742:	4b0c      	ldr	r3, [pc, #48]	; (8013774 <prvResetNextTaskUnblockTime+0x38>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d104      	bne.n	8013756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801374c:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <prvResetNextTaskUnblockTime+0x3c>)
 801374e:	f04f 32ff 	mov.w	r2, #4294967295
 8013752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013754:	e008      	b.n	8013768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013756:	4b07      	ldr	r3, [pc, #28]	; (8013774 <prvResetNextTaskUnblockTime+0x38>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	68db      	ldr	r3, [r3, #12]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	4a04      	ldr	r2, [pc, #16]	; (8013778 <prvResetNextTaskUnblockTime+0x3c>)
 8013766:	6013      	str	r3, [r2, #0]
}
 8013768:	bf00      	nop
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	20000ec0 	.word	0x20000ec0
 8013778:	20000f28 	.word	0x20000f28

0801377c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013782:	4b0b      	ldr	r3, [pc, #44]	; (80137b0 <xTaskGetSchedulerState+0x34>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d102      	bne.n	8013790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801378a:	2301      	movs	r3, #1
 801378c:	607b      	str	r3, [r7, #4]
 801378e:	e008      	b.n	80137a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013790:	4b08      	ldr	r3, [pc, #32]	; (80137b4 <xTaskGetSchedulerState+0x38>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d102      	bne.n	801379e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013798:	2302      	movs	r3, #2
 801379a:	607b      	str	r3, [r7, #4]
 801379c:	e001      	b.n	80137a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801379e:	2300      	movs	r3, #0
 80137a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137a2:	687b      	ldr	r3, [r7, #4]
	}
 80137a4:	4618      	mov	r0, r3
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr
 80137b0:	20000f14 	.word	0x20000f14
 80137b4:	20000f30 	.word	0x20000f30

080137b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80137c4:	2300      	movs	r3, #0
 80137c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d069      	beq.n	80138a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137d2:	4b36      	ldr	r3, [pc, #216]	; (80138ac <xTaskPriorityInherit+0xf4>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d8:	429a      	cmp	r2, r3
 80137da:	d259      	bcs.n	8013890 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	699b      	ldr	r3, [r3, #24]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	db06      	blt.n	80137f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137e4:	4b31      	ldr	r3, [pc, #196]	; (80138ac <xTaskPriorityInherit+0xf4>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ea:	f1c3 0207 	rsb	r2, r3, #7
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	6959      	ldr	r1, [r3, #20]
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fa:	4613      	mov	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	4413      	add	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4a2b      	ldr	r2, [pc, #172]	; (80138b0 <xTaskPriorityInherit+0xf8>)
 8013804:	4413      	add	r3, r2
 8013806:	4299      	cmp	r1, r3
 8013808:	d13a      	bne.n	8013880 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	3304      	adds	r3, #4
 801380e:	4618      	mov	r0, r3
 8013810:	f7fe fad0 	bl	8011db4 <uxListRemove>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d115      	bne.n	8013846 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381e:	4924      	ldr	r1, [pc, #144]	; (80138b0 <xTaskPriorityInherit+0xf8>)
 8013820:	4613      	mov	r3, r2
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	4413      	add	r3, r2
 8013826:	009b      	lsls	r3, r3, #2
 8013828:	440b      	add	r3, r1
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d10a      	bne.n	8013846 <xTaskPriorityInherit+0x8e>
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013834:	2201      	movs	r2, #1
 8013836:	fa02 f303 	lsl.w	r3, r2, r3
 801383a:	43da      	mvns	r2, r3
 801383c:	4b1d      	ldr	r3, [pc, #116]	; (80138b4 <xTaskPriorityInherit+0xfc>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	4013      	ands	r3, r2
 8013842:	4a1c      	ldr	r2, [pc, #112]	; (80138b4 <xTaskPriorityInherit+0xfc>)
 8013844:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013846:	4b19      	ldr	r3, [pc, #100]	; (80138ac <xTaskPriorityInherit+0xf4>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013854:	2201      	movs	r2, #1
 8013856:	409a      	lsls	r2, r3
 8013858:	4b16      	ldr	r3, [pc, #88]	; (80138b4 <xTaskPriorityInherit+0xfc>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4313      	orrs	r3, r2
 801385e:	4a15      	ldr	r2, [pc, #84]	; (80138b4 <xTaskPriorityInherit+0xfc>)
 8013860:	6013      	str	r3, [r2, #0]
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013866:	4613      	mov	r3, r2
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	4413      	add	r3, r2
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	4a10      	ldr	r2, [pc, #64]	; (80138b0 <xTaskPriorityInherit+0xf8>)
 8013870:	441a      	add	r2, r3
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	3304      	adds	r3, #4
 8013876:	4619      	mov	r1, r3
 8013878:	4610      	mov	r0, r2
 801387a:	f7fe fa3e 	bl	8011cfa <vListInsertEnd>
 801387e:	e004      	b.n	801388a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013880:	4b0a      	ldr	r3, [pc, #40]	; (80138ac <xTaskPriorityInherit+0xf4>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801388a:	2301      	movs	r3, #1
 801388c:	60fb      	str	r3, [r7, #12]
 801388e:	e008      	b.n	80138a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013894:	4b05      	ldr	r3, [pc, #20]	; (80138ac <xTaskPriorityInherit+0xf4>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801389a:	429a      	cmp	r2, r3
 801389c:	d201      	bcs.n	80138a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801389e:	2301      	movs	r3, #1
 80138a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138a2:	68fb      	ldr	r3, [r7, #12]
	}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3710      	adds	r7, #16
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	20000e08 	.word	0x20000e08
 80138b0:	20000e0c 	.word	0x20000e0c
 80138b4:	20000f10 	.word	0x20000f10

080138b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138c4:	2300      	movs	r3, #0
 80138c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d072      	beq.n	80139b4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138ce:	4b3c      	ldr	r3, [pc, #240]	; (80139c0 <xTaskPriorityDisinherit+0x108>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	693a      	ldr	r2, [r7, #16]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d00c      	beq.n	80138f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80138d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138dc:	b672      	cpsid	i
 80138de:	f383 8811 	msr	BASEPRI, r3
 80138e2:	f3bf 8f6f 	isb	sy
 80138e6:	f3bf 8f4f 	dsb	sy
 80138ea:	b662      	cpsie	i
 80138ec:	60fb      	str	r3, [r7, #12]
}
 80138ee:	bf00      	nop
 80138f0:	e7fe      	b.n	80138f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d10c      	bne.n	8013914 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80138fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fe:	b672      	cpsid	i
 8013900:	f383 8811 	msr	BASEPRI, r3
 8013904:	f3bf 8f6f 	isb	sy
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	b662      	cpsie	i
 801390e:	60bb      	str	r3, [r7, #8]
}
 8013910:	bf00      	nop
 8013912:	e7fe      	b.n	8013912 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013918:	1e5a      	subs	r2, r3, #1
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013926:	429a      	cmp	r2, r3
 8013928:	d044      	beq.n	80139b4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801392e:	2b00      	cmp	r3, #0
 8013930:	d140      	bne.n	80139b4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	3304      	adds	r3, #4
 8013936:	4618      	mov	r0, r3
 8013938:	f7fe fa3c 	bl	8011db4 <uxListRemove>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d115      	bne.n	801396e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013946:	491f      	ldr	r1, [pc, #124]	; (80139c4 <xTaskPriorityDisinherit+0x10c>)
 8013948:	4613      	mov	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4413      	add	r3, r2
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	440b      	add	r3, r1
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10a      	bne.n	801396e <xTaskPriorityDisinherit+0xb6>
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801395c:	2201      	movs	r2, #1
 801395e:	fa02 f303 	lsl.w	r3, r2, r3
 8013962:	43da      	mvns	r2, r3
 8013964:	4b18      	ldr	r3, [pc, #96]	; (80139c8 <xTaskPriorityDisinherit+0x110>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	4013      	ands	r3, r2
 801396a:	4a17      	ldr	r2, [pc, #92]	; (80139c8 <xTaskPriorityDisinherit+0x110>)
 801396c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801397a:	f1c3 0207 	rsb	r2, r3, #7
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013986:	2201      	movs	r2, #1
 8013988:	409a      	lsls	r2, r3
 801398a:	4b0f      	ldr	r3, [pc, #60]	; (80139c8 <xTaskPriorityDisinherit+0x110>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4313      	orrs	r3, r2
 8013990:	4a0d      	ldr	r2, [pc, #52]	; (80139c8 <xTaskPriorityDisinherit+0x110>)
 8013992:	6013      	str	r3, [r2, #0]
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013998:	4613      	mov	r3, r2
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	4413      	add	r3, r2
 801399e:	009b      	lsls	r3, r3, #2
 80139a0:	4a08      	ldr	r2, [pc, #32]	; (80139c4 <xTaskPriorityDisinherit+0x10c>)
 80139a2:	441a      	add	r2, r3
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	3304      	adds	r3, #4
 80139a8:	4619      	mov	r1, r3
 80139aa:	4610      	mov	r0, r2
 80139ac:	f7fe f9a5 	bl	8011cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139b0:	2301      	movs	r3, #1
 80139b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139b4:	697b      	ldr	r3, [r7, #20]
	}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3718      	adds	r7, #24
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	20000e08 	.word	0x20000e08
 80139c4:	20000e0c 	.word	0x20000e0c
 80139c8:	20000f10 	.word	0x20000f10

080139cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b088      	sub	sp, #32
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80139da:	2301      	movs	r3, #1
 80139dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f000 8087 	beq.w	8013af4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d10c      	bne.n	8013a08 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80139ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f2:	b672      	cpsid	i
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	b662      	cpsie	i
 8013a02:	60fb      	str	r3, [r7, #12]
}
 8013a04:	bf00      	nop
 8013a06:	e7fe      	b.n	8013a06 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013a08:	69bb      	ldr	r3, [r7, #24]
 8013a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d902      	bls.n	8013a18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	61fb      	str	r3, [r7, #28]
 8013a16:	e002      	b.n	8013a1e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a22:	69fa      	ldr	r2, [r7, #28]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d065      	beq.n	8013af4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a2c:	697a      	ldr	r2, [r7, #20]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d160      	bne.n	8013af4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013a32:	4b32      	ldr	r3, [pc, #200]	; (8013afc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	69ba      	ldr	r2, [r7, #24]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d10c      	bne.n	8013a56 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8013a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a40:	b672      	cpsid	i
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	b662      	cpsie	i
 8013a50:	60bb      	str	r3, [r7, #8]
}
 8013a52:	bf00      	nop
 8013a54:	e7fe      	b.n	8013a54 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a5a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	69fa      	ldr	r2, [r7, #28]
 8013a60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	db04      	blt.n	8013a74 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	f1c3 0207 	rsb	r2, r3, #7
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a74:	69bb      	ldr	r3, [r7, #24]
 8013a76:	6959      	ldr	r1, [r3, #20]
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	009b      	lsls	r3, r3, #2
 8013a7e:	4413      	add	r3, r2
 8013a80:	009b      	lsls	r3, r3, #2
 8013a82:	4a1f      	ldr	r2, [pc, #124]	; (8013b00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013a84:	4413      	add	r3, r2
 8013a86:	4299      	cmp	r1, r3
 8013a88:	d134      	bne.n	8013af4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	3304      	adds	r3, #4
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7fe f990 	bl	8011db4 <uxListRemove>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d115      	bne.n	8013ac6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a9e:	4918      	ldr	r1, [pc, #96]	; (8013b00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	4413      	add	r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	440b      	add	r3, r1
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10a      	bne.n	8013ac6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8013aba:	43da      	mvns	r2, r3
 8013abc:	4b11      	ldr	r3, [pc, #68]	; (8013b04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4013      	ands	r3, r2
 8013ac2:	4a10      	ldr	r2, [pc, #64]	; (8013b04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ac4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aca:	2201      	movs	r2, #1
 8013acc:	409a      	lsls	r2, r3
 8013ace:	4b0d      	ldr	r3, [pc, #52]	; (8013b04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	4a0b      	ldr	r2, [pc, #44]	; (8013b04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ad6:	6013      	str	r3, [r2, #0]
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013adc:	4613      	mov	r3, r2
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	4413      	add	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	4a06      	ldr	r2, [pc, #24]	; (8013b00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013ae6:	441a      	add	r2, r3
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	3304      	adds	r3, #4
 8013aec:	4619      	mov	r1, r3
 8013aee:	4610      	mov	r0, r2
 8013af0:	f7fe f903 	bl	8011cfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013af4:	bf00      	nop
 8013af6:	3720      	adds	r7, #32
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}
 8013afc:	20000e08 	.word	0x20000e08
 8013b00:	20000e0c 	.word	0x20000e0c
 8013b04:	20000f10 	.word	0x20000f10

08013b08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013b08:	b480      	push	{r7}
 8013b0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013b0c:	4b07      	ldr	r3, [pc, #28]	; (8013b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d004      	beq.n	8013b1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013b14:	4b05      	ldr	r3, [pc, #20]	; (8013b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b1a:	3201      	adds	r2, #1
 8013b1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013b1e:	4b03      	ldr	r3, [pc, #12]	; (8013b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8013b20:	681b      	ldr	r3, [r3, #0]
	}
 8013b22:	4618      	mov	r0, r3
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr
 8013b2c:	20000e08 	.word	0x20000e08

08013b30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b3a:	4b29      	ldr	r3, [pc, #164]	; (8013be0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b40:	4b28      	ldr	r3, [pc, #160]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	3304      	adds	r3, #4
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fe f934 	bl	8011db4 <uxListRemove>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10b      	bne.n	8013b6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013b52:	4b24      	ldr	r3, [pc, #144]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b58:	2201      	movs	r2, #1
 8013b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8013b5e:	43da      	mvns	r2, r3
 8013b60:	4b21      	ldr	r3, [pc, #132]	; (8013be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4013      	ands	r3, r2
 8013b66:	4a20      	ldr	r2, [pc, #128]	; (8013be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013b68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b70:	d10a      	bne.n	8013b88 <prvAddCurrentTaskToDelayedList+0x58>
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d007      	beq.n	8013b88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b78:	4b1a      	ldr	r3, [pc, #104]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	4619      	mov	r1, r3
 8013b80:	481a      	ldr	r0, [pc, #104]	; (8013bec <prvAddCurrentTaskToDelayedList+0xbc>)
 8013b82:	f7fe f8ba 	bl	8011cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013b86:	e026      	b.n	8013bd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013b88:	68fa      	ldr	r2, [r7, #12]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013b90:	4b14      	ldr	r3, [pc, #80]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	68ba      	ldr	r2, [r7, #8]
 8013b96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013b98:	68ba      	ldr	r2, [r7, #8]
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d209      	bcs.n	8013bb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ba0:	4b13      	ldr	r3, [pc, #76]	; (8013bf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	4b0f      	ldr	r3, [pc, #60]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	3304      	adds	r3, #4
 8013baa:	4619      	mov	r1, r3
 8013bac:	4610      	mov	r0, r2
 8013bae:	f7fe f8c8 	bl	8011d42 <vListInsert>
}
 8013bb2:	e010      	b.n	8013bd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bb4:	4b0f      	ldr	r3, [pc, #60]	; (8013bf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	4b0a      	ldr	r3, [pc, #40]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	3304      	adds	r3, #4
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	4610      	mov	r0, r2
 8013bc2:	f7fe f8be 	bl	8011d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013bc6:	4b0c      	ldr	r3, [pc, #48]	; (8013bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d202      	bcs.n	8013bd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013bd0:	4a09      	ldr	r2, [pc, #36]	; (8013bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	6013      	str	r3, [r2, #0]
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	20000f0c 	.word	0x20000f0c
 8013be4:	20000e08 	.word	0x20000e08
 8013be8:	20000f10 	.word	0x20000f10
 8013bec:	20000ef4 	.word	0x20000ef4
 8013bf0:	20000ec4 	.word	0x20000ec4
 8013bf4:	20000ec0 	.word	0x20000ec0
 8013bf8:	20000f28 	.word	0x20000f28

08013bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b085      	sub	sp, #20
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	3b04      	subs	r3, #4
 8013c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	3b04      	subs	r3, #4
 8013c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	f023 0201 	bic.w	r2, r3, #1
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	3b04      	subs	r3, #4
 8013c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013c2c:	4a0c      	ldr	r2, [pc, #48]	; (8013c60 <pxPortInitialiseStack+0x64>)
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	3b14      	subs	r3, #20
 8013c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	3b04      	subs	r3, #4
 8013c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f06f 0202 	mvn.w	r2, #2
 8013c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	3b20      	subs	r3, #32
 8013c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013c52:	68fb      	ldr	r3, [r7, #12]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3714      	adds	r7, #20
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	08013c65 	.word	0x08013c65

08013c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013c6e:	4b14      	ldr	r3, [pc, #80]	; (8013cc0 <prvTaskExitError+0x5c>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c76:	d00c      	beq.n	8013c92 <prvTaskExitError+0x2e>
	__asm volatile
 8013c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7c:	b672      	cpsid	i
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	b662      	cpsie	i
 8013c8c:	60fb      	str	r3, [r7, #12]
}
 8013c8e:	bf00      	nop
 8013c90:	e7fe      	b.n	8013c90 <prvTaskExitError+0x2c>
	__asm volatile
 8013c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c96:	b672      	cpsid	i
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	b662      	cpsie	i
 8013ca6:	60bb      	str	r3, [r7, #8]
}
 8013ca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013caa:	bf00      	nop
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d0fc      	beq.n	8013cac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013cb2:	bf00      	nop
 8013cb4:	bf00      	nop
 8013cb6:	3714      	adds	r7, #20
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr
 8013cc0:	20000014 	.word	0x20000014
	...

08013cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013cd0:	4b07      	ldr	r3, [pc, #28]	; (8013cf0 <pxCurrentTCBConst2>)
 8013cd2:	6819      	ldr	r1, [r3, #0]
 8013cd4:	6808      	ldr	r0, [r1, #0]
 8013cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cda:	f380 8809 	msr	PSP, r0
 8013cde:	f3bf 8f6f 	isb	sy
 8013ce2:	f04f 0000 	mov.w	r0, #0
 8013ce6:	f380 8811 	msr	BASEPRI, r0
 8013cea:	4770      	bx	lr
 8013cec:	f3af 8000 	nop.w

08013cf0 <pxCurrentTCBConst2>:
 8013cf0:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013cf4:	bf00      	nop
 8013cf6:	bf00      	nop

08013cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013cf8:	4808      	ldr	r0, [pc, #32]	; (8013d1c <prvPortStartFirstTask+0x24>)
 8013cfa:	6800      	ldr	r0, [r0, #0]
 8013cfc:	6800      	ldr	r0, [r0, #0]
 8013cfe:	f380 8808 	msr	MSP, r0
 8013d02:	f04f 0000 	mov.w	r0, #0
 8013d06:	f380 8814 	msr	CONTROL, r0
 8013d0a:	b662      	cpsie	i
 8013d0c:	b661      	cpsie	f
 8013d0e:	f3bf 8f4f 	dsb	sy
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	df00      	svc	0
 8013d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d1a:	bf00      	nop
 8013d1c:	e000ed08 	.word	0xe000ed08

08013d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013d26:	4b37      	ldr	r3, [pc, #220]	; (8013e04 <xPortStartScheduler+0xe4>)
 8013d28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	22ff      	movs	r2, #255	; 0xff
 8013d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013d40:	78fb      	ldrb	r3, [r7, #3]
 8013d42:	b2db      	uxtb	r3, r3
 8013d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	4b2f      	ldr	r3, [pc, #188]	; (8013e08 <xPortStartScheduler+0xe8>)
 8013d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013d4e:	4b2f      	ldr	r3, [pc, #188]	; (8013e0c <xPortStartScheduler+0xec>)
 8013d50:	2207      	movs	r2, #7
 8013d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d54:	e009      	b.n	8013d6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013d56:	4b2d      	ldr	r3, [pc, #180]	; (8013e0c <xPortStartScheduler+0xec>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	4a2b      	ldr	r2, [pc, #172]	; (8013e0c <xPortStartScheduler+0xec>)
 8013d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013d60:	78fb      	ldrb	r3, [r7, #3]
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d6a:	78fb      	ldrb	r3, [r7, #3]
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d72:	2b80      	cmp	r3, #128	; 0x80
 8013d74:	d0ef      	beq.n	8013d56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013d76:	4b25      	ldr	r3, [pc, #148]	; (8013e0c <xPortStartScheduler+0xec>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f1c3 0307 	rsb	r3, r3, #7
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	d00c      	beq.n	8013d9c <xPortStartScheduler+0x7c>
	__asm volatile
 8013d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d86:	b672      	cpsid	i
 8013d88:	f383 8811 	msr	BASEPRI, r3
 8013d8c:	f3bf 8f6f 	isb	sy
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	b662      	cpsie	i
 8013d96:	60bb      	str	r3, [r7, #8]
}
 8013d98:	bf00      	nop
 8013d9a:	e7fe      	b.n	8013d9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013d9c:	4b1b      	ldr	r3, [pc, #108]	; (8013e0c <xPortStartScheduler+0xec>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	021b      	lsls	r3, r3, #8
 8013da2:	4a1a      	ldr	r2, [pc, #104]	; (8013e0c <xPortStartScheduler+0xec>)
 8013da4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013da6:	4b19      	ldr	r3, [pc, #100]	; (8013e0c <xPortStartScheduler+0xec>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013dae:	4a17      	ldr	r2, [pc, #92]	; (8013e0c <xPortStartScheduler+0xec>)
 8013db0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	b2da      	uxtb	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013dba:	4b15      	ldr	r3, [pc, #84]	; (8013e10 <xPortStartScheduler+0xf0>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4a14      	ldr	r2, [pc, #80]	; (8013e10 <xPortStartScheduler+0xf0>)
 8013dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013dc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013dc6:	4b12      	ldr	r3, [pc, #72]	; (8013e10 <xPortStartScheduler+0xf0>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	4a11      	ldr	r2, [pc, #68]	; (8013e10 <xPortStartScheduler+0xf0>)
 8013dcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013dd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013dd2:	f000 f8dd 	bl	8013f90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013dd6:	4b0f      	ldr	r3, [pc, #60]	; (8013e14 <xPortStartScheduler+0xf4>)
 8013dd8:	2200      	movs	r2, #0
 8013dda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013ddc:	f000 f8fc 	bl	8013fd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013de0:	4b0d      	ldr	r3, [pc, #52]	; (8013e18 <xPortStartScheduler+0xf8>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4a0c      	ldr	r2, [pc, #48]	; (8013e18 <xPortStartScheduler+0xf8>)
 8013de6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013dea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013dec:	f7ff ff84 	bl	8013cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013df0:	f7ff fa72 	bl	80132d8 <vTaskSwitchContext>
	prvTaskExitError();
 8013df4:	f7ff ff36 	bl	8013c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013df8:	2300      	movs	r3, #0
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	e000e400 	.word	0xe000e400
 8013e08:	20000f34 	.word	0x20000f34
 8013e0c:	20000f38 	.word	0x20000f38
 8013e10:	e000ed20 	.word	0xe000ed20
 8013e14:	20000014 	.word	0x20000014
 8013e18:	e000ef34 	.word	0xe000ef34

08013e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
	__asm volatile
 8013e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e26:	b672      	cpsid	i
 8013e28:	f383 8811 	msr	BASEPRI, r3
 8013e2c:	f3bf 8f6f 	isb	sy
 8013e30:	f3bf 8f4f 	dsb	sy
 8013e34:	b662      	cpsie	i
 8013e36:	607b      	str	r3, [r7, #4]
}
 8013e38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013e3a:	4b10      	ldr	r3, [pc, #64]	; (8013e7c <vPortEnterCritical+0x60>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	4a0e      	ldr	r2, [pc, #56]	; (8013e7c <vPortEnterCritical+0x60>)
 8013e42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013e44:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <vPortEnterCritical+0x60>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d111      	bne.n	8013e70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013e4c:	4b0c      	ldr	r3, [pc, #48]	; (8013e80 <vPortEnterCritical+0x64>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d00c      	beq.n	8013e70 <vPortEnterCritical+0x54>
	__asm volatile
 8013e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e5a:	b672      	cpsid	i
 8013e5c:	f383 8811 	msr	BASEPRI, r3
 8013e60:	f3bf 8f6f 	isb	sy
 8013e64:	f3bf 8f4f 	dsb	sy
 8013e68:	b662      	cpsie	i
 8013e6a:	603b      	str	r3, [r7, #0]
}
 8013e6c:	bf00      	nop
 8013e6e:	e7fe      	b.n	8013e6e <vPortEnterCritical+0x52>
	}
}
 8013e70:	bf00      	nop
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr
 8013e7c:	20000014 	.word	0x20000014
 8013e80:	e000ed04 	.word	0xe000ed04

08013e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013e8a:	4b13      	ldr	r3, [pc, #76]	; (8013ed8 <vPortExitCritical+0x54>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10c      	bne.n	8013eac <vPortExitCritical+0x28>
	__asm volatile
 8013e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e96:	b672      	cpsid	i
 8013e98:	f383 8811 	msr	BASEPRI, r3
 8013e9c:	f3bf 8f6f 	isb	sy
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	b662      	cpsie	i
 8013ea6:	607b      	str	r3, [r7, #4]
}
 8013ea8:	bf00      	nop
 8013eaa:	e7fe      	b.n	8013eaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013eac:	4b0a      	ldr	r3, [pc, #40]	; (8013ed8 <vPortExitCritical+0x54>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	4a09      	ldr	r2, [pc, #36]	; (8013ed8 <vPortExitCritical+0x54>)
 8013eb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013eb6:	4b08      	ldr	r3, [pc, #32]	; (8013ed8 <vPortExitCritical+0x54>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <vPortExitCritical+0x46>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	f383 8811 	msr	BASEPRI, r3
}
 8013ec8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013eca:	bf00      	nop
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	20000014 	.word	0x20000014
 8013edc:	00000000 	.word	0x00000000

08013ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013ee0:	f3ef 8009 	mrs	r0, PSP
 8013ee4:	f3bf 8f6f 	isb	sy
 8013ee8:	4b15      	ldr	r3, [pc, #84]	; (8013f40 <pxCurrentTCBConst>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	f01e 0f10 	tst.w	lr, #16
 8013ef0:	bf08      	it	eq
 8013ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013efa:	6010      	str	r0, [r2, #0]
 8013efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f04:	b672      	cpsid	i
 8013f06:	f380 8811 	msr	BASEPRI, r0
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	b662      	cpsie	i
 8013f14:	f7ff f9e0 	bl	80132d8 <vTaskSwitchContext>
 8013f18:	f04f 0000 	mov.w	r0, #0
 8013f1c:	f380 8811 	msr	BASEPRI, r0
 8013f20:	bc09      	pop	{r0, r3}
 8013f22:	6819      	ldr	r1, [r3, #0]
 8013f24:	6808      	ldr	r0, [r1, #0]
 8013f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2a:	f01e 0f10 	tst.w	lr, #16
 8013f2e:	bf08      	it	eq
 8013f30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013f34:	f380 8809 	msr	PSP, r0
 8013f38:	f3bf 8f6f 	isb	sy
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop

08013f40 <pxCurrentTCBConst>:
 8013f40:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013f44:	bf00      	nop
 8013f46:	bf00      	nop

08013f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8013f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f52:	b672      	cpsid	i
 8013f54:	f383 8811 	msr	BASEPRI, r3
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	f3bf 8f4f 	dsb	sy
 8013f60:	b662      	cpsie	i
 8013f62:	607b      	str	r3, [r7, #4]
}
 8013f64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013f66:	f7ff f8fd 	bl	8013164 <xTaskIncrementTick>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d003      	beq.n	8013f78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013f70:	4b06      	ldr	r3, [pc, #24]	; (8013f8c <SysTick_Handler+0x44>)
 8013f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f76:	601a      	str	r2, [r3, #0]
 8013f78:	2300      	movs	r3, #0
 8013f7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	f383 8811 	msr	BASEPRI, r3
}
 8013f82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013f84:	bf00      	nop
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	e000ed04 	.word	0xe000ed04

08013f90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013f90:	b480      	push	{r7}
 8013f92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013f94:	4b0b      	ldr	r3, [pc, #44]	; (8013fc4 <vPortSetupTimerInterrupt+0x34>)
 8013f96:	2200      	movs	r2, #0
 8013f98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013f9a:	4b0b      	ldr	r3, [pc, #44]	; (8013fc8 <vPortSetupTimerInterrupt+0x38>)
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013fa0:	4b0a      	ldr	r3, [pc, #40]	; (8013fcc <vPortSetupTimerInterrupt+0x3c>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	4a0a      	ldr	r2, [pc, #40]	; (8013fd0 <vPortSetupTimerInterrupt+0x40>)
 8013fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8013faa:	099b      	lsrs	r3, r3, #6
 8013fac:	4a09      	ldr	r2, [pc, #36]	; (8013fd4 <vPortSetupTimerInterrupt+0x44>)
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013fb2:	4b04      	ldr	r3, [pc, #16]	; (8013fc4 <vPortSetupTimerInterrupt+0x34>)
 8013fb4:	2207      	movs	r2, #7
 8013fb6:	601a      	str	r2, [r3, #0]
}
 8013fb8:	bf00      	nop
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	e000e010 	.word	0xe000e010
 8013fc8:	e000e018 	.word	0xe000e018
 8013fcc:	20000008 	.word	0x20000008
 8013fd0:	10624dd3 	.word	0x10624dd3
 8013fd4:	e000e014 	.word	0xe000e014

08013fd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013fd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013fe8 <vPortEnableVFP+0x10>
 8013fdc:	6801      	ldr	r1, [r0, #0]
 8013fde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013fe2:	6001      	str	r1, [r0, #0]
 8013fe4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013fe6:	bf00      	nop
 8013fe8:	e000ed88 	.word	0xe000ed88

08013fec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013ff2:	f3ef 8305 	mrs	r3, IPSR
 8013ff6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2b0f      	cmp	r3, #15
 8013ffc:	d916      	bls.n	801402c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013ffe:	4a19      	ldr	r2, [pc, #100]	; (8014064 <vPortValidateInterruptPriority+0x78>)
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	4413      	add	r3, r2
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014008:	4b17      	ldr	r3, [pc, #92]	; (8014068 <vPortValidateInterruptPriority+0x7c>)
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	7afa      	ldrb	r2, [r7, #11]
 801400e:	429a      	cmp	r2, r3
 8014010:	d20c      	bcs.n	801402c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014016:	b672      	cpsid	i
 8014018:	f383 8811 	msr	BASEPRI, r3
 801401c:	f3bf 8f6f 	isb	sy
 8014020:	f3bf 8f4f 	dsb	sy
 8014024:	b662      	cpsie	i
 8014026:	607b      	str	r3, [r7, #4]
}
 8014028:	bf00      	nop
 801402a:	e7fe      	b.n	801402a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801402c:	4b0f      	ldr	r3, [pc, #60]	; (801406c <vPortValidateInterruptPriority+0x80>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014034:	4b0e      	ldr	r3, [pc, #56]	; (8014070 <vPortValidateInterruptPriority+0x84>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	429a      	cmp	r2, r3
 801403a:	d90c      	bls.n	8014056 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	b672      	cpsid	i
 8014042:	f383 8811 	msr	BASEPRI, r3
 8014046:	f3bf 8f6f 	isb	sy
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	b662      	cpsie	i
 8014050:	603b      	str	r3, [r7, #0]
}
 8014052:	bf00      	nop
 8014054:	e7fe      	b.n	8014054 <vPortValidateInterruptPriority+0x68>
	}
 8014056:	bf00      	nop
 8014058:	3714      	adds	r7, #20
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	e000e3f0 	.word	0xe000e3f0
 8014068:	20000f34 	.word	0x20000f34
 801406c:	e000ed0c 	.word	0xe000ed0c
 8014070:	20000f38 	.word	0x20000f38

08014074 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b08a      	sub	sp, #40	; 0x28
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801407c:	2300      	movs	r3, #0
 801407e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014080:	f7fe ffb4 	bl	8012fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014084:	4b5b      	ldr	r3, [pc, #364]	; (80141f4 <pvPortMalloc+0x180>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801408c:	f000 f91a 	bl	80142c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014090:	4b59      	ldr	r3, [pc, #356]	; (80141f8 <pvPortMalloc+0x184>)
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	4013      	ands	r3, r2
 8014098:	2b00      	cmp	r3, #0
 801409a:	f040 8092 	bne.w	80141c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d01f      	beq.n	80140e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80140a4:	2208      	movs	r2, #8
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4413      	add	r3, r2
 80140aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f003 0307 	and.w	r3, r3, #7
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d016      	beq.n	80140e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f023 0307 	bic.w	r3, r3, #7
 80140bc:	3308      	adds	r3, #8
 80140be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f003 0307 	and.w	r3, r3, #7
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00c      	beq.n	80140e4 <pvPortMalloc+0x70>
	__asm volatile
 80140ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ce:	b672      	cpsid	i
 80140d0:	f383 8811 	msr	BASEPRI, r3
 80140d4:	f3bf 8f6f 	isb	sy
 80140d8:	f3bf 8f4f 	dsb	sy
 80140dc:	b662      	cpsie	i
 80140de:	617b      	str	r3, [r7, #20]
}
 80140e0:	bf00      	nop
 80140e2:	e7fe      	b.n	80140e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d06b      	beq.n	80141c2 <pvPortMalloc+0x14e>
 80140ea:	4b44      	ldr	r3, [pc, #272]	; (80141fc <pvPortMalloc+0x188>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d866      	bhi.n	80141c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80140f4:	4b42      	ldr	r3, [pc, #264]	; (8014200 <pvPortMalloc+0x18c>)
 80140f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80140f8:	4b41      	ldr	r3, [pc, #260]	; (8014200 <pvPortMalloc+0x18c>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80140fe:	e004      	b.n	801410a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8014100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	429a      	cmp	r2, r3
 8014112:	d903      	bls.n	801411c <pvPortMalloc+0xa8>
 8014114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d1f1      	bne.n	8014100 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801411c:	4b35      	ldr	r3, [pc, #212]	; (80141f4 <pvPortMalloc+0x180>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014122:	429a      	cmp	r2, r3
 8014124:	d04d      	beq.n	80141c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014126:	6a3b      	ldr	r3, [r7, #32]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2208      	movs	r2, #8
 801412c:	4413      	add	r3, r2
 801412e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	681a      	ldr	r2, [r3, #0]
 8014134:	6a3b      	ldr	r3, [r7, #32]
 8014136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413a:	685a      	ldr	r2, [r3, #4]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	1ad2      	subs	r2, r2, r3
 8014140:	2308      	movs	r3, #8
 8014142:	005b      	lsls	r3, r3, #1
 8014144:	429a      	cmp	r2, r3
 8014146:	d921      	bls.n	801418c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4413      	add	r3, r2
 801414e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	f003 0307 	and.w	r3, r3, #7
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00c      	beq.n	8014174 <pvPortMalloc+0x100>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	b672      	cpsid	i
 8014160:	f383 8811 	msr	BASEPRI, r3
 8014164:	f3bf 8f6f 	isb	sy
 8014168:	f3bf 8f4f 	dsb	sy
 801416c:	b662      	cpsie	i
 801416e:	613b      	str	r3, [r7, #16]
}
 8014170:	bf00      	nop
 8014172:	e7fe      	b.n	8014172 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014176:	685a      	ldr	r2, [r3, #4]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	1ad2      	subs	r2, r2, r3
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014186:	69b8      	ldr	r0, [r7, #24]
 8014188:	f000 f8fe 	bl	8014388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801418c:	4b1b      	ldr	r3, [pc, #108]	; (80141fc <pvPortMalloc+0x188>)
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	4a19      	ldr	r2, [pc, #100]	; (80141fc <pvPortMalloc+0x188>)
 8014198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801419a:	4b18      	ldr	r3, [pc, #96]	; (80141fc <pvPortMalloc+0x188>)
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	4b19      	ldr	r3, [pc, #100]	; (8014204 <pvPortMalloc+0x190>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d203      	bcs.n	80141ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80141a6:	4b15      	ldr	r3, [pc, #84]	; (80141fc <pvPortMalloc+0x188>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	4a16      	ldr	r2, [pc, #88]	; (8014204 <pvPortMalloc+0x190>)
 80141ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80141ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b0:	685a      	ldr	r2, [r3, #4]
 80141b2:	4b11      	ldr	r3, [pc, #68]	; (80141f8 <pvPortMalloc+0x184>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	431a      	orrs	r2, r3
 80141b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80141bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141be:	2200      	movs	r2, #0
 80141c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80141c2:	f7fe ff21 	bl	8013008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	f003 0307 	and.w	r3, r3, #7
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d00c      	beq.n	80141ea <pvPortMalloc+0x176>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	b672      	cpsid	i
 80141d6:	f383 8811 	msr	BASEPRI, r3
 80141da:	f3bf 8f6f 	isb	sy
 80141de:	f3bf 8f4f 	dsb	sy
 80141e2:	b662      	cpsie	i
 80141e4:	60fb      	str	r3, [r7, #12]
}
 80141e6:	bf00      	nop
 80141e8:	e7fe      	b.n	80141e8 <pvPortMalloc+0x174>
	return pvReturn;
 80141ea:	69fb      	ldr	r3, [r7, #28]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3728      	adds	r7, #40	; 0x28
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	20008f44 	.word	0x20008f44
 80141f8:	20008f50 	.word	0x20008f50
 80141fc:	20008f48 	.word	0x20008f48
 8014200:	20008f3c 	.word	0x20008f3c
 8014204:	20008f4c 	.word	0x20008f4c

08014208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b086      	sub	sp, #24
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d04c      	beq.n	80142b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801421a:	2308      	movs	r3, #8
 801421c:	425b      	negs	r3, r3
 801421e:	697a      	ldr	r2, [r7, #20]
 8014220:	4413      	add	r3, r2
 8014222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	685a      	ldr	r2, [r3, #4]
 801422c:	4b23      	ldr	r3, [pc, #140]	; (80142bc <vPortFree+0xb4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4013      	ands	r3, r2
 8014232:	2b00      	cmp	r3, #0
 8014234:	d10c      	bne.n	8014250 <vPortFree+0x48>
	__asm volatile
 8014236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423a:	b672      	cpsid	i
 801423c:	f383 8811 	msr	BASEPRI, r3
 8014240:	f3bf 8f6f 	isb	sy
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	b662      	cpsie	i
 801424a:	60fb      	str	r3, [r7, #12]
}
 801424c:	bf00      	nop
 801424e:	e7fe      	b.n	801424e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00c      	beq.n	8014272 <vPortFree+0x6a>
	__asm volatile
 8014258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425c:	b672      	cpsid	i
 801425e:	f383 8811 	msr	BASEPRI, r3
 8014262:	f3bf 8f6f 	isb	sy
 8014266:	f3bf 8f4f 	dsb	sy
 801426a:	b662      	cpsie	i
 801426c:	60bb      	str	r3, [r7, #8]
}
 801426e:	bf00      	nop
 8014270:	e7fe      	b.n	8014270 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	4b11      	ldr	r3, [pc, #68]	; (80142bc <vPortFree+0xb4>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4013      	ands	r3, r2
 801427c:	2b00      	cmp	r3, #0
 801427e:	d019      	beq.n	80142b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d115      	bne.n	80142b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	685a      	ldr	r2, [r3, #4]
 801428c:	4b0b      	ldr	r3, [pc, #44]	; (80142bc <vPortFree+0xb4>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	43db      	mvns	r3, r3
 8014292:	401a      	ands	r2, r3
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014298:	f7fe fea8 	bl	8012fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	685a      	ldr	r2, [r3, #4]
 80142a0:	4b07      	ldr	r3, [pc, #28]	; (80142c0 <vPortFree+0xb8>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4413      	add	r3, r2
 80142a6:	4a06      	ldr	r2, [pc, #24]	; (80142c0 <vPortFree+0xb8>)
 80142a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80142aa:	6938      	ldr	r0, [r7, #16]
 80142ac:	f000 f86c 	bl	8014388 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80142b0:	f7fe feaa 	bl	8013008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80142b4:	bf00      	nop
 80142b6:	3718      	adds	r7, #24
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	20008f50 	.word	0x20008f50
 80142c0:	20008f48 	.word	0x20008f48

080142c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80142c4:	b480      	push	{r7}
 80142c6:	b085      	sub	sp, #20
 80142c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80142ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80142d0:	4b27      	ldr	r3, [pc, #156]	; (8014370 <prvHeapInit+0xac>)
 80142d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f003 0307 	and.w	r3, r3, #7
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00c      	beq.n	80142f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	3307      	adds	r3, #7
 80142e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	f023 0307 	bic.w	r3, r3, #7
 80142ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80142ec:	68ba      	ldr	r2, [r7, #8]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	1ad3      	subs	r3, r2, r3
 80142f2:	4a1f      	ldr	r2, [pc, #124]	; (8014370 <prvHeapInit+0xac>)
 80142f4:	4413      	add	r3, r2
 80142f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80142fc:	4a1d      	ldr	r2, [pc, #116]	; (8014374 <prvHeapInit+0xb0>)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014302:	4b1c      	ldr	r3, [pc, #112]	; (8014374 <prvHeapInit+0xb0>)
 8014304:	2200      	movs	r2, #0
 8014306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	68ba      	ldr	r2, [r7, #8]
 801430c:	4413      	add	r3, r2
 801430e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014310:	2208      	movs	r2, #8
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	1a9b      	subs	r3, r3, r2
 8014316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f023 0307 	bic.w	r3, r3, #7
 801431e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	4a15      	ldr	r2, [pc, #84]	; (8014378 <prvHeapInit+0xb4>)
 8014324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014326:	4b14      	ldr	r3, [pc, #80]	; (8014378 <prvHeapInit+0xb4>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2200      	movs	r2, #0
 801432c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801432e:	4b12      	ldr	r3, [pc, #72]	; (8014378 <prvHeapInit+0xb4>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2200      	movs	r2, #0
 8014334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	68fa      	ldr	r2, [r7, #12]
 801433e:	1ad2      	subs	r2, r2, r3
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014344:	4b0c      	ldr	r3, [pc, #48]	; (8014378 <prvHeapInit+0xb4>)
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	4a0a      	ldr	r2, [pc, #40]	; (801437c <prvHeapInit+0xb8>)
 8014352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	4a09      	ldr	r2, [pc, #36]	; (8014380 <prvHeapInit+0xbc>)
 801435a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801435c:	4b09      	ldr	r3, [pc, #36]	; (8014384 <prvHeapInit+0xc0>)
 801435e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014362:	601a      	str	r2, [r3, #0]
}
 8014364:	bf00      	nop
 8014366:	3714      	adds	r7, #20
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr
 8014370:	20000f3c 	.word	0x20000f3c
 8014374:	20008f3c 	.word	0x20008f3c
 8014378:	20008f44 	.word	0x20008f44
 801437c:	20008f4c 	.word	0x20008f4c
 8014380:	20008f48 	.word	0x20008f48
 8014384:	20008f50 	.word	0x20008f50

08014388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014388:	b480      	push	{r7}
 801438a:	b085      	sub	sp, #20
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014390:	4b28      	ldr	r3, [pc, #160]	; (8014434 <prvInsertBlockIntoFreeList+0xac>)
 8014392:	60fb      	str	r3, [r7, #12]
 8014394:	e002      	b.n	801439c <prvInsertBlockIntoFreeList+0x14>
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	60fb      	str	r3, [r7, #12]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d8f7      	bhi.n	8014396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	4413      	add	r3, r2
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d108      	bne.n	80143ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	685a      	ldr	r2, [r3, #4]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	441a      	add	r2, r3
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	441a      	add	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d118      	bne.n	8014410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	4b15      	ldr	r3, [pc, #84]	; (8014438 <prvInsertBlockIntoFreeList+0xb0>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d00d      	beq.n	8014406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685a      	ldr	r2, [r3, #4]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	441a      	add	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	681a      	ldr	r2, [r3, #0]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	e008      	b.n	8014418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014406:	4b0c      	ldr	r3, [pc, #48]	; (8014438 <prvInsertBlockIntoFreeList+0xb0>)
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	601a      	str	r2, [r3, #0]
 801440e:	e003      	b.n	8014418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	429a      	cmp	r2, r3
 801441e:	d002      	beq.n	8014426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014426:	bf00      	nop
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr
 8014432:	bf00      	nop
 8014434:	20008f3c 	.word	0x20008f3c
 8014438:	20008f44 	.word	0x20008f44

0801443c <__cvt>:
 801443c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014440:	ec55 4b10 	vmov	r4, r5, d0
 8014444:	2d00      	cmp	r5, #0
 8014446:	460e      	mov	r6, r1
 8014448:	4619      	mov	r1, r3
 801444a:	462b      	mov	r3, r5
 801444c:	bfbb      	ittet	lt
 801444e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014452:	461d      	movlt	r5, r3
 8014454:	2300      	movge	r3, #0
 8014456:	232d      	movlt	r3, #45	; 0x2d
 8014458:	700b      	strb	r3, [r1, #0]
 801445a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801445c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014460:	4691      	mov	r9, r2
 8014462:	f023 0820 	bic.w	r8, r3, #32
 8014466:	bfbc      	itt	lt
 8014468:	4622      	movlt	r2, r4
 801446a:	4614      	movlt	r4, r2
 801446c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014470:	d005      	beq.n	801447e <__cvt+0x42>
 8014472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014476:	d100      	bne.n	801447a <__cvt+0x3e>
 8014478:	3601      	adds	r6, #1
 801447a:	2102      	movs	r1, #2
 801447c:	e000      	b.n	8014480 <__cvt+0x44>
 801447e:	2103      	movs	r1, #3
 8014480:	ab03      	add	r3, sp, #12
 8014482:	9301      	str	r3, [sp, #4]
 8014484:	ab02      	add	r3, sp, #8
 8014486:	9300      	str	r3, [sp, #0]
 8014488:	ec45 4b10 	vmov	d0, r4, r5
 801448c:	4653      	mov	r3, sl
 801448e:	4632      	mov	r2, r6
 8014490:	f001 f922 	bl	80156d8 <_dtoa_r>
 8014494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014498:	4607      	mov	r7, r0
 801449a:	d102      	bne.n	80144a2 <__cvt+0x66>
 801449c:	f019 0f01 	tst.w	r9, #1
 80144a0:	d022      	beq.n	80144e8 <__cvt+0xac>
 80144a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80144a6:	eb07 0906 	add.w	r9, r7, r6
 80144aa:	d110      	bne.n	80144ce <__cvt+0x92>
 80144ac:	783b      	ldrb	r3, [r7, #0]
 80144ae:	2b30      	cmp	r3, #48	; 0x30
 80144b0:	d10a      	bne.n	80144c8 <__cvt+0x8c>
 80144b2:	2200      	movs	r2, #0
 80144b4:	2300      	movs	r3, #0
 80144b6:	4620      	mov	r0, r4
 80144b8:	4629      	mov	r1, r5
 80144ba:	f7ec fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 80144be:	b918      	cbnz	r0, 80144c8 <__cvt+0x8c>
 80144c0:	f1c6 0601 	rsb	r6, r6, #1
 80144c4:	f8ca 6000 	str.w	r6, [sl]
 80144c8:	f8da 3000 	ldr.w	r3, [sl]
 80144cc:	4499      	add	r9, r3
 80144ce:	2200      	movs	r2, #0
 80144d0:	2300      	movs	r3, #0
 80144d2:	4620      	mov	r0, r4
 80144d4:	4629      	mov	r1, r5
 80144d6:	f7ec fb1f 	bl	8000b18 <__aeabi_dcmpeq>
 80144da:	b108      	cbz	r0, 80144e0 <__cvt+0xa4>
 80144dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80144e0:	2230      	movs	r2, #48	; 0x30
 80144e2:	9b03      	ldr	r3, [sp, #12]
 80144e4:	454b      	cmp	r3, r9
 80144e6:	d307      	bcc.n	80144f8 <__cvt+0xbc>
 80144e8:	9b03      	ldr	r3, [sp, #12]
 80144ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144ec:	1bdb      	subs	r3, r3, r7
 80144ee:	4638      	mov	r0, r7
 80144f0:	6013      	str	r3, [r2, #0]
 80144f2:	b004      	add	sp, #16
 80144f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f8:	1c59      	adds	r1, r3, #1
 80144fa:	9103      	str	r1, [sp, #12]
 80144fc:	701a      	strb	r2, [r3, #0]
 80144fe:	e7f0      	b.n	80144e2 <__cvt+0xa6>

08014500 <__exponent>:
 8014500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014502:	4603      	mov	r3, r0
 8014504:	2900      	cmp	r1, #0
 8014506:	bfb8      	it	lt
 8014508:	4249      	neglt	r1, r1
 801450a:	f803 2b02 	strb.w	r2, [r3], #2
 801450e:	bfb4      	ite	lt
 8014510:	222d      	movlt	r2, #45	; 0x2d
 8014512:	222b      	movge	r2, #43	; 0x2b
 8014514:	2909      	cmp	r1, #9
 8014516:	7042      	strb	r2, [r0, #1]
 8014518:	dd2a      	ble.n	8014570 <__exponent+0x70>
 801451a:	f10d 0207 	add.w	r2, sp, #7
 801451e:	4617      	mov	r7, r2
 8014520:	260a      	movs	r6, #10
 8014522:	4694      	mov	ip, r2
 8014524:	fb91 f5f6 	sdiv	r5, r1, r6
 8014528:	fb06 1415 	mls	r4, r6, r5, r1
 801452c:	3430      	adds	r4, #48	; 0x30
 801452e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014532:	460c      	mov	r4, r1
 8014534:	2c63      	cmp	r4, #99	; 0x63
 8014536:	f102 32ff 	add.w	r2, r2, #4294967295
 801453a:	4629      	mov	r1, r5
 801453c:	dcf1      	bgt.n	8014522 <__exponent+0x22>
 801453e:	3130      	adds	r1, #48	; 0x30
 8014540:	f1ac 0402 	sub.w	r4, ip, #2
 8014544:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014548:	1c41      	adds	r1, r0, #1
 801454a:	4622      	mov	r2, r4
 801454c:	42ba      	cmp	r2, r7
 801454e:	d30a      	bcc.n	8014566 <__exponent+0x66>
 8014550:	f10d 0209 	add.w	r2, sp, #9
 8014554:	eba2 020c 	sub.w	r2, r2, ip
 8014558:	42bc      	cmp	r4, r7
 801455a:	bf88      	it	hi
 801455c:	2200      	movhi	r2, #0
 801455e:	4413      	add	r3, r2
 8014560:	1a18      	subs	r0, r3, r0
 8014562:	b003      	add	sp, #12
 8014564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014566:	f812 5b01 	ldrb.w	r5, [r2], #1
 801456a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801456e:	e7ed      	b.n	801454c <__exponent+0x4c>
 8014570:	2330      	movs	r3, #48	; 0x30
 8014572:	3130      	adds	r1, #48	; 0x30
 8014574:	7083      	strb	r3, [r0, #2]
 8014576:	70c1      	strb	r1, [r0, #3]
 8014578:	1d03      	adds	r3, r0, #4
 801457a:	e7f1      	b.n	8014560 <__exponent+0x60>

0801457c <_printf_float>:
 801457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014580:	ed2d 8b02 	vpush	{d8}
 8014584:	b08d      	sub	sp, #52	; 0x34
 8014586:	460c      	mov	r4, r1
 8014588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801458c:	4616      	mov	r6, r2
 801458e:	461f      	mov	r7, r3
 8014590:	4605      	mov	r5, r0
 8014592:	f000 ff37 	bl	8015404 <_localeconv_r>
 8014596:	f8d0 a000 	ldr.w	sl, [r0]
 801459a:	4650      	mov	r0, sl
 801459c:	f7eb fe90 	bl	80002c0 <strlen>
 80145a0:	2300      	movs	r3, #0
 80145a2:	930a      	str	r3, [sp, #40]	; 0x28
 80145a4:	6823      	ldr	r3, [r4, #0]
 80145a6:	9305      	str	r3, [sp, #20]
 80145a8:	f8d8 3000 	ldr.w	r3, [r8]
 80145ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80145b0:	3307      	adds	r3, #7
 80145b2:	f023 0307 	bic.w	r3, r3, #7
 80145b6:	f103 0208 	add.w	r2, r3, #8
 80145ba:	f8c8 2000 	str.w	r2, [r8]
 80145be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80145c6:	9307      	str	r3, [sp, #28]
 80145c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80145cc:	ee08 0a10 	vmov	s16, r0
 80145d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80145d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145d8:	4b9e      	ldr	r3, [pc, #632]	; (8014854 <_printf_float+0x2d8>)
 80145da:	f04f 32ff 	mov.w	r2, #4294967295
 80145de:	f7ec facd 	bl	8000b7c <__aeabi_dcmpun>
 80145e2:	bb88      	cbnz	r0, 8014648 <_printf_float+0xcc>
 80145e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145e8:	4b9a      	ldr	r3, [pc, #616]	; (8014854 <_printf_float+0x2d8>)
 80145ea:	f04f 32ff 	mov.w	r2, #4294967295
 80145ee:	f7ec faa7 	bl	8000b40 <__aeabi_dcmple>
 80145f2:	bb48      	cbnz	r0, 8014648 <_printf_float+0xcc>
 80145f4:	2200      	movs	r2, #0
 80145f6:	2300      	movs	r3, #0
 80145f8:	4640      	mov	r0, r8
 80145fa:	4649      	mov	r1, r9
 80145fc:	f7ec fa96 	bl	8000b2c <__aeabi_dcmplt>
 8014600:	b110      	cbz	r0, 8014608 <_printf_float+0x8c>
 8014602:	232d      	movs	r3, #45	; 0x2d
 8014604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014608:	4a93      	ldr	r2, [pc, #588]	; (8014858 <_printf_float+0x2dc>)
 801460a:	4b94      	ldr	r3, [pc, #592]	; (801485c <_printf_float+0x2e0>)
 801460c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014610:	bf94      	ite	ls
 8014612:	4690      	movls	r8, r2
 8014614:	4698      	movhi	r8, r3
 8014616:	2303      	movs	r3, #3
 8014618:	6123      	str	r3, [r4, #16]
 801461a:	9b05      	ldr	r3, [sp, #20]
 801461c:	f023 0304 	bic.w	r3, r3, #4
 8014620:	6023      	str	r3, [r4, #0]
 8014622:	f04f 0900 	mov.w	r9, #0
 8014626:	9700      	str	r7, [sp, #0]
 8014628:	4633      	mov	r3, r6
 801462a:	aa0b      	add	r2, sp, #44	; 0x2c
 801462c:	4621      	mov	r1, r4
 801462e:	4628      	mov	r0, r5
 8014630:	f000 f9da 	bl	80149e8 <_printf_common>
 8014634:	3001      	adds	r0, #1
 8014636:	f040 8090 	bne.w	801475a <_printf_float+0x1de>
 801463a:	f04f 30ff 	mov.w	r0, #4294967295
 801463e:	b00d      	add	sp, #52	; 0x34
 8014640:	ecbd 8b02 	vpop	{d8}
 8014644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014648:	4642      	mov	r2, r8
 801464a:	464b      	mov	r3, r9
 801464c:	4640      	mov	r0, r8
 801464e:	4649      	mov	r1, r9
 8014650:	f7ec fa94 	bl	8000b7c <__aeabi_dcmpun>
 8014654:	b140      	cbz	r0, 8014668 <_printf_float+0xec>
 8014656:	464b      	mov	r3, r9
 8014658:	2b00      	cmp	r3, #0
 801465a:	bfbc      	itt	lt
 801465c:	232d      	movlt	r3, #45	; 0x2d
 801465e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014662:	4a7f      	ldr	r2, [pc, #508]	; (8014860 <_printf_float+0x2e4>)
 8014664:	4b7f      	ldr	r3, [pc, #508]	; (8014864 <_printf_float+0x2e8>)
 8014666:	e7d1      	b.n	801460c <_printf_float+0x90>
 8014668:	6863      	ldr	r3, [r4, #4]
 801466a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801466e:	9206      	str	r2, [sp, #24]
 8014670:	1c5a      	adds	r2, r3, #1
 8014672:	d13f      	bne.n	80146f4 <_printf_float+0x178>
 8014674:	2306      	movs	r3, #6
 8014676:	6063      	str	r3, [r4, #4]
 8014678:	9b05      	ldr	r3, [sp, #20]
 801467a:	6861      	ldr	r1, [r4, #4]
 801467c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014680:	2300      	movs	r3, #0
 8014682:	9303      	str	r3, [sp, #12]
 8014684:	ab0a      	add	r3, sp, #40	; 0x28
 8014686:	e9cd b301 	strd	fp, r3, [sp, #4]
 801468a:	ab09      	add	r3, sp, #36	; 0x24
 801468c:	ec49 8b10 	vmov	d0, r8, r9
 8014690:	9300      	str	r3, [sp, #0]
 8014692:	6022      	str	r2, [r4, #0]
 8014694:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014698:	4628      	mov	r0, r5
 801469a:	f7ff fecf 	bl	801443c <__cvt>
 801469e:	9b06      	ldr	r3, [sp, #24]
 80146a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146a2:	2b47      	cmp	r3, #71	; 0x47
 80146a4:	4680      	mov	r8, r0
 80146a6:	d108      	bne.n	80146ba <_printf_float+0x13e>
 80146a8:	1cc8      	adds	r0, r1, #3
 80146aa:	db02      	blt.n	80146b2 <_printf_float+0x136>
 80146ac:	6863      	ldr	r3, [r4, #4]
 80146ae:	4299      	cmp	r1, r3
 80146b0:	dd41      	ble.n	8014736 <_printf_float+0x1ba>
 80146b2:	f1ab 0302 	sub.w	r3, fp, #2
 80146b6:	fa5f fb83 	uxtb.w	fp, r3
 80146ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80146be:	d820      	bhi.n	8014702 <_printf_float+0x186>
 80146c0:	3901      	subs	r1, #1
 80146c2:	465a      	mov	r2, fp
 80146c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80146c8:	9109      	str	r1, [sp, #36]	; 0x24
 80146ca:	f7ff ff19 	bl	8014500 <__exponent>
 80146ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146d0:	1813      	adds	r3, r2, r0
 80146d2:	2a01      	cmp	r2, #1
 80146d4:	4681      	mov	r9, r0
 80146d6:	6123      	str	r3, [r4, #16]
 80146d8:	dc02      	bgt.n	80146e0 <_printf_float+0x164>
 80146da:	6822      	ldr	r2, [r4, #0]
 80146dc:	07d2      	lsls	r2, r2, #31
 80146de:	d501      	bpl.n	80146e4 <_printf_float+0x168>
 80146e0:	3301      	adds	r3, #1
 80146e2:	6123      	str	r3, [r4, #16]
 80146e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d09c      	beq.n	8014626 <_printf_float+0xaa>
 80146ec:	232d      	movs	r3, #45	; 0x2d
 80146ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146f2:	e798      	b.n	8014626 <_printf_float+0xaa>
 80146f4:	9a06      	ldr	r2, [sp, #24]
 80146f6:	2a47      	cmp	r2, #71	; 0x47
 80146f8:	d1be      	bne.n	8014678 <_printf_float+0xfc>
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1bc      	bne.n	8014678 <_printf_float+0xfc>
 80146fe:	2301      	movs	r3, #1
 8014700:	e7b9      	b.n	8014676 <_printf_float+0xfa>
 8014702:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014706:	d118      	bne.n	801473a <_printf_float+0x1be>
 8014708:	2900      	cmp	r1, #0
 801470a:	6863      	ldr	r3, [r4, #4]
 801470c:	dd0b      	ble.n	8014726 <_printf_float+0x1aa>
 801470e:	6121      	str	r1, [r4, #16]
 8014710:	b913      	cbnz	r3, 8014718 <_printf_float+0x19c>
 8014712:	6822      	ldr	r2, [r4, #0]
 8014714:	07d0      	lsls	r0, r2, #31
 8014716:	d502      	bpl.n	801471e <_printf_float+0x1a2>
 8014718:	3301      	adds	r3, #1
 801471a:	440b      	add	r3, r1
 801471c:	6123      	str	r3, [r4, #16]
 801471e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014720:	f04f 0900 	mov.w	r9, #0
 8014724:	e7de      	b.n	80146e4 <_printf_float+0x168>
 8014726:	b913      	cbnz	r3, 801472e <_printf_float+0x1b2>
 8014728:	6822      	ldr	r2, [r4, #0]
 801472a:	07d2      	lsls	r2, r2, #31
 801472c:	d501      	bpl.n	8014732 <_printf_float+0x1b6>
 801472e:	3302      	adds	r3, #2
 8014730:	e7f4      	b.n	801471c <_printf_float+0x1a0>
 8014732:	2301      	movs	r3, #1
 8014734:	e7f2      	b.n	801471c <_printf_float+0x1a0>
 8014736:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801473a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801473c:	4299      	cmp	r1, r3
 801473e:	db05      	blt.n	801474c <_printf_float+0x1d0>
 8014740:	6823      	ldr	r3, [r4, #0]
 8014742:	6121      	str	r1, [r4, #16]
 8014744:	07d8      	lsls	r0, r3, #31
 8014746:	d5ea      	bpl.n	801471e <_printf_float+0x1a2>
 8014748:	1c4b      	adds	r3, r1, #1
 801474a:	e7e7      	b.n	801471c <_printf_float+0x1a0>
 801474c:	2900      	cmp	r1, #0
 801474e:	bfd4      	ite	le
 8014750:	f1c1 0202 	rsble	r2, r1, #2
 8014754:	2201      	movgt	r2, #1
 8014756:	4413      	add	r3, r2
 8014758:	e7e0      	b.n	801471c <_printf_float+0x1a0>
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	055a      	lsls	r2, r3, #21
 801475e:	d407      	bmi.n	8014770 <_printf_float+0x1f4>
 8014760:	6923      	ldr	r3, [r4, #16]
 8014762:	4642      	mov	r2, r8
 8014764:	4631      	mov	r1, r6
 8014766:	4628      	mov	r0, r5
 8014768:	47b8      	blx	r7
 801476a:	3001      	adds	r0, #1
 801476c:	d12c      	bne.n	80147c8 <_printf_float+0x24c>
 801476e:	e764      	b.n	801463a <_printf_float+0xbe>
 8014770:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014774:	f240 80e0 	bls.w	8014938 <_printf_float+0x3bc>
 8014778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801477c:	2200      	movs	r2, #0
 801477e:	2300      	movs	r3, #0
 8014780:	f7ec f9ca 	bl	8000b18 <__aeabi_dcmpeq>
 8014784:	2800      	cmp	r0, #0
 8014786:	d034      	beq.n	80147f2 <_printf_float+0x276>
 8014788:	4a37      	ldr	r2, [pc, #220]	; (8014868 <_printf_float+0x2ec>)
 801478a:	2301      	movs	r3, #1
 801478c:	4631      	mov	r1, r6
 801478e:	4628      	mov	r0, r5
 8014790:	47b8      	blx	r7
 8014792:	3001      	adds	r0, #1
 8014794:	f43f af51 	beq.w	801463a <_printf_float+0xbe>
 8014798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801479c:	429a      	cmp	r2, r3
 801479e:	db02      	blt.n	80147a6 <_printf_float+0x22a>
 80147a0:	6823      	ldr	r3, [r4, #0]
 80147a2:	07d8      	lsls	r0, r3, #31
 80147a4:	d510      	bpl.n	80147c8 <_printf_float+0x24c>
 80147a6:	ee18 3a10 	vmov	r3, s16
 80147aa:	4652      	mov	r2, sl
 80147ac:	4631      	mov	r1, r6
 80147ae:	4628      	mov	r0, r5
 80147b0:	47b8      	blx	r7
 80147b2:	3001      	adds	r0, #1
 80147b4:	f43f af41 	beq.w	801463a <_printf_float+0xbe>
 80147b8:	f04f 0800 	mov.w	r8, #0
 80147bc:	f104 091a 	add.w	r9, r4, #26
 80147c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147c2:	3b01      	subs	r3, #1
 80147c4:	4543      	cmp	r3, r8
 80147c6:	dc09      	bgt.n	80147dc <_printf_float+0x260>
 80147c8:	6823      	ldr	r3, [r4, #0]
 80147ca:	079b      	lsls	r3, r3, #30
 80147cc:	f100 8107 	bmi.w	80149de <_printf_float+0x462>
 80147d0:	68e0      	ldr	r0, [r4, #12]
 80147d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147d4:	4298      	cmp	r0, r3
 80147d6:	bfb8      	it	lt
 80147d8:	4618      	movlt	r0, r3
 80147da:	e730      	b.n	801463e <_printf_float+0xc2>
 80147dc:	2301      	movs	r3, #1
 80147de:	464a      	mov	r2, r9
 80147e0:	4631      	mov	r1, r6
 80147e2:	4628      	mov	r0, r5
 80147e4:	47b8      	blx	r7
 80147e6:	3001      	adds	r0, #1
 80147e8:	f43f af27 	beq.w	801463a <_printf_float+0xbe>
 80147ec:	f108 0801 	add.w	r8, r8, #1
 80147f0:	e7e6      	b.n	80147c0 <_printf_float+0x244>
 80147f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	dc39      	bgt.n	801486c <_printf_float+0x2f0>
 80147f8:	4a1b      	ldr	r2, [pc, #108]	; (8014868 <_printf_float+0x2ec>)
 80147fa:	2301      	movs	r3, #1
 80147fc:	4631      	mov	r1, r6
 80147fe:	4628      	mov	r0, r5
 8014800:	47b8      	blx	r7
 8014802:	3001      	adds	r0, #1
 8014804:	f43f af19 	beq.w	801463a <_printf_float+0xbe>
 8014808:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801480c:	4313      	orrs	r3, r2
 801480e:	d102      	bne.n	8014816 <_printf_float+0x29a>
 8014810:	6823      	ldr	r3, [r4, #0]
 8014812:	07d9      	lsls	r1, r3, #31
 8014814:	d5d8      	bpl.n	80147c8 <_printf_float+0x24c>
 8014816:	ee18 3a10 	vmov	r3, s16
 801481a:	4652      	mov	r2, sl
 801481c:	4631      	mov	r1, r6
 801481e:	4628      	mov	r0, r5
 8014820:	47b8      	blx	r7
 8014822:	3001      	adds	r0, #1
 8014824:	f43f af09 	beq.w	801463a <_printf_float+0xbe>
 8014828:	f04f 0900 	mov.w	r9, #0
 801482c:	f104 0a1a 	add.w	sl, r4, #26
 8014830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014832:	425b      	negs	r3, r3
 8014834:	454b      	cmp	r3, r9
 8014836:	dc01      	bgt.n	801483c <_printf_float+0x2c0>
 8014838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801483a:	e792      	b.n	8014762 <_printf_float+0x1e6>
 801483c:	2301      	movs	r3, #1
 801483e:	4652      	mov	r2, sl
 8014840:	4631      	mov	r1, r6
 8014842:	4628      	mov	r0, r5
 8014844:	47b8      	blx	r7
 8014846:	3001      	adds	r0, #1
 8014848:	f43f aef7 	beq.w	801463a <_printf_float+0xbe>
 801484c:	f109 0901 	add.w	r9, r9, #1
 8014850:	e7ee      	b.n	8014830 <_printf_float+0x2b4>
 8014852:	bf00      	nop
 8014854:	7fefffff 	.word	0x7fefffff
 8014858:	0801bf00 	.word	0x0801bf00
 801485c:	0801bf04 	.word	0x0801bf04
 8014860:	0801bf08 	.word	0x0801bf08
 8014864:	0801bf0c 	.word	0x0801bf0c
 8014868:	0801c298 	.word	0x0801c298
 801486c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801486e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014870:	429a      	cmp	r2, r3
 8014872:	bfa8      	it	ge
 8014874:	461a      	movge	r2, r3
 8014876:	2a00      	cmp	r2, #0
 8014878:	4691      	mov	r9, r2
 801487a:	dc37      	bgt.n	80148ec <_printf_float+0x370>
 801487c:	f04f 0b00 	mov.w	fp, #0
 8014880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014884:	f104 021a 	add.w	r2, r4, #26
 8014888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801488a:	9305      	str	r3, [sp, #20]
 801488c:	eba3 0309 	sub.w	r3, r3, r9
 8014890:	455b      	cmp	r3, fp
 8014892:	dc33      	bgt.n	80148fc <_printf_float+0x380>
 8014894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014898:	429a      	cmp	r2, r3
 801489a:	db3b      	blt.n	8014914 <_printf_float+0x398>
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	07da      	lsls	r2, r3, #31
 80148a0:	d438      	bmi.n	8014914 <_printf_float+0x398>
 80148a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80148a6:	eba2 0903 	sub.w	r9, r2, r3
 80148aa:	9b05      	ldr	r3, [sp, #20]
 80148ac:	1ad2      	subs	r2, r2, r3
 80148ae:	4591      	cmp	r9, r2
 80148b0:	bfa8      	it	ge
 80148b2:	4691      	movge	r9, r2
 80148b4:	f1b9 0f00 	cmp.w	r9, #0
 80148b8:	dc35      	bgt.n	8014926 <_printf_float+0x3aa>
 80148ba:	f04f 0800 	mov.w	r8, #0
 80148be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148c2:	f104 0a1a 	add.w	sl, r4, #26
 80148c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80148ca:	1a9b      	subs	r3, r3, r2
 80148cc:	eba3 0309 	sub.w	r3, r3, r9
 80148d0:	4543      	cmp	r3, r8
 80148d2:	f77f af79 	ble.w	80147c8 <_printf_float+0x24c>
 80148d6:	2301      	movs	r3, #1
 80148d8:	4652      	mov	r2, sl
 80148da:	4631      	mov	r1, r6
 80148dc:	4628      	mov	r0, r5
 80148de:	47b8      	blx	r7
 80148e0:	3001      	adds	r0, #1
 80148e2:	f43f aeaa 	beq.w	801463a <_printf_float+0xbe>
 80148e6:	f108 0801 	add.w	r8, r8, #1
 80148ea:	e7ec      	b.n	80148c6 <_printf_float+0x34a>
 80148ec:	4613      	mov	r3, r2
 80148ee:	4631      	mov	r1, r6
 80148f0:	4642      	mov	r2, r8
 80148f2:	4628      	mov	r0, r5
 80148f4:	47b8      	blx	r7
 80148f6:	3001      	adds	r0, #1
 80148f8:	d1c0      	bne.n	801487c <_printf_float+0x300>
 80148fa:	e69e      	b.n	801463a <_printf_float+0xbe>
 80148fc:	2301      	movs	r3, #1
 80148fe:	4631      	mov	r1, r6
 8014900:	4628      	mov	r0, r5
 8014902:	9205      	str	r2, [sp, #20]
 8014904:	47b8      	blx	r7
 8014906:	3001      	adds	r0, #1
 8014908:	f43f ae97 	beq.w	801463a <_printf_float+0xbe>
 801490c:	9a05      	ldr	r2, [sp, #20]
 801490e:	f10b 0b01 	add.w	fp, fp, #1
 8014912:	e7b9      	b.n	8014888 <_printf_float+0x30c>
 8014914:	ee18 3a10 	vmov	r3, s16
 8014918:	4652      	mov	r2, sl
 801491a:	4631      	mov	r1, r6
 801491c:	4628      	mov	r0, r5
 801491e:	47b8      	blx	r7
 8014920:	3001      	adds	r0, #1
 8014922:	d1be      	bne.n	80148a2 <_printf_float+0x326>
 8014924:	e689      	b.n	801463a <_printf_float+0xbe>
 8014926:	9a05      	ldr	r2, [sp, #20]
 8014928:	464b      	mov	r3, r9
 801492a:	4442      	add	r2, r8
 801492c:	4631      	mov	r1, r6
 801492e:	4628      	mov	r0, r5
 8014930:	47b8      	blx	r7
 8014932:	3001      	adds	r0, #1
 8014934:	d1c1      	bne.n	80148ba <_printf_float+0x33e>
 8014936:	e680      	b.n	801463a <_printf_float+0xbe>
 8014938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801493a:	2a01      	cmp	r2, #1
 801493c:	dc01      	bgt.n	8014942 <_printf_float+0x3c6>
 801493e:	07db      	lsls	r3, r3, #31
 8014940:	d53a      	bpl.n	80149b8 <_printf_float+0x43c>
 8014942:	2301      	movs	r3, #1
 8014944:	4642      	mov	r2, r8
 8014946:	4631      	mov	r1, r6
 8014948:	4628      	mov	r0, r5
 801494a:	47b8      	blx	r7
 801494c:	3001      	adds	r0, #1
 801494e:	f43f ae74 	beq.w	801463a <_printf_float+0xbe>
 8014952:	ee18 3a10 	vmov	r3, s16
 8014956:	4652      	mov	r2, sl
 8014958:	4631      	mov	r1, r6
 801495a:	4628      	mov	r0, r5
 801495c:	47b8      	blx	r7
 801495e:	3001      	adds	r0, #1
 8014960:	f43f ae6b 	beq.w	801463a <_printf_float+0xbe>
 8014964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014968:	2200      	movs	r2, #0
 801496a:	2300      	movs	r3, #0
 801496c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014970:	f7ec f8d2 	bl	8000b18 <__aeabi_dcmpeq>
 8014974:	b9d8      	cbnz	r0, 80149ae <_printf_float+0x432>
 8014976:	f10a 33ff 	add.w	r3, sl, #4294967295
 801497a:	f108 0201 	add.w	r2, r8, #1
 801497e:	4631      	mov	r1, r6
 8014980:	4628      	mov	r0, r5
 8014982:	47b8      	blx	r7
 8014984:	3001      	adds	r0, #1
 8014986:	d10e      	bne.n	80149a6 <_printf_float+0x42a>
 8014988:	e657      	b.n	801463a <_printf_float+0xbe>
 801498a:	2301      	movs	r3, #1
 801498c:	4652      	mov	r2, sl
 801498e:	4631      	mov	r1, r6
 8014990:	4628      	mov	r0, r5
 8014992:	47b8      	blx	r7
 8014994:	3001      	adds	r0, #1
 8014996:	f43f ae50 	beq.w	801463a <_printf_float+0xbe>
 801499a:	f108 0801 	add.w	r8, r8, #1
 801499e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149a0:	3b01      	subs	r3, #1
 80149a2:	4543      	cmp	r3, r8
 80149a4:	dcf1      	bgt.n	801498a <_printf_float+0x40e>
 80149a6:	464b      	mov	r3, r9
 80149a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80149ac:	e6da      	b.n	8014764 <_printf_float+0x1e8>
 80149ae:	f04f 0800 	mov.w	r8, #0
 80149b2:	f104 0a1a 	add.w	sl, r4, #26
 80149b6:	e7f2      	b.n	801499e <_printf_float+0x422>
 80149b8:	2301      	movs	r3, #1
 80149ba:	4642      	mov	r2, r8
 80149bc:	e7df      	b.n	801497e <_printf_float+0x402>
 80149be:	2301      	movs	r3, #1
 80149c0:	464a      	mov	r2, r9
 80149c2:	4631      	mov	r1, r6
 80149c4:	4628      	mov	r0, r5
 80149c6:	47b8      	blx	r7
 80149c8:	3001      	adds	r0, #1
 80149ca:	f43f ae36 	beq.w	801463a <_printf_float+0xbe>
 80149ce:	f108 0801 	add.w	r8, r8, #1
 80149d2:	68e3      	ldr	r3, [r4, #12]
 80149d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149d6:	1a5b      	subs	r3, r3, r1
 80149d8:	4543      	cmp	r3, r8
 80149da:	dcf0      	bgt.n	80149be <_printf_float+0x442>
 80149dc:	e6f8      	b.n	80147d0 <_printf_float+0x254>
 80149de:	f04f 0800 	mov.w	r8, #0
 80149e2:	f104 0919 	add.w	r9, r4, #25
 80149e6:	e7f4      	b.n	80149d2 <_printf_float+0x456>

080149e8 <_printf_common>:
 80149e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149ec:	4616      	mov	r6, r2
 80149ee:	4699      	mov	r9, r3
 80149f0:	688a      	ldr	r2, [r1, #8]
 80149f2:	690b      	ldr	r3, [r1, #16]
 80149f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80149f8:	4293      	cmp	r3, r2
 80149fa:	bfb8      	it	lt
 80149fc:	4613      	movlt	r3, r2
 80149fe:	6033      	str	r3, [r6, #0]
 8014a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a04:	4607      	mov	r7, r0
 8014a06:	460c      	mov	r4, r1
 8014a08:	b10a      	cbz	r2, 8014a0e <_printf_common+0x26>
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	6033      	str	r3, [r6, #0]
 8014a0e:	6823      	ldr	r3, [r4, #0]
 8014a10:	0699      	lsls	r1, r3, #26
 8014a12:	bf42      	ittt	mi
 8014a14:	6833      	ldrmi	r3, [r6, #0]
 8014a16:	3302      	addmi	r3, #2
 8014a18:	6033      	strmi	r3, [r6, #0]
 8014a1a:	6825      	ldr	r5, [r4, #0]
 8014a1c:	f015 0506 	ands.w	r5, r5, #6
 8014a20:	d106      	bne.n	8014a30 <_printf_common+0x48>
 8014a22:	f104 0a19 	add.w	sl, r4, #25
 8014a26:	68e3      	ldr	r3, [r4, #12]
 8014a28:	6832      	ldr	r2, [r6, #0]
 8014a2a:	1a9b      	subs	r3, r3, r2
 8014a2c:	42ab      	cmp	r3, r5
 8014a2e:	dc26      	bgt.n	8014a7e <_printf_common+0x96>
 8014a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a34:	1e13      	subs	r3, r2, #0
 8014a36:	6822      	ldr	r2, [r4, #0]
 8014a38:	bf18      	it	ne
 8014a3a:	2301      	movne	r3, #1
 8014a3c:	0692      	lsls	r2, r2, #26
 8014a3e:	d42b      	bmi.n	8014a98 <_printf_common+0xb0>
 8014a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a44:	4649      	mov	r1, r9
 8014a46:	4638      	mov	r0, r7
 8014a48:	47c0      	blx	r8
 8014a4a:	3001      	adds	r0, #1
 8014a4c:	d01e      	beq.n	8014a8c <_printf_common+0xa4>
 8014a4e:	6823      	ldr	r3, [r4, #0]
 8014a50:	6922      	ldr	r2, [r4, #16]
 8014a52:	f003 0306 	and.w	r3, r3, #6
 8014a56:	2b04      	cmp	r3, #4
 8014a58:	bf02      	ittt	eq
 8014a5a:	68e5      	ldreq	r5, [r4, #12]
 8014a5c:	6833      	ldreq	r3, [r6, #0]
 8014a5e:	1aed      	subeq	r5, r5, r3
 8014a60:	68a3      	ldr	r3, [r4, #8]
 8014a62:	bf0c      	ite	eq
 8014a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a68:	2500      	movne	r5, #0
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	bfc4      	itt	gt
 8014a6e:	1a9b      	subgt	r3, r3, r2
 8014a70:	18ed      	addgt	r5, r5, r3
 8014a72:	2600      	movs	r6, #0
 8014a74:	341a      	adds	r4, #26
 8014a76:	42b5      	cmp	r5, r6
 8014a78:	d11a      	bne.n	8014ab0 <_printf_common+0xc8>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	e008      	b.n	8014a90 <_printf_common+0xa8>
 8014a7e:	2301      	movs	r3, #1
 8014a80:	4652      	mov	r2, sl
 8014a82:	4649      	mov	r1, r9
 8014a84:	4638      	mov	r0, r7
 8014a86:	47c0      	blx	r8
 8014a88:	3001      	adds	r0, #1
 8014a8a:	d103      	bne.n	8014a94 <_printf_common+0xac>
 8014a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a94:	3501      	adds	r5, #1
 8014a96:	e7c6      	b.n	8014a26 <_printf_common+0x3e>
 8014a98:	18e1      	adds	r1, r4, r3
 8014a9a:	1c5a      	adds	r2, r3, #1
 8014a9c:	2030      	movs	r0, #48	; 0x30
 8014a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014aa2:	4422      	add	r2, r4
 8014aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014aac:	3302      	adds	r3, #2
 8014aae:	e7c7      	b.n	8014a40 <_printf_common+0x58>
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	4622      	mov	r2, r4
 8014ab4:	4649      	mov	r1, r9
 8014ab6:	4638      	mov	r0, r7
 8014ab8:	47c0      	blx	r8
 8014aba:	3001      	adds	r0, #1
 8014abc:	d0e6      	beq.n	8014a8c <_printf_common+0xa4>
 8014abe:	3601      	adds	r6, #1
 8014ac0:	e7d9      	b.n	8014a76 <_printf_common+0x8e>
	...

08014ac4 <_printf_i>:
 8014ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ac8:	7e0f      	ldrb	r7, [r1, #24]
 8014aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014acc:	2f78      	cmp	r7, #120	; 0x78
 8014ace:	4691      	mov	r9, r2
 8014ad0:	4680      	mov	r8, r0
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	469a      	mov	sl, r3
 8014ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014ada:	d807      	bhi.n	8014aec <_printf_i+0x28>
 8014adc:	2f62      	cmp	r7, #98	; 0x62
 8014ade:	d80a      	bhi.n	8014af6 <_printf_i+0x32>
 8014ae0:	2f00      	cmp	r7, #0
 8014ae2:	f000 80d4 	beq.w	8014c8e <_printf_i+0x1ca>
 8014ae6:	2f58      	cmp	r7, #88	; 0x58
 8014ae8:	f000 80c0 	beq.w	8014c6c <_printf_i+0x1a8>
 8014aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014af4:	e03a      	b.n	8014b6c <_printf_i+0xa8>
 8014af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014afa:	2b15      	cmp	r3, #21
 8014afc:	d8f6      	bhi.n	8014aec <_printf_i+0x28>
 8014afe:	a101      	add	r1, pc, #4	; (adr r1, 8014b04 <_printf_i+0x40>)
 8014b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b04:	08014b5d 	.word	0x08014b5d
 8014b08:	08014b71 	.word	0x08014b71
 8014b0c:	08014aed 	.word	0x08014aed
 8014b10:	08014aed 	.word	0x08014aed
 8014b14:	08014aed 	.word	0x08014aed
 8014b18:	08014aed 	.word	0x08014aed
 8014b1c:	08014b71 	.word	0x08014b71
 8014b20:	08014aed 	.word	0x08014aed
 8014b24:	08014aed 	.word	0x08014aed
 8014b28:	08014aed 	.word	0x08014aed
 8014b2c:	08014aed 	.word	0x08014aed
 8014b30:	08014c75 	.word	0x08014c75
 8014b34:	08014b9d 	.word	0x08014b9d
 8014b38:	08014c2f 	.word	0x08014c2f
 8014b3c:	08014aed 	.word	0x08014aed
 8014b40:	08014aed 	.word	0x08014aed
 8014b44:	08014c97 	.word	0x08014c97
 8014b48:	08014aed 	.word	0x08014aed
 8014b4c:	08014b9d 	.word	0x08014b9d
 8014b50:	08014aed 	.word	0x08014aed
 8014b54:	08014aed 	.word	0x08014aed
 8014b58:	08014c37 	.word	0x08014c37
 8014b5c:	682b      	ldr	r3, [r5, #0]
 8014b5e:	1d1a      	adds	r2, r3, #4
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	602a      	str	r2, [r5, #0]
 8014b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	e09f      	b.n	8014cb0 <_printf_i+0x1ec>
 8014b70:	6820      	ldr	r0, [r4, #0]
 8014b72:	682b      	ldr	r3, [r5, #0]
 8014b74:	0607      	lsls	r7, r0, #24
 8014b76:	f103 0104 	add.w	r1, r3, #4
 8014b7a:	6029      	str	r1, [r5, #0]
 8014b7c:	d501      	bpl.n	8014b82 <_printf_i+0xbe>
 8014b7e:	681e      	ldr	r6, [r3, #0]
 8014b80:	e003      	b.n	8014b8a <_printf_i+0xc6>
 8014b82:	0646      	lsls	r6, r0, #25
 8014b84:	d5fb      	bpl.n	8014b7e <_printf_i+0xba>
 8014b86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014b8a:	2e00      	cmp	r6, #0
 8014b8c:	da03      	bge.n	8014b96 <_printf_i+0xd2>
 8014b8e:	232d      	movs	r3, #45	; 0x2d
 8014b90:	4276      	negs	r6, r6
 8014b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b96:	485a      	ldr	r0, [pc, #360]	; (8014d00 <_printf_i+0x23c>)
 8014b98:	230a      	movs	r3, #10
 8014b9a:	e012      	b.n	8014bc2 <_printf_i+0xfe>
 8014b9c:	682b      	ldr	r3, [r5, #0]
 8014b9e:	6820      	ldr	r0, [r4, #0]
 8014ba0:	1d19      	adds	r1, r3, #4
 8014ba2:	6029      	str	r1, [r5, #0]
 8014ba4:	0605      	lsls	r5, r0, #24
 8014ba6:	d501      	bpl.n	8014bac <_printf_i+0xe8>
 8014ba8:	681e      	ldr	r6, [r3, #0]
 8014baa:	e002      	b.n	8014bb2 <_printf_i+0xee>
 8014bac:	0641      	lsls	r1, r0, #25
 8014bae:	d5fb      	bpl.n	8014ba8 <_printf_i+0xe4>
 8014bb0:	881e      	ldrh	r6, [r3, #0]
 8014bb2:	4853      	ldr	r0, [pc, #332]	; (8014d00 <_printf_i+0x23c>)
 8014bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8014bb6:	bf0c      	ite	eq
 8014bb8:	2308      	moveq	r3, #8
 8014bba:	230a      	movne	r3, #10
 8014bbc:	2100      	movs	r1, #0
 8014bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014bc2:	6865      	ldr	r5, [r4, #4]
 8014bc4:	60a5      	str	r5, [r4, #8]
 8014bc6:	2d00      	cmp	r5, #0
 8014bc8:	bfa2      	ittt	ge
 8014bca:	6821      	ldrge	r1, [r4, #0]
 8014bcc:	f021 0104 	bicge.w	r1, r1, #4
 8014bd0:	6021      	strge	r1, [r4, #0]
 8014bd2:	b90e      	cbnz	r6, 8014bd8 <_printf_i+0x114>
 8014bd4:	2d00      	cmp	r5, #0
 8014bd6:	d04b      	beq.n	8014c70 <_printf_i+0x1ac>
 8014bd8:	4615      	mov	r5, r2
 8014bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8014bde:	fb03 6711 	mls	r7, r3, r1, r6
 8014be2:	5dc7      	ldrb	r7, [r0, r7]
 8014be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014be8:	4637      	mov	r7, r6
 8014bea:	42bb      	cmp	r3, r7
 8014bec:	460e      	mov	r6, r1
 8014bee:	d9f4      	bls.n	8014bda <_printf_i+0x116>
 8014bf0:	2b08      	cmp	r3, #8
 8014bf2:	d10b      	bne.n	8014c0c <_printf_i+0x148>
 8014bf4:	6823      	ldr	r3, [r4, #0]
 8014bf6:	07de      	lsls	r6, r3, #31
 8014bf8:	d508      	bpl.n	8014c0c <_printf_i+0x148>
 8014bfa:	6923      	ldr	r3, [r4, #16]
 8014bfc:	6861      	ldr	r1, [r4, #4]
 8014bfe:	4299      	cmp	r1, r3
 8014c00:	bfde      	ittt	le
 8014c02:	2330      	movle	r3, #48	; 0x30
 8014c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c0c:	1b52      	subs	r2, r2, r5
 8014c0e:	6122      	str	r2, [r4, #16]
 8014c10:	f8cd a000 	str.w	sl, [sp]
 8014c14:	464b      	mov	r3, r9
 8014c16:	aa03      	add	r2, sp, #12
 8014c18:	4621      	mov	r1, r4
 8014c1a:	4640      	mov	r0, r8
 8014c1c:	f7ff fee4 	bl	80149e8 <_printf_common>
 8014c20:	3001      	adds	r0, #1
 8014c22:	d14a      	bne.n	8014cba <_printf_i+0x1f6>
 8014c24:	f04f 30ff 	mov.w	r0, #4294967295
 8014c28:	b004      	add	sp, #16
 8014c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	f043 0320 	orr.w	r3, r3, #32
 8014c34:	6023      	str	r3, [r4, #0]
 8014c36:	4833      	ldr	r0, [pc, #204]	; (8014d04 <_printf_i+0x240>)
 8014c38:	2778      	movs	r7, #120	; 0x78
 8014c3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c3e:	6823      	ldr	r3, [r4, #0]
 8014c40:	6829      	ldr	r1, [r5, #0]
 8014c42:	061f      	lsls	r7, r3, #24
 8014c44:	f851 6b04 	ldr.w	r6, [r1], #4
 8014c48:	d402      	bmi.n	8014c50 <_printf_i+0x18c>
 8014c4a:	065f      	lsls	r7, r3, #25
 8014c4c:	bf48      	it	mi
 8014c4e:	b2b6      	uxthmi	r6, r6
 8014c50:	07df      	lsls	r7, r3, #31
 8014c52:	bf48      	it	mi
 8014c54:	f043 0320 	orrmi.w	r3, r3, #32
 8014c58:	6029      	str	r1, [r5, #0]
 8014c5a:	bf48      	it	mi
 8014c5c:	6023      	strmi	r3, [r4, #0]
 8014c5e:	b91e      	cbnz	r6, 8014c68 <_printf_i+0x1a4>
 8014c60:	6823      	ldr	r3, [r4, #0]
 8014c62:	f023 0320 	bic.w	r3, r3, #32
 8014c66:	6023      	str	r3, [r4, #0]
 8014c68:	2310      	movs	r3, #16
 8014c6a:	e7a7      	b.n	8014bbc <_printf_i+0xf8>
 8014c6c:	4824      	ldr	r0, [pc, #144]	; (8014d00 <_printf_i+0x23c>)
 8014c6e:	e7e4      	b.n	8014c3a <_printf_i+0x176>
 8014c70:	4615      	mov	r5, r2
 8014c72:	e7bd      	b.n	8014bf0 <_printf_i+0x12c>
 8014c74:	682b      	ldr	r3, [r5, #0]
 8014c76:	6826      	ldr	r6, [r4, #0]
 8014c78:	6961      	ldr	r1, [r4, #20]
 8014c7a:	1d18      	adds	r0, r3, #4
 8014c7c:	6028      	str	r0, [r5, #0]
 8014c7e:	0635      	lsls	r5, r6, #24
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	d501      	bpl.n	8014c88 <_printf_i+0x1c4>
 8014c84:	6019      	str	r1, [r3, #0]
 8014c86:	e002      	b.n	8014c8e <_printf_i+0x1ca>
 8014c88:	0670      	lsls	r0, r6, #25
 8014c8a:	d5fb      	bpl.n	8014c84 <_printf_i+0x1c0>
 8014c8c:	8019      	strh	r1, [r3, #0]
 8014c8e:	2300      	movs	r3, #0
 8014c90:	6123      	str	r3, [r4, #16]
 8014c92:	4615      	mov	r5, r2
 8014c94:	e7bc      	b.n	8014c10 <_printf_i+0x14c>
 8014c96:	682b      	ldr	r3, [r5, #0]
 8014c98:	1d1a      	adds	r2, r3, #4
 8014c9a:	602a      	str	r2, [r5, #0]
 8014c9c:	681d      	ldr	r5, [r3, #0]
 8014c9e:	6862      	ldr	r2, [r4, #4]
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	f7eb fabc 	bl	8000220 <memchr>
 8014ca8:	b108      	cbz	r0, 8014cae <_printf_i+0x1ea>
 8014caa:	1b40      	subs	r0, r0, r5
 8014cac:	6060      	str	r0, [r4, #4]
 8014cae:	6863      	ldr	r3, [r4, #4]
 8014cb0:	6123      	str	r3, [r4, #16]
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cb8:	e7aa      	b.n	8014c10 <_printf_i+0x14c>
 8014cba:	6923      	ldr	r3, [r4, #16]
 8014cbc:	462a      	mov	r2, r5
 8014cbe:	4649      	mov	r1, r9
 8014cc0:	4640      	mov	r0, r8
 8014cc2:	47d0      	blx	sl
 8014cc4:	3001      	adds	r0, #1
 8014cc6:	d0ad      	beq.n	8014c24 <_printf_i+0x160>
 8014cc8:	6823      	ldr	r3, [r4, #0]
 8014cca:	079b      	lsls	r3, r3, #30
 8014ccc:	d413      	bmi.n	8014cf6 <_printf_i+0x232>
 8014cce:	68e0      	ldr	r0, [r4, #12]
 8014cd0:	9b03      	ldr	r3, [sp, #12]
 8014cd2:	4298      	cmp	r0, r3
 8014cd4:	bfb8      	it	lt
 8014cd6:	4618      	movlt	r0, r3
 8014cd8:	e7a6      	b.n	8014c28 <_printf_i+0x164>
 8014cda:	2301      	movs	r3, #1
 8014cdc:	4632      	mov	r2, r6
 8014cde:	4649      	mov	r1, r9
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	47d0      	blx	sl
 8014ce4:	3001      	adds	r0, #1
 8014ce6:	d09d      	beq.n	8014c24 <_printf_i+0x160>
 8014ce8:	3501      	adds	r5, #1
 8014cea:	68e3      	ldr	r3, [r4, #12]
 8014cec:	9903      	ldr	r1, [sp, #12]
 8014cee:	1a5b      	subs	r3, r3, r1
 8014cf0:	42ab      	cmp	r3, r5
 8014cf2:	dcf2      	bgt.n	8014cda <_printf_i+0x216>
 8014cf4:	e7eb      	b.n	8014cce <_printf_i+0x20a>
 8014cf6:	2500      	movs	r5, #0
 8014cf8:	f104 0619 	add.w	r6, r4, #25
 8014cfc:	e7f5      	b.n	8014cea <_printf_i+0x226>
 8014cfe:	bf00      	nop
 8014d00:	0801bf10 	.word	0x0801bf10
 8014d04:	0801bf21 	.word	0x0801bf21

08014d08 <_scanf_float>:
 8014d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	b087      	sub	sp, #28
 8014d0e:	4617      	mov	r7, r2
 8014d10:	9303      	str	r3, [sp, #12]
 8014d12:	688b      	ldr	r3, [r1, #8]
 8014d14:	1e5a      	subs	r2, r3, #1
 8014d16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014d1a:	bf83      	ittte	hi
 8014d1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014d20:	195b      	addhi	r3, r3, r5
 8014d22:	9302      	strhi	r3, [sp, #8]
 8014d24:	2300      	movls	r3, #0
 8014d26:	bf86      	itte	hi
 8014d28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014d2c:	608b      	strhi	r3, [r1, #8]
 8014d2e:	9302      	strls	r3, [sp, #8]
 8014d30:	680b      	ldr	r3, [r1, #0]
 8014d32:	468b      	mov	fp, r1
 8014d34:	2500      	movs	r5, #0
 8014d36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014d3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8014d3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014d42:	4680      	mov	r8, r0
 8014d44:	460c      	mov	r4, r1
 8014d46:	465e      	mov	r6, fp
 8014d48:	46aa      	mov	sl, r5
 8014d4a:	46a9      	mov	r9, r5
 8014d4c:	9501      	str	r5, [sp, #4]
 8014d4e:	68a2      	ldr	r2, [r4, #8]
 8014d50:	b152      	cbz	r2, 8014d68 <_scanf_float+0x60>
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	2b4e      	cmp	r3, #78	; 0x4e
 8014d58:	d864      	bhi.n	8014e24 <_scanf_float+0x11c>
 8014d5a:	2b40      	cmp	r3, #64	; 0x40
 8014d5c:	d83c      	bhi.n	8014dd8 <_scanf_float+0xd0>
 8014d5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014d62:	b2c8      	uxtb	r0, r1
 8014d64:	280e      	cmp	r0, #14
 8014d66:	d93a      	bls.n	8014dde <_scanf_float+0xd6>
 8014d68:	f1b9 0f00 	cmp.w	r9, #0
 8014d6c:	d003      	beq.n	8014d76 <_scanf_float+0x6e>
 8014d6e:	6823      	ldr	r3, [r4, #0]
 8014d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d74:	6023      	str	r3, [r4, #0]
 8014d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d7a:	f1ba 0f01 	cmp.w	sl, #1
 8014d7e:	f200 8113 	bhi.w	8014fa8 <_scanf_float+0x2a0>
 8014d82:	455e      	cmp	r6, fp
 8014d84:	f200 8105 	bhi.w	8014f92 <_scanf_float+0x28a>
 8014d88:	2501      	movs	r5, #1
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	b007      	add	sp, #28
 8014d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014d96:	2a0d      	cmp	r2, #13
 8014d98:	d8e6      	bhi.n	8014d68 <_scanf_float+0x60>
 8014d9a:	a101      	add	r1, pc, #4	; (adr r1, 8014da0 <_scanf_float+0x98>)
 8014d9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014da0:	08014edf 	.word	0x08014edf
 8014da4:	08014d69 	.word	0x08014d69
 8014da8:	08014d69 	.word	0x08014d69
 8014dac:	08014d69 	.word	0x08014d69
 8014db0:	08014f3f 	.word	0x08014f3f
 8014db4:	08014f17 	.word	0x08014f17
 8014db8:	08014d69 	.word	0x08014d69
 8014dbc:	08014d69 	.word	0x08014d69
 8014dc0:	08014eed 	.word	0x08014eed
 8014dc4:	08014d69 	.word	0x08014d69
 8014dc8:	08014d69 	.word	0x08014d69
 8014dcc:	08014d69 	.word	0x08014d69
 8014dd0:	08014d69 	.word	0x08014d69
 8014dd4:	08014ea5 	.word	0x08014ea5
 8014dd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014ddc:	e7db      	b.n	8014d96 <_scanf_float+0x8e>
 8014dde:	290e      	cmp	r1, #14
 8014de0:	d8c2      	bhi.n	8014d68 <_scanf_float+0x60>
 8014de2:	a001      	add	r0, pc, #4	; (adr r0, 8014de8 <_scanf_float+0xe0>)
 8014de4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014de8:	08014e97 	.word	0x08014e97
 8014dec:	08014d69 	.word	0x08014d69
 8014df0:	08014e97 	.word	0x08014e97
 8014df4:	08014f2b 	.word	0x08014f2b
 8014df8:	08014d69 	.word	0x08014d69
 8014dfc:	08014e45 	.word	0x08014e45
 8014e00:	08014e81 	.word	0x08014e81
 8014e04:	08014e81 	.word	0x08014e81
 8014e08:	08014e81 	.word	0x08014e81
 8014e0c:	08014e81 	.word	0x08014e81
 8014e10:	08014e81 	.word	0x08014e81
 8014e14:	08014e81 	.word	0x08014e81
 8014e18:	08014e81 	.word	0x08014e81
 8014e1c:	08014e81 	.word	0x08014e81
 8014e20:	08014e81 	.word	0x08014e81
 8014e24:	2b6e      	cmp	r3, #110	; 0x6e
 8014e26:	d809      	bhi.n	8014e3c <_scanf_float+0x134>
 8014e28:	2b60      	cmp	r3, #96	; 0x60
 8014e2a:	d8b2      	bhi.n	8014d92 <_scanf_float+0x8a>
 8014e2c:	2b54      	cmp	r3, #84	; 0x54
 8014e2e:	d077      	beq.n	8014f20 <_scanf_float+0x218>
 8014e30:	2b59      	cmp	r3, #89	; 0x59
 8014e32:	d199      	bne.n	8014d68 <_scanf_float+0x60>
 8014e34:	2d07      	cmp	r5, #7
 8014e36:	d197      	bne.n	8014d68 <_scanf_float+0x60>
 8014e38:	2508      	movs	r5, #8
 8014e3a:	e029      	b.n	8014e90 <_scanf_float+0x188>
 8014e3c:	2b74      	cmp	r3, #116	; 0x74
 8014e3e:	d06f      	beq.n	8014f20 <_scanf_float+0x218>
 8014e40:	2b79      	cmp	r3, #121	; 0x79
 8014e42:	e7f6      	b.n	8014e32 <_scanf_float+0x12a>
 8014e44:	6821      	ldr	r1, [r4, #0]
 8014e46:	05c8      	lsls	r0, r1, #23
 8014e48:	d51a      	bpl.n	8014e80 <_scanf_float+0x178>
 8014e4a:	9b02      	ldr	r3, [sp, #8]
 8014e4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014e50:	6021      	str	r1, [r4, #0]
 8014e52:	f109 0901 	add.w	r9, r9, #1
 8014e56:	b11b      	cbz	r3, 8014e60 <_scanf_float+0x158>
 8014e58:	3b01      	subs	r3, #1
 8014e5a:	3201      	adds	r2, #1
 8014e5c:	9302      	str	r3, [sp, #8]
 8014e5e:	60a2      	str	r2, [r4, #8]
 8014e60:	68a3      	ldr	r3, [r4, #8]
 8014e62:	3b01      	subs	r3, #1
 8014e64:	60a3      	str	r3, [r4, #8]
 8014e66:	6923      	ldr	r3, [r4, #16]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	6123      	str	r3, [r4, #16]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	3b01      	subs	r3, #1
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	607b      	str	r3, [r7, #4]
 8014e74:	f340 8084 	ble.w	8014f80 <_scanf_float+0x278>
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	603b      	str	r3, [r7, #0]
 8014e7e:	e766      	b.n	8014d4e <_scanf_float+0x46>
 8014e80:	eb1a 0f05 	cmn.w	sl, r5
 8014e84:	f47f af70 	bne.w	8014d68 <_scanf_float+0x60>
 8014e88:	6822      	ldr	r2, [r4, #0]
 8014e8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014e8e:	6022      	str	r2, [r4, #0]
 8014e90:	f806 3b01 	strb.w	r3, [r6], #1
 8014e94:	e7e4      	b.n	8014e60 <_scanf_float+0x158>
 8014e96:	6822      	ldr	r2, [r4, #0]
 8014e98:	0610      	lsls	r0, r2, #24
 8014e9a:	f57f af65 	bpl.w	8014d68 <_scanf_float+0x60>
 8014e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014ea2:	e7f4      	b.n	8014e8e <_scanf_float+0x186>
 8014ea4:	f1ba 0f00 	cmp.w	sl, #0
 8014ea8:	d10e      	bne.n	8014ec8 <_scanf_float+0x1c0>
 8014eaa:	f1b9 0f00 	cmp.w	r9, #0
 8014eae:	d10e      	bne.n	8014ece <_scanf_float+0x1c6>
 8014eb0:	6822      	ldr	r2, [r4, #0]
 8014eb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014eb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014eba:	d108      	bne.n	8014ece <_scanf_float+0x1c6>
 8014ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014ec0:	6022      	str	r2, [r4, #0]
 8014ec2:	f04f 0a01 	mov.w	sl, #1
 8014ec6:	e7e3      	b.n	8014e90 <_scanf_float+0x188>
 8014ec8:	f1ba 0f02 	cmp.w	sl, #2
 8014ecc:	d055      	beq.n	8014f7a <_scanf_float+0x272>
 8014ece:	2d01      	cmp	r5, #1
 8014ed0:	d002      	beq.n	8014ed8 <_scanf_float+0x1d0>
 8014ed2:	2d04      	cmp	r5, #4
 8014ed4:	f47f af48 	bne.w	8014d68 <_scanf_float+0x60>
 8014ed8:	3501      	adds	r5, #1
 8014eda:	b2ed      	uxtb	r5, r5
 8014edc:	e7d8      	b.n	8014e90 <_scanf_float+0x188>
 8014ede:	f1ba 0f01 	cmp.w	sl, #1
 8014ee2:	f47f af41 	bne.w	8014d68 <_scanf_float+0x60>
 8014ee6:	f04f 0a02 	mov.w	sl, #2
 8014eea:	e7d1      	b.n	8014e90 <_scanf_float+0x188>
 8014eec:	b97d      	cbnz	r5, 8014f0e <_scanf_float+0x206>
 8014eee:	f1b9 0f00 	cmp.w	r9, #0
 8014ef2:	f47f af3c 	bne.w	8014d6e <_scanf_float+0x66>
 8014ef6:	6822      	ldr	r2, [r4, #0]
 8014ef8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014efc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014f00:	f47f af39 	bne.w	8014d76 <_scanf_float+0x6e>
 8014f04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f08:	6022      	str	r2, [r4, #0]
 8014f0a:	2501      	movs	r5, #1
 8014f0c:	e7c0      	b.n	8014e90 <_scanf_float+0x188>
 8014f0e:	2d03      	cmp	r5, #3
 8014f10:	d0e2      	beq.n	8014ed8 <_scanf_float+0x1d0>
 8014f12:	2d05      	cmp	r5, #5
 8014f14:	e7de      	b.n	8014ed4 <_scanf_float+0x1cc>
 8014f16:	2d02      	cmp	r5, #2
 8014f18:	f47f af26 	bne.w	8014d68 <_scanf_float+0x60>
 8014f1c:	2503      	movs	r5, #3
 8014f1e:	e7b7      	b.n	8014e90 <_scanf_float+0x188>
 8014f20:	2d06      	cmp	r5, #6
 8014f22:	f47f af21 	bne.w	8014d68 <_scanf_float+0x60>
 8014f26:	2507      	movs	r5, #7
 8014f28:	e7b2      	b.n	8014e90 <_scanf_float+0x188>
 8014f2a:	6822      	ldr	r2, [r4, #0]
 8014f2c:	0591      	lsls	r1, r2, #22
 8014f2e:	f57f af1b 	bpl.w	8014d68 <_scanf_float+0x60>
 8014f32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014f36:	6022      	str	r2, [r4, #0]
 8014f38:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f3c:	e7a8      	b.n	8014e90 <_scanf_float+0x188>
 8014f3e:	6822      	ldr	r2, [r4, #0]
 8014f40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014f44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014f48:	d006      	beq.n	8014f58 <_scanf_float+0x250>
 8014f4a:	0550      	lsls	r0, r2, #21
 8014f4c:	f57f af0c 	bpl.w	8014d68 <_scanf_float+0x60>
 8014f50:	f1b9 0f00 	cmp.w	r9, #0
 8014f54:	f43f af0f 	beq.w	8014d76 <_scanf_float+0x6e>
 8014f58:	0591      	lsls	r1, r2, #22
 8014f5a:	bf58      	it	pl
 8014f5c:	9901      	ldrpl	r1, [sp, #4]
 8014f5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f62:	bf58      	it	pl
 8014f64:	eba9 0101 	subpl.w	r1, r9, r1
 8014f68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014f6c:	bf58      	it	pl
 8014f6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014f72:	6022      	str	r2, [r4, #0]
 8014f74:	f04f 0900 	mov.w	r9, #0
 8014f78:	e78a      	b.n	8014e90 <_scanf_float+0x188>
 8014f7a:	f04f 0a03 	mov.w	sl, #3
 8014f7e:	e787      	b.n	8014e90 <_scanf_float+0x188>
 8014f80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014f84:	4639      	mov	r1, r7
 8014f86:	4640      	mov	r0, r8
 8014f88:	4798      	blx	r3
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	f43f aedf 	beq.w	8014d4e <_scanf_float+0x46>
 8014f90:	e6ea      	b.n	8014d68 <_scanf_float+0x60>
 8014f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014f9a:	463a      	mov	r2, r7
 8014f9c:	4640      	mov	r0, r8
 8014f9e:	4798      	blx	r3
 8014fa0:	6923      	ldr	r3, [r4, #16]
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	6123      	str	r3, [r4, #16]
 8014fa6:	e6ec      	b.n	8014d82 <_scanf_float+0x7a>
 8014fa8:	1e6b      	subs	r3, r5, #1
 8014faa:	2b06      	cmp	r3, #6
 8014fac:	d825      	bhi.n	8014ffa <_scanf_float+0x2f2>
 8014fae:	2d02      	cmp	r5, #2
 8014fb0:	d836      	bhi.n	8015020 <_scanf_float+0x318>
 8014fb2:	455e      	cmp	r6, fp
 8014fb4:	f67f aee8 	bls.w	8014d88 <_scanf_float+0x80>
 8014fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fc0:	463a      	mov	r2, r7
 8014fc2:	4640      	mov	r0, r8
 8014fc4:	4798      	blx	r3
 8014fc6:	6923      	ldr	r3, [r4, #16]
 8014fc8:	3b01      	subs	r3, #1
 8014fca:	6123      	str	r3, [r4, #16]
 8014fcc:	e7f1      	b.n	8014fb2 <_scanf_float+0x2aa>
 8014fce:	9802      	ldr	r0, [sp, #8]
 8014fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014fd8:	9002      	str	r0, [sp, #8]
 8014fda:	463a      	mov	r2, r7
 8014fdc:	4640      	mov	r0, r8
 8014fde:	4798      	blx	r3
 8014fe0:	6923      	ldr	r3, [r4, #16]
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	6123      	str	r3, [r4, #16]
 8014fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014fea:	fa5f fa8a 	uxtb.w	sl, sl
 8014fee:	f1ba 0f02 	cmp.w	sl, #2
 8014ff2:	d1ec      	bne.n	8014fce <_scanf_float+0x2c6>
 8014ff4:	3d03      	subs	r5, #3
 8014ff6:	b2ed      	uxtb	r5, r5
 8014ff8:	1b76      	subs	r6, r6, r5
 8014ffa:	6823      	ldr	r3, [r4, #0]
 8014ffc:	05da      	lsls	r2, r3, #23
 8014ffe:	d52f      	bpl.n	8015060 <_scanf_float+0x358>
 8015000:	055b      	lsls	r3, r3, #21
 8015002:	d510      	bpl.n	8015026 <_scanf_float+0x31e>
 8015004:	455e      	cmp	r6, fp
 8015006:	f67f aebf 	bls.w	8014d88 <_scanf_float+0x80>
 801500a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801500e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015012:	463a      	mov	r2, r7
 8015014:	4640      	mov	r0, r8
 8015016:	4798      	blx	r3
 8015018:	6923      	ldr	r3, [r4, #16]
 801501a:	3b01      	subs	r3, #1
 801501c:	6123      	str	r3, [r4, #16]
 801501e:	e7f1      	b.n	8015004 <_scanf_float+0x2fc>
 8015020:	46aa      	mov	sl, r5
 8015022:	9602      	str	r6, [sp, #8]
 8015024:	e7df      	b.n	8014fe6 <_scanf_float+0x2de>
 8015026:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801502a:	6923      	ldr	r3, [r4, #16]
 801502c:	2965      	cmp	r1, #101	; 0x65
 801502e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015032:	f106 35ff 	add.w	r5, r6, #4294967295
 8015036:	6123      	str	r3, [r4, #16]
 8015038:	d00c      	beq.n	8015054 <_scanf_float+0x34c>
 801503a:	2945      	cmp	r1, #69	; 0x45
 801503c:	d00a      	beq.n	8015054 <_scanf_float+0x34c>
 801503e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015042:	463a      	mov	r2, r7
 8015044:	4640      	mov	r0, r8
 8015046:	4798      	blx	r3
 8015048:	6923      	ldr	r3, [r4, #16]
 801504a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801504e:	3b01      	subs	r3, #1
 8015050:	1eb5      	subs	r5, r6, #2
 8015052:	6123      	str	r3, [r4, #16]
 8015054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015058:	463a      	mov	r2, r7
 801505a:	4640      	mov	r0, r8
 801505c:	4798      	blx	r3
 801505e:	462e      	mov	r6, r5
 8015060:	6825      	ldr	r5, [r4, #0]
 8015062:	f015 0510 	ands.w	r5, r5, #16
 8015066:	d158      	bne.n	801511a <_scanf_float+0x412>
 8015068:	7035      	strb	r5, [r6, #0]
 801506a:	6823      	ldr	r3, [r4, #0]
 801506c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015074:	d11c      	bne.n	80150b0 <_scanf_float+0x3a8>
 8015076:	9b01      	ldr	r3, [sp, #4]
 8015078:	454b      	cmp	r3, r9
 801507a:	eba3 0209 	sub.w	r2, r3, r9
 801507e:	d124      	bne.n	80150ca <_scanf_float+0x3c2>
 8015080:	2200      	movs	r2, #0
 8015082:	4659      	mov	r1, fp
 8015084:	4640      	mov	r0, r8
 8015086:	f002 fcd3 	bl	8017a30 <_strtod_r>
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	6821      	ldr	r1, [r4, #0]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f011 0f02 	tst.w	r1, #2
 8015094:	ec57 6b10 	vmov	r6, r7, d0
 8015098:	f103 0204 	add.w	r2, r3, #4
 801509c:	d020      	beq.n	80150e0 <_scanf_float+0x3d8>
 801509e:	9903      	ldr	r1, [sp, #12]
 80150a0:	600a      	str	r2, [r1, #0]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	e9c3 6700 	strd	r6, r7, [r3]
 80150a8:	68e3      	ldr	r3, [r4, #12]
 80150aa:	3301      	adds	r3, #1
 80150ac:	60e3      	str	r3, [r4, #12]
 80150ae:	e66c      	b.n	8014d8a <_scanf_float+0x82>
 80150b0:	9b04      	ldr	r3, [sp, #16]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d0e4      	beq.n	8015080 <_scanf_float+0x378>
 80150b6:	9905      	ldr	r1, [sp, #20]
 80150b8:	230a      	movs	r3, #10
 80150ba:	462a      	mov	r2, r5
 80150bc:	3101      	adds	r1, #1
 80150be:	4640      	mov	r0, r8
 80150c0:	f002 fd3e 	bl	8017b40 <_strtol_r>
 80150c4:	9b04      	ldr	r3, [sp, #16]
 80150c6:	9e05      	ldr	r6, [sp, #20]
 80150c8:	1ac2      	subs	r2, r0, r3
 80150ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80150ce:	429e      	cmp	r6, r3
 80150d0:	bf28      	it	cs
 80150d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80150d6:	4912      	ldr	r1, [pc, #72]	; (8015120 <_scanf_float+0x418>)
 80150d8:	4630      	mov	r0, r6
 80150da:	f000 f8e7 	bl	80152ac <siprintf>
 80150de:	e7cf      	b.n	8015080 <_scanf_float+0x378>
 80150e0:	f011 0f04 	tst.w	r1, #4
 80150e4:	9903      	ldr	r1, [sp, #12]
 80150e6:	600a      	str	r2, [r1, #0]
 80150e8:	d1db      	bne.n	80150a2 <_scanf_float+0x39a>
 80150ea:	f8d3 8000 	ldr.w	r8, [r3]
 80150ee:	ee10 2a10 	vmov	r2, s0
 80150f2:	ee10 0a10 	vmov	r0, s0
 80150f6:	463b      	mov	r3, r7
 80150f8:	4639      	mov	r1, r7
 80150fa:	f7eb fd3f 	bl	8000b7c <__aeabi_dcmpun>
 80150fe:	b128      	cbz	r0, 801510c <_scanf_float+0x404>
 8015100:	4808      	ldr	r0, [pc, #32]	; (8015124 <_scanf_float+0x41c>)
 8015102:	f000 fa5b 	bl	80155bc <nanf>
 8015106:	ed88 0a00 	vstr	s0, [r8]
 801510a:	e7cd      	b.n	80150a8 <_scanf_float+0x3a0>
 801510c:	4630      	mov	r0, r6
 801510e:	4639      	mov	r1, r7
 8015110:	f7eb fd92 	bl	8000c38 <__aeabi_d2f>
 8015114:	f8c8 0000 	str.w	r0, [r8]
 8015118:	e7c6      	b.n	80150a8 <_scanf_float+0x3a0>
 801511a:	2500      	movs	r5, #0
 801511c:	e635      	b.n	8014d8a <_scanf_float+0x82>
 801511e:	bf00      	nop
 8015120:	0801bf32 	.word	0x0801bf32
 8015124:	0801c2e0 	.word	0x0801c2e0

08015128 <std>:
 8015128:	2300      	movs	r3, #0
 801512a:	b510      	push	{r4, lr}
 801512c:	4604      	mov	r4, r0
 801512e:	e9c0 3300 	strd	r3, r3, [r0]
 8015132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015136:	6083      	str	r3, [r0, #8]
 8015138:	8181      	strh	r1, [r0, #12]
 801513a:	6643      	str	r3, [r0, #100]	; 0x64
 801513c:	81c2      	strh	r2, [r0, #14]
 801513e:	6183      	str	r3, [r0, #24]
 8015140:	4619      	mov	r1, r3
 8015142:	2208      	movs	r2, #8
 8015144:	305c      	adds	r0, #92	; 0x5c
 8015146:	f000 f942 	bl	80153ce <memset>
 801514a:	4b0d      	ldr	r3, [pc, #52]	; (8015180 <std+0x58>)
 801514c:	6263      	str	r3, [r4, #36]	; 0x24
 801514e:	4b0d      	ldr	r3, [pc, #52]	; (8015184 <std+0x5c>)
 8015150:	62a3      	str	r3, [r4, #40]	; 0x28
 8015152:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <std+0x60>)
 8015154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015156:	4b0d      	ldr	r3, [pc, #52]	; (801518c <std+0x64>)
 8015158:	6323      	str	r3, [r4, #48]	; 0x30
 801515a:	4b0d      	ldr	r3, [pc, #52]	; (8015190 <std+0x68>)
 801515c:	6224      	str	r4, [r4, #32]
 801515e:	429c      	cmp	r4, r3
 8015160:	d006      	beq.n	8015170 <std+0x48>
 8015162:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015166:	4294      	cmp	r4, r2
 8015168:	d002      	beq.n	8015170 <std+0x48>
 801516a:	33d0      	adds	r3, #208	; 0xd0
 801516c:	429c      	cmp	r4, r3
 801516e:	d105      	bne.n	801517c <std+0x54>
 8015170:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015178:	f000 ba0e 	b.w	8015598 <__retarget_lock_init_recursive>
 801517c:	bd10      	pop	{r4, pc}
 801517e:	bf00      	nop
 8015180:	08015345 	.word	0x08015345
 8015184:	0801536b 	.word	0x0801536b
 8015188:	080153a3 	.word	0x080153a3
 801518c:	080153c7 	.word	0x080153c7
 8015190:	20008f54 	.word	0x20008f54

08015194 <stdio_exit_handler>:
 8015194:	4a02      	ldr	r2, [pc, #8]	; (80151a0 <stdio_exit_handler+0xc>)
 8015196:	4903      	ldr	r1, [pc, #12]	; (80151a4 <stdio_exit_handler+0x10>)
 8015198:	4803      	ldr	r0, [pc, #12]	; (80151a8 <stdio_exit_handler+0x14>)
 801519a:	f000 b869 	b.w	8015270 <_fwalk_sglue>
 801519e:	bf00      	nop
 80151a0:	20000018 	.word	0x20000018
 80151a4:	08018541 	.word	0x08018541
 80151a8:	20000024 	.word	0x20000024

080151ac <cleanup_stdio>:
 80151ac:	6841      	ldr	r1, [r0, #4]
 80151ae:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <cleanup_stdio+0x34>)
 80151b0:	4299      	cmp	r1, r3
 80151b2:	b510      	push	{r4, lr}
 80151b4:	4604      	mov	r4, r0
 80151b6:	d001      	beq.n	80151bc <cleanup_stdio+0x10>
 80151b8:	f003 f9c2 	bl	8018540 <_fflush_r>
 80151bc:	68a1      	ldr	r1, [r4, #8]
 80151be:	4b09      	ldr	r3, [pc, #36]	; (80151e4 <cleanup_stdio+0x38>)
 80151c0:	4299      	cmp	r1, r3
 80151c2:	d002      	beq.n	80151ca <cleanup_stdio+0x1e>
 80151c4:	4620      	mov	r0, r4
 80151c6:	f003 f9bb 	bl	8018540 <_fflush_r>
 80151ca:	68e1      	ldr	r1, [r4, #12]
 80151cc:	4b06      	ldr	r3, [pc, #24]	; (80151e8 <cleanup_stdio+0x3c>)
 80151ce:	4299      	cmp	r1, r3
 80151d0:	d004      	beq.n	80151dc <cleanup_stdio+0x30>
 80151d2:	4620      	mov	r0, r4
 80151d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d8:	f003 b9b2 	b.w	8018540 <_fflush_r>
 80151dc:	bd10      	pop	{r4, pc}
 80151de:	bf00      	nop
 80151e0:	20008f54 	.word	0x20008f54
 80151e4:	20008fbc 	.word	0x20008fbc
 80151e8:	20009024 	.word	0x20009024

080151ec <global_stdio_init.part.0>:
 80151ec:	b510      	push	{r4, lr}
 80151ee:	4b0b      	ldr	r3, [pc, #44]	; (801521c <global_stdio_init.part.0+0x30>)
 80151f0:	4c0b      	ldr	r4, [pc, #44]	; (8015220 <global_stdio_init.part.0+0x34>)
 80151f2:	4a0c      	ldr	r2, [pc, #48]	; (8015224 <global_stdio_init.part.0+0x38>)
 80151f4:	601a      	str	r2, [r3, #0]
 80151f6:	4620      	mov	r0, r4
 80151f8:	2200      	movs	r2, #0
 80151fa:	2104      	movs	r1, #4
 80151fc:	f7ff ff94 	bl	8015128 <std>
 8015200:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015204:	2201      	movs	r2, #1
 8015206:	2109      	movs	r1, #9
 8015208:	f7ff ff8e 	bl	8015128 <std>
 801520c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015210:	2202      	movs	r2, #2
 8015212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015216:	2112      	movs	r1, #18
 8015218:	f7ff bf86 	b.w	8015128 <std>
 801521c:	2000908c 	.word	0x2000908c
 8015220:	20008f54 	.word	0x20008f54
 8015224:	08015195 	.word	0x08015195

08015228 <__sfp_lock_acquire>:
 8015228:	4801      	ldr	r0, [pc, #4]	; (8015230 <__sfp_lock_acquire+0x8>)
 801522a:	f000 b9b6 	b.w	801559a <__retarget_lock_acquire_recursive>
 801522e:	bf00      	nop
 8015230:	20009095 	.word	0x20009095

08015234 <__sfp_lock_release>:
 8015234:	4801      	ldr	r0, [pc, #4]	; (801523c <__sfp_lock_release+0x8>)
 8015236:	f000 b9b1 	b.w	801559c <__retarget_lock_release_recursive>
 801523a:	bf00      	nop
 801523c:	20009095 	.word	0x20009095

08015240 <__sinit>:
 8015240:	b510      	push	{r4, lr}
 8015242:	4604      	mov	r4, r0
 8015244:	f7ff fff0 	bl	8015228 <__sfp_lock_acquire>
 8015248:	6a23      	ldr	r3, [r4, #32]
 801524a:	b11b      	cbz	r3, 8015254 <__sinit+0x14>
 801524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015250:	f7ff bff0 	b.w	8015234 <__sfp_lock_release>
 8015254:	4b04      	ldr	r3, [pc, #16]	; (8015268 <__sinit+0x28>)
 8015256:	6223      	str	r3, [r4, #32]
 8015258:	4b04      	ldr	r3, [pc, #16]	; (801526c <__sinit+0x2c>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d1f5      	bne.n	801524c <__sinit+0xc>
 8015260:	f7ff ffc4 	bl	80151ec <global_stdio_init.part.0>
 8015264:	e7f2      	b.n	801524c <__sinit+0xc>
 8015266:	bf00      	nop
 8015268:	080151ad 	.word	0x080151ad
 801526c:	2000908c 	.word	0x2000908c

08015270 <_fwalk_sglue>:
 8015270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015274:	4607      	mov	r7, r0
 8015276:	4688      	mov	r8, r1
 8015278:	4614      	mov	r4, r2
 801527a:	2600      	movs	r6, #0
 801527c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015280:	f1b9 0901 	subs.w	r9, r9, #1
 8015284:	d505      	bpl.n	8015292 <_fwalk_sglue+0x22>
 8015286:	6824      	ldr	r4, [r4, #0]
 8015288:	2c00      	cmp	r4, #0
 801528a:	d1f7      	bne.n	801527c <_fwalk_sglue+0xc>
 801528c:	4630      	mov	r0, r6
 801528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015292:	89ab      	ldrh	r3, [r5, #12]
 8015294:	2b01      	cmp	r3, #1
 8015296:	d907      	bls.n	80152a8 <_fwalk_sglue+0x38>
 8015298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801529c:	3301      	adds	r3, #1
 801529e:	d003      	beq.n	80152a8 <_fwalk_sglue+0x38>
 80152a0:	4629      	mov	r1, r5
 80152a2:	4638      	mov	r0, r7
 80152a4:	47c0      	blx	r8
 80152a6:	4306      	orrs	r6, r0
 80152a8:	3568      	adds	r5, #104	; 0x68
 80152aa:	e7e9      	b.n	8015280 <_fwalk_sglue+0x10>

080152ac <siprintf>:
 80152ac:	b40e      	push	{r1, r2, r3}
 80152ae:	b500      	push	{lr}
 80152b0:	b09c      	sub	sp, #112	; 0x70
 80152b2:	ab1d      	add	r3, sp, #116	; 0x74
 80152b4:	9002      	str	r0, [sp, #8]
 80152b6:	9006      	str	r0, [sp, #24]
 80152b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152bc:	4809      	ldr	r0, [pc, #36]	; (80152e4 <siprintf+0x38>)
 80152be:	9107      	str	r1, [sp, #28]
 80152c0:	9104      	str	r1, [sp, #16]
 80152c2:	4909      	ldr	r1, [pc, #36]	; (80152e8 <siprintf+0x3c>)
 80152c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152c8:	9105      	str	r1, [sp, #20]
 80152ca:	6800      	ldr	r0, [r0, #0]
 80152cc:	9301      	str	r3, [sp, #4]
 80152ce:	a902      	add	r1, sp, #8
 80152d0:	f002 fc92 	bl	8017bf8 <_svfiprintf_r>
 80152d4:	9b02      	ldr	r3, [sp, #8]
 80152d6:	2200      	movs	r2, #0
 80152d8:	701a      	strb	r2, [r3, #0]
 80152da:	b01c      	add	sp, #112	; 0x70
 80152dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80152e0:	b003      	add	sp, #12
 80152e2:	4770      	bx	lr
 80152e4:	20000070 	.word	0x20000070
 80152e8:	ffff0208 	.word	0xffff0208

080152ec <siscanf>:
 80152ec:	b40e      	push	{r1, r2, r3}
 80152ee:	b510      	push	{r4, lr}
 80152f0:	b09f      	sub	sp, #124	; 0x7c
 80152f2:	ac21      	add	r4, sp, #132	; 0x84
 80152f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80152f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80152fc:	9201      	str	r2, [sp, #4]
 80152fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015302:	9004      	str	r0, [sp, #16]
 8015304:	9008      	str	r0, [sp, #32]
 8015306:	f7ea ffdb 	bl	80002c0 <strlen>
 801530a:	4b0c      	ldr	r3, [pc, #48]	; (801533c <siscanf+0x50>)
 801530c:	9005      	str	r0, [sp, #20]
 801530e:	9009      	str	r0, [sp, #36]	; 0x24
 8015310:	930d      	str	r3, [sp, #52]	; 0x34
 8015312:	480b      	ldr	r0, [pc, #44]	; (8015340 <siscanf+0x54>)
 8015314:	9a01      	ldr	r2, [sp, #4]
 8015316:	6800      	ldr	r0, [r0, #0]
 8015318:	9403      	str	r4, [sp, #12]
 801531a:	2300      	movs	r3, #0
 801531c:	9311      	str	r3, [sp, #68]	; 0x44
 801531e:	9316      	str	r3, [sp, #88]	; 0x58
 8015320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015324:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015328:	a904      	add	r1, sp, #16
 801532a:	4623      	mov	r3, r4
 801532c:	f002 fdbc 	bl	8017ea8 <__ssvfiscanf_r>
 8015330:	b01f      	add	sp, #124	; 0x7c
 8015332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015336:	b003      	add	sp, #12
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	08015367 	.word	0x08015367
 8015340:	20000070 	.word	0x20000070

08015344 <__sread>:
 8015344:	b510      	push	{r4, lr}
 8015346:	460c      	mov	r4, r1
 8015348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801534c:	f000 f8d6 	bl	80154fc <_read_r>
 8015350:	2800      	cmp	r0, #0
 8015352:	bfab      	itete	ge
 8015354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015356:	89a3      	ldrhlt	r3, [r4, #12]
 8015358:	181b      	addge	r3, r3, r0
 801535a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801535e:	bfac      	ite	ge
 8015360:	6563      	strge	r3, [r4, #84]	; 0x54
 8015362:	81a3      	strhlt	r3, [r4, #12]
 8015364:	bd10      	pop	{r4, pc}

08015366 <__seofread>:
 8015366:	2000      	movs	r0, #0
 8015368:	4770      	bx	lr

0801536a <__swrite>:
 801536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536e:	461f      	mov	r7, r3
 8015370:	898b      	ldrh	r3, [r1, #12]
 8015372:	05db      	lsls	r3, r3, #23
 8015374:	4605      	mov	r5, r0
 8015376:	460c      	mov	r4, r1
 8015378:	4616      	mov	r6, r2
 801537a:	d505      	bpl.n	8015388 <__swrite+0x1e>
 801537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015380:	2302      	movs	r3, #2
 8015382:	2200      	movs	r2, #0
 8015384:	f000 f8a8 	bl	80154d8 <_lseek_r>
 8015388:	89a3      	ldrh	r3, [r4, #12]
 801538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015392:	81a3      	strh	r3, [r4, #12]
 8015394:	4632      	mov	r2, r6
 8015396:	463b      	mov	r3, r7
 8015398:	4628      	mov	r0, r5
 801539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801539e:	f000 b8bf 	b.w	8015520 <_write_r>

080153a2 <__sseek>:
 80153a2:	b510      	push	{r4, lr}
 80153a4:	460c      	mov	r4, r1
 80153a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153aa:	f000 f895 	bl	80154d8 <_lseek_r>
 80153ae:	1c43      	adds	r3, r0, #1
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	bf15      	itete	ne
 80153b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80153b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153be:	81a3      	strheq	r3, [r4, #12]
 80153c0:	bf18      	it	ne
 80153c2:	81a3      	strhne	r3, [r4, #12]
 80153c4:	bd10      	pop	{r4, pc}

080153c6 <__sclose>:
 80153c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ca:	f000 b81f 	b.w	801540c <_close_r>

080153ce <memset>:
 80153ce:	4402      	add	r2, r0
 80153d0:	4603      	mov	r3, r0
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d100      	bne.n	80153d8 <memset+0xa>
 80153d6:	4770      	bx	lr
 80153d8:	f803 1b01 	strb.w	r1, [r3], #1
 80153dc:	e7f9      	b.n	80153d2 <memset+0x4>

080153de <strncmp>:
 80153de:	b510      	push	{r4, lr}
 80153e0:	b16a      	cbz	r2, 80153fe <strncmp+0x20>
 80153e2:	3901      	subs	r1, #1
 80153e4:	1884      	adds	r4, r0, r2
 80153e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d103      	bne.n	80153fa <strncmp+0x1c>
 80153f2:	42a0      	cmp	r0, r4
 80153f4:	d001      	beq.n	80153fa <strncmp+0x1c>
 80153f6:	2a00      	cmp	r2, #0
 80153f8:	d1f5      	bne.n	80153e6 <strncmp+0x8>
 80153fa:	1ad0      	subs	r0, r2, r3
 80153fc:	bd10      	pop	{r4, pc}
 80153fe:	4610      	mov	r0, r2
 8015400:	e7fc      	b.n	80153fc <strncmp+0x1e>
	...

08015404 <_localeconv_r>:
 8015404:	4800      	ldr	r0, [pc, #0]	; (8015408 <_localeconv_r+0x4>)
 8015406:	4770      	bx	lr
 8015408:	20000164 	.word	0x20000164

0801540c <_close_r>:
 801540c:	b538      	push	{r3, r4, r5, lr}
 801540e:	4d06      	ldr	r5, [pc, #24]	; (8015428 <_close_r+0x1c>)
 8015410:	2300      	movs	r3, #0
 8015412:	4604      	mov	r4, r0
 8015414:	4608      	mov	r0, r1
 8015416:	602b      	str	r3, [r5, #0]
 8015418:	f7f1 fdc1 	bl	8006f9e <_close>
 801541c:	1c43      	adds	r3, r0, #1
 801541e:	d102      	bne.n	8015426 <_close_r+0x1a>
 8015420:	682b      	ldr	r3, [r5, #0]
 8015422:	b103      	cbz	r3, 8015426 <_close_r+0x1a>
 8015424:	6023      	str	r3, [r4, #0]
 8015426:	bd38      	pop	{r3, r4, r5, pc}
 8015428:	20009090 	.word	0x20009090

0801542c <_reclaim_reent>:
 801542c:	4b29      	ldr	r3, [pc, #164]	; (80154d4 <_reclaim_reent+0xa8>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	4283      	cmp	r3, r0
 8015432:	b570      	push	{r4, r5, r6, lr}
 8015434:	4604      	mov	r4, r0
 8015436:	d04b      	beq.n	80154d0 <_reclaim_reent+0xa4>
 8015438:	69c3      	ldr	r3, [r0, #28]
 801543a:	b143      	cbz	r3, 801544e <_reclaim_reent+0x22>
 801543c:	68db      	ldr	r3, [r3, #12]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d144      	bne.n	80154cc <_reclaim_reent+0xa0>
 8015442:	69e3      	ldr	r3, [r4, #28]
 8015444:	6819      	ldr	r1, [r3, #0]
 8015446:	b111      	cbz	r1, 801544e <_reclaim_reent+0x22>
 8015448:	4620      	mov	r0, r4
 801544a:	f000 ff37 	bl	80162bc <_free_r>
 801544e:	6961      	ldr	r1, [r4, #20]
 8015450:	b111      	cbz	r1, 8015458 <_reclaim_reent+0x2c>
 8015452:	4620      	mov	r0, r4
 8015454:	f000 ff32 	bl	80162bc <_free_r>
 8015458:	69e1      	ldr	r1, [r4, #28]
 801545a:	b111      	cbz	r1, 8015462 <_reclaim_reent+0x36>
 801545c:	4620      	mov	r0, r4
 801545e:	f000 ff2d 	bl	80162bc <_free_r>
 8015462:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015464:	b111      	cbz	r1, 801546c <_reclaim_reent+0x40>
 8015466:	4620      	mov	r0, r4
 8015468:	f000 ff28 	bl	80162bc <_free_r>
 801546c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801546e:	b111      	cbz	r1, 8015476 <_reclaim_reent+0x4a>
 8015470:	4620      	mov	r0, r4
 8015472:	f000 ff23 	bl	80162bc <_free_r>
 8015476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015478:	b111      	cbz	r1, 8015480 <_reclaim_reent+0x54>
 801547a:	4620      	mov	r0, r4
 801547c:	f000 ff1e 	bl	80162bc <_free_r>
 8015480:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015482:	b111      	cbz	r1, 801548a <_reclaim_reent+0x5e>
 8015484:	4620      	mov	r0, r4
 8015486:	f000 ff19 	bl	80162bc <_free_r>
 801548a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801548c:	b111      	cbz	r1, 8015494 <_reclaim_reent+0x68>
 801548e:	4620      	mov	r0, r4
 8015490:	f000 ff14 	bl	80162bc <_free_r>
 8015494:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015496:	b111      	cbz	r1, 801549e <_reclaim_reent+0x72>
 8015498:	4620      	mov	r0, r4
 801549a:	f000 ff0f 	bl	80162bc <_free_r>
 801549e:	6a23      	ldr	r3, [r4, #32]
 80154a0:	b1b3      	cbz	r3, 80154d0 <_reclaim_reent+0xa4>
 80154a2:	4620      	mov	r0, r4
 80154a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154a8:	4718      	bx	r3
 80154aa:	5949      	ldr	r1, [r1, r5]
 80154ac:	b941      	cbnz	r1, 80154c0 <_reclaim_reent+0x94>
 80154ae:	3504      	adds	r5, #4
 80154b0:	69e3      	ldr	r3, [r4, #28]
 80154b2:	2d80      	cmp	r5, #128	; 0x80
 80154b4:	68d9      	ldr	r1, [r3, #12]
 80154b6:	d1f8      	bne.n	80154aa <_reclaim_reent+0x7e>
 80154b8:	4620      	mov	r0, r4
 80154ba:	f000 feff 	bl	80162bc <_free_r>
 80154be:	e7c0      	b.n	8015442 <_reclaim_reent+0x16>
 80154c0:	680e      	ldr	r6, [r1, #0]
 80154c2:	4620      	mov	r0, r4
 80154c4:	f000 fefa 	bl	80162bc <_free_r>
 80154c8:	4631      	mov	r1, r6
 80154ca:	e7ef      	b.n	80154ac <_reclaim_reent+0x80>
 80154cc:	2500      	movs	r5, #0
 80154ce:	e7ef      	b.n	80154b0 <_reclaim_reent+0x84>
 80154d0:	bd70      	pop	{r4, r5, r6, pc}
 80154d2:	bf00      	nop
 80154d4:	20000070 	.word	0x20000070

080154d8 <_lseek_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4d07      	ldr	r5, [pc, #28]	; (80154f8 <_lseek_r+0x20>)
 80154dc:	4604      	mov	r4, r0
 80154de:	4608      	mov	r0, r1
 80154e0:	4611      	mov	r1, r2
 80154e2:	2200      	movs	r2, #0
 80154e4:	602a      	str	r2, [r5, #0]
 80154e6:	461a      	mov	r2, r3
 80154e8:	f7f1 fd80 	bl	8006fec <_lseek>
 80154ec:	1c43      	adds	r3, r0, #1
 80154ee:	d102      	bne.n	80154f6 <_lseek_r+0x1e>
 80154f0:	682b      	ldr	r3, [r5, #0]
 80154f2:	b103      	cbz	r3, 80154f6 <_lseek_r+0x1e>
 80154f4:	6023      	str	r3, [r4, #0]
 80154f6:	bd38      	pop	{r3, r4, r5, pc}
 80154f8:	20009090 	.word	0x20009090

080154fc <_read_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4d07      	ldr	r5, [pc, #28]	; (801551c <_read_r+0x20>)
 8015500:	4604      	mov	r4, r0
 8015502:	4608      	mov	r0, r1
 8015504:	4611      	mov	r1, r2
 8015506:	2200      	movs	r2, #0
 8015508:	602a      	str	r2, [r5, #0]
 801550a:	461a      	mov	r2, r3
 801550c:	f7f1 fd0e 	bl	8006f2c <_read>
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d102      	bne.n	801551a <_read_r+0x1e>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	b103      	cbz	r3, 801551a <_read_r+0x1e>
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	bd38      	pop	{r3, r4, r5, pc}
 801551c:	20009090 	.word	0x20009090

08015520 <_write_r>:
 8015520:	b538      	push	{r3, r4, r5, lr}
 8015522:	4d07      	ldr	r5, [pc, #28]	; (8015540 <_write_r+0x20>)
 8015524:	4604      	mov	r4, r0
 8015526:	4608      	mov	r0, r1
 8015528:	4611      	mov	r1, r2
 801552a:	2200      	movs	r2, #0
 801552c:	602a      	str	r2, [r5, #0]
 801552e:	461a      	mov	r2, r3
 8015530:	f7f1 fd19 	bl	8006f66 <_write>
 8015534:	1c43      	adds	r3, r0, #1
 8015536:	d102      	bne.n	801553e <_write_r+0x1e>
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	b103      	cbz	r3, 801553e <_write_r+0x1e>
 801553c:	6023      	str	r3, [r4, #0]
 801553e:	bd38      	pop	{r3, r4, r5, pc}
 8015540:	20009090 	.word	0x20009090

08015544 <__errno>:
 8015544:	4b01      	ldr	r3, [pc, #4]	; (801554c <__errno+0x8>)
 8015546:	6818      	ldr	r0, [r3, #0]
 8015548:	4770      	bx	lr
 801554a:	bf00      	nop
 801554c:	20000070 	.word	0x20000070

08015550 <__libc_init_array>:
 8015550:	b570      	push	{r4, r5, r6, lr}
 8015552:	4d0d      	ldr	r5, [pc, #52]	; (8015588 <__libc_init_array+0x38>)
 8015554:	4c0d      	ldr	r4, [pc, #52]	; (801558c <__libc_init_array+0x3c>)
 8015556:	1b64      	subs	r4, r4, r5
 8015558:	10a4      	asrs	r4, r4, #2
 801555a:	2600      	movs	r6, #0
 801555c:	42a6      	cmp	r6, r4
 801555e:	d109      	bne.n	8015574 <__libc_init_array+0x24>
 8015560:	4d0b      	ldr	r5, [pc, #44]	; (8015590 <__libc_init_array+0x40>)
 8015562:	4c0c      	ldr	r4, [pc, #48]	; (8015594 <__libc_init_array+0x44>)
 8015564:	f006 fa1a 	bl	801b99c <_init>
 8015568:	1b64      	subs	r4, r4, r5
 801556a:	10a4      	asrs	r4, r4, #2
 801556c:	2600      	movs	r6, #0
 801556e:	42a6      	cmp	r6, r4
 8015570:	d105      	bne.n	801557e <__libc_init_array+0x2e>
 8015572:	bd70      	pop	{r4, r5, r6, pc}
 8015574:	f855 3b04 	ldr.w	r3, [r5], #4
 8015578:	4798      	blx	r3
 801557a:	3601      	adds	r6, #1
 801557c:	e7ee      	b.n	801555c <__libc_init_array+0xc>
 801557e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015582:	4798      	blx	r3
 8015584:	3601      	adds	r6, #1
 8015586:	e7f2      	b.n	801556e <__libc_init_array+0x1e>
 8015588:	0801c7a0 	.word	0x0801c7a0
 801558c:	0801c7a0 	.word	0x0801c7a0
 8015590:	0801c7a0 	.word	0x0801c7a0
 8015594:	0801c7a4 	.word	0x0801c7a4

08015598 <__retarget_lock_init_recursive>:
 8015598:	4770      	bx	lr

0801559a <__retarget_lock_acquire_recursive>:
 801559a:	4770      	bx	lr

0801559c <__retarget_lock_release_recursive>:
 801559c:	4770      	bx	lr

0801559e <memcpy>:
 801559e:	440a      	add	r2, r1
 80155a0:	4291      	cmp	r1, r2
 80155a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80155a6:	d100      	bne.n	80155aa <memcpy+0xc>
 80155a8:	4770      	bx	lr
 80155aa:	b510      	push	{r4, lr}
 80155ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155b4:	4291      	cmp	r1, r2
 80155b6:	d1f9      	bne.n	80155ac <memcpy+0xe>
 80155b8:	bd10      	pop	{r4, pc}
	...

080155bc <nanf>:
 80155bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80155c4 <nanf+0x8>
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	7fc00000 	.word	0x7fc00000

080155c8 <quorem>:
 80155c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	6903      	ldr	r3, [r0, #16]
 80155ce:	690c      	ldr	r4, [r1, #16]
 80155d0:	42a3      	cmp	r3, r4
 80155d2:	4607      	mov	r7, r0
 80155d4:	db7e      	blt.n	80156d4 <quorem+0x10c>
 80155d6:	3c01      	subs	r4, #1
 80155d8:	f101 0814 	add.w	r8, r1, #20
 80155dc:	f100 0514 	add.w	r5, r0, #20
 80155e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80155e4:	9301      	str	r3, [sp, #4]
 80155e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80155ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80155ee:	3301      	adds	r3, #1
 80155f0:	429a      	cmp	r2, r3
 80155f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80155f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80155fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80155fe:	d331      	bcc.n	8015664 <quorem+0x9c>
 8015600:	f04f 0e00 	mov.w	lr, #0
 8015604:	4640      	mov	r0, r8
 8015606:	46ac      	mov	ip, r5
 8015608:	46f2      	mov	sl, lr
 801560a:	f850 2b04 	ldr.w	r2, [r0], #4
 801560e:	b293      	uxth	r3, r2
 8015610:	fb06 e303 	mla	r3, r6, r3, lr
 8015614:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015618:	0c1a      	lsrs	r2, r3, #16
 801561a:	b29b      	uxth	r3, r3
 801561c:	ebaa 0303 	sub.w	r3, sl, r3
 8015620:	f8dc a000 	ldr.w	sl, [ip]
 8015624:	fa13 f38a 	uxtah	r3, r3, sl
 8015628:	fb06 220e 	mla	r2, r6, lr, r2
 801562c:	9300      	str	r3, [sp, #0]
 801562e:	9b00      	ldr	r3, [sp, #0]
 8015630:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015634:	b292      	uxth	r2, r2
 8015636:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801563a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801563e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015642:	4581      	cmp	r9, r0
 8015644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015648:	f84c 3b04 	str.w	r3, [ip], #4
 801564c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015650:	d2db      	bcs.n	801560a <quorem+0x42>
 8015652:	f855 300b 	ldr.w	r3, [r5, fp]
 8015656:	b92b      	cbnz	r3, 8015664 <quorem+0x9c>
 8015658:	9b01      	ldr	r3, [sp, #4]
 801565a:	3b04      	subs	r3, #4
 801565c:	429d      	cmp	r5, r3
 801565e:	461a      	mov	r2, r3
 8015660:	d32c      	bcc.n	80156bc <quorem+0xf4>
 8015662:	613c      	str	r4, [r7, #16]
 8015664:	4638      	mov	r0, r7
 8015666:	f001 f9ef 	bl	8016a48 <__mcmp>
 801566a:	2800      	cmp	r0, #0
 801566c:	db22      	blt.n	80156b4 <quorem+0xec>
 801566e:	3601      	adds	r6, #1
 8015670:	4629      	mov	r1, r5
 8015672:	2000      	movs	r0, #0
 8015674:	f858 2b04 	ldr.w	r2, [r8], #4
 8015678:	f8d1 c000 	ldr.w	ip, [r1]
 801567c:	b293      	uxth	r3, r2
 801567e:	1ac3      	subs	r3, r0, r3
 8015680:	0c12      	lsrs	r2, r2, #16
 8015682:	fa13 f38c 	uxtah	r3, r3, ip
 8015686:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801568a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801568e:	b29b      	uxth	r3, r3
 8015690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015694:	45c1      	cmp	r9, r8
 8015696:	f841 3b04 	str.w	r3, [r1], #4
 801569a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801569e:	d2e9      	bcs.n	8015674 <quorem+0xac>
 80156a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156a8:	b922      	cbnz	r2, 80156b4 <quorem+0xec>
 80156aa:	3b04      	subs	r3, #4
 80156ac:	429d      	cmp	r5, r3
 80156ae:	461a      	mov	r2, r3
 80156b0:	d30a      	bcc.n	80156c8 <quorem+0x100>
 80156b2:	613c      	str	r4, [r7, #16]
 80156b4:	4630      	mov	r0, r6
 80156b6:	b003      	add	sp, #12
 80156b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156bc:	6812      	ldr	r2, [r2, #0]
 80156be:	3b04      	subs	r3, #4
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	d1ce      	bne.n	8015662 <quorem+0x9a>
 80156c4:	3c01      	subs	r4, #1
 80156c6:	e7c9      	b.n	801565c <quorem+0x94>
 80156c8:	6812      	ldr	r2, [r2, #0]
 80156ca:	3b04      	subs	r3, #4
 80156cc:	2a00      	cmp	r2, #0
 80156ce:	d1f0      	bne.n	80156b2 <quorem+0xea>
 80156d0:	3c01      	subs	r4, #1
 80156d2:	e7eb      	b.n	80156ac <quorem+0xe4>
 80156d4:	2000      	movs	r0, #0
 80156d6:	e7ee      	b.n	80156b6 <quorem+0xee>

080156d8 <_dtoa_r>:
 80156d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156dc:	ed2d 8b04 	vpush	{d8-d9}
 80156e0:	69c5      	ldr	r5, [r0, #28]
 80156e2:	b093      	sub	sp, #76	; 0x4c
 80156e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80156e8:	ec57 6b10 	vmov	r6, r7, d0
 80156ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80156f0:	9107      	str	r1, [sp, #28]
 80156f2:	4604      	mov	r4, r0
 80156f4:	920a      	str	r2, [sp, #40]	; 0x28
 80156f6:	930d      	str	r3, [sp, #52]	; 0x34
 80156f8:	b975      	cbnz	r5, 8015718 <_dtoa_r+0x40>
 80156fa:	2010      	movs	r0, #16
 80156fc:	f000 fe2a 	bl	8016354 <malloc>
 8015700:	4602      	mov	r2, r0
 8015702:	61e0      	str	r0, [r4, #28]
 8015704:	b920      	cbnz	r0, 8015710 <_dtoa_r+0x38>
 8015706:	4bae      	ldr	r3, [pc, #696]	; (80159c0 <_dtoa_r+0x2e8>)
 8015708:	21ef      	movs	r1, #239	; 0xef
 801570a:	48ae      	ldr	r0, [pc, #696]	; (80159c4 <_dtoa_r+0x2ec>)
 801570c:	f002 ffe8 	bl	80186e0 <__assert_func>
 8015710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015714:	6005      	str	r5, [r0, #0]
 8015716:	60c5      	str	r5, [r0, #12]
 8015718:	69e3      	ldr	r3, [r4, #28]
 801571a:	6819      	ldr	r1, [r3, #0]
 801571c:	b151      	cbz	r1, 8015734 <_dtoa_r+0x5c>
 801571e:	685a      	ldr	r2, [r3, #4]
 8015720:	604a      	str	r2, [r1, #4]
 8015722:	2301      	movs	r3, #1
 8015724:	4093      	lsls	r3, r2
 8015726:	608b      	str	r3, [r1, #8]
 8015728:	4620      	mov	r0, r4
 801572a:	f000 ff07 	bl	801653c <_Bfree>
 801572e:	69e3      	ldr	r3, [r4, #28]
 8015730:	2200      	movs	r2, #0
 8015732:	601a      	str	r2, [r3, #0]
 8015734:	1e3b      	subs	r3, r7, #0
 8015736:	bfbb      	ittet	lt
 8015738:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801573c:	9303      	strlt	r3, [sp, #12]
 801573e:	2300      	movge	r3, #0
 8015740:	2201      	movlt	r2, #1
 8015742:	bfac      	ite	ge
 8015744:	f8c8 3000 	strge.w	r3, [r8]
 8015748:	f8c8 2000 	strlt.w	r2, [r8]
 801574c:	4b9e      	ldr	r3, [pc, #632]	; (80159c8 <_dtoa_r+0x2f0>)
 801574e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015752:	ea33 0308 	bics.w	r3, r3, r8
 8015756:	d11b      	bne.n	8015790 <_dtoa_r+0xb8>
 8015758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801575a:	f242 730f 	movw	r3, #9999	; 0x270f
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015764:	4333      	orrs	r3, r6
 8015766:	f000 8593 	beq.w	8016290 <_dtoa_r+0xbb8>
 801576a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801576c:	b963      	cbnz	r3, 8015788 <_dtoa_r+0xb0>
 801576e:	4b97      	ldr	r3, [pc, #604]	; (80159cc <_dtoa_r+0x2f4>)
 8015770:	e027      	b.n	80157c2 <_dtoa_r+0xea>
 8015772:	4b97      	ldr	r3, [pc, #604]	; (80159d0 <_dtoa_r+0x2f8>)
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	3308      	adds	r3, #8
 8015778:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801577a:	6013      	str	r3, [r2, #0]
 801577c:	9800      	ldr	r0, [sp, #0]
 801577e:	b013      	add	sp, #76	; 0x4c
 8015780:	ecbd 8b04 	vpop	{d8-d9}
 8015784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015788:	4b90      	ldr	r3, [pc, #576]	; (80159cc <_dtoa_r+0x2f4>)
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	3303      	adds	r3, #3
 801578e:	e7f3      	b.n	8015778 <_dtoa_r+0xa0>
 8015790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015794:	2200      	movs	r2, #0
 8015796:	ec51 0b17 	vmov	r0, r1, d7
 801579a:	eeb0 8a47 	vmov.f32	s16, s14
 801579e:	eef0 8a67 	vmov.f32	s17, s15
 80157a2:	2300      	movs	r3, #0
 80157a4:	f7eb f9b8 	bl	8000b18 <__aeabi_dcmpeq>
 80157a8:	4681      	mov	r9, r0
 80157aa:	b160      	cbz	r0, 80157c6 <_dtoa_r+0xee>
 80157ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157ae:	2301      	movs	r3, #1
 80157b0:	6013      	str	r3, [r2, #0]
 80157b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	f000 8568 	beq.w	801628a <_dtoa_r+0xbb2>
 80157ba:	4b86      	ldr	r3, [pc, #536]	; (80159d4 <_dtoa_r+0x2fc>)
 80157bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157be:	6013      	str	r3, [r2, #0]
 80157c0:	3b01      	subs	r3, #1
 80157c2:	9300      	str	r3, [sp, #0]
 80157c4:	e7da      	b.n	801577c <_dtoa_r+0xa4>
 80157c6:	aa10      	add	r2, sp, #64	; 0x40
 80157c8:	a911      	add	r1, sp, #68	; 0x44
 80157ca:	4620      	mov	r0, r4
 80157cc:	eeb0 0a48 	vmov.f32	s0, s16
 80157d0:	eef0 0a68 	vmov.f32	s1, s17
 80157d4:	f001 fa4e 	bl	8016c74 <__d2b>
 80157d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80157dc:	4682      	mov	sl, r0
 80157de:	2d00      	cmp	r5, #0
 80157e0:	d07f      	beq.n	80158e2 <_dtoa_r+0x20a>
 80157e2:	ee18 3a90 	vmov	r3, s17
 80157e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80157ee:	ec51 0b18 	vmov	r0, r1, d8
 80157f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80157f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80157fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80157fe:	4619      	mov	r1, r3
 8015800:	2200      	movs	r2, #0
 8015802:	4b75      	ldr	r3, [pc, #468]	; (80159d8 <_dtoa_r+0x300>)
 8015804:	f7ea fd68 	bl	80002d8 <__aeabi_dsub>
 8015808:	a367      	add	r3, pc, #412	; (adr r3, 80159a8 <_dtoa_r+0x2d0>)
 801580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580e:	f7ea ff1b 	bl	8000648 <__aeabi_dmul>
 8015812:	a367      	add	r3, pc, #412	; (adr r3, 80159b0 <_dtoa_r+0x2d8>)
 8015814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015818:	f7ea fd60 	bl	80002dc <__adddf3>
 801581c:	4606      	mov	r6, r0
 801581e:	4628      	mov	r0, r5
 8015820:	460f      	mov	r7, r1
 8015822:	f7ea fea7 	bl	8000574 <__aeabi_i2d>
 8015826:	a364      	add	r3, pc, #400	; (adr r3, 80159b8 <_dtoa_r+0x2e0>)
 8015828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582c:	f7ea ff0c 	bl	8000648 <__aeabi_dmul>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4630      	mov	r0, r6
 8015836:	4639      	mov	r1, r7
 8015838:	f7ea fd50 	bl	80002dc <__adddf3>
 801583c:	4606      	mov	r6, r0
 801583e:	460f      	mov	r7, r1
 8015840:	f7eb f9b2 	bl	8000ba8 <__aeabi_d2iz>
 8015844:	2200      	movs	r2, #0
 8015846:	4683      	mov	fp, r0
 8015848:	2300      	movs	r3, #0
 801584a:	4630      	mov	r0, r6
 801584c:	4639      	mov	r1, r7
 801584e:	f7eb f96d 	bl	8000b2c <__aeabi_dcmplt>
 8015852:	b148      	cbz	r0, 8015868 <_dtoa_r+0x190>
 8015854:	4658      	mov	r0, fp
 8015856:	f7ea fe8d 	bl	8000574 <__aeabi_i2d>
 801585a:	4632      	mov	r2, r6
 801585c:	463b      	mov	r3, r7
 801585e:	f7eb f95b 	bl	8000b18 <__aeabi_dcmpeq>
 8015862:	b908      	cbnz	r0, 8015868 <_dtoa_r+0x190>
 8015864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015868:	f1bb 0f16 	cmp.w	fp, #22
 801586c:	d857      	bhi.n	801591e <_dtoa_r+0x246>
 801586e:	4b5b      	ldr	r3, [pc, #364]	; (80159dc <_dtoa_r+0x304>)
 8015870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015878:	ec51 0b18 	vmov	r0, r1, d8
 801587c:	f7eb f956 	bl	8000b2c <__aeabi_dcmplt>
 8015880:	2800      	cmp	r0, #0
 8015882:	d04e      	beq.n	8015922 <_dtoa_r+0x24a>
 8015884:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015888:	2300      	movs	r3, #0
 801588a:	930c      	str	r3, [sp, #48]	; 0x30
 801588c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801588e:	1b5b      	subs	r3, r3, r5
 8015890:	1e5a      	subs	r2, r3, #1
 8015892:	bf45      	ittet	mi
 8015894:	f1c3 0301 	rsbmi	r3, r3, #1
 8015898:	9305      	strmi	r3, [sp, #20]
 801589a:	2300      	movpl	r3, #0
 801589c:	2300      	movmi	r3, #0
 801589e:	9206      	str	r2, [sp, #24]
 80158a0:	bf54      	ite	pl
 80158a2:	9305      	strpl	r3, [sp, #20]
 80158a4:	9306      	strmi	r3, [sp, #24]
 80158a6:	f1bb 0f00 	cmp.w	fp, #0
 80158aa:	db3c      	blt.n	8015926 <_dtoa_r+0x24e>
 80158ac:	9b06      	ldr	r3, [sp, #24]
 80158ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80158b2:	445b      	add	r3, fp
 80158b4:	9306      	str	r3, [sp, #24]
 80158b6:	2300      	movs	r3, #0
 80158b8:	9308      	str	r3, [sp, #32]
 80158ba:	9b07      	ldr	r3, [sp, #28]
 80158bc:	2b09      	cmp	r3, #9
 80158be:	d868      	bhi.n	8015992 <_dtoa_r+0x2ba>
 80158c0:	2b05      	cmp	r3, #5
 80158c2:	bfc4      	itt	gt
 80158c4:	3b04      	subgt	r3, #4
 80158c6:	9307      	strgt	r3, [sp, #28]
 80158c8:	9b07      	ldr	r3, [sp, #28]
 80158ca:	f1a3 0302 	sub.w	r3, r3, #2
 80158ce:	bfcc      	ite	gt
 80158d0:	2500      	movgt	r5, #0
 80158d2:	2501      	movle	r5, #1
 80158d4:	2b03      	cmp	r3, #3
 80158d6:	f200 8085 	bhi.w	80159e4 <_dtoa_r+0x30c>
 80158da:	e8df f003 	tbb	[pc, r3]
 80158de:	3b2e      	.short	0x3b2e
 80158e0:	5839      	.short	0x5839
 80158e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80158e6:	441d      	add	r5, r3
 80158e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80158ec:	2b20      	cmp	r3, #32
 80158ee:	bfc1      	itttt	gt
 80158f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80158f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80158f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80158fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015900:	bfd6      	itet	le
 8015902:	f1c3 0320 	rsble	r3, r3, #32
 8015906:	ea48 0003 	orrgt.w	r0, r8, r3
 801590a:	fa06 f003 	lslle.w	r0, r6, r3
 801590e:	f7ea fe21 	bl	8000554 <__aeabi_ui2d>
 8015912:	2201      	movs	r2, #1
 8015914:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015918:	3d01      	subs	r5, #1
 801591a:	920e      	str	r2, [sp, #56]	; 0x38
 801591c:	e76f      	b.n	80157fe <_dtoa_r+0x126>
 801591e:	2301      	movs	r3, #1
 8015920:	e7b3      	b.n	801588a <_dtoa_r+0x1b2>
 8015922:	900c      	str	r0, [sp, #48]	; 0x30
 8015924:	e7b2      	b.n	801588c <_dtoa_r+0x1b4>
 8015926:	9b05      	ldr	r3, [sp, #20]
 8015928:	eba3 030b 	sub.w	r3, r3, fp
 801592c:	9305      	str	r3, [sp, #20]
 801592e:	f1cb 0300 	rsb	r3, fp, #0
 8015932:	9308      	str	r3, [sp, #32]
 8015934:	2300      	movs	r3, #0
 8015936:	930b      	str	r3, [sp, #44]	; 0x2c
 8015938:	e7bf      	b.n	80158ba <_dtoa_r+0x1e2>
 801593a:	2300      	movs	r3, #0
 801593c:	9309      	str	r3, [sp, #36]	; 0x24
 801593e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015940:	2b00      	cmp	r3, #0
 8015942:	dc52      	bgt.n	80159ea <_dtoa_r+0x312>
 8015944:	2301      	movs	r3, #1
 8015946:	9301      	str	r3, [sp, #4]
 8015948:	9304      	str	r3, [sp, #16]
 801594a:	461a      	mov	r2, r3
 801594c:	920a      	str	r2, [sp, #40]	; 0x28
 801594e:	e00b      	b.n	8015968 <_dtoa_r+0x290>
 8015950:	2301      	movs	r3, #1
 8015952:	e7f3      	b.n	801593c <_dtoa_r+0x264>
 8015954:	2300      	movs	r3, #0
 8015956:	9309      	str	r3, [sp, #36]	; 0x24
 8015958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801595a:	445b      	add	r3, fp
 801595c:	9301      	str	r3, [sp, #4]
 801595e:	3301      	adds	r3, #1
 8015960:	2b01      	cmp	r3, #1
 8015962:	9304      	str	r3, [sp, #16]
 8015964:	bfb8      	it	lt
 8015966:	2301      	movlt	r3, #1
 8015968:	69e0      	ldr	r0, [r4, #28]
 801596a:	2100      	movs	r1, #0
 801596c:	2204      	movs	r2, #4
 801596e:	f102 0614 	add.w	r6, r2, #20
 8015972:	429e      	cmp	r6, r3
 8015974:	d93d      	bls.n	80159f2 <_dtoa_r+0x31a>
 8015976:	6041      	str	r1, [r0, #4]
 8015978:	4620      	mov	r0, r4
 801597a:	f000 fd9f 	bl	80164bc <_Balloc>
 801597e:	9000      	str	r0, [sp, #0]
 8015980:	2800      	cmp	r0, #0
 8015982:	d139      	bne.n	80159f8 <_dtoa_r+0x320>
 8015984:	4b16      	ldr	r3, [pc, #88]	; (80159e0 <_dtoa_r+0x308>)
 8015986:	4602      	mov	r2, r0
 8015988:	f240 11af 	movw	r1, #431	; 0x1af
 801598c:	e6bd      	b.n	801570a <_dtoa_r+0x32>
 801598e:	2301      	movs	r3, #1
 8015990:	e7e1      	b.n	8015956 <_dtoa_r+0x27e>
 8015992:	2501      	movs	r5, #1
 8015994:	2300      	movs	r3, #0
 8015996:	9307      	str	r3, [sp, #28]
 8015998:	9509      	str	r5, [sp, #36]	; 0x24
 801599a:	f04f 33ff 	mov.w	r3, #4294967295
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	9304      	str	r3, [sp, #16]
 80159a2:	2200      	movs	r2, #0
 80159a4:	2312      	movs	r3, #18
 80159a6:	e7d1      	b.n	801594c <_dtoa_r+0x274>
 80159a8:	636f4361 	.word	0x636f4361
 80159ac:	3fd287a7 	.word	0x3fd287a7
 80159b0:	8b60c8b3 	.word	0x8b60c8b3
 80159b4:	3fc68a28 	.word	0x3fc68a28
 80159b8:	509f79fb 	.word	0x509f79fb
 80159bc:	3fd34413 	.word	0x3fd34413
 80159c0:	0801bf44 	.word	0x0801bf44
 80159c4:	0801bf5b 	.word	0x0801bf5b
 80159c8:	7ff00000 	.word	0x7ff00000
 80159cc:	0801bf40 	.word	0x0801bf40
 80159d0:	0801bf37 	.word	0x0801bf37
 80159d4:	0801c299 	.word	0x0801c299
 80159d8:	3ff80000 	.word	0x3ff80000
 80159dc:	0801c048 	.word	0x0801c048
 80159e0:	0801bfb3 	.word	0x0801bfb3
 80159e4:	2301      	movs	r3, #1
 80159e6:	9309      	str	r3, [sp, #36]	; 0x24
 80159e8:	e7d7      	b.n	801599a <_dtoa_r+0x2c2>
 80159ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159ec:	9301      	str	r3, [sp, #4]
 80159ee:	9304      	str	r3, [sp, #16]
 80159f0:	e7ba      	b.n	8015968 <_dtoa_r+0x290>
 80159f2:	3101      	adds	r1, #1
 80159f4:	0052      	lsls	r2, r2, #1
 80159f6:	e7ba      	b.n	801596e <_dtoa_r+0x296>
 80159f8:	69e3      	ldr	r3, [r4, #28]
 80159fa:	9a00      	ldr	r2, [sp, #0]
 80159fc:	601a      	str	r2, [r3, #0]
 80159fe:	9b04      	ldr	r3, [sp, #16]
 8015a00:	2b0e      	cmp	r3, #14
 8015a02:	f200 80a8 	bhi.w	8015b56 <_dtoa_r+0x47e>
 8015a06:	2d00      	cmp	r5, #0
 8015a08:	f000 80a5 	beq.w	8015b56 <_dtoa_r+0x47e>
 8015a0c:	f1bb 0f00 	cmp.w	fp, #0
 8015a10:	dd38      	ble.n	8015a84 <_dtoa_r+0x3ac>
 8015a12:	4bc0      	ldr	r3, [pc, #768]	; (8015d14 <_dtoa_r+0x63c>)
 8015a14:	f00b 020f 	and.w	r2, fp, #15
 8015a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015a20:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015a24:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015a28:	d019      	beq.n	8015a5e <_dtoa_r+0x386>
 8015a2a:	4bbb      	ldr	r3, [pc, #748]	; (8015d18 <_dtoa_r+0x640>)
 8015a2c:	ec51 0b18 	vmov	r0, r1, d8
 8015a30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a34:	f7ea ff32 	bl	800089c <__aeabi_ddiv>
 8015a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a3c:	f008 080f 	and.w	r8, r8, #15
 8015a40:	2503      	movs	r5, #3
 8015a42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015d18 <_dtoa_r+0x640>
 8015a46:	f1b8 0f00 	cmp.w	r8, #0
 8015a4a:	d10a      	bne.n	8015a62 <_dtoa_r+0x38a>
 8015a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a50:	4632      	mov	r2, r6
 8015a52:	463b      	mov	r3, r7
 8015a54:	f7ea ff22 	bl	800089c <__aeabi_ddiv>
 8015a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a5c:	e02b      	b.n	8015ab6 <_dtoa_r+0x3de>
 8015a5e:	2502      	movs	r5, #2
 8015a60:	e7ef      	b.n	8015a42 <_dtoa_r+0x36a>
 8015a62:	f018 0f01 	tst.w	r8, #1
 8015a66:	d008      	beq.n	8015a7a <_dtoa_r+0x3a2>
 8015a68:	4630      	mov	r0, r6
 8015a6a:	4639      	mov	r1, r7
 8015a6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015a70:	f7ea fdea 	bl	8000648 <__aeabi_dmul>
 8015a74:	3501      	adds	r5, #1
 8015a76:	4606      	mov	r6, r0
 8015a78:	460f      	mov	r7, r1
 8015a7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015a7e:	f109 0908 	add.w	r9, r9, #8
 8015a82:	e7e0      	b.n	8015a46 <_dtoa_r+0x36e>
 8015a84:	f000 809f 	beq.w	8015bc6 <_dtoa_r+0x4ee>
 8015a88:	f1cb 0600 	rsb	r6, fp, #0
 8015a8c:	4ba1      	ldr	r3, [pc, #644]	; (8015d14 <_dtoa_r+0x63c>)
 8015a8e:	4fa2      	ldr	r7, [pc, #648]	; (8015d18 <_dtoa_r+0x640>)
 8015a90:	f006 020f 	and.w	r2, r6, #15
 8015a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9c:	ec51 0b18 	vmov	r0, r1, d8
 8015aa0:	f7ea fdd2 	bl	8000648 <__aeabi_dmul>
 8015aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015aa8:	1136      	asrs	r6, r6, #4
 8015aaa:	2300      	movs	r3, #0
 8015aac:	2502      	movs	r5, #2
 8015aae:	2e00      	cmp	r6, #0
 8015ab0:	d17e      	bne.n	8015bb0 <_dtoa_r+0x4d8>
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1d0      	bne.n	8015a58 <_dtoa_r+0x380>
 8015ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ab8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	f000 8084 	beq.w	8015bca <_dtoa_r+0x4f2>
 8015ac2:	4b96      	ldr	r3, [pc, #600]	; (8015d1c <_dtoa_r+0x644>)
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	4649      	mov	r1, r9
 8015aca:	f7eb f82f 	bl	8000b2c <__aeabi_dcmplt>
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	d07b      	beq.n	8015bca <_dtoa_r+0x4f2>
 8015ad2:	9b04      	ldr	r3, [sp, #16]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d078      	beq.n	8015bca <_dtoa_r+0x4f2>
 8015ad8:	9b01      	ldr	r3, [sp, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	dd39      	ble.n	8015b52 <_dtoa_r+0x47a>
 8015ade:	4b90      	ldr	r3, [pc, #576]	; (8015d20 <_dtoa_r+0x648>)
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	4640      	mov	r0, r8
 8015ae4:	4649      	mov	r1, r9
 8015ae6:	f7ea fdaf 	bl	8000648 <__aeabi_dmul>
 8015aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015aee:	9e01      	ldr	r6, [sp, #4]
 8015af0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015af4:	3501      	adds	r5, #1
 8015af6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015afa:	4628      	mov	r0, r5
 8015afc:	f7ea fd3a 	bl	8000574 <__aeabi_i2d>
 8015b00:	4642      	mov	r2, r8
 8015b02:	464b      	mov	r3, r9
 8015b04:	f7ea fda0 	bl	8000648 <__aeabi_dmul>
 8015b08:	4b86      	ldr	r3, [pc, #536]	; (8015d24 <_dtoa_r+0x64c>)
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	f7ea fbe6 	bl	80002dc <__adddf3>
 8015b10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b18:	9303      	str	r3, [sp, #12]
 8015b1a:	2e00      	cmp	r6, #0
 8015b1c:	d158      	bne.n	8015bd0 <_dtoa_r+0x4f8>
 8015b1e:	4b82      	ldr	r3, [pc, #520]	; (8015d28 <_dtoa_r+0x650>)
 8015b20:	2200      	movs	r2, #0
 8015b22:	4640      	mov	r0, r8
 8015b24:	4649      	mov	r1, r9
 8015b26:	f7ea fbd7 	bl	80002d8 <__aeabi_dsub>
 8015b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b2e:	4680      	mov	r8, r0
 8015b30:	4689      	mov	r9, r1
 8015b32:	f7eb f819 	bl	8000b68 <__aeabi_dcmpgt>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	f040 8296 	bne.w	8016068 <_dtoa_r+0x990>
 8015b3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015b40:	4640      	mov	r0, r8
 8015b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b46:	4649      	mov	r1, r9
 8015b48:	f7ea fff0 	bl	8000b2c <__aeabi_dcmplt>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	f040 8289 	bne.w	8016064 <_dtoa_r+0x98c>
 8015b52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015b56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	f2c0 814e 	blt.w	8015dfa <_dtoa_r+0x722>
 8015b5e:	f1bb 0f0e 	cmp.w	fp, #14
 8015b62:	f300 814a 	bgt.w	8015dfa <_dtoa_r+0x722>
 8015b66:	4b6b      	ldr	r3, [pc, #428]	; (8015d14 <_dtoa_r+0x63c>)
 8015b68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015b6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	f280 80dc 	bge.w	8015d30 <_dtoa_r+0x658>
 8015b78:	9b04      	ldr	r3, [sp, #16]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	f300 80d8 	bgt.w	8015d30 <_dtoa_r+0x658>
 8015b80:	f040 826f 	bne.w	8016062 <_dtoa_r+0x98a>
 8015b84:	4b68      	ldr	r3, [pc, #416]	; (8015d28 <_dtoa_r+0x650>)
 8015b86:	2200      	movs	r2, #0
 8015b88:	4640      	mov	r0, r8
 8015b8a:	4649      	mov	r1, r9
 8015b8c:	f7ea fd5c 	bl	8000648 <__aeabi_dmul>
 8015b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b94:	f7ea ffde 	bl	8000b54 <__aeabi_dcmpge>
 8015b98:	9e04      	ldr	r6, [sp, #16]
 8015b9a:	4637      	mov	r7, r6
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f040 8245 	bne.w	801602c <_dtoa_r+0x954>
 8015ba2:	9d00      	ldr	r5, [sp, #0]
 8015ba4:	2331      	movs	r3, #49	; 0x31
 8015ba6:	f805 3b01 	strb.w	r3, [r5], #1
 8015baa:	f10b 0b01 	add.w	fp, fp, #1
 8015bae:	e241      	b.n	8016034 <_dtoa_r+0x95c>
 8015bb0:	07f2      	lsls	r2, r6, #31
 8015bb2:	d505      	bpl.n	8015bc0 <_dtoa_r+0x4e8>
 8015bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015bb8:	f7ea fd46 	bl	8000648 <__aeabi_dmul>
 8015bbc:	3501      	adds	r5, #1
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	1076      	asrs	r6, r6, #1
 8015bc2:	3708      	adds	r7, #8
 8015bc4:	e773      	b.n	8015aae <_dtoa_r+0x3d6>
 8015bc6:	2502      	movs	r5, #2
 8015bc8:	e775      	b.n	8015ab6 <_dtoa_r+0x3de>
 8015bca:	9e04      	ldr	r6, [sp, #16]
 8015bcc:	465f      	mov	r7, fp
 8015bce:	e792      	b.n	8015af6 <_dtoa_r+0x41e>
 8015bd0:	9900      	ldr	r1, [sp, #0]
 8015bd2:	4b50      	ldr	r3, [pc, #320]	; (8015d14 <_dtoa_r+0x63c>)
 8015bd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015bd8:	4431      	add	r1, r6
 8015bda:	9102      	str	r1, [sp, #8]
 8015bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015bde:	eeb0 9a47 	vmov.f32	s18, s14
 8015be2:	eef0 9a67 	vmov.f32	s19, s15
 8015be6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015bea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015bee:	2900      	cmp	r1, #0
 8015bf0:	d044      	beq.n	8015c7c <_dtoa_r+0x5a4>
 8015bf2:	494e      	ldr	r1, [pc, #312]	; (8015d2c <_dtoa_r+0x654>)
 8015bf4:	2000      	movs	r0, #0
 8015bf6:	f7ea fe51 	bl	800089c <__aeabi_ddiv>
 8015bfa:	ec53 2b19 	vmov	r2, r3, d9
 8015bfe:	f7ea fb6b 	bl	80002d8 <__aeabi_dsub>
 8015c02:	9d00      	ldr	r5, [sp, #0]
 8015c04:	ec41 0b19 	vmov	d9, r0, r1
 8015c08:	4649      	mov	r1, r9
 8015c0a:	4640      	mov	r0, r8
 8015c0c:	f7ea ffcc 	bl	8000ba8 <__aeabi_d2iz>
 8015c10:	4606      	mov	r6, r0
 8015c12:	f7ea fcaf 	bl	8000574 <__aeabi_i2d>
 8015c16:	4602      	mov	r2, r0
 8015c18:	460b      	mov	r3, r1
 8015c1a:	4640      	mov	r0, r8
 8015c1c:	4649      	mov	r1, r9
 8015c1e:	f7ea fb5b 	bl	80002d8 <__aeabi_dsub>
 8015c22:	3630      	adds	r6, #48	; 0x30
 8015c24:	f805 6b01 	strb.w	r6, [r5], #1
 8015c28:	ec53 2b19 	vmov	r2, r3, d9
 8015c2c:	4680      	mov	r8, r0
 8015c2e:	4689      	mov	r9, r1
 8015c30:	f7ea ff7c 	bl	8000b2c <__aeabi_dcmplt>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d164      	bne.n	8015d02 <_dtoa_r+0x62a>
 8015c38:	4642      	mov	r2, r8
 8015c3a:	464b      	mov	r3, r9
 8015c3c:	4937      	ldr	r1, [pc, #220]	; (8015d1c <_dtoa_r+0x644>)
 8015c3e:	2000      	movs	r0, #0
 8015c40:	f7ea fb4a 	bl	80002d8 <__aeabi_dsub>
 8015c44:	ec53 2b19 	vmov	r2, r3, d9
 8015c48:	f7ea ff70 	bl	8000b2c <__aeabi_dcmplt>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	f040 80b6 	bne.w	8015dbe <_dtoa_r+0x6e6>
 8015c52:	9b02      	ldr	r3, [sp, #8]
 8015c54:	429d      	cmp	r5, r3
 8015c56:	f43f af7c 	beq.w	8015b52 <_dtoa_r+0x47a>
 8015c5a:	4b31      	ldr	r3, [pc, #196]	; (8015d20 <_dtoa_r+0x648>)
 8015c5c:	ec51 0b19 	vmov	r0, r1, d9
 8015c60:	2200      	movs	r2, #0
 8015c62:	f7ea fcf1 	bl	8000648 <__aeabi_dmul>
 8015c66:	4b2e      	ldr	r3, [pc, #184]	; (8015d20 <_dtoa_r+0x648>)
 8015c68:	ec41 0b19 	vmov	d9, r0, r1
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	4640      	mov	r0, r8
 8015c70:	4649      	mov	r1, r9
 8015c72:	f7ea fce9 	bl	8000648 <__aeabi_dmul>
 8015c76:	4680      	mov	r8, r0
 8015c78:	4689      	mov	r9, r1
 8015c7a:	e7c5      	b.n	8015c08 <_dtoa_r+0x530>
 8015c7c:	ec51 0b17 	vmov	r0, r1, d7
 8015c80:	f7ea fce2 	bl	8000648 <__aeabi_dmul>
 8015c84:	9b02      	ldr	r3, [sp, #8]
 8015c86:	9d00      	ldr	r5, [sp, #0]
 8015c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c8a:	ec41 0b19 	vmov	d9, r0, r1
 8015c8e:	4649      	mov	r1, r9
 8015c90:	4640      	mov	r0, r8
 8015c92:	f7ea ff89 	bl	8000ba8 <__aeabi_d2iz>
 8015c96:	4606      	mov	r6, r0
 8015c98:	f7ea fc6c 	bl	8000574 <__aeabi_i2d>
 8015c9c:	3630      	adds	r6, #48	; 0x30
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	460b      	mov	r3, r1
 8015ca2:	4640      	mov	r0, r8
 8015ca4:	4649      	mov	r1, r9
 8015ca6:	f7ea fb17 	bl	80002d8 <__aeabi_dsub>
 8015caa:	f805 6b01 	strb.w	r6, [r5], #1
 8015cae:	9b02      	ldr	r3, [sp, #8]
 8015cb0:	429d      	cmp	r5, r3
 8015cb2:	4680      	mov	r8, r0
 8015cb4:	4689      	mov	r9, r1
 8015cb6:	f04f 0200 	mov.w	r2, #0
 8015cba:	d124      	bne.n	8015d06 <_dtoa_r+0x62e>
 8015cbc:	4b1b      	ldr	r3, [pc, #108]	; (8015d2c <_dtoa_r+0x654>)
 8015cbe:	ec51 0b19 	vmov	r0, r1, d9
 8015cc2:	f7ea fb0b 	bl	80002dc <__adddf3>
 8015cc6:	4602      	mov	r2, r0
 8015cc8:	460b      	mov	r3, r1
 8015cca:	4640      	mov	r0, r8
 8015ccc:	4649      	mov	r1, r9
 8015cce:	f7ea ff4b 	bl	8000b68 <__aeabi_dcmpgt>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d173      	bne.n	8015dbe <_dtoa_r+0x6e6>
 8015cd6:	ec53 2b19 	vmov	r2, r3, d9
 8015cda:	4914      	ldr	r1, [pc, #80]	; (8015d2c <_dtoa_r+0x654>)
 8015cdc:	2000      	movs	r0, #0
 8015cde:	f7ea fafb 	bl	80002d8 <__aeabi_dsub>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	4640      	mov	r0, r8
 8015ce8:	4649      	mov	r1, r9
 8015cea:	f7ea ff1f 	bl	8000b2c <__aeabi_dcmplt>
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	f43f af2f 	beq.w	8015b52 <_dtoa_r+0x47a>
 8015cf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015cf6:	1e6b      	subs	r3, r5, #1
 8015cf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015cfe:	2b30      	cmp	r3, #48	; 0x30
 8015d00:	d0f8      	beq.n	8015cf4 <_dtoa_r+0x61c>
 8015d02:	46bb      	mov	fp, r7
 8015d04:	e04a      	b.n	8015d9c <_dtoa_r+0x6c4>
 8015d06:	4b06      	ldr	r3, [pc, #24]	; (8015d20 <_dtoa_r+0x648>)
 8015d08:	f7ea fc9e 	bl	8000648 <__aeabi_dmul>
 8015d0c:	4680      	mov	r8, r0
 8015d0e:	4689      	mov	r9, r1
 8015d10:	e7bd      	b.n	8015c8e <_dtoa_r+0x5b6>
 8015d12:	bf00      	nop
 8015d14:	0801c048 	.word	0x0801c048
 8015d18:	0801c020 	.word	0x0801c020
 8015d1c:	3ff00000 	.word	0x3ff00000
 8015d20:	40240000 	.word	0x40240000
 8015d24:	401c0000 	.word	0x401c0000
 8015d28:	40140000 	.word	0x40140000
 8015d2c:	3fe00000 	.word	0x3fe00000
 8015d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d34:	9d00      	ldr	r5, [sp, #0]
 8015d36:	4642      	mov	r2, r8
 8015d38:	464b      	mov	r3, r9
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	4639      	mov	r1, r7
 8015d3e:	f7ea fdad 	bl	800089c <__aeabi_ddiv>
 8015d42:	f7ea ff31 	bl	8000ba8 <__aeabi_d2iz>
 8015d46:	9001      	str	r0, [sp, #4]
 8015d48:	f7ea fc14 	bl	8000574 <__aeabi_i2d>
 8015d4c:	4642      	mov	r2, r8
 8015d4e:	464b      	mov	r3, r9
 8015d50:	f7ea fc7a 	bl	8000648 <__aeabi_dmul>
 8015d54:	4602      	mov	r2, r0
 8015d56:	460b      	mov	r3, r1
 8015d58:	4630      	mov	r0, r6
 8015d5a:	4639      	mov	r1, r7
 8015d5c:	f7ea fabc 	bl	80002d8 <__aeabi_dsub>
 8015d60:	9e01      	ldr	r6, [sp, #4]
 8015d62:	9f04      	ldr	r7, [sp, #16]
 8015d64:	3630      	adds	r6, #48	; 0x30
 8015d66:	f805 6b01 	strb.w	r6, [r5], #1
 8015d6a:	9e00      	ldr	r6, [sp, #0]
 8015d6c:	1bae      	subs	r6, r5, r6
 8015d6e:	42b7      	cmp	r7, r6
 8015d70:	4602      	mov	r2, r0
 8015d72:	460b      	mov	r3, r1
 8015d74:	d134      	bne.n	8015de0 <_dtoa_r+0x708>
 8015d76:	f7ea fab1 	bl	80002dc <__adddf3>
 8015d7a:	4642      	mov	r2, r8
 8015d7c:	464b      	mov	r3, r9
 8015d7e:	4606      	mov	r6, r0
 8015d80:	460f      	mov	r7, r1
 8015d82:	f7ea fef1 	bl	8000b68 <__aeabi_dcmpgt>
 8015d86:	b9c8      	cbnz	r0, 8015dbc <_dtoa_r+0x6e4>
 8015d88:	4642      	mov	r2, r8
 8015d8a:	464b      	mov	r3, r9
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	4639      	mov	r1, r7
 8015d90:	f7ea fec2 	bl	8000b18 <__aeabi_dcmpeq>
 8015d94:	b110      	cbz	r0, 8015d9c <_dtoa_r+0x6c4>
 8015d96:	9b01      	ldr	r3, [sp, #4]
 8015d98:	07db      	lsls	r3, r3, #31
 8015d9a:	d40f      	bmi.n	8015dbc <_dtoa_r+0x6e4>
 8015d9c:	4651      	mov	r1, sl
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f000 fbcc 	bl	801653c <_Bfree>
 8015da4:	2300      	movs	r3, #0
 8015da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015da8:	702b      	strb	r3, [r5, #0]
 8015daa:	f10b 0301 	add.w	r3, fp, #1
 8015dae:	6013      	str	r3, [r2, #0]
 8015db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f43f ace2 	beq.w	801577c <_dtoa_r+0xa4>
 8015db8:	601d      	str	r5, [r3, #0]
 8015dba:	e4df      	b.n	801577c <_dtoa_r+0xa4>
 8015dbc:	465f      	mov	r7, fp
 8015dbe:	462b      	mov	r3, r5
 8015dc0:	461d      	mov	r5, r3
 8015dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015dc6:	2a39      	cmp	r2, #57	; 0x39
 8015dc8:	d106      	bne.n	8015dd8 <_dtoa_r+0x700>
 8015dca:	9a00      	ldr	r2, [sp, #0]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d1f7      	bne.n	8015dc0 <_dtoa_r+0x6e8>
 8015dd0:	9900      	ldr	r1, [sp, #0]
 8015dd2:	2230      	movs	r2, #48	; 0x30
 8015dd4:	3701      	adds	r7, #1
 8015dd6:	700a      	strb	r2, [r1, #0]
 8015dd8:	781a      	ldrb	r2, [r3, #0]
 8015dda:	3201      	adds	r2, #1
 8015ddc:	701a      	strb	r2, [r3, #0]
 8015dde:	e790      	b.n	8015d02 <_dtoa_r+0x62a>
 8015de0:	4ba3      	ldr	r3, [pc, #652]	; (8016070 <_dtoa_r+0x998>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	f7ea fc30 	bl	8000648 <__aeabi_dmul>
 8015de8:	2200      	movs	r2, #0
 8015dea:	2300      	movs	r3, #0
 8015dec:	4606      	mov	r6, r0
 8015dee:	460f      	mov	r7, r1
 8015df0:	f7ea fe92 	bl	8000b18 <__aeabi_dcmpeq>
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d09e      	beq.n	8015d36 <_dtoa_r+0x65e>
 8015df8:	e7d0      	b.n	8015d9c <_dtoa_r+0x6c4>
 8015dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dfc:	2a00      	cmp	r2, #0
 8015dfe:	f000 80ca 	beq.w	8015f96 <_dtoa_r+0x8be>
 8015e02:	9a07      	ldr	r2, [sp, #28]
 8015e04:	2a01      	cmp	r2, #1
 8015e06:	f300 80ad 	bgt.w	8015f64 <_dtoa_r+0x88c>
 8015e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e0c:	2a00      	cmp	r2, #0
 8015e0e:	f000 80a5 	beq.w	8015f5c <_dtoa_r+0x884>
 8015e12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015e16:	9e08      	ldr	r6, [sp, #32]
 8015e18:	9d05      	ldr	r5, [sp, #20]
 8015e1a:	9a05      	ldr	r2, [sp, #20]
 8015e1c:	441a      	add	r2, r3
 8015e1e:	9205      	str	r2, [sp, #20]
 8015e20:	9a06      	ldr	r2, [sp, #24]
 8015e22:	2101      	movs	r1, #1
 8015e24:	441a      	add	r2, r3
 8015e26:	4620      	mov	r0, r4
 8015e28:	9206      	str	r2, [sp, #24]
 8015e2a:	f000 fc87 	bl	801673c <__i2b>
 8015e2e:	4607      	mov	r7, r0
 8015e30:	b165      	cbz	r5, 8015e4c <_dtoa_r+0x774>
 8015e32:	9b06      	ldr	r3, [sp, #24]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	dd09      	ble.n	8015e4c <_dtoa_r+0x774>
 8015e38:	42ab      	cmp	r3, r5
 8015e3a:	9a05      	ldr	r2, [sp, #20]
 8015e3c:	bfa8      	it	ge
 8015e3e:	462b      	movge	r3, r5
 8015e40:	1ad2      	subs	r2, r2, r3
 8015e42:	9205      	str	r2, [sp, #20]
 8015e44:	9a06      	ldr	r2, [sp, #24]
 8015e46:	1aed      	subs	r5, r5, r3
 8015e48:	1ad3      	subs	r3, r2, r3
 8015e4a:	9306      	str	r3, [sp, #24]
 8015e4c:	9b08      	ldr	r3, [sp, #32]
 8015e4e:	b1f3      	cbz	r3, 8015e8e <_dtoa_r+0x7b6>
 8015e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f000 80a3 	beq.w	8015f9e <_dtoa_r+0x8c6>
 8015e58:	2e00      	cmp	r6, #0
 8015e5a:	dd10      	ble.n	8015e7e <_dtoa_r+0x7a6>
 8015e5c:	4639      	mov	r1, r7
 8015e5e:	4632      	mov	r2, r6
 8015e60:	4620      	mov	r0, r4
 8015e62:	f000 fd2b 	bl	80168bc <__pow5mult>
 8015e66:	4652      	mov	r2, sl
 8015e68:	4601      	mov	r1, r0
 8015e6a:	4607      	mov	r7, r0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f000 fc7b 	bl	8016768 <__multiply>
 8015e72:	4651      	mov	r1, sl
 8015e74:	4680      	mov	r8, r0
 8015e76:	4620      	mov	r0, r4
 8015e78:	f000 fb60 	bl	801653c <_Bfree>
 8015e7c:	46c2      	mov	sl, r8
 8015e7e:	9b08      	ldr	r3, [sp, #32]
 8015e80:	1b9a      	subs	r2, r3, r6
 8015e82:	d004      	beq.n	8015e8e <_dtoa_r+0x7b6>
 8015e84:	4651      	mov	r1, sl
 8015e86:	4620      	mov	r0, r4
 8015e88:	f000 fd18 	bl	80168bc <__pow5mult>
 8015e8c:	4682      	mov	sl, r0
 8015e8e:	2101      	movs	r1, #1
 8015e90:	4620      	mov	r0, r4
 8015e92:	f000 fc53 	bl	801673c <__i2b>
 8015e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	4606      	mov	r6, r0
 8015e9c:	f340 8081 	ble.w	8015fa2 <_dtoa_r+0x8ca>
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	4601      	mov	r1, r0
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	f000 fd09 	bl	80168bc <__pow5mult>
 8015eaa:	9b07      	ldr	r3, [sp, #28]
 8015eac:	2b01      	cmp	r3, #1
 8015eae:	4606      	mov	r6, r0
 8015eb0:	dd7a      	ble.n	8015fa8 <_dtoa_r+0x8d0>
 8015eb2:	f04f 0800 	mov.w	r8, #0
 8015eb6:	6933      	ldr	r3, [r6, #16]
 8015eb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015ebc:	6918      	ldr	r0, [r3, #16]
 8015ebe:	f000 fbef 	bl	80166a0 <__hi0bits>
 8015ec2:	f1c0 0020 	rsb	r0, r0, #32
 8015ec6:	9b06      	ldr	r3, [sp, #24]
 8015ec8:	4418      	add	r0, r3
 8015eca:	f010 001f 	ands.w	r0, r0, #31
 8015ece:	f000 8094 	beq.w	8015ffa <_dtoa_r+0x922>
 8015ed2:	f1c0 0320 	rsb	r3, r0, #32
 8015ed6:	2b04      	cmp	r3, #4
 8015ed8:	f340 8085 	ble.w	8015fe6 <_dtoa_r+0x90e>
 8015edc:	9b05      	ldr	r3, [sp, #20]
 8015ede:	f1c0 001c 	rsb	r0, r0, #28
 8015ee2:	4403      	add	r3, r0
 8015ee4:	9305      	str	r3, [sp, #20]
 8015ee6:	9b06      	ldr	r3, [sp, #24]
 8015ee8:	4403      	add	r3, r0
 8015eea:	4405      	add	r5, r0
 8015eec:	9306      	str	r3, [sp, #24]
 8015eee:	9b05      	ldr	r3, [sp, #20]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	dd05      	ble.n	8015f00 <_dtoa_r+0x828>
 8015ef4:	4651      	mov	r1, sl
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f000 fd39 	bl	8016970 <__lshift>
 8015efe:	4682      	mov	sl, r0
 8015f00:	9b06      	ldr	r3, [sp, #24]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	dd05      	ble.n	8015f12 <_dtoa_r+0x83a>
 8015f06:	4631      	mov	r1, r6
 8015f08:	461a      	mov	r2, r3
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	f000 fd30 	bl	8016970 <__lshift>
 8015f10:	4606      	mov	r6, r0
 8015f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d072      	beq.n	8015ffe <_dtoa_r+0x926>
 8015f18:	4631      	mov	r1, r6
 8015f1a:	4650      	mov	r0, sl
 8015f1c:	f000 fd94 	bl	8016a48 <__mcmp>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	da6c      	bge.n	8015ffe <_dtoa_r+0x926>
 8015f24:	2300      	movs	r3, #0
 8015f26:	4651      	mov	r1, sl
 8015f28:	220a      	movs	r2, #10
 8015f2a:	4620      	mov	r0, r4
 8015f2c:	f000 fb28 	bl	8016580 <__multadd>
 8015f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015f36:	4682      	mov	sl, r0
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f000 81b0 	beq.w	801629e <_dtoa_r+0xbc6>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	4639      	mov	r1, r7
 8015f42:	220a      	movs	r2, #10
 8015f44:	4620      	mov	r0, r4
 8015f46:	f000 fb1b 	bl	8016580 <__multadd>
 8015f4a:	9b01      	ldr	r3, [sp, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	4607      	mov	r7, r0
 8015f50:	f300 8096 	bgt.w	8016080 <_dtoa_r+0x9a8>
 8015f54:	9b07      	ldr	r3, [sp, #28]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	dc59      	bgt.n	801600e <_dtoa_r+0x936>
 8015f5a:	e091      	b.n	8016080 <_dtoa_r+0x9a8>
 8015f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015f62:	e758      	b.n	8015e16 <_dtoa_r+0x73e>
 8015f64:	9b04      	ldr	r3, [sp, #16]
 8015f66:	1e5e      	subs	r6, r3, #1
 8015f68:	9b08      	ldr	r3, [sp, #32]
 8015f6a:	42b3      	cmp	r3, r6
 8015f6c:	bfbf      	itttt	lt
 8015f6e:	9b08      	ldrlt	r3, [sp, #32]
 8015f70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015f72:	9608      	strlt	r6, [sp, #32]
 8015f74:	1af3      	sublt	r3, r6, r3
 8015f76:	bfb4      	ite	lt
 8015f78:	18d2      	addlt	r2, r2, r3
 8015f7a:	1b9e      	subge	r6, r3, r6
 8015f7c:	9b04      	ldr	r3, [sp, #16]
 8015f7e:	bfbc      	itt	lt
 8015f80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015f82:	2600      	movlt	r6, #0
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	bfb7      	itett	lt
 8015f88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015f8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015f90:	1a9d      	sublt	r5, r3, r2
 8015f92:	2300      	movlt	r3, #0
 8015f94:	e741      	b.n	8015e1a <_dtoa_r+0x742>
 8015f96:	9e08      	ldr	r6, [sp, #32]
 8015f98:	9d05      	ldr	r5, [sp, #20]
 8015f9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015f9c:	e748      	b.n	8015e30 <_dtoa_r+0x758>
 8015f9e:	9a08      	ldr	r2, [sp, #32]
 8015fa0:	e770      	b.n	8015e84 <_dtoa_r+0x7ac>
 8015fa2:	9b07      	ldr	r3, [sp, #28]
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	dc19      	bgt.n	8015fdc <_dtoa_r+0x904>
 8015fa8:	9b02      	ldr	r3, [sp, #8]
 8015faa:	b9bb      	cbnz	r3, 8015fdc <_dtoa_r+0x904>
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015fb2:	b99b      	cbnz	r3, 8015fdc <_dtoa_r+0x904>
 8015fb4:	9b03      	ldr	r3, [sp, #12]
 8015fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015fba:	0d1b      	lsrs	r3, r3, #20
 8015fbc:	051b      	lsls	r3, r3, #20
 8015fbe:	b183      	cbz	r3, 8015fe2 <_dtoa_r+0x90a>
 8015fc0:	9b05      	ldr	r3, [sp, #20]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	9305      	str	r3, [sp, #20]
 8015fc6:	9b06      	ldr	r3, [sp, #24]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	9306      	str	r3, [sp, #24]
 8015fcc:	f04f 0801 	mov.w	r8, #1
 8015fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	f47f af6f 	bne.w	8015eb6 <_dtoa_r+0x7de>
 8015fd8:	2001      	movs	r0, #1
 8015fda:	e774      	b.n	8015ec6 <_dtoa_r+0x7ee>
 8015fdc:	f04f 0800 	mov.w	r8, #0
 8015fe0:	e7f6      	b.n	8015fd0 <_dtoa_r+0x8f8>
 8015fe2:	4698      	mov	r8, r3
 8015fe4:	e7f4      	b.n	8015fd0 <_dtoa_r+0x8f8>
 8015fe6:	d082      	beq.n	8015eee <_dtoa_r+0x816>
 8015fe8:	9a05      	ldr	r2, [sp, #20]
 8015fea:	331c      	adds	r3, #28
 8015fec:	441a      	add	r2, r3
 8015fee:	9205      	str	r2, [sp, #20]
 8015ff0:	9a06      	ldr	r2, [sp, #24]
 8015ff2:	441a      	add	r2, r3
 8015ff4:	441d      	add	r5, r3
 8015ff6:	9206      	str	r2, [sp, #24]
 8015ff8:	e779      	b.n	8015eee <_dtoa_r+0x816>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	e7f4      	b.n	8015fe8 <_dtoa_r+0x910>
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	2b00      	cmp	r3, #0
 8016002:	dc37      	bgt.n	8016074 <_dtoa_r+0x99c>
 8016004:	9b07      	ldr	r3, [sp, #28]
 8016006:	2b02      	cmp	r3, #2
 8016008:	dd34      	ble.n	8016074 <_dtoa_r+0x99c>
 801600a:	9b04      	ldr	r3, [sp, #16]
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	9b01      	ldr	r3, [sp, #4]
 8016010:	b963      	cbnz	r3, 801602c <_dtoa_r+0x954>
 8016012:	4631      	mov	r1, r6
 8016014:	2205      	movs	r2, #5
 8016016:	4620      	mov	r0, r4
 8016018:	f000 fab2 	bl	8016580 <__multadd>
 801601c:	4601      	mov	r1, r0
 801601e:	4606      	mov	r6, r0
 8016020:	4650      	mov	r0, sl
 8016022:	f000 fd11 	bl	8016a48 <__mcmp>
 8016026:	2800      	cmp	r0, #0
 8016028:	f73f adbb 	bgt.w	8015ba2 <_dtoa_r+0x4ca>
 801602c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801602e:	9d00      	ldr	r5, [sp, #0]
 8016030:	ea6f 0b03 	mvn.w	fp, r3
 8016034:	f04f 0800 	mov.w	r8, #0
 8016038:	4631      	mov	r1, r6
 801603a:	4620      	mov	r0, r4
 801603c:	f000 fa7e 	bl	801653c <_Bfree>
 8016040:	2f00      	cmp	r7, #0
 8016042:	f43f aeab 	beq.w	8015d9c <_dtoa_r+0x6c4>
 8016046:	f1b8 0f00 	cmp.w	r8, #0
 801604a:	d005      	beq.n	8016058 <_dtoa_r+0x980>
 801604c:	45b8      	cmp	r8, r7
 801604e:	d003      	beq.n	8016058 <_dtoa_r+0x980>
 8016050:	4641      	mov	r1, r8
 8016052:	4620      	mov	r0, r4
 8016054:	f000 fa72 	bl	801653c <_Bfree>
 8016058:	4639      	mov	r1, r7
 801605a:	4620      	mov	r0, r4
 801605c:	f000 fa6e 	bl	801653c <_Bfree>
 8016060:	e69c      	b.n	8015d9c <_dtoa_r+0x6c4>
 8016062:	2600      	movs	r6, #0
 8016064:	4637      	mov	r7, r6
 8016066:	e7e1      	b.n	801602c <_dtoa_r+0x954>
 8016068:	46bb      	mov	fp, r7
 801606a:	4637      	mov	r7, r6
 801606c:	e599      	b.n	8015ba2 <_dtoa_r+0x4ca>
 801606e:	bf00      	nop
 8016070:	40240000 	.word	0x40240000
 8016074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016076:	2b00      	cmp	r3, #0
 8016078:	f000 80c8 	beq.w	801620c <_dtoa_r+0xb34>
 801607c:	9b04      	ldr	r3, [sp, #16]
 801607e:	9301      	str	r3, [sp, #4]
 8016080:	2d00      	cmp	r5, #0
 8016082:	dd05      	ble.n	8016090 <_dtoa_r+0x9b8>
 8016084:	4639      	mov	r1, r7
 8016086:	462a      	mov	r2, r5
 8016088:	4620      	mov	r0, r4
 801608a:	f000 fc71 	bl	8016970 <__lshift>
 801608e:	4607      	mov	r7, r0
 8016090:	f1b8 0f00 	cmp.w	r8, #0
 8016094:	d05b      	beq.n	801614e <_dtoa_r+0xa76>
 8016096:	6879      	ldr	r1, [r7, #4]
 8016098:	4620      	mov	r0, r4
 801609a:	f000 fa0f 	bl	80164bc <_Balloc>
 801609e:	4605      	mov	r5, r0
 80160a0:	b928      	cbnz	r0, 80160ae <_dtoa_r+0x9d6>
 80160a2:	4b83      	ldr	r3, [pc, #524]	; (80162b0 <_dtoa_r+0xbd8>)
 80160a4:	4602      	mov	r2, r0
 80160a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80160aa:	f7ff bb2e 	b.w	801570a <_dtoa_r+0x32>
 80160ae:	693a      	ldr	r2, [r7, #16]
 80160b0:	3202      	adds	r2, #2
 80160b2:	0092      	lsls	r2, r2, #2
 80160b4:	f107 010c 	add.w	r1, r7, #12
 80160b8:	300c      	adds	r0, #12
 80160ba:	f7ff fa70 	bl	801559e <memcpy>
 80160be:	2201      	movs	r2, #1
 80160c0:	4629      	mov	r1, r5
 80160c2:	4620      	mov	r0, r4
 80160c4:	f000 fc54 	bl	8016970 <__lshift>
 80160c8:	9b00      	ldr	r3, [sp, #0]
 80160ca:	3301      	adds	r3, #1
 80160cc:	9304      	str	r3, [sp, #16]
 80160ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160d2:	4413      	add	r3, r2
 80160d4:	9308      	str	r3, [sp, #32]
 80160d6:	9b02      	ldr	r3, [sp, #8]
 80160d8:	f003 0301 	and.w	r3, r3, #1
 80160dc:	46b8      	mov	r8, r7
 80160de:	9306      	str	r3, [sp, #24]
 80160e0:	4607      	mov	r7, r0
 80160e2:	9b04      	ldr	r3, [sp, #16]
 80160e4:	4631      	mov	r1, r6
 80160e6:	3b01      	subs	r3, #1
 80160e8:	4650      	mov	r0, sl
 80160ea:	9301      	str	r3, [sp, #4]
 80160ec:	f7ff fa6c 	bl	80155c8 <quorem>
 80160f0:	4641      	mov	r1, r8
 80160f2:	9002      	str	r0, [sp, #8]
 80160f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80160f8:	4650      	mov	r0, sl
 80160fa:	f000 fca5 	bl	8016a48 <__mcmp>
 80160fe:	463a      	mov	r2, r7
 8016100:	9005      	str	r0, [sp, #20]
 8016102:	4631      	mov	r1, r6
 8016104:	4620      	mov	r0, r4
 8016106:	f000 fcbb 	bl	8016a80 <__mdiff>
 801610a:	68c2      	ldr	r2, [r0, #12]
 801610c:	4605      	mov	r5, r0
 801610e:	bb02      	cbnz	r2, 8016152 <_dtoa_r+0xa7a>
 8016110:	4601      	mov	r1, r0
 8016112:	4650      	mov	r0, sl
 8016114:	f000 fc98 	bl	8016a48 <__mcmp>
 8016118:	4602      	mov	r2, r0
 801611a:	4629      	mov	r1, r5
 801611c:	4620      	mov	r0, r4
 801611e:	9209      	str	r2, [sp, #36]	; 0x24
 8016120:	f000 fa0c 	bl	801653c <_Bfree>
 8016124:	9b07      	ldr	r3, [sp, #28]
 8016126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016128:	9d04      	ldr	r5, [sp, #16]
 801612a:	ea43 0102 	orr.w	r1, r3, r2
 801612e:	9b06      	ldr	r3, [sp, #24]
 8016130:	4319      	orrs	r1, r3
 8016132:	d110      	bne.n	8016156 <_dtoa_r+0xa7e>
 8016134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016138:	d029      	beq.n	801618e <_dtoa_r+0xab6>
 801613a:	9b05      	ldr	r3, [sp, #20]
 801613c:	2b00      	cmp	r3, #0
 801613e:	dd02      	ble.n	8016146 <_dtoa_r+0xa6e>
 8016140:	9b02      	ldr	r3, [sp, #8]
 8016142:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016146:	9b01      	ldr	r3, [sp, #4]
 8016148:	f883 9000 	strb.w	r9, [r3]
 801614c:	e774      	b.n	8016038 <_dtoa_r+0x960>
 801614e:	4638      	mov	r0, r7
 8016150:	e7ba      	b.n	80160c8 <_dtoa_r+0x9f0>
 8016152:	2201      	movs	r2, #1
 8016154:	e7e1      	b.n	801611a <_dtoa_r+0xa42>
 8016156:	9b05      	ldr	r3, [sp, #20]
 8016158:	2b00      	cmp	r3, #0
 801615a:	db04      	blt.n	8016166 <_dtoa_r+0xa8e>
 801615c:	9907      	ldr	r1, [sp, #28]
 801615e:	430b      	orrs	r3, r1
 8016160:	9906      	ldr	r1, [sp, #24]
 8016162:	430b      	orrs	r3, r1
 8016164:	d120      	bne.n	80161a8 <_dtoa_r+0xad0>
 8016166:	2a00      	cmp	r2, #0
 8016168:	dded      	ble.n	8016146 <_dtoa_r+0xa6e>
 801616a:	4651      	mov	r1, sl
 801616c:	2201      	movs	r2, #1
 801616e:	4620      	mov	r0, r4
 8016170:	f000 fbfe 	bl	8016970 <__lshift>
 8016174:	4631      	mov	r1, r6
 8016176:	4682      	mov	sl, r0
 8016178:	f000 fc66 	bl	8016a48 <__mcmp>
 801617c:	2800      	cmp	r0, #0
 801617e:	dc03      	bgt.n	8016188 <_dtoa_r+0xab0>
 8016180:	d1e1      	bne.n	8016146 <_dtoa_r+0xa6e>
 8016182:	f019 0f01 	tst.w	r9, #1
 8016186:	d0de      	beq.n	8016146 <_dtoa_r+0xa6e>
 8016188:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801618c:	d1d8      	bne.n	8016140 <_dtoa_r+0xa68>
 801618e:	9a01      	ldr	r2, [sp, #4]
 8016190:	2339      	movs	r3, #57	; 0x39
 8016192:	7013      	strb	r3, [r2, #0]
 8016194:	462b      	mov	r3, r5
 8016196:	461d      	mov	r5, r3
 8016198:	3b01      	subs	r3, #1
 801619a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801619e:	2a39      	cmp	r2, #57	; 0x39
 80161a0:	d06c      	beq.n	801627c <_dtoa_r+0xba4>
 80161a2:	3201      	adds	r2, #1
 80161a4:	701a      	strb	r2, [r3, #0]
 80161a6:	e747      	b.n	8016038 <_dtoa_r+0x960>
 80161a8:	2a00      	cmp	r2, #0
 80161aa:	dd07      	ble.n	80161bc <_dtoa_r+0xae4>
 80161ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161b0:	d0ed      	beq.n	801618e <_dtoa_r+0xab6>
 80161b2:	9a01      	ldr	r2, [sp, #4]
 80161b4:	f109 0301 	add.w	r3, r9, #1
 80161b8:	7013      	strb	r3, [r2, #0]
 80161ba:	e73d      	b.n	8016038 <_dtoa_r+0x960>
 80161bc:	9b04      	ldr	r3, [sp, #16]
 80161be:	9a08      	ldr	r2, [sp, #32]
 80161c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80161c4:	4293      	cmp	r3, r2
 80161c6:	d043      	beq.n	8016250 <_dtoa_r+0xb78>
 80161c8:	4651      	mov	r1, sl
 80161ca:	2300      	movs	r3, #0
 80161cc:	220a      	movs	r2, #10
 80161ce:	4620      	mov	r0, r4
 80161d0:	f000 f9d6 	bl	8016580 <__multadd>
 80161d4:	45b8      	cmp	r8, r7
 80161d6:	4682      	mov	sl, r0
 80161d8:	f04f 0300 	mov.w	r3, #0
 80161dc:	f04f 020a 	mov.w	r2, #10
 80161e0:	4641      	mov	r1, r8
 80161e2:	4620      	mov	r0, r4
 80161e4:	d107      	bne.n	80161f6 <_dtoa_r+0xb1e>
 80161e6:	f000 f9cb 	bl	8016580 <__multadd>
 80161ea:	4680      	mov	r8, r0
 80161ec:	4607      	mov	r7, r0
 80161ee:	9b04      	ldr	r3, [sp, #16]
 80161f0:	3301      	adds	r3, #1
 80161f2:	9304      	str	r3, [sp, #16]
 80161f4:	e775      	b.n	80160e2 <_dtoa_r+0xa0a>
 80161f6:	f000 f9c3 	bl	8016580 <__multadd>
 80161fa:	4639      	mov	r1, r7
 80161fc:	4680      	mov	r8, r0
 80161fe:	2300      	movs	r3, #0
 8016200:	220a      	movs	r2, #10
 8016202:	4620      	mov	r0, r4
 8016204:	f000 f9bc 	bl	8016580 <__multadd>
 8016208:	4607      	mov	r7, r0
 801620a:	e7f0      	b.n	80161ee <_dtoa_r+0xb16>
 801620c:	9b04      	ldr	r3, [sp, #16]
 801620e:	9301      	str	r3, [sp, #4]
 8016210:	9d00      	ldr	r5, [sp, #0]
 8016212:	4631      	mov	r1, r6
 8016214:	4650      	mov	r0, sl
 8016216:	f7ff f9d7 	bl	80155c8 <quorem>
 801621a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801621e:	9b00      	ldr	r3, [sp, #0]
 8016220:	f805 9b01 	strb.w	r9, [r5], #1
 8016224:	1aea      	subs	r2, r5, r3
 8016226:	9b01      	ldr	r3, [sp, #4]
 8016228:	4293      	cmp	r3, r2
 801622a:	dd07      	ble.n	801623c <_dtoa_r+0xb64>
 801622c:	4651      	mov	r1, sl
 801622e:	2300      	movs	r3, #0
 8016230:	220a      	movs	r2, #10
 8016232:	4620      	mov	r0, r4
 8016234:	f000 f9a4 	bl	8016580 <__multadd>
 8016238:	4682      	mov	sl, r0
 801623a:	e7ea      	b.n	8016212 <_dtoa_r+0xb3a>
 801623c:	9b01      	ldr	r3, [sp, #4]
 801623e:	2b00      	cmp	r3, #0
 8016240:	bfc8      	it	gt
 8016242:	461d      	movgt	r5, r3
 8016244:	9b00      	ldr	r3, [sp, #0]
 8016246:	bfd8      	it	le
 8016248:	2501      	movle	r5, #1
 801624a:	441d      	add	r5, r3
 801624c:	f04f 0800 	mov.w	r8, #0
 8016250:	4651      	mov	r1, sl
 8016252:	2201      	movs	r2, #1
 8016254:	4620      	mov	r0, r4
 8016256:	f000 fb8b 	bl	8016970 <__lshift>
 801625a:	4631      	mov	r1, r6
 801625c:	4682      	mov	sl, r0
 801625e:	f000 fbf3 	bl	8016a48 <__mcmp>
 8016262:	2800      	cmp	r0, #0
 8016264:	dc96      	bgt.n	8016194 <_dtoa_r+0xabc>
 8016266:	d102      	bne.n	801626e <_dtoa_r+0xb96>
 8016268:	f019 0f01 	tst.w	r9, #1
 801626c:	d192      	bne.n	8016194 <_dtoa_r+0xabc>
 801626e:	462b      	mov	r3, r5
 8016270:	461d      	mov	r5, r3
 8016272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016276:	2a30      	cmp	r2, #48	; 0x30
 8016278:	d0fa      	beq.n	8016270 <_dtoa_r+0xb98>
 801627a:	e6dd      	b.n	8016038 <_dtoa_r+0x960>
 801627c:	9a00      	ldr	r2, [sp, #0]
 801627e:	429a      	cmp	r2, r3
 8016280:	d189      	bne.n	8016196 <_dtoa_r+0xabe>
 8016282:	f10b 0b01 	add.w	fp, fp, #1
 8016286:	2331      	movs	r3, #49	; 0x31
 8016288:	e796      	b.n	80161b8 <_dtoa_r+0xae0>
 801628a:	4b0a      	ldr	r3, [pc, #40]	; (80162b4 <_dtoa_r+0xbdc>)
 801628c:	f7ff ba99 	b.w	80157c2 <_dtoa_r+0xea>
 8016290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016292:	2b00      	cmp	r3, #0
 8016294:	f47f aa6d 	bne.w	8015772 <_dtoa_r+0x9a>
 8016298:	4b07      	ldr	r3, [pc, #28]	; (80162b8 <_dtoa_r+0xbe0>)
 801629a:	f7ff ba92 	b.w	80157c2 <_dtoa_r+0xea>
 801629e:	9b01      	ldr	r3, [sp, #4]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	dcb5      	bgt.n	8016210 <_dtoa_r+0xb38>
 80162a4:	9b07      	ldr	r3, [sp, #28]
 80162a6:	2b02      	cmp	r3, #2
 80162a8:	f73f aeb1 	bgt.w	801600e <_dtoa_r+0x936>
 80162ac:	e7b0      	b.n	8016210 <_dtoa_r+0xb38>
 80162ae:	bf00      	nop
 80162b0:	0801bfb3 	.word	0x0801bfb3
 80162b4:	0801c298 	.word	0x0801c298
 80162b8:	0801bf37 	.word	0x0801bf37

080162bc <_free_r>:
 80162bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162be:	2900      	cmp	r1, #0
 80162c0:	d044      	beq.n	801634c <_free_r+0x90>
 80162c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162c6:	9001      	str	r0, [sp, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	f1a1 0404 	sub.w	r4, r1, #4
 80162ce:	bfb8      	it	lt
 80162d0:	18e4      	addlt	r4, r4, r3
 80162d2:	f000 f8e7 	bl	80164a4 <__malloc_lock>
 80162d6:	4a1e      	ldr	r2, [pc, #120]	; (8016350 <_free_r+0x94>)
 80162d8:	9801      	ldr	r0, [sp, #4]
 80162da:	6813      	ldr	r3, [r2, #0]
 80162dc:	b933      	cbnz	r3, 80162ec <_free_r+0x30>
 80162de:	6063      	str	r3, [r4, #4]
 80162e0:	6014      	str	r4, [r2, #0]
 80162e2:	b003      	add	sp, #12
 80162e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162e8:	f000 b8e2 	b.w	80164b0 <__malloc_unlock>
 80162ec:	42a3      	cmp	r3, r4
 80162ee:	d908      	bls.n	8016302 <_free_r+0x46>
 80162f0:	6825      	ldr	r5, [r4, #0]
 80162f2:	1961      	adds	r1, r4, r5
 80162f4:	428b      	cmp	r3, r1
 80162f6:	bf01      	itttt	eq
 80162f8:	6819      	ldreq	r1, [r3, #0]
 80162fa:	685b      	ldreq	r3, [r3, #4]
 80162fc:	1949      	addeq	r1, r1, r5
 80162fe:	6021      	streq	r1, [r4, #0]
 8016300:	e7ed      	b.n	80162de <_free_r+0x22>
 8016302:	461a      	mov	r2, r3
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	b10b      	cbz	r3, 801630c <_free_r+0x50>
 8016308:	42a3      	cmp	r3, r4
 801630a:	d9fa      	bls.n	8016302 <_free_r+0x46>
 801630c:	6811      	ldr	r1, [r2, #0]
 801630e:	1855      	adds	r5, r2, r1
 8016310:	42a5      	cmp	r5, r4
 8016312:	d10b      	bne.n	801632c <_free_r+0x70>
 8016314:	6824      	ldr	r4, [r4, #0]
 8016316:	4421      	add	r1, r4
 8016318:	1854      	adds	r4, r2, r1
 801631a:	42a3      	cmp	r3, r4
 801631c:	6011      	str	r1, [r2, #0]
 801631e:	d1e0      	bne.n	80162e2 <_free_r+0x26>
 8016320:	681c      	ldr	r4, [r3, #0]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	6053      	str	r3, [r2, #4]
 8016326:	440c      	add	r4, r1
 8016328:	6014      	str	r4, [r2, #0]
 801632a:	e7da      	b.n	80162e2 <_free_r+0x26>
 801632c:	d902      	bls.n	8016334 <_free_r+0x78>
 801632e:	230c      	movs	r3, #12
 8016330:	6003      	str	r3, [r0, #0]
 8016332:	e7d6      	b.n	80162e2 <_free_r+0x26>
 8016334:	6825      	ldr	r5, [r4, #0]
 8016336:	1961      	adds	r1, r4, r5
 8016338:	428b      	cmp	r3, r1
 801633a:	bf04      	itt	eq
 801633c:	6819      	ldreq	r1, [r3, #0]
 801633e:	685b      	ldreq	r3, [r3, #4]
 8016340:	6063      	str	r3, [r4, #4]
 8016342:	bf04      	itt	eq
 8016344:	1949      	addeq	r1, r1, r5
 8016346:	6021      	streq	r1, [r4, #0]
 8016348:	6054      	str	r4, [r2, #4]
 801634a:	e7ca      	b.n	80162e2 <_free_r+0x26>
 801634c:	b003      	add	sp, #12
 801634e:	bd30      	pop	{r4, r5, pc}
 8016350:	20009098 	.word	0x20009098

08016354 <malloc>:
 8016354:	4b02      	ldr	r3, [pc, #8]	; (8016360 <malloc+0xc>)
 8016356:	4601      	mov	r1, r0
 8016358:	6818      	ldr	r0, [r3, #0]
 801635a:	f000 b823 	b.w	80163a4 <_malloc_r>
 801635e:	bf00      	nop
 8016360:	20000070 	.word	0x20000070

08016364 <sbrk_aligned>:
 8016364:	b570      	push	{r4, r5, r6, lr}
 8016366:	4e0e      	ldr	r6, [pc, #56]	; (80163a0 <sbrk_aligned+0x3c>)
 8016368:	460c      	mov	r4, r1
 801636a:	6831      	ldr	r1, [r6, #0]
 801636c:	4605      	mov	r5, r0
 801636e:	b911      	cbnz	r1, 8016376 <sbrk_aligned+0x12>
 8016370:	f002 f99c 	bl	80186ac <_sbrk_r>
 8016374:	6030      	str	r0, [r6, #0]
 8016376:	4621      	mov	r1, r4
 8016378:	4628      	mov	r0, r5
 801637a:	f002 f997 	bl	80186ac <_sbrk_r>
 801637e:	1c43      	adds	r3, r0, #1
 8016380:	d00a      	beq.n	8016398 <sbrk_aligned+0x34>
 8016382:	1cc4      	adds	r4, r0, #3
 8016384:	f024 0403 	bic.w	r4, r4, #3
 8016388:	42a0      	cmp	r0, r4
 801638a:	d007      	beq.n	801639c <sbrk_aligned+0x38>
 801638c:	1a21      	subs	r1, r4, r0
 801638e:	4628      	mov	r0, r5
 8016390:	f002 f98c 	bl	80186ac <_sbrk_r>
 8016394:	3001      	adds	r0, #1
 8016396:	d101      	bne.n	801639c <sbrk_aligned+0x38>
 8016398:	f04f 34ff 	mov.w	r4, #4294967295
 801639c:	4620      	mov	r0, r4
 801639e:	bd70      	pop	{r4, r5, r6, pc}
 80163a0:	2000909c 	.word	0x2000909c

080163a4 <_malloc_r>:
 80163a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163a8:	1ccd      	adds	r5, r1, #3
 80163aa:	f025 0503 	bic.w	r5, r5, #3
 80163ae:	3508      	adds	r5, #8
 80163b0:	2d0c      	cmp	r5, #12
 80163b2:	bf38      	it	cc
 80163b4:	250c      	movcc	r5, #12
 80163b6:	2d00      	cmp	r5, #0
 80163b8:	4607      	mov	r7, r0
 80163ba:	db01      	blt.n	80163c0 <_malloc_r+0x1c>
 80163bc:	42a9      	cmp	r1, r5
 80163be:	d905      	bls.n	80163cc <_malloc_r+0x28>
 80163c0:	230c      	movs	r3, #12
 80163c2:	603b      	str	r3, [r7, #0]
 80163c4:	2600      	movs	r6, #0
 80163c6:	4630      	mov	r0, r6
 80163c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80164a0 <_malloc_r+0xfc>
 80163d0:	f000 f868 	bl	80164a4 <__malloc_lock>
 80163d4:	f8d8 3000 	ldr.w	r3, [r8]
 80163d8:	461c      	mov	r4, r3
 80163da:	bb5c      	cbnz	r4, 8016434 <_malloc_r+0x90>
 80163dc:	4629      	mov	r1, r5
 80163de:	4638      	mov	r0, r7
 80163e0:	f7ff ffc0 	bl	8016364 <sbrk_aligned>
 80163e4:	1c43      	adds	r3, r0, #1
 80163e6:	4604      	mov	r4, r0
 80163e8:	d155      	bne.n	8016496 <_malloc_r+0xf2>
 80163ea:	f8d8 4000 	ldr.w	r4, [r8]
 80163ee:	4626      	mov	r6, r4
 80163f0:	2e00      	cmp	r6, #0
 80163f2:	d145      	bne.n	8016480 <_malloc_r+0xdc>
 80163f4:	2c00      	cmp	r4, #0
 80163f6:	d048      	beq.n	801648a <_malloc_r+0xe6>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	4631      	mov	r1, r6
 80163fc:	4638      	mov	r0, r7
 80163fe:	eb04 0903 	add.w	r9, r4, r3
 8016402:	f002 f953 	bl	80186ac <_sbrk_r>
 8016406:	4581      	cmp	r9, r0
 8016408:	d13f      	bne.n	801648a <_malloc_r+0xe6>
 801640a:	6821      	ldr	r1, [r4, #0]
 801640c:	1a6d      	subs	r5, r5, r1
 801640e:	4629      	mov	r1, r5
 8016410:	4638      	mov	r0, r7
 8016412:	f7ff ffa7 	bl	8016364 <sbrk_aligned>
 8016416:	3001      	adds	r0, #1
 8016418:	d037      	beq.n	801648a <_malloc_r+0xe6>
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	442b      	add	r3, r5
 801641e:	6023      	str	r3, [r4, #0]
 8016420:	f8d8 3000 	ldr.w	r3, [r8]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d038      	beq.n	801649a <_malloc_r+0xf6>
 8016428:	685a      	ldr	r2, [r3, #4]
 801642a:	42a2      	cmp	r2, r4
 801642c:	d12b      	bne.n	8016486 <_malloc_r+0xe2>
 801642e:	2200      	movs	r2, #0
 8016430:	605a      	str	r2, [r3, #4]
 8016432:	e00f      	b.n	8016454 <_malloc_r+0xb0>
 8016434:	6822      	ldr	r2, [r4, #0]
 8016436:	1b52      	subs	r2, r2, r5
 8016438:	d41f      	bmi.n	801647a <_malloc_r+0xd6>
 801643a:	2a0b      	cmp	r2, #11
 801643c:	d917      	bls.n	801646e <_malloc_r+0xca>
 801643e:	1961      	adds	r1, r4, r5
 8016440:	42a3      	cmp	r3, r4
 8016442:	6025      	str	r5, [r4, #0]
 8016444:	bf18      	it	ne
 8016446:	6059      	strne	r1, [r3, #4]
 8016448:	6863      	ldr	r3, [r4, #4]
 801644a:	bf08      	it	eq
 801644c:	f8c8 1000 	streq.w	r1, [r8]
 8016450:	5162      	str	r2, [r4, r5]
 8016452:	604b      	str	r3, [r1, #4]
 8016454:	4638      	mov	r0, r7
 8016456:	f104 060b 	add.w	r6, r4, #11
 801645a:	f000 f829 	bl	80164b0 <__malloc_unlock>
 801645e:	f026 0607 	bic.w	r6, r6, #7
 8016462:	1d23      	adds	r3, r4, #4
 8016464:	1af2      	subs	r2, r6, r3
 8016466:	d0ae      	beq.n	80163c6 <_malloc_r+0x22>
 8016468:	1b9b      	subs	r3, r3, r6
 801646a:	50a3      	str	r3, [r4, r2]
 801646c:	e7ab      	b.n	80163c6 <_malloc_r+0x22>
 801646e:	42a3      	cmp	r3, r4
 8016470:	6862      	ldr	r2, [r4, #4]
 8016472:	d1dd      	bne.n	8016430 <_malloc_r+0x8c>
 8016474:	f8c8 2000 	str.w	r2, [r8]
 8016478:	e7ec      	b.n	8016454 <_malloc_r+0xb0>
 801647a:	4623      	mov	r3, r4
 801647c:	6864      	ldr	r4, [r4, #4]
 801647e:	e7ac      	b.n	80163da <_malloc_r+0x36>
 8016480:	4634      	mov	r4, r6
 8016482:	6876      	ldr	r6, [r6, #4]
 8016484:	e7b4      	b.n	80163f0 <_malloc_r+0x4c>
 8016486:	4613      	mov	r3, r2
 8016488:	e7cc      	b.n	8016424 <_malloc_r+0x80>
 801648a:	230c      	movs	r3, #12
 801648c:	603b      	str	r3, [r7, #0]
 801648e:	4638      	mov	r0, r7
 8016490:	f000 f80e 	bl	80164b0 <__malloc_unlock>
 8016494:	e797      	b.n	80163c6 <_malloc_r+0x22>
 8016496:	6025      	str	r5, [r4, #0]
 8016498:	e7dc      	b.n	8016454 <_malloc_r+0xb0>
 801649a:	605b      	str	r3, [r3, #4]
 801649c:	deff      	udf	#255	; 0xff
 801649e:	bf00      	nop
 80164a0:	20009098 	.word	0x20009098

080164a4 <__malloc_lock>:
 80164a4:	4801      	ldr	r0, [pc, #4]	; (80164ac <__malloc_lock+0x8>)
 80164a6:	f7ff b878 	b.w	801559a <__retarget_lock_acquire_recursive>
 80164aa:	bf00      	nop
 80164ac:	20009094 	.word	0x20009094

080164b0 <__malloc_unlock>:
 80164b0:	4801      	ldr	r0, [pc, #4]	; (80164b8 <__malloc_unlock+0x8>)
 80164b2:	f7ff b873 	b.w	801559c <__retarget_lock_release_recursive>
 80164b6:	bf00      	nop
 80164b8:	20009094 	.word	0x20009094

080164bc <_Balloc>:
 80164bc:	b570      	push	{r4, r5, r6, lr}
 80164be:	69c6      	ldr	r6, [r0, #28]
 80164c0:	4604      	mov	r4, r0
 80164c2:	460d      	mov	r5, r1
 80164c4:	b976      	cbnz	r6, 80164e4 <_Balloc+0x28>
 80164c6:	2010      	movs	r0, #16
 80164c8:	f7ff ff44 	bl	8016354 <malloc>
 80164cc:	4602      	mov	r2, r0
 80164ce:	61e0      	str	r0, [r4, #28]
 80164d0:	b920      	cbnz	r0, 80164dc <_Balloc+0x20>
 80164d2:	4b18      	ldr	r3, [pc, #96]	; (8016534 <_Balloc+0x78>)
 80164d4:	4818      	ldr	r0, [pc, #96]	; (8016538 <_Balloc+0x7c>)
 80164d6:	216b      	movs	r1, #107	; 0x6b
 80164d8:	f002 f902 	bl	80186e0 <__assert_func>
 80164dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164e0:	6006      	str	r6, [r0, #0]
 80164e2:	60c6      	str	r6, [r0, #12]
 80164e4:	69e6      	ldr	r6, [r4, #28]
 80164e6:	68f3      	ldr	r3, [r6, #12]
 80164e8:	b183      	cbz	r3, 801650c <_Balloc+0x50>
 80164ea:	69e3      	ldr	r3, [r4, #28]
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164f2:	b9b8      	cbnz	r0, 8016524 <_Balloc+0x68>
 80164f4:	2101      	movs	r1, #1
 80164f6:	fa01 f605 	lsl.w	r6, r1, r5
 80164fa:	1d72      	adds	r2, r6, #5
 80164fc:	0092      	lsls	r2, r2, #2
 80164fe:	4620      	mov	r0, r4
 8016500:	f002 f90c 	bl	801871c <_calloc_r>
 8016504:	b160      	cbz	r0, 8016520 <_Balloc+0x64>
 8016506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801650a:	e00e      	b.n	801652a <_Balloc+0x6e>
 801650c:	2221      	movs	r2, #33	; 0x21
 801650e:	2104      	movs	r1, #4
 8016510:	4620      	mov	r0, r4
 8016512:	f002 f903 	bl	801871c <_calloc_r>
 8016516:	69e3      	ldr	r3, [r4, #28]
 8016518:	60f0      	str	r0, [r6, #12]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1e4      	bne.n	80164ea <_Balloc+0x2e>
 8016520:	2000      	movs	r0, #0
 8016522:	bd70      	pop	{r4, r5, r6, pc}
 8016524:	6802      	ldr	r2, [r0, #0]
 8016526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801652a:	2300      	movs	r3, #0
 801652c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016530:	e7f7      	b.n	8016522 <_Balloc+0x66>
 8016532:	bf00      	nop
 8016534:	0801bf44 	.word	0x0801bf44
 8016538:	0801bfc4 	.word	0x0801bfc4

0801653c <_Bfree>:
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	69c6      	ldr	r6, [r0, #28]
 8016540:	4605      	mov	r5, r0
 8016542:	460c      	mov	r4, r1
 8016544:	b976      	cbnz	r6, 8016564 <_Bfree+0x28>
 8016546:	2010      	movs	r0, #16
 8016548:	f7ff ff04 	bl	8016354 <malloc>
 801654c:	4602      	mov	r2, r0
 801654e:	61e8      	str	r0, [r5, #28]
 8016550:	b920      	cbnz	r0, 801655c <_Bfree+0x20>
 8016552:	4b09      	ldr	r3, [pc, #36]	; (8016578 <_Bfree+0x3c>)
 8016554:	4809      	ldr	r0, [pc, #36]	; (801657c <_Bfree+0x40>)
 8016556:	218f      	movs	r1, #143	; 0x8f
 8016558:	f002 f8c2 	bl	80186e0 <__assert_func>
 801655c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016560:	6006      	str	r6, [r0, #0]
 8016562:	60c6      	str	r6, [r0, #12]
 8016564:	b13c      	cbz	r4, 8016576 <_Bfree+0x3a>
 8016566:	69eb      	ldr	r3, [r5, #28]
 8016568:	6862      	ldr	r2, [r4, #4]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016570:	6021      	str	r1, [r4, #0]
 8016572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016576:	bd70      	pop	{r4, r5, r6, pc}
 8016578:	0801bf44 	.word	0x0801bf44
 801657c:	0801bfc4 	.word	0x0801bfc4

08016580 <__multadd>:
 8016580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016584:	690d      	ldr	r5, [r1, #16]
 8016586:	4607      	mov	r7, r0
 8016588:	460c      	mov	r4, r1
 801658a:	461e      	mov	r6, r3
 801658c:	f101 0c14 	add.w	ip, r1, #20
 8016590:	2000      	movs	r0, #0
 8016592:	f8dc 3000 	ldr.w	r3, [ip]
 8016596:	b299      	uxth	r1, r3
 8016598:	fb02 6101 	mla	r1, r2, r1, r6
 801659c:	0c1e      	lsrs	r6, r3, #16
 801659e:	0c0b      	lsrs	r3, r1, #16
 80165a0:	fb02 3306 	mla	r3, r2, r6, r3
 80165a4:	b289      	uxth	r1, r1
 80165a6:	3001      	adds	r0, #1
 80165a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80165ac:	4285      	cmp	r5, r0
 80165ae:	f84c 1b04 	str.w	r1, [ip], #4
 80165b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80165b6:	dcec      	bgt.n	8016592 <__multadd+0x12>
 80165b8:	b30e      	cbz	r6, 80165fe <__multadd+0x7e>
 80165ba:	68a3      	ldr	r3, [r4, #8]
 80165bc:	42ab      	cmp	r3, r5
 80165be:	dc19      	bgt.n	80165f4 <__multadd+0x74>
 80165c0:	6861      	ldr	r1, [r4, #4]
 80165c2:	4638      	mov	r0, r7
 80165c4:	3101      	adds	r1, #1
 80165c6:	f7ff ff79 	bl	80164bc <_Balloc>
 80165ca:	4680      	mov	r8, r0
 80165cc:	b928      	cbnz	r0, 80165da <__multadd+0x5a>
 80165ce:	4602      	mov	r2, r0
 80165d0:	4b0c      	ldr	r3, [pc, #48]	; (8016604 <__multadd+0x84>)
 80165d2:	480d      	ldr	r0, [pc, #52]	; (8016608 <__multadd+0x88>)
 80165d4:	21ba      	movs	r1, #186	; 0xba
 80165d6:	f002 f883 	bl	80186e0 <__assert_func>
 80165da:	6922      	ldr	r2, [r4, #16]
 80165dc:	3202      	adds	r2, #2
 80165de:	f104 010c 	add.w	r1, r4, #12
 80165e2:	0092      	lsls	r2, r2, #2
 80165e4:	300c      	adds	r0, #12
 80165e6:	f7fe ffda 	bl	801559e <memcpy>
 80165ea:	4621      	mov	r1, r4
 80165ec:	4638      	mov	r0, r7
 80165ee:	f7ff ffa5 	bl	801653c <_Bfree>
 80165f2:	4644      	mov	r4, r8
 80165f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165f8:	3501      	adds	r5, #1
 80165fa:	615e      	str	r6, [r3, #20]
 80165fc:	6125      	str	r5, [r4, #16]
 80165fe:	4620      	mov	r0, r4
 8016600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016604:	0801bfb3 	.word	0x0801bfb3
 8016608:	0801bfc4 	.word	0x0801bfc4

0801660c <__s2b>:
 801660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016610:	460c      	mov	r4, r1
 8016612:	4615      	mov	r5, r2
 8016614:	461f      	mov	r7, r3
 8016616:	2209      	movs	r2, #9
 8016618:	3308      	adds	r3, #8
 801661a:	4606      	mov	r6, r0
 801661c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016620:	2100      	movs	r1, #0
 8016622:	2201      	movs	r2, #1
 8016624:	429a      	cmp	r2, r3
 8016626:	db09      	blt.n	801663c <__s2b+0x30>
 8016628:	4630      	mov	r0, r6
 801662a:	f7ff ff47 	bl	80164bc <_Balloc>
 801662e:	b940      	cbnz	r0, 8016642 <__s2b+0x36>
 8016630:	4602      	mov	r2, r0
 8016632:	4b19      	ldr	r3, [pc, #100]	; (8016698 <__s2b+0x8c>)
 8016634:	4819      	ldr	r0, [pc, #100]	; (801669c <__s2b+0x90>)
 8016636:	21d3      	movs	r1, #211	; 0xd3
 8016638:	f002 f852 	bl	80186e0 <__assert_func>
 801663c:	0052      	lsls	r2, r2, #1
 801663e:	3101      	adds	r1, #1
 8016640:	e7f0      	b.n	8016624 <__s2b+0x18>
 8016642:	9b08      	ldr	r3, [sp, #32]
 8016644:	6143      	str	r3, [r0, #20]
 8016646:	2d09      	cmp	r5, #9
 8016648:	f04f 0301 	mov.w	r3, #1
 801664c:	6103      	str	r3, [r0, #16]
 801664e:	dd16      	ble.n	801667e <__s2b+0x72>
 8016650:	f104 0909 	add.w	r9, r4, #9
 8016654:	46c8      	mov	r8, r9
 8016656:	442c      	add	r4, r5
 8016658:	f818 3b01 	ldrb.w	r3, [r8], #1
 801665c:	4601      	mov	r1, r0
 801665e:	3b30      	subs	r3, #48	; 0x30
 8016660:	220a      	movs	r2, #10
 8016662:	4630      	mov	r0, r6
 8016664:	f7ff ff8c 	bl	8016580 <__multadd>
 8016668:	45a0      	cmp	r8, r4
 801666a:	d1f5      	bne.n	8016658 <__s2b+0x4c>
 801666c:	f1a5 0408 	sub.w	r4, r5, #8
 8016670:	444c      	add	r4, r9
 8016672:	1b2d      	subs	r5, r5, r4
 8016674:	1963      	adds	r3, r4, r5
 8016676:	42bb      	cmp	r3, r7
 8016678:	db04      	blt.n	8016684 <__s2b+0x78>
 801667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801667e:	340a      	adds	r4, #10
 8016680:	2509      	movs	r5, #9
 8016682:	e7f6      	b.n	8016672 <__s2b+0x66>
 8016684:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016688:	4601      	mov	r1, r0
 801668a:	3b30      	subs	r3, #48	; 0x30
 801668c:	220a      	movs	r2, #10
 801668e:	4630      	mov	r0, r6
 8016690:	f7ff ff76 	bl	8016580 <__multadd>
 8016694:	e7ee      	b.n	8016674 <__s2b+0x68>
 8016696:	bf00      	nop
 8016698:	0801bfb3 	.word	0x0801bfb3
 801669c:	0801bfc4 	.word	0x0801bfc4

080166a0 <__hi0bits>:
 80166a0:	0c03      	lsrs	r3, r0, #16
 80166a2:	041b      	lsls	r3, r3, #16
 80166a4:	b9d3      	cbnz	r3, 80166dc <__hi0bits+0x3c>
 80166a6:	0400      	lsls	r0, r0, #16
 80166a8:	2310      	movs	r3, #16
 80166aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80166ae:	bf04      	itt	eq
 80166b0:	0200      	lsleq	r0, r0, #8
 80166b2:	3308      	addeq	r3, #8
 80166b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80166b8:	bf04      	itt	eq
 80166ba:	0100      	lsleq	r0, r0, #4
 80166bc:	3304      	addeq	r3, #4
 80166be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80166c2:	bf04      	itt	eq
 80166c4:	0080      	lsleq	r0, r0, #2
 80166c6:	3302      	addeq	r3, #2
 80166c8:	2800      	cmp	r0, #0
 80166ca:	db05      	blt.n	80166d8 <__hi0bits+0x38>
 80166cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80166d0:	f103 0301 	add.w	r3, r3, #1
 80166d4:	bf08      	it	eq
 80166d6:	2320      	moveq	r3, #32
 80166d8:	4618      	mov	r0, r3
 80166da:	4770      	bx	lr
 80166dc:	2300      	movs	r3, #0
 80166de:	e7e4      	b.n	80166aa <__hi0bits+0xa>

080166e0 <__lo0bits>:
 80166e0:	6803      	ldr	r3, [r0, #0]
 80166e2:	f013 0207 	ands.w	r2, r3, #7
 80166e6:	d00c      	beq.n	8016702 <__lo0bits+0x22>
 80166e8:	07d9      	lsls	r1, r3, #31
 80166ea:	d422      	bmi.n	8016732 <__lo0bits+0x52>
 80166ec:	079a      	lsls	r2, r3, #30
 80166ee:	bf49      	itett	mi
 80166f0:	085b      	lsrmi	r3, r3, #1
 80166f2:	089b      	lsrpl	r3, r3, #2
 80166f4:	6003      	strmi	r3, [r0, #0]
 80166f6:	2201      	movmi	r2, #1
 80166f8:	bf5c      	itt	pl
 80166fa:	6003      	strpl	r3, [r0, #0]
 80166fc:	2202      	movpl	r2, #2
 80166fe:	4610      	mov	r0, r2
 8016700:	4770      	bx	lr
 8016702:	b299      	uxth	r1, r3
 8016704:	b909      	cbnz	r1, 801670a <__lo0bits+0x2a>
 8016706:	0c1b      	lsrs	r3, r3, #16
 8016708:	2210      	movs	r2, #16
 801670a:	b2d9      	uxtb	r1, r3
 801670c:	b909      	cbnz	r1, 8016712 <__lo0bits+0x32>
 801670e:	3208      	adds	r2, #8
 8016710:	0a1b      	lsrs	r3, r3, #8
 8016712:	0719      	lsls	r1, r3, #28
 8016714:	bf04      	itt	eq
 8016716:	091b      	lsreq	r3, r3, #4
 8016718:	3204      	addeq	r2, #4
 801671a:	0799      	lsls	r1, r3, #30
 801671c:	bf04      	itt	eq
 801671e:	089b      	lsreq	r3, r3, #2
 8016720:	3202      	addeq	r2, #2
 8016722:	07d9      	lsls	r1, r3, #31
 8016724:	d403      	bmi.n	801672e <__lo0bits+0x4e>
 8016726:	085b      	lsrs	r3, r3, #1
 8016728:	f102 0201 	add.w	r2, r2, #1
 801672c:	d003      	beq.n	8016736 <__lo0bits+0x56>
 801672e:	6003      	str	r3, [r0, #0]
 8016730:	e7e5      	b.n	80166fe <__lo0bits+0x1e>
 8016732:	2200      	movs	r2, #0
 8016734:	e7e3      	b.n	80166fe <__lo0bits+0x1e>
 8016736:	2220      	movs	r2, #32
 8016738:	e7e1      	b.n	80166fe <__lo0bits+0x1e>
	...

0801673c <__i2b>:
 801673c:	b510      	push	{r4, lr}
 801673e:	460c      	mov	r4, r1
 8016740:	2101      	movs	r1, #1
 8016742:	f7ff febb 	bl	80164bc <_Balloc>
 8016746:	4602      	mov	r2, r0
 8016748:	b928      	cbnz	r0, 8016756 <__i2b+0x1a>
 801674a:	4b05      	ldr	r3, [pc, #20]	; (8016760 <__i2b+0x24>)
 801674c:	4805      	ldr	r0, [pc, #20]	; (8016764 <__i2b+0x28>)
 801674e:	f240 1145 	movw	r1, #325	; 0x145
 8016752:	f001 ffc5 	bl	80186e0 <__assert_func>
 8016756:	2301      	movs	r3, #1
 8016758:	6144      	str	r4, [r0, #20]
 801675a:	6103      	str	r3, [r0, #16]
 801675c:	bd10      	pop	{r4, pc}
 801675e:	bf00      	nop
 8016760:	0801bfb3 	.word	0x0801bfb3
 8016764:	0801bfc4 	.word	0x0801bfc4

08016768 <__multiply>:
 8016768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801676c:	4691      	mov	r9, r2
 801676e:	690a      	ldr	r2, [r1, #16]
 8016770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016774:	429a      	cmp	r2, r3
 8016776:	bfb8      	it	lt
 8016778:	460b      	movlt	r3, r1
 801677a:	460c      	mov	r4, r1
 801677c:	bfbc      	itt	lt
 801677e:	464c      	movlt	r4, r9
 8016780:	4699      	movlt	r9, r3
 8016782:	6927      	ldr	r7, [r4, #16]
 8016784:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016788:	68a3      	ldr	r3, [r4, #8]
 801678a:	6861      	ldr	r1, [r4, #4]
 801678c:	eb07 060a 	add.w	r6, r7, sl
 8016790:	42b3      	cmp	r3, r6
 8016792:	b085      	sub	sp, #20
 8016794:	bfb8      	it	lt
 8016796:	3101      	addlt	r1, #1
 8016798:	f7ff fe90 	bl	80164bc <_Balloc>
 801679c:	b930      	cbnz	r0, 80167ac <__multiply+0x44>
 801679e:	4602      	mov	r2, r0
 80167a0:	4b44      	ldr	r3, [pc, #272]	; (80168b4 <__multiply+0x14c>)
 80167a2:	4845      	ldr	r0, [pc, #276]	; (80168b8 <__multiply+0x150>)
 80167a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80167a8:	f001 ff9a 	bl	80186e0 <__assert_func>
 80167ac:	f100 0514 	add.w	r5, r0, #20
 80167b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80167b4:	462b      	mov	r3, r5
 80167b6:	2200      	movs	r2, #0
 80167b8:	4543      	cmp	r3, r8
 80167ba:	d321      	bcc.n	8016800 <__multiply+0x98>
 80167bc:	f104 0314 	add.w	r3, r4, #20
 80167c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80167c4:	f109 0314 	add.w	r3, r9, #20
 80167c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80167cc:	9202      	str	r2, [sp, #8]
 80167ce:	1b3a      	subs	r2, r7, r4
 80167d0:	3a15      	subs	r2, #21
 80167d2:	f022 0203 	bic.w	r2, r2, #3
 80167d6:	3204      	adds	r2, #4
 80167d8:	f104 0115 	add.w	r1, r4, #21
 80167dc:	428f      	cmp	r7, r1
 80167de:	bf38      	it	cc
 80167e0:	2204      	movcc	r2, #4
 80167e2:	9201      	str	r2, [sp, #4]
 80167e4:	9a02      	ldr	r2, [sp, #8]
 80167e6:	9303      	str	r3, [sp, #12]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d80c      	bhi.n	8016806 <__multiply+0x9e>
 80167ec:	2e00      	cmp	r6, #0
 80167ee:	dd03      	ble.n	80167f8 <__multiply+0x90>
 80167f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d05b      	beq.n	80168b0 <__multiply+0x148>
 80167f8:	6106      	str	r6, [r0, #16]
 80167fa:	b005      	add	sp, #20
 80167fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016800:	f843 2b04 	str.w	r2, [r3], #4
 8016804:	e7d8      	b.n	80167b8 <__multiply+0x50>
 8016806:	f8b3 a000 	ldrh.w	sl, [r3]
 801680a:	f1ba 0f00 	cmp.w	sl, #0
 801680e:	d024      	beq.n	801685a <__multiply+0xf2>
 8016810:	f104 0e14 	add.w	lr, r4, #20
 8016814:	46a9      	mov	r9, r5
 8016816:	f04f 0c00 	mov.w	ip, #0
 801681a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801681e:	f8d9 1000 	ldr.w	r1, [r9]
 8016822:	fa1f fb82 	uxth.w	fp, r2
 8016826:	b289      	uxth	r1, r1
 8016828:	fb0a 110b 	mla	r1, sl, fp, r1
 801682c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016830:	f8d9 2000 	ldr.w	r2, [r9]
 8016834:	4461      	add	r1, ip
 8016836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801683a:	fb0a c20b 	mla	r2, sl, fp, ip
 801683e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016842:	b289      	uxth	r1, r1
 8016844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016848:	4577      	cmp	r7, lr
 801684a:	f849 1b04 	str.w	r1, [r9], #4
 801684e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016852:	d8e2      	bhi.n	801681a <__multiply+0xb2>
 8016854:	9a01      	ldr	r2, [sp, #4]
 8016856:	f845 c002 	str.w	ip, [r5, r2]
 801685a:	9a03      	ldr	r2, [sp, #12]
 801685c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016860:	3304      	adds	r3, #4
 8016862:	f1b9 0f00 	cmp.w	r9, #0
 8016866:	d021      	beq.n	80168ac <__multiply+0x144>
 8016868:	6829      	ldr	r1, [r5, #0]
 801686a:	f104 0c14 	add.w	ip, r4, #20
 801686e:	46ae      	mov	lr, r5
 8016870:	f04f 0a00 	mov.w	sl, #0
 8016874:	f8bc b000 	ldrh.w	fp, [ip]
 8016878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801687c:	fb09 220b 	mla	r2, r9, fp, r2
 8016880:	4452      	add	r2, sl
 8016882:	b289      	uxth	r1, r1
 8016884:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016888:	f84e 1b04 	str.w	r1, [lr], #4
 801688c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016890:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016894:	f8be 1000 	ldrh.w	r1, [lr]
 8016898:	fb09 110a 	mla	r1, r9, sl, r1
 801689c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80168a0:	4567      	cmp	r7, ip
 80168a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80168a6:	d8e5      	bhi.n	8016874 <__multiply+0x10c>
 80168a8:	9a01      	ldr	r2, [sp, #4]
 80168aa:	50a9      	str	r1, [r5, r2]
 80168ac:	3504      	adds	r5, #4
 80168ae:	e799      	b.n	80167e4 <__multiply+0x7c>
 80168b0:	3e01      	subs	r6, #1
 80168b2:	e79b      	b.n	80167ec <__multiply+0x84>
 80168b4:	0801bfb3 	.word	0x0801bfb3
 80168b8:	0801bfc4 	.word	0x0801bfc4

080168bc <__pow5mult>:
 80168bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168c0:	4615      	mov	r5, r2
 80168c2:	f012 0203 	ands.w	r2, r2, #3
 80168c6:	4606      	mov	r6, r0
 80168c8:	460f      	mov	r7, r1
 80168ca:	d007      	beq.n	80168dc <__pow5mult+0x20>
 80168cc:	4c25      	ldr	r4, [pc, #148]	; (8016964 <__pow5mult+0xa8>)
 80168ce:	3a01      	subs	r2, #1
 80168d0:	2300      	movs	r3, #0
 80168d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168d6:	f7ff fe53 	bl	8016580 <__multadd>
 80168da:	4607      	mov	r7, r0
 80168dc:	10ad      	asrs	r5, r5, #2
 80168de:	d03d      	beq.n	801695c <__pow5mult+0xa0>
 80168e0:	69f4      	ldr	r4, [r6, #28]
 80168e2:	b97c      	cbnz	r4, 8016904 <__pow5mult+0x48>
 80168e4:	2010      	movs	r0, #16
 80168e6:	f7ff fd35 	bl	8016354 <malloc>
 80168ea:	4602      	mov	r2, r0
 80168ec:	61f0      	str	r0, [r6, #28]
 80168ee:	b928      	cbnz	r0, 80168fc <__pow5mult+0x40>
 80168f0:	4b1d      	ldr	r3, [pc, #116]	; (8016968 <__pow5mult+0xac>)
 80168f2:	481e      	ldr	r0, [pc, #120]	; (801696c <__pow5mult+0xb0>)
 80168f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80168f8:	f001 fef2 	bl	80186e0 <__assert_func>
 80168fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016900:	6004      	str	r4, [r0, #0]
 8016902:	60c4      	str	r4, [r0, #12]
 8016904:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801690c:	b94c      	cbnz	r4, 8016922 <__pow5mult+0x66>
 801690e:	f240 2171 	movw	r1, #625	; 0x271
 8016912:	4630      	mov	r0, r6
 8016914:	f7ff ff12 	bl	801673c <__i2b>
 8016918:	2300      	movs	r3, #0
 801691a:	f8c8 0008 	str.w	r0, [r8, #8]
 801691e:	4604      	mov	r4, r0
 8016920:	6003      	str	r3, [r0, #0]
 8016922:	f04f 0900 	mov.w	r9, #0
 8016926:	07eb      	lsls	r3, r5, #31
 8016928:	d50a      	bpl.n	8016940 <__pow5mult+0x84>
 801692a:	4639      	mov	r1, r7
 801692c:	4622      	mov	r2, r4
 801692e:	4630      	mov	r0, r6
 8016930:	f7ff ff1a 	bl	8016768 <__multiply>
 8016934:	4639      	mov	r1, r7
 8016936:	4680      	mov	r8, r0
 8016938:	4630      	mov	r0, r6
 801693a:	f7ff fdff 	bl	801653c <_Bfree>
 801693e:	4647      	mov	r7, r8
 8016940:	106d      	asrs	r5, r5, #1
 8016942:	d00b      	beq.n	801695c <__pow5mult+0xa0>
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	b938      	cbnz	r0, 8016958 <__pow5mult+0x9c>
 8016948:	4622      	mov	r2, r4
 801694a:	4621      	mov	r1, r4
 801694c:	4630      	mov	r0, r6
 801694e:	f7ff ff0b 	bl	8016768 <__multiply>
 8016952:	6020      	str	r0, [r4, #0]
 8016954:	f8c0 9000 	str.w	r9, [r0]
 8016958:	4604      	mov	r4, r0
 801695a:	e7e4      	b.n	8016926 <__pow5mult+0x6a>
 801695c:	4638      	mov	r0, r7
 801695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016962:	bf00      	nop
 8016964:	0801c110 	.word	0x0801c110
 8016968:	0801bf44 	.word	0x0801bf44
 801696c:	0801bfc4 	.word	0x0801bfc4

08016970 <__lshift>:
 8016970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016974:	460c      	mov	r4, r1
 8016976:	6849      	ldr	r1, [r1, #4]
 8016978:	6923      	ldr	r3, [r4, #16]
 801697a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801697e:	68a3      	ldr	r3, [r4, #8]
 8016980:	4607      	mov	r7, r0
 8016982:	4691      	mov	r9, r2
 8016984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016988:	f108 0601 	add.w	r6, r8, #1
 801698c:	42b3      	cmp	r3, r6
 801698e:	db0b      	blt.n	80169a8 <__lshift+0x38>
 8016990:	4638      	mov	r0, r7
 8016992:	f7ff fd93 	bl	80164bc <_Balloc>
 8016996:	4605      	mov	r5, r0
 8016998:	b948      	cbnz	r0, 80169ae <__lshift+0x3e>
 801699a:	4602      	mov	r2, r0
 801699c:	4b28      	ldr	r3, [pc, #160]	; (8016a40 <__lshift+0xd0>)
 801699e:	4829      	ldr	r0, [pc, #164]	; (8016a44 <__lshift+0xd4>)
 80169a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80169a4:	f001 fe9c 	bl	80186e0 <__assert_func>
 80169a8:	3101      	adds	r1, #1
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	e7ee      	b.n	801698c <__lshift+0x1c>
 80169ae:	2300      	movs	r3, #0
 80169b0:	f100 0114 	add.w	r1, r0, #20
 80169b4:	f100 0210 	add.w	r2, r0, #16
 80169b8:	4618      	mov	r0, r3
 80169ba:	4553      	cmp	r3, sl
 80169bc:	db33      	blt.n	8016a26 <__lshift+0xb6>
 80169be:	6920      	ldr	r0, [r4, #16]
 80169c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169c4:	f104 0314 	add.w	r3, r4, #20
 80169c8:	f019 091f 	ands.w	r9, r9, #31
 80169cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80169d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80169d4:	d02b      	beq.n	8016a2e <__lshift+0xbe>
 80169d6:	f1c9 0e20 	rsb	lr, r9, #32
 80169da:	468a      	mov	sl, r1
 80169dc:	2200      	movs	r2, #0
 80169de:	6818      	ldr	r0, [r3, #0]
 80169e0:	fa00 f009 	lsl.w	r0, r0, r9
 80169e4:	4310      	orrs	r0, r2
 80169e6:	f84a 0b04 	str.w	r0, [sl], #4
 80169ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80169ee:	459c      	cmp	ip, r3
 80169f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80169f4:	d8f3      	bhi.n	80169de <__lshift+0x6e>
 80169f6:	ebac 0304 	sub.w	r3, ip, r4
 80169fa:	3b15      	subs	r3, #21
 80169fc:	f023 0303 	bic.w	r3, r3, #3
 8016a00:	3304      	adds	r3, #4
 8016a02:	f104 0015 	add.w	r0, r4, #21
 8016a06:	4584      	cmp	ip, r0
 8016a08:	bf38      	it	cc
 8016a0a:	2304      	movcc	r3, #4
 8016a0c:	50ca      	str	r2, [r1, r3]
 8016a0e:	b10a      	cbz	r2, 8016a14 <__lshift+0xa4>
 8016a10:	f108 0602 	add.w	r6, r8, #2
 8016a14:	3e01      	subs	r6, #1
 8016a16:	4638      	mov	r0, r7
 8016a18:	612e      	str	r6, [r5, #16]
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	f7ff fd8e 	bl	801653c <_Bfree>
 8016a20:	4628      	mov	r0, r5
 8016a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	e7c5      	b.n	80169ba <__lshift+0x4a>
 8016a2e:	3904      	subs	r1, #4
 8016a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a38:	459c      	cmp	ip, r3
 8016a3a:	d8f9      	bhi.n	8016a30 <__lshift+0xc0>
 8016a3c:	e7ea      	b.n	8016a14 <__lshift+0xa4>
 8016a3e:	bf00      	nop
 8016a40:	0801bfb3 	.word	0x0801bfb3
 8016a44:	0801bfc4 	.word	0x0801bfc4

08016a48 <__mcmp>:
 8016a48:	b530      	push	{r4, r5, lr}
 8016a4a:	6902      	ldr	r2, [r0, #16]
 8016a4c:	690c      	ldr	r4, [r1, #16]
 8016a4e:	1b12      	subs	r2, r2, r4
 8016a50:	d10e      	bne.n	8016a70 <__mcmp+0x28>
 8016a52:	f100 0314 	add.w	r3, r0, #20
 8016a56:	3114      	adds	r1, #20
 8016a58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016a5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016a60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a68:	42a5      	cmp	r5, r4
 8016a6a:	d003      	beq.n	8016a74 <__mcmp+0x2c>
 8016a6c:	d305      	bcc.n	8016a7a <__mcmp+0x32>
 8016a6e:	2201      	movs	r2, #1
 8016a70:	4610      	mov	r0, r2
 8016a72:	bd30      	pop	{r4, r5, pc}
 8016a74:	4283      	cmp	r3, r0
 8016a76:	d3f3      	bcc.n	8016a60 <__mcmp+0x18>
 8016a78:	e7fa      	b.n	8016a70 <__mcmp+0x28>
 8016a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a7e:	e7f7      	b.n	8016a70 <__mcmp+0x28>

08016a80 <__mdiff>:
 8016a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	460c      	mov	r4, r1
 8016a86:	4606      	mov	r6, r0
 8016a88:	4611      	mov	r1, r2
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	4690      	mov	r8, r2
 8016a8e:	f7ff ffdb 	bl	8016a48 <__mcmp>
 8016a92:	1e05      	subs	r5, r0, #0
 8016a94:	d110      	bne.n	8016ab8 <__mdiff+0x38>
 8016a96:	4629      	mov	r1, r5
 8016a98:	4630      	mov	r0, r6
 8016a9a:	f7ff fd0f 	bl	80164bc <_Balloc>
 8016a9e:	b930      	cbnz	r0, 8016aae <__mdiff+0x2e>
 8016aa0:	4b3a      	ldr	r3, [pc, #232]	; (8016b8c <__mdiff+0x10c>)
 8016aa2:	4602      	mov	r2, r0
 8016aa4:	f240 2137 	movw	r1, #567	; 0x237
 8016aa8:	4839      	ldr	r0, [pc, #228]	; (8016b90 <__mdiff+0x110>)
 8016aaa:	f001 fe19 	bl	80186e0 <__assert_func>
 8016aae:	2301      	movs	r3, #1
 8016ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ab8:	bfa4      	itt	ge
 8016aba:	4643      	movge	r3, r8
 8016abc:	46a0      	movge	r8, r4
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016ac4:	bfa6      	itte	ge
 8016ac6:	461c      	movge	r4, r3
 8016ac8:	2500      	movge	r5, #0
 8016aca:	2501      	movlt	r5, #1
 8016acc:	f7ff fcf6 	bl	80164bc <_Balloc>
 8016ad0:	b920      	cbnz	r0, 8016adc <__mdiff+0x5c>
 8016ad2:	4b2e      	ldr	r3, [pc, #184]	; (8016b8c <__mdiff+0x10c>)
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	f240 2145 	movw	r1, #581	; 0x245
 8016ada:	e7e5      	b.n	8016aa8 <__mdiff+0x28>
 8016adc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016ae0:	6926      	ldr	r6, [r4, #16]
 8016ae2:	60c5      	str	r5, [r0, #12]
 8016ae4:	f104 0914 	add.w	r9, r4, #20
 8016ae8:	f108 0514 	add.w	r5, r8, #20
 8016aec:	f100 0e14 	add.w	lr, r0, #20
 8016af0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016af4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016af8:	f108 0210 	add.w	r2, r8, #16
 8016afc:	46f2      	mov	sl, lr
 8016afe:	2100      	movs	r1, #0
 8016b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b08:	fa11 f88b 	uxtah	r8, r1, fp
 8016b0c:	b299      	uxth	r1, r3
 8016b0e:	0c1b      	lsrs	r3, r3, #16
 8016b10:	eba8 0801 	sub.w	r8, r8, r1
 8016b14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b1c:	fa1f f888 	uxth.w	r8, r8
 8016b20:	1419      	asrs	r1, r3, #16
 8016b22:	454e      	cmp	r6, r9
 8016b24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016b28:	f84a 3b04 	str.w	r3, [sl], #4
 8016b2c:	d8e8      	bhi.n	8016b00 <__mdiff+0x80>
 8016b2e:	1b33      	subs	r3, r6, r4
 8016b30:	3b15      	subs	r3, #21
 8016b32:	f023 0303 	bic.w	r3, r3, #3
 8016b36:	3304      	adds	r3, #4
 8016b38:	3415      	adds	r4, #21
 8016b3a:	42a6      	cmp	r6, r4
 8016b3c:	bf38      	it	cc
 8016b3e:	2304      	movcc	r3, #4
 8016b40:	441d      	add	r5, r3
 8016b42:	4473      	add	r3, lr
 8016b44:	469e      	mov	lr, r3
 8016b46:	462e      	mov	r6, r5
 8016b48:	4566      	cmp	r6, ip
 8016b4a:	d30e      	bcc.n	8016b6a <__mdiff+0xea>
 8016b4c:	f10c 0203 	add.w	r2, ip, #3
 8016b50:	1b52      	subs	r2, r2, r5
 8016b52:	f022 0203 	bic.w	r2, r2, #3
 8016b56:	3d03      	subs	r5, #3
 8016b58:	45ac      	cmp	ip, r5
 8016b5a:	bf38      	it	cc
 8016b5c:	2200      	movcc	r2, #0
 8016b5e:	4413      	add	r3, r2
 8016b60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016b64:	b17a      	cbz	r2, 8016b86 <__mdiff+0x106>
 8016b66:	6107      	str	r7, [r0, #16]
 8016b68:	e7a4      	b.n	8016ab4 <__mdiff+0x34>
 8016b6a:	f856 8b04 	ldr.w	r8, [r6], #4
 8016b6e:	fa11 f288 	uxtah	r2, r1, r8
 8016b72:	1414      	asrs	r4, r2, #16
 8016b74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016b78:	b292      	uxth	r2, r2
 8016b7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016b7e:	f84e 2b04 	str.w	r2, [lr], #4
 8016b82:	1421      	asrs	r1, r4, #16
 8016b84:	e7e0      	b.n	8016b48 <__mdiff+0xc8>
 8016b86:	3f01      	subs	r7, #1
 8016b88:	e7ea      	b.n	8016b60 <__mdiff+0xe0>
 8016b8a:	bf00      	nop
 8016b8c:	0801bfb3 	.word	0x0801bfb3
 8016b90:	0801bfc4 	.word	0x0801bfc4

08016b94 <__ulp>:
 8016b94:	b082      	sub	sp, #8
 8016b96:	ed8d 0b00 	vstr	d0, [sp]
 8016b9a:	9a01      	ldr	r2, [sp, #4]
 8016b9c:	4b0f      	ldr	r3, [pc, #60]	; (8016bdc <__ulp+0x48>)
 8016b9e:	4013      	ands	r3, r2
 8016ba0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	dc08      	bgt.n	8016bba <__ulp+0x26>
 8016ba8:	425b      	negs	r3, r3
 8016baa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016bae:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016bb2:	da04      	bge.n	8016bbe <__ulp+0x2a>
 8016bb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016bb8:	4113      	asrs	r3, r2
 8016bba:	2200      	movs	r2, #0
 8016bbc:	e008      	b.n	8016bd0 <__ulp+0x3c>
 8016bbe:	f1a2 0314 	sub.w	r3, r2, #20
 8016bc2:	2b1e      	cmp	r3, #30
 8016bc4:	bfda      	itte	le
 8016bc6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016bca:	40da      	lsrle	r2, r3
 8016bcc:	2201      	movgt	r2, #1
 8016bce:	2300      	movs	r3, #0
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	4610      	mov	r0, r2
 8016bd4:	ec41 0b10 	vmov	d0, r0, r1
 8016bd8:	b002      	add	sp, #8
 8016bda:	4770      	bx	lr
 8016bdc:	7ff00000 	.word	0x7ff00000

08016be0 <__b2d>:
 8016be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016be4:	6906      	ldr	r6, [r0, #16]
 8016be6:	f100 0814 	add.w	r8, r0, #20
 8016bea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016bee:	1f37      	subs	r7, r6, #4
 8016bf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	f7ff fd53 	bl	80166a0 <__hi0bits>
 8016bfa:	f1c0 0320 	rsb	r3, r0, #32
 8016bfe:	280a      	cmp	r0, #10
 8016c00:	600b      	str	r3, [r1, #0]
 8016c02:	491b      	ldr	r1, [pc, #108]	; (8016c70 <__b2d+0x90>)
 8016c04:	dc15      	bgt.n	8016c32 <__b2d+0x52>
 8016c06:	f1c0 0c0b 	rsb	ip, r0, #11
 8016c0a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016c0e:	45b8      	cmp	r8, r7
 8016c10:	ea43 0501 	orr.w	r5, r3, r1
 8016c14:	bf34      	ite	cc
 8016c16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c1a:	2300      	movcs	r3, #0
 8016c1c:	3015      	adds	r0, #21
 8016c1e:	fa02 f000 	lsl.w	r0, r2, r0
 8016c22:	fa23 f30c 	lsr.w	r3, r3, ip
 8016c26:	4303      	orrs	r3, r0
 8016c28:	461c      	mov	r4, r3
 8016c2a:	ec45 4b10 	vmov	d0, r4, r5
 8016c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c32:	45b8      	cmp	r8, r7
 8016c34:	bf3a      	itte	cc
 8016c36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c3a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016c3e:	2300      	movcs	r3, #0
 8016c40:	380b      	subs	r0, #11
 8016c42:	d012      	beq.n	8016c6a <__b2d+0x8a>
 8016c44:	f1c0 0120 	rsb	r1, r0, #32
 8016c48:	fa23 f401 	lsr.w	r4, r3, r1
 8016c4c:	4082      	lsls	r2, r0
 8016c4e:	4322      	orrs	r2, r4
 8016c50:	4547      	cmp	r7, r8
 8016c52:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016c56:	bf8c      	ite	hi
 8016c58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016c5c:	2200      	movls	r2, #0
 8016c5e:	4083      	lsls	r3, r0
 8016c60:	40ca      	lsrs	r2, r1
 8016c62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016c66:	4313      	orrs	r3, r2
 8016c68:	e7de      	b.n	8016c28 <__b2d+0x48>
 8016c6a:	ea42 0501 	orr.w	r5, r2, r1
 8016c6e:	e7db      	b.n	8016c28 <__b2d+0x48>
 8016c70:	3ff00000 	.word	0x3ff00000

08016c74 <__d2b>:
 8016c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c78:	460f      	mov	r7, r1
 8016c7a:	2101      	movs	r1, #1
 8016c7c:	ec59 8b10 	vmov	r8, r9, d0
 8016c80:	4616      	mov	r6, r2
 8016c82:	f7ff fc1b 	bl	80164bc <_Balloc>
 8016c86:	4604      	mov	r4, r0
 8016c88:	b930      	cbnz	r0, 8016c98 <__d2b+0x24>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	4b24      	ldr	r3, [pc, #144]	; (8016d20 <__d2b+0xac>)
 8016c8e:	4825      	ldr	r0, [pc, #148]	; (8016d24 <__d2b+0xb0>)
 8016c90:	f240 310f 	movw	r1, #783	; 0x30f
 8016c94:	f001 fd24 	bl	80186e0 <__assert_func>
 8016c98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016c9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ca0:	bb2d      	cbnz	r5, 8016cee <__d2b+0x7a>
 8016ca2:	9301      	str	r3, [sp, #4]
 8016ca4:	f1b8 0300 	subs.w	r3, r8, #0
 8016ca8:	d026      	beq.n	8016cf8 <__d2b+0x84>
 8016caa:	4668      	mov	r0, sp
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	f7ff fd17 	bl	80166e0 <__lo0bits>
 8016cb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016cb6:	b1e8      	cbz	r0, 8016cf4 <__d2b+0x80>
 8016cb8:	f1c0 0320 	rsb	r3, r0, #32
 8016cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8016cc0:	430b      	orrs	r3, r1
 8016cc2:	40c2      	lsrs	r2, r0
 8016cc4:	6163      	str	r3, [r4, #20]
 8016cc6:	9201      	str	r2, [sp, #4]
 8016cc8:	9b01      	ldr	r3, [sp, #4]
 8016cca:	61a3      	str	r3, [r4, #24]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	bf14      	ite	ne
 8016cd0:	2202      	movne	r2, #2
 8016cd2:	2201      	moveq	r2, #1
 8016cd4:	6122      	str	r2, [r4, #16]
 8016cd6:	b1bd      	cbz	r5, 8016d08 <__d2b+0x94>
 8016cd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016cdc:	4405      	add	r5, r0
 8016cde:	603d      	str	r5, [r7, #0]
 8016ce0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016ce4:	6030      	str	r0, [r6, #0]
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	b003      	add	sp, #12
 8016cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016cf2:	e7d6      	b.n	8016ca2 <__d2b+0x2e>
 8016cf4:	6161      	str	r1, [r4, #20]
 8016cf6:	e7e7      	b.n	8016cc8 <__d2b+0x54>
 8016cf8:	a801      	add	r0, sp, #4
 8016cfa:	f7ff fcf1 	bl	80166e0 <__lo0bits>
 8016cfe:	9b01      	ldr	r3, [sp, #4]
 8016d00:	6163      	str	r3, [r4, #20]
 8016d02:	3020      	adds	r0, #32
 8016d04:	2201      	movs	r2, #1
 8016d06:	e7e5      	b.n	8016cd4 <__d2b+0x60>
 8016d08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016d0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016d10:	6038      	str	r0, [r7, #0]
 8016d12:	6918      	ldr	r0, [r3, #16]
 8016d14:	f7ff fcc4 	bl	80166a0 <__hi0bits>
 8016d18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d1c:	e7e2      	b.n	8016ce4 <__d2b+0x70>
 8016d1e:	bf00      	nop
 8016d20:	0801bfb3 	.word	0x0801bfb3
 8016d24:	0801bfc4 	.word	0x0801bfc4

08016d28 <__ratio>:
 8016d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	4688      	mov	r8, r1
 8016d2e:	4669      	mov	r1, sp
 8016d30:	4681      	mov	r9, r0
 8016d32:	f7ff ff55 	bl	8016be0 <__b2d>
 8016d36:	a901      	add	r1, sp, #4
 8016d38:	4640      	mov	r0, r8
 8016d3a:	ec55 4b10 	vmov	r4, r5, d0
 8016d3e:	f7ff ff4f 	bl	8016be0 <__b2d>
 8016d42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d4a:	eba3 0c02 	sub.w	ip, r3, r2
 8016d4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016d52:	1a9b      	subs	r3, r3, r2
 8016d54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016d58:	ec51 0b10 	vmov	r0, r1, d0
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	bfd6      	itet	le
 8016d60:	460a      	movle	r2, r1
 8016d62:	462a      	movgt	r2, r5
 8016d64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016d68:	468b      	mov	fp, r1
 8016d6a:	462f      	mov	r7, r5
 8016d6c:	bfd4      	ite	le
 8016d6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016d72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016d76:	4620      	mov	r0, r4
 8016d78:	ee10 2a10 	vmov	r2, s0
 8016d7c:	465b      	mov	r3, fp
 8016d7e:	4639      	mov	r1, r7
 8016d80:	f7e9 fd8c 	bl	800089c <__aeabi_ddiv>
 8016d84:	ec41 0b10 	vmov	d0, r0, r1
 8016d88:	b003      	add	sp, #12
 8016d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d8e <__copybits>:
 8016d8e:	3901      	subs	r1, #1
 8016d90:	b570      	push	{r4, r5, r6, lr}
 8016d92:	1149      	asrs	r1, r1, #5
 8016d94:	6914      	ldr	r4, [r2, #16]
 8016d96:	3101      	adds	r1, #1
 8016d98:	f102 0314 	add.w	r3, r2, #20
 8016d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016da4:	1f05      	subs	r5, r0, #4
 8016da6:	42a3      	cmp	r3, r4
 8016da8:	d30c      	bcc.n	8016dc4 <__copybits+0x36>
 8016daa:	1aa3      	subs	r3, r4, r2
 8016dac:	3b11      	subs	r3, #17
 8016dae:	f023 0303 	bic.w	r3, r3, #3
 8016db2:	3211      	adds	r2, #17
 8016db4:	42a2      	cmp	r2, r4
 8016db6:	bf88      	it	hi
 8016db8:	2300      	movhi	r3, #0
 8016dba:	4418      	add	r0, r3
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	4288      	cmp	r0, r1
 8016dc0:	d305      	bcc.n	8016dce <__copybits+0x40>
 8016dc2:	bd70      	pop	{r4, r5, r6, pc}
 8016dc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8016dc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8016dcc:	e7eb      	b.n	8016da6 <__copybits+0x18>
 8016dce:	f840 3b04 	str.w	r3, [r0], #4
 8016dd2:	e7f4      	b.n	8016dbe <__copybits+0x30>

08016dd4 <__any_on>:
 8016dd4:	f100 0214 	add.w	r2, r0, #20
 8016dd8:	6900      	ldr	r0, [r0, #16]
 8016dda:	114b      	asrs	r3, r1, #5
 8016ddc:	4298      	cmp	r0, r3
 8016dde:	b510      	push	{r4, lr}
 8016de0:	db11      	blt.n	8016e06 <__any_on+0x32>
 8016de2:	dd0a      	ble.n	8016dfa <__any_on+0x26>
 8016de4:	f011 011f 	ands.w	r1, r1, #31
 8016de8:	d007      	beq.n	8016dfa <__any_on+0x26>
 8016dea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016dee:	fa24 f001 	lsr.w	r0, r4, r1
 8016df2:	fa00 f101 	lsl.w	r1, r0, r1
 8016df6:	428c      	cmp	r4, r1
 8016df8:	d10b      	bne.n	8016e12 <__any_on+0x3e>
 8016dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d803      	bhi.n	8016e0a <__any_on+0x36>
 8016e02:	2000      	movs	r0, #0
 8016e04:	bd10      	pop	{r4, pc}
 8016e06:	4603      	mov	r3, r0
 8016e08:	e7f7      	b.n	8016dfa <__any_on+0x26>
 8016e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e0e:	2900      	cmp	r1, #0
 8016e10:	d0f5      	beq.n	8016dfe <__any_on+0x2a>
 8016e12:	2001      	movs	r0, #1
 8016e14:	e7f6      	b.n	8016e04 <__any_on+0x30>

08016e16 <sulp>:
 8016e16:	b570      	push	{r4, r5, r6, lr}
 8016e18:	4604      	mov	r4, r0
 8016e1a:	460d      	mov	r5, r1
 8016e1c:	ec45 4b10 	vmov	d0, r4, r5
 8016e20:	4616      	mov	r6, r2
 8016e22:	f7ff feb7 	bl	8016b94 <__ulp>
 8016e26:	ec51 0b10 	vmov	r0, r1, d0
 8016e2a:	b17e      	cbz	r6, 8016e4c <sulp+0x36>
 8016e2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	dd09      	ble.n	8016e4c <sulp+0x36>
 8016e38:	051b      	lsls	r3, r3, #20
 8016e3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e3e:	2400      	movs	r4, #0
 8016e40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016e44:	4622      	mov	r2, r4
 8016e46:	462b      	mov	r3, r5
 8016e48:	f7e9 fbfe 	bl	8000648 <__aeabi_dmul>
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016e50 <_strtod_l>:
 8016e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e54:	ed2d 8b02 	vpush	{d8}
 8016e58:	b09b      	sub	sp, #108	; 0x6c
 8016e5a:	4604      	mov	r4, r0
 8016e5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8016e5e:	2200      	movs	r2, #0
 8016e60:	9216      	str	r2, [sp, #88]	; 0x58
 8016e62:	460d      	mov	r5, r1
 8016e64:	f04f 0800 	mov.w	r8, #0
 8016e68:	f04f 0900 	mov.w	r9, #0
 8016e6c:	460a      	mov	r2, r1
 8016e6e:	9215      	str	r2, [sp, #84]	; 0x54
 8016e70:	7811      	ldrb	r1, [r2, #0]
 8016e72:	292b      	cmp	r1, #43	; 0x2b
 8016e74:	d04c      	beq.n	8016f10 <_strtod_l+0xc0>
 8016e76:	d83a      	bhi.n	8016eee <_strtod_l+0x9e>
 8016e78:	290d      	cmp	r1, #13
 8016e7a:	d834      	bhi.n	8016ee6 <_strtod_l+0x96>
 8016e7c:	2908      	cmp	r1, #8
 8016e7e:	d834      	bhi.n	8016eea <_strtod_l+0x9a>
 8016e80:	2900      	cmp	r1, #0
 8016e82:	d03d      	beq.n	8016f00 <_strtod_l+0xb0>
 8016e84:	2200      	movs	r2, #0
 8016e86:	920a      	str	r2, [sp, #40]	; 0x28
 8016e88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016e8a:	7832      	ldrb	r2, [r6, #0]
 8016e8c:	2a30      	cmp	r2, #48	; 0x30
 8016e8e:	f040 80b4 	bne.w	8016ffa <_strtod_l+0x1aa>
 8016e92:	7872      	ldrb	r2, [r6, #1]
 8016e94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016e98:	2a58      	cmp	r2, #88	; 0x58
 8016e9a:	d170      	bne.n	8016f7e <_strtod_l+0x12e>
 8016e9c:	9302      	str	r3, [sp, #8]
 8016e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ea0:	9301      	str	r3, [sp, #4]
 8016ea2:	ab16      	add	r3, sp, #88	; 0x58
 8016ea4:	9300      	str	r3, [sp, #0]
 8016ea6:	4a8e      	ldr	r2, [pc, #568]	; (80170e0 <_strtod_l+0x290>)
 8016ea8:	ab17      	add	r3, sp, #92	; 0x5c
 8016eaa:	a915      	add	r1, sp, #84	; 0x54
 8016eac:	4620      	mov	r0, r4
 8016eae:	f001 fcb3 	bl	8018818 <__gethex>
 8016eb2:	f010 070f 	ands.w	r7, r0, #15
 8016eb6:	4605      	mov	r5, r0
 8016eb8:	d005      	beq.n	8016ec6 <_strtod_l+0x76>
 8016eba:	2f06      	cmp	r7, #6
 8016ebc:	d12a      	bne.n	8016f14 <_strtod_l+0xc4>
 8016ebe:	3601      	adds	r6, #1
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	9615      	str	r6, [sp, #84]	; 0x54
 8016ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8016ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f040 857f 	bne.w	80179cc <_strtod_l+0xb7c>
 8016ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ed0:	b1db      	cbz	r3, 8016f0a <_strtod_l+0xba>
 8016ed2:	4642      	mov	r2, r8
 8016ed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016ed8:	ec43 2b10 	vmov	d0, r2, r3
 8016edc:	b01b      	add	sp, #108	; 0x6c
 8016ede:	ecbd 8b02 	vpop	{d8}
 8016ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee6:	2920      	cmp	r1, #32
 8016ee8:	d1cc      	bne.n	8016e84 <_strtod_l+0x34>
 8016eea:	3201      	adds	r2, #1
 8016eec:	e7bf      	b.n	8016e6e <_strtod_l+0x1e>
 8016eee:	292d      	cmp	r1, #45	; 0x2d
 8016ef0:	d1c8      	bne.n	8016e84 <_strtod_l+0x34>
 8016ef2:	2101      	movs	r1, #1
 8016ef4:	910a      	str	r1, [sp, #40]	; 0x28
 8016ef6:	1c51      	adds	r1, r2, #1
 8016ef8:	9115      	str	r1, [sp, #84]	; 0x54
 8016efa:	7852      	ldrb	r2, [r2, #1]
 8016efc:	2a00      	cmp	r2, #0
 8016efe:	d1c3      	bne.n	8016e88 <_strtod_l+0x38>
 8016f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f02:	9515      	str	r5, [sp, #84]	; 0x54
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f040 855f 	bne.w	80179c8 <_strtod_l+0xb78>
 8016f0a:	4642      	mov	r2, r8
 8016f0c:	464b      	mov	r3, r9
 8016f0e:	e7e3      	b.n	8016ed8 <_strtod_l+0x88>
 8016f10:	2100      	movs	r1, #0
 8016f12:	e7ef      	b.n	8016ef4 <_strtod_l+0xa4>
 8016f14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f16:	b13a      	cbz	r2, 8016f28 <_strtod_l+0xd8>
 8016f18:	2135      	movs	r1, #53	; 0x35
 8016f1a:	a818      	add	r0, sp, #96	; 0x60
 8016f1c:	f7ff ff37 	bl	8016d8e <__copybits>
 8016f20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7ff fb0a 	bl	801653c <_Bfree>
 8016f28:	3f01      	subs	r7, #1
 8016f2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f2c:	2f04      	cmp	r7, #4
 8016f2e:	d806      	bhi.n	8016f3e <_strtod_l+0xee>
 8016f30:	e8df f007 	tbb	[pc, r7]
 8016f34:	201d0314 	.word	0x201d0314
 8016f38:	14          	.byte	0x14
 8016f39:	00          	.byte	0x00
 8016f3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8016f3e:	05e9      	lsls	r1, r5, #23
 8016f40:	bf48      	it	mi
 8016f42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8016f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f4a:	0d1b      	lsrs	r3, r3, #20
 8016f4c:	051b      	lsls	r3, r3, #20
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1b9      	bne.n	8016ec6 <_strtod_l+0x76>
 8016f52:	f7fe faf7 	bl	8015544 <__errno>
 8016f56:	2322      	movs	r3, #34	; 0x22
 8016f58:	6003      	str	r3, [r0, #0]
 8016f5a:	e7b4      	b.n	8016ec6 <_strtod_l+0x76>
 8016f5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016f60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016f64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016f68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016f6c:	e7e7      	b.n	8016f3e <_strtod_l+0xee>
 8016f6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80170e8 <_strtod_l+0x298>
 8016f72:	e7e4      	b.n	8016f3e <_strtod_l+0xee>
 8016f74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016f78:	f04f 38ff 	mov.w	r8, #4294967295
 8016f7c:	e7df      	b.n	8016f3e <_strtod_l+0xee>
 8016f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f80:	1c5a      	adds	r2, r3, #1
 8016f82:	9215      	str	r2, [sp, #84]	; 0x54
 8016f84:	785b      	ldrb	r3, [r3, #1]
 8016f86:	2b30      	cmp	r3, #48	; 0x30
 8016f88:	d0f9      	beq.n	8016f7e <_strtod_l+0x12e>
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d09b      	beq.n	8016ec6 <_strtod_l+0x76>
 8016f8e:	2301      	movs	r3, #1
 8016f90:	f04f 0a00 	mov.w	sl, #0
 8016f94:	9304      	str	r3, [sp, #16]
 8016f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016f9e:	46d3      	mov	fp, sl
 8016fa0:	220a      	movs	r2, #10
 8016fa2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016fa4:	7806      	ldrb	r6, [r0, #0]
 8016fa6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016faa:	b2d9      	uxtb	r1, r3
 8016fac:	2909      	cmp	r1, #9
 8016fae:	d926      	bls.n	8016ffe <_strtod_l+0x1ae>
 8016fb0:	494c      	ldr	r1, [pc, #304]	; (80170e4 <_strtod_l+0x294>)
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	f7fe fa13 	bl	80153de <strncmp>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d030      	beq.n	801701e <_strtod_l+0x1ce>
 8016fbc:	2000      	movs	r0, #0
 8016fbe:	4632      	mov	r2, r6
 8016fc0:	9005      	str	r0, [sp, #20]
 8016fc2:	465e      	mov	r6, fp
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	2a65      	cmp	r2, #101	; 0x65
 8016fc8:	d001      	beq.n	8016fce <_strtod_l+0x17e>
 8016fca:	2a45      	cmp	r2, #69	; 0x45
 8016fcc:	d113      	bne.n	8016ff6 <_strtod_l+0x1a6>
 8016fce:	b91e      	cbnz	r6, 8016fd8 <_strtod_l+0x188>
 8016fd0:	9a04      	ldr	r2, [sp, #16]
 8016fd2:	4302      	orrs	r2, r0
 8016fd4:	d094      	beq.n	8016f00 <_strtod_l+0xb0>
 8016fd6:	2600      	movs	r6, #0
 8016fd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016fda:	1c6a      	adds	r2, r5, #1
 8016fdc:	9215      	str	r2, [sp, #84]	; 0x54
 8016fde:	786a      	ldrb	r2, [r5, #1]
 8016fe0:	2a2b      	cmp	r2, #43	; 0x2b
 8016fe2:	d074      	beq.n	80170ce <_strtod_l+0x27e>
 8016fe4:	2a2d      	cmp	r2, #45	; 0x2d
 8016fe6:	d078      	beq.n	80170da <_strtod_l+0x28a>
 8016fe8:	f04f 0c00 	mov.w	ip, #0
 8016fec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016ff0:	2909      	cmp	r1, #9
 8016ff2:	d97f      	bls.n	80170f4 <_strtod_l+0x2a4>
 8016ff4:	9515      	str	r5, [sp, #84]	; 0x54
 8016ff6:	2700      	movs	r7, #0
 8016ff8:	e09e      	b.n	8017138 <_strtod_l+0x2e8>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	e7c8      	b.n	8016f90 <_strtod_l+0x140>
 8016ffe:	f1bb 0f08 	cmp.w	fp, #8
 8017002:	bfd8      	it	le
 8017004:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017006:	f100 0001 	add.w	r0, r0, #1
 801700a:	bfda      	itte	le
 801700c:	fb02 3301 	mlale	r3, r2, r1, r3
 8017010:	9309      	strle	r3, [sp, #36]	; 0x24
 8017012:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017016:	f10b 0b01 	add.w	fp, fp, #1
 801701a:	9015      	str	r0, [sp, #84]	; 0x54
 801701c:	e7c1      	b.n	8016fa2 <_strtod_l+0x152>
 801701e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017020:	1c5a      	adds	r2, r3, #1
 8017022:	9215      	str	r2, [sp, #84]	; 0x54
 8017024:	785a      	ldrb	r2, [r3, #1]
 8017026:	f1bb 0f00 	cmp.w	fp, #0
 801702a:	d037      	beq.n	801709c <_strtod_l+0x24c>
 801702c:	9005      	str	r0, [sp, #20]
 801702e:	465e      	mov	r6, fp
 8017030:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017034:	2b09      	cmp	r3, #9
 8017036:	d912      	bls.n	801705e <_strtod_l+0x20e>
 8017038:	2301      	movs	r3, #1
 801703a:	e7c4      	b.n	8016fc6 <_strtod_l+0x176>
 801703c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801703e:	1c5a      	adds	r2, r3, #1
 8017040:	9215      	str	r2, [sp, #84]	; 0x54
 8017042:	785a      	ldrb	r2, [r3, #1]
 8017044:	3001      	adds	r0, #1
 8017046:	2a30      	cmp	r2, #48	; 0x30
 8017048:	d0f8      	beq.n	801703c <_strtod_l+0x1ec>
 801704a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801704e:	2b08      	cmp	r3, #8
 8017050:	f200 84c1 	bhi.w	80179d6 <_strtod_l+0xb86>
 8017054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017056:	9005      	str	r0, [sp, #20]
 8017058:	2000      	movs	r0, #0
 801705a:	930b      	str	r3, [sp, #44]	; 0x2c
 801705c:	4606      	mov	r6, r0
 801705e:	3a30      	subs	r2, #48	; 0x30
 8017060:	f100 0301 	add.w	r3, r0, #1
 8017064:	d014      	beq.n	8017090 <_strtod_l+0x240>
 8017066:	9905      	ldr	r1, [sp, #20]
 8017068:	4419      	add	r1, r3
 801706a:	9105      	str	r1, [sp, #20]
 801706c:	4633      	mov	r3, r6
 801706e:	eb00 0c06 	add.w	ip, r0, r6
 8017072:	210a      	movs	r1, #10
 8017074:	4563      	cmp	r3, ip
 8017076:	d113      	bne.n	80170a0 <_strtod_l+0x250>
 8017078:	1833      	adds	r3, r6, r0
 801707a:	2b08      	cmp	r3, #8
 801707c:	f106 0601 	add.w	r6, r6, #1
 8017080:	4406      	add	r6, r0
 8017082:	dc1a      	bgt.n	80170ba <_strtod_l+0x26a>
 8017084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017086:	230a      	movs	r3, #10
 8017088:	fb03 2301 	mla	r3, r3, r1, r2
 801708c:	9309      	str	r3, [sp, #36]	; 0x24
 801708e:	2300      	movs	r3, #0
 8017090:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017092:	1c51      	adds	r1, r2, #1
 8017094:	9115      	str	r1, [sp, #84]	; 0x54
 8017096:	7852      	ldrb	r2, [r2, #1]
 8017098:	4618      	mov	r0, r3
 801709a:	e7c9      	b.n	8017030 <_strtod_l+0x1e0>
 801709c:	4658      	mov	r0, fp
 801709e:	e7d2      	b.n	8017046 <_strtod_l+0x1f6>
 80170a0:	2b08      	cmp	r3, #8
 80170a2:	f103 0301 	add.w	r3, r3, #1
 80170a6:	dc03      	bgt.n	80170b0 <_strtod_l+0x260>
 80170a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80170aa:	434f      	muls	r7, r1
 80170ac:	9709      	str	r7, [sp, #36]	; 0x24
 80170ae:	e7e1      	b.n	8017074 <_strtod_l+0x224>
 80170b0:	2b10      	cmp	r3, #16
 80170b2:	bfd8      	it	le
 80170b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80170b8:	e7dc      	b.n	8017074 <_strtod_l+0x224>
 80170ba:	2e10      	cmp	r6, #16
 80170bc:	bfdc      	itt	le
 80170be:	230a      	movle	r3, #10
 80170c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80170c4:	e7e3      	b.n	801708e <_strtod_l+0x23e>
 80170c6:	2300      	movs	r3, #0
 80170c8:	9305      	str	r3, [sp, #20]
 80170ca:	2301      	movs	r3, #1
 80170cc:	e780      	b.n	8016fd0 <_strtod_l+0x180>
 80170ce:	f04f 0c00 	mov.w	ip, #0
 80170d2:	1caa      	adds	r2, r5, #2
 80170d4:	9215      	str	r2, [sp, #84]	; 0x54
 80170d6:	78aa      	ldrb	r2, [r5, #2]
 80170d8:	e788      	b.n	8016fec <_strtod_l+0x19c>
 80170da:	f04f 0c01 	mov.w	ip, #1
 80170de:	e7f8      	b.n	80170d2 <_strtod_l+0x282>
 80170e0:	0801c120 	.word	0x0801c120
 80170e4:	0801c11c 	.word	0x0801c11c
 80170e8:	7ff00000 	.word	0x7ff00000
 80170ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170ee:	1c51      	adds	r1, r2, #1
 80170f0:	9115      	str	r1, [sp, #84]	; 0x54
 80170f2:	7852      	ldrb	r2, [r2, #1]
 80170f4:	2a30      	cmp	r2, #48	; 0x30
 80170f6:	d0f9      	beq.n	80170ec <_strtod_l+0x29c>
 80170f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80170fc:	2908      	cmp	r1, #8
 80170fe:	f63f af7a 	bhi.w	8016ff6 <_strtod_l+0x1a6>
 8017102:	3a30      	subs	r2, #48	; 0x30
 8017104:	9208      	str	r2, [sp, #32]
 8017106:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017108:	920c      	str	r2, [sp, #48]	; 0x30
 801710a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801710c:	1c57      	adds	r7, r2, #1
 801710e:	9715      	str	r7, [sp, #84]	; 0x54
 8017110:	7852      	ldrb	r2, [r2, #1]
 8017112:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017116:	f1be 0f09 	cmp.w	lr, #9
 801711a:	d938      	bls.n	801718e <_strtod_l+0x33e>
 801711c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801711e:	1a7f      	subs	r7, r7, r1
 8017120:	2f08      	cmp	r7, #8
 8017122:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017126:	dc03      	bgt.n	8017130 <_strtod_l+0x2e0>
 8017128:	9908      	ldr	r1, [sp, #32]
 801712a:	428f      	cmp	r7, r1
 801712c:	bfa8      	it	ge
 801712e:	460f      	movge	r7, r1
 8017130:	f1bc 0f00 	cmp.w	ip, #0
 8017134:	d000      	beq.n	8017138 <_strtod_l+0x2e8>
 8017136:	427f      	negs	r7, r7
 8017138:	2e00      	cmp	r6, #0
 801713a:	d14f      	bne.n	80171dc <_strtod_l+0x38c>
 801713c:	9904      	ldr	r1, [sp, #16]
 801713e:	4301      	orrs	r1, r0
 8017140:	f47f aec1 	bne.w	8016ec6 <_strtod_l+0x76>
 8017144:	2b00      	cmp	r3, #0
 8017146:	f47f aedb 	bne.w	8016f00 <_strtod_l+0xb0>
 801714a:	2a69      	cmp	r2, #105	; 0x69
 801714c:	d029      	beq.n	80171a2 <_strtod_l+0x352>
 801714e:	dc26      	bgt.n	801719e <_strtod_l+0x34e>
 8017150:	2a49      	cmp	r2, #73	; 0x49
 8017152:	d026      	beq.n	80171a2 <_strtod_l+0x352>
 8017154:	2a4e      	cmp	r2, #78	; 0x4e
 8017156:	f47f aed3 	bne.w	8016f00 <_strtod_l+0xb0>
 801715a:	499b      	ldr	r1, [pc, #620]	; (80173c8 <_strtod_l+0x578>)
 801715c:	a815      	add	r0, sp, #84	; 0x54
 801715e:	f001 fd9b 	bl	8018c98 <__match>
 8017162:	2800      	cmp	r0, #0
 8017164:	f43f aecc 	beq.w	8016f00 <_strtod_l+0xb0>
 8017168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	2b28      	cmp	r3, #40	; 0x28
 801716e:	d12f      	bne.n	80171d0 <_strtod_l+0x380>
 8017170:	4996      	ldr	r1, [pc, #600]	; (80173cc <_strtod_l+0x57c>)
 8017172:	aa18      	add	r2, sp, #96	; 0x60
 8017174:	a815      	add	r0, sp, #84	; 0x54
 8017176:	f001 fda3 	bl	8018cc0 <__hexnan>
 801717a:	2805      	cmp	r0, #5
 801717c:	d128      	bne.n	80171d0 <_strtod_l+0x380>
 801717e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017180:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017184:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017188:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801718c:	e69b      	b.n	8016ec6 <_strtod_l+0x76>
 801718e:	9f08      	ldr	r7, [sp, #32]
 8017190:	210a      	movs	r1, #10
 8017192:	fb01 2107 	mla	r1, r1, r7, r2
 8017196:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801719a:	9208      	str	r2, [sp, #32]
 801719c:	e7b5      	b.n	801710a <_strtod_l+0x2ba>
 801719e:	2a6e      	cmp	r2, #110	; 0x6e
 80171a0:	e7d9      	b.n	8017156 <_strtod_l+0x306>
 80171a2:	498b      	ldr	r1, [pc, #556]	; (80173d0 <_strtod_l+0x580>)
 80171a4:	a815      	add	r0, sp, #84	; 0x54
 80171a6:	f001 fd77 	bl	8018c98 <__match>
 80171aa:	2800      	cmp	r0, #0
 80171ac:	f43f aea8 	beq.w	8016f00 <_strtod_l+0xb0>
 80171b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171b2:	4988      	ldr	r1, [pc, #544]	; (80173d4 <_strtod_l+0x584>)
 80171b4:	3b01      	subs	r3, #1
 80171b6:	a815      	add	r0, sp, #84	; 0x54
 80171b8:	9315      	str	r3, [sp, #84]	; 0x54
 80171ba:	f001 fd6d 	bl	8018c98 <__match>
 80171be:	b910      	cbnz	r0, 80171c6 <_strtod_l+0x376>
 80171c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171c2:	3301      	adds	r3, #1
 80171c4:	9315      	str	r3, [sp, #84]	; 0x54
 80171c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80173e4 <_strtod_l+0x594>
 80171ca:	f04f 0800 	mov.w	r8, #0
 80171ce:	e67a      	b.n	8016ec6 <_strtod_l+0x76>
 80171d0:	4881      	ldr	r0, [pc, #516]	; (80173d8 <_strtod_l+0x588>)
 80171d2:	f001 fa7d 	bl	80186d0 <nan>
 80171d6:	ec59 8b10 	vmov	r8, r9, d0
 80171da:	e674      	b.n	8016ec6 <_strtod_l+0x76>
 80171dc:	9b05      	ldr	r3, [sp, #20]
 80171de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171e0:	1afb      	subs	r3, r7, r3
 80171e2:	f1bb 0f00 	cmp.w	fp, #0
 80171e6:	bf08      	it	eq
 80171e8:	46b3      	moveq	fp, r6
 80171ea:	2e10      	cmp	r6, #16
 80171ec:	9308      	str	r3, [sp, #32]
 80171ee:	4635      	mov	r5, r6
 80171f0:	bfa8      	it	ge
 80171f2:	2510      	movge	r5, #16
 80171f4:	f7e9 f9ae 	bl	8000554 <__aeabi_ui2d>
 80171f8:	2e09      	cmp	r6, #9
 80171fa:	4680      	mov	r8, r0
 80171fc:	4689      	mov	r9, r1
 80171fe:	dd13      	ble.n	8017228 <_strtod_l+0x3d8>
 8017200:	4b76      	ldr	r3, [pc, #472]	; (80173dc <_strtod_l+0x58c>)
 8017202:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017206:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801720a:	f7e9 fa1d 	bl	8000648 <__aeabi_dmul>
 801720e:	4680      	mov	r8, r0
 8017210:	4650      	mov	r0, sl
 8017212:	4689      	mov	r9, r1
 8017214:	f7e9 f99e 	bl	8000554 <__aeabi_ui2d>
 8017218:	4602      	mov	r2, r0
 801721a:	460b      	mov	r3, r1
 801721c:	4640      	mov	r0, r8
 801721e:	4649      	mov	r1, r9
 8017220:	f7e9 f85c 	bl	80002dc <__adddf3>
 8017224:	4680      	mov	r8, r0
 8017226:	4689      	mov	r9, r1
 8017228:	2e0f      	cmp	r6, #15
 801722a:	dc38      	bgt.n	801729e <_strtod_l+0x44e>
 801722c:	9b08      	ldr	r3, [sp, #32]
 801722e:	2b00      	cmp	r3, #0
 8017230:	f43f ae49 	beq.w	8016ec6 <_strtod_l+0x76>
 8017234:	dd24      	ble.n	8017280 <_strtod_l+0x430>
 8017236:	2b16      	cmp	r3, #22
 8017238:	dc0b      	bgt.n	8017252 <_strtod_l+0x402>
 801723a:	4968      	ldr	r1, [pc, #416]	; (80173dc <_strtod_l+0x58c>)
 801723c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017244:	4642      	mov	r2, r8
 8017246:	464b      	mov	r3, r9
 8017248:	f7e9 f9fe 	bl	8000648 <__aeabi_dmul>
 801724c:	4680      	mov	r8, r0
 801724e:	4689      	mov	r9, r1
 8017250:	e639      	b.n	8016ec6 <_strtod_l+0x76>
 8017252:	9a08      	ldr	r2, [sp, #32]
 8017254:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8017258:	4293      	cmp	r3, r2
 801725a:	db20      	blt.n	801729e <_strtod_l+0x44e>
 801725c:	4c5f      	ldr	r4, [pc, #380]	; (80173dc <_strtod_l+0x58c>)
 801725e:	f1c6 060f 	rsb	r6, r6, #15
 8017262:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8017266:	4642      	mov	r2, r8
 8017268:	464b      	mov	r3, r9
 801726a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801726e:	f7e9 f9eb 	bl	8000648 <__aeabi_dmul>
 8017272:	9b08      	ldr	r3, [sp, #32]
 8017274:	1b9e      	subs	r6, r3, r6
 8017276:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801727a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801727e:	e7e3      	b.n	8017248 <_strtod_l+0x3f8>
 8017280:	9b08      	ldr	r3, [sp, #32]
 8017282:	3316      	adds	r3, #22
 8017284:	db0b      	blt.n	801729e <_strtod_l+0x44e>
 8017286:	9b05      	ldr	r3, [sp, #20]
 8017288:	1bdf      	subs	r7, r3, r7
 801728a:	4b54      	ldr	r3, [pc, #336]	; (80173dc <_strtod_l+0x58c>)
 801728c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8017290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017294:	4640      	mov	r0, r8
 8017296:	4649      	mov	r1, r9
 8017298:	f7e9 fb00 	bl	800089c <__aeabi_ddiv>
 801729c:	e7d6      	b.n	801724c <_strtod_l+0x3fc>
 801729e:	9b08      	ldr	r3, [sp, #32]
 80172a0:	1b75      	subs	r5, r6, r5
 80172a2:	441d      	add	r5, r3
 80172a4:	2d00      	cmp	r5, #0
 80172a6:	dd70      	ble.n	801738a <_strtod_l+0x53a>
 80172a8:	f015 030f 	ands.w	r3, r5, #15
 80172ac:	d00a      	beq.n	80172c4 <_strtod_l+0x474>
 80172ae:	494b      	ldr	r1, [pc, #300]	; (80173dc <_strtod_l+0x58c>)
 80172b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80172b4:	4642      	mov	r2, r8
 80172b6:	464b      	mov	r3, r9
 80172b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172bc:	f7e9 f9c4 	bl	8000648 <__aeabi_dmul>
 80172c0:	4680      	mov	r8, r0
 80172c2:	4689      	mov	r9, r1
 80172c4:	f035 050f 	bics.w	r5, r5, #15
 80172c8:	d04d      	beq.n	8017366 <_strtod_l+0x516>
 80172ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80172ce:	dd22      	ble.n	8017316 <_strtod_l+0x4c6>
 80172d0:	2500      	movs	r5, #0
 80172d2:	46ab      	mov	fp, r5
 80172d4:	9509      	str	r5, [sp, #36]	; 0x24
 80172d6:	9505      	str	r5, [sp, #20]
 80172d8:	2322      	movs	r3, #34	; 0x22
 80172da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80173e4 <_strtod_l+0x594>
 80172de:	6023      	str	r3, [r4, #0]
 80172e0:	f04f 0800 	mov.w	r8, #0
 80172e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f43f aded 	beq.w	8016ec6 <_strtod_l+0x76>
 80172ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80172ee:	4620      	mov	r0, r4
 80172f0:	f7ff f924 	bl	801653c <_Bfree>
 80172f4:	9905      	ldr	r1, [sp, #20]
 80172f6:	4620      	mov	r0, r4
 80172f8:	f7ff f920 	bl	801653c <_Bfree>
 80172fc:	4659      	mov	r1, fp
 80172fe:	4620      	mov	r0, r4
 8017300:	f7ff f91c 	bl	801653c <_Bfree>
 8017304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017306:	4620      	mov	r0, r4
 8017308:	f7ff f918 	bl	801653c <_Bfree>
 801730c:	4629      	mov	r1, r5
 801730e:	4620      	mov	r0, r4
 8017310:	f7ff f914 	bl	801653c <_Bfree>
 8017314:	e5d7      	b.n	8016ec6 <_strtod_l+0x76>
 8017316:	4b32      	ldr	r3, [pc, #200]	; (80173e0 <_strtod_l+0x590>)
 8017318:	9304      	str	r3, [sp, #16]
 801731a:	2300      	movs	r3, #0
 801731c:	112d      	asrs	r5, r5, #4
 801731e:	4640      	mov	r0, r8
 8017320:	4649      	mov	r1, r9
 8017322:	469a      	mov	sl, r3
 8017324:	2d01      	cmp	r5, #1
 8017326:	dc21      	bgt.n	801736c <_strtod_l+0x51c>
 8017328:	b10b      	cbz	r3, 801732e <_strtod_l+0x4de>
 801732a:	4680      	mov	r8, r0
 801732c:	4689      	mov	r9, r1
 801732e:	492c      	ldr	r1, [pc, #176]	; (80173e0 <_strtod_l+0x590>)
 8017330:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017334:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017338:	4642      	mov	r2, r8
 801733a:	464b      	mov	r3, r9
 801733c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017340:	f7e9 f982 	bl	8000648 <__aeabi_dmul>
 8017344:	4b27      	ldr	r3, [pc, #156]	; (80173e4 <_strtod_l+0x594>)
 8017346:	460a      	mov	r2, r1
 8017348:	400b      	ands	r3, r1
 801734a:	4927      	ldr	r1, [pc, #156]	; (80173e8 <_strtod_l+0x598>)
 801734c:	428b      	cmp	r3, r1
 801734e:	4680      	mov	r8, r0
 8017350:	d8be      	bhi.n	80172d0 <_strtod_l+0x480>
 8017352:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017356:	428b      	cmp	r3, r1
 8017358:	bf86      	itte	hi
 801735a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80173ec <_strtod_l+0x59c>
 801735e:	f04f 38ff 	movhi.w	r8, #4294967295
 8017362:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8017366:	2300      	movs	r3, #0
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	e07b      	b.n	8017464 <_strtod_l+0x614>
 801736c:	07ea      	lsls	r2, r5, #31
 801736e:	d505      	bpl.n	801737c <_strtod_l+0x52c>
 8017370:	9b04      	ldr	r3, [sp, #16]
 8017372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017376:	f7e9 f967 	bl	8000648 <__aeabi_dmul>
 801737a:	2301      	movs	r3, #1
 801737c:	9a04      	ldr	r2, [sp, #16]
 801737e:	3208      	adds	r2, #8
 8017380:	f10a 0a01 	add.w	sl, sl, #1
 8017384:	106d      	asrs	r5, r5, #1
 8017386:	9204      	str	r2, [sp, #16]
 8017388:	e7cc      	b.n	8017324 <_strtod_l+0x4d4>
 801738a:	d0ec      	beq.n	8017366 <_strtod_l+0x516>
 801738c:	426d      	negs	r5, r5
 801738e:	f015 020f 	ands.w	r2, r5, #15
 8017392:	d00a      	beq.n	80173aa <_strtod_l+0x55a>
 8017394:	4b11      	ldr	r3, [pc, #68]	; (80173dc <_strtod_l+0x58c>)
 8017396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801739a:	4640      	mov	r0, r8
 801739c:	4649      	mov	r1, r9
 801739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a2:	f7e9 fa7b 	bl	800089c <__aeabi_ddiv>
 80173a6:	4680      	mov	r8, r0
 80173a8:	4689      	mov	r9, r1
 80173aa:	112d      	asrs	r5, r5, #4
 80173ac:	d0db      	beq.n	8017366 <_strtod_l+0x516>
 80173ae:	2d1f      	cmp	r5, #31
 80173b0:	dd1e      	ble.n	80173f0 <_strtod_l+0x5a0>
 80173b2:	2500      	movs	r5, #0
 80173b4:	46ab      	mov	fp, r5
 80173b6:	9509      	str	r5, [sp, #36]	; 0x24
 80173b8:	9505      	str	r5, [sp, #20]
 80173ba:	2322      	movs	r3, #34	; 0x22
 80173bc:	f04f 0800 	mov.w	r8, #0
 80173c0:	f04f 0900 	mov.w	r9, #0
 80173c4:	6023      	str	r3, [r4, #0]
 80173c6:	e78d      	b.n	80172e4 <_strtod_l+0x494>
 80173c8:	0801bf0d 	.word	0x0801bf0d
 80173cc:	0801c134 	.word	0x0801c134
 80173d0:	0801bf05 	.word	0x0801bf05
 80173d4:	0801bf3a 	.word	0x0801bf3a
 80173d8:	0801c2e0 	.word	0x0801c2e0
 80173dc:	0801c048 	.word	0x0801c048
 80173e0:	0801c020 	.word	0x0801c020
 80173e4:	7ff00000 	.word	0x7ff00000
 80173e8:	7ca00000 	.word	0x7ca00000
 80173ec:	7fefffff 	.word	0x7fefffff
 80173f0:	f015 0310 	ands.w	r3, r5, #16
 80173f4:	bf18      	it	ne
 80173f6:	236a      	movne	r3, #106	; 0x6a
 80173f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801779c <_strtod_l+0x94c>
 80173fc:	9304      	str	r3, [sp, #16]
 80173fe:	4640      	mov	r0, r8
 8017400:	4649      	mov	r1, r9
 8017402:	2300      	movs	r3, #0
 8017404:	07ea      	lsls	r2, r5, #31
 8017406:	d504      	bpl.n	8017412 <_strtod_l+0x5c2>
 8017408:	e9da 2300 	ldrd	r2, r3, [sl]
 801740c:	f7e9 f91c 	bl	8000648 <__aeabi_dmul>
 8017410:	2301      	movs	r3, #1
 8017412:	106d      	asrs	r5, r5, #1
 8017414:	f10a 0a08 	add.w	sl, sl, #8
 8017418:	d1f4      	bne.n	8017404 <_strtod_l+0x5b4>
 801741a:	b10b      	cbz	r3, 8017420 <_strtod_l+0x5d0>
 801741c:	4680      	mov	r8, r0
 801741e:	4689      	mov	r9, r1
 8017420:	9b04      	ldr	r3, [sp, #16]
 8017422:	b1bb      	cbz	r3, 8017454 <_strtod_l+0x604>
 8017424:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8017428:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801742c:	2b00      	cmp	r3, #0
 801742e:	4649      	mov	r1, r9
 8017430:	dd10      	ble.n	8017454 <_strtod_l+0x604>
 8017432:	2b1f      	cmp	r3, #31
 8017434:	f340 811e 	ble.w	8017674 <_strtod_l+0x824>
 8017438:	2b34      	cmp	r3, #52	; 0x34
 801743a:	bfde      	ittt	le
 801743c:	f04f 33ff 	movle.w	r3, #4294967295
 8017440:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017444:	4093      	lslle	r3, r2
 8017446:	f04f 0800 	mov.w	r8, #0
 801744a:	bfcc      	ite	gt
 801744c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017450:	ea03 0901 	andle.w	r9, r3, r1
 8017454:	2200      	movs	r2, #0
 8017456:	2300      	movs	r3, #0
 8017458:	4640      	mov	r0, r8
 801745a:	4649      	mov	r1, r9
 801745c:	f7e9 fb5c 	bl	8000b18 <__aeabi_dcmpeq>
 8017460:	2800      	cmp	r0, #0
 8017462:	d1a6      	bne.n	80173b2 <_strtod_l+0x562>
 8017464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017466:	9300      	str	r3, [sp, #0]
 8017468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801746a:	4633      	mov	r3, r6
 801746c:	465a      	mov	r2, fp
 801746e:	4620      	mov	r0, r4
 8017470:	f7ff f8cc 	bl	801660c <__s2b>
 8017474:	9009      	str	r0, [sp, #36]	; 0x24
 8017476:	2800      	cmp	r0, #0
 8017478:	f43f af2a 	beq.w	80172d0 <_strtod_l+0x480>
 801747c:	9a08      	ldr	r2, [sp, #32]
 801747e:	9b05      	ldr	r3, [sp, #20]
 8017480:	2a00      	cmp	r2, #0
 8017482:	eba3 0307 	sub.w	r3, r3, r7
 8017486:	bfa8      	it	ge
 8017488:	2300      	movge	r3, #0
 801748a:	930c      	str	r3, [sp, #48]	; 0x30
 801748c:	2500      	movs	r5, #0
 801748e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017492:	9312      	str	r3, [sp, #72]	; 0x48
 8017494:	46ab      	mov	fp, r5
 8017496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017498:	4620      	mov	r0, r4
 801749a:	6859      	ldr	r1, [r3, #4]
 801749c:	f7ff f80e 	bl	80164bc <_Balloc>
 80174a0:	9005      	str	r0, [sp, #20]
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f43f af18 	beq.w	80172d8 <_strtod_l+0x488>
 80174a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174aa:	691a      	ldr	r2, [r3, #16]
 80174ac:	3202      	adds	r2, #2
 80174ae:	f103 010c 	add.w	r1, r3, #12
 80174b2:	0092      	lsls	r2, r2, #2
 80174b4:	300c      	adds	r0, #12
 80174b6:	f7fe f872 	bl	801559e <memcpy>
 80174ba:	ec49 8b10 	vmov	d0, r8, r9
 80174be:	aa18      	add	r2, sp, #96	; 0x60
 80174c0:	a917      	add	r1, sp, #92	; 0x5c
 80174c2:	4620      	mov	r0, r4
 80174c4:	f7ff fbd6 	bl	8016c74 <__d2b>
 80174c8:	ec49 8b18 	vmov	d8, r8, r9
 80174cc:	9016      	str	r0, [sp, #88]	; 0x58
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f43f af02 	beq.w	80172d8 <_strtod_l+0x488>
 80174d4:	2101      	movs	r1, #1
 80174d6:	4620      	mov	r0, r4
 80174d8:	f7ff f930 	bl	801673c <__i2b>
 80174dc:	4683      	mov	fp, r0
 80174de:	2800      	cmp	r0, #0
 80174e0:	f43f aefa 	beq.w	80172d8 <_strtod_l+0x488>
 80174e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80174e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174e8:	2e00      	cmp	r6, #0
 80174ea:	bfab      	itete	ge
 80174ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80174ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80174f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80174f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80174f6:	bfac      	ite	ge
 80174f8:	eb06 0a03 	addge.w	sl, r6, r3
 80174fc:	1b9f      	sublt	r7, r3, r6
 80174fe:	9b04      	ldr	r3, [sp, #16]
 8017500:	1af6      	subs	r6, r6, r3
 8017502:	4416      	add	r6, r2
 8017504:	4ba0      	ldr	r3, [pc, #640]	; (8017788 <_strtod_l+0x938>)
 8017506:	3e01      	subs	r6, #1
 8017508:	429e      	cmp	r6, r3
 801750a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801750e:	f280 80c4 	bge.w	801769a <_strtod_l+0x84a>
 8017512:	1b9b      	subs	r3, r3, r6
 8017514:	2b1f      	cmp	r3, #31
 8017516:	eba2 0203 	sub.w	r2, r2, r3
 801751a:	f04f 0101 	mov.w	r1, #1
 801751e:	f300 80b0 	bgt.w	8017682 <_strtod_l+0x832>
 8017522:	fa01 f303 	lsl.w	r3, r1, r3
 8017526:	930e      	str	r3, [sp, #56]	; 0x38
 8017528:	2300      	movs	r3, #0
 801752a:	930d      	str	r3, [sp, #52]	; 0x34
 801752c:	eb0a 0602 	add.w	r6, sl, r2
 8017530:	9b04      	ldr	r3, [sp, #16]
 8017532:	45b2      	cmp	sl, r6
 8017534:	4417      	add	r7, r2
 8017536:	441f      	add	r7, r3
 8017538:	4653      	mov	r3, sl
 801753a:	bfa8      	it	ge
 801753c:	4633      	movge	r3, r6
 801753e:	42bb      	cmp	r3, r7
 8017540:	bfa8      	it	ge
 8017542:	463b      	movge	r3, r7
 8017544:	2b00      	cmp	r3, #0
 8017546:	bfc2      	ittt	gt
 8017548:	1af6      	subgt	r6, r6, r3
 801754a:	1aff      	subgt	r7, r7, r3
 801754c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8017550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017552:	2b00      	cmp	r3, #0
 8017554:	dd17      	ble.n	8017586 <_strtod_l+0x736>
 8017556:	4659      	mov	r1, fp
 8017558:	461a      	mov	r2, r3
 801755a:	4620      	mov	r0, r4
 801755c:	f7ff f9ae 	bl	80168bc <__pow5mult>
 8017560:	4683      	mov	fp, r0
 8017562:	2800      	cmp	r0, #0
 8017564:	f43f aeb8 	beq.w	80172d8 <_strtod_l+0x488>
 8017568:	4601      	mov	r1, r0
 801756a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801756c:	4620      	mov	r0, r4
 801756e:	f7ff f8fb 	bl	8016768 <__multiply>
 8017572:	900b      	str	r0, [sp, #44]	; 0x2c
 8017574:	2800      	cmp	r0, #0
 8017576:	f43f aeaf 	beq.w	80172d8 <_strtod_l+0x488>
 801757a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801757c:	4620      	mov	r0, r4
 801757e:	f7fe ffdd 	bl	801653c <_Bfree>
 8017582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017584:	9316      	str	r3, [sp, #88]	; 0x58
 8017586:	2e00      	cmp	r6, #0
 8017588:	f300 808c 	bgt.w	80176a4 <_strtod_l+0x854>
 801758c:	9b08      	ldr	r3, [sp, #32]
 801758e:	2b00      	cmp	r3, #0
 8017590:	dd08      	ble.n	80175a4 <_strtod_l+0x754>
 8017592:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017594:	9905      	ldr	r1, [sp, #20]
 8017596:	4620      	mov	r0, r4
 8017598:	f7ff f990 	bl	80168bc <__pow5mult>
 801759c:	9005      	str	r0, [sp, #20]
 801759e:	2800      	cmp	r0, #0
 80175a0:	f43f ae9a 	beq.w	80172d8 <_strtod_l+0x488>
 80175a4:	2f00      	cmp	r7, #0
 80175a6:	dd08      	ble.n	80175ba <_strtod_l+0x76a>
 80175a8:	9905      	ldr	r1, [sp, #20]
 80175aa:	463a      	mov	r2, r7
 80175ac:	4620      	mov	r0, r4
 80175ae:	f7ff f9df 	bl	8016970 <__lshift>
 80175b2:	9005      	str	r0, [sp, #20]
 80175b4:	2800      	cmp	r0, #0
 80175b6:	f43f ae8f 	beq.w	80172d8 <_strtod_l+0x488>
 80175ba:	f1ba 0f00 	cmp.w	sl, #0
 80175be:	dd08      	ble.n	80175d2 <_strtod_l+0x782>
 80175c0:	4659      	mov	r1, fp
 80175c2:	4652      	mov	r2, sl
 80175c4:	4620      	mov	r0, r4
 80175c6:	f7ff f9d3 	bl	8016970 <__lshift>
 80175ca:	4683      	mov	fp, r0
 80175cc:	2800      	cmp	r0, #0
 80175ce:	f43f ae83 	beq.w	80172d8 <_strtod_l+0x488>
 80175d2:	9a05      	ldr	r2, [sp, #20]
 80175d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80175d6:	4620      	mov	r0, r4
 80175d8:	f7ff fa52 	bl	8016a80 <__mdiff>
 80175dc:	4605      	mov	r5, r0
 80175de:	2800      	cmp	r0, #0
 80175e0:	f43f ae7a 	beq.w	80172d8 <_strtod_l+0x488>
 80175e4:	68c3      	ldr	r3, [r0, #12]
 80175e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80175e8:	2300      	movs	r3, #0
 80175ea:	60c3      	str	r3, [r0, #12]
 80175ec:	4659      	mov	r1, fp
 80175ee:	f7ff fa2b 	bl	8016a48 <__mcmp>
 80175f2:	2800      	cmp	r0, #0
 80175f4:	da60      	bge.n	80176b8 <_strtod_l+0x868>
 80175f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175f8:	ea53 0308 	orrs.w	r3, r3, r8
 80175fc:	f040 8084 	bne.w	8017708 <_strtod_l+0x8b8>
 8017600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017604:	2b00      	cmp	r3, #0
 8017606:	d17f      	bne.n	8017708 <_strtod_l+0x8b8>
 8017608:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801760c:	0d1b      	lsrs	r3, r3, #20
 801760e:	051b      	lsls	r3, r3, #20
 8017610:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017614:	d978      	bls.n	8017708 <_strtod_l+0x8b8>
 8017616:	696b      	ldr	r3, [r5, #20]
 8017618:	b913      	cbnz	r3, 8017620 <_strtod_l+0x7d0>
 801761a:	692b      	ldr	r3, [r5, #16]
 801761c:	2b01      	cmp	r3, #1
 801761e:	dd73      	ble.n	8017708 <_strtod_l+0x8b8>
 8017620:	4629      	mov	r1, r5
 8017622:	2201      	movs	r2, #1
 8017624:	4620      	mov	r0, r4
 8017626:	f7ff f9a3 	bl	8016970 <__lshift>
 801762a:	4659      	mov	r1, fp
 801762c:	4605      	mov	r5, r0
 801762e:	f7ff fa0b 	bl	8016a48 <__mcmp>
 8017632:	2800      	cmp	r0, #0
 8017634:	dd68      	ble.n	8017708 <_strtod_l+0x8b8>
 8017636:	9904      	ldr	r1, [sp, #16]
 8017638:	4a54      	ldr	r2, [pc, #336]	; (801778c <_strtod_l+0x93c>)
 801763a:	464b      	mov	r3, r9
 801763c:	2900      	cmp	r1, #0
 801763e:	f000 8084 	beq.w	801774a <_strtod_l+0x8fa>
 8017642:	ea02 0109 	and.w	r1, r2, r9
 8017646:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801764a:	dc7e      	bgt.n	801774a <_strtod_l+0x8fa>
 801764c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017650:	f77f aeb3 	ble.w	80173ba <_strtod_l+0x56a>
 8017654:	4b4e      	ldr	r3, [pc, #312]	; (8017790 <_strtod_l+0x940>)
 8017656:	4640      	mov	r0, r8
 8017658:	4649      	mov	r1, r9
 801765a:	2200      	movs	r2, #0
 801765c:	f7e8 fff4 	bl	8000648 <__aeabi_dmul>
 8017660:	4b4a      	ldr	r3, [pc, #296]	; (801778c <_strtod_l+0x93c>)
 8017662:	400b      	ands	r3, r1
 8017664:	4680      	mov	r8, r0
 8017666:	4689      	mov	r9, r1
 8017668:	2b00      	cmp	r3, #0
 801766a:	f47f ae3f 	bne.w	80172ec <_strtod_l+0x49c>
 801766e:	2322      	movs	r3, #34	; 0x22
 8017670:	6023      	str	r3, [r4, #0]
 8017672:	e63b      	b.n	80172ec <_strtod_l+0x49c>
 8017674:	f04f 32ff 	mov.w	r2, #4294967295
 8017678:	fa02 f303 	lsl.w	r3, r2, r3
 801767c:	ea03 0808 	and.w	r8, r3, r8
 8017680:	e6e8      	b.n	8017454 <_strtod_l+0x604>
 8017682:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017686:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801768a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801768e:	36e2      	adds	r6, #226	; 0xe2
 8017690:	fa01 f306 	lsl.w	r3, r1, r6
 8017694:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8017698:	e748      	b.n	801752c <_strtod_l+0x6dc>
 801769a:	2100      	movs	r1, #0
 801769c:	2301      	movs	r3, #1
 801769e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80176a2:	e743      	b.n	801752c <_strtod_l+0x6dc>
 80176a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80176a6:	4632      	mov	r2, r6
 80176a8:	4620      	mov	r0, r4
 80176aa:	f7ff f961 	bl	8016970 <__lshift>
 80176ae:	9016      	str	r0, [sp, #88]	; 0x58
 80176b0:	2800      	cmp	r0, #0
 80176b2:	f47f af6b 	bne.w	801758c <_strtod_l+0x73c>
 80176b6:	e60f      	b.n	80172d8 <_strtod_l+0x488>
 80176b8:	46ca      	mov	sl, r9
 80176ba:	d171      	bne.n	80177a0 <_strtod_l+0x950>
 80176bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80176c2:	b352      	cbz	r2, 801771a <_strtod_l+0x8ca>
 80176c4:	4a33      	ldr	r2, [pc, #204]	; (8017794 <_strtod_l+0x944>)
 80176c6:	4293      	cmp	r3, r2
 80176c8:	d12a      	bne.n	8017720 <_strtod_l+0x8d0>
 80176ca:	9b04      	ldr	r3, [sp, #16]
 80176cc:	4641      	mov	r1, r8
 80176ce:	b1fb      	cbz	r3, 8017710 <_strtod_l+0x8c0>
 80176d0:	4b2e      	ldr	r3, [pc, #184]	; (801778c <_strtod_l+0x93c>)
 80176d2:	ea09 0303 	and.w	r3, r9, r3
 80176d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80176da:	f04f 32ff 	mov.w	r2, #4294967295
 80176de:	d81a      	bhi.n	8017716 <_strtod_l+0x8c6>
 80176e0:	0d1b      	lsrs	r3, r3, #20
 80176e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80176e6:	fa02 f303 	lsl.w	r3, r2, r3
 80176ea:	4299      	cmp	r1, r3
 80176ec:	d118      	bne.n	8017720 <_strtod_l+0x8d0>
 80176ee:	4b2a      	ldr	r3, [pc, #168]	; (8017798 <_strtod_l+0x948>)
 80176f0:	459a      	cmp	sl, r3
 80176f2:	d102      	bne.n	80176fa <_strtod_l+0x8aa>
 80176f4:	3101      	adds	r1, #1
 80176f6:	f43f adef 	beq.w	80172d8 <_strtod_l+0x488>
 80176fa:	4b24      	ldr	r3, [pc, #144]	; (801778c <_strtod_l+0x93c>)
 80176fc:	ea0a 0303 	and.w	r3, sl, r3
 8017700:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017704:	f04f 0800 	mov.w	r8, #0
 8017708:	9b04      	ldr	r3, [sp, #16]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d1a2      	bne.n	8017654 <_strtod_l+0x804>
 801770e:	e5ed      	b.n	80172ec <_strtod_l+0x49c>
 8017710:	f04f 33ff 	mov.w	r3, #4294967295
 8017714:	e7e9      	b.n	80176ea <_strtod_l+0x89a>
 8017716:	4613      	mov	r3, r2
 8017718:	e7e7      	b.n	80176ea <_strtod_l+0x89a>
 801771a:	ea53 0308 	orrs.w	r3, r3, r8
 801771e:	d08a      	beq.n	8017636 <_strtod_l+0x7e6>
 8017720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017722:	b1e3      	cbz	r3, 801775e <_strtod_l+0x90e>
 8017724:	ea13 0f0a 	tst.w	r3, sl
 8017728:	d0ee      	beq.n	8017708 <_strtod_l+0x8b8>
 801772a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801772c:	9a04      	ldr	r2, [sp, #16]
 801772e:	4640      	mov	r0, r8
 8017730:	4649      	mov	r1, r9
 8017732:	b1c3      	cbz	r3, 8017766 <_strtod_l+0x916>
 8017734:	f7ff fb6f 	bl	8016e16 <sulp>
 8017738:	4602      	mov	r2, r0
 801773a:	460b      	mov	r3, r1
 801773c:	ec51 0b18 	vmov	r0, r1, d8
 8017740:	f7e8 fdcc 	bl	80002dc <__adddf3>
 8017744:	4680      	mov	r8, r0
 8017746:	4689      	mov	r9, r1
 8017748:	e7de      	b.n	8017708 <_strtod_l+0x8b8>
 801774a:	4013      	ands	r3, r2
 801774c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017750:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017754:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017758:	f04f 38ff 	mov.w	r8, #4294967295
 801775c:	e7d4      	b.n	8017708 <_strtod_l+0x8b8>
 801775e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017760:	ea13 0f08 	tst.w	r3, r8
 8017764:	e7e0      	b.n	8017728 <_strtod_l+0x8d8>
 8017766:	f7ff fb56 	bl	8016e16 <sulp>
 801776a:	4602      	mov	r2, r0
 801776c:	460b      	mov	r3, r1
 801776e:	ec51 0b18 	vmov	r0, r1, d8
 8017772:	f7e8 fdb1 	bl	80002d8 <__aeabi_dsub>
 8017776:	2200      	movs	r2, #0
 8017778:	2300      	movs	r3, #0
 801777a:	4680      	mov	r8, r0
 801777c:	4689      	mov	r9, r1
 801777e:	f7e9 f9cb 	bl	8000b18 <__aeabi_dcmpeq>
 8017782:	2800      	cmp	r0, #0
 8017784:	d0c0      	beq.n	8017708 <_strtod_l+0x8b8>
 8017786:	e618      	b.n	80173ba <_strtod_l+0x56a>
 8017788:	fffffc02 	.word	0xfffffc02
 801778c:	7ff00000 	.word	0x7ff00000
 8017790:	39500000 	.word	0x39500000
 8017794:	000fffff 	.word	0x000fffff
 8017798:	7fefffff 	.word	0x7fefffff
 801779c:	0801c148 	.word	0x0801c148
 80177a0:	4659      	mov	r1, fp
 80177a2:	4628      	mov	r0, r5
 80177a4:	f7ff fac0 	bl	8016d28 <__ratio>
 80177a8:	ec57 6b10 	vmov	r6, r7, d0
 80177ac:	ee10 0a10 	vmov	r0, s0
 80177b0:	2200      	movs	r2, #0
 80177b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80177b6:	4639      	mov	r1, r7
 80177b8:	f7e9 f9c2 	bl	8000b40 <__aeabi_dcmple>
 80177bc:	2800      	cmp	r0, #0
 80177be:	d071      	beq.n	80178a4 <_strtod_l+0xa54>
 80177c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d17c      	bne.n	80178c0 <_strtod_l+0xa70>
 80177c6:	f1b8 0f00 	cmp.w	r8, #0
 80177ca:	d15a      	bne.n	8017882 <_strtod_l+0xa32>
 80177cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d15d      	bne.n	8017890 <_strtod_l+0xa40>
 80177d4:	4b90      	ldr	r3, [pc, #576]	; (8017a18 <_strtod_l+0xbc8>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	4630      	mov	r0, r6
 80177da:	4639      	mov	r1, r7
 80177dc:	f7e9 f9a6 	bl	8000b2c <__aeabi_dcmplt>
 80177e0:	2800      	cmp	r0, #0
 80177e2:	d15c      	bne.n	801789e <_strtod_l+0xa4e>
 80177e4:	4630      	mov	r0, r6
 80177e6:	4639      	mov	r1, r7
 80177e8:	4b8c      	ldr	r3, [pc, #560]	; (8017a1c <_strtod_l+0xbcc>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	f7e8 ff2c 	bl	8000648 <__aeabi_dmul>
 80177f0:	4606      	mov	r6, r0
 80177f2:	460f      	mov	r7, r1
 80177f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80177f8:	9606      	str	r6, [sp, #24]
 80177fa:	9307      	str	r3, [sp, #28]
 80177fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017800:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017804:	4b86      	ldr	r3, [pc, #536]	; (8017a20 <_strtod_l+0xbd0>)
 8017806:	ea0a 0303 	and.w	r3, sl, r3
 801780a:	930d      	str	r3, [sp, #52]	; 0x34
 801780c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801780e:	4b85      	ldr	r3, [pc, #532]	; (8017a24 <_strtod_l+0xbd4>)
 8017810:	429a      	cmp	r2, r3
 8017812:	f040 8090 	bne.w	8017936 <_strtod_l+0xae6>
 8017816:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801781a:	ec49 8b10 	vmov	d0, r8, r9
 801781e:	f7ff f9b9 	bl	8016b94 <__ulp>
 8017822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017826:	ec51 0b10 	vmov	r0, r1, d0
 801782a:	f7e8 ff0d 	bl	8000648 <__aeabi_dmul>
 801782e:	4642      	mov	r2, r8
 8017830:	464b      	mov	r3, r9
 8017832:	f7e8 fd53 	bl	80002dc <__adddf3>
 8017836:	460b      	mov	r3, r1
 8017838:	4979      	ldr	r1, [pc, #484]	; (8017a20 <_strtod_l+0xbd0>)
 801783a:	4a7b      	ldr	r2, [pc, #492]	; (8017a28 <_strtod_l+0xbd8>)
 801783c:	4019      	ands	r1, r3
 801783e:	4291      	cmp	r1, r2
 8017840:	4680      	mov	r8, r0
 8017842:	d944      	bls.n	80178ce <_strtod_l+0xa7e>
 8017844:	ee18 2a90 	vmov	r2, s17
 8017848:	4b78      	ldr	r3, [pc, #480]	; (8017a2c <_strtod_l+0xbdc>)
 801784a:	429a      	cmp	r2, r3
 801784c:	d104      	bne.n	8017858 <_strtod_l+0xa08>
 801784e:	ee18 3a10 	vmov	r3, s16
 8017852:	3301      	adds	r3, #1
 8017854:	f43f ad40 	beq.w	80172d8 <_strtod_l+0x488>
 8017858:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017a2c <_strtod_l+0xbdc>
 801785c:	f04f 38ff 	mov.w	r8, #4294967295
 8017860:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017862:	4620      	mov	r0, r4
 8017864:	f7fe fe6a 	bl	801653c <_Bfree>
 8017868:	9905      	ldr	r1, [sp, #20]
 801786a:	4620      	mov	r0, r4
 801786c:	f7fe fe66 	bl	801653c <_Bfree>
 8017870:	4659      	mov	r1, fp
 8017872:	4620      	mov	r0, r4
 8017874:	f7fe fe62 	bl	801653c <_Bfree>
 8017878:	4629      	mov	r1, r5
 801787a:	4620      	mov	r0, r4
 801787c:	f7fe fe5e 	bl	801653c <_Bfree>
 8017880:	e609      	b.n	8017496 <_strtod_l+0x646>
 8017882:	f1b8 0f01 	cmp.w	r8, #1
 8017886:	d103      	bne.n	8017890 <_strtod_l+0xa40>
 8017888:	f1b9 0f00 	cmp.w	r9, #0
 801788c:	f43f ad95 	beq.w	80173ba <_strtod_l+0x56a>
 8017890:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80179e8 <_strtod_l+0xb98>
 8017894:	4f60      	ldr	r7, [pc, #384]	; (8017a18 <_strtod_l+0xbc8>)
 8017896:	ed8d 7b06 	vstr	d7, [sp, #24]
 801789a:	2600      	movs	r6, #0
 801789c:	e7ae      	b.n	80177fc <_strtod_l+0x9ac>
 801789e:	4f5f      	ldr	r7, [pc, #380]	; (8017a1c <_strtod_l+0xbcc>)
 80178a0:	2600      	movs	r6, #0
 80178a2:	e7a7      	b.n	80177f4 <_strtod_l+0x9a4>
 80178a4:	4b5d      	ldr	r3, [pc, #372]	; (8017a1c <_strtod_l+0xbcc>)
 80178a6:	4630      	mov	r0, r6
 80178a8:	4639      	mov	r1, r7
 80178aa:	2200      	movs	r2, #0
 80178ac:	f7e8 fecc 	bl	8000648 <__aeabi_dmul>
 80178b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178b2:	4606      	mov	r6, r0
 80178b4:	460f      	mov	r7, r1
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d09c      	beq.n	80177f4 <_strtod_l+0x9a4>
 80178ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80178be:	e79d      	b.n	80177fc <_strtod_l+0x9ac>
 80178c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80179f0 <_strtod_l+0xba0>
 80178c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178c8:	ec57 6b17 	vmov	r6, r7, d7
 80178cc:	e796      	b.n	80177fc <_strtod_l+0x9ac>
 80178ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80178d2:	9b04      	ldr	r3, [sp, #16]
 80178d4:	46ca      	mov	sl, r9
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d1c2      	bne.n	8017860 <_strtod_l+0xa10>
 80178da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80178de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80178e0:	0d1b      	lsrs	r3, r3, #20
 80178e2:	051b      	lsls	r3, r3, #20
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d1bb      	bne.n	8017860 <_strtod_l+0xa10>
 80178e8:	4630      	mov	r0, r6
 80178ea:	4639      	mov	r1, r7
 80178ec:	f7e9 fa5c 	bl	8000da8 <__aeabi_d2lz>
 80178f0:	f7e8 fe7c 	bl	80005ec <__aeabi_l2d>
 80178f4:	4602      	mov	r2, r0
 80178f6:	460b      	mov	r3, r1
 80178f8:	4630      	mov	r0, r6
 80178fa:	4639      	mov	r1, r7
 80178fc:	f7e8 fcec 	bl	80002d8 <__aeabi_dsub>
 8017900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017902:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017906:	ea43 0308 	orr.w	r3, r3, r8
 801790a:	4313      	orrs	r3, r2
 801790c:	4606      	mov	r6, r0
 801790e:	460f      	mov	r7, r1
 8017910:	d054      	beq.n	80179bc <_strtod_l+0xb6c>
 8017912:	a339      	add	r3, pc, #228	; (adr r3, 80179f8 <_strtod_l+0xba8>)
 8017914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017918:	f7e9 f908 	bl	8000b2c <__aeabi_dcmplt>
 801791c:	2800      	cmp	r0, #0
 801791e:	f47f ace5 	bne.w	80172ec <_strtod_l+0x49c>
 8017922:	a337      	add	r3, pc, #220	; (adr r3, 8017a00 <_strtod_l+0xbb0>)
 8017924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017928:	4630      	mov	r0, r6
 801792a:	4639      	mov	r1, r7
 801792c:	f7e9 f91c 	bl	8000b68 <__aeabi_dcmpgt>
 8017930:	2800      	cmp	r0, #0
 8017932:	d095      	beq.n	8017860 <_strtod_l+0xa10>
 8017934:	e4da      	b.n	80172ec <_strtod_l+0x49c>
 8017936:	9b04      	ldr	r3, [sp, #16]
 8017938:	b333      	cbz	r3, 8017988 <_strtod_l+0xb38>
 801793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801793c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017940:	d822      	bhi.n	8017988 <_strtod_l+0xb38>
 8017942:	a331      	add	r3, pc, #196	; (adr r3, 8017a08 <_strtod_l+0xbb8>)
 8017944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017948:	4630      	mov	r0, r6
 801794a:	4639      	mov	r1, r7
 801794c:	f7e9 f8f8 	bl	8000b40 <__aeabi_dcmple>
 8017950:	b1a0      	cbz	r0, 801797c <_strtod_l+0xb2c>
 8017952:	4639      	mov	r1, r7
 8017954:	4630      	mov	r0, r6
 8017956:	f7e9 f94f 	bl	8000bf8 <__aeabi_d2uiz>
 801795a:	2801      	cmp	r0, #1
 801795c:	bf38      	it	cc
 801795e:	2001      	movcc	r0, #1
 8017960:	f7e8 fdf8 	bl	8000554 <__aeabi_ui2d>
 8017964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017966:	4606      	mov	r6, r0
 8017968:	460f      	mov	r7, r1
 801796a:	bb23      	cbnz	r3, 80179b6 <_strtod_l+0xb66>
 801796c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017970:	9010      	str	r0, [sp, #64]	; 0x40
 8017972:	9311      	str	r3, [sp, #68]	; 0x44
 8017974:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017978:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801797c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801797e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017980:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017984:	1a9b      	subs	r3, r3, r2
 8017986:	930f      	str	r3, [sp, #60]	; 0x3c
 8017988:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801798c:	eeb0 0a48 	vmov.f32	s0, s16
 8017990:	eef0 0a68 	vmov.f32	s1, s17
 8017994:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017998:	f7ff f8fc 	bl	8016b94 <__ulp>
 801799c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80179a0:	ec53 2b10 	vmov	r2, r3, d0
 80179a4:	f7e8 fe50 	bl	8000648 <__aeabi_dmul>
 80179a8:	ec53 2b18 	vmov	r2, r3, d8
 80179ac:	f7e8 fc96 	bl	80002dc <__adddf3>
 80179b0:	4680      	mov	r8, r0
 80179b2:	4689      	mov	r9, r1
 80179b4:	e78d      	b.n	80178d2 <_strtod_l+0xa82>
 80179b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80179ba:	e7db      	b.n	8017974 <_strtod_l+0xb24>
 80179bc:	a314      	add	r3, pc, #80	; (adr r3, 8017a10 <_strtod_l+0xbc0>)
 80179be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c2:	f7e9 f8b3 	bl	8000b2c <__aeabi_dcmplt>
 80179c6:	e7b3      	b.n	8017930 <_strtod_l+0xae0>
 80179c8:	2300      	movs	r3, #0
 80179ca:	930a      	str	r3, [sp, #40]	; 0x28
 80179cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80179d0:	6013      	str	r3, [r2, #0]
 80179d2:	f7ff ba7c 	b.w	8016ece <_strtod_l+0x7e>
 80179d6:	2a65      	cmp	r2, #101	; 0x65
 80179d8:	f43f ab75 	beq.w	80170c6 <_strtod_l+0x276>
 80179dc:	2a45      	cmp	r2, #69	; 0x45
 80179de:	f43f ab72 	beq.w	80170c6 <_strtod_l+0x276>
 80179e2:	2301      	movs	r3, #1
 80179e4:	f7ff bbaa 	b.w	801713c <_strtod_l+0x2ec>
 80179e8:	00000000 	.word	0x00000000
 80179ec:	bff00000 	.word	0xbff00000
 80179f0:	00000000 	.word	0x00000000
 80179f4:	3ff00000 	.word	0x3ff00000
 80179f8:	94a03595 	.word	0x94a03595
 80179fc:	3fdfffff 	.word	0x3fdfffff
 8017a00:	35afe535 	.word	0x35afe535
 8017a04:	3fe00000 	.word	0x3fe00000
 8017a08:	ffc00000 	.word	0xffc00000
 8017a0c:	41dfffff 	.word	0x41dfffff
 8017a10:	94a03595 	.word	0x94a03595
 8017a14:	3fcfffff 	.word	0x3fcfffff
 8017a18:	3ff00000 	.word	0x3ff00000
 8017a1c:	3fe00000 	.word	0x3fe00000
 8017a20:	7ff00000 	.word	0x7ff00000
 8017a24:	7fe00000 	.word	0x7fe00000
 8017a28:	7c9fffff 	.word	0x7c9fffff
 8017a2c:	7fefffff 	.word	0x7fefffff

08017a30 <_strtod_r>:
 8017a30:	4b01      	ldr	r3, [pc, #4]	; (8017a38 <_strtod_r+0x8>)
 8017a32:	f7ff ba0d 	b.w	8016e50 <_strtod_l>
 8017a36:	bf00      	nop
 8017a38:	20000074 	.word	0x20000074

08017a3c <_strtol_l.constprop.0>:
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a42:	d001      	beq.n	8017a48 <_strtol_l.constprop.0+0xc>
 8017a44:	2b24      	cmp	r3, #36	; 0x24
 8017a46:	d906      	bls.n	8017a56 <_strtol_l.constprop.0+0x1a>
 8017a48:	f7fd fd7c 	bl	8015544 <__errno>
 8017a4c:	2316      	movs	r3, #22
 8017a4e:	6003      	str	r3, [r0, #0]
 8017a50:	2000      	movs	r0, #0
 8017a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017b3c <_strtol_l.constprop.0+0x100>
 8017a5a:	460d      	mov	r5, r1
 8017a5c:	462e      	mov	r6, r5
 8017a5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017a66:	f017 0708 	ands.w	r7, r7, #8
 8017a6a:	d1f7      	bne.n	8017a5c <_strtol_l.constprop.0+0x20>
 8017a6c:	2c2d      	cmp	r4, #45	; 0x2d
 8017a6e:	d132      	bne.n	8017ad6 <_strtol_l.constprop.0+0x9a>
 8017a70:	782c      	ldrb	r4, [r5, #0]
 8017a72:	2701      	movs	r7, #1
 8017a74:	1cb5      	adds	r5, r6, #2
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d05b      	beq.n	8017b32 <_strtol_l.constprop.0+0xf6>
 8017a7a:	2b10      	cmp	r3, #16
 8017a7c:	d109      	bne.n	8017a92 <_strtol_l.constprop.0+0x56>
 8017a7e:	2c30      	cmp	r4, #48	; 0x30
 8017a80:	d107      	bne.n	8017a92 <_strtol_l.constprop.0+0x56>
 8017a82:	782c      	ldrb	r4, [r5, #0]
 8017a84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017a88:	2c58      	cmp	r4, #88	; 0x58
 8017a8a:	d14d      	bne.n	8017b28 <_strtol_l.constprop.0+0xec>
 8017a8c:	786c      	ldrb	r4, [r5, #1]
 8017a8e:	2310      	movs	r3, #16
 8017a90:	3502      	adds	r5, #2
 8017a92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017a96:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a9a:	f04f 0e00 	mov.w	lr, #0
 8017a9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017aa2:	4676      	mov	r6, lr
 8017aa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8017aa8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017aac:	f1bc 0f09 	cmp.w	ip, #9
 8017ab0:	d816      	bhi.n	8017ae0 <_strtol_l.constprop.0+0xa4>
 8017ab2:	4664      	mov	r4, ip
 8017ab4:	42a3      	cmp	r3, r4
 8017ab6:	dd24      	ble.n	8017b02 <_strtol_l.constprop.0+0xc6>
 8017ab8:	f1be 3fff 	cmp.w	lr, #4294967295
 8017abc:	d008      	beq.n	8017ad0 <_strtol_l.constprop.0+0x94>
 8017abe:	45b1      	cmp	r9, r6
 8017ac0:	d31c      	bcc.n	8017afc <_strtol_l.constprop.0+0xc0>
 8017ac2:	d101      	bne.n	8017ac8 <_strtol_l.constprop.0+0x8c>
 8017ac4:	45a2      	cmp	sl, r4
 8017ac6:	db19      	blt.n	8017afc <_strtol_l.constprop.0+0xc0>
 8017ac8:	fb06 4603 	mla	r6, r6, r3, r4
 8017acc:	f04f 0e01 	mov.w	lr, #1
 8017ad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ad4:	e7e8      	b.n	8017aa8 <_strtol_l.constprop.0+0x6c>
 8017ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8017ad8:	bf04      	itt	eq
 8017ada:	782c      	ldrbeq	r4, [r5, #0]
 8017adc:	1cb5      	addeq	r5, r6, #2
 8017ade:	e7ca      	b.n	8017a76 <_strtol_l.constprop.0+0x3a>
 8017ae0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017ae4:	f1bc 0f19 	cmp.w	ip, #25
 8017ae8:	d801      	bhi.n	8017aee <_strtol_l.constprop.0+0xb2>
 8017aea:	3c37      	subs	r4, #55	; 0x37
 8017aec:	e7e2      	b.n	8017ab4 <_strtol_l.constprop.0+0x78>
 8017aee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017af2:	f1bc 0f19 	cmp.w	ip, #25
 8017af6:	d804      	bhi.n	8017b02 <_strtol_l.constprop.0+0xc6>
 8017af8:	3c57      	subs	r4, #87	; 0x57
 8017afa:	e7db      	b.n	8017ab4 <_strtol_l.constprop.0+0x78>
 8017afc:	f04f 3eff 	mov.w	lr, #4294967295
 8017b00:	e7e6      	b.n	8017ad0 <_strtol_l.constprop.0+0x94>
 8017b02:	f1be 3fff 	cmp.w	lr, #4294967295
 8017b06:	d105      	bne.n	8017b14 <_strtol_l.constprop.0+0xd8>
 8017b08:	2322      	movs	r3, #34	; 0x22
 8017b0a:	6003      	str	r3, [r0, #0]
 8017b0c:	4646      	mov	r6, r8
 8017b0e:	b942      	cbnz	r2, 8017b22 <_strtol_l.constprop.0+0xe6>
 8017b10:	4630      	mov	r0, r6
 8017b12:	e79e      	b.n	8017a52 <_strtol_l.constprop.0+0x16>
 8017b14:	b107      	cbz	r7, 8017b18 <_strtol_l.constprop.0+0xdc>
 8017b16:	4276      	negs	r6, r6
 8017b18:	2a00      	cmp	r2, #0
 8017b1a:	d0f9      	beq.n	8017b10 <_strtol_l.constprop.0+0xd4>
 8017b1c:	f1be 0f00 	cmp.w	lr, #0
 8017b20:	d000      	beq.n	8017b24 <_strtol_l.constprop.0+0xe8>
 8017b22:	1e69      	subs	r1, r5, #1
 8017b24:	6011      	str	r1, [r2, #0]
 8017b26:	e7f3      	b.n	8017b10 <_strtol_l.constprop.0+0xd4>
 8017b28:	2430      	movs	r4, #48	; 0x30
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d1b1      	bne.n	8017a92 <_strtol_l.constprop.0+0x56>
 8017b2e:	2308      	movs	r3, #8
 8017b30:	e7af      	b.n	8017a92 <_strtol_l.constprop.0+0x56>
 8017b32:	2c30      	cmp	r4, #48	; 0x30
 8017b34:	d0a5      	beq.n	8017a82 <_strtol_l.constprop.0+0x46>
 8017b36:	230a      	movs	r3, #10
 8017b38:	e7ab      	b.n	8017a92 <_strtol_l.constprop.0+0x56>
 8017b3a:	bf00      	nop
 8017b3c:	0801c171 	.word	0x0801c171

08017b40 <_strtol_r>:
 8017b40:	f7ff bf7c 	b.w	8017a3c <_strtol_l.constprop.0>

08017b44 <__ssputs_r>:
 8017b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b48:	688e      	ldr	r6, [r1, #8]
 8017b4a:	461f      	mov	r7, r3
 8017b4c:	42be      	cmp	r6, r7
 8017b4e:	680b      	ldr	r3, [r1, #0]
 8017b50:	4682      	mov	sl, r0
 8017b52:	460c      	mov	r4, r1
 8017b54:	4690      	mov	r8, r2
 8017b56:	d82c      	bhi.n	8017bb2 <__ssputs_r+0x6e>
 8017b58:	898a      	ldrh	r2, [r1, #12]
 8017b5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b5e:	d026      	beq.n	8017bae <__ssputs_r+0x6a>
 8017b60:	6965      	ldr	r5, [r4, #20]
 8017b62:	6909      	ldr	r1, [r1, #16]
 8017b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b68:	eba3 0901 	sub.w	r9, r3, r1
 8017b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b70:	1c7b      	adds	r3, r7, #1
 8017b72:	444b      	add	r3, r9
 8017b74:	106d      	asrs	r5, r5, #1
 8017b76:	429d      	cmp	r5, r3
 8017b78:	bf38      	it	cc
 8017b7a:	461d      	movcc	r5, r3
 8017b7c:	0553      	lsls	r3, r2, #21
 8017b7e:	d527      	bpl.n	8017bd0 <__ssputs_r+0x8c>
 8017b80:	4629      	mov	r1, r5
 8017b82:	f7fe fc0f 	bl	80163a4 <_malloc_r>
 8017b86:	4606      	mov	r6, r0
 8017b88:	b360      	cbz	r0, 8017be4 <__ssputs_r+0xa0>
 8017b8a:	6921      	ldr	r1, [r4, #16]
 8017b8c:	464a      	mov	r2, r9
 8017b8e:	f7fd fd06 	bl	801559e <memcpy>
 8017b92:	89a3      	ldrh	r3, [r4, #12]
 8017b94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b9c:	81a3      	strh	r3, [r4, #12]
 8017b9e:	6126      	str	r6, [r4, #16]
 8017ba0:	6165      	str	r5, [r4, #20]
 8017ba2:	444e      	add	r6, r9
 8017ba4:	eba5 0509 	sub.w	r5, r5, r9
 8017ba8:	6026      	str	r6, [r4, #0]
 8017baa:	60a5      	str	r5, [r4, #8]
 8017bac:	463e      	mov	r6, r7
 8017bae:	42be      	cmp	r6, r7
 8017bb0:	d900      	bls.n	8017bb4 <__ssputs_r+0x70>
 8017bb2:	463e      	mov	r6, r7
 8017bb4:	6820      	ldr	r0, [r4, #0]
 8017bb6:	4632      	mov	r2, r6
 8017bb8:	4641      	mov	r1, r8
 8017bba:	f000 fd5c 	bl	8018676 <memmove>
 8017bbe:	68a3      	ldr	r3, [r4, #8]
 8017bc0:	1b9b      	subs	r3, r3, r6
 8017bc2:	60a3      	str	r3, [r4, #8]
 8017bc4:	6823      	ldr	r3, [r4, #0]
 8017bc6:	4433      	add	r3, r6
 8017bc8:	6023      	str	r3, [r4, #0]
 8017bca:	2000      	movs	r0, #0
 8017bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd0:	462a      	mov	r2, r5
 8017bd2:	f001 f922 	bl	8018e1a <_realloc_r>
 8017bd6:	4606      	mov	r6, r0
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	d1e0      	bne.n	8017b9e <__ssputs_r+0x5a>
 8017bdc:	6921      	ldr	r1, [r4, #16]
 8017bde:	4650      	mov	r0, sl
 8017be0:	f7fe fb6c 	bl	80162bc <_free_r>
 8017be4:	230c      	movs	r3, #12
 8017be6:	f8ca 3000 	str.w	r3, [sl]
 8017bea:	89a3      	ldrh	r3, [r4, #12]
 8017bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bf0:	81a3      	strh	r3, [r4, #12]
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf6:	e7e9      	b.n	8017bcc <__ssputs_r+0x88>

08017bf8 <_svfiprintf_r>:
 8017bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfc:	4698      	mov	r8, r3
 8017bfe:	898b      	ldrh	r3, [r1, #12]
 8017c00:	061b      	lsls	r3, r3, #24
 8017c02:	b09d      	sub	sp, #116	; 0x74
 8017c04:	4607      	mov	r7, r0
 8017c06:	460d      	mov	r5, r1
 8017c08:	4614      	mov	r4, r2
 8017c0a:	d50e      	bpl.n	8017c2a <_svfiprintf_r+0x32>
 8017c0c:	690b      	ldr	r3, [r1, #16]
 8017c0e:	b963      	cbnz	r3, 8017c2a <_svfiprintf_r+0x32>
 8017c10:	2140      	movs	r1, #64	; 0x40
 8017c12:	f7fe fbc7 	bl	80163a4 <_malloc_r>
 8017c16:	6028      	str	r0, [r5, #0]
 8017c18:	6128      	str	r0, [r5, #16]
 8017c1a:	b920      	cbnz	r0, 8017c26 <_svfiprintf_r+0x2e>
 8017c1c:	230c      	movs	r3, #12
 8017c1e:	603b      	str	r3, [r7, #0]
 8017c20:	f04f 30ff 	mov.w	r0, #4294967295
 8017c24:	e0d0      	b.n	8017dc8 <_svfiprintf_r+0x1d0>
 8017c26:	2340      	movs	r3, #64	; 0x40
 8017c28:	616b      	str	r3, [r5, #20]
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c2e:	2320      	movs	r3, #32
 8017c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c38:	2330      	movs	r3, #48	; 0x30
 8017c3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017de0 <_svfiprintf_r+0x1e8>
 8017c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c42:	f04f 0901 	mov.w	r9, #1
 8017c46:	4623      	mov	r3, r4
 8017c48:	469a      	mov	sl, r3
 8017c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c4e:	b10a      	cbz	r2, 8017c54 <_svfiprintf_r+0x5c>
 8017c50:	2a25      	cmp	r2, #37	; 0x25
 8017c52:	d1f9      	bne.n	8017c48 <_svfiprintf_r+0x50>
 8017c54:	ebba 0b04 	subs.w	fp, sl, r4
 8017c58:	d00b      	beq.n	8017c72 <_svfiprintf_r+0x7a>
 8017c5a:	465b      	mov	r3, fp
 8017c5c:	4622      	mov	r2, r4
 8017c5e:	4629      	mov	r1, r5
 8017c60:	4638      	mov	r0, r7
 8017c62:	f7ff ff6f 	bl	8017b44 <__ssputs_r>
 8017c66:	3001      	adds	r0, #1
 8017c68:	f000 80a9 	beq.w	8017dbe <_svfiprintf_r+0x1c6>
 8017c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c6e:	445a      	add	r2, fp
 8017c70:	9209      	str	r2, [sp, #36]	; 0x24
 8017c72:	f89a 3000 	ldrb.w	r3, [sl]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	f000 80a1 	beq.w	8017dbe <_svfiprintf_r+0x1c6>
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c86:	f10a 0a01 	add.w	sl, sl, #1
 8017c8a:	9304      	str	r3, [sp, #16]
 8017c8c:	9307      	str	r3, [sp, #28]
 8017c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c92:	931a      	str	r3, [sp, #104]	; 0x68
 8017c94:	4654      	mov	r4, sl
 8017c96:	2205      	movs	r2, #5
 8017c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c9c:	4850      	ldr	r0, [pc, #320]	; (8017de0 <_svfiprintf_r+0x1e8>)
 8017c9e:	f7e8 fabf 	bl	8000220 <memchr>
 8017ca2:	9a04      	ldr	r2, [sp, #16]
 8017ca4:	b9d8      	cbnz	r0, 8017cde <_svfiprintf_r+0xe6>
 8017ca6:	06d0      	lsls	r0, r2, #27
 8017ca8:	bf44      	itt	mi
 8017caa:	2320      	movmi	r3, #32
 8017cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cb0:	0711      	lsls	r1, r2, #28
 8017cb2:	bf44      	itt	mi
 8017cb4:	232b      	movmi	r3, #43	; 0x2b
 8017cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cba:	f89a 3000 	ldrb.w	r3, [sl]
 8017cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8017cc0:	d015      	beq.n	8017cee <_svfiprintf_r+0xf6>
 8017cc2:	9a07      	ldr	r2, [sp, #28]
 8017cc4:	4654      	mov	r4, sl
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	f04f 0c0a 	mov.w	ip, #10
 8017ccc:	4621      	mov	r1, r4
 8017cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cd2:	3b30      	subs	r3, #48	; 0x30
 8017cd4:	2b09      	cmp	r3, #9
 8017cd6:	d94d      	bls.n	8017d74 <_svfiprintf_r+0x17c>
 8017cd8:	b1b0      	cbz	r0, 8017d08 <_svfiprintf_r+0x110>
 8017cda:	9207      	str	r2, [sp, #28]
 8017cdc:	e014      	b.n	8017d08 <_svfiprintf_r+0x110>
 8017cde:	eba0 0308 	sub.w	r3, r0, r8
 8017ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8017ce6:	4313      	orrs	r3, r2
 8017ce8:	9304      	str	r3, [sp, #16]
 8017cea:	46a2      	mov	sl, r4
 8017cec:	e7d2      	b.n	8017c94 <_svfiprintf_r+0x9c>
 8017cee:	9b03      	ldr	r3, [sp, #12]
 8017cf0:	1d19      	adds	r1, r3, #4
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	9103      	str	r1, [sp, #12]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	bfbb      	ittet	lt
 8017cfa:	425b      	neglt	r3, r3
 8017cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8017d00:	9307      	strge	r3, [sp, #28]
 8017d02:	9307      	strlt	r3, [sp, #28]
 8017d04:	bfb8      	it	lt
 8017d06:	9204      	strlt	r2, [sp, #16]
 8017d08:	7823      	ldrb	r3, [r4, #0]
 8017d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d0c:	d10c      	bne.n	8017d28 <_svfiprintf_r+0x130>
 8017d0e:	7863      	ldrb	r3, [r4, #1]
 8017d10:	2b2a      	cmp	r3, #42	; 0x2a
 8017d12:	d134      	bne.n	8017d7e <_svfiprintf_r+0x186>
 8017d14:	9b03      	ldr	r3, [sp, #12]
 8017d16:	1d1a      	adds	r2, r3, #4
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	9203      	str	r2, [sp, #12]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	bfb8      	it	lt
 8017d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d24:	3402      	adds	r4, #2
 8017d26:	9305      	str	r3, [sp, #20]
 8017d28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017df0 <_svfiprintf_r+0x1f8>
 8017d2c:	7821      	ldrb	r1, [r4, #0]
 8017d2e:	2203      	movs	r2, #3
 8017d30:	4650      	mov	r0, sl
 8017d32:	f7e8 fa75 	bl	8000220 <memchr>
 8017d36:	b138      	cbz	r0, 8017d48 <_svfiprintf_r+0x150>
 8017d38:	9b04      	ldr	r3, [sp, #16]
 8017d3a:	eba0 000a 	sub.w	r0, r0, sl
 8017d3e:	2240      	movs	r2, #64	; 0x40
 8017d40:	4082      	lsls	r2, r0
 8017d42:	4313      	orrs	r3, r2
 8017d44:	3401      	adds	r4, #1
 8017d46:	9304      	str	r3, [sp, #16]
 8017d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d4c:	4825      	ldr	r0, [pc, #148]	; (8017de4 <_svfiprintf_r+0x1ec>)
 8017d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d52:	2206      	movs	r2, #6
 8017d54:	f7e8 fa64 	bl	8000220 <memchr>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d038      	beq.n	8017dce <_svfiprintf_r+0x1d6>
 8017d5c:	4b22      	ldr	r3, [pc, #136]	; (8017de8 <_svfiprintf_r+0x1f0>)
 8017d5e:	bb1b      	cbnz	r3, 8017da8 <_svfiprintf_r+0x1b0>
 8017d60:	9b03      	ldr	r3, [sp, #12]
 8017d62:	3307      	adds	r3, #7
 8017d64:	f023 0307 	bic.w	r3, r3, #7
 8017d68:	3308      	adds	r3, #8
 8017d6a:	9303      	str	r3, [sp, #12]
 8017d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d6e:	4433      	add	r3, r6
 8017d70:	9309      	str	r3, [sp, #36]	; 0x24
 8017d72:	e768      	b.n	8017c46 <_svfiprintf_r+0x4e>
 8017d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d78:	460c      	mov	r4, r1
 8017d7a:	2001      	movs	r0, #1
 8017d7c:	e7a6      	b.n	8017ccc <_svfiprintf_r+0xd4>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	3401      	adds	r4, #1
 8017d82:	9305      	str	r3, [sp, #20]
 8017d84:	4619      	mov	r1, r3
 8017d86:	f04f 0c0a 	mov.w	ip, #10
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d90:	3a30      	subs	r2, #48	; 0x30
 8017d92:	2a09      	cmp	r2, #9
 8017d94:	d903      	bls.n	8017d9e <_svfiprintf_r+0x1a6>
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d0c6      	beq.n	8017d28 <_svfiprintf_r+0x130>
 8017d9a:	9105      	str	r1, [sp, #20]
 8017d9c:	e7c4      	b.n	8017d28 <_svfiprintf_r+0x130>
 8017d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017da2:	4604      	mov	r4, r0
 8017da4:	2301      	movs	r3, #1
 8017da6:	e7f0      	b.n	8017d8a <_svfiprintf_r+0x192>
 8017da8:	ab03      	add	r3, sp, #12
 8017daa:	9300      	str	r3, [sp, #0]
 8017dac:	462a      	mov	r2, r5
 8017dae:	4b0f      	ldr	r3, [pc, #60]	; (8017dec <_svfiprintf_r+0x1f4>)
 8017db0:	a904      	add	r1, sp, #16
 8017db2:	4638      	mov	r0, r7
 8017db4:	f7fc fbe2 	bl	801457c <_printf_float>
 8017db8:	1c42      	adds	r2, r0, #1
 8017dba:	4606      	mov	r6, r0
 8017dbc:	d1d6      	bne.n	8017d6c <_svfiprintf_r+0x174>
 8017dbe:	89ab      	ldrh	r3, [r5, #12]
 8017dc0:	065b      	lsls	r3, r3, #25
 8017dc2:	f53f af2d 	bmi.w	8017c20 <_svfiprintf_r+0x28>
 8017dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017dc8:	b01d      	add	sp, #116	; 0x74
 8017dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dce:	ab03      	add	r3, sp, #12
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	462a      	mov	r2, r5
 8017dd4:	4b05      	ldr	r3, [pc, #20]	; (8017dec <_svfiprintf_r+0x1f4>)
 8017dd6:	a904      	add	r1, sp, #16
 8017dd8:	4638      	mov	r0, r7
 8017dda:	f7fc fe73 	bl	8014ac4 <_printf_i>
 8017dde:	e7eb      	b.n	8017db8 <_svfiprintf_r+0x1c0>
 8017de0:	0801c271 	.word	0x0801c271
 8017de4:	0801c27b 	.word	0x0801c27b
 8017de8:	0801457d 	.word	0x0801457d
 8017dec:	08017b45 	.word	0x08017b45
 8017df0:	0801c277 	.word	0x0801c277

08017df4 <_sungetc_r>:
 8017df4:	b538      	push	{r3, r4, r5, lr}
 8017df6:	1c4b      	adds	r3, r1, #1
 8017df8:	4614      	mov	r4, r2
 8017dfa:	d103      	bne.n	8017e04 <_sungetc_r+0x10>
 8017dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8017e00:	4628      	mov	r0, r5
 8017e02:	bd38      	pop	{r3, r4, r5, pc}
 8017e04:	8993      	ldrh	r3, [r2, #12]
 8017e06:	f023 0320 	bic.w	r3, r3, #32
 8017e0a:	8193      	strh	r3, [r2, #12]
 8017e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e0e:	6852      	ldr	r2, [r2, #4]
 8017e10:	b2cd      	uxtb	r5, r1
 8017e12:	b18b      	cbz	r3, 8017e38 <_sungetc_r+0x44>
 8017e14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e16:	4293      	cmp	r3, r2
 8017e18:	dd08      	ble.n	8017e2c <_sungetc_r+0x38>
 8017e1a:	6823      	ldr	r3, [r4, #0]
 8017e1c:	1e5a      	subs	r2, r3, #1
 8017e1e:	6022      	str	r2, [r4, #0]
 8017e20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017e24:	6863      	ldr	r3, [r4, #4]
 8017e26:	3301      	adds	r3, #1
 8017e28:	6063      	str	r3, [r4, #4]
 8017e2a:	e7e9      	b.n	8017e00 <_sungetc_r+0xc>
 8017e2c:	4621      	mov	r1, r4
 8017e2e:	f000 fbe8 	bl	8018602 <__submore>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	d0f1      	beq.n	8017e1a <_sungetc_r+0x26>
 8017e36:	e7e1      	b.n	8017dfc <_sungetc_r+0x8>
 8017e38:	6921      	ldr	r1, [r4, #16]
 8017e3a:	6823      	ldr	r3, [r4, #0]
 8017e3c:	b151      	cbz	r1, 8017e54 <_sungetc_r+0x60>
 8017e3e:	4299      	cmp	r1, r3
 8017e40:	d208      	bcs.n	8017e54 <_sungetc_r+0x60>
 8017e42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017e46:	42a9      	cmp	r1, r5
 8017e48:	d104      	bne.n	8017e54 <_sungetc_r+0x60>
 8017e4a:	3b01      	subs	r3, #1
 8017e4c:	3201      	adds	r2, #1
 8017e4e:	6023      	str	r3, [r4, #0]
 8017e50:	6062      	str	r2, [r4, #4]
 8017e52:	e7d5      	b.n	8017e00 <_sungetc_r+0xc>
 8017e54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8017e5e:	2303      	movs	r3, #3
 8017e60:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e62:	4623      	mov	r3, r4
 8017e64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017e68:	6023      	str	r3, [r4, #0]
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	e7dc      	b.n	8017e28 <_sungetc_r+0x34>

08017e6e <__ssrefill_r>:
 8017e6e:	b510      	push	{r4, lr}
 8017e70:	460c      	mov	r4, r1
 8017e72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e74:	b169      	cbz	r1, 8017e92 <__ssrefill_r+0x24>
 8017e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e7a:	4299      	cmp	r1, r3
 8017e7c:	d001      	beq.n	8017e82 <__ssrefill_r+0x14>
 8017e7e:	f7fe fa1d 	bl	80162bc <_free_r>
 8017e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e84:	6063      	str	r3, [r4, #4]
 8017e86:	2000      	movs	r0, #0
 8017e88:	6360      	str	r0, [r4, #52]	; 0x34
 8017e8a:	b113      	cbz	r3, 8017e92 <__ssrefill_r+0x24>
 8017e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e8e:	6023      	str	r3, [r4, #0]
 8017e90:	bd10      	pop	{r4, pc}
 8017e92:	6923      	ldr	r3, [r4, #16]
 8017e94:	6023      	str	r3, [r4, #0]
 8017e96:	2300      	movs	r3, #0
 8017e98:	6063      	str	r3, [r4, #4]
 8017e9a:	89a3      	ldrh	r3, [r4, #12]
 8017e9c:	f043 0320 	orr.w	r3, r3, #32
 8017ea0:	81a3      	strh	r3, [r4, #12]
 8017ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea6:	e7f3      	b.n	8017e90 <__ssrefill_r+0x22>

08017ea8 <__ssvfiscanf_r>:
 8017ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eac:	460c      	mov	r4, r1
 8017eae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017eb2:	2100      	movs	r1, #0
 8017eb4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017eb8:	49a6      	ldr	r1, [pc, #664]	; (8018154 <__ssvfiscanf_r+0x2ac>)
 8017eba:	91a0      	str	r1, [sp, #640]	; 0x280
 8017ebc:	f10d 0804 	add.w	r8, sp, #4
 8017ec0:	49a5      	ldr	r1, [pc, #660]	; (8018158 <__ssvfiscanf_r+0x2b0>)
 8017ec2:	4fa6      	ldr	r7, [pc, #664]	; (801815c <__ssvfiscanf_r+0x2b4>)
 8017ec4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018160 <__ssvfiscanf_r+0x2b8>
 8017ec8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017ecc:	4606      	mov	r6, r0
 8017ece:	91a1      	str	r1, [sp, #644]	; 0x284
 8017ed0:	9300      	str	r3, [sp, #0]
 8017ed2:	7813      	ldrb	r3, [r2, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	f000 815a 	beq.w	801818e <__ssvfiscanf_r+0x2e6>
 8017eda:	5cf9      	ldrb	r1, [r7, r3]
 8017edc:	f011 0108 	ands.w	r1, r1, #8
 8017ee0:	f102 0501 	add.w	r5, r2, #1
 8017ee4:	d019      	beq.n	8017f1a <__ssvfiscanf_r+0x72>
 8017ee6:	6863      	ldr	r3, [r4, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	dd0f      	ble.n	8017f0c <__ssvfiscanf_r+0x64>
 8017eec:	6823      	ldr	r3, [r4, #0]
 8017eee:	781a      	ldrb	r2, [r3, #0]
 8017ef0:	5cba      	ldrb	r2, [r7, r2]
 8017ef2:	0712      	lsls	r2, r2, #28
 8017ef4:	d401      	bmi.n	8017efa <__ssvfiscanf_r+0x52>
 8017ef6:	462a      	mov	r2, r5
 8017ef8:	e7eb      	b.n	8017ed2 <__ssvfiscanf_r+0x2a>
 8017efa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017efc:	3201      	adds	r2, #1
 8017efe:	9245      	str	r2, [sp, #276]	; 0x114
 8017f00:	6862      	ldr	r2, [r4, #4]
 8017f02:	3301      	adds	r3, #1
 8017f04:	3a01      	subs	r2, #1
 8017f06:	6062      	str	r2, [r4, #4]
 8017f08:	6023      	str	r3, [r4, #0]
 8017f0a:	e7ec      	b.n	8017ee6 <__ssvfiscanf_r+0x3e>
 8017f0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f0e:	4621      	mov	r1, r4
 8017f10:	4630      	mov	r0, r6
 8017f12:	4798      	blx	r3
 8017f14:	2800      	cmp	r0, #0
 8017f16:	d0e9      	beq.n	8017eec <__ssvfiscanf_r+0x44>
 8017f18:	e7ed      	b.n	8017ef6 <__ssvfiscanf_r+0x4e>
 8017f1a:	2b25      	cmp	r3, #37	; 0x25
 8017f1c:	d012      	beq.n	8017f44 <__ssvfiscanf_r+0x9c>
 8017f1e:	469a      	mov	sl, r3
 8017f20:	6863      	ldr	r3, [r4, #4]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f340 8091 	ble.w	801804a <__ssvfiscanf_r+0x1a2>
 8017f28:	6822      	ldr	r2, [r4, #0]
 8017f2a:	7813      	ldrb	r3, [r2, #0]
 8017f2c:	4553      	cmp	r3, sl
 8017f2e:	f040 812e 	bne.w	801818e <__ssvfiscanf_r+0x2e6>
 8017f32:	6863      	ldr	r3, [r4, #4]
 8017f34:	3b01      	subs	r3, #1
 8017f36:	6063      	str	r3, [r4, #4]
 8017f38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017f3a:	3201      	adds	r2, #1
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	6022      	str	r2, [r4, #0]
 8017f40:	9345      	str	r3, [sp, #276]	; 0x114
 8017f42:	e7d8      	b.n	8017ef6 <__ssvfiscanf_r+0x4e>
 8017f44:	9141      	str	r1, [sp, #260]	; 0x104
 8017f46:	9143      	str	r1, [sp, #268]	; 0x10c
 8017f48:	7853      	ldrb	r3, [r2, #1]
 8017f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f4c:	bf02      	ittt	eq
 8017f4e:	2310      	moveq	r3, #16
 8017f50:	1c95      	addeq	r5, r2, #2
 8017f52:	9341      	streq	r3, [sp, #260]	; 0x104
 8017f54:	220a      	movs	r2, #10
 8017f56:	46aa      	mov	sl, r5
 8017f58:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017f5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017f60:	2b09      	cmp	r3, #9
 8017f62:	d91c      	bls.n	8017f9e <__ssvfiscanf_r+0xf6>
 8017f64:	487e      	ldr	r0, [pc, #504]	; (8018160 <__ssvfiscanf_r+0x2b8>)
 8017f66:	2203      	movs	r2, #3
 8017f68:	f7e8 f95a 	bl	8000220 <memchr>
 8017f6c:	b138      	cbz	r0, 8017f7e <__ssvfiscanf_r+0xd6>
 8017f6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f70:	eba0 0009 	sub.w	r0, r0, r9
 8017f74:	2301      	movs	r3, #1
 8017f76:	4083      	lsls	r3, r0
 8017f78:	4313      	orrs	r3, r2
 8017f7a:	9341      	str	r3, [sp, #260]	; 0x104
 8017f7c:	4655      	mov	r5, sl
 8017f7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017f82:	2b78      	cmp	r3, #120	; 0x78
 8017f84:	d806      	bhi.n	8017f94 <__ssvfiscanf_r+0xec>
 8017f86:	2b57      	cmp	r3, #87	; 0x57
 8017f88:	d810      	bhi.n	8017fac <__ssvfiscanf_r+0x104>
 8017f8a:	2b25      	cmp	r3, #37	; 0x25
 8017f8c:	d0c7      	beq.n	8017f1e <__ssvfiscanf_r+0x76>
 8017f8e:	d857      	bhi.n	8018040 <__ssvfiscanf_r+0x198>
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d065      	beq.n	8018060 <__ssvfiscanf_r+0x1b8>
 8017f94:	2303      	movs	r3, #3
 8017f96:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f98:	230a      	movs	r3, #10
 8017f9a:	9342      	str	r3, [sp, #264]	; 0x108
 8017f9c:	e076      	b.n	801808c <__ssvfiscanf_r+0x1e4>
 8017f9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017fa0:	fb02 1103 	mla	r1, r2, r3, r1
 8017fa4:	3930      	subs	r1, #48	; 0x30
 8017fa6:	9143      	str	r1, [sp, #268]	; 0x10c
 8017fa8:	4655      	mov	r5, sl
 8017faa:	e7d4      	b.n	8017f56 <__ssvfiscanf_r+0xae>
 8017fac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017fb0:	2a20      	cmp	r2, #32
 8017fb2:	d8ef      	bhi.n	8017f94 <__ssvfiscanf_r+0xec>
 8017fb4:	a101      	add	r1, pc, #4	; (adr r1, 8017fbc <__ssvfiscanf_r+0x114>)
 8017fb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017fba:	bf00      	nop
 8017fbc:	0801806f 	.word	0x0801806f
 8017fc0:	08017f95 	.word	0x08017f95
 8017fc4:	08017f95 	.word	0x08017f95
 8017fc8:	080180cd 	.word	0x080180cd
 8017fcc:	08017f95 	.word	0x08017f95
 8017fd0:	08017f95 	.word	0x08017f95
 8017fd4:	08017f95 	.word	0x08017f95
 8017fd8:	08017f95 	.word	0x08017f95
 8017fdc:	08017f95 	.word	0x08017f95
 8017fe0:	08017f95 	.word	0x08017f95
 8017fe4:	08017f95 	.word	0x08017f95
 8017fe8:	080180e3 	.word	0x080180e3
 8017fec:	080180c9 	.word	0x080180c9
 8017ff0:	08018047 	.word	0x08018047
 8017ff4:	08018047 	.word	0x08018047
 8017ff8:	08018047 	.word	0x08018047
 8017ffc:	08017f95 	.word	0x08017f95
 8018000:	08018085 	.word	0x08018085
 8018004:	08017f95 	.word	0x08017f95
 8018008:	08017f95 	.word	0x08017f95
 801800c:	08017f95 	.word	0x08017f95
 8018010:	08017f95 	.word	0x08017f95
 8018014:	080180f3 	.word	0x080180f3
 8018018:	080180c1 	.word	0x080180c1
 801801c:	08018067 	.word	0x08018067
 8018020:	08017f95 	.word	0x08017f95
 8018024:	08017f95 	.word	0x08017f95
 8018028:	080180ef 	.word	0x080180ef
 801802c:	08017f95 	.word	0x08017f95
 8018030:	080180c9 	.word	0x080180c9
 8018034:	08017f95 	.word	0x08017f95
 8018038:	08017f95 	.word	0x08017f95
 801803c:	0801806f 	.word	0x0801806f
 8018040:	3b45      	subs	r3, #69	; 0x45
 8018042:	2b02      	cmp	r3, #2
 8018044:	d8a6      	bhi.n	8017f94 <__ssvfiscanf_r+0xec>
 8018046:	2305      	movs	r3, #5
 8018048:	e01f      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 801804a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801804c:	4621      	mov	r1, r4
 801804e:	4630      	mov	r0, r6
 8018050:	4798      	blx	r3
 8018052:	2800      	cmp	r0, #0
 8018054:	f43f af68 	beq.w	8017f28 <__ssvfiscanf_r+0x80>
 8018058:	9844      	ldr	r0, [sp, #272]	; 0x110
 801805a:	2800      	cmp	r0, #0
 801805c:	f040 808d 	bne.w	801817a <__ssvfiscanf_r+0x2d2>
 8018060:	f04f 30ff 	mov.w	r0, #4294967295
 8018064:	e08f      	b.n	8018186 <__ssvfiscanf_r+0x2de>
 8018066:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018068:	f042 0220 	orr.w	r2, r2, #32
 801806c:	9241      	str	r2, [sp, #260]	; 0x104
 801806e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018074:	9241      	str	r2, [sp, #260]	; 0x104
 8018076:	2210      	movs	r2, #16
 8018078:	2b6f      	cmp	r3, #111	; 0x6f
 801807a:	9242      	str	r2, [sp, #264]	; 0x108
 801807c:	bf34      	ite	cc
 801807e:	2303      	movcc	r3, #3
 8018080:	2304      	movcs	r3, #4
 8018082:	e002      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 8018084:	2300      	movs	r3, #0
 8018086:	9342      	str	r3, [sp, #264]	; 0x108
 8018088:	2303      	movs	r3, #3
 801808a:	9347      	str	r3, [sp, #284]	; 0x11c
 801808c:	6863      	ldr	r3, [r4, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	dd3d      	ble.n	801810e <__ssvfiscanf_r+0x266>
 8018092:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018094:	0659      	lsls	r1, r3, #25
 8018096:	d404      	bmi.n	80180a2 <__ssvfiscanf_r+0x1fa>
 8018098:	6823      	ldr	r3, [r4, #0]
 801809a:	781a      	ldrb	r2, [r3, #0]
 801809c:	5cba      	ldrb	r2, [r7, r2]
 801809e:	0712      	lsls	r2, r2, #28
 80180a0:	d43c      	bmi.n	801811c <__ssvfiscanf_r+0x274>
 80180a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80180a4:	2b02      	cmp	r3, #2
 80180a6:	dc4b      	bgt.n	8018140 <__ssvfiscanf_r+0x298>
 80180a8:	466b      	mov	r3, sp
 80180aa:	4622      	mov	r2, r4
 80180ac:	a941      	add	r1, sp, #260	; 0x104
 80180ae:	4630      	mov	r0, r6
 80180b0:	f000 f872 	bl	8018198 <_scanf_chars>
 80180b4:	2801      	cmp	r0, #1
 80180b6:	d06a      	beq.n	801818e <__ssvfiscanf_r+0x2e6>
 80180b8:	2802      	cmp	r0, #2
 80180ba:	f47f af1c 	bne.w	8017ef6 <__ssvfiscanf_r+0x4e>
 80180be:	e7cb      	b.n	8018058 <__ssvfiscanf_r+0x1b0>
 80180c0:	2308      	movs	r3, #8
 80180c2:	9342      	str	r3, [sp, #264]	; 0x108
 80180c4:	2304      	movs	r3, #4
 80180c6:	e7e0      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 80180c8:	220a      	movs	r2, #10
 80180ca:	e7d5      	b.n	8018078 <__ssvfiscanf_r+0x1d0>
 80180cc:	4629      	mov	r1, r5
 80180ce:	4640      	mov	r0, r8
 80180d0:	f000 fa5e 	bl	8018590 <__sccl>
 80180d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180da:	9341      	str	r3, [sp, #260]	; 0x104
 80180dc:	4605      	mov	r5, r0
 80180de:	2301      	movs	r3, #1
 80180e0:	e7d3      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 80180e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e8:	9341      	str	r3, [sp, #260]	; 0x104
 80180ea:	2300      	movs	r3, #0
 80180ec:	e7cd      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 80180ee:	2302      	movs	r3, #2
 80180f0:	e7cb      	b.n	801808a <__ssvfiscanf_r+0x1e2>
 80180f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80180f4:	06c3      	lsls	r3, r0, #27
 80180f6:	f53f aefe 	bmi.w	8017ef6 <__ssvfiscanf_r+0x4e>
 80180fa:	9b00      	ldr	r3, [sp, #0]
 80180fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180fe:	1d19      	adds	r1, r3, #4
 8018100:	9100      	str	r1, [sp, #0]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	07c0      	lsls	r0, r0, #31
 8018106:	bf4c      	ite	mi
 8018108:	801a      	strhmi	r2, [r3, #0]
 801810a:	601a      	strpl	r2, [r3, #0]
 801810c:	e6f3      	b.n	8017ef6 <__ssvfiscanf_r+0x4e>
 801810e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018110:	4621      	mov	r1, r4
 8018112:	4630      	mov	r0, r6
 8018114:	4798      	blx	r3
 8018116:	2800      	cmp	r0, #0
 8018118:	d0bb      	beq.n	8018092 <__ssvfiscanf_r+0x1ea>
 801811a:	e79d      	b.n	8018058 <__ssvfiscanf_r+0x1b0>
 801811c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801811e:	3201      	adds	r2, #1
 8018120:	9245      	str	r2, [sp, #276]	; 0x114
 8018122:	6862      	ldr	r2, [r4, #4]
 8018124:	3a01      	subs	r2, #1
 8018126:	2a00      	cmp	r2, #0
 8018128:	6062      	str	r2, [r4, #4]
 801812a:	dd02      	ble.n	8018132 <__ssvfiscanf_r+0x28a>
 801812c:	3301      	adds	r3, #1
 801812e:	6023      	str	r3, [r4, #0]
 8018130:	e7b2      	b.n	8018098 <__ssvfiscanf_r+0x1f0>
 8018132:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018134:	4621      	mov	r1, r4
 8018136:	4630      	mov	r0, r6
 8018138:	4798      	blx	r3
 801813a:	2800      	cmp	r0, #0
 801813c:	d0ac      	beq.n	8018098 <__ssvfiscanf_r+0x1f0>
 801813e:	e78b      	b.n	8018058 <__ssvfiscanf_r+0x1b0>
 8018140:	2b04      	cmp	r3, #4
 8018142:	dc0f      	bgt.n	8018164 <__ssvfiscanf_r+0x2bc>
 8018144:	466b      	mov	r3, sp
 8018146:	4622      	mov	r2, r4
 8018148:	a941      	add	r1, sp, #260	; 0x104
 801814a:	4630      	mov	r0, r6
 801814c:	f000 f87e 	bl	801824c <_scanf_i>
 8018150:	e7b0      	b.n	80180b4 <__ssvfiscanf_r+0x20c>
 8018152:	bf00      	nop
 8018154:	08017df5 	.word	0x08017df5
 8018158:	08017e6f 	.word	0x08017e6f
 801815c:	0801c171 	.word	0x0801c171
 8018160:	0801c277 	.word	0x0801c277
 8018164:	4b0b      	ldr	r3, [pc, #44]	; (8018194 <__ssvfiscanf_r+0x2ec>)
 8018166:	2b00      	cmp	r3, #0
 8018168:	f43f aec5 	beq.w	8017ef6 <__ssvfiscanf_r+0x4e>
 801816c:	466b      	mov	r3, sp
 801816e:	4622      	mov	r2, r4
 8018170:	a941      	add	r1, sp, #260	; 0x104
 8018172:	4630      	mov	r0, r6
 8018174:	f7fc fdc8 	bl	8014d08 <_scanf_float>
 8018178:	e79c      	b.n	80180b4 <__ssvfiscanf_r+0x20c>
 801817a:	89a3      	ldrh	r3, [r4, #12]
 801817c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018180:	bf18      	it	ne
 8018182:	f04f 30ff 	movne.w	r0, #4294967295
 8018186:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801818e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018190:	e7f9      	b.n	8018186 <__ssvfiscanf_r+0x2de>
 8018192:	bf00      	nop
 8018194:	08014d09 	.word	0x08014d09

08018198 <_scanf_chars>:
 8018198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801819c:	4615      	mov	r5, r2
 801819e:	688a      	ldr	r2, [r1, #8]
 80181a0:	4680      	mov	r8, r0
 80181a2:	460c      	mov	r4, r1
 80181a4:	b932      	cbnz	r2, 80181b4 <_scanf_chars+0x1c>
 80181a6:	698a      	ldr	r2, [r1, #24]
 80181a8:	2a00      	cmp	r2, #0
 80181aa:	bf0c      	ite	eq
 80181ac:	2201      	moveq	r2, #1
 80181ae:	f04f 32ff 	movne.w	r2, #4294967295
 80181b2:	608a      	str	r2, [r1, #8]
 80181b4:	6822      	ldr	r2, [r4, #0]
 80181b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018248 <_scanf_chars+0xb0>
 80181ba:	06d1      	lsls	r1, r2, #27
 80181bc:	bf5f      	itttt	pl
 80181be:	681a      	ldrpl	r2, [r3, #0]
 80181c0:	1d11      	addpl	r1, r2, #4
 80181c2:	6019      	strpl	r1, [r3, #0]
 80181c4:	6816      	ldrpl	r6, [r2, #0]
 80181c6:	2700      	movs	r7, #0
 80181c8:	69a0      	ldr	r0, [r4, #24]
 80181ca:	b188      	cbz	r0, 80181f0 <_scanf_chars+0x58>
 80181cc:	2801      	cmp	r0, #1
 80181ce:	d107      	bne.n	80181e0 <_scanf_chars+0x48>
 80181d0:	682a      	ldr	r2, [r5, #0]
 80181d2:	7811      	ldrb	r1, [r2, #0]
 80181d4:	6962      	ldr	r2, [r4, #20]
 80181d6:	5c52      	ldrb	r2, [r2, r1]
 80181d8:	b952      	cbnz	r2, 80181f0 <_scanf_chars+0x58>
 80181da:	2f00      	cmp	r7, #0
 80181dc:	d031      	beq.n	8018242 <_scanf_chars+0xaa>
 80181de:	e022      	b.n	8018226 <_scanf_chars+0x8e>
 80181e0:	2802      	cmp	r0, #2
 80181e2:	d120      	bne.n	8018226 <_scanf_chars+0x8e>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80181ec:	071b      	lsls	r3, r3, #28
 80181ee:	d41a      	bmi.n	8018226 <_scanf_chars+0x8e>
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	06da      	lsls	r2, r3, #27
 80181f4:	bf5e      	ittt	pl
 80181f6:	682b      	ldrpl	r3, [r5, #0]
 80181f8:	781b      	ldrbpl	r3, [r3, #0]
 80181fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80181fe:	682a      	ldr	r2, [r5, #0]
 8018200:	686b      	ldr	r3, [r5, #4]
 8018202:	3201      	adds	r2, #1
 8018204:	602a      	str	r2, [r5, #0]
 8018206:	68a2      	ldr	r2, [r4, #8]
 8018208:	3b01      	subs	r3, #1
 801820a:	3a01      	subs	r2, #1
 801820c:	606b      	str	r3, [r5, #4]
 801820e:	3701      	adds	r7, #1
 8018210:	60a2      	str	r2, [r4, #8]
 8018212:	b142      	cbz	r2, 8018226 <_scanf_chars+0x8e>
 8018214:	2b00      	cmp	r3, #0
 8018216:	dcd7      	bgt.n	80181c8 <_scanf_chars+0x30>
 8018218:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801821c:	4629      	mov	r1, r5
 801821e:	4640      	mov	r0, r8
 8018220:	4798      	blx	r3
 8018222:	2800      	cmp	r0, #0
 8018224:	d0d0      	beq.n	80181c8 <_scanf_chars+0x30>
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	f013 0310 	ands.w	r3, r3, #16
 801822c:	d105      	bne.n	801823a <_scanf_chars+0xa2>
 801822e:	68e2      	ldr	r2, [r4, #12]
 8018230:	3201      	adds	r2, #1
 8018232:	60e2      	str	r2, [r4, #12]
 8018234:	69a2      	ldr	r2, [r4, #24]
 8018236:	b102      	cbz	r2, 801823a <_scanf_chars+0xa2>
 8018238:	7033      	strb	r3, [r6, #0]
 801823a:	6923      	ldr	r3, [r4, #16]
 801823c:	443b      	add	r3, r7
 801823e:	6123      	str	r3, [r4, #16]
 8018240:	2000      	movs	r0, #0
 8018242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018246:	bf00      	nop
 8018248:	0801c171 	.word	0x0801c171

0801824c <_scanf_i>:
 801824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018250:	4698      	mov	r8, r3
 8018252:	4b74      	ldr	r3, [pc, #464]	; (8018424 <_scanf_i+0x1d8>)
 8018254:	460c      	mov	r4, r1
 8018256:	4682      	mov	sl, r0
 8018258:	4616      	mov	r6, r2
 801825a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801825e:	b087      	sub	sp, #28
 8018260:	ab03      	add	r3, sp, #12
 8018262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018266:	4b70      	ldr	r3, [pc, #448]	; (8018428 <_scanf_i+0x1dc>)
 8018268:	69a1      	ldr	r1, [r4, #24]
 801826a:	4a70      	ldr	r2, [pc, #448]	; (801842c <_scanf_i+0x1e0>)
 801826c:	2903      	cmp	r1, #3
 801826e:	bf18      	it	ne
 8018270:	461a      	movne	r2, r3
 8018272:	68a3      	ldr	r3, [r4, #8]
 8018274:	9201      	str	r2, [sp, #4]
 8018276:	1e5a      	subs	r2, r3, #1
 8018278:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801827c:	bf88      	it	hi
 801827e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018282:	4627      	mov	r7, r4
 8018284:	bf82      	ittt	hi
 8018286:	eb03 0905 	addhi.w	r9, r3, r5
 801828a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801828e:	60a3      	strhi	r3, [r4, #8]
 8018290:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018294:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018298:	bf98      	it	ls
 801829a:	f04f 0900 	movls.w	r9, #0
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	463d      	mov	r5, r7
 80182a2:	f04f 0b00 	mov.w	fp, #0
 80182a6:	6831      	ldr	r1, [r6, #0]
 80182a8:	ab03      	add	r3, sp, #12
 80182aa:	7809      	ldrb	r1, [r1, #0]
 80182ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80182b0:	2202      	movs	r2, #2
 80182b2:	f7e7 ffb5 	bl	8000220 <memchr>
 80182b6:	b328      	cbz	r0, 8018304 <_scanf_i+0xb8>
 80182b8:	f1bb 0f01 	cmp.w	fp, #1
 80182bc:	d159      	bne.n	8018372 <_scanf_i+0x126>
 80182be:	6862      	ldr	r2, [r4, #4]
 80182c0:	b92a      	cbnz	r2, 80182ce <_scanf_i+0x82>
 80182c2:	6822      	ldr	r2, [r4, #0]
 80182c4:	2308      	movs	r3, #8
 80182c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182ca:	6063      	str	r3, [r4, #4]
 80182cc:	6022      	str	r2, [r4, #0]
 80182ce:	6822      	ldr	r2, [r4, #0]
 80182d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80182d4:	6022      	str	r2, [r4, #0]
 80182d6:	68a2      	ldr	r2, [r4, #8]
 80182d8:	1e51      	subs	r1, r2, #1
 80182da:	60a1      	str	r1, [r4, #8]
 80182dc:	b192      	cbz	r2, 8018304 <_scanf_i+0xb8>
 80182de:	6832      	ldr	r2, [r6, #0]
 80182e0:	1c51      	adds	r1, r2, #1
 80182e2:	6031      	str	r1, [r6, #0]
 80182e4:	7812      	ldrb	r2, [r2, #0]
 80182e6:	f805 2b01 	strb.w	r2, [r5], #1
 80182ea:	6872      	ldr	r2, [r6, #4]
 80182ec:	3a01      	subs	r2, #1
 80182ee:	2a00      	cmp	r2, #0
 80182f0:	6072      	str	r2, [r6, #4]
 80182f2:	dc07      	bgt.n	8018304 <_scanf_i+0xb8>
 80182f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80182f8:	4631      	mov	r1, r6
 80182fa:	4650      	mov	r0, sl
 80182fc:	4790      	blx	r2
 80182fe:	2800      	cmp	r0, #0
 8018300:	f040 8085 	bne.w	801840e <_scanf_i+0x1c2>
 8018304:	f10b 0b01 	add.w	fp, fp, #1
 8018308:	f1bb 0f03 	cmp.w	fp, #3
 801830c:	d1cb      	bne.n	80182a6 <_scanf_i+0x5a>
 801830e:	6863      	ldr	r3, [r4, #4]
 8018310:	b90b      	cbnz	r3, 8018316 <_scanf_i+0xca>
 8018312:	230a      	movs	r3, #10
 8018314:	6063      	str	r3, [r4, #4]
 8018316:	6863      	ldr	r3, [r4, #4]
 8018318:	4945      	ldr	r1, [pc, #276]	; (8018430 <_scanf_i+0x1e4>)
 801831a:	6960      	ldr	r0, [r4, #20]
 801831c:	1ac9      	subs	r1, r1, r3
 801831e:	f000 f937 	bl	8018590 <__sccl>
 8018322:	f04f 0b00 	mov.w	fp, #0
 8018326:	68a3      	ldr	r3, [r4, #8]
 8018328:	6822      	ldr	r2, [r4, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d03d      	beq.n	80183aa <_scanf_i+0x15e>
 801832e:	6831      	ldr	r1, [r6, #0]
 8018330:	6960      	ldr	r0, [r4, #20]
 8018332:	f891 c000 	ldrb.w	ip, [r1]
 8018336:	f810 000c 	ldrb.w	r0, [r0, ip]
 801833a:	2800      	cmp	r0, #0
 801833c:	d035      	beq.n	80183aa <_scanf_i+0x15e>
 801833e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018342:	d124      	bne.n	801838e <_scanf_i+0x142>
 8018344:	0510      	lsls	r0, r2, #20
 8018346:	d522      	bpl.n	801838e <_scanf_i+0x142>
 8018348:	f10b 0b01 	add.w	fp, fp, #1
 801834c:	f1b9 0f00 	cmp.w	r9, #0
 8018350:	d003      	beq.n	801835a <_scanf_i+0x10e>
 8018352:	3301      	adds	r3, #1
 8018354:	f109 39ff 	add.w	r9, r9, #4294967295
 8018358:	60a3      	str	r3, [r4, #8]
 801835a:	6873      	ldr	r3, [r6, #4]
 801835c:	3b01      	subs	r3, #1
 801835e:	2b00      	cmp	r3, #0
 8018360:	6073      	str	r3, [r6, #4]
 8018362:	dd1b      	ble.n	801839c <_scanf_i+0x150>
 8018364:	6833      	ldr	r3, [r6, #0]
 8018366:	3301      	adds	r3, #1
 8018368:	6033      	str	r3, [r6, #0]
 801836a:	68a3      	ldr	r3, [r4, #8]
 801836c:	3b01      	subs	r3, #1
 801836e:	60a3      	str	r3, [r4, #8]
 8018370:	e7d9      	b.n	8018326 <_scanf_i+0xda>
 8018372:	f1bb 0f02 	cmp.w	fp, #2
 8018376:	d1ae      	bne.n	80182d6 <_scanf_i+0x8a>
 8018378:	6822      	ldr	r2, [r4, #0]
 801837a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801837e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018382:	d1bf      	bne.n	8018304 <_scanf_i+0xb8>
 8018384:	2310      	movs	r3, #16
 8018386:	6063      	str	r3, [r4, #4]
 8018388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801838c:	e7a2      	b.n	80182d4 <_scanf_i+0x88>
 801838e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018392:	6022      	str	r2, [r4, #0]
 8018394:	780b      	ldrb	r3, [r1, #0]
 8018396:	f805 3b01 	strb.w	r3, [r5], #1
 801839a:	e7de      	b.n	801835a <_scanf_i+0x10e>
 801839c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183a0:	4631      	mov	r1, r6
 80183a2:	4650      	mov	r0, sl
 80183a4:	4798      	blx	r3
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d0df      	beq.n	801836a <_scanf_i+0x11e>
 80183aa:	6823      	ldr	r3, [r4, #0]
 80183ac:	05d9      	lsls	r1, r3, #23
 80183ae:	d50d      	bpl.n	80183cc <_scanf_i+0x180>
 80183b0:	42bd      	cmp	r5, r7
 80183b2:	d909      	bls.n	80183c8 <_scanf_i+0x17c>
 80183b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80183b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80183bc:	4632      	mov	r2, r6
 80183be:	4650      	mov	r0, sl
 80183c0:	4798      	blx	r3
 80183c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80183c6:	464d      	mov	r5, r9
 80183c8:	42bd      	cmp	r5, r7
 80183ca:	d028      	beq.n	801841e <_scanf_i+0x1d2>
 80183cc:	6822      	ldr	r2, [r4, #0]
 80183ce:	f012 0210 	ands.w	r2, r2, #16
 80183d2:	d113      	bne.n	80183fc <_scanf_i+0x1b0>
 80183d4:	702a      	strb	r2, [r5, #0]
 80183d6:	6863      	ldr	r3, [r4, #4]
 80183d8:	9e01      	ldr	r6, [sp, #4]
 80183da:	4639      	mov	r1, r7
 80183dc:	4650      	mov	r0, sl
 80183de:	47b0      	blx	r6
 80183e0:	f8d8 3000 	ldr.w	r3, [r8]
 80183e4:	6821      	ldr	r1, [r4, #0]
 80183e6:	1d1a      	adds	r2, r3, #4
 80183e8:	f8c8 2000 	str.w	r2, [r8]
 80183ec:	f011 0f20 	tst.w	r1, #32
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	d00f      	beq.n	8018414 <_scanf_i+0x1c8>
 80183f4:	6018      	str	r0, [r3, #0]
 80183f6:	68e3      	ldr	r3, [r4, #12]
 80183f8:	3301      	adds	r3, #1
 80183fa:	60e3      	str	r3, [r4, #12]
 80183fc:	6923      	ldr	r3, [r4, #16]
 80183fe:	1bed      	subs	r5, r5, r7
 8018400:	445d      	add	r5, fp
 8018402:	442b      	add	r3, r5
 8018404:	6123      	str	r3, [r4, #16]
 8018406:	2000      	movs	r0, #0
 8018408:	b007      	add	sp, #28
 801840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801840e:	f04f 0b00 	mov.w	fp, #0
 8018412:	e7ca      	b.n	80183aa <_scanf_i+0x15e>
 8018414:	07ca      	lsls	r2, r1, #31
 8018416:	bf4c      	ite	mi
 8018418:	8018      	strhmi	r0, [r3, #0]
 801841a:	6018      	strpl	r0, [r3, #0]
 801841c:	e7eb      	b.n	80183f6 <_scanf_i+0x1aa>
 801841e:	2001      	movs	r0, #1
 8018420:	e7f2      	b.n	8018408 <_scanf_i+0x1bc>
 8018422:	bf00      	nop
 8018424:	0801be00 	.word	0x0801be00
 8018428:	08018f5d 	.word	0x08018f5d
 801842c:	08017b41 	.word	0x08017b41
 8018430:	0801c292 	.word	0x0801c292

08018434 <__sflush_r>:
 8018434:	898a      	ldrh	r2, [r1, #12]
 8018436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801843a:	4605      	mov	r5, r0
 801843c:	0710      	lsls	r0, r2, #28
 801843e:	460c      	mov	r4, r1
 8018440:	d458      	bmi.n	80184f4 <__sflush_r+0xc0>
 8018442:	684b      	ldr	r3, [r1, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	dc05      	bgt.n	8018454 <__sflush_r+0x20>
 8018448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801844a:	2b00      	cmp	r3, #0
 801844c:	dc02      	bgt.n	8018454 <__sflush_r+0x20>
 801844e:	2000      	movs	r0, #0
 8018450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018456:	2e00      	cmp	r6, #0
 8018458:	d0f9      	beq.n	801844e <__sflush_r+0x1a>
 801845a:	2300      	movs	r3, #0
 801845c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018460:	682f      	ldr	r7, [r5, #0]
 8018462:	6a21      	ldr	r1, [r4, #32]
 8018464:	602b      	str	r3, [r5, #0]
 8018466:	d032      	beq.n	80184ce <__sflush_r+0x9a>
 8018468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801846a:	89a3      	ldrh	r3, [r4, #12]
 801846c:	075a      	lsls	r2, r3, #29
 801846e:	d505      	bpl.n	801847c <__sflush_r+0x48>
 8018470:	6863      	ldr	r3, [r4, #4]
 8018472:	1ac0      	subs	r0, r0, r3
 8018474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018476:	b10b      	cbz	r3, 801847c <__sflush_r+0x48>
 8018478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801847a:	1ac0      	subs	r0, r0, r3
 801847c:	2300      	movs	r3, #0
 801847e:	4602      	mov	r2, r0
 8018480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018482:	6a21      	ldr	r1, [r4, #32]
 8018484:	4628      	mov	r0, r5
 8018486:	47b0      	blx	r6
 8018488:	1c43      	adds	r3, r0, #1
 801848a:	89a3      	ldrh	r3, [r4, #12]
 801848c:	d106      	bne.n	801849c <__sflush_r+0x68>
 801848e:	6829      	ldr	r1, [r5, #0]
 8018490:	291d      	cmp	r1, #29
 8018492:	d82b      	bhi.n	80184ec <__sflush_r+0xb8>
 8018494:	4a29      	ldr	r2, [pc, #164]	; (801853c <__sflush_r+0x108>)
 8018496:	410a      	asrs	r2, r1
 8018498:	07d6      	lsls	r6, r2, #31
 801849a:	d427      	bmi.n	80184ec <__sflush_r+0xb8>
 801849c:	2200      	movs	r2, #0
 801849e:	6062      	str	r2, [r4, #4]
 80184a0:	04d9      	lsls	r1, r3, #19
 80184a2:	6922      	ldr	r2, [r4, #16]
 80184a4:	6022      	str	r2, [r4, #0]
 80184a6:	d504      	bpl.n	80184b2 <__sflush_r+0x7e>
 80184a8:	1c42      	adds	r2, r0, #1
 80184aa:	d101      	bne.n	80184b0 <__sflush_r+0x7c>
 80184ac:	682b      	ldr	r3, [r5, #0]
 80184ae:	b903      	cbnz	r3, 80184b2 <__sflush_r+0x7e>
 80184b0:	6560      	str	r0, [r4, #84]	; 0x54
 80184b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184b4:	602f      	str	r7, [r5, #0]
 80184b6:	2900      	cmp	r1, #0
 80184b8:	d0c9      	beq.n	801844e <__sflush_r+0x1a>
 80184ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184be:	4299      	cmp	r1, r3
 80184c0:	d002      	beq.n	80184c8 <__sflush_r+0x94>
 80184c2:	4628      	mov	r0, r5
 80184c4:	f7fd fefa 	bl	80162bc <_free_r>
 80184c8:	2000      	movs	r0, #0
 80184ca:	6360      	str	r0, [r4, #52]	; 0x34
 80184cc:	e7c0      	b.n	8018450 <__sflush_r+0x1c>
 80184ce:	2301      	movs	r3, #1
 80184d0:	4628      	mov	r0, r5
 80184d2:	47b0      	blx	r6
 80184d4:	1c41      	adds	r1, r0, #1
 80184d6:	d1c8      	bne.n	801846a <__sflush_r+0x36>
 80184d8:	682b      	ldr	r3, [r5, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d0c5      	beq.n	801846a <__sflush_r+0x36>
 80184de:	2b1d      	cmp	r3, #29
 80184e0:	d001      	beq.n	80184e6 <__sflush_r+0xb2>
 80184e2:	2b16      	cmp	r3, #22
 80184e4:	d101      	bne.n	80184ea <__sflush_r+0xb6>
 80184e6:	602f      	str	r7, [r5, #0]
 80184e8:	e7b1      	b.n	801844e <__sflush_r+0x1a>
 80184ea:	89a3      	ldrh	r3, [r4, #12]
 80184ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184f0:	81a3      	strh	r3, [r4, #12]
 80184f2:	e7ad      	b.n	8018450 <__sflush_r+0x1c>
 80184f4:	690f      	ldr	r7, [r1, #16]
 80184f6:	2f00      	cmp	r7, #0
 80184f8:	d0a9      	beq.n	801844e <__sflush_r+0x1a>
 80184fa:	0793      	lsls	r3, r2, #30
 80184fc:	680e      	ldr	r6, [r1, #0]
 80184fe:	bf08      	it	eq
 8018500:	694b      	ldreq	r3, [r1, #20]
 8018502:	600f      	str	r7, [r1, #0]
 8018504:	bf18      	it	ne
 8018506:	2300      	movne	r3, #0
 8018508:	eba6 0807 	sub.w	r8, r6, r7
 801850c:	608b      	str	r3, [r1, #8]
 801850e:	f1b8 0f00 	cmp.w	r8, #0
 8018512:	dd9c      	ble.n	801844e <__sflush_r+0x1a>
 8018514:	6a21      	ldr	r1, [r4, #32]
 8018516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018518:	4643      	mov	r3, r8
 801851a:	463a      	mov	r2, r7
 801851c:	4628      	mov	r0, r5
 801851e:	47b0      	blx	r6
 8018520:	2800      	cmp	r0, #0
 8018522:	dc06      	bgt.n	8018532 <__sflush_r+0xfe>
 8018524:	89a3      	ldrh	r3, [r4, #12]
 8018526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801852a:	81a3      	strh	r3, [r4, #12]
 801852c:	f04f 30ff 	mov.w	r0, #4294967295
 8018530:	e78e      	b.n	8018450 <__sflush_r+0x1c>
 8018532:	4407      	add	r7, r0
 8018534:	eba8 0800 	sub.w	r8, r8, r0
 8018538:	e7e9      	b.n	801850e <__sflush_r+0xda>
 801853a:	bf00      	nop
 801853c:	dfbffffe 	.word	0xdfbffffe

08018540 <_fflush_r>:
 8018540:	b538      	push	{r3, r4, r5, lr}
 8018542:	690b      	ldr	r3, [r1, #16]
 8018544:	4605      	mov	r5, r0
 8018546:	460c      	mov	r4, r1
 8018548:	b913      	cbnz	r3, 8018550 <_fflush_r+0x10>
 801854a:	2500      	movs	r5, #0
 801854c:	4628      	mov	r0, r5
 801854e:	bd38      	pop	{r3, r4, r5, pc}
 8018550:	b118      	cbz	r0, 801855a <_fflush_r+0x1a>
 8018552:	6a03      	ldr	r3, [r0, #32]
 8018554:	b90b      	cbnz	r3, 801855a <_fflush_r+0x1a>
 8018556:	f7fc fe73 	bl	8015240 <__sinit>
 801855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d0f3      	beq.n	801854a <_fflush_r+0xa>
 8018562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018564:	07d0      	lsls	r0, r2, #31
 8018566:	d404      	bmi.n	8018572 <_fflush_r+0x32>
 8018568:	0599      	lsls	r1, r3, #22
 801856a:	d402      	bmi.n	8018572 <_fflush_r+0x32>
 801856c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801856e:	f7fd f814 	bl	801559a <__retarget_lock_acquire_recursive>
 8018572:	4628      	mov	r0, r5
 8018574:	4621      	mov	r1, r4
 8018576:	f7ff ff5d 	bl	8018434 <__sflush_r>
 801857a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801857c:	07da      	lsls	r2, r3, #31
 801857e:	4605      	mov	r5, r0
 8018580:	d4e4      	bmi.n	801854c <_fflush_r+0xc>
 8018582:	89a3      	ldrh	r3, [r4, #12]
 8018584:	059b      	lsls	r3, r3, #22
 8018586:	d4e1      	bmi.n	801854c <_fflush_r+0xc>
 8018588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801858a:	f7fd f807 	bl	801559c <__retarget_lock_release_recursive>
 801858e:	e7dd      	b.n	801854c <_fflush_r+0xc>

08018590 <__sccl>:
 8018590:	b570      	push	{r4, r5, r6, lr}
 8018592:	780b      	ldrb	r3, [r1, #0]
 8018594:	4604      	mov	r4, r0
 8018596:	2b5e      	cmp	r3, #94	; 0x5e
 8018598:	bf0b      	itete	eq
 801859a:	784b      	ldrbeq	r3, [r1, #1]
 801859c:	1c4a      	addne	r2, r1, #1
 801859e:	1c8a      	addeq	r2, r1, #2
 80185a0:	2100      	movne	r1, #0
 80185a2:	bf08      	it	eq
 80185a4:	2101      	moveq	r1, #1
 80185a6:	3801      	subs	r0, #1
 80185a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80185ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80185b0:	42a8      	cmp	r0, r5
 80185b2:	d1fb      	bne.n	80185ac <__sccl+0x1c>
 80185b4:	b90b      	cbnz	r3, 80185ba <__sccl+0x2a>
 80185b6:	1e50      	subs	r0, r2, #1
 80185b8:	bd70      	pop	{r4, r5, r6, pc}
 80185ba:	f081 0101 	eor.w	r1, r1, #1
 80185be:	54e1      	strb	r1, [r4, r3]
 80185c0:	4610      	mov	r0, r2
 80185c2:	4602      	mov	r2, r0
 80185c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80185c8:	2d2d      	cmp	r5, #45	; 0x2d
 80185ca:	d005      	beq.n	80185d8 <__sccl+0x48>
 80185cc:	2d5d      	cmp	r5, #93	; 0x5d
 80185ce:	d016      	beq.n	80185fe <__sccl+0x6e>
 80185d0:	2d00      	cmp	r5, #0
 80185d2:	d0f1      	beq.n	80185b8 <__sccl+0x28>
 80185d4:	462b      	mov	r3, r5
 80185d6:	e7f2      	b.n	80185be <__sccl+0x2e>
 80185d8:	7846      	ldrb	r6, [r0, #1]
 80185da:	2e5d      	cmp	r6, #93	; 0x5d
 80185dc:	d0fa      	beq.n	80185d4 <__sccl+0x44>
 80185de:	42b3      	cmp	r3, r6
 80185e0:	dcf8      	bgt.n	80185d4 <__sccl+0x44>
 80185e2:	3002      	adds	r0, #2
 80185e4:	461a      	mov	r2, r3
 80185e6:	3201      	adds	r2, #1
 80185e8:	4296      	cmp	r6, r2
 80185ea:	54a1      	strb	r1, [r4, r2]
 80185ec:	dcfb      	bgt.n	80185e6 <__sccl+0x56>
 80185ee:	1af2      	subs	r2, r6, r3
 80185f0:	3a01      	subs	r2, #1
 80185f2:	1c5d      	adds	r5, r3, #1
 80185f4:	42b3      	cmp	r3, r6
 80185f6:	bfa8      	it	ge
 80185f8:	2200      	movge	r2, #0
 80185fa:	18ab      	adds	r3, r5, r2
 80185fc:	e7e1      	b.n	80185c2 <__sccl+0x32>
 80185fe:	4610      	mov	r0, r2
 8018600:	e7da      	b.n	80185b8 <__sccl+0x28>

08018602 <__submore>:
 8018602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018606:	460c      	mov	r4, r1
 8018608:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801860a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801860e:	4299      	cmp	r1, r3
 8018610:	d11d      	bne.n	801864e <__submore+0x4c>
 8018612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018616:	f7fd fec5 	bl	80163a4 <_malloc_r>
 801861a:	b918      	cbnz	r0, 8018624 <__submore+0x22>
 801861c:	f04f 30ff 	mov.w	r0, #4294967295
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018628:	63a3      	str	r3, [r4, #56]	; 0x38
 801862a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801862e:	6360      	str	r0, [r4, #52]	; 0x34
 8018630:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018634:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018638:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801863c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018640:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018644:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018648:	6020      	str	r0, [r4, #0]
 801864a:	2000      	movs	r0, #0
 801864c:	e7e8      	b.n	8018620 <__submore+0x1e>
 801864e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018650:	0077      	lsls	r7, r6, #1
 8018652:	463a      	mov	r2, r7
 8018654:	f000 fbe1 	bl	8018e1a <_realloc_r>
 8018658:	4605      	mov	r5, r0
 801865a:	2800      	cmp	r0, #0
 801865c:	d0de      	beq.n	801861c <__submore+0x1a>
 801865e:	eb00 0806 	add.w	r8, r0, r6
 8018662:	4601      	mov	r1, r0
 8018664:	4632      	mov	r2, r6
 8018666:	4640      	mov	r0, r8
 8018668:	f7fc ff99 	bl	801559e <memcpy>
 801866c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018670:	f8c4 8000 	str.w	r8, [r4]
 8018674:	e7e9      	b.n	801864a <__submore+0x48>

08018676 <memmove>:
 8018676:	4288      	cmp	r0, r1
 8018678:	b510      	push	{r4, lr}
 801867a:	eb01 0402 	add.w	r4, r1, r2
 801867e:	d902      	bls.n	8018686 <memmove+0x10>
 8018680:	4284      	cmp	r4, r0
 8018682:	4623      	mov	r3, r4
 8018684:	d807      	bhi.n	8018696 <memmove+0x20>
 8018686:	1e43      	subs	r3, r0, #1
 8018688:	42a1      	cmp	r1, r4
 801868a:	d008      	beq.n	801869e <memmove+0x28>
 801868c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018690:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018694:	e7f8      	b.n	8018688 <memmove+0x12>
 8018696:	4402      	add	r2, r0
 8018698:	4601      	mov	r1, r0
 801869a:	428a      	cmp	r2, r1
 801869c:	d100      	bne.n	80186a0 <memmove+0x2a>
 801869e:	bd10      	pop	{r4, pc}
 80186a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186a8:	e7f7      	b.n	801869a <memmove+0x24>
	...

080186ac <_sbrk_r>:
 80186ac:	b538      	push	{r3, r4, r5, lr}
 80186ae:	4d06      	ldr	r5, [pc, #24]	; (80186c8 <_sbrk_r+0x1c>)
 80186b0:	2300      	movs	r3, #0
 80186b2:	4604      	mov	r4, r0
 80186b4:	4608      	mov	r0, r1
 80186b6:	602b      	str	r3, [r5, #0]
 80186b8:	f7ee fca6 	bl	8007008 <_sbrk>
 80186bc:	1c43      	adds	r3, r0, #1
 80186be:	d102      	bne.n	80186c6 <_sbrk_r+0x1a>
 80186c0:	682b      	ldr	r3, [r5, #0]
 80186c2:	b103      	cbz	r3, 80186c6 <_sbrk_r+0x1a>
 80186c4:	6023      	str	r3, [r4, #0]
 80186c6:	bd38      	pop	{r3, r4, r5, pc}
 80186c8:	20009090 	.word	0x20009090
 80186cc:	00000000 	.word	0x00000000

080186d0 <nan>:
 80186d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80186d8 <nan+0x8>
 80186d4:	4770      	bx	lr
 80186d6:	bf00      	nop
 80186d8:	00000000 	.word	0x00000000
 80186dc:	7ff80000 	.word	0x7ff80000

080186e0 <__assert_func>:
 80186e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80186e2:	4614      	mov	r4, r2
 80186e4:	461a      	mov	r2, r3
 80186e6:	4b09      	ldr	r3, [pc, #36]	; (801870c <__assert_func+0x2c>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	4605      	mov	r5, r0
 80186ec:	68d8      	ldr	r0, [r3, #12]
 80186ee:	b14c      	cbz	r4, 8018704 <__assert_func+0x24>
 80186f0:	4b07      	ldr	r3, [pc, #28]	; (8018710 <__assert_func+0x30>)
 80186f2:	9100      	str	r1, [sp, #0]
 80186f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186f8:	4906      	ldr	r1, [pc, #24]	; (8018714 <__assert_func+0x34>)
 80186fa:	462b      	mov	r3, r5
 80186fc:	f000 fc3e 	bl	8018f7c <fiprintf>
 8018700:	f000 fc4e 	bl	8018fa0 <abort>
 8018704:	4b04      	ldr	r3, [pc, #16]	; (8018718 <__assert_func+0x38>)
 8018706:	461c      	mov	r4, r3
 8018708:	e7f3      	b.n	80186f2 <__assert_func+0x12>
 801870a:	bf00      	nop
 801870c:	20000070 	.word	0x20000070
 8018710:	0801c2a5 	.word	0x0801c2a5
 8018714:	0801c2b2 	.word	0x0801c2b2
 8018718:	0801c2e0 	.word	0x0801c2e0

0801871c <_calloc_r>:
 801871c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801871e:	fba1 2402 	umull	r2, r4, r1, r2
 8018722:	b94c      	cbnz	r4, 8018738 <_calloc_r+0x1c>
 8018724:	4611      	mov	r1, r2
 8018726:	9201      	str	r2, [sp, #4]
 8018728:	f7fd fe3c 	bl	80163a4 <_malloc_r>
 801872c:	9a01      	ldr	r2, [sp, #4]
 801872e:	4605      	mov	r5, r0
 8018730:	b930      	cbnz	r0, 8018740 <_calloc_r+0x24>
 8018732:	4628      	mov	r0, r5
 8018734:	b003      	add	sp, #12
 8018736:	bd30      	pop	{r4, r5, pc}
 8018738:	220c      	movs	r2, #12
 801873a:	6002      	str	r2, [r0, #0]
 801873c:	2500      	movs	r5, #0
 801873e:	e7f8      	b.n	8018732 <_calloc_r+0x16>
 8018740:	4621      	mov	r1, r4
 8018742:	f7fc fe44 	bl	80153ce <memset>
 8018746:	e7f4      	b.n	8018732 <_calloc_r+0x16>

08018748 <rshift>:
 8018748:	6903      	ldr	r3, [r0, #16]
 801874a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801874e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018752:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018756:	f100 0414 	add.w	r4, r0, #20
 801875a:	dd45      	ble.n	80187e8 <rshift+0xa0>
 801875c:	f011 011f 	ands.w	r1, r1, #31
 8018760:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018764:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018768:	d10c      	bne.n	8018784 <rshift+0x3c>
 801876a:	f100 0710 	add.w	r7, r0, #16
 801876e:	4629      	mov	r1, r5
 8018770:	42b1      	cmp	r1, r6
 8018772:	d334      	bcc.n	80187de <rshift+0x96>
 8018774:	1a9b      	subs	r3, r3, r2
 8018776:	009b      	lsls	r3, r3, #2
 8018778:	1eea      	subs	r2, r5, #3
 801877a:	4296      	cmp	r6, r2
 801877c:	bf38      	it	cc
 801877e:	2300      	movcc	r3, #0
 8018780:	4423      	add	r3, r4
 8018782:	e015      	b.n	80187b0 <rshift+0x68>
 8018784:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018788:	f1c1 0820 	rsb	r8, r1, #32
 801878c:	40cf      	lsrs	r7, r1
 801878e:	f105 0e04 	add.w	lr, r5, #4
 8018792:	46a1      	mov	r9, r4
 8018794:	4576      	cmp	r6, lr
 8018796:	46f4      	mov	ip, lr
 8018798:	d815      	bhi.n	80187c6 <rshift+0x7e>
 801879a:	1a9a      	subs	r2, r3, r2
 801879c:	0092      	lsls	r2, r2, #2
 801879e:	3a04      	subs	r2, #4
 80187a0:	3501      	adds	r5, #1
 80187a2:	42ae      	cmp	r6, r5
 80187a4:	bf38      	it	cc
 80187a6:	2200      	movcc	r2, #0
 80187a8:	18a3      	adds	r3, r4, r2
 80187aa:	50a7      	str	r7, [r4, r2]
 80187ac:	b107      	cbz	r7, 80187b0 <rshift+0x68>
 80187ae:	3304      	adds	r3, #4
 80187b0:	1b1a      	subs	r2, r3, r4
 80187b2:	42a3      	cmp	r3, r4
 80187b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80187b8:	bf08      	it	eq
 80187ba:	2300      	moveq	r3, #0
 80187bc:	6102      	str	r2, [r0, #16]
 80187be:	bf08      	it	eq
 80187c0:	6143      	streq	r3, [r0, #20]
 80187c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187c6:	f8dc c000 	ldr.w	ip, [ip]
 80187ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80187ce:	ea4c 0707 	orr.w	r7, ip, r7
 80187d2:	f849 7b04 	str.w	r7, [r9], #4
 80187d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80187da:	40cf      	lsrs	r7, r1
 80187dc:	e7da      	b.n	8018794 <rshift+0x4c>
 80187de:	f851 cb04 	ldr.w	ip, [r1], #4
 80187e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80187e6:	e7c3      	b.n	8018770 <rshift+0x28>
 80187e8:	4623      	mov	r3, r4
 80187ea:	e7e1      	b.n	80187b0 <rshift+0x68>

080187ec <__hexdig_fun>:
 80187ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80187f0:	2b09      	cmp	r3, #9
 80187f2:	d802      	bhi.n	80187fa <__hexdig_fun+0xe>
 80187f4:	3820      	subs	r0, #32
 80187f6:	b2c0      	uxtb	r0, r0
 80187f8:	4770      	bx	lr
 80187fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80187fe:	2b05      	cmp	r3, #5
 8018800:	d801      	bhi.n	8018806 <__hexdig_fun+0x1a>
 8018802:	3847      	subs	r0, #71	; 0x47
 8018804:	e7f7      	b.n	80187f6 <__hexdig_fun+0xa>
 8018806:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801880a:	2b05      	cmp	r3, #5
 801880c:	d801      	bhi.n	8018812 <__hexdig_fun+0x26>
 801880e:	3827      	subs	r0, #39	; 0x27
 8018810:	e7f1      	b.n	80187f6 <__hexdig_fun+0xa>
 8018812:	2000      	movs	r0, #0
 8018814:	4770      	bx	lr
	...

08018818 <__gethex>:
 8018818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881c:	4617      	mov	r7, r2
 801881e:	680a      	ldr	r2, [r1, #0]
 8018820:	b085      	sub	sp, #20
 8018822:	f102 0b02 	add.w	fp, r2, #2
 8018826:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801882a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801882e:	4681      	mov	r9, r0
 8018830:	468a      	mov	sl, r1
 8018832:	9302      	str	r3, [sp, #8]
 8018834:	32fe      	adds	r2, #254	; 0xfe
 8018836:	eb02 030b 	add.w	r3, r2, fp
 801883a:	46d8      	mov	r8, fp
 801883c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	2830      	cmp	r0, #48	; 0x30
 8018844:	d0f7      	beq.n	8018836 <__gethex+0x1e>
 8018846:	f7ff ffd1 	bl	80187ec <__hexdig_fun>
 801884a:	4604      	mov	r4, r0
 801884c:	2800      	cmp	r0, #0
 801884e:	d138      	bne.n	80188c2 <__gethex+0xaa>
 8018850:	49a7      	ldr	r1, [pc, #668]	; (8018af0 <__gethex+0x2d8>)
 8018852:	2201      	movs	r2, #1
 8018854:	4640      	mov	r0, r8
 8018856:	f7fc fdc2 	bl	80153de <strncmp>
 801885a:	4606      	mov	r6, r0
 801885c:	2800      	cmp	r0, #0
 801885e:	d169      	bne.n	8018934 <__gethex+0x11c>
 8018860:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018864:	465d      	mov	r5, fp
 8018866:	f7ff ffc1 	bl	80187ec <__hexdig_fun>
 801886a:	2800      	cmp	r0, #0
 801886c:	d064      	beq.n	8018938 <__gethex+0x120>
 801886e:	465a      	mov	r2, fp
 8018870:	7810      	ldrb	r0, [r2, #0]
 8018872:	2830      	cmp	r0, #48	; 0x30
 8018874:	4690      	mov	r8, r2
 8018876:	f102 0201 	add.w	r2, r2, #1
 801887a:	d0f9      	beq.n	8018870 <__gethex+0x58>
 801887c:	f7ff ffb6 	bl	80187ec <__hexdig_fun>
 8018880:	2301      	movs	r3, #1
 8018882:	fab0 f480 	clz	r4, r0
 8018886:	0964      	lsrs	r4, r4, #5
 8018888:	465e      	mov	r6, fp
 801888a:	9301      	str	r3, [sp, #4]
 801888c:	4642      	mov	r2, r8
 801888e:	4615      	mov	r5, r2
 8018890:	3201      	adds	r2, #1
 8018892:	7828      	ldrb	r0, [r5, #0]
 8018894:	f7ff ffaa 	bl	80187ec <__hexdig_fun>
 8018898:	2800      	cmp	r0, #0
 801889a:	d1f8      	bne.n	801888e <__gethex+0x76>
 801889c:	4994      	ldr	r1, [pc, #592]	; (8018af0 <__gethex+0x2d8>)
 801889e:	2201      	movs	r2, #1
 80188a0:	4628      	mov	r0, r5
 80188a2:	f7fc fd9c 	bl	80153de <strncmp>
 80188a6:	b978      	cbnz	r0, 80188c8 <__gethex+0xb0>
 80188a8:	b946      	cbnz	r6, 80188bc <__gethex+0xa4>
 80188aa:	1c6e      	adds	r6, r5, #1
 80188ac:	4632      	mov	r2, r6
 80188ae:	4615      	mov	r5, r2
 80188b0:	3201      	adds	r2, #1
 80188b2:	7828      	ldrb	r0, [r5, #0]
 80188b4:	f7ff ff9a 	bl	80187ec <__hexdig_fun>
 80188b8:	2800      	cmp	r0, #0
 80188ba:	d1f8      	bne.n	80188ae <__gethex+0x96>
 80188bc:	1b73      	subs	r3, r6, r5
 80188be:	009e      	lsls	r6, r3, #2
 80188c0:	e004      	b.n	80188cc <__gethex+0xb4>
 80188c2:	2400      	movs	r4, #0
 80188c4:	4626      	mov	r6, r4
 80188c6:	e7e1      	b.n	801888c <__gethex+0x74>
 80188c8:	2e00      	cmp	r6, #0
 80188ca:	d1f7      	bne.n	80188bc <__gethex+0xa4>
 80188cc:	782b      	ldrb	r3, [r5, #0]
 80188ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80188d2:	2b50      	cmp	r3, #80	; 0x50
 80188d4:	d13d      	bne.n	8018952 <__gethex+0x13a>
 80188d6:	786b      	ldrb	r3, [r5, #1]
 80188d8:	2b2b      	cmp	r3, #43	; 0x2b
 80188da:	d02f      	beq.n	801893c <__gethex+0x124>
 80188dc:	2b2d      	cmp	r3, #45	; 0x2d
 80188de:	d031      	beq.n	8018944 <__gethex+0x12c>
 80188e0:	1c69      	adds	r1, r5, #1
 80188e2:	f04f 0b00 	mov.w	fp, #0
 80188e6:	7808      	ldrb	r0, [r1, #0]
 80188e8:	f7ff ff80 	bl	80187ec <__hexdig_fun>
 80188ec:	1e42      	subs	r2, r0, #1
 80188ee:	b2d2      	uxtb	r2, r2
 80188f0:	2a18      	cmp	r2, #24
 80188f2:	d82e      	bhi.n	8018952 <__gethex+0x13a>
 80188f4:	f1a0 0210 	sub.w	r2, r0, #16
 80188f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80188fc:	f7ff ff76 	bl	80187ec <__hexdig_fun>
 8018900:	f100 3cff 	add.w	ip, r0, #4294967295
 8018904:	fa5f fc8c 	uxtb.w	ip, ip
 8018908:	f1bc 0f18 	cmp.w	ip, #24
 801890c:	d91d      	bls.n	801894a <__gethex+0x132>
 801890e:	f1bb 0f00 	cmp.w	fp, #0
 8018912:	d000      	beq.n	8018916 <__gethex+0xfe>
 8018914:	4252      	negs	r2, r2
 8018916:	4416      	add	r6, r2
 8018918:	f8ca 1000 	str.w	r1, [sl]
 801891c:	b1dc      	cbz	r4, 8018956 <__gethex+0x13e>
 801891e:	9b01      	ldr	r3, [sp, #4]
 8018920:	2b00      	cmp	r3, #0
 8018922:	bf14      	ite	ne
 8018924:	f04f 0800 	movne.w	r8, #0
 8018928:	f04f 0806 	moveq.w	r8, #6
 801892c:	4640      	mov	r0, r8
 801892e:	b005      	add	sp, #20
 8018930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018934:	4645      	mov	r5, r8
 8018936:	4626      	mov	r6, r4
 8018938:	2401      	movs	r4, #1
 801893a:	e7c7      	b.n	80188cc <__gethex+0xb4>
 801893c:	f04f 0b00 	mov.w	fp, #0
 8018940:	1ca9      	adds	r1, r5, #2
 8018942:	e7d0      	b.n	80188e6 <__gethex+0xce>
 8018944:	f04f 0b01 	mov.w	fp, #1
 8018948:	e7fa      	b.n	8018940 <__gethex+0x128>
 801894a:	230a      	movs	r3, #10
 801894c:	fb03 0002 	mla	r0, r3, r2, r0
 8018950:	e7d0      	b.n	80188f4 <__gethex+0xdc>
 8018952:	4629      	mov	r1, r5
 8018954:	e7e0      	b.n	8018918 <__gethex+0x100>
 8018956:	eba5 0308 	sub.w	r3, r5, r8
 801895a:	3b01      	subs	r3, #1
 801895c:	4621      	mov	r1, r4
 801895e:	2b07      	cmp	r3, #7
 8018960:	dc0a      	bgt.n	8018978 <__gethex+0x160>
 8018962:	4648      	mov	r0, r9
 8018964:	f7fd fdaa 	bl	80164bc <_Balloc>
 8018968:	4604      	mov	r4, r0
 801896a:	b940      	cbnz	r0, 801897e <__gethex+0x166>
 801896c:	4b61      	ldr	r3, [pc, #388]	; (8018af4 <__gethex+0x2dc>)
 801896e:	4602      	mov	r2, r0
 8018970:	21e4      	movs	r1, #228	; 0xe4
 8018972:	4861      	ldr	r0, [pc, #388]	; (8018af8 <__gethex+0x2e0>)
 8018974:	f7ff feb4 	bl	80186e0 <__assert_func>
 8018978:	3101      	adds	r1, #1
 801897a:	105b      	asrs	r3, r3, #1
 801897c:	e7ef      	b.n	801895e <__gethex+0x146>
 801897e:	f100 0a14 	add.w	sl, r0, #20
 8018982:	2300      	movs	r3, #0
 8018984:	495a      	ldr	r1, [pc, #360]	; (8018af0 <__gethex+0x2d8>)
 8018986:	f8cd a004 	str.w	sl, [sp, #4]
 801898a:	469b      	mov	fp, r3
 801898c:	45a8      	cmp	r8, r5
 801898e:	d342      	bcc.n	8018a16 <__gethex+0x1fe>
 8018990:	9801      	ldr	r0, [sp, #4]
 8018992:	f840 bb04 	str.w	fp, [r0], #4
 8018996:	eba0 000a 	sub.w	r0, r0, sl
 801899a:	1080      	asrs	r0, r0, #2
 801899c:	6120      	str	r0, [r4, #16]
 801899e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80189a2:	4658      	mov	r0, fp
 80189a4:	f7fd fe7c 	bl	80166a0 <__hi0bits>
 80189a8:	683d      	ldr	r5, [r7, #0]
 80189aa:	eba8 0000 	sub.w	r0, r8, r0
 80189ae:	42a8      	cmp	r0, r5
 80189b0:	dd59      	ble.n	8018a66 <__gethex+0x24e>
 80189b2:	eba0 0805 	sub.w	r8, r0, r5
 80189b6:	4641      	mov	r1, r8
 80189b8:	4620      	mov	r0, r4
 80189ba:	f7fe fa0b 	bl	8016dd4 <__any_on>
 80189be:	4683      	mov	fp, r0
 80189c0:	b1b8      	cbz	r0, 80189f2 <__gethex+0x1da>
 80189c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80189c6:	1159      	asrs	r1, r3, #5
 80189c8:	f003 021f 	and.w	r2, r3, #31
 80189cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80189d0:	f04f 0b01 	mov.w	fp, #1
 80189d4:	fa0b f202 	lsl.w	r2, fp, r2
 80189d8:	420a      	tst	r2, r1
 80189da:	d00a      	beq.n	80189f2 <__gethex+0x1da>
 80189dc:	455b      	cmp	r3, fp
 80189de:	dd06      	ble.n	80189ee <__gethex+0x1d6>
 80189e0:	f1a8 0102 	sub.w	r1, r8, #2
 80189e4:	4620      	mov	r0, r4
 80189e6:	f7fe f9f5 	bl	8016dd4 <__any_on>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d138      	bne.n	8018a60 <__gethex+0x248>
 80189ee:	f04f 0b02 	mov.w	fp, #2
 80189f2:	4641      	mov	r1, r8
 80189f4:	4620      	mov	r0, r4
 80189f6:	f7ff fea7 	bl	8018748 <rshift>
 80189fa:	4446      	add	r6, r8
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	42b3      	cmp	r3, r6
 8018a00:	da41      	bge.n	8018a86 <__gethex+0x26e>
 8018a02:	4621      	mov	r1, r4
 8018a04:	4648      	mov	r0, r9
 8018a06:	f7fd fd99 	bl	801653c <_Bfree>
 8018a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	6013      	str	r3, [r2, #0]
 8018a10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018a14:	e78a      	b.n	801892c <__gethex+0x114>
 8018a16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018a1a:	2a2e      	cmp	r2, #46	; 0x2e
 8018a1c:	d014      	beq.n	8018a48 <__gethex+0x230>
 8018a1e:	2b20      	cmp	r3, #32
 8018a20:	d106      	bne.n	8018a30 <__gethex+0x218>
 8018a22:	9b01      	ldr	r3, [sp, #4]
 8018a24:	f843 bb04 	str.w	fp, [r3], #4
 8018a28:	f04f 0b00 	mov.w	fp, #0
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	465b      	mov	r3, fp
 8018a30:	7828      	ldrb	r0, [r5, #0]
 8018a32:	9303      	str	r3, [sp, #12]
 8018a34:	f7ff feda 	bl	80187ec <__hexdig_fun>
 8018a38:	9b03      	ldr	r3, [sp, #12]
 8018a3a:	f000 000f 	and.w	r0, r0, #15
 8018a3e:	4098      	lsls	r0, r3
 8018a40:	ea4b 0b00 	orr.w	fp, fp, r0
 8018a44:	3304      	adds	r3, #4
 8018a46:	e7a1      	b.n	801898c <__gethex+0x174>
 8018a48:	45a8      	cmp	r8, r5
 8018a4a:	d8e8      	bhi.n	8018a1e <__gethex+0x206>
 8018a4c:	2201      	movs	r2, #1
 8018a4e:	4628      	mov	r0, r5
 8018a50:	9303      	str	r3, [sp, #12]
 8018a52:	f7fc fcc4 	bl	80153de <strncmp>
 8018a56:	4926      	ldr	r1, [pc, #152]	; (8018af0 <__gethex+0x2d8>)
 8018a58:	9b03      	ldr	r3, [sp, #12]
 8018a5a:	2800      	cmp	r0, #0
 8018a5c:	d1df      	bne.n	8018a1e <__gethex+0x206>
 8018a5e:	e795      	b.n	801898c <__gethex+0x174>
 8018a60:	f04f 0b03 	mov.w	fp, #3
 8018a64:	e7c5      	b.n	80189f2 <__gethex+0x1da>
 8018a66:	da0b      	bge.n	8018a80 <__gethex+0x268>
 8018a68:	eba5 0800 	sub.w	r8, r5, r0
 8018a6c:	4621      	mov	r1, r4
 8018a6e:	4642      	mov	r2, r8
 8018a70:	4648      	mov	r0, r9
 8018a72:	f7fd ff7d 	bl	8016970 <__lshift>
 8018a76:	eba6 0608 	sub.w	r6, r6, r8
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	f100 0a14 	add.w	sl, r0, #20
 8018a80:	f04f 0b00 	mov.w	fp, #0
 8018a84:	e7ba      	b.n	80189fc <__gethex+0x1e4>
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	42b3      	cmp	r3, r6
 8018a8a:	dd73      	ble.n	8018b74 <__gethex+0x35c>
 8018a8c:	1b9e      	subs	r6, r3, r6
 8018a8e:	42b5      	cmp	r5, r6
 8018a90:	dc34      	bgt.n	8018afc <__gethex+0x2e4>
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	2b02      	cmp	r3, #2
 8018a96:	d023      	beq.n	8018ae0 <__gethex+0x2c8>
 8018a98:	2b03      	cmp	r3, #3
 8018a9a:	d025      	beq.n	8018ae8 <__gethex+0x2d0>
 8018a9c:	2b01      	cmp	r3, #1
 8018a9e:	d115      	bne.n	8018acc <__gethex+0x2b4>
 8018aa0:	42b5      	cmp	r5, r6
 8018aa2:	d113      	bne.n	8018acc <__gethex+0x2b4>
 8018aa4:	2d01      	cmp	r5, #1
 8018aa6:	d10b      	bne.n	8018ac0 <__gethex+0x2a8>
 8018aa8:	9a02      	ldr	r2, [sp, #8]
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	6013      	str	r3, [r2, #0]
 8018aae:	2301      	movs	r3, #1
 8018ab0:	6123      	str	r3, [r4, #16]
 8018ab2:	f8ca 3000 	str.w	r3, [sl]
 8018ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ab8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018abc:	601c      	str	r4, [r3, #0]
 8018abe:	e735      	b.n	801892c <__gethex+0x114>
 8018ac0:	1e69      	subs	r1, r5, #1
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	f7fe f986 	bl	8016dd4 <__any_on>
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	d1ed      	bne.n	8018aa8 <__gethex+0x290>
 8018acc:	4621      	mov	r1, r4
 8018ace:	4648      	mov	r0, r9
 8018ad0:	f7fd fd34 	bl	801653c <_Bfree>
 8018ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	6013      	str	r3, [r2, #0]
 8018ada:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018ade:	e725      	b.n	801892c <__gethex+0x114>
 8018ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d1f2      	bne.n	8018acc <__gethex+0x2b4>
 8018ae6:	e7df      	b.n	8018aa8 <__gethex+0x290>
 8018ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d1dc      	bne.n	8018aa8 <__gethex+0x290>
 8018aee:	e7ed      	b.n	8018acc <__gethex+0x2b4>
 8018af0:	0801c11c 	.word	0x0801c11c
 8018af4:	0801bfb3 	.word	0x0801bfb3
 8018af8:	0801c2e1 	.word	0x0801c2e1
 8018afc:	f106 38ff 	add.w	r8, r6, #4294967295
 8018b00:	f1bb 0f00 	cmp.w	fp, #0
 8018b04:	d133      	bne.n	8018b6e <__gethex+0x356>
 8018b06:	f1b8 0f00 	cmp.w	r8, #0
 8018b0a:	d004      	beq.n	8018b16 <__gethex+0x2fe>
 8018b0c:	4641      	mov	r1, r8
 8018b0e:	4620      	mov	r0, r4
 8018b10:	f7fe f960 	bl	8016dd4 <__any_on>
 8018b14:	4683      	mov	fp, r0
 8018b16:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018b20:	f008 081f 	and.w	r8, r8, #31
 8018b24:	fa03 f308 	lsl.w	r3, r3, r8
 8018b28:	4213      	tst	r3, r2
 8018b2a:	4631      	mov	r1, r6
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	bf18      	it	ne
 8018b30:	f04b 0b02 	orrne.w	fp, fp, #2
 8018b34:	1bad      	subs	r5, r5, r6
 8018b36:	f7ff fe07 	bl	8018748 <rshift>
 8018b3a:	687e      	ldr	r6, [r7, #4]
 8018b3c:	f04f 0802 	mov.w	r8, #2
 8018b40:	f1bb 0f00 	cmp.w	fp, #0
 8018b44:	d04a      	beq.n	8018bdc <__gethex+0x3c4>
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	2b02      	cmp	r3, #2
 8018b4a:	d016      	beq.n	8018b7a <__gethex+0x362>
 8018b4c:	2b03      	cmp	r3, #3
 8018b4e:	d018      	beq.n	8018b82 <__gethex+0x36a>
 8018b50:	2b01      	cmp	r3, #1
 8018b52:	d109      	bne.n	8018b68 <__gethex+0x350>
 8018b54:	f01b 0f02 	tst.w	fp, #2
 8018b58:	d006      	beq.n	8018b68 <__gethex+0x350>
 8018b5a:	f8da 3000 	ldr.w	r3, [sl]
 8018b5e:	ea4b 0b03 	orr.w	fp, fp, r3
 8018b62:	f01b 0f01 	tst.w	fp, #1
 8018b66:	d10f      	bne.n	8018b88 <__gethex+0x370>
 8018b68:	f048 0810 	orr.w	r8, r8, #16
 8018b6c:	e036      	b.n	8018bdc <__gethex+0x3c4>
 8018b6e:	f04f 0b01 	mov.w	fp, #1
 8018b72:	e7d0      	b.n	8018b16 <__gethex+0x2fe>
 8018b74:	f04f 0801 	mov.w	r8, #1
 8018b78:	e7e2      	b.n	8018b40 <__gethex+0x328>
 8018b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b7c:	f1c3 0301 	rsb	r3, r3, #1
 8018b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d0ef      	beq.n	8018b68 <__gethex+0x350>
 8018b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018b8c:	f104 0214 	add.w	r2, r4, #20
 8018b90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018b94:	9301      	str	r3, [sp, #4]
 8018b96:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	4694      	mov	ip, r2
 8018b9e:	f852 1b04 	ldr.w	r1, [r2], #4
 8018ba2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018ba6:	d01e      	beq.n	8018be6 <__gethex+0x3ce>
 8018ba8:	3101      	adds	r1, #1
 8018baa:	f8cc 1000 	str.w	r1, [ip]
 8018bae:	f1b8 0f02 	cmp.w	r8, #2
 8018bb2:	f104 0214 	add.w	r2, r4, #20
 8018bb6:	d13d      	bne.n	8018c34 <__gethex+0x41c>
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	42ab      	cmp	r3, r5
 8018bbe:	d10b      	bne.n	8018bd8 <__gethex+0x3c0>
 8018bc0:	1169      	asrs	r1, r5, #5
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	f005 051f 	and.w	r5, r5, #31
 8018bc8:	fa03 f505 	lsl.w	r5, r3, r5
 8018bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018bd0:	421d      	tst	r5, r3
 8018bd2:	bf18      	it	ne
 8018bd4:	f04f 0801 	movne.w	r8, #1
 8018bd8:	f048 0820 	orr.w	r8, r8, #32
 8018bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018bde:	601c      	str	r4, [r3, #0]
 8018be0:	9b02      	ldr	r3, [sp, #8]
 8018be2:	601e      	str	r6, [r3, #0]
 8018be4:	e6a2      	b.n	801892c <__gethex+0x114>
 8018be6:	4290      	cmp	r0, r2
 8018be8:	f842 3c04 	str.w	r3, [r2, #-4]
 8018bec:	d8d6      	bhi.n	8018b9c <__gethex+0x384>
 8018bee:	68a2      	ldr	r2, [r4, #8]
 8018bf0:	4593      	cmp	fp, r2
 8018bf2:	db17      	blt.n	8018c24 <__gethex+0x40c>
 8018bf4:	6861      	ldr	r1, [r4, #4]
 8018bf6:	4648      	mov	r0, r9
 8018bf8:	3101      	adds	r1, #1
 8018bfa:	f7fd fc5f 	bl	80164bc <_Balloc>
 8018bfe:	4682      	mov	sl, r0
 8018c00:	b918      	cbnz	r0, 8018c0a <__gethex+0x3f2>
 8018c02:	4b1b      	ldr	r3, [pc, #108]	; (8018c70 <__gethex+0x458>)
 8018c04:	4602      	mov	r2, r0
 8018c06:	2184      	movs	r1, #132	; 0x84
 8018c08:	e6b3      	b.n	8018972 <__gethex+0x15a>
 8018c0a:	6922      	ldr	r2, [r4, #16]
 8018c0c:	3202      	adds	r2, #2
 8018c0e:	f104 010c 	add.w	r1, r4, #12
 8018c12:	0092      	lsls	r2, r2, #2
 8018c14:	300c      	adds	r0, #12
 8018c16:	f7fc fcc2 	bl	801559e <memcpy>
 8018c1a:	4621      	mov	r1, r4
 8018c1c:	4648      	mov	r0, r9
 8018c1e:	f7fd fc8d 	bl	801653c <_Bfree>
 8018c22:	4654      	mov	r4, sl
 8018c24:	6922      	ldr	r2, [r4, #16]
 8018c26:	1c51      	adds	r1, r2, #1
 8018c28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c2c:	6121      	str	r1, [r4, #16]
 8018c2e:	2101      	movs	r1, #1
 8018c30:	6151      	str	r1, [r2, #20]
 8018c32:	e7bc      	b.n	8018bae <__gethex+0x396>
 8018c34:	6921      	ldr	r1, [r4, #16]
 8018c36:	4559      	cmp	r1, fp
 8018c38:	dd0b      	ble.n	8018c52 <__gethex+0x43a>
 8018c3a:	2101      	movs	r1, #1
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f7ff fd83 	bl	8018748 <rshift>
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	3601      	adds	r6, #1
 8018c46:	42b3      	cmp	r3, r6
 8018c48:	f6ff aedb 	blt.w	8018a02 <__gethex+0x1ea>
 8018c4c:	f04f 0801 	mov.w	r8, #1
 8018c50:	e7c2      	b.n	8018bd8 <__gethex+0x3c0>
 8018c52:	f015 051f 	ands.w	r5, r5, #31
 8018c56:	d0f9      	beq.n	8018c4c <__gethex+0x434>
 8018c58:	9b01      	ldr	r3, [sp, #4]
 8018c5a:	441a      	add	r2, r3
 8018c5c:	f1c5 0520 	rsb	r5, r5, #32
 8018c60:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018c64:	f7fd fd1c 	bl	80166a0 <__hi0bits>
 8018c68:	42a8      	cmp	r0, r5
 8018c6a:	dbe6      	blt.n	8018c3a <__gethex+0x422>
 8018c6c:	e7ee      	b.n	8018c4c <__gethex+0x434>
 8018c6e:	bf00      	nop
 8018c70:	0801bfb3 	.word	0x0801bfb3

08018c74 <L_shift>:
 8018c74:	f1c2 0208 	rsb	r2, r2, #8
 8018c78:	0092      	lsls	r2, r2, #2
 8018c7a:	b570      	push	{r4, r5, r6, lr}
 8018c7c:	f1c2 0620 	rsb	r6, r2, #32
 8018c80:	6843      	ldr	r3, [r0, #4]
 8018c82:	6804      	ldr	r4, [r0, #0]
 8018c84:	fa03 f506 	lsl.w	r5, r3, r6
 8018c88:	432c      	orrs	r4, r5
 8018c8a:	40d3      	lsrs	r3, r2
 8018c8c:	6004      	str	r4, [r0, #0]
 8018c8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c92:	4288      	cmp	r0, r1
 8018c94:	d3f4      	bcc.n	8018c80 <L_shift+0xc>
 8018c96:	bd70      	pop	{r4, r5, r6, pc}

08018c98 <__match>:
 8018c98:	b530      	push	{r4, r5, lr}
 8018c9a:	6803      	ldr	r3, [r0, #0]
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ca2:	b914      	cbnz	r4, 8018caa <__match+0x12>
 8018ca4:	6003      	str	r3, [r0, #0]
 8018ca6:	2001      	movs	r0, #1
 8018ca8:	bd30      	pop	{r4, r5, pc}
 8018caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018cb2:	2d19      	cmp	r5, #25
 8018cb4:	bf98      	it	ls
 8018cb6:	3220      	addls	r2, #32
 8018cb8:	42a2      	cmp	r2, r4
 8018cba:	d0f0      	beq.n	8018c9e <__match+0x6>
 8018cbc:	2000      	movs	r0, #0
 8018cbe:	e7f3      	b.n	8018ca8 <__match+0x10>

08018cc0 <__hexnan>:
 8018cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc4:	680b      	ldr	r3, [r1, #0]
 8018cc6:	6801      	ldr	r1, [r0, #0]
 8018cc8:	115e      	asrs	r6, r3, #5
 8018cca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018cce:	f013 031f 	ands.w	r3, r3, #31
 8018cd2:	b087      	sub	sp, #28
 8018cd4:	bf18      	it	ne
 8018cd6:	3604      	addne	r6, #4
 8018cd8:	2500      	movs	r5, #0
 8018cda:	1f37      	subs	r7, r6, #4
 8018cdc:	4682      	mov	sl, r0
 8018cde:	4690      	mov	r8, r2
 8018ce0:	9301      	str	r3, [sp, #4]
 8018ce2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018ce6:	46b9      	mov	r9, r7
 8018ce8:	463c      	mov	r4, r7
 8018cea:	9502      	str	r5, [sp, #8]
 8018cec:	46ab      	mov	fp, r5
 8018cee:	784a      	ldrb	r2, [r1, #1]
 8018cf0:	1c4b      	adds	r3, r1, #1
 8018cf2:	9303      	str	r3, [sp, #12]
 8018cf4:	b342      	cbz	r2, 8018d48 <__hexnan+0x88>
 8018cf6:	4610      	mov	r0, r2
 8018cf8:	9105      	str	r1, [sp, #20]
 8018cfa:	9204      	str	r2, [sp, #16]
 8018cfc:	f7ff fd76 	bl	80187ec <__hexdig_fun>
 8018d00:	2800      	cmp	r0, #0
 8018d02:	d14f      	bne.n	8018da4 <__hexnan+0xe4>
 8018d04:	9a04      	ldr	r2, [sp, #16]
 8018d06:	9905      	ldr	r1, [sp, #20]
 8018d08:	2a20      	cmp	r2, #32
 8018d0a:	d818      	bhi.n	8018d3e <__hexnan+0x7e>
 8018d0c:	9b02      	ldr	r3, [sp, #8]
 8018d0e:	459b      	cmp	fp, r3
 8018d10:	dd13      	ble.n	8018d3a <__hexnan+0x7a>
 8018d12:	454c      	cmp	r4, r9
 8018d14:	d206      	bcs.n	8018d24 <__hexnan+0x64>
 8018d16:	2d07      	cmp	r5, #7
 8018d18:	dc04      	bgt.n	8018d24 <__hexnan+0x64>
 8018d1a:	462a      	mov	r2, r5
 8018d1c:	4649      	mov	r1, r9
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f7ff ffa8 	bl	8018c74 <L_shift>
 8018d24:	4544      	cmp	r4, r8
 8018d26:	d950      	bls.n	8018dca <__hexnan+0x10a>
 8018d28:	2300      	movs	r3, #0
 8018d2a:	f1a4 0904 	sub.w	r9, r4, #4
 8018d2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d32:	f8cd b008 	str.w	fp, [sp, #8]
 8018d36:	464c      	mov	r4, r9
 8018d38:	461d      	mov	r5, r3
 8018d3a:	9903      	ldr	r1, [sp, #12]
 8018d3c:	e7d7      	b.n	8018cee <__hexnan+0x2e>
 8018d3e:	2a29      	cmp	r2, #41	; 0x29
 8018d40:	d155      	bne.n	8018dee <__hexnan+0x12e>
 8018d42:	3102      	adds	r1, #2
 8018d44:	f8ca 1000 	str.w	r1, [sl]
 8018d48:	f1bb 0f00 	cmp.w	fp, #0
 8018d4c:	d04f      	beq.n	8018dee <__hexnan+0x12e>
 8018d4e:	454c      	cmp	r4, r9
 8018d50:	d206      	bcs.n	8018d60 <__hexnan+0xa0>
 8018d52:	2d07      	cmp	r5, #7
 8018d54:	dc04      	bgt.n	8018d60 <__hexnan+0xa0>
 8018d56:	462a      	mov	r2, r5
 8018d58:	4649      	mov	r1, r9
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	f7ff ff8a 	bl	8018c74 <L_shift>
 8018d60:	4544      	cmp	r4, r8
 8018d62:	d934      	bls.n	8018dce <__hexnan+0x10e>
 8018d64:	f1a8 0204 	sub.w	r2, r8, #4
 8018d68:	4623      	mov	r3, r4
 8018d6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018d6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018d72:	429f      	cmp	r7, r3
 8018d74:	d2f9      	bcs.n	8018d6a <__hexnan+0xaa>
 8018d76:	1b3b      	subs	r3, r7, r4
 8018d78:	f023 0303 	bic.w	r3, r3, #3
 8018d7c:	3304      	adds	r3, #4
 8018d7e:	3e03      	subs	r6, #3
 8018d80:	3401      	adds	r4, #1
 8018d82:	42a6      	cmp	r6, r4
 8018d84:	bf38      	it	cc
 8018d86:	2304      	movcc	r3, #4
 8018d88:	4443      	add	r3, r8
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	f843 2b04 	str.w	r2, [r3], #4
 8018d90:	429f      	cmp	r7, r3
 8018d92:	d2fb      	bcs.n	8018d8c <__hexnan+0xcc>
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	b91b      	cbnz	r3, 8018da0 <__hexnan+0xe0>
 8018d98:	4547      	cmp	r7, r8
 8018d9a:	d126      	bne.n	8018dea <__hexnan+0x12a>
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	603b      	str	r3, [r7, #0]
 8018da0:	2005      	movs	r0, #5
 8018da2:	e025      	b.n	8018df0 <__hexnan+0x130>
 8018da4:	3501      	adds	r5, #1
 8018da6:	2d08      	cmp	r5, #8
 8018da8:	f10b 0b01 	add.w	fp, fp, #1
 8018dac:	dd06      	ble.n	8018dbc <__hexnan+0xfc>
 8018dae:	4544      	cmp	r4, r8
 8018db0:	d9c3      	bls.n	8018d3a <__hexnan+0x7a>
 8018db2:	2300      	movs	r3, #0
 8018db4:	f844 3c04 	str.w	r3, [r4, #-4]
 8018db8:	2501      	movs	r5, #1
 8018dba:	3c04      	subs	r4, #4
 8018dbc:	6822      	ldr	r2, [r4, #0]
 8018dbe:	f000 000f 	and.w	r0, r0, #15
 8018dc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018dc6:	6020      	str	r0, [r4, #0]
 8018dc8:	e7b7      	b.n	8018d3a <__hexnan+0x7a>
 8018dca:	2508      	movs	r5, #8
 8018dcc:	e7b5      	b.n	8018d3a <__hexnan+0x7a>
 8018dce:	9b01      	ldr	r3, [sp, #4]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d0df      	beq.n	8018d94 <__hexnan+0xd4>
 8018dd4:	f1c3 0320 	rsb	r3, r3, #32
 8018dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8018ddc:	40da      	lsrs	r2, r3
 8018dde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018de2:	4013      	ands	r3, r2
 8018de4:	f846 3c04 	str.w	r3, [r6, #-4]
 8018de8:	e7d4      	b.n	8018d94 <__hexnan+0xd4>
 8018dea:	3f04      	subs	r7, #4
 8018dec:	e7d2      	b.n	8018d94 <__hexnan+0xd4>
 8018dee:	2004      	movs	r0, #4
 8018df0:	b007      	add	sp, #28
 8018df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018df6 <__ascii_mbtowc>:
 8018df6:	b082      	sub	sp, #8
 8018df8:	b901      	cbnz	r1, 8018dfc <__ascii_mbtowc+0x6>
 8018dfa:	a901      	add	r1, sp, #4
 8018dfc:	b142      	cbz	r2, 8018e10 <__ascii_mbtowc+0x1a>
 8018dfe:	b14b      	cbz	r3, 8018e14 <__ascii_mbtowc+0x1e>
 8018e00:	7813      	ldrb	r3, [r2, #0]
 8018e02:	600b      	str	r3, [r1, #0]
 8018e04:	7812      	ldrb	r2, [r2, #0]
 8018e06:	1e10      	subs	r0, r2, #0
 8018e08:	bf18      	it	ne
 8018e0a:	2001      	movne	r0, #1
 8018e0c:	b002      	add	sp, #8
 8018e0e:	4770      	bx	lr
 8018e10:	4610      	mov	r0, r2
 8018e12:	e7fb      	b.n	8018e0c <__ascii_mbtowc+0x16>
 8018e14:	f06f 0001 	mvn.w	r0, #1
 8018e18:	e7f8      	b.n	8018e0c <__ascii_mbtowc+0x16>

08018e1a <_realloc_r>:
 8018e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e1e:	4680      	mov	r8, r0
 8018e20:	4614      	mov	r4, r2
 8018e22:	460e      	mov	r6, r1
 8018e24:	b921      	cbnz	r1, 8018e30 <_realloc_r+0x16>
 8018e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e2a:	4611      	mov	r1, r2
 8018e2c:	f7fd baba 	b.w	80163a4 <_malloc_r>
 8018e30:	b92a      	cbnz	r2, 8018e3e <_realloc_r+0x24>
 8018e32:	f7fd fa43 	bl	80162bc <_free_r>
 8018e36:	4625      	mov	r5, r4
 8018e38:	4628      	mov	r0, r5
 8018e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e3e:	f000 f8b6 	bl	8018fae <_malloc_usable_size_r>
 8018e42:	4284      	cmp	r4, r0
 8018e44:	4607      	mov	r7, r0
 8018e46:	d802      	bhi.n	8018e4e <_realloc_r+0x34>
 8018e48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018e4c:	d812      	bhi.n	8018e74 <_realloc_r+0x5a>
 8018e4e:	4621      	mov	r1, r4
 8018e50:	4640      	mov	r0, r8
 8018e52:	f7fd faa7 	bl	80163a4 <_malloc_r>
 8018e56:	4605      	mov	r5, r0
 8018e58:	2800      	cmp	r0, #0
 8018e5a:	d0ed      	beq.n	8018e38 <_realloc_r+0x1e>
 8018e5c:	42bc      	cmp	r4, r7
 8018e5e:	4622      	mov	r2, r4
 8018e60:	4631      	mov	r1, r6
 8018e62:	bf28      	it	cs
 8018e64:	463a      	movcs	r2, r7
 8018e66:	f7fc fb9a 	bl	801559e <memcpy>
 8018e6a:	4631      	mov	r1, r6
 8018e6c:	4640      	mov	r0, r8
 8018e6e:	f7fd fa25 	bl	80162bc <_free_r>
 8018e72:	e7e1      	b.n	8018e38 <_realloc_r+0x1e>
 8018e74:	4635      	mov	r5, r6
 8018e76:	e7df      	b.n	8018e38 <_realloc_r+0x1e>

08018e78 <_strtoul_l.constprop.0>:
 8018e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e7c:	4f36      	ldr	r7, [pc, #216]	; (8018f58 <_strtoul_l.constprop.0+0xe0>)
 8018e7e:	4686      	mov	lr, r0
 8018e80:	460d      	mov	r5, r1
 8018e82:	4628      	mov	r0, r5
 8018e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e88:	5d3e      	ldrb	r6, [r7, r4]
 8018e8a:	f016 0608 	ands.w	r6, r6, #8
 8018e8e:	d1f8      	bne.n	8018e82 <_strtoul_l.constprop.0+0xa>
 8018e90:	2c2d      	cmp	r4, #45	; 0x2d
 8018e92:	d130      	bne.n	8018ef6 <_strtoul_l.constprop.0+0x7e>
 8018e94:	782c      	ldrb	r4, [r5, #0]
 8018e96:	2601      	movs	r6, #1
 8018e98:	1c85      	adds	r5, r0, #2
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d057      	beq.n	8018f4e <_strtoul_l.constprop.0+0xd6>
 8018e9e:	2b10      	cmp	r3, #16
 8018ea0:	d109      	bne.n	8018eb6 <_strtoul_l.constprop.0+0x3e>
 8018ea2:	2c30      	cmp	r4, #48	; 0x30
 8018ea4:	d107      	bne.n	8018eb6 <_strtoul_l.constprop.0+0x3e>
 8018ea6:	7828      	ldrb	r0, [r5, #0]
 8018ea8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018eac:	2858      	cmp	r0, #88	; 0x58
 8018eae:	d149      	bne.n	8018f44 <_strtoul_l.constprop.0+0xcc>
 8018eb0:	786c      	ldrb	r4, [r5, #1]
 8018eb2:	2310      	movs	r3, #16
 8018eb4:	3502      	adds	r5, #2
 8018eb6:	f04f 38ff 	mov.w	r8, #4294967295
 8018eba:	2700      	movs	r7, #0
 8018ebc:	fbb8 f8f3 	udiv	r8, r8, r3
 8018ec0:	fb03 f908 	mul.w	r9, r3, r8
 8018ec4:	ea6f 0909 	mvn.w	r9, r9
 8018ec8:	4638      	mov	r0, r7
 8018eca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018ece:	f1bc 0f09 	cmp.w	ip, #9
 8018ed2:	d815      	bhi.n	8018f00 <_strtoul_l.constprop.0+0x88>
 8018ed4:	4664      	mov	r4, ip
 8018ed6:	42a3      	cmp	r3, r4
 8018ed8:	dd23      	ble.n	8018f22 <_strtoul_l.constprop.0+0xaa>
 8018eda:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018ede:	d007      	beq.n	8018ef0 <_strtoul_l.constprop.0+0x78>
 8018ee0:	4580      	cmp	r8, r0
 8018ee2:	d31b      	bcc.n	8018f1c <_strtoul_l.constprop.0+0xa4>
 8018ee4:	d101      	bne.n	8018eea <_strtoul_l.constprop.0+0x72>
 8018ee6:	45a1      	cmp	r9, r4
 8018ee8:	db18      	blt.n	8018f1c <_strtoul_l.constprop.0+0xa4>
 8018eea:	fb00 4003 	mla	r0, r0, r3, r4
 8018eee:	2701      	movs	r7, #1
 8018ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ef4:	e7e9      	b.n	8018eca <_strtoul_l.constprop.0+0x52>
 8018ef6:	2c2b      	cmp	r4, #43	; 0x2b
 8018ef8:	bf04      	itt	eq
 8018efa:	782c      	ldrbeq	r4, [r5, #0]
 8018efc:	1c85      	addeq	r5, r0, #2
 8018efe:	e7cc      	b.n	8018e9a <_strtoul_l.constprop.0+0x22>
 8018f00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018f04:	f1bc 0f19 	cmp.w	ip, #25
 8018f08:	d801      	bhi.n	8018f0e <_strtoul_l.constprop.0+0x96>
 8018f0a:	3c37      	subs	r4, #55	; 0x37
 8018f0c:	e7e3      	b.n	8018ed6 <_strtoul_l.constprop.0+0x5e>
 8018f0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018f12:	f1bc 0f19 	cmp.w	ip, #25
 8018f16:	d804      	bhi.n	8018f22 <_strtoul_l.constprop.0+0xaa>
 8018f18:	3c57      	subs	r4, #87	; 0x57
 8018f1a:	e7dc      	b.n	8018ed6 <_strtoul_l.constprop.0+0x5e>
 8018f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f20:	e7e6      	b.n	8018ef0 <_strtoul_l.constprop.0+0x78>
 8018f22:	1c7b      	adds	r3, r7, #1
 8018f24:	d106      	bne.n	8018f34 <_strtoul_l.constprop.0+0xbc>
 8018f26:	2322      	movs	r3, #34	; 0x22
 8018f28:	f8ce 3000 	str.w	r3, [lr]
 8018f2c:	4638      	mov	r0, r7
 8018f2e:	b932      	cbnz	r2, 8018f3e <_strtoul_l.constprop.0+0xc6>
 8018f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f34:	b106      	cbz	r6, 8018f38 <_strtoul_l.constprop.0+0xc0>
 8018f36:	4240      	negs	r0, r0
 8018f38:	2a00      	cmp	r2, #0
 8018f3a:	d0f9      	beq.n	8018f30 <_strtoul_l.constprop.0+0xb8>
 8018f3c:	b107      	cbz	r7, 8018f40 <_strtoul_l.constprop.0+0xc8>
 8018f3e:	1e69      	subs	r1, r5, #1
 8018f40:	6011      	str	r1, [r2, #0]
 8018f42:	e7f5      	b.n	8018f30 <_strtoul_l.constprop.0+0xb8>
 8018f44:	2430      	movs	r4, #48	; 0x30
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d1b5      	bne.n	8018eb6 <_strtoul_l.constprop.0+0x3e>
 8018f4a:	2308      	movs	r3, #8
 8018f4c:	e7b3      	b.n	8018eb6 <_strtoul_l.constprop.0+0x3e>
 8018f4e:	2c30      	cmp	r4, #48	; 0x30
 8018f50:	d0a9      	beq.n	8018ea6 <_strtoul_l.constprop.0+0x2e>
 8018f52:	230a      	movs	r3, #10
 8018f54:	e7af      	b.n	8018eb6 <_strtoul_l.constprop.0+0x3e>
 8018f56:	bf00      	nop
 8018f58:	0801c171 	.word	0x0801c171

08018f5c <_strtoul_r>:
 8018f5c:	f7ff bf8c 	b.w	8018e78 <_strtoul_l.constprop.0>

08018f60 <__ascii_wctomb>:
 8018f60:	b149      	cbz	r1, 8018f76 <__ascii_wctomb+0x16>
 8018f62:	2aff      	cmp	r2, #255	; 0xff
 8018f64:	bf85      	ittet	hi
 8018f66:	238a      	movhi	r3, #138	; 0x8a
 8018f68:	6003      	strhi	r3, [r0, #0]
 8018f6a:	700a      	strbls	r2, [r1, #0]
 8018f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018f70:	bf98      	it	ls
 8018f72:	2001      	movls	r0, #1
 8018f74:	4770      	bx	lr
 8018f76:	4608      	mov	r0, r1
 8018f78:	4770      	bx	lr
	...

08018f7c <fiprintf>:
 8018f7c:	b40e      	push	{r1, r2, r3}
 8018f7e:	b503      	push	{r0, r1, lr}
 8018f80:	4601      	mov	r1, r0
 8018f82:	ab03      	add	r3, sp, #12
 8018f84:	4805      	ldr	r0, [pc, #20]	; (8018f9c <fiprintf+0x20>)
 8018f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f8a:	6800      	ldr	r0, [r0, #0]
 8018f8c:	9301      	str	r3, [sp, #4]
 8018f8e:	f000 f83f 	bl	8019010 <_vfiprintf_r>
 8018f92:	b002      	add	sp, #8
 8018f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f98:	b003      	add	sp, #12
 8018f9a:	4770      	bx	lr
 8018f9c:	20000070 	.word	0x20000070

08018fa0 <abort>:
 8018fa0:	b508      	push	{r3, lr}
 8018fa2:	2006      	movs	r0, #6
 8018fa4:	f000 fa0c 	bl	80193c0 <raise>
 8018fa8:	2001      	movs	r0, #1
 8018faa:	f7ed ffb5 	bl	8006f18 <_exit>

08018fae <_malloc_usable_size_r>:
 8018fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fb2:	1f18      	subs	r0, r3, #4
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	bfbc      	itt	lt
 8018fb8:	580b      	ldrlt	r3, [r1, r0]
 8018fba:	18c0      	addlt	r0, r0, r3
 8018fbc:	4770      	bx	lr

08018fbe <__sfputc_r>:
 8018fbe:	6893      	ldr	r3, [r2, #8]
 8018fc0:	3b01      	subs	r3, #1
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	b410      	push	{r4}
 8018fc6:	6093      	str	r3, [r2, #8]
 8018fc8:	da08      	bge.n	8018fdc <__sfputc_r+0x1e>
 8018fca:	6994      	ldr	r4, [r2, #24]
 8018fcc:	42a3      	cmp	r3, r4
 8018fce:	db01      	blt.n	8018fd4 <__sfputc_r+0x16>
 8018fd0:	290a      	cmp	r1, #10
 8018fd2:	d103      	bne.n	8018fdc <__sfputc_r+0x1e>
 8018fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fd8:	f000 b934 	b.w	8019244 <__swbuf_r>
 8018fdc:	6813      	ldr	r3, [r2, #0]
 8018fde:	1c58      	adds	r0, r3, #1
 8018fe0:	6010      	str	r0, [r2, #0]
 8018fe2:	7019      	strb	r1, [r3, #0]
 8018fe4:	4608      	mov	r0, r1
 8018fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fea:	4770      	bx	lr

08018fec <__sfputs_r>:
 8018fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fee:	4606      	mov	r6, r0
 8018ff0:	460f      	mov	r7, r1
 8018ff2:	4614      	mov	r4, r2
 8018ff4:	18d5      	adds	r5, r2, r3
 8018ff6:	42ac      	cmp	r4, r5
 8018ff8:	d101      	bne.n	8018ffe <__sfputs_r+0x12>
 8018ffa:	2000      	movs	r0, #0
 8018ffc:	e007      	b.n	801900e <__sfputs_r+0x22>
 8018ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019002:	463a      	mov	r2, r7
 8019004:	4630      	mov	r0, r6
 8019006:	f7ff ffda 	bl	8018fbe <__sfputc_r>
 801900a:	1c43      	adds	r3, r0, #1
 801900c:	d1f3      	bne.n	8018ff6 <__sfputs_r+0xa>
 801900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019010 <_vfiprintf_r>:
 8019010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019014:	460d      	mov	r5, r1
 8019016:	b09d      	sub	sp, #116	; 0x74
 8019018:	4614      	mov	r4, r2
 801901a:	4698      	mov	r8, r3
 801901c:	4606      	mov	r6, r0
 801901e:	b118      	cbz	r0, 8019028 <_vfiprintf_r+0x18>
 8019020:	6a03      	ldr	r3, [r0, #32]
 8019022:	b90b      	cbnz	r3, 8019028 <_vfiprintf_r+0x18>
 8019024:	f7fc f90c 	bl	8015240 <__sinit>
 8019028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801902a:	07d9      	lsls	r1, r3, #31
 801902c:	d405      	bmi.n	801903a <_vfiprintf_r+0x2a>
 801902e:	89ab      	ldrh	r3, [r5, #12]
 8019030:	059a      	lsls	r2, r3, #22
 8019032:	d402      	bmi.n	801903a <_vfiprintf_r+0x2a>
 8019034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019036:	f7fc fab0 	bl	801559a <__retarget_lock_acquire_recursive>
 801903a:	89ab      	ldrh	r3, [r5, #12]
 801903c:	071b      	lsls	r3, r3, #28
 801903e:	d501      	bpl.n	8019044 <_vfiprintf_r+0x34>
 8019040:	692b      	ldr	r3, [r5, #16]
 8019042:	b99b      	cbnz	r3, 801906c <_vfiprintf_r+0x5c>
 8019044:	4629      	mov	r1, r5
 8019046:	4630      	mov	r0, r6
 8019048:	f000 f93a 	bl	80192c0 <__swsetup_r>
 801904c:	b170      	cbz	r0, 801906c <_vfiprintf_r+0x5c>
 801904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019050:	07dc      	lsls	r4, r3, #31
 8019052:	d504      	bpl.n	801905e <_vfiprintf_r+0x4e>
 8019054:	f04f 30ff 	mov.w	r0, #4294967295
 8019058:	b01d      	add	sp, #116	; 0x74
 801905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905e:	89ab      	ldrh	r3, [r5, #12]
 8019060:	0598      	lsls	r0, r3, #22
 8019062:	d4f7      	bmi.n	8019054 <_vfiprintf_r+0x44>
 8019064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019066:	f7fc fa99 	bl	801559c <__retarget_lock_release_recursive>
 801906a:	e7f3      	b.n	8019054 <_vfiprintf_r+0x44>
 801906c:	2300      	movs	r3, #0
 801906e:	9309      	str	r3, [sp, #36]	; 0x24
 8019070:	2320      	movs	r3, #32
 8019072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019076:	f8cd 800c 	str.w	r8, [sp, #12]
 801907a:	2330      	movs	r3, #48	; 0x30
 801907c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019230 <_vfiprintf_r+0x220>
 8019080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019084:	f04f 0901 	mov.w	r9, #1
 8019088:	4623      	mov	r3, r4
 801908a:	469a      	mov	sl, r3
 801908c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019090:	b10a      	cbz	r2, 8019096 <_vfiprintf_r+0x86>
 8019092:	2a25      	cmp	r2, #37	; 0x25
 8019094:	d1f9      	bne.n	801908a <_vfiprintf_r+0x7a>
 8019096:	ebba 0b04 	subs.w	fp, sl, r4
 801909a:	d00b      	beq.n	80190b4 <_vfiprintf_r+0xa4>
 801909c:	465b      	mov	r3, fp
 801909e:	4622      	mov	r2, r4
 80190a0:	4629      	mov	r1, r5
 80190a2:	4630      	mov	r0, r6
 80190a4:	f7ff ffa2 	bl	8018fec <__sfputs_r>
 80190a8:	3001      	adds	r0, #1
 80190aa:	f000 80a9 	beq.w	8019200 <_vfiprintf_r+0x1f0>
 80190ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190b0:	445a      	add	r2, fp
 80190b2:	9209      	str	r2, [sp, #36]	; 0x24
 80190b4:	f89a 3000 	ldrb.w	r3, [sl]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	f000 80a1 	beq.w	8019200 <_vfiprintf_r+0x1f0>
 80190be:	2300      	movs	r3, #0
 80190c0:	f04f 32ff 	mov.w	r2, #4294967295
 80190c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190c8:	f10a 0a01 	add.w	sl, sl, #1
 80190cc:	9304      	str	r3, [sp, #16]
 80190ce:	9307      	str	r3, [sp, #28]
 80190d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190d4:	931a      	str	r3, [sp, #104]	; 0x68
 80190d6:	4654      	mov	r4, sl
 80190d8:	2205      	movs	r2, #5
 80190da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190de:	4854      	ldr	r0, [pc, #336]	; (8019230 <_vfiprintf_r+0x220>)
 80190e0:	f7e7 f89e 	bl	8000220 <memchr>
 80190e4:	9a04      	ldr	r2, [sp, #16]
 80190e6:	b9d8      	cbnz	r0, 8019120 <_vfiprintf_r+0x110>
 80190e8:	06d1      	lsls	r1, r2, #27
 80190ea:	bf44      	itt	mi
 80190ec:	2320      	movmi	r3, #32
 80190ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190f2:	0713      	lsls	r3, r2, #28
 80190f4:	bf44      	itt	mi
 80190f6:	232b      	movmi	r3, #43	; 0x2b
 80190f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019100:	2b2a      	cmp	r3, #42	; 0x2a
 8019102:	d015      	beq.n	8019130 <_vfiprintf_r+0x120>
 8019104:	9a07      	ldr	r2, [sp, #28]
 8019106:	4654      	mov	r4, sl
 8019108:	2000      	movs	r0, #0
 801910a:	f04f 0c0a 	mov.w	ip, #10
 801910e:	4621      	mov	r1, r4
 8019110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019114:	3b30      	subs	r3, #48	; 0x30
 8019116:	2b09      	cmp	r3, #9
 8019118:	d94d      	bls.n	80191b6 <_vfiprintf_r+0x1a6>
 801911a:	b1b0      	cbz	r0, 801914a <_vfiprintf_r+0x13a>
 801911c:	9207      	str	r2, [sp, #28]
 801911e:	e014      	b.n	801914a <_vfiprintf_r+0x13a>
 8019120:	eba0 0308 	sub.w	r3, r0, r8
 8019124:	fa09 f303 	lsl.w	r3, r9, r3
 8019128:	4313      	orrs	r3, r2
 801912a:	9304      	str	r3, [sp, #16]
 801912c:	46a2      	mov	sl, r4
 801912e:	e7d2      	b.n	80190d6 <_vfiprintf_r+0xc6>
 8019130:	9b03      	ldr	r3, [sp, #12]
 8019132:	1d19      	adds	r1, r3, #4
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	9103      	str	r1, [sp, #12]
 8019138:	2b00      	cmp	r3, #0
 801913a:	bfbb      	ittet	lt
 801913c:	425b      	neglt	r3, r3
 801913e:	f042 0202 	orrlt.w	r2, r2, #2
 8019142:	9307      	strge	r3, [sp, #28]
 8019144:	9307      	strlt	r3, [sp, #28]
 8019146:	bfb8      	it	lt
 8019148:	9204      	strlt	r2, [sp, #16]
 801914a:	7823      	ldrb	r3, [r4, #0]
 801914c:	2b2e      	cmp	r3, #46	; 0x2e
 801914e:	d10c      	bne.n	801916a <_vfiprintf_r+0x15a>
 8019150:	7863      	ldrb	r3, [r4, #1]
 8019152:	2b2a      	cmp	r3, #42	; 0x2a
 8019154:	d134      	bne.n	80191c0 <_vfiprintf_r+0x1b0>
 8019156:	9b03      	ldr	r3, [sp, #12]
 8019158:	1d1a      	adds	r2, r3, #4
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	9203      	str	r2, [sp, #12]
 801915e:	2b00      	cmp	r3, #0
 8019160:	bfb8      	it	lt
 8019162:	f04f 33ff 	movlt.w	r3, #4294967295
 8019166:	3402      	adds	r4, #2
 8019168:	9305      	str	r3, [sp, #20]
 801916a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019240 <_vfiprintf_r+0x230>
 801916e:	7821      	ldrb	r1, [r4, #0]
 8019170:	2203      	movs	r2, #3
 8019172:	4650      	mov	r0, sl
 8019174:	f7e7 f854 	bl	8000220 <memchr>
 8019178:	b138      	cbz	r0, 801918a <_vfiprintf_r+0x17a>
 801917a:	9b04      	ldr	r3, [sp, #16]
 801917c:	eba0 000a 	sub.w	r0, r0, sl
 8019180:	2240      	movs	r2, #64	; 0x40
 8019182:	4082      	lsls	r2, r0
 8019184:	4313      	orrs	r3, r2
 8019186:	3401      	adds	r4, #1
 8019188:	9304      	str	r3, [sp, #16]
 801918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801918e:	4829      	ldr	r0, [pc, #164]	; (8019234 <_vfiprintf_r+0x224>)
 8019190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019194:	2206      	movs	r2, #6
 8019196:	f7e7 f843 	bl	8000220 <memchr>
 801919a:	2800      	cmp	r0, #0
 801919c:	d03f      	beq.n	801921e <_vfiprintf_r+0x20e>
 801919e:	4b26      	ldr	r3, [pc, #152]	; (8019238 <_vfiprintf_r+0x228>)
 80191a0:	bb1b      	cbnz	r3, 80191ea <_vfiprintf_r+0x1da>
 80191a2:	9b03      	ldr	r3, [sp, #12]
 80191a4:	3307      	adds	r3, #7
 80191a6:	f023 0307 	bic.w	r3, r3, #7
 80191aa:	3308      	adds	r3, #8
 80191ac:	9303      	str	r3, [sp, #12]
 80191ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191b0:	443b      	add	r3, r7
 80191b2:	9309      	str	r3, [sp, #36]	; 0x24
 80191b4:	e768      	b.n	8019088 <_vfiprintf_r+0x78>
 80191b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80191ba:	460c      	mov	r4, r1
 80191bc:	2001      	movs	r0, #1
 80191be:	e7a6      	b.n	801910e <_vfiprintf_r+0xfe>
 80191c0:	2300      	movs	r3, #0
 80191c2:	3401      	adds	r4, #1
 80191c4:	9305      	str	r3, [sp, #20]
 80191c6:	4619      	mov	r1, r3
 80191c8:	f04f 0c0a 	mov.w	ip, #10
 80191cc:	4620      	mov	r0, r4
 80191ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191d2:	3a30      	subs	r2, #48	; 0x30
 80191d4:	2a09      	cmp	r2, #9
 80191d6:	d903      	bls.n	80191e0 <_vfiprintf_r+0x1d0>
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d0c6      	beq.n	801916a <_vfiprintf_r+0x15a>
 80191dc:	9105      	str	r1, [sp, #20]
 80191de:	e7c4      	b.n	801916a <_vfiprintf_r+0x15a>
 80191e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80191e4:	4604      	mov	r4, r0
 80191e6:	2301      	movs	r3, #1
 80191e8:	e7f0      	b.n	80191cc <_vfiprintf_r+0x1bc>
 80191ea:	ab03      	add	r3, sp, #12
 80191ec:	9300      	str	r3, [sp, #0]
 80191ee:	462a      	mov	r2, r5
 80191f0:	4b12      	ldr	r3, [pc, #72]	; (801923c <_vfiprintf_r+0x22c>)
 80191f2:	a904      	add	r1, sp, #16
 80191f4:	4630      	mov	r0, r6
 80191f6:	f7fb f9c1 	bl	801457c <_printf_float>
 80191fa:	4607      	mov	r7, r0
 80191fc:	1c78      	adds	r0, r7, #1
 80191fe:	d1d6      	bne.n	80191ae <_vfiprintf_r+0x19e>
 8019200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019202:	07d9      	lsls	r1, r3, #31
 8019204:	d405      	bmi.n	8019212 <_vfiprintf_r+0x202>
 8019206:	89ab      	ldrh	r3, [r5, #12]
 8019208:	059a      	lsls	r2, r3, #22
 801920a:	d402      	bmi.n	8019212 <_vfiprintf_r+0x202>
 801920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801920e:	f7fc f9c5 	bl	801559c <__retarget_lock_release_recursive>
 8019212:	89ab      	ldrh	r3, [r5, #12]
 8019214:	065b      	lsls	r3, r3, #25
 8019216:	f53f af1d 	bmi.w	8019054 <_vfiprintf_r+0x44>
 801921a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801921c:	e71c      	b.n	8019058 <_vfiprintf_r+0x48>
 801921e:	ab03      	add	r3, sp, #12
 8019220:	9300      	str	r3, [sp, #0]
 8019222:	462a      	mov	r2, r5
 8019224:	4b05      	ldr	r3, [pc, #20]	; (801923c <_vfiprintf_r+0x22c>)
 8019226:	a904      	add	r1, sp, #16
 8019228:	4630      	mov	r0, r6
 801922a:	f7fb fc4b 	bl	8014ac4 <_printf_i>
 801922e:	e7e4      	b.n	80191fa <_vfiprintf_r+0x1ea>
 8019230:	0801c271 	.word	0x0801c271
 8019234:	0801c27b 	.word	0x0801c27b
 8019238:	0801457d 	.word	0x0801457d
 801923c:	08018fed 	.word	0x08018fed
 8019240:	0801c277 	.word	0x0801c277

08019244 <__swbuf_r>:
 8019244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019246:	460e      	mov	r6, r1
 8019248:	4614      	mov	r4, r2
 801924a:	4605      	mov	r5, r0
 801924c:	b118      	cbz	r0, 8019256 <__swbuf_r+0x12>
 801924e:	6a03      	ldr	r3, [r0, #32]
 8019250:	b90b      	cbnz	r3, 8019256 <__swbuf_r+0x12>
 8019252:	f7fb fff5 	bl	8015240 <__sinit>
 8019256:	69a3      	ldr	r3, [r4, #24]
 8019258:	60a3      	str	r3, [r4, #8]
 801925a:	89a3      	ldrh	r3, [r4, #12]
 801925c:	071a      	lsls	r2, r3, #28
 801925e:	d525      	bpl.n	80192ac <__swbuf_r+0x68>
 8019260:	6923      	ldr	r3, [r4, #16]
 8019262:	b31b      	cbz	r3, 80192ac <__swbuf_r+0x68>
 8019264:	6823      	ldr	r3, [r4, #0]
 8019266:	6922      	ldr	r2, [r4, #16]
 8019268:	1a98      	subs	r0, r3, r2
 801926a:	6963      	ldr	r3, [r4, #20]
 801926c:	b2f6      	uxtb	r6, r6
 801926e:	4283      	cmp	r3, r0
 8019270:	4637      	mov	r7, r6
 8019272:	dc04      	bgt.n	801927e <__swbuf_r+0x3a>
 8019274:	4621      	mov	r1, r4
 8019276:	4628      	mov	r0, r5
 8019278:	f7ff f962 	bl	8018540 <_fflush_r>
 801927c:	b9e0      	cbnz	r0, 80192b8 <__swbuf_r+0x74>
 801927e:	68a3      	ldr	r3, [r4, #8]
 8019280:	3b01      	subs	r3, #1
 8019282:	60a3      	str	r3, [r4, #8]
 8019284:	6823      	ldr	r3, [r4, #0]
 8019286:	1c5a      	adds	r2, r3, #1
 8019288:	6022      	str	r2, [r4, #0]
 801928a:	701e      	strb	r6, [r3, #0]
 801928c:	6962      	ldr	r2, [r4, #20]
 801928e:	1c43      	adds	r3, r0, #1
 8019290:	429a      	cmp	r2, r3
 8019292:	d004      	beq.n	801929e <__swbuf_r+0x5a>
 8019294:	89a3      	ldrh	r3, [r4, #12]
 8019296:	07db      	lsls	r3, r3, #31
 8019298:	d506      	bpl.n	80192a8 <__swbuf_r+0x64>
 801929a:	2e0a      	cmp	r6, #10
 801929c:	d104      	bne.n	80192a8 <__swbuf_r+0x64>
 801929e:	4621      	mov	r1, r4
 80192a0:	4628      	mov	r0, r5
 80192a2:	f7ff f94d 	bl	8018540 <_fflush_r>
 80192a6:	b938      	cbnz	r0, 80192b8 <__swbuf_r+0x74>
 80192a8:	4638      	mov	r0, r7
 80192aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192ac:	4621      	mov	r1, r4
 80192ae:	4628      	mov	r0, r5
 80192b0:	f000 f806 	bl	80192c0 <__swsetup_r>
 80192b4:	2800      	cmp	r0, #0
 80192b6:	d0d5      	beq.n	8019264 <__swbuf_r+0x20>
 80192b8:	f04f 37ff 	mov.w	r7, #4294967295
 80192bc:	e7f4      	b.n	80192a8 <__swbuf_r+0x64>
	...

080192c0 <__swsetup_r>:
 80192c0:	b538      	push	{r3, r4, r5, lr}
 80192c2:	4b2a      	ldr	r3, [pc, #168]	; (801936c <__swsetup_r+0xac>)
 80192c4:	4605      	mov	r5, r0
 80192c6:	6818      	ldr	r0, [r3, #0]
 80192c8:	460c      	mov	r4, r1
 80192ca:	b118      	cbz	r0, 80192d4 <__swsetup_r+0x14>
 80192cc:	6a03      	ldr	r3, [r0, #32]
 80192ce:	b90b      	cbnz	r3, 80192d4 <__swsetup_r+0x14>
 80192d0:	f7fb ffb6 	bl	8015240 <__sinit>
 80192d4:	89a3      	ldrh	r3, [r4, #12]
 80192d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192da:	0718      	lsls	r0, r3, #28
 80192dc:	d422      	bmi.n	8019324 <__swsetup_r+0x64>
 80192de:	06d9      	lsls	r1, r3, #27
 80192e0:	d407      	bmi.n	80192f2 <__swsetup_r+0x32>
 80192e2:	2309      	movs	r3, #9
 80192e4:	602b      	str	r3, [r5, #0]
 80192e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80192ea:	81a3      	strh	r3, [r4, #12]
 80192ec:	f04f 30ff 	mov.w	r0, #4294967295
 80192f0:	e034      	b.n	801935c <__swsetup_r+0x9c>
 80192f2:	0758      	lsls	r0, r3, #29
 80192f4:	d512      	bpl.n	801931c <__swsetup_r+0x5c>
 80192f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80192f8:	b141      	cbz	r1, 801930c <__swsetup_r+0x4c>
 80192fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192fe:	4299      	cmp	r1, r3
 8019300:	d002      	beq.n	8019308 <__swsetup_r+0x48>
 8019302:	4628      	mov	r0, r5
 8019304:	f7fc ffda 	bl	80162bc <_free_r>
 8019308:	2300      	movs	r3, #0
 801930a:	6363      	str	r3, [r4, #52]	; 0x34
 801930c:	89a3      	ldrh	r3, [r4, #12]
 801930e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019312:	81a3      	strh	r3, [r4, #12]
 8019314:	2300      	movs	r3, #0
 8019316:	6063      	str	r3, [r4, #4]
 8019318:	6923      	ldr	r3, [r4, #16]
 801931a:	6023      	str	r3, [r4, #0]
 801931c:	89a3      	ldrh	r3, [r4, #12]
 801931e:	f043 0308 	orr.w	r3, r3, #8
 8019322:	81a3      	strh	r3, [r4, #12]
 8019324:	6923      	ldr	r3, [r4, #16]
 8019326:	b94b      	cbnz	r3, 801933c <__swsetup_r+0x7c>
 8019328:	89a3      	ldrh	r3, [r4, #12]
 801932a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801932e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019332:	d003      	beq.n	801933c <__swsetup_r+0x7c>
 8019334:	4621      	mov	r1, r4
 8019336:	4628      	mov	r0, r5
 8019338:	f000 f884 	bl	8019444 <__smakebuf_r>
 801933c:	89a0      	ldrh	r0, [r4, #12]
 801933e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019342:	f010 0301 	ands.w	r3, r0, #1
 8019346:	d00a      	beq.n	801935e <__swsetup_r+0x9e>
 8019348:	2300      	movs	r3, #0
 801934a:	60a3      	str	r3, [r4, #8]
 801934c:	6963      	ldr	r3, [r4, #20]
 801934e:	425b      	negs	r3, r3
 8019350:	61a3      	str	r3, [r4, #24]
 8019352:	6923      	ldr	r3, [r4, #16]
 8019354:	b943      	cbnz	r3, 8019368 <__swsetup_r+0xa8>
 8019356:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801935a:	d1c4      	bne.n	80192e6 <__swsetup_r+0x26>
 801935c:	bd38      	pop	{r3, r4, r5, pc}
 801935e:	0781      	lsls	r1, r0, #30
 8019360:	bf58      	it	pl
 8019362:	6963      	ldrpl	r3, [r4, #20]
 8019364:	60a3      	str	r3, [r4, #8]
 8019366:	e7f4      	b.n	8019352 <__swsetup_r+0x92>
 8019368:	2000      	movs	r0, #0
 801936a:	e7f7      	b.n	801935c <__swsetup_r+0x9c>
 801936c:	20000070 	.word	0x20000070

08019370 <_raise_r>:
 8019370:	291f      	cmp	r1, #31
 8019372:	b538      	push	{r3, r4, r5, lr}
 8019374:	4604      	mov	r4, r0
 8019376:	460d      	mov	r5, r1
 8019378:	d904      	bls.n	8019384 <_raise_r+0x14>
 801937a:	2316      	movs	r3, #22
 801937c:	6003      	str	r3, [r0, #0]
 801937e:	f04f 30ff 	mov.w	r0, #4294967295
 8019382:	bd38      	pop	{r3, r4, r5, pc}
 8019384:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019386:	b112      	cbz	r2, 801938e <_raise_r+0x1e>
 8019388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801938c:	b94b      	cbnz	r3, 80193a2 <_raise_r+0x32>
 801938e:	4620      	mov	r0, r4
 8019390:	f000 f830 	bl	80193f4 <_getpid_r>
 8019394:	462a      	mov	r2, r5
 8019396:	4601      	mov	r1, r0
 8019398:	4620      	mov	r0, r4
 801939a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801939e:	f000 b817 	b.w	80193d0 <_kill_r>
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d00a      	beq.n	80193bc <_raise_r+0x4c>
 80193a6:	1c59      	adds	r1, r3, #1
 80193a8:	d103      	bne.n	80193b2 <_raise_r+0x42>
 80193aa:	2316      	movs	r3, #22
 80193ac:	6003      	str	r3, [r0, #0]
 80193ae:	2001      	movs	r0, #1
 80193b0:	e7e7      	b.n	8019382 <_raise_r+0x12>
 80193b2:	2400      	movs	r4, #0
 80193b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80193b8:	4628      	mov	r0, r5
 80193ba:	4798      	blx	r3
 80193bc:	2000      	movs	r0, #0
 80193be:	e7e0      	b.n	8019382 <_raise_r+0x12>

080193c0 <raise>:
 80193c0:	4b02      	ldr	r3, [pc, #8]	; (80193cc <raise+0xc>)
 80193c2:	4601      	mov	r1, r0
 80193c4:	6818      	ldr	r0, [r3, #0]
 80193c6:	f7ff bfd3 	b.w	8019370 <_raise_r>
 80193ca:	bf00      	nop
 80193cc:	20000070 	.word	0x20000070

080193d0 <_kill_r>:
 80193d0:	b538      	push	{r3, r4, r5, lr}
 80193d2:	4d07      	ldr	r5, [pc, #28]	; (80193f0 <_kill_r+0x20>)
 80193d4:	2300      	movs	r3, #0
 80193d6:	4604      	mov	r4, r0
 80193d8:	4608      	mov	r0, r1
 80193da:	4611      	mov	r1, r2
 80193dc:	602b      	str	r3, [r5, #0]
 80193de:	f7ed fd8b 	bl	8006ef8 <_kill>
 80193e2:	1c43      	adds	r3, r0, #1
 80193e4:	d102      	bne.n	80193ec <_kill_r+0x1c>
 80193e6:	682b      	ldr	r3, [r5, #0]
 80193e8:	b103      	cbz	r3, 80193ec <_kill_r+0x1c>
 80193ea:	6023      	str	r3, [r4, #0]
 80193ec:	bd38      	pop	{r3, r4, r5, pc}
 80193ee:	bf00      	nop
 80193f0:	20009090 	.word	0x20009090

080193f4 <_getpid_r>:
 80193f4:	f7ed bd78 	b.w	8006ee8 <_getpid>

080193f8 <__swhatbuf_r>:
 80193f8:	b570      	push	{r4, r5, r6, lr}
 80193fa:	460c      	mov	r4, r1
 80193fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019400:	2900      	cmp	r1, #0
 8019402:	b096      	sub	sp, #88	; 0x58
 8019404:	4615      	mov	r5, r2
 8019406:	461e      	mov	r6, r3
 8019408:	da0d      	bge.n	8019426 <__swhatbuf_r+0x2e>
 801940a:	89a3      	ldrh	r3, [r4, #12]
 801940c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019410:	f04f 0100 	mov.w	r1, #0
 8019414:	bf0c      	ite	eq
 8019416:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801941a:	2340      	movne	r3, #64	; 0x40
 801941c:	2000      	movs	r0, #0
 801941e:	6031      	str	r1, [r6, #0]
 8019420:	602b      	str	r3, [r5, #0]
 8019422:	b016      	add	sp, #88	; 0x58
 8019424:	bd70      	pop	{r4, r5, r6, pc}
 8019426:	466a      	mov	r2, sp
 8019428:	f000 f848 	bl	80194bc <_fstat_r>
 801942c:	2800      	cmp	r0, #0
 801942e:	dbec      	blt.n	801940a <__swhatbuf_r+0x12>
 8019430:	9901      	ldr	r1, [sp, #4]
 8019432:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019436:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801943a:	4259      	negs	r1, r3
 801943c:	4159      	adcs	r1, r3
 801943e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019442:	e7eb      	b.n	801941c <__swhatbuf_r+0x24>

08019444 <__smakebuf_r>:
 8019444:	898b      	ldrh	r3, [r1, #12]
 8019446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019448:	079d      	lsls	r5, r3, #30
 801944a:	4606      	mov	r6, r0
 801944c:	460c      	mov	r4, r1
 801944e:	d507      	bpl.n	8019460 <__smakebuf_r+0x1c>
 8019450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019454:	6023      	str	r3, [r4, #0]
 8019456:	6123      	str	r3, [r4, #16]
 8019458:	2301      	movs	r3, #1
 801945a:	6163      	str	r3, [r4, #20]
 801945c:	b002      	add	sp, #8
 801945e:	bd70      	pop	{r4, r5, r6, pc}
 8019460:	ab01      	add	r3, sp, #4
 8019462:	466a      	mov	r2, sp
 8019464:	f7ff ffc8 	bl	80193f8 <__swhatbuf_r>
 8019468:	9900      	ldr	r1, [sp, #0]
 801946a:	4605      	mov	r5, r0
 801946c:	4630      	mov	r0, r6
 801946e:	f7fc ff99 	bl	80163a4 <_malloc_r>
 8019472:	b948      	cbnz	r0, 8019488 <__smakebuf_r+0x44>
 8019474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019478:	059a      	lsls	r2, r3, #22
 801947a:	d4ef      	bmi.n	801945c <__smakebuf_r+0x18>
 801947c:	f023 0303 	bic.w	r3, r3, #3
 8019480:	f043 0302 	orr.w	r3, r3, #2
 8019484:	81a3      	strh	r3, [r4, #12]
 8019486:	e7e3      	b.n	8019450 <__smakebuf_r+0xc>
 8019488:	89a3      	ldrh	r3, [r4, #12]
 801948a:	6020      	str	r0, [r4, #0]
 801948c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019490:	81a3      	strh	r3, [r4, #12]
 8019492:	9b00      	ldr	r3, [sp, #0]
 8019494:	6163      	str	r3, [r4, #20]
 8019496:	9b01      	ldr	r3, [sp, #4]
 8019498:	6120      	str	r0, [r4, #16]
 801949a:	b15b      	cbz	r3, 80194b4 <__smakebuf_r+0x70>
 801949c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194a0:	4630      	mov	r0, r6
 80194a2:	f000 f81d 	bl	80194e0 <_isatty_r>
 80194a6:	b128      	cbz	r0, 80194b4 <__smakebuf_r+0x70>
 80194a8:	89a3      	ldrh	r3, [r4, #12]
 80194aa:	f023 0303 	bic.w	r3, r3, #3
 80194ae:	f043 0301 	orr.w	r3, r3, #1
 80194b2:	81a3      	strh	r3, [r4, #12]
 80194b4:	89a3      	ldrh	r3, [r4, #12]
 80194b6:	431d      	orrs	r5, r3
 80194b8:	81a5      	strh	r5, [r4, #12]
 80194ba:	e7cf      	b.n	801945c <__smakebuf_r+0x18>

080194bc <_fstat_r>:
 80194bc:	b538      	push	{r3, r4, r5, lr}
 80194be:	4d07      	ldr	r5, [pc, #28]	; (80194dc <_fstat_r+0x20>)
 80194c0:	2300      	movs	r3, #0
 80194c2:	4604      	mov	r4, r0
 80194c4:	4608      	mov	r0, r1
 80194c6:	4611      	mov	r1, r2
 80194c8:	602b      	str	r3, [r5, #0]
 80194ca:	f7ed fd74 	bl	8006fb6 <_fstat>
 80194ce:	1c43      	adds	r3, r0, #1
 80194d0:	d102      	bne.n	80194d8 <_fstat_r+0x1c>
 80194d2:	682b      	ldr	r3, [r5, #0]
 80194d4:	b103      	cbz	r3, 80194d8 <_fstat_r+0x1c>
 80194d6:	6023      	str	r3, [r4, #0]
 80194d8:	bd38      	pop	{r3, r4, r5, pc}
 80194da:	bf00      	nop
 80194dc:	20009090 	.word	0x20009090

080194e0 <_isatty_r>:
 80194e0:	b538      	push	{r3, r4, r5, lr}
 80194e2:	4d06      	ldr	r5, [pc, #24]	; (80194fc <_isatty_r+0x1c>)
 80194e4:	2300      	movs	r3, #0
 80194e6:	4604      	mov	r4, r0
 80194e8:	4608      	mov	r0, r1
 80194ea:	602b      	str	r3, [r5, #0]
 80194ec:	f7ed fd73 	bl	8006fd6 <_isatty>
 80194f0:	1c43      	adds	r3, r0, #1
 80194f2:	d102      	bne.n	80194fa <_isatty_r+0x1a>
 80194f4:	682b      	ldr	r3, [r5, #0]
 80194f6:	b103      	cbz	r3, 80194fa <_isatty_r+0x1a>
 80194f8:	6023      	str	r3, [r4, #0]
 80194fa:	bd38      	pop	{r3, r4, r5, pc}
 80194fc:	20009090 	.word	0x20009090

08019500 <pow>:
 8019500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019502:	ed2d 8b02 	vpush	{d8}
 8019506:	eeb0 8a40 	vmov.f32	s16, s0
 801950a:	eef0 8a60 	vmov.f32	s17, s1
 801950e:	ec55 4b11 	vmov	r4, r5, d1
 8019512:	f000 fa2d 	bl	8019970 <__ieee754_pow>
 8019516:	4622      	mov	r2, r4
 8019518:	462b      	mov	r3, r5
 801951a:	4620      	mov	r0, r4
 801951c:	4629      	mov	r1, r5
 801951e:	ec57 6b10 	vmov	r6, r7, d0
 8019522:	f7e7 fb2b 	bl	8000b7c <__aeabi_dcmpun>
 8019526:	2800      	cmp	r0, #0
 8019528:	d13b      	bne.n	80195a2 <pow+0xa2>
 801952a:	ec51 0b18 	vmov	r0, r1, d8
 801952e:	2200      	movs	r2, #0
 8019530:	2300      	movs	r3, #0
 8019532:	f7e7 faf1 	bl	8000b18 <__aeabi_dcmpeq>
 8019536:	b1b8      	cbz	r0, 8019568 <pow+0x68>
 8019538:	2200      	movs	r2, #0
 801953a:	2300      	movs	r3, #0
 801953c:	4620      	mov	r0, r4
 801953e:	4629      	mov	r1, r5
 8019540:	f7e7 faea 	bl	8000b18 <__aeabi_dcmpeq>
 8019544:	2800      	cmp	r0, #0
 8019546:	d146      	bne.n	80195d6 <pow+0xd6>
 8019548:	ec45 4b10 	vmov	d0, r4, r5
 801954c:	f000 f91a 	bl	8019784 <finite>
 8019550:	b338      	cbz	r0, 80195a2 <pow+0xa2>
 8019552:	2200      	movs	r2, #0
 8019554:	2300      	movs	r3, #0
 8019556:	4620      	mov	r0, r4
 8019558:	4629      	mov	r1, r5
 801955a:	f7e7 fae7 	bl	8000b2c <__aeabi_dcmplt>
 801955e:	b300      	cbz	r0, 80195a2 <pow+0xa2>
 8019560:	f7fb fff0 	bl	8015544 <__errno>
 8019564:	2322      	movs	r3, #34	; 0x22
 8019566:	e01b      	b.n	80195a0 <pow+0xa0>
 8019568:	ec47 6b10 	vmov	d0, r6, r7
 801956c:	f000 f90a 	bl	8019784 <finite>
 8019570:	b9e0      	cbnz	r0, 80195ac <pow+0xac>
 8019572:	eeb0 0a48 	vmov.f32	s0, s16
 8019576:	eef0 0a68 	vmov.f32	s1, s17
 801957a:	f000 f903 	bl	8019784 <finite>
 801957e:	b1a8      	cbz	r0, 80195ac <pow+0xac>
 8019580:	ec45 4b10 	vmov	d0, r4, r5
 8019584:	f000 f8fe 	bl	8019784 <finite>
 8019588:	b180      	cbz	r0, 80195ac <pow+0xac>
 801958a:	4632      	mov	r2, r6
 801958c:	463b      	mov	r3, r7
 801958e:	4630      	mov	r0, r6
 8019590:	4639      	mov	r1, r7
 8019592:	f7e7 faf3 	bl	8000b7c <__aeabi_dcmpun>
 8019596:	2800      	cmp	r0, #0
 8019598:	d0e2      	beq.n	8019560 <pow+0x60>
 801959a:	f7fb ffd3 	bl	8015544 <__errno>
 801959e:	2321      	movs	r3, #33	; 0x21
 80195a0:	6003      	str	r3, [r0, #0]
 80195a2:	ecbd 8b02 	vpop	{d8}
 80195a6:	ec47 6b10 	vmov	d0, r6, r7
 80195aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195ac:	2200      	movs	r2, #0
 80195ae:	2300      	movs	r3, #0
 80195b0:	4630      	mov	r0, r6
 80195b2:	4639      	mov	r1, r7
 80195b4:	f7e7 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d0f2      	beq.n	80195a2 <pow+0xa2>
 80195bc:	eeb0 0a48 	vmov.f32	s0, s16
 80195c0:	eef0 0a68 	vmov.f32	s1, s17
 80195c4:	f000 f8de 	bl	8019784 <finite>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d0ea      	beq.n	80195a2 <pow+0xa2>
 80195cc:	ec45 4b10 	vmov	d0, r4, r5
 80195d0:	f000 f8d8 	bl	8019784 <finite>
 80195d4:	e7c3      	b.n	801955e <pow+0x5e>
 80195d6:	4f01      	ldr	r7, [pc, #4]	; (80195dc <pow+0xdc>)
 80195d8:	2600      	movs	r6, #0
 80195da:	e7e2      	b.n	80195a2 <pow+0xa2>
 80195dc:	3ff00000 	.word	0x3ff00000

080195e0 <asinf>:
 80195e0:	b508      	push	{r3, lr}
 80195e2:	ed2d 8b02 	vpush	{d8}
 80195e6:	eeb0 8a40 	vmov.f32	s16, s0
 80195ea:	f000 ff9b 	bl	801a524 <__ieee754_asinf>
 80195ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80195f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f6:	eef0 8a40 	vmov.f32	s17, s0
 80195fa:	d615      	bvs.n	8019628 <asinf+0x48>
 80195fc:	eeb0 0a48 	vmov.f32	s0, s16
 8019600:	f000 f873 	bl	80196ea <fabsf>
 8019604:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019608:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019610:	dd0a      	ble.n	8019628 <asinf+0x48>
 8019612:	f7fb ff97 	bl	8015544 <__errno>
 8019616:	ecbd 8b02 	vpop	{d8}
 801961a:	2321      	movs	r3, #33	; 0x21
 801961c:	6003      	str	r3, [r0, #0]
 801961e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019622:	4804      	ldr	r0, [pc, #16]	; (8019634 <asinf+0x54>)
 8019624:	f7fb bfca 	b.w	80155bc <nanf>
 8019628:	eeb0 0a68 	vmov.f32	s0, s17
 801962c:	ecbd 8b02 	vpop	{d8}
 8019630:	bd08      	pop	{r3, pc}
 8019632:	bf00      	nop
 8019634:	0801c2e0 	.word	0x0801c2e0

08019638 <atan2f>:
 8019638:	f001 b85a 	b.w	801a6f0 <__ieee754_atan2f>

0801963c <powf>:
 801963c:	b508      	push	{r3, lr}
 801963e:	ed2d 8b04 	vpush	{d8-d9}
 8019642:	eeb0 8a60 	vmov.f32	s16, s1
 8019646:	eeb0 9a40 	vmov.f32	s18, s0
 801964a:	f001 f8f1 	bl	801a830 <__ieee754_powf>
 801964e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019656:	eef0 8a40 	vmov.f32	s17, s0
 801965a:	d63e      	bvs.n	80196da <powf+0x9e>
 801965c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8019660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019664:	d112      	bne.n	801968c <powf+0x50>
 8019666:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801966e:	d039      	beq.n	80196e4 <powf+0xa8>
 8019670:	eeb0 0a48 	vmov.f32	s0, s16
 8019674:	f000 f891 	bl	801979a <finitef>
 8019678:	b378      	cbz	r0, 80196da <powf+0x9e>
 801967a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019682:	d52a      	bpl.n	80196da <powf+0x9e>
 8019684:	f7fb ff5e 	bl	8015544 <__errno>
 8019688:	2322      	movs	r3, #34	; 0x22
 801968a:	e014      	b.n	80196b6 <powf+0x7a>
 801968c:	f000 f885 	bl	801979a <finitef>
 8019690:	b998      	cbnz	r0, 80196ba <powf+0x7e>
 8019692:	eeb0 0a49 	vmov.f32	s0, s18
 8019696:	f000 f880 	bl	801979a <finitef>
 801969a:	b170      	cbz	r0, 80196ba <powf+0x7e>
 801969c:	eeb0 0a48 	vmov.f32	s0, s16
 80196a0:	f000 f87b 	bl	801979a <finitef>
 80196a4:	b148      	cbz	r0, 80196ba <powf+0x7e>
 80196a6:	eef4 8a68 	vcmp.f32	s17, s17
 80196aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ae:	d7e9      	bvc.n	8019684 <powf+0x48>
 80196b0:	f7fb ff48 	bl	8015544 <__errno>
 80196b4:	2321      	movs	r3, #33	; 0x21
 80196b6:	6003      	str	r3, [r0, #0]
 80196b8:	e00f      	b.n	80196da <powf+0x9e>
 80196ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 80196be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196c2:	d10a      	bne.n	80196da <powf+0x9e>
 80196c4:	eeb0 0a49 	vmov.f32	s0, s18
 80196c8:	f000 f867 	bl	801979a <finitef>
 80196cc:	b128      	cbz	r0, 80196da <powf+0x9e>
 80196ce:	eeb0 0a48 	vmov.f32	s0, s16
 80196d2:	f000 f862 	bl	801979a <finitef>
 80196d6:	2800      	cmp	r0, #0
 80196d8:	d1d4      	bne.n	8019684 <powf+0x48>
 80196da:	eeb0 0a68 	vmov.f32	s0, s17
 80196de:	ecbd 8b04 	vpop	{d8-d9}
 80196e2:	bd08      	pop	{r3, pc}
 80196e4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80196e8:	e7f7      	b.n	80196da <powf+0x9e>

080196ea <fabsf>:
 80196ea:	ee10 3a10 	vmov	r3, s0
 80196ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196f2:	ee00 3a10 	vmov	s0, r3
 80196f6:	4770      	bx	lr

080196f8 <sinf>:
 80196f8:	ee10 3a10 	vmov	r3, s0
 80196fc:	b507      	push	{r0, r1, r2, lr}
 80196fe:	4a1f      	ldr	r2, [pc, #124]	; (801977c <sinf+0x84>)
 8019700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019704:	4293      	cmp	r3, r2
 8019706:	dc07      	bgt.n	8019718 <sinf+0x20>
 8019708:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019780 <sinf+0x88>
 801970c:	2000      	movs	r0, #0
 801970e:	b003      	add	sp, #12
 8019710:	f85d eb04 	ldr.w	lr, [sp], #4
 8019714:	f000 bebe 	b.w	801a494 <__kernel_sinf>
 8019718:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801971c:	db04      	blt.n	8019728 <sinf+0x30>
 801971e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019722:	b003      	add	sp, #12
 8019724:	f85d fb04 	ldr.w	pc, [sp], #4
 8019728:	4668      	mov	r0, sp
 801972a:	f001 fb4b 	bl	801adc4 <__ieee754_rem_pio2f>
 801972e:	f000 0003 	and.w	r0, r0, #3
 8019732:	2801      	cmp	r0, #1
 8019734:	d00a      	beq.n	801974c <sinf+0x54>
 8019736:	2802      	cmp	r0, #2
 8019738:	d00f      	beq.n	801975a <sinf+0x62>
 801973a:	b9c0      	cbnz	r0, 801976e <sinf+0x76>
 801973c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019740:	ed9d 0a00 	vldr	s0, [sp]
 8019744:	2001      	movs	r0, #1
 8019746:	f000 fea5 	bl	801a494 <__kernel_sinf>
 801974a:	e7ea      	b.n	8019722 <sinf+0x2a>
 801974c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019750:	ed9d 0a00 	vldr	s0, [sp]
 8019754:	f000 fe40 	bl	801a3d8 <__kernel_cosf>
 8019758:	e7e3      	b.n	8019722 <sinf+0x2a>
 801975a:	eddd 0a01 	vldr	s1, [sp, #4]
 801975e:	ed9d 0a00 	vldr	s0, [sp]
 8019762:	2001      	movs	r0, #1
 8019764:	f000 fe96 	bl	801a494 <__kernel_sinf>
 8019768:	eeb1 0a40 	vneg.f32	s0, s0
 801976c:	e7d9      	b.n	8019722 <sinf+0x2a>
 801976e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019772:	ed9d 0a00 	vldr	s0, [sp]
 8019776:	f000 fe2f 	bl	801a3d8 <__kernel_cosf>
 801977a:	e7f5      	b.n	8019768 <sinf+0x70>
 801977c:	3f490fd8 	.word	0x3f490fd8
 8019780:	00000000 	.word	0x00000000

08019784 <finite>:
 8019784:	b082      	sub	sp, #8
 8019786:	ed8d 0b00 	vstr	d0, [sp]
 801978a:	9801      	ldr	r0, [sp, #4]
 801978c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019790:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019794:	0fc0      	lsrs	r0, r0, #31
 8019796:	b002      	add	sp, #8
 8019798:	4770      	bx	lr

0801979a <finitef>:
 801979a:	b082      	sub	sp, #8
 801979c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80197a0:	9801      	ldr	r0, [sp, #4]
 80197a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80197a6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80197aa:	bfac      	ite	ge
 80197ac:	2000      	movge	r0, #0
 80197ae:	2001      	movlt	r0, #1
 80197b0:	b002      	add	sp, #8
 80197b2:	4770      	bx	lr

080197b4 <__ieee754_sqrt>:
 80197b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b8:	ec55 4b10 	vmov	r4, r5, d0
 80197bc:	4e67      	ldr	r6, [pc, #412]	; (801995c <__ieee754_sqrt+0x1a8>)
 80197be:	43ae      	bics	r6, r5
 80197c0:	ee10 0a10 	vmov	r0, s0
 80197c4:	ee10 2a10 	vmov	r2, s0
 80197c8:	4629      	mov	r1, r5
 80197ca:	462b      	mov	r3, r5
 80197cc:	d10d      	bne.n	80197ea <__ieee754_sqrt+0x36>
 80197ce:	f7e6 ff3b 	bl	8000648 <__aeabi_dmul>
 80197d2:	4602      	mov	r2, r0
 80197d4:	460b      	mov	r3, r1
 80197d6:	4620      	mov	r0, r4
 80197d8:	4629      	mov	r1, r5
 80197da:	f7e6 fd7f 	bl	80002dc <__adddf3>
 80197de:	4604      	mov	r4, r0
 80197e0:	460d      	mov	r5, r1
 80197e2:	ec45 4b10 	vmov	d0, r4, r5
 80197e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ea:	2d00      	cmp	r5, #0
 80197ec:	dc0b      	bgt.n	8019806 <__ieee754_sqrt+0x52>
 80197ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80197f2:	4326      	orrs	r6, r4
 80197f4:	d0f5      	beq.n	80197e2 <__ieee754_sqrt+0x2e>
 80197f6:	b135      	cbz	r5, 8019806 <__ieee754_sqrt+0x52>
 80197f8:	f7e6 fd6e 	bl	80002d8 <__aeabi_dsub>
 80197fc:	4602      	mov	r2, r0
 80197fe:	460b      	mov	r3, r1
 8019800:	f7e7 f84c 	bl	800089c <__aeabi_ddiv>
 8019804:	e7eb      	b.n	80197de <__ieee754_sqrt+0x2a>
 8019806:	1509      	asrs	r1, r1, #20
 8019808:	f000 808d 	beq.w	8019926 <__ieee754_sqrt+0x172>
 801980c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019810:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019818:	07c9      	lsls	r1, r1, #31
 801981a:	bf5c      	itt	pl
 801981c:	005b      	lslpl	r3, r3, #1
 801981e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019822:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019826:	bf58      	it	pl
 8019828:	0052      	lslpl	r2, r2, #1
 801982a:	2500      	movs	r5, #0
 801982c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019830:	1076      	asrs	r6, r6, #1
 8019832:	0052      	lsls	r2, r2, #1
 8019834:	f04f 0e16 	mov.w	lr, #22
 8019838:	46ac      	mov	ip, r5
 801983a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801983e:	eb0c 0001 	add.w	r0, ip, r1
 8019842:	4298      	cmp	r0, r3
 8019844:	bfde      	ittt	le
 8019846:	1a1b      	suble	r3, r3, r0
 8019848:	eb00 0c01 	addle.w	ip, r0, r1
 801984c:	186d      	addle	r5, r5, r1
 801984e:	005b      	lsls	r3, r3, #1
 8019850:	f1be 0e01 	subs.w	lr, lr, #1
 8019854:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019858:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801985c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019860:	d1ed      	bne.n	801983e <__ieee754_sqrt+0x8a>
 8019862:	4674      	mov	r4, lr
 8019864:	2720      	movs	r7, #32
 8019866:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801986a:	4563      	cmp	r3, ip
 801986c:	eb01 000e 	add.w	r0, r1, lr
 8019870:	dc02      	bgt.n	8019878 <__ieee754_sqrt+0xc4>
 8019872:	d113      	bne.n	801989c <__ieee754_sqrt+0xe8>
 8019874:	4290      	cmp	r0, r2
 8019876:	d811      	bhi.n	801989c <__ieee754_sqrt+0xe8>
 8019878:	2800      	cmp	r0, #0
 801987a:	eb00 0e01 	add.w	lr, r0, r1
 801987e:	da57      	bge.n	8019930 <__ieee754_sqrt+0x17c>
 8019880:	f1be 0f00 	cmp.w	lr, #0
 8019884:	db54      	blt.n	8019930 <__ieee754_sqrt+0x17c>
 8019886:	f10c 0801 	add.w	r8, ip, #1
 801988a:	eba3 030c 	sub.w	r3, r3, ip
 801988e:	4290      	cmp	r0, r2
 8019890:	bf88      	it	hi
 8019892:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019896:	1a12      	subs	r2, r2, r0
 8019898:	440c      	add	r4, r1
 801989a:	46c4      	mov	ip, r8
 801989c:	005b      	lsls	r3, r3, #1
 801989e:	3f01      	subs	r7, #1
 80198a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80198a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80198a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80198ac:	d1dd      	bne.n	801986a <__ieee754_sqrt+0xb6>
 80198ae:	4313      	orrs	r3, r2
 80198b0:	d01b      	beq.n	80198ea <__ieee754_sqrt+0x136>
 80198b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019960 <__ieee754_sqrt+0x1ac>
 80198b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019964 <__ieee754_sqrt+0x1b0>
 80198ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80198be:	e9db 2300 	ldrd	r2, r3, [fp]
 80198c2:	f7e6 fd09 	bl	80002d8 <__aeabi_dsub>
 80198c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80198ca:	4602      	mov	r2, r0
 80198cc:	460b      	mov	r3, r1
 80198ce:	4640      	mov	r0, r8
 80198d0:	4649      	mov	r1, r9
 80198d2:	f7e7 f935 	bl	8000b40 <__aeabi_dcmple>
 80198d6:	b140      	cbz	r0, 80198ea <__ieee754_sqrt+0x136>
 80198d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80198dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80198e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80198e4:	d126      	bne.n	8019934 <__ieee754_sqrt+0x180>
 80198e6:	3501      	adds	r5, #1
 80198e8:	463c      	mov	r4, r7
 80198ea:	106a      	asrs	r2, r5, #1
 80198ec:	0863      	lsrs	r3, r4, #1
 80198ee:	07e9      	lsls	r1, r5, #31
 80198f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80198f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80198f8:	bf48      	it	mi
 80198fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80198fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019902:	461c      	mov	r4, r3
 8019904:	e76d      	b.n	80197e2 <__ieee754_sqrt+0x2e>
 8019906:	0ad3      	lsrs	r3, r2, #11
 8019908:	3815      	subs	r0, #21
 801990a:	0552      	lsls	r2, r2, #21
 801990c:	2b00      	cmp	r3, #0
 801990e:	d0fa      	beq.n	8019906 <__ieee754_sqrt+0x152>
 8019910:	02dc      	lsls	r4, r3, #11
 8019912:	d50a      	bpl.n	801992a <__ieee754_sqrt+0x176>
 8019914:	f1c1 0420 	rsb	r4, r1, #32
 8019918:	fa22 f404 	lsr.w	r4, r2, r4
 801991c:	1e4d      	subs	r5, r1, #1
 801991e:	408a      	lsls	r2, r1
 8019920:	4323      	orrs	r3, r4
 8019922:	1b41      	subs	r1, r0, r5
 8019924:	e772      	b.n	801980c <__ieee754_sqrt+0x58>
 8019926:	4608      	mov	r0, r1
 8019928:	e7f0      	b.n	801990c <__ieee754_sqrt+0x158>
 801992a:	005b      	lsls	r3, r3, #1
 801992c:	3101      	adds	r1, #1
 801992e:	e7ef      	b.n	8019910 <__ieee754_sqrt+0x15c>
 8019930:	46e0      	mov	r8, ip
 8019932:	e7aa      	b.n	801988a <__ieee754_sqrt+0xd6>
 8019934:	f7e6 fcd2 	bl	80002dc <__adddf3>
 8019938:	e9da 8900 	ldrd	r8, r9, [sl]
 801993c:	4602      	mov	r2, r0
 801993e:	460b      	mov	r3, r1
 8019940:	4640      	mov	r0, r8
 8019942:	4649      	mov	r1, r9
 8019944:	f7e7 f8f2 	bl	8000b2c <__aeabi_dcmplt>
 8019948:	b120      	cbz	r0, 8019954 <__ieee754_sqrt+0x1a0>
 801994a:	1ca0      	adds	r0, r4, #2
 801994c:	bf08      	it	eq
 801994e:	3501      	addeq	r5, #1
 8019950:	3402      	adds	r4, #2
 8019952:	e7ca      	b.n	80198ea <__ieee754_sqrt+0x136>
 8019954:	3401      	adds	r4, #1
 8019956:	f024 0401 	bic.w	r4, r4, #1
 801995a:	e7c6      	b.n	80198ea <__ieee754_sqrt+0x136>
 801995c:	7ff00000 	.word	0x7ff00000
 8019960:	200001e0 	.word	0x200001e0
 8019964:	200001e8 	.word	0x200001e8

08019968 <__ieee754_sqrtf>:
 8019968:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801996c:	4770      	bx	lr
	...

08019970 <__ieee754_pow>:
 8019970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019974:	ed2d 8b06 	vpush	{d8-d10}
 8019978:	b089      	sub	sp, #36	; 0x24
 801997a:	ed8d 1b00 	vstr	d1, [sp]
 801997e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019986:	ea58 0102 	orrs.w	r1, r8, r2
 801998a:	ec57 6b10 	vmov	r6, r7, d0
 801998e:	d115      	bne.n	80199bc <__ieee754_pow+0x4c>
 8019990:	19b3      	adds	r3, r6, r6
 8019992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019996:	4152      	adcs	r2, r2
 8019998:	4299      	cmp	r1, r3
 801999a:	4b89      	ldr	r3, [pc, #548]	; (8019bc0 <__ieee754_pow+0x250>)
 801999c:	4193      	sbcs	r3, r2
 801999e:	f080 84d1 	bcs.w	801a344 <__ieee754_pow+0x9d4>
 80199a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80199a6:	4630      	mov	r0, r6
 80199a8:	4639      	mov	r1, r7
 80199aa:	f7e6 fc97 	bl	80002dc <__adddf3>
 80199ae:	ec41 0b10 	vmov	d0, r0, r1
 80199b2:	b009      	add	sp, #36	; 0x24
 80199b4:	ecbd 8b06 	vpop	{d8-d10}
 80199b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199bc:	4b81      	ldr	r3, [pc, #516]	; (8019bc4 <__ieee754_pow+0x254>)
 80199be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80199c2:	429c      	cmp	r4, r3
 80199c4:	ee10 aa10 	vmov	sl, s0
 80199c8:	463d      	mov	r5, r7
 80199ca:	dc06      	bgt.n	80199da <__ieee754_pow+0x6a>
 80199cc:	d101      	bne.n	80199d2 <__ieee754_pow+0x62>
 80199ce:	2e00      	cmp	r6, #0
 80199d0:	d1e7      	bne.n	80199a2 <__ieee754_pow+0x32>
 80199d2:	4598      	cmp	r8, r3
 80199d4:	dc01      	bgt.n	80199da <__ieee754_pow+0x6a>
 80199d6:	d10f      	bne.n	80199f8 <__ieee754_pow+0x88>
 80199d8:	b172      	cbz	r2, 80199f8 <__ieee754_pow+0x88>
 80199da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80199de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80199e2:	ea55 050a 	orrs.w	r5, r5, sl
 80199e6:	d1dc      	bne.n	80199a2 <__ieee754_pow+0x32>
 80199e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80199ec:	18db      	adds	r3, r3, r3
 80199ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80199f2:	4152      	adcs	r2, r2
 80199f4:	429d      	cmp	r5, r3
 80199f6:	e7d0      	b.n	801999a <__ieee754_pow+0x2a>
 80199f8:	2d00      	cmp	r5, #0
 80199fa:	da3b      	bge.n	8019a74 <__ieee754_pow+0x104>
 80199fc:	4b72      	ldr	r3, [pc, #456]	; (8019bc8 <__ieee754_pow+0x258>)
 80199fe:	4598      	cmp	r8, r3
 8019a00:	dc51      	bgt.n	8019aa6 <__ieee754_pow+0x136>
 8019a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019a06:	4598      	cmp	r8, r3
 8019a08:	f340 84ab 	ble.w	801a362 <__ieee754_pow+0x9f2>
 8019a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019a14:	2b14      	cmp	r3, #20
 8019a16:	dd0f      	ble.n	8019a38 <__ieee754_pow+0xc8>
 8019a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8019a20:	fa01 f303 	lsl.w	r3, r1, r3
 8019a24:	4293      	cmp	r3, r2
 8019a26:	f040 849c 	bne.w	801a362 <__ieee754_pow+0x9f2>
 8019a2a:	f001 0101 	and.w	r1, r1, #1
 8019a2e:	f1c1 0302 	rsb	r3, r1, #2
 8019a32:	9304      	str	r3, [sp, #16]
 8019a34:	b182      	cbz	r2, 8019a58 <__ieee754_pow+0xe8>
 8019a36:	e05f      	b.n	8019af8 <__ieee754_pow+0x188>
 8019a38:	2a00      	cmp	r2, #0
 8019a3a:	d15b      	bne.n	8019af4 <__ieee754_pow+0x184>
 8019a3c:	f1c3 0314 	rsb	r3, r3, #20
 8019a40:	fa48 f103 	asr.w	r1, r8, r3
 8019a44:	fa01 f303 	lsl.w	r3, r1, r3
 8019a48:	4543      	cmp	r3, r8
 8019a4a:	f040 8487 	bne.w	801a35c <__ieee754_pow+0x9ec>
 8019a4e:	f001 0101 	and.w	r1, r1, #1
 8019a52:	f1c1 0302 	rsb	r3, r1, #2
 8019a56:	9304      	str	r3, [sp, #16]
 8019a58:	4b5c      	ldr	r3, [pc, #368]	; (8019bcc <__ieee754_pow+0x25c>)
 8019a5a:	4598      	cmp	r8, r3
 8019a5c:	d132      	bne.n	8019ac4 <__ieee754_pow+0x154>
 8019a5e:	f1b9 0f00 	cmp.w	r9, #0
 8019a62:	f280 8477 	bge.w	801a354 <__ieee754_pow+0x9e4>
 8019a66:	4959      	ldr	r1, [pc, #356]	; (8019bcc <__ieee754_pow+0x25c>)
 8019a68:	4632      	mov	r2, r6
 8019a6a:	463b      	mov	r3, r7
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	f7e6 ff15 	bl	800089c <__aeabi_ddiv>
 8019a72:	e79c      	b.n	80199ae <__ieee754_pow+0x3e>
 8019a74:	2300      	movs	r3, #0
 8019a76:	9304      	str	r3, [sp, #16]
 8019a78:	2a00      	cmp	r2, #0
 8019a7a:	d13d      	bne.n	8019af8 <__ieee754_pow+0x188>
 8019a7c:	4b51      	ldr	r3, [pc, #324]	; (8019bc4 <__ieee754_pow+0x254>)
 8019a7e:	4598      	cmp	r8, r3
 8019a80:	d1ea      	bne.n	8019a58 <__ieee754_pow+0xe8>
 8019a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8019a8e:	f000 8459 	beq.w	801a344 <__ieee754_pow+0x9d4>
 8019a92:	4b4f      	ldr	r3, [pc, #316]	; (8019bd0 <__ieee754_pow+0x260>)
 8019a94:	429c      	cmp	r4, r3
 8019a96:	dd08      	ble.n	8019aaa <__ieee754_pow+0x13a>
 8019a98:	f1b9 0f00 	cmp.w	r9, #0
 8019a9c:	f2c0 8456 	blt.w	801a34c <__ieee754_pow+0x9dc>
 8019aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019aa4:	e783      	b.n	80199ae <__ieee754_pow+0x3e>
 8019aa6:	2302      	movs	r3, #2
 8019aa8:	e7e5      	b.n	8019a76 <__ieee754_pow+0x106>
 8019aaa:	f1b9 0f00 	cmp.w	r9, #0
 8019aae:	f04f 0000 	mov.w	r0, #0
 8019ab2:	f04f 0100 	mov.w	r1, #0
 8019ab6:	f6bf af7a 	bge.w	80199ae <__ieee754_pow+0x3e>
 8019aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019ac2:	e774      	b.n	80199ae <__ieee754_pow+0x3e>
 8019ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019ac8:	d106      	bne.n	8019ad8 <__ieee754_pow+0x168>
 8019aca:	4632      	mov	r2, r6
 8019acc:	463b      	mov	r3, r7
 8019ace:	4630      	mov	r0, r6
 8019ad0:	4639      	mov	r1, r7
 8019ad2:	f7e6 fdb9 	bl	8000648 <__aeabi_dmul>
 8019ad6:	e76a      	b.n	80199ae <__ieee754_pow+0x3e>
 8019ad8:	4b3e      	ldr	r3, [pc, #248]	; (8019bd4 <__ieee754_pow+0x264>)
 8019ada:	4599      	cmp	r9, r3
 8019adc:	d10c      	bne.n	8019af8 <__ieee754_pow+0x188>
 8019ade:	2d00      	cmp	r5, #0
 8019ae0:	db0a      	blt.n	8019af8 <__ieee754_pow+0x188>
 8019ae2:	ec47 6b10 	vmov	d0, r6, r7
 8019ae6:	b009      	add	sp, #36	; 0x24
 8019ae8:	ecbd 8b06 	vpop	{d8-d10}
 8019aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af0:	f7ff be60 	b.w	80197b4 <__ieee754_sqrt>
 8019af4:	2300      	movs	r3, #0
 8019af6:	9304      	str	r3, [sp, #16]
 8019af8:	ec47 6b10 	vmov	d0, r6, r7
 8019afc:	f000 fc62 	bl	801a3c4 <fabs>
 8019b00:	ec51 0b10 	vmov	r0, r1, d0
 8019b04:	f1ba 0f00 	cmp.w	sl, #0
 8019b08:	d129      	bne.n	8019b5e <__ieee754_pow+0x1ee>
 8019b0a:	b124      	cbz	r4, 8019b16 <__ieee754_pow+0x1a6>
 8019b0c:	4b2f      	ldr	r3, [pc, #188]	; (8019bcc <__ieee754_pow+0x25c>)
 8019b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019b12:	429a      	cmp	r2, r3
 8019b14:	d123      	bne.n	8019b5e <__ieee754_pow+0x1ee>
 8019b16:	f1b9 0f00 	cmp.w	r9, #0
 8019b1a:	da05      	bge.n	8019b28 <__ieee754_pow+0x1b8>
 8019b1c:	4602      	mov	r2, r0
 8019b1e:	460b      	mov	r3, r1
 8019b20:	2000      	movs	r0, #0
 8019b22:	492a      	ldr	r1, [pc, #168]	; (8019bcc <__ieee754_pow+0x25c>)
 8019b24:	f7e6 feba 	bl	800089c <__aeabi_ddiv>
 8019b28:	2d00      	cmp	r5, #0
 8019b2a:	f6bf af40 	bge.w	80199ae <__ieee754_pow+0x3e>
 8019b2e:	9b04      	ldr	r3, [sp, #16]
 8019b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019b38:	431c      	orrs	r4, r3
 8019b3a:	d108      	bne.n	8019b4e <__ieee754_pow+0x1de>
 8019b3c:	4602      	mov	r2, r0
 8019b3e:	460b      	mov	r3, r1
 8019b40:	4610      	mov	r0, r2
 8019b42:	4619      	mov	r1, r3
 8019b44:	f7e6 fbc8 	bl	80002d8 <__aeabi_dsub>
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	e78f      	b.n	8019a6e <__ieee754_pow+0xfe>
 8019b4e:	9b04      	ldr	r3, [sp, #16]
 8019b50:	2b01      	cmp	r3, #1
 8019b52:	f47f af2c 	bne.w	80199ae <__ieee754_pow+0x3e>
 8019b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	e727      	b.n	80199ae <__ieee754_pow+0x3e>
 8019b5e:	0feb      	lsrs	r3, r5, #31
 8019b60:	3b01      	subs	r3, #1
 8019b62:	9306      	str	r3, [sp, #24]
 8019b64:	9a06      	ldr	r2, [sp, #24]
 8019b66:	9b04      	ldr	r3, [sp, #16]
 8019b68:	4313      	orrs	r3, r2
 8019b6a:	d102      	bne.n	8019b72 <__ieee754_pow+0x202>
 8019b6c:	4632      	mov	r2, r6
 8019b6e:	463b      	mov	r3, r7
 8019b70:	e7e6      	b.n	8019b40 <__ieee754_pow+0x1d0>
 8019b72:	4b19      	ldr	r3, [pc, #100]	; (8019bd8 <__ieee754_pow+0x268>)
 8019b74:	4598      	cmp	r8, r3
 8019b76:	f340 80fb 	ble.w	8019d70 <__ieee754_pow+0x400>
 8019b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019b7e:	4598      	cmp	r8, r3
 8019b80:	4b13      	ldr	r3, [pc, #76]	; (8019bd0 <__ieee754_pow+0x260>)
 8019b82:	dd0c      	ble.n	8019b9e <__ieee754_pow+0x22e>
 8019b84:	429c      	cmp	r4, r3
 8019b86:	dc0f      	bgt.n	8019ba8 <__ieee754_pow+0x238>
 8019b88:	f1b9 0f00 	cmp.w	r9, #0
 8019b8c:	da0f      	bge.n	8019bae <__ieee754_pow+0x23e>
 8019b8e:	2000      	movs	r0, #0
 8019b90:	b009      	add	sp, #36	; 0x24
 8019b92:	ecbd 8b06 	vpop	{d8-d10}
 8019b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9a:	f001 bbba 	b.w	801b312 <__math_oflow>
 8019b9e:	429c      	cmp	r4, r3
 8019ba0:	dbf2      	blt.n	8019b88 <__ieee754_pow+0x218>
 8019ba2:	4b0a      	ldr	r3, [pc, #40]	; (8019bcc <__ieee754_pow+0x25c>)
 8019ba4:	429c      	cmp	r4, r3
 8019ba6:	dd19      	ble.n	8019bdc <__ieee754_pow+0x26c>
 8019ba8:	f1b9 0f00 	cmp.w	r9, #0
 8019bac:	dcef      	bgt.n	8019b8e <__ieee754_pow+0x21e>
 8019bae:	2000      	movs	r0, #0
 8019bb0:	b009      	add	sp, #36	; 0x24
 8019bb2:	ecbd 8b06 	vpop	{d8-d10}
 8019bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bba:	f001 bba1 	b.w	801b300 <__math_uflow>
 8019bbe:	bf00      	nop
 8019bc0:	fff00000 	.word	0xfff00000
 8019bc4:	7ff00000 	.word	0x7ff00000
 8019bc8:	433fffff 	.word	0x433fffff
 8019bcc:	3ff00000 	.word	0x3ff00000
 8019bd0:	3fefffff 	.word	0x3fefffff
 8019bd4:	3fe00000 	.word	0x3fe00000
 8019bd8:	41e00000 	.word	0x41e00000
 8019bdc:	4b60      	ldr	r3, [pc, #384]	; (8019d60 <__ieee754_pow+0x3f0>)
 8019bde:	2200      	movs	r2, #0
 8019be0:	f7e6 fb7a 	bl	80002d8 <__aeabi_dsub>
 8019be4:	a354      	add	r3, pc, #336	; (adr r3, 8019d38 <__ieee754_pow+0x3c8>)
 8019be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bea:	4604      	mov	r4, r0
 8019bec:	460d      	mov	r5, r1
 8019bee:	f7e6 fd2b 	bl	8000648 <__aeabi_dmul>
 8019bf2:	a353      	add	r3, pc, #332	; (adr r3, 8019d40 <__ieee754_pow+0x3d0>)
 8019bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf8:	4606      	mov	r6, r0
 8019bfa:	460f      	mov	r7, r1
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	4629      	mov	r1, r5
 8019c00:	f7e6 fd22 	bl	8000648 <__aeabi_dmul>
 8019c04:	4b57      	ldr	r3, [pc, #348]	; (8019d64 <__ieee754_pow+0x3f4>)
 8019c06:	4682      	mov	sl, r0
 8019c08:	468b      	mov	fp, r1
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	4629      	mov	r1, r5
 8019c10:	f7e6 fd1a 	bl	8000648 <__aeabi_dmul>
 8019c14:	4602      	mov	r2, r0
 8019c16:	460b      	mov	r3, r1
 8019c18:	a14b      	add	r1, pc, #300	; (adr r1, 8019d48 <__ieee754_pow+0x3d8>)
 8019c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c1e:	f7e6 fb5b 	bl	80002d8 <__aeabi_dsub>
 8019c22:	4622      	mov	r2, r4
 8019c24:	462b      	mov	r3, r5
 8019c26:	f7e6 fd0f 	bl	8000648 <__aeabi_dmul>
 8019c2a:	4602      	mov	r2, r0
 8019c2c:	460b      	mov	r3, r1
 8019c2e:	2000      	movs	r0, #0
 8019c30:	494d      	ldr	r1, [pc, #308]	; (8019d68 <__ieee754_pow+0x3f8>)
 8019c32:	f7e6 fb51 	bl	80002d8 <__aeabi_dsub>
 8019c36:	4622      	mov	r2, r4
 8019c38:	4680      	mov	r8, r0
 8019c3a:	4689      	mov	r9, r1
 8019c3c:	462b      	mov	r3, r5
 8019c3e:	4620      	mov	r0, r4
 8019c40:	4629      	mov	r1, r5
 8019c42:	f7e6 fd01 	bl	8000648 <__aeabi_dmul>
 8019c46:	4602      	mov	r2, r0
 8019c48:	460b      	mov	r3, r1
 8019c4a:	4640      	mov	r0, r8
 8019c4c:	4649      	mov	r1, r9
 8019c4e:	f7e6 fcfb 	bl	8000648 <__aeabi_dmul>
 8019c52:	a33f      	add	r3, pc, #252	; (adr r3, 8019d50 <__ieee754_pow+0x3e0>)
 8019c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c58:	f7e6 fcf6 	bl	8000648 <__aeabi_dmul>
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	460b      	mov	r3, r1
 8019c60:	4650      	mov	r0, sl
 8019c62:	4659      	mov	r1, fp
 8019c64:	f7e6 fb38 	bl	80002d8 <__aeabi_dsub>
 8019c68:	4602      	mov	r2, r0
 8019c6a:	460b      	mov	r3, r1
 8019c6c:	4680      	mov	r8, r0
 8019c6e:	4689      	mov	r9, r1
 8019c70:	4630      	mov	r0, r6
 8019c72:	4639      	mov	r1, r7
 8019c74:	f7e6 fb32 	bl	80002dc <__adddf3>
 8019c78:	2000      	movs	r0, #0
 8019c7a:	4632      	mov	r2, r6
 8019c7c:	463b      	mov	r3, r7
 8019c7e:	4604      	mov	r4, r0
 8019c80:	460d      	mov	r5, r1
 8019c82:	f7e6 fb29 	bl	80002d8 <__aeabi_dsub>
 8019c86:	4602      	mov	r2, r0
 8019c88:	460b      	mov	r3, r1
 8019c8a:	4640      	mov	r0, r8
 8019c8c:	4649      	mov	r1, r9
 8019c8e:	f7e6 fb23 	bl	80002d8 <__aeabi_dsub>
 8019c92:	9b04      	ldr	r3, [sp, #16]
 8019c94:	9a06      	ldr	r2, [sp, #24]
 8019c96:	3b01      	subs	r3, #1
 8019c98:	4313      	orrs	r3, r2
 8019c9a:	4682      	mov	sl, r0
 8019c9c:	468b      	mov	fp, r1
 8019c9e:	f040 81e7 	bne.w	801a070 <__ieee754_pow+0x700>
 8019ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019d58 <__ieee754_pow+0x3e8>
 8019ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8019caa:	eef0 8a67 	vmov.f32	s17, s15
 8019cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019cb2:	2600      	movs	r6, #0
 8019cb4:	4632      	mov	r2, r6
 8019cb6:	463b      	mov	r3, r7
 8019cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019cbc:	f7e6 fb0c 	bl	80002d8 <__aeabi_dsub>
 8019cc0:	4622      	mov	r2, r4
 8019cc2:	462b      	mov	r3, r5
 8019cc4:	f7e6 fcc0 	bl	8000648 <__aeabi_dmul>
 8019cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019ccc:	4680      	mov	r8, r0
 8019cce:	4689      	mov	r9, r1
 8019cd0:	4650      	mov	r0, sl
 8019cd2:	4659      	mov	r1, fp
 8019cd4:	f7e6 fcb8 	bl	8000648 <__aeabi_dmul>
 8019cd8:	4602      	mov	r2, r0
 8019cda:	460b      	mov	r3, r1
 8019cdc:	4640      	mov	r0, r8
 8019cde:	4649      	mov	r1, r9
 8019ce0:	f7e6 fafc 	bl	80002dc <__adddf3>
 8019ce4:	4632      	mov	r2, r6
 8019ce6:	463b      	mov	r3, r7
 8019ce8:	4680      	mov	r8, r0
 8019cea:	4689      	mov	r9, r1
 8019cec:	4620      	mov	r0, r4
 8019cee:	4629      	mov	r1, r5
 8019cf0:	f7e6 fcaa 	bl	8000648 <__aeabi_dmul>
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	4604      	mov	r4, r0
 8019cf8:	460d      	mov	r5, r1
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	4649      	mov	r1, r9
 8019cfe:	4640      	mov	r0, r8
 8019d00:	f7e6 faec 	bl	80002dc <__adddf3>
 8019d04:	4b19      	ldr	r3, [pc, #100]	; (8019d6c <__ieee754_pow+0x3fc>)
 8019d06:	4299      	cmp	r1, r3
 8019d08:	ec45 4b19 	vmov	d9, r4, r5
 8019d0c:	4606      	mov	r6, r0
 8019d0e:	460f      	mov	r7, r1
 8019d10:	468b      	mov	fp, r1
 8019d12:	f340 82f0 	ble.w	801a2f6 <__ieee754_pow+0x986>
 8019d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019d1e:	4303      	orrs	r3, r0
 8019d20:	f000 81e4 	beq.w	801a0ec <__ieee754_pow+0x77c>
 8019d24:	ec51 0b18 	vmov	r0, r1, d8
 8019d28:	2200      	movs	r2, #0
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	f7e6 fefe 	bl	8000b2c <__aeabi_dcmplt>
 8019d30:	3800      	subs	r0, #0
 8019d32:	bf18      	it	ne
 8019d34:	2001      	movne	r0, #1
 8019d36:	e72b      	b.n	8019b90 <__ieee754_pow+0x220>
 8019d38:	60000000 	.word	0x60000000
 8019d3c:	3ff71547 	.word	0x3ff71547
 8019d40:	f85ddf44 	.word	0xf85ddf44
 8019d44:	3e54ae0b 	.word	0x3e54ae0b
 8019d48:	55555555 	.word	0x55555555
 8019d4c:	3fd55555 	.word	0x3fd55555
 8019d50:	652b82fe 	.word	0x652b82fe
 8019d54:	3ff71547 	.word	0x3ff71547
 8019d58:	00000000 	.word	0x00000000
 8019d5c:	bff00000 	.word	0xbff00000
 8019d60:	3ff00000 	.word	0x3ff00000
 8019d64:	3fd00000 	.word	0x3fd00000
 8019d68:	3fe00000 	.word	0x3fe00000
 8019d6c:	408fffff 	.word	0x408fffff
 8019d70:	4bd5      	ldr	r3, [pc, #852]	; (801a0c8 <__ieee754_pow+0x758>)
 8019d72:	402b      	ands	r3, r5
 8019d74:	2200      	movs	r2, #0
 8019d76:	b92b      	cbnz	r3, 8019d84 <__ieee754_pow+0x414>
 8019d78:	4bd4      	ldr	r3, [pc, #848]	; (801a0cc <__ieee754_pow+0x75c>)
 8019d7a:	f7e6 fc65 	bl	8000648 <__aeabi_dmul>
 8019d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019d82:	460c      	mov	r4, r1
 8019d84:	1523      	asrs	r3, r4, #20
 8019d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019d8a:	4413      	add	r3, r2
 8019d8c:	9305      	str	r3, [sp, #20]
 8019d8e:	4bd0      	ldr	r3, [pc, #832]	; (801a0d0 <__ieee754_pow+0x760>)
 8019d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019d98:	429c      	cmp	r4, r3
 8019d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019d9e:	dd08      	ble.n	8019db2 <__ieee754_pow+0x442>
 8019da0:	4bcc      	ldr	r3, [pc, #816]	; (801a0d4 <__ieee754_pow+0x764>)
 8019da2:	429c      	cmp	r4, r3
 8019da4:	f340 8162 	ble.w	801a06c <__ieee754_pow+0x6fc>
 8019da8:	9b05      	ldr	r3, [sp, #20]
 8019daa:	3301      	adds	r3, #1
 8019dac:	9305      	str	r3, [sp, #20]
 8019dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019db2:	2400      	movs	r4, #0
 8019db4:	00e3      	lsls	r3, r4, #3
 8019db6:	9307      	str	r3, [sp, #28]
 8019db8:	4bc7      	ldr	r3, [pc, #796]	; (801a0d8 <__ieee754_pow+0x768>)
 8019dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019dbe:	ed93 7b00 	vldr	d7, [r3]
 8019dc2:	4629      	mov	r1, r5
 8019dc4:	ec53 2b17 	vmov	r2, r3, d7
 8019dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8019dcc:	eef0 9a67 	vmov.f32	s19, s15
 8019dd0:	4682      	mov	sl, r0
 8019dd2:	f7e6 fa81 	bl	80002d8 <__aeabi_dsub>
 8019dd6:	4652      	mov	r2, sl
 8019dd8:	4606      	mov	r6, r0
 8019dda:	460f      	mov	r7, r1
 8019ddc:	462b      	mov	r3, r5
 8019dde:	ec51 0b19 	vmov	r0, r1, d9
 8019de2:	f7e6 fa7b 	bl	80002dc <__adddf3>
 8019de6:	4602      	mov	r2, r0
 8019de8:	460b      	mov	r3, r1
 8019dea:	2000      	movs	r0, #0
 8019dec:	49bb      	ldr	r1, [pc, #748]	; (801a0dc <__ieee754_pow+0x76c>)
 8019dee:	f7e6 fd55 	bl	800089c <__aeabi_ddiv>
 8019df2:	ec41 0b1a 	vmov	d10, r0, r1
 8019df6:	4602      	mov	r2, r0
 8019df8:	460b      	mov	r3, r1
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	4639      	mov	r1, r7
 8019dfe:	f7e6 fc23 	bl	8000648 <__aeabi_dmul>
 8019e02:	2300      	movs	r3, #0
 8019e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e08:	9302      	str	r3, [sp, #8]
 8019e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019e0e:	46ab      	mov	fp, r5
 8019e10:	106d      	asrs	r5, r5, #1
 8019e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019e1a:	ec41 0b18 	vmov	d8, r0, r1
 8019e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019e22:	2200      	movs	r2, #0
 8019e24:	4640      	mov	r0, r8
 8019e26:	4649      	mov	r1, r9
 8019e28:	4614      	mov	r4, r2
 8019e2a:	461d      	mov	r5, r3
 8019e2c:	f7e6 fc0c 	bl	8000648 <__aeabi_dmul>
 8019e30:	4602      	mov	r2, r0
 8019e32:	460b      	mov	r3, r1
 8019e34:	4630      	mov	r0, r6
 8019e36:	4639      	mov	r1, r7
 8019e38:	f7e6 fa4e 	bl	80002d8 <__aeabi_dsub>
 8019e3c:	ec53 2b19 	vmov	r2, r3, d9
 8019e40:	4606      	mov	r6, r0
 8019e42:	460f      	mov	r7, r1
 8019e44:	4620      	mov	r0, r4
 8019e46:	4629      	mov	r1, r5
 8019e48:	f7e6 fa46 	bl	80002d8 <__aeabi_dsub>
 8019e4c:	4602      	mov	r2, r0
 8019e4e:	460b      	mov	r3, r1
 8019e50:	4650      	mov	r0, sl
 8019e52:	4659      	mov	r1, fp
 8019e54:	f7e6 fa40 	bl	80002d8 <__aeabi_dsub>
 8019e58:	4642      	mov	r2, r8
 8019e5a:	464b      	mov	r3, r9
 8019e5c:	f7e6 fbf4 	bl	8000648 <__aeabi_dmul>
 8019e60:	4602      	mov	r2, r0
 8019e62:	460b      	mov	r3, r1
 8019e64:	4630      	mov	r0, r6
 8019e66:	4639      	mov	r1, r7
 8019e68:	f7e6 fa36 	bl	80002d8 <__aeabi_dsub>
 8019e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8019e70:	f7e6 fbea 	bl	8000648 <__aeabi_dmul>
 8019e74:	ec53 2b18 	vmov	r2, r3, d8
 8019e78:	ec41 0b19 	vmov	d9, r0, r1
 8019e7c:	ec51 0b18 	vmov	r0, r1, d8
 8019e80:	f7e6 fbe2 	bl	8000648 <__aeabi_dmul>
 8019e84:	a37c      	add	r3, pc, #496	; (adr r3, 801a078 <__ieee754_pow+0x708>)
 8019e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	460d      	mov	r5, r1
 8019e8e:	f7e6 fbdb 	bl	8000648 <__aeabi_dmul>
 8019e92:	a37b      	add	r3, pc, #492	; (adr r3, 801a080 <__ieee754_pow+0x710>)
 8019e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e98:	f7e6 fa20 	bl	80002dc <__adddf3>
 8019e9c:	4622      	mov	r2, r4
 8019e9e:	462b      	mov	r3, r5
 8019ea0:	f7e6 fbd2 	bl	8000648 <__aeabi_dmul>
 8019ea4:	a378      	add	r3, pc, #480	; (adr r3, 801a088 <__ieee754_pow+0x718>)
 8019ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eaa:	f7e6 fa17 	bl	80002dc <__adddf3>
 8019eae:	4622      	mov	r2, r4
 8019eb0:	462b      	mov	r3, r5
 8019eb2:	f7e6 fbc9 	bl	8000648 <__aeabi_dmul>
 8019eb6:	a376      	add	r3, pc, #472	; (adr r3, 801a090 <__ieee754_pow+0x720>)
 8019eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ebc:	f7e6 fa0e 	bl	80002dc <__adddf3>
 8019ec0:	4622      	mov	r2, r4
 8019ec2:	462b      	mov	r3, r5
 8019ec4:	f7e6 fbc0 	bl	8000648 <__aeabi_dmul>
 8019ec8:	a373      	add	r3, pc, #460	; (adr r3, 801a098 <__ieee754_pow+0x728>)
 8019eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ece:	f7e6 fa05 	bl	80002dc <__adddf3>
 8019ed2:	4622      	mov	r2, r4
 8019ed4:	462b      	mov	r3, r5
 8019ed6:	f7e6 fbb7 	bl	8000648 <__aeabi_dmul>
 8019eda:	a371      	add	r3, pc, #452	; (adr r3, 801a0a0 <__ieee754_pow+0x730>)
 8019edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee0:	f7e6 f9fc 	bl	80002dc <__adddf3>
 8019ee4:	4622      	mov	r2, r4
 8019ee6:	4606      	mov	r6, r0
 8019ee8:	460f      	mov	r7, r1
 8019eea:	462b      	mov	r3, r5
 8019eec:	4620      	mov	r0, r4
 8019eee:	4629      	mov	r1, r5
 8019ef0:	f7e6 fbaa 	bl	8000648 <__aeabi_dmul>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	460b      	mov	r3, r1
 8019ef8:	4630      	mov	r0, r6
 8019efa:	4639      	mov	r1, r7
 8019efc:	f7e6 fba4 	bl	8000648 <__aeabi_dmul>
 8019f00:	4642      	mov	r2, r8
 8019f02:	4604      	mov	r4, r0
 8019f04:	460d      	mov	r5, r1
 8019f06:	464b      	mov	r3, r9
 8019f08:	ec51 0b18 	vmov	r0, r1, d8
 8019f0c:	f7e6 f9e6 	bl	80002dc <__adddf3>
 8019f10:	ec53 2b19 	vmov	r2, r3, d9
 8019f14:	f7e6 fb98 	bl	8000648 <__aeabi_dmul>
 8019f18:	4622      	mov	r2, r4
 8019f1a:	462b      	mov	r3, r5
 8019f1c:	f7e6 f9de 	bl	80002dc <__adddf3>
 8019f20:	4642      	mov	r2, r8
 8019f22:	4682      	mov	sl, r0
 8019f24:	468b      	mov	fp, r1
 8019f26:	464b      	mov	r3, r9
 8019f28:	4640      	mov	r0, r8
 8019f2a:	4649      	mov	r1, r9
 8019f2c:	f7e6 fb8c 	bl	8000648 <__aeabi_dmul>
 8019f30:	4b6b      	ldr	r3, [pc, #428]	; (801a0e0 <__ieee754_pow+0x770>)
 8019f32:	2200      	movs	r2, #0
 8019f34:	4606      	mov	r6, r0
 8019f36:	460f      	mov	r7, r1
 8019f38:	f7e6 f9d0 	bl	80002dc <__adddf3>
 8019f3c:	4652      	mov	r2, sl
 8019f3e:	465b      	mov	r3, fp
 8019f40:	f7e6 f9cc 	bl	80002dc <__adddf3>
 8019f44:	2000      	movs	r0, #0
 8019f46:	4604      	mov	r4, r0
 8019f48:	460d      	mov	r5, r1
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	4640      	mov	r0, r8
 8019f50:	4649      	mov	r1, r9
 8019f52:	f7e6 fb79 	bl	8000648 <__aeabi_dmul>
 8019f56:	4b62      	ldr	r3, [pc, #392]	; (801a0e0 <__ieee754_pow+0x770>)
 8019f58:	4680      	mov	r8, r0
 8019f5a:	4689      	mov	r9, r1
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	4620      	mov	r0, r4
 8019f60:	4629      	mov	r1, r5
 8019f62:	f7e6 f9b9 	bl	80002d8 <__aeabi_dsub>
 8019f66:	4632      	mov	r2, r6
 8019f68:	463b      	mov	r3, r7
 8019f6a:	f7e6 f9b5 	bl	80002d8 <__aeabi_dsub>
 8019f6e:	4602      	mov	r2, r0
 8019f70:	460b      	mov	r3, r1
 8019f72:	4650      	mov	r0, sl
 8019f74:	4659      	mov	r1, fp
 8019f76:	f7e6 f9af 	bl	80002d8 <__aeabi_dsub>
 8019f7a:	ec53 2b18 	vmov	r2, r3, d8
 8019f7e:	f7e6 fb63 	bl	8000648 <__aeabi_dmul>
 8019f82:	4622      	mov	r2, r4
 8019f84:	4606      	mov	r6, r0
 8019f86:	460f      	mov	r7, r1
 8019f88:	462b      	mov	r3, r5
 8019f8a:	ec51 0b19 	vmov	r0, r1, d9
 8019f8e:	f7e6 fb5b 	bl	8000648 <__aeabi_dmul>
 8019f92:	4602      	mov	r2, r0
 8019f94:	460b      	mov	r3, r1
 8019f96:	4630      	mov	r0, r6
 8019f98:	4639      	mov	r1, r7
 8019f9a:	f7e6 f99f 	bl	80002dc <__adddf3>
 8019f9e:	4606      	mov	r6, r0
 8019fa0:	460f      	mov	r7, r1
 8019fa2:	4602      	mov	r2, r0
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	4649      	mov	r1, r9
 8019faa:	f7e6 f997 	bl	80002dc <__adddf3>
 8019fae:	a33e      	add	r3, pc, #248	; (adr r3, 801a0a8 <__ieee754_pow+0x738>)
 8019fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb4:	2000      	movs	r0, #0
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	460d      	mov	r5, r1
 8019fba:	f7e6 fb45 	bl	8000648 <__aeabi_dmul>
 8019fbe:	4642      	mov	r2, r8
 8019fc0:	ec41 0b18 	vmov	d8, r0, r1
 8019fc4:	464b      	mov	r3, r9
 8019fc6:	4620      	mov	r0, r4
 8019fc8:	4629      	mov	r1, r5
 8019fca:	f7e6 f985 	bl	80002d8 <__aeabi_dsub>
 8019fce:	4602      	mov	r2, r0
 8019fd0:	460b      	mov	r3, r1
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	4639      	mov	r1, r7
 8019fd6:	f7e6 f97f 	bl	80002d8 <__aeabi_dsub>
 8019fda:	a335      	add	r3, pc, #212	; (adr r3, 801a0b0 <__ieee754_pow+0x740>)
 8019fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe0:	f7e6 fb32 	bl	8000648 <__aeabi_dmul>
 8019fe4:	a334      	add	r3, pc, #208	; (adr r3, 801a0b8 <__ieee754_pow+0x748>)
 8019fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fea:	4606      	mov	r6, r0
 8019fec:	460f      	mov	r7, r1
 8019fee:	4620      	mov	r0, r4
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	f7e6 fb29 	bl	8000648 <__aeabi_dmul>
 8019ff6:	4602      	mov	r2, r0
 8019ff8:	460b      	mov	r3, r1
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	4639      	mov	r1, r7
 8019ffe:	f7e6 f96d 	bl	80002dc <__adddf3>
 801a002:	9a07      	ldr	r2, [sp, #28]
 801a004:	4b37      	ldr	r3, [pc, #220]	; (801a0e4 <__ieee754_pow+0x774>)
 801a006:	4413      	add	r3, r2
 801a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00c:	f7e6 f966 	bl	80002dc <__adddf3>
 801a010:	4682      	mov	sl, r0
 801a012:	9805      	ldr	r0, [sp, #20]
 801a014:	468b      	mov	fp, r1
 801a016:	f7e6 faad 	bl	8000574 <__aeabi_i2d>
 801a01a:	9a07      	ldr	r2, [sp, #28]
 801a01c:	4b32      	ldr	r3, [pc, #200]	; (801a0e8 <__ieee754_pow+0x778>)
 801a01e:	4413      	add	r3, r2
 801a020:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a024:	4606      	mov	r6, r0
 801a026:	460f      	mov	r7, r1
 801a028:	4652      	mov	r2, sl
 801a02a:	465b      	mov	r3, fp
 801a02c:	ec51 0b18 	vmov	r0, r1, d8
 801a030:	f7e6 f954 	bl	80002dc <__adddf3>
 801a034:	4642      	mov	r2, r8
 801a036:	464b      	mov	r3, r9
 801a038:	f7e6 f950 	bl	80002dc <__adddf3>
 801a03c:	4632      	mov	r2, r6
 801a03e:	463b      	mov	r3, r7
 801a040:	f7e6 f94c 	bl	80002dc <__adddf3>
 801a044:	2000      	movs	r0, #0
 801a046:	4632      	mov	r2, r6
 801a048:	463b      	mov	r3, r7
 801a04a:	4604      	mov	r4, r0
 801a04c:	460d      	mov	r5, r1
 801a04e:	f7e6 f943 	bl	80002d8 <__aeabi_dsub>
 801a052:	4642      	mov	r2, r8
 801a054:	464b      	mov	r3, r9
 801a056:	f7e6 f93f 	bl	80002d8 <__aeabi_dsub>
 801a05a:	ec53 2b18 	vmov	r2, r3, d8
 801a05e:	f7e6 f93b 	bl	80002d8 <__aeabi_dsub>
 801a062:	4602      	mov	r2, r0
 801a064:	460b      	mov	r3, r1
 801a066:	4650      	mov	r0, sl
 801a068:	4659      	mov	r1, fp
 801a06a:	e610      	b.n	8019c8e <__ieee754_pow+0x31e>
 801a06c:	2401      	movs	r4, #1
 801a06e:	e6a1      	b.n	8019db4 <__ieee754_pow+0x444>
 801a070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a0c0 <__ieee754_pow+0x750>
 801a074:	e617      	b.n	8019ca6 <__ieee754_pow+0x336>
 801a076:	bf00      	nop
 801a078:	4a454eef 	.word	0x4a454eef
 801a07c:	3fca7e28 	.word	0x3fca7e28
 801a080:	93c9db65 	.word	0x93c9db65
 801a084:	3fcd864a 	.word	0x3fcd864a
 801a088:	a91d4101 	.word	0xa91d4101
 801a08c:	3fd17460 	.word	0x3fd17460
 801a090:	518f264d 	.word	0x518f264d
 801a094:	3fd55555 	.word	0x3fd55555
 801a098:	db6fabff 	.word	0xdb6fabff
 801a09c:	3fdb6db6 	.word	0x3fdb6db6
 801a0a0:	33333303 	.word	0x33333303
 801a0a4:	3fe33333 	.word	0x3fe33333
 801a0a8:	e0000000 	.word	0xe0000000
 801a0ac:	3feec709 	.word	0x3feec709
 801a0b0:	dc3a03fd 	.word	0xdc3a03fd
 801a0b4:	3feec709 	.word	0x3feec709
 801a0b8:	145b01f5 	.word	0x145b01f5
 801a0bc:	be3e2fe0 	.word	0xbe3e2fe0
 801a0c0:	00000000 	.word	0x00000000
 801a0c4:	3ff00000 	.word	0x3ff00000
 801a0c8:	7ff00000 	.word	0x7ff00000
 801a0cc:	43400000 	.word	0x43400000
 801a0d0:	0003988e 	.word	0x0003988e
 801a0d4:	000bb679 	.word	0x000bb679
 801a0d8:	0801c348 	.word	0x0801c348
 801a0dc:	3ff00000 	.word	0x3ff00000
 801a0e0:	40080000 	.word	0x40080000
 801a0e4:	0801c368 	.word	0x0801c368
 801a0e8:	0801c358 	.word	0x0801c358
 801a0ec:	a3b3      	add	r3, pc, #716	; (adr r3, 801a3bc <__ieee754_pow+0xa4c>)
 801a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f2:	4640      	mov	r0, r8
 801a0f4:	4649      	mov	r1, r9
 801a0f6:	f7e6 f8f1 	bl	80002dc <__adddf3>
 801a0fa:	4622      	mov	r2, r4
 801a0fc:	ec41 0b1a 	vmov	d10, r0, r1
 801a100:	462b      	mov	r3, r5
 801a102:	4630      	mov	r0, r6
 801a104:	4639      	mov	r1, r7
 801a106:	f7e6 f8e7 	bl	80002d8 <__aeabi_dsub>
 801a10a:	4602      	mov	r2, r0
 801a10c:	460b      	mov	r3, r1
 801a10e:	ec51 0b1a 	vmov	r0, r1, d10
 801a112:	f7e6 fd29 	bl	8000b68 <__aeabi_dcmpgt>
 801a116:	2800      	cmp	r0, #0
 801a118:	f47f ae04 	bne.w	8019d24 <__ieee754_pow+0x3b4>
 801a11c:	4aa2      	ldr	r2, [pc, #648]	; (801a3a8 <__ieee754_pow+0xa38>)
 801a11e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a122:	4293      	cmp	r3, r2
 801a124:	f340 8107 	ble.w	801a336 <__ieee754_pow+0x9c6>
 801a128:	151b      	asrs	r3, r3, #20
 801a12a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a12e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a132:	fa4a fa03 	asr.w	sl, sl, r3
 801a136:	44da      	add	sl, fp
 801a138:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a13c:	489b      	ldr	r0, [pc, #620]	; (801a3ac <__ieee754_pow+0xa3c>)
 801a13e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a142:	4108      	asrs	r0, r1
 801a144:	ea00 030a 	and.w	r3, r0, sl
 801a148:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a14c:	f1c1 0114 	rsb	r1, r1, #20
 801a150:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a154:	fa4a fa01 	asr.w	sl, sl, r1
 801a158:	f1bb 0f00 	cmp.w	fp, #0
 801a15c:	f04f 0200 	mov.w	r2, #0
 801a160:	4620      	mov	r0, r4
 801a162:	4629      	mov	r1, r5
 801a164:	bfb8      	it	lt
 801a166:	f1ca 0a00 	rsblt	sl, sl, #0
 801a16a:	f7e6 f8b5 	bl	80002d8 <__aeabi_dsub>
 801a16e:	ec41 0b19 	vmov	d9, r0, r1
 801a172:	4642      	mov	r2, r8
 801a174:	464b      	mov	r3, r9
 801a176:	ec51 0b19 	vmov	r0, r1, d9
 801a17a:	f7e6 f8af 	bl	80002dc <__adddf3>
 801a17e:	a37a      	add	r3, pc, #488	; (adr r3, 801a368 <__ieee754_pow+0x9f8>)
 801a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a184:	2000      	movs	r0, #0
 801a186:	4604      	mov	r4, r0
 801a188:	460d      	mov	r5, r1
 801a18a:	f7e6 fa5d 	bl	8000648 <__aeabi_dmul>
 801a18e:	ec53 2b19 	vmov	r2, r3, d9
 801a192:	4606      	mov	r6, r0
 801a194:	460f      	mov	r7, r1
 801a196:	4620      	mov	r0, r4
 801a198:	4629      	mov	r1, r5
 801a19a:	f7e6 f89d 	bl	80002d8 <__aeabi_dsub>
 801a19e:	4602      	mov	r2, r0
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	4640      	mov	r0, r8
 801a1a4:	4649      	mov	r1, r9
 801a1a6:	f7e6 f897 	bl	80002d8 <__aeabi_dsub>
 801a1aa:	a371      	add	r3, pc, #452	; (adr r3, 801a370 <__ieee754_pow+0xa00>)
 801a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b0:	f7e6 fa4a 	bl	8000648 <__aeabi_dmul>
 801a1b4:	a370      	add	r3, pc, #448	; (adr r3, 801a378 <__ieee754_pow+0xa08>)
 801a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ba:	4680      	mov	r8, r0
 801a1bc:	4689      	mov	r9, r1
 801a1be:	4620      	mov	r0, r4
 801a1c0:	4629      	mov	r1, r5
 801a1c2:	f7e6 fa41 	bl	8000648 <__aeabi_dmul>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	460b      	mov	r3, r1
 801a1ca:	4640      	mov	r0, r8
 801a1cc:	4649      	mov	r1, r9
 801a1ce:	f7e6 f885 	bl	80002dc <__adddf3>
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	460d      	mov	r5, r1
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	460b      	mov	r3, r1
 801a1da:	4630      	mov	r0, r6
 801a1dc:	4639      	mov	r1, r7
 801a1de:	f7e6 f87d 	bl	80002dc <__adddf3>
 801a1e2:	4632      	mov	r2, r6
 801a1e4:	463b      	mov	r3, r7
 801a1e6:	4680      	mov	r8, r0
 801a1e8:	4689      	mov	r9, r1
 801a1ea:	f7e6 f875 	bl	80002d8 <__aeabi_dsub>
 801a1ee:	4602      	mov	r2, r0
 801a1f0:	460b      	mov	r3, r1
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	f7e6 f86f 	bl	80002d8 <__aeabi_dsub>
 801a1fa:	4642      	mov	r2, r8
 801a1fc:	4606      	mov	r6, r0
 801a1fe:	460f      	mov	r7, r1
 801a200:	464b      	mov	r3, r9
 801a202:	4640      	mov	r0, r8
 801a204:	4649      	mov	r1, r9
 801a206:	f7e6 fa1f 	bl	8000648 <__aeabi_dmul>
 801a20a:	a35d      	add	r3, pc, #372	; (adr r3, 801a380 <__ieee754_pow+0xa10>)
 801a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a210:	4604      	mov	r4, r0
 801a212:	460d      	mov	r5, r1
 801a214:	f7e6 fa18 	bl	8000648 <__aeabi_dmul>
 801a218:	a35b      	add	r3, pc, #364	; (adr r3, 801a388 <__ieee754_pow+0xa18>)
 801a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21e:	f7e6 f85b 	bl	80002d8 <__aeabi_dsub>
 801a222:	4622      	mov	r2, r4
 801a224:	462b      	mov	r3, r5
 801a226:	f7e6 fa0f 	bl	8000648 <__aeabi_dmul>
 801a22a:	a359      	add	r3, pc, #356	; (adr r3, 801a390 <__ieee754_pow+0xa20>)
 801a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a230:	f7e6 f854 	bl	80002dc <__adddf3>
 801a234:	4622      	mov	r2, r4
 801a236:	462b      	mov	r3, r5
 801a238:	f7e6 fa06 	bl	8000648 <__aeabi_dmul>
 801a23c:	a356      	add	r3, pc, #344	; (adr r3, 801a398 <__ieee754_pow+0xa28>)
 801a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a242:	f7e6 f849 	bl	80002d8 <__aeabi_dsub>
 801a246:	4622      	mov	r2, r4
 801a248:	462b      	mov	r3, r5
 801a24a:	f7e6 f9fd 	bl	8000648 <__aeabi_dmul>
 801a24e:	a354      	add	r3, pc, #336	; (adr r3, 801a3a0 <__ieee754_pow+0xa30>)
 801a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a254:	f7e6 f842 	bl	80002dc <__adddf3>
 801a258:	4622      	mov	r2, r4
 801a25a:	462b      	mov	r3, r5
 801a25c:	f7e6 f9f4 	bl	8000648 <__aeabi_dmul>
 801a260:	4602      	mov	r2, r0
 801a262:	460b      	mov	r3, r1
 801a264:	4640      	mov	r0, r8
 801a266:	4649      	mov	r1, r9
 801a268:	f7e6 f836 	bl	80002d8 <__aeabi_dsub>
 801a26c:	4604      	mov	r4, r0
 801a26e:	460d      	mov	r5, r1
 801a270:	4602      	mov	r2, r0
 801a272:	460b      	mov	r3, r1
 801a274:	4640      	mov	r0, r8
 801a276:	4649      	mov	r1, r9
 801a278:	f7e6 f9e6 	bl	8000648 <__aeabi_dmul>
 801a27c:	2200      	movs	r2, #0
 801a27e:	ec41 0b19 	vmov	d9, r0, r1
 801a282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a286:	4620      	mov	r0, r4
 801a288:	4629      	mov	r1, r5
 801a28a:	f7e6 f825 	bl	80002d8 <__aeabi_dsub>
 801a28e:	4602      	mov	r2, r0
 801a290:	460b      	mov	r3, r1
 801a292:	ec51 0b19 	vmov	r0, r1, d9
 801a296:	f7e6 fb01 	bl	800089c <__aeabi_ddiv>
 801a29a:	4632      	mov	r2, r6
 801a29c:	4604      	mov	r4, r0
 801a29e:	460d      	mov	r5, r1
 801a2a0:	463b      	mov	r3, r7
 801a2a2:	4640      	mov	r0, r8
 801a2a4:	4649      	mov	r1, r9
 801a2a6:	f7e6 f9cf 	bl	8000648 <__aeabi_dmul>
 801a2aa:	4632      	mov	r2, r6
 801a2ac:	463b      	mov	r3, r7
 801a2ae:	f7e6 f815 	bl	80002dc <__adddf3>
 801a2b2:	4602      	mov	r2, r0
 801a2b4:	460b      	mov	r3, r1
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	4629      	mov	r1, r5
 801a2ba:	f7e6 f80d 	bl	80002d8 <__aeabi_dsub>
 801a2be:	4642      	mov	r2, r8
 801a2c0:	464b      	mov	r3, r9
 801a2c2:	f7e6 f809 	bl	80002d8 <__aeabi_dsub>
 801a2c6:	460b      	mov	r3, r1
 801a2c8:	4602      	mov	r2, r0
 801a2ca:	4939      	ldr	r1, [pc, #228]	; (801a3b0 <__ieee754_pow+0xa40>)
 801a2cc:	2000      	movs	r0, #0
 801a2ce:	f7e6 f803 	bl	80002d8 <__aeabi_dsub>
 801a2d2:	ec41 0b10 	vmov	d0, r0, r1
 801a2d6:	ee10 3a90 	vmov	r3, s1
 801a2da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a2e2:	da2b      	bge.n	801a33c <__ieee754_pow+0x9cc>
 801a2e4:	4650      	mov	r0, sl
 801a2e6:	f000 ff6f 	bl	801b1c8 <scalbn>
 801a2ea:	ec51 0b10 	vmov	r0, r1, d0
 801a2ee:	ec53 2b18 	vmov	r2, r3, d8
 801a2f2:	f7ff bbee 	b.w	8019ad2 <__ieee754_pow+0x162>
 801a2f6:	4b2f      	ldr	r3, [pc, #188]	; (801a3b4 <__ieee754_pow+0xa44>)
 801a2f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a2fc:	429e      	cmp	r6, r3
 801a2fe:	f77f af0d 	ble.w	801a11c <__ieee754_pow+0x7ac>
 801a302:	4b2d      	ldr	r3, [pc, #180]	; (801a3b8 <__ieee754_pow+0xa48>)
 801a304:	440b      	add	r3, r1
 801a306:	4303      	orrs	r3, r0
 801a308:	d009      	beq.n	801a31e <__ieee754_pow+0x9ae>
 801a30a:	ec51 0b18 	vmov	r0, r1, d8
 801a30e:	2200      	movs	r2, #0
 801a310:	2300      	movs	r3, #0
 801a312:	f7e6 fc0b 	bl	8000b2c <__aeabi_dcmplt>
 801a316:	3800      	subs	r0, #0
 801a318:	bf18      	it	ne
 801a31a:	2001      	movne	r0, #1
 801a31c:	e448      	b.n	8019bb0 <__ieee754_pow+0x240>
 801a31e:	4622      	mov	r2, r4
 801a320:	462b      	mov	r3, r5
 801a322:	f7e5 ffd9 	bl	80002d8 <__aeabi_dsub>
 801a326:	4642      	mov	r2, r8
 801a328:	464b      	mov	r3, r9
 801a32a:	f7e6 fc13 	bl	8000b54 <__aeabi_dcmpge>
 801a32e:	2800      	cmp	r0, #0
 801a330:	f43f aef4 	beq.w	801a11c <__ieee754_pow+0x7ac>
 801a334:	e7e9      	b.n	801a30a <__ieee754_pow+0x99a>
 801a336:	f04f 0a00 	mov.w	sl, #0
 801a33a:	e71a      	b.n	801a172 <__ieee754_pow+0x802>
 801a33c:	ec51 0b10 	vmov	r0, r1, d0
 801a340:	4619      	mov	r1, r3
 801a342:	e7d4      	b.n	801a2ee <__ieee754_pow+0x97e>
 801a344:	491a      	ldr	r1, [pc, #104]	; (801a3b0 <__ieee754_pow+0xa40>)
 801a346:	2000      	movs	r0, #0
 801a348:	f7ff bb31 	b.w	80199ae <__ieee754_pow+0x3e>
 801a34c:	2000      	movs	r0, #0
 801a34e:	2100      	movs	r1, #0
 801a350:	f7ff bb2d 	b.w	80199ae <__ieee754_pow+0x3e>
 801a354:	4630      	mov	r0, r6
 801a356:	4639      	mov	r1, r7
 801a358:	f7ff bb29 	b.w	80199ae <__ieee754_pow+0x3e>
 801a35c:	9204      	str	r2, [sp, #16]
 801a35e:	f7ff bb7b 	b.w	8019a58 <__ieee754_pow+0xe8>
 801a362:	2300      	movs	r3, #0
 801a364:	f7ff bb65 	b.w	8019a32 <__ieee754_pow+0xc2>
 801a368:	00000000 	.word	0x00000000
 801a36c:	3fe62e43 	.word	0x3fe62e43
 801a370:	fefa39ef 	.word	0xfefa39ef
 801a374:	3fe62e42 	.word	0x3fe62e42
 801a378:	0ca86c39 	.word	0x0ca86c39
 801a37c:	be205c61 	.word	0xbe205c61
 801a380:	72bea4d0 	.word	0x72bea4d0
 801a384:	3e663769 	.word	0x3e663769
 801a388:	c5d26bf1 	.word	0xc5d26bf1
 801a38c:	3ebbbd41 	.word	0x3ebbbd41
 801a390:	af25de2c 	.word	0xaf25de2c
 801a394:	3f11566a 	.word	0x3f11566a
 801a398:	16bebd93 	.word	0x16bebd93
 801a39c:	3f66c16c 	.word	0x3f66c16c
 801a3a0:	5555553e 	.word	0x5555553e
 801a3a4:	3fc55555 	.word	0x3fc55555
 801a3a8:	3fe00000 	.word	0x3fe00000
 801a3ac:	fff00000 	.word	0xfff00000
 801a3b0:	3ff00000 	.word	0x3ff00000
 801a3b4:	4090cbff 	.word	0x4090cbff
 801a3b8:	3f6f3400 	.word	0x3f6f3400
 801a3bc:	652b82fe 	.word	0x652b82fe
 801a3c0:	3c971547 	.word	0x3c971547

0801a3c4 <fabs>:
 801a3c4:	ec51 0b10 	vmov	r0, r1, d0
 801a3c8:	ee10 2a10 	vmov	r2, s0
 801a3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a3d0:	ec43 2b10 	vmov	d0, r2, r3
 801a3d4:	4770      	bx	lr
	...

0801a3d8 <__kernel_cosf>:
 801a3d8:	ee10 3a10 	vmov	r3, s0
 801a3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a3e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a3e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a3e8:	da05      	bge.n	801a3f6 <__kernel_cosf+0x1e>
 801a3ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a3ee:	ee17 2a90 	vmov	r2, s15
 801a3f2:	2a00      	cmp	r2, #0
 801a3f4:	d03b      	beq.n	801a46e <__kernel_cosf+0x96>
 801a3f6:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a3fa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a474 <__kernel_cosf+0x9c>
 801a3fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a478 <__kernel_cosf+0xa0>
 801a402:	4a1e      	ldr	r2, [pc, #120]	; (801a47c <__kernel_cosf+0xa4>)
 801a404:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a408:	4293      	cmp	r3, r2
 801a40a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a480 <__kernel_cosf+0xa8>
 801a40e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a412:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801a484 <__kernel_cosf+0xac>
 801a416:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a41a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a488 <__kernel_cosf+0xb0>
 801a41e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a422:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801a48c <__kernel_cosf+0xb4>
 801a426:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a42a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801a42e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a432:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a436:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a43e:	dc04      	bgt.n	801a44a <__kernel_cosf+0x72>
 801a440:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a444:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801a448:	4770      	bx	lr
 801a44a:	4a11      	ldr	r2, [pc, #68]	; (801a490 <__kernel_cosf+0xb8>)
 801a44c:	4293      	cmp	r3, r2
 801a44e:	bfda      	itte	le
 801a450:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a454:	ee07 3a10 	vmovle	s14, r3
 801a458:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801a45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a460:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801a464:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a468:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a46c:	4770      	bx	lr
 801a46e:	eeb0 0a66 	vmov.f32	s0, s13
 801a472:	4770      	bx	lr
 801a474:	ad47d74e 	.word	0xad47d74e
 801a478:	310f74f6 	.word	0x310f74f6
 801a47c:	3e999999 	.word	0x3e999999
 801a480:	b493f27c 	.word	0xb493f27c
 801a484:	37d00d01 	.word	0x37d00d01
 801a488:	bab60b61 	.word	0xbab60b61
 801a48c:	3d2aaaab 	.word	0x3d2aaaab
 801a490:	3f480000 	.word	0x3f480000

0801a494 <__kernel_sinf>:
 801a494:	ee10 3a10 	vmov	r3, s0
 801a498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a49c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a4a0:	da04      	bge.n	801a4ac <__kernel_sinf+0x18>
 801a4a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a4a6:	ee17 3a90 	vmov	r3, s15
 801a4aa:	b35b      	cbz	r3, 801a504 <__kernel_sinf+0x70>
 801a4ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a4b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a508 <__kernel_sinf+0x74>
 801a4b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a50c <__kernel_sinf+0x78>
 801a4b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a4bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a510 <__kernel_sinf+0x7c>
 801a4c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a4c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a514 <__kernel_sinf+0x80>
 801a4c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a4cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a518 <__kernel_sinf+0x84>
 801a4d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a4d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a4d8:	b930      	cbnz	r0, 801a4e8 <__kernel_sinf+0x54>
 801a4da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a51c <__kernel_sinf+0x88>
 801a4de:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a4e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a4e6:	4770      	bx	lr
 801a4e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a4ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a4f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a4f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a4f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a520 <__kernel_sinf+0x8c>
 801a4fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a500:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a504:	4770      	bx	lr
 801a506:	bf00      	nop
 801a508:	2f2ec9d3 	.word	0x2f2ec9d3
 801a50c:	b2d72f34 	.word	0xb2d72f34
 801a510:	3638ef1b 	.word	0x3638ef1b
 801a514:	b9500d01 	.word	0xb9500d01
 801a518:	3c088889 	.word	0x3c088889
 801a51c:	be2aaaab 	.word	0xbe2aaaab
 801a520:	3e2aaaab 	.word	0x3e2aaaab

0801a524 <__ieee754_asinf>:
 801a524:	b538      	push	{r3, r4, r5, lr}
 801a526:	ee10 5a10 	vmov	r5, s0
 801a52a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a52e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801a532:	ed2d 8b04 	vpush	{d8-d9}
 801a536:	d10c      	bne.n	801a552 <__ieee754_asinf+0x2e>
 801a538:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801a6b0 <__ieee754_asinf+0x18c>
 801a53c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801a6b4 <__ieee754_asinf+0x190>
 801a540:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a544:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a548:	eeb0 0a67 	vmov.f32	s0, s15
 801a54c:	ecbd 8b04 	vpop	{d8-d9}
 801a550:	bd38      	pop	{r3, r4, r5, pc}
 801a552:	dd04      	ble.n	801a55e <__ieee754_asinf+0x3a>
 801a554:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a558:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a55c:	e7f6      	b.n	801a54c <__ieee754_asinf+0x28>
 801a55e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a562:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a566:	da0b      	bge.n	801a580 <__ieee754_asinf+0x5c>
 801a568:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801a56c:	da52      	bge.n	801a614 <__ieee754_asinf+0xf0>
 801a56e:	eddf 7a52 	vldr	s15, [pc, #328]	; 801a6b8 <__ieee754_asinf+0x194>
 801a572:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a576:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57e:	dce5      	bgt.n	801a54c <__ieee754_asinf+0x28>
 801a580:	f7ff f8b3 	bl	80196ea <fabsf>
 801a584:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801a588:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a58c:	ee20 8a27 	vmul.f32	s16, s0, s15
 801a590:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801a6bc <__ieee754_asinf+0x198>
 801a594:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a6c0 <__ieee754_asinf+0x19c>
 801a598:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801a6c4 <__ieee754_asinf+0x1a0>
 801a59c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801a5a0:	eddf 7a49 	vldr	s15, [pc, #292]	; 801a6c8 <__ieee754_asinf+0x1a4>
 801a5a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a5a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a6cc <__ieee754_asinf+0x1a8>
 801a5ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a5b0:	eddf 7a47 	vldr	s15, [pc, #284]	; 801a6d0 <__ieee754_asinf+0x1ac>
 801a5b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a5b8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801a6d4 <__ieee754_asinf+0x1b0>
 801a5bc:	eea7 9a88 	vfma.f32	s18, s15, s16
 801a5c0:	eddf 7a45 	vldr	s15, [pc, #276]	; 801a6d8 <__ieee754_asinf+0x1b4>
 801a5c4:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a5c8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801a6dc <__ieee754_asinf+0x1b8>
 801a5cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a5d0:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a6e0 <__ieee754_asinf+0x1bc>
 801a5d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a5d8:	eeb0 0a48 	vmov.f32	s0, s16
 801a5dc:	eee7 8a88 	vfma.f32	s17, s15, s16
 801a5e0:	f7ff f9c2 	bl	8019968 <__ieee754_sqrtf>
 801a5e4:	4b3f      	ldr	r3, [pc, #252]	; (801a6e4 <__ieee754_asinf+0x1c0>)
 801a5e6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801a5ea:	429c      	cmp	r4, r3
 801a5ec:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801a5f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a5f4:	dd3d      	ble.n	801a672 <__ieee754_asinf+0x14e>
 801a5f6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801a5fa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801a6e8 <__ieee754_asinf+0x1c4>
 801a5fe:	eee0 7a26 	vfma.f32	s15, s0, s13
 801a602:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801a6b4 <__ieee754_asinf+0x190>
 801a606:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a60a:	2d00      	cmp	r5, #0
 801a60c:	bfd8      	it	le
 801a60e:	eeb1 0a40 	vnegle.f32	s0, s0
 801a612:	e79b      	b.n	801a54c <__ieee754_asinf+0x28>
 801a614:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a618:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a6c0 <__ieee754_asinf+0x19c>
 801a61c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801a6bc <__ieee754_asinf+0x198>
 801a620:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801a6d4 <__ieee754_asinf+0x1b0>
 801a624:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a628:	eddf 6a27 	vldr	s13, [pc, #156]	; 801a6c8 <__ieee754_asinf+0x1a4>
 801a62c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a630:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801a6cc <__ieee754_asinf+0x1a8>
 801a634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a638:	eddf 6a25 	vldr	s13, [pc, #148]	; 801a6d0 <__ieee754_asinf+0x1ac>
 801a63c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a640:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801a6c4 <__ieee754_asinf+0x1a0>
 801a644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a648:	eddf 6a23 	vldr	s13, [pc, #140]	; 801a6d8 <__ieee754_asinf+0x1b4>
 801a64c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801a650:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801a6dc <__ieee754_asinf+0x1b8>
 801a654:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801a658:	eddf 6a21 	vldr	s13, [pc, #132]	; 801a6e0 <__ieee754_asinf+0x1bc>
 801a65c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a660:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a664:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801a668:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801a66c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801a670:	e76c      	b.n	801a54c <__ieee754_asinf+0x28>
 801a672:	ee10 3a10 	vmov	r3, s0
 801a676:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a67a:	f023 030f 	bic.w	r3, r3, #15
 801a67e:	ee07 3a10 	vmov	s14, r3
 801a682:	eea7 8a47 	vfms.f32	s16, s14, s14
 801a686:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a68a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a68e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801a692:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a6b0 <__ieee754_asinf+0x18c>
 801a696:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801a69a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801a69e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801a6ec <__ieee754_asinf+0x1c8>
 801a6a2:	eeb0 6a40 	vmov.f32	s12, s0
 801a6a6:	eea7 6a66 	vfms.f32	s12, s14, s13
 801a6aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a6ae:	e7aa      	b.n	801a606 <__ieee754_asinf+0xe2>
 801a6b0:	b33bbd2e 	.word	0xb33bbd2e
 801a6b4:	3fc90fdb 	.word	0x3fc90fdb
 801a6b8:	7149f2ca 	.word	0x7149f2ca
 801a6bc:	3a4f7f04 	.word	0x3a4f7f04
 801a6c0:	3811ef08 	.word	0x3811ef08
 801a6c4:	3e2aaaab 	.word	0x3e2aaaab
 801a6c8:	bd241146 	.word	0xbd241146
 801a6cc:	3e4e0aa8 	.word	0x3e4e0aa8
 801a6d0:	bea6b090 	.word	0xbea6b090
 801a6d4:	3d9dc62e 	.word	0x3d9dc62e
 801a6d8:	bf303361 	.word	0xbf303361
 801a6dc:	4001572d 	.word	0x4001572d
 801a6e0:	c019d139 	.word	0xc019d139
 801a6e4:	3f799999 	.word	0x3f799999
 801a6e8:	333bbd2e 	.word	0x333bbd2e
 801a6ec:	3f490fdb 	.word	0x3f490fdb

0801a6f0 <__ieee754_atan2f>:
 801a6f0:	ee10 2a90 	vmov	r2, s1
 801a6f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a6f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a6fc:	b510      	push	{r4, lr}
 801a6fe:	eef0 7a40 	vmov.f32	s15, s0
 801a702:	dc06      	bgt.n	801a712 <__ieee754_atan2f+0x22>
 801a704:	ee10 0a10 	vmov	r0, s0
 801a708:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801a70c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a710:	dd04      	ble.n	801a71c <__ieee754_atan2f+0x2c>
 801a712:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a716:	eeb0 0a67 	vmov.f32	s0, s15
 801a71a:	bd10      	pop	{r4, pc}
 801a71c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a720:	d103      	bne.n	801a72a <__ieee754_atan2f+0x3a>
 801a722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a726:	f000 bc79 	b.w	801b01c <atanf>
 801a72a:	1794      	asrs	r4, r2, #30
 801a72c:	f004 0402 	and.w	r4, r4, #2
 801a730:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a734:	b943      	cbnz	r3, 801a748 <__ieee754_atan2f+0x58>
 801a736:	2c02      	cmp	r4, #2
 801a738:	d05e      	beq.n	801a7f8 <__ieee754_atan2f+0x108>
 801a73a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a80c <__ieee754_atan2f+0x11c>
 801a73e:	2c03      	cmp	r4, #3
 801a740:	bf08      	it	eq
 801a742:	eef0 7a47 	vmoveq.f32	s15, s14
 801a746:	e7e6      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a748:	b941      	cbnz	r1, 801a75c <__ieee754_atan2f+0x6c>
 801a74a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a810 <__ieee754_atan2f+0x120>
 801a74e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a814 <__ieee754_atan2f+0x124>
 801a752:	2800      	cmp	r0, #0
 801a754:	bfb8      	it	lt
 801a756:	eef0 7a47 	vmovlt.f32	s15, s14
 801a75a:	e7dc      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a75c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a760:	d110      	bne.n	801a784 <__ieee754_atan2f+0x94>
 801a762:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a766:	f104 34ff 	add.w	r4, r4, #4294967295
 801a76a:	d107      	bne.n	801a77c <__ieee754_atan2f+0x8c>
 801a76c:	2c02      	cmp	r4, #2
 801a76e:	d846      	bhi.n	801a7fe <__ieee754_atan2f+0x10e>
 801a770:	4b29      	ldr	r3, [pc, #164]	; (801a818 <__ieee754_atan2f+0x128>)
 801a772:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a776:	edd3 7a00 	vldr	s15, [r3]
 801a77a:	e7cc      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a77c:	2c02      	cmp	r4, #2
 801a77e:	d841      	bhi.n	801a804 <__ieee754_atan2f+0x114>
 801a780:	4b26      	ldr	r3, [pc, #152]	; (801a81c <__ieee754_atan2f+0x12c>)
 801a782:	e7f6      	b.n	801a772 <__ieee754_atan2f+0x82>
 801a784:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a788:	d0df      	beq.n	801a74a <__ieee754_atan2f+0x5a>
 801a78a:	1a5b      	subs	r3, r3, r1
 801a78c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801a790:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a794:	da1a      	bge.n	801a7cc <__ieee754_atan2f+0xdc>
 801a796:	2a00      	cmp	r2, #0
 801a798:	da01      	bge.n	801a79e <__ieee754_atan2f+0xae>
 801a79a:	313c      	adds	r1, #60	; 0x3c
 801a79c:	db19      	blt.n	801a7d2 <__ieee754_atan2f+0xe2>
 801a79e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a7a2:	f7fe ffa2 	bl	80196ea <fabsf>
 801a7a6:	f000 fc39 	bl	801b01c <atanf>
 801a7aa:	eef0 7a40 	vmov.f32	s15, s0
 801a7ae:	2c01      	cmp	r4, #1
 801a7b0:	d012      	beq.n	801a7d8 <__ieee754_atan2f+0xe8>
 801a7b2:	2c02      	cmp	r4, #2
 801a7b4:	d017      	beq.n	801a7e6 <__ieee754_atan2f+0xf6>
 801a7b6:	2c00      	cmp	r4, #0
 801a7b8:	d0ad      	beq.n	801a716 <__ieee754_atan2f+0x26>
 801a7ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a820 <__ieee754_atan2f+0x130>
 801a7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801a824 <__ieee754_atan2f+0x134>
 801a7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a7ca:	e7a4      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a7cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a810 <__ieee754_atan2f+0x120>
 801a7d0:	e7ed      	b.n	801a7ae <__ieee754_atan2f+0xbe>
 801a7d2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a828 <__ieee754_atan2f+0x138>
 801a7d6:	e7ea      	b.n	801a7ae <__ieee754_atan2f+0xbe>
 801a7d8:	ee17 3a90 	vmov	r3, s15
 801a7dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a7e0:	ee07 3a90 	vmov	s15, r3
 801a7e4:	e797      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a7e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801a820 <__ieee754_atan2f+0x130>
 801a7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801a824 <__ieee754_atan2f+0x134>
 801a7f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a7f6:	e78e      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a7f8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801a824 <__ieee754_atan2f+0x134>
 801a7fc:	e78b      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a7fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a82c <__ieee754_atan2f+0x13c>
 801a802:	e788      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a804:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a828 <__ieee754_atan2f+0x138>
 801a808:	e785      	b.n	801a716 <__ieee754_atan2f+0x26>
 801a80a:	bf00      	nop
 801a80c:	c0490fdb 	.word	0xc0490fdb
 801a810:	3fc90fdb 	.word	0x3fc90fdb
 801a814:	bfc90fdb 	.word	0xbfc90fdb
 801a818:	0801c378 	.word	0x0801c378
 801a81c:	0801c384 	.word	0x0801c384
 801a820:	33bbbd2e 	.word	0x33bbbd2e
 801a824:	40490fdb 	.word	0x40490fdb
 801a828:	00000000 	.word	0x00000000
 801a82c:	3f490fdb 	.word	0x3f490fdb

0801a830 <__ieee754_powf>:
 801a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a834:	ee10 4a90 	vmov	r4, s1
 801a838:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801a83c:	ed2d 8b02 	vpush	{d8}
 801a840:	ee10 7a10 	vmov	r7, s0
 801a844:	eeb0 8a40 	vmov.f32	s16, s0
 801a848:	eef0 8a60 	vmov.f32	s17, s1
 801a84c:	d10c      	bne.n	801a868 <__ieee754_powf+0x38>
 801a84e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801a852:	007f      	lsls	r7, r7, #1
 801a854:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801a858:	f240 8292 	bls.w	801ad80 <__ieee754_powf+0x550>
 801a85c:	ee38 0a28 	vadd.f32	s0, s16, s17
 801a860:	ecbd 8b02 	vpop	{d8}
 801a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a868:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801a86c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a870:	dcf4      	bgt.n	801a85c <__ieee754_powf+0x2c>
 801a872:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a876:	dd08      	ble.n	801a88a <__ieee754_powf+0x5a>
 801a878:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801a87c:	d1ee      	bne.n	801a85c <__ieee754_powf+0x2c>
 801a87e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801a882:	0064      	lsls	r4, r4, #1
 801a884:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801a888:	e7e6      	b.n	801a858 <__ieee754_powf+0x28>
 801a88a:	2f00      	cmp	r7, #0
 801a88c:	da20      	bge.n	801a8d0 <__ieee754_powf+0xa0>
 801a88e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801a892:	da2d      	bge.n	801a8f0 <__ieee754_powf+0xc0>
 801a894:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a898:	f2c0 827b 	blt.w	801ad92 <__ieee754_powf+0x562>
 801a89c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801a8a0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a8a4:	fa48 f603 	asr.w	r6, r8, r3
 801a8a8:	fa06 f303 	lsl.w	r3, r6, r3
 801a8ac:	4543      	cmp	r3, r8
 801a8ae:	f040 8270 	bne.w	801ad92 <__ieee754_powf+0x562>
 801a8b2:	f006 0601 	and.w	r6, r6, #1
 801a8b6:	f1c6 0602 	rsb	r6, r6, #2
 801a8ba:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a8be:	d11f      	bne.n	801a900 <__ieee754_powf+0xd0>
 801a8c0:	2c00      	cmp	r4, #0
 801a8c2:	f280 8263 	bge.w	801ad8c <__ieee754_powf+0x55c>
 801a8c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a8ca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801a8ce:	e7c7      	b.n	801a860 <__ieee754_powf+0x30>
 801a8d0:	2600      	movs	r6, #0
 801a8d2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a8d6:	d1f0      	bne.n	801a8ba <__ieee754_powf+0x8a>
 801a8d8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801a8dc:	f000 8250 	beq.w	801ad80 <__ieee754_powf+0x550>
 801a8e0:	dd08      	ble.n	801a8f4 <__ieee754_powf+0xc4>
 801a8e2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801abe8 <__ieee754_powf+0x3b8>
 801a8e6:	2c00      	cmp	r4, #0
 801a8e8:	bfa8      	it	ge
 801a8ea:	eeb0 0a68 	vmovge.f32	s0, s17
 801a8ee:	e7b7      	b.n	801a860 <__ieee754_powf+0x30>
 801a8f0:	2602      	movs	r6, #2
 801a8f2:	e7ee      	b.n	801a8d2 <__ieee754_powf+0xa2>
 801a8f4:	2c00      	cmp	r4, #0
 801a8f6:	f280 8246 	bge.w	801ad86 <__ieee754_powf+0x556>
 801a8fa:	eeb1 0a68 	vneg.f32	s0, s17
 801a8fe:	e7af      	b.n	801a860 <__ieee754_powf+0x30>
 801a900:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801a904:	d102      	bne.n	801a90c <__ieee754_powf+0xdc>
 801a906:	ee28 0a08 	vmul.f32	s0, s16, s16
 801a90a:	e7a9      	b.n	801a860 <__ieee754_powf+0x30>
 801a90c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a910:	eeb0 0a48 	vmov.f32	s0, s16
 801a914:	d107      	bne.n	801a926 <__ieee754_powf+0xf6>
 801a916:	2f00      	cmp	r7, #0
 801a918:	db05      	blt.n	801a926 <__ieee754_powf+0xf6>
 801a91a:	ecbd 8b02 	vpop	{d8}
 801a91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a922:	f7ff b821 	b.w	8019968 <__ieee754_sqrtf>
 801a926:	f7fe fee0 	bl	80196ea <fabsf>
 801a92a:	b125      	cbz	r5, 801a936 <__ieee754_powf+0x106>
 801a92c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801a930:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801a934:	d115      	bne.n	801a962 <__ieee754_powf+0x132>
 801a936:	2c00      	cmp	r4, #0
 801a938:	bfbc      	itt	lt
 801a93a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801a93e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a942:	2f00      	cmp	r7, #0
 801a944:	da8c      	bge.n	801a860 <__ieee754_powf+0x30>
 801a946:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801a94a:	4335      	orrs	r5, r6
 801a94c:	d104      	bne.n	801a958 <__ieee754_powf+0x128>
 801a94e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a952:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a956:	e783      	b.n	801a860 <__ieee754_powf+0x30>
 801a958:	2e01      	cmp	r6, #1
 801a95a:	d181      	bne.n	801a860 <__ieee754_powf+0x30>
 801a95c:	eeb1 0a40 	vneg.f32	s0, s0
 801a960:	e77e      	b.n	801a860 <__ieee754_powf+0x30>
 801a962:	0ff8      	lsrs	r0, r7, #31
 801a964:	3801      	subs	r0, #1
 801a966:	ea56 0300 	orrs.w	r3, r6, r0
 801a96a:	d104      	bne.n	801a976 <__ieee754_powf+0x146>
 801a96c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801a970:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801a974:	e774      	b.n	801a860 <__ieee754_powf+0x30>
 801a976:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801a97a:	dd73      	ble.n	801aa64 <__ieee754_powf+0x234>
 801a97c:	4b9b      	ldr	r3, [pc, #620]	; (801abec <__ieee754_powf+0x3bc>)
 801a97e:	429d      	cmp	r5, r3
 801a980:	dc08      	bgt.n	801a994 <__ieee754_powf+0x164>
 801a982:	2c00      	cmp	r4, #0
 801a984:	da0b      	bge.n	801a99e <__ieee754_powf+0x16e>
 801a986:	2000      	movs	r0, #0
 801a988:	ecbd 8b02 	vpop	{d8}
 801a98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a990:	f000 bd4a 	b.w	801b428 <__math_oflowf>
 801a994:	4b96      	ldr	r3, [pc, #600]	; (801abf0 <__ieee754_powf+0x3c0>)
 801a996:	429d      	cmp	r5, r3
 801a998:	dd08      	ble.n	801a9ac <__ieee754_powf+0x17c>
 801a99a:	2c00      	cmp	r4, #0
 801a99c:	dcf3      	bgt.n	801a986 <__ieee754_powf+0x156>
 801a99e:	2000      	movs	r0, #0
 801a9a0:	ecbd 8b02 	vpop	{d8}
 801a9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a8:	f000 bd38 	b.w	801b41c <__math_uflowf>
 801a9ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a9b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a9b4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801abf4 <__ieee754_powf+0x3c4>
 801a9b8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a9bc:	eee0 6a67 	vfms.f32	s13, s0, s15
 801a9c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a9c4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801a9c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a9cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a9d0:	eddf 7a89 	vldr	s15, [pc, #548]	; 801abf8 <__ieee754_powf+0x3c8>
 801a9d4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801a9d8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801abfc <__ieee754_powf+0x3cc>
 801a9dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a9e0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801ac00 <__ieee754_powf+0x3d0>
 801a9e4:	eef0 6a67 	vmov.f32	s13, s15
 801a9e8:	eee0 6a07 	vfma.f32	s13, s0, s14
 801a9ec:	ee16 3a90 	vmov	r3, s13
 801a9f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a9f4:	f023 030f 	bic.w	r3, r3, #15
 801a9f8:	ee06 3a90 	vmov	s13, r3
 801a9fc:	eee0 6a47 	vfms.f32	s13, s0, s14
 801aa00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aa04:	3e01      	subs	r6, #1
 801aa06:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801aa0a:	4306      	orrs	r6, r0
 801aa0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aa10:	f024 040f 	bic.w	r4, r4, #15
 801aa14:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801aa18:	bf08      	it	eq
 801aa1a:	eeb0 8a47 	vmoveq.f32	s16, s14
 801aa1e:	ee07 4a10 	vmov	s14, r4
 801aa22:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801aa26:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801aa2a:	ee07 3a90 	vmov	s15, r3
 801aa2e:	eee7 0a27 	vfma.f32	s1, s14, s15
 801aa32:	ee07 4a10 	vmov	s14, r4
 801aa36:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aa3a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801aa3e:	ee17 1a10 	vmov	r1, s14
 801aa42:	2900      	cmp	r1, #0
 801aa44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa48:	f340 817c 	ble.w	801ad44 <__ieee754_powf+0x514>
 801aa4c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801aa50:	f340 80f8 	ble.w	801ac44 <__ieee754_powf+0x414>
 801aa54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa5c:	bf4c      	ite	mi
 801aa5e:	2001      	movmi	r0, #1
 801aa60:	2000      	movpl	r0, #0
 801aa62:	e791      	b.n	801a988 <__ieee754_powf+0x158>
 801aa64:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801aa68:	bf01      	itttt	eq
 801aa6a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801ac04 <__ieee754_powf+0x3d4>
 801aa6e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801aa72:	f06f 0317 	mvneq.w	r3, #23
 801aa76:	ee17 5a90 	vmoveq	r5, s15
 801aa7a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801aa7e:	bf18      	it	ne
 801aa80:	2300      	movne	r3, #0
 801aa82:	3a7f      	subs	r2, #127	; 0x7f
 801aa84:	441a      	add	r2, r3
 801aa86:	4b60      	ldr	r3, [pc, #384]	; (801ac08 <__ieee754_powf+0x3d8>)
 801aa88:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801aa8c:	429d      	cmp	r5, r3
 801aa8e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801aa92:	dd06      	ble.n	801aaa2 <__ieee754_powf+0x272>
 801aa94:	4b5d      	ldr	r3, [pc, #372]	; (801ac0c <__ieee754_powf+0x3dc>)
 801aa96:	429d      	cmp	r5, r3
 801aa98:	f340 80a4 	ble.w	801abe4 <__ieee754_powf+0x3b4>
 801aa9c:	3201      	adds	r2, #1
 801aa9e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801aaa2:	2500      	movs	r5, #0
 801aaa4:	4b5a      	ldr	r3, [pc, #360]	; (801ac10 <__ieee754_powf+0x3e0>)
 801aaa6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801aaaa:	ee07 1a10 	vmov	s14, r1
 801aaae:	edd3 5a00 	vldr	s11, [r3]
 801aab2:	4b58      	ldr	r3, [pc, #352]	; (801ac14 <__ieee754_powf+0x3e4>)
 801aab4:	ee75 7a87 	vadd.f32	s15, s11, s14
 801aab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aabc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801aac0:	1049      	asrs	r1, r1, #1
 801aac2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801aac6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801aaca:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801aace:	ee37 6a65 	vsub.f32	s12, s14, s11
 801aad2:	ee07 1a90 	vmov	s15, r1
 801aad6:	ee26 5a24 	vmul.f32	s10, s12, s9
 801aada:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801aade:	ee15 7a10 	vmov	r7, s10
 801aae2:	401f      	ands	r7, r3
 801aae4:	ee06 7a90 	vmov	s13, r7
 801aae8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801aaec:	ee37 7a65 	vsub.f32	s14, s14, s11
 801aaf0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801aaf4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801aaf8:	eddf 5a47 	vldr	s11, [pc, #284]	; 801ac18 <__ieee754_powf+0x3e8>
 801aafc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801ac1c <__ieee754_powf+0x3ec>
 801ab00:	eee7 5a87 	vfma.f32	s11, s15, s14
 801ab04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801ac20 <__ieee754_powf+0x3f0>
 801ab08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801ab0c:	eddf 5a39 	vldr	s11, [pc, #228]	; 801abf4 <__ieee754_powf+0x3c4>
 801ab10:	eee7 5a27 	vfma.f32	s11, s14, s15
 801ab14:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801ac24 <__ieee754_powf+0x3f4>
 801ab18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801ab1c:	eddf 5a42 	vldr	s11, [pc, #264]	; 801ac28 <__ieee754_powf+0x3f8>
 801ab20:	ee26 6a24 	vmul.f32	s12, s12, s9
 801ab24:	eee7 5a27 	vfma.f32	s11, s14, s15
 801ab28:	ee35 7a26 	vadd.f32	s14, s10, s13
 801ab2c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801ab30:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ab34:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801ab38:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801ab3c:	eef0 5a67 	vmov.f32	s11, s15
 801ab40:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801ab44:	ee75 5a87 	vadd.f32	s11, s11, s14
 801ab48:	ee15 1a90 	vmov	r1, s11
 801ab4c:	4019      	ands	r1, r3
 801ab4e:	ee05 1a90 	vmov	s11, r1
 801ab52:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ab56:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801ab5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ab5e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ab62:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ab66:	eeb0 6a67 	vmov.f32	s12, s15
 801ab6a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ab6e:	ee16 1a10 	vmov	r1, s12
 801ab72:	4019      	ands	r1, r3
 801ab74:	ee07 1a10 	vmov	s14, r1
 801ab78:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801ab7c:	ee06 1a10 	vmov	s12, r1
 801ab80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab84:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ac2c <__ieee754_powf+0x3fc>
 801ab88:	4929      	ldr	r1, [pc, #164]	; (801ac30 <__ieee754_powf+0x400>)
 801ab8a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801ac34 <__ieee754_powf+0x404>
 801ab8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab92:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ac38 <__ieee754_powf+0x408>
 801ab96:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ab9a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801ab9e:	ed91 7a00 	vldr	s14, [r1]
 801aba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aba6:	ee07 2a10 	vmov	s14, r2
 801abaa:	eef0 6a67 	vmov.f32	s13, s15
 801abae:	4a23      	ldr	r2, [pc, #140]	; (801ac3c <__ieee754_powf+0x40c>)
 801abb0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801abb4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801abb8:	ed92 5a00 	vldr	s10, [r2]
 801abbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801abc0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801abc4:	ee76 6a87 	vadd.f32	s13, s13, s14
 801abc8:	ee16 2a90 	vmov	r2, s13
 801abcc:	4013      	ands	r3, r2
 801abce:	ee06 3a90 	vmov	s13, r3
 801abd2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801abd6:	ee37 7a45 	vsub.f32	s14, s14, s10
 801abda:	eea6 7a65 	vfms.f32	s14, s12, s11
 801abde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abe2:	e70f      	b.n	801aa04 <__ieee754_powf+0x1d4>
 801abe4:	2501      	movs	r5, #1
 801abe6:	e75d      	b.n	801aaa4 <__ieee754_powf+0x274>
 801abe8:	00000000 	.word	0x00000000
 801abec:	3f7ffff3 	.word	0x3f7ffff3
 801abf0:	3f800007 	.word	0x3f800007
 801abf4:	3eaaaaab 	.word	0x3eaaaaab
 801abf8:	3fb8aa3b 	.word	0x3fb8aa3b
 801abfc:	36eca570 	.word	0x36eca570
 801ac00:	3fb8aa00 	.word	0x3fb8aa00
 801ac04:	4b800000 	.word	0x4b800000
 801ac08:	001cc471 	.word	0x001cc471
 801ac0c:	005db3d6 	.word	0x005db3d6
 801ac10:	0801c390 	.word	0x0801c390
 801ac14:	fffff000 	.word	0xfffff000
 801ac18:	3e6c3255 	.word	0x3e6c3255
 801ac1c:	3e53f142 	.word	0x3e53f142
 801ac20:	3e8ba305 	.word	0x3e8ba305
 801ac24:	3edb6db7 	.word	0x3edb6db7
 801ac28:	3f19999a 	.word	0x3f19999a
 801ac2c:	3f76384f 	.word	0x3f76384f
 801ac30:	0801c3a0 	.word	0x0801c3a0
 801ac34:	3f763800 	.word	0x3f763800
 801ac38:	369dc3a0 	.word	0x369dc3a0
 801ac3c:	0801c398 	.word	0x0801c398
 801ac40:	3338aa3c 	.word	0x3338aa3c
 801ac44:	f040 8093 	bne.w	801ad6e <__ieee754_powf+0x53e>
 801ac48:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ac40 <__ieee754_powf+0x410>
 801ac4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ac50:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ac54:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac5c:	f73f aefa 	bgt.w	801aa54 <__ieee754_powf+0x224>
 801ac60:	15db      	asrs	r3, r3, #23
 801ac62:	3b7e      	subs	r3, #126	; 0x7e
 801ac64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801ac68:	4118      	asrs	r0, r3
 801ac6a:	4408      	add	r0, r1
 801ac6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ac70:	4a49      	ldr	r2, [pc, #292]	; (801ad98 <__ieee754_powf+0x568>)
 801ac72:	3b7f      	subs	r3, #127	; 0x7f
 801ac74:	411a      	asrs	r2, r3
 801ac76:	4002      	ands	r2, r0
 801ac78:	ee07 2a10 	vmov	s14, r2
 801ac7c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801ac80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ac84:	f1c3 0317 	rsb	r3, r3, #23
 801ac88:	4118      	asrs	r0, r3
 801ac8a:	2900      	cmp	r1, #0
 801ac8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac90:	bfb8      	it	lt
 801ac92:	4240      	neglt	r0, r0
 801ac94:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ac98:	eddf 6a40 	vldr	s13, [pc, #256]	; 801ad9c <__ieee754_powf+0x56c>
 801ac9c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801ada0 <__ieee754_powf+0x570>
 801aca0:	ee17 3a10 	vmov	r3, s14
 801aca4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801aca8:	f023 030f 	bic.w	r3, r3, #15
 801acac:	ee07 3a10 	vmov	s14, r3
 801acb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801acb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801acb8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801acbc:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ada4 <__ieee754_powf+0x574>
 801acc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801acc4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801acc8:	eef0 6a67 	vmov.f32	s13, s15
 801accc:	eee7 6a06 	vfma.f32	s13, s14, s12
 801acd0:	eef0 5a66 	vmov.f32	s11, s13
 801acd4:	eee7 5a46 	vfms.f32	s11, s14, s12
 801acd8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801acdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801ace0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801ada8 <__ieee754_powf+0x578>
 801ace4:	eddf 5a31 	vldr	s11, [pc, #196]	; 801adac <__ieee754_powf+0x57c>
 801ace8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801acec:	eddf 5a30 	vldr	s11, [pc, #192]	; 801adb0 <__ieee754_powf+0x580>
 801acf0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801acf4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801adb4 <__ieee754_powf+0x584>
 801acf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801acfc:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801adb8 <__ieee754_powf+0x588>
 801ad00:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ad04:	eeb0 6a66 	vmov.f32	s12, s13
 801ad08:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801ad0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801ad10:	ee66 5a86 	vmul.f32	s11, s13, s12
 801ad14:	ee36 6a47 	vsub.f32	s12, s12, s14
 801ad18:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801ad1c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801ad20:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ad28:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ad2c:	ee10 3a10 	vmov	r3, s0
 801ad30:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801ad34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ad38:	da1f      	bge.n	801ad7a <__ieee754_powf+0x54a>
 801ad3a:	f000 faf3 	bl	801b324 <scalbnf>
 801ad3e:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ad42:	e58d      	b.n	801a860 <__ieee754_powf+0x30>
 801ad44:	4a1d      	ldr	r2, [pc, #116]	; (801adbc <__ieee754_powf+0x58c>)
 801ad46:	4293      	cmp	r3, r2
 801ad48:	dd07      	ble.n	801ad5a <__ieee754_powf+0x52a>
 801ad4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad52:	bf4c      	ite	mi
 801ad54:	2001      	movmi	r0, #1
 801ad56:	2000      	movpl	r0, #0
 801ad58:	e622      	b.n	801a9a0 <__ieee754_powf+0x170>
 801ad5a:	d108      	bne.n	801ad6e <__ieee754_powf+0x53e>
 801ad5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ad60:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801ad64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad68:	f6ff af7a 	blt.w	801ac60 <__ieee754_powf+0x430>
 801ad6c:	e7ed      	b.n	801ad4a <__ieee754_powf+0x51a>
 801ad6e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801ad72:	f73f af75 	bgt.w	801ac60 <__ieee754_powf+0x430>
 801ad76:	2000      	movs	r0, #0
 801ad78:	e78c      	b.n	801ac94 <__ieee754_powf+0x464>
 801ad7a:	ee00 3a10 	vmov	s0, r3
 801ad7e:	e7de      	b.n	801ad3e <__ieee754_powf+0x50e>
 801ad80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad84:	e56c      	b.n	801a860 <__ieee754_powf+0x30>
 801ad86:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801adc0 <__ieee754_powf+0x590>
 801ad8a:	e569      	b.n	801a860 <__ieee754_powf+0x30>
 801ad8c:	eeb0 0a48 	vmov.f32	s0, s16
 801ad90:	e566      	b.n	801a860 <__ieee754_powf+0x30>
 801ad92:	2600      	movs	r6, #0
 801ad94:	e591      	b.n	801a8ba <__ieee754_powf+0x8a>
 801ad96:	bf00      	nop
 801ad98:	ff800000 	.word	0xff800000
 801ad9c:	3f317218 	.word	0x3f317218
 801ada0:	3f317200 	.word	0x3f317200
 801ada4:	35bfbe8c 	.word	0x35bfbe8c
 801ada8:	b5ddea0e 	.word	0xb5ddea0e
 801adac:	3331bb4c 	.word	0x3331bb4c
 801adb0:	388ab355 	.word	0x388ab355
 801adb4:	bb360b61 	.word	0xbb360b61
 801adb8:	3e2aaaab 	.word	0x3e2aaaab
 801adbc:	43160000 	.word	0x43160000
 801adc0:	00000000 	.word	0x00000000

0801adc4 <__ieee754_rem_pio2f>:
 801adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adc6:	ee10 6a10 	vmov	r6, s0
 801adca:	4b86      	ldr	r3, [pc, #536]	; (801afe4 <__ieee754_rem_pio2f+0x220>)
 801adcc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801add0:	429d      	cmp	r5, r3
 801add2:	b087      	sub	sp, #28
 801add4:	4604      	mov	r4, r0
 801add6:	dc05      	bgt.n	801ade4 <__ieee754_rem_pio2f+0x20>
 801add8:	2300      	movs	r3, #0
 801adda:	ed80 0a00 	vstr	s0, [r0]
 801adde:	6043      	str	r3, [r0, #4]
 801ade0:	2000      	movs	r0, #0
 801ade2:	e020      	b.n	801ae26 <__ieee754_rem_pio2f+0x62>
 801ade4:	4b80      	ldr	r3, [pc, #512]	; (801afe8 <__ieee754_rem_pio2f+0x224>)
 801ade6:	429d      	cmp	r5, r3
 801ade8:	dc38      	bgt.n	801ae5c <__ieee754_rem_pio2f+0x98>
 801adea:	2e00      	cmp	r6, #0
 801adec:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801afec <__ieee754_rem_pio2f+0x228>
 801adf0:	4b7f      	ldr	r3, [pc, #508]	; (801aff0 <__ieee754_rem_pio2f+0x22c>)
 801adf2:	f025 050f 	bic.w	r5, r5, #15
 801adf6:	dd18      	ble.n	801ae2a <__ieee754_rem_pio2f+0x66>
 801adf8:	429d      	cmp	r5, r3
 801adfa:	ee70 7a47 	vsub.f32	s15, s0, s14
 801adfe:	bf09      	itett	eq
 801ae00:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801aff4 <__ieee754_rem_pio2f+0x230>
 801ae04:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801aff8 <__ieee754_rem_pio2f+0x234>
 801ae08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801ae0c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801affc <__ieee754_rem_pio2f+0x238>
 801ae10:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ae14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae18:	edc0 6a00 	vstr	s13, [r0]
 801ae1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae20:	edc0 7a01 	vstr	s15, [r0, #4]
 801ae24:	2001      	movs	r0, #1
 801ae26:	b007      	add	sp, #28
 801ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae2a:	429d      	cmp	r5, r3
 801ae2c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801ae30:	bf09      	itett	eq
 801ae32:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801aff4 <__ieee754_rem_pio2f+0x230>
 801ae36:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801aff8 <__ieee754_rem_pio2f+0x234>
 801ae3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801ae3e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801affc <__ieee754_rem_pio2f+0x238>
 801ae42:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ae46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae4a:	edc0 6a00 	vstr	s13, [r0]
 801ae4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ae52:	edc0 7a01 	vstr	s15, [r0, #4]
 801ae56:	f04f 30ff 	mov.w	r0, #4294967295
 801ae5a:	e7e4      	b.n	801ae26 <__ieee754_rem_pio2f+0x62>
 801ae5c:	4b68      	ldr	r3, [pc, #416]	; (801b000 <__ieee754_rem_pio2f+0x23c>)
 801ae5e:	429d      	cmp	r5, r3
 801ae60:	dc71      	bgt.n	801af46 <__ieee754_rem_pio2f+0x182>
 801ae62:	f7fe fc42 	bl	80196ea <fabsf>
 801ae66:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b004 <__ieee754_rem_pio2f+0x240>
 801ae6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ae6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ae72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ae7a:	ee17 0a90 	vmov	r0, s15
 801ae7e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801afec <__ieee754_rem_pio2f+0x228>
 801ae82:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ae86:	281f      	cmp	r0, #31
 801ae88:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801aff8 <__ieee754_rem_pio2f+0x234>
 801ae8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ae90:	eeb1 6a47 	vneg.f32	s12, s14
 801ae94:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ae98:	ee16 2a90 	vmov	r2, s13
 801ae9c:	dc1c      	bgt.n	801aed8 <__ieee754_rem_pio2f+0x114>
 801ae9e:	495a      	ldr	r1, [pc, #360]	; (801b008 <__ieee754_rem_pio2f+0x244>)
 801aea0:	1e47      	subs	r7, r0, #1
 801aea2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801aea6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801aeaa:	428b      	cmp	r3, r1
 801aeac:	d014      	beq.n	801aed8 <__ieee754_rem_pio2f+0x114>
 801aeae:	6022      	str	r2, [r4, #0]
 801aeb0:	ed94 7a00 	vldr	s14, [r4]
 801aeb4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801aeb8:	2e00      	cmp	r6, #0
 801aeba:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aebe:	ed84 0a01 	vstr	s0, [r4, #4]
 801aec2:	dab0      	bge.n	801ae26 <__ieee754_rem_pio2f+0x62>
 801aec4:	eeb1 7a47 	vneg.f32	s14, s14
 801aec8:	eeb1 0a40 	vneg.f32	s0, s0
 801aecc:	ed84 7a00 	vstr	s14, [r4]
 801aed0:	ed84 0a01 	vstr	s0, [r4, #4]
 801aed4:	4240      	negs	r0, r0
 801aed6:	e7a6      	b.n	801ae26 <__ieee754_rem_pio2f+0x62>
 801aed8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801aedc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801aee0:	2908      	cmp	r1, #8
 801aee2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801aee6:	dde2      	ble.n	801aeae <__ieee754_rem_pio2f+0xea>
 801aee8:	eddf 5a42 	vldr	s11, [pc, #264]	; 801aff4 <__ieee754_rem_pio2f+0x230>
 801aeec:	eef0 6a40 	vmov.f32	s13, s0
 801aef0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aef4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801aef8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801aefc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801affc <__ieee754_rem_pio2f+0x238>
 801af00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801af04:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801af08:	ee15 2a90 	vmov	r2, s11
 801af0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801af10:	1a5b      	subs	r3, r3, r1
 801af12:	2b19      	cmp	r3, #25
 801af14:	dc04      	bgt.n	801af20 <__ieee754_rem_pio2f+0x15c>
 801af16:	edc4 5a00 	vstr	s11, [r4]
 801af1a:	eeb0 0a66 	vmov.f32	s0, s13
 801af1e:	e7c7      	b.n	801aeb0 <__ieee754_rem_pio2f+0xec>
 801af20:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b00c <__ieee754_rem_pio2f+0x248>
 801af24:	eeb0 0a66 	vmov.f32	s0, s13
 801af28:	eea6 0a25 	vfma.f32	s0, s12, s11
 801af2c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801af30:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b010 <__ieee754_rem_pio2f+0x24c>
 801af34:	eee6 7a25 	vfma.f32	s15, s12, s11
 801af38:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801af3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801af40:	ed84 7a00 	vstr	s14, [r4]
 801af44:	e7b4      	b.n	801aeb0 <__ieee754_rem_pio2f+0xec>
 801af46:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801af4a:	db06      	blt.n	801af5a <__ieee754_rem_pio2f+0x196>
 801af4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801af50:	edc0 7a01 	vstr	s15, [r0, #4]
 801af54:	edc0 7a00 	vstr	s15, [r0]
 801af58:	e742      	b.n	801ade0 <__ieee754_rem_pio2f+0x1c>
 801af5a:	15ea      	asrs	r2, r5, #23
 801af5c:	3a86      	subs	r2, #134	; 0x86
 801af5e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801af62:	ee07 3a90 	vmov	s15, r3
 801af66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801af6a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801b014 <__ieee754_rem_pio2f+0x250>
 801af6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af76:	ed8d 7a03 	vstr	s14, [sp, #12]
 801af7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801af82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af8a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801af8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af92:	eef5 7a40 	vcmp.f32	s15, #0.0
 801af96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af9a:	edcd 7a05 	vstr	s15, [sp, #20]
 801af9e:	d11e      	bne.n	801afde <__ieee754_rem_pio2f+0x21a>
 801afa0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa8:	bf14      	ite	ne
 801afaa:	2302      	movne	r3, #2
 801afac:	2301      	moveq	r3, #1
 801afae:	491a      	ldr	r1, [pc, #104]	; (801b018 <__ieee754_rem_pio2f+0x254>)
 801afb0:	9101      	str	r1, [sp, #4]
 801afb2:	2102      	movs	r1, #2
 801afb4:	9100      	str	r1, [sp, #0]
 801afb6:	a803      	add	r0, sp, #12
 801afb8:	4621      	mov	r1, r4
 801afba:	f000 fa3b 	bl	801b434 <__kernel_rem_pio2f>
 801afbe:	2e00      	cmp	r6, #0
 801afc0:	f6bf af31 	bge.w	801ae26 <__ieee754_rem_pio2f+0x62>
 801afc4:	edd4 7a00 	vldr	s15, [r4]
 801afc8:	eef1 7a67 	vneg.f32	s15, s15
 801afcc:	edc4 7a00 	vstr	s15, [r4]
 801afd0:	edd4 7a01 	vldr	s15, [r4, #4]
 801afd4:	eef1 7a67 	vneg.f32	s15, s15
 801afd8:	edc4 7a01 	vstr	s15, [r4, #4]
 801afdc:	e77a      	b.n	801aed4 <__ieee754_rem_pio2f+0x110>
 801afde:	2303      	movs	r3, #3
 801afe0:	e7e5      	b.n	801afae <__ieee754_rem_pio2f+0x1ea>
 801afe2:	bf00      	nop
 801afe4:	3f490fd8 	.word	0x3f490fd8
 801afe8:	4016cbe3 	.word	0x4016cbe3
 801afec:	3fc90f80 	.word	0x3fc90f80
 801aff0:	3fc90fd0 	.word	0x3fc90fd0
 801aff4:	37354400 	.word	0x37354400
 801aff8:	37354443 	.word	0x37354443
 801affc:	2e85a308 	.word	0x2e85a308
 801b000:	43490f80 	.word	0x43490f80
 801b004:	3f22f984 	.word	0x3f22f984
 801b008:	0801c3a8 	.word	0x0801c3a8
 801b00c:	2e85a300 	.word	0x2e85a300
 801b010:	248d3132 	.word	0x248d3132
 801b014:	43800000 	.word	0x43800000
 801b018:	0801c428 	.word	0x0801c428

0801b01c <atanf>:
 801b01c:	b538      	push	{r3, r4, r5, lr}
 801b01e:	ee10 5a10 	vmov	r5, s0
 801b022:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b026:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b02a:	eef0 7a40 	vmov.f32	s15, s0
 801b02e:	db10      	blt.n	801b052 <atanf+0x36>
 801b030:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b034:	dd04      	ble.n	801b040 <atanf+0x24>
 801b036:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b03a:	eeb0 0a67 	vmov.f32	s0, s15
 801b03e:	bd38      	pop	{r3, r4, r5, pc}
 801b040:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b178 <atanf+0x15c>
 801b044:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801b17c <atanf+0x160>
 801b048:	2d00      	cmp	r5, #0
 801b04a:	bfd8      	it	le
 801b04c:	eef0 7a47 	vmovle.f32	s15, s14
 801b050:	e7f3      	b.n	801b03a <atanf+0x1e>
 801b052:	4b4b      	ldr	r3, [pc, #300]	; (801b180 <atanf+0x164>)
 801b054:	429c      	cmp	r4, r3
 801b056:	dc10      	bgt.n	801b07a <atanf+0x5e>
 801b058:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b05c:	da0a      	bge.n	801b074 <atanf+0x58>
 801b05e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b184 <atanf+0x168>
 801b062:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b06a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b072:	dce2      	bgt.n	801b03a <atanf+0x1e>
 801b074:	f04f 33ff 	mov.w	r3, #4294967295
 801b078:	e013      	b.n	801b0a2 <atanf+0x86>
 801b07a:	f7fe fb36 	bl	80196ea <fabsf>
 801b07e:	4b42      	ldr	r3, [pc, #264]	; (801b188 <atanf+0x16c>)
 801b080:	429c      	cmp	r4, r3
 801b082:	dc4f      	bgt.n	801b124 <atanf+0x108>
 801b084:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b088:	429c      	cmp	r4, r3
 801b08a:	dc41      	bgt.n	801b110 <atanf+0xf4>
 801b08c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b090:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b094:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b098:	2300      	movs	r3, #0
 801b09a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b09e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0a2:	1c5a      	adds	r2, r3, #1
 801b0a4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b0a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b18c <atanf+0x170>
 801b0ac:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b190 <atanf+0x174>
 801b0b0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b194 <atanf+0x178>
 801b0b4:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b0b8:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b0bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b198 <atanf+0x17c>
 801b0c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b0c4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b19c <atanf+0x180>
 801b0c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b0cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b1a0 <atanf+0x184>
 801b0d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b0d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b1a4 <atanf+0x188>
 801b0d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b0dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b1a8 <atanf+0x18c>
 801b0e0:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b0e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b1ac <atanf+0x190>
 801b0e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b0ec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b1b0 <atanf+0x194>
 801b0f0:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b0f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b1b4 <atanf+0x198>
 801b0f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b0fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b100:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b104:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b108:	d121      	bne.n	801b14e <atanf+0x132>
 801b10a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b10e:	e794      	b.n	801b03a <atanf+0x1e>
 801b110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b114:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b118:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b11c:	2301      	movs	r3, #1
 801b11e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b122:	e7be      	b.n	801b0a2 <atanf+0x86>
 801b124:	4b24      	ldr	r3, [pc, #144]	; (801b1b8 <atanf+0x19c>)
 801b126:	429c      	cmp	r4, r3
 801b128:	dc0b      	bgt.n	801b142 <atanf+0x126>
 801b12a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b12e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b132:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b136:	2302      	movs	r3, #2
 801b138:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b140:	e7af      	b.n	801b0a2 <atanf+0x86>
 801b142:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b146:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b14a:	2303      	movs	r3, #3
 801b14c:	e7a9      	b.n	801b0a2 <atanf+0x86>
 801b14e:	4a1b      	ldr	r2, [pc, #108]	; (801b1bc <atanf+0x1a0>)
 801b150:	491b      	ldr	r1, [pc, #108]	; (801b1c0 <atanf+0x1a4>)
 801b152:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b156:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b15a:	edd3 6a00 	vldr	s13, [r3]
 801b15e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b162:	2d00      	cmp	r5, #0
 801b164:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b168:	edd2 7a00 	vldr	s15, [r2]
 801b16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b170:	bfb8      	it	lt
 801b172:	eef1 7a67 	vneglt.f32	s15, s15
 801b176:	e760      	b.n	801b03a <atanf+0x1e>
 801b178:	3fc90fdb 	.word	0x3fc90fdb
 801b17c:	bfc90fdb 	.word	0xbfc90fdb
 801b180:	3edfffff 	.word	0x3edfffff
 801b184:	7149f2ca 	.word	0x7149f2ca
 801b188:	3f97ffff 	.word	0x3f97ffff
 801b18c:	3c8569d7 	.word	0x3c8569d7
 801b190:	3d4bda59 	.word	0x3d4bda59
 801b194:	bd6ef16b 	.word	0xbd6ef16b
 801b198:	3d886b35 	.word	0x3d886b35
 801b19c:	3dba2e6e 	.word	0x3dba2e6e
 801b1a0:	3e124925 	.word	0x3e124925
 801b1a4:	3eaaaaab 	.word	0x3eaaaaab
 801b1a8:	bd15a221 	.word	0xbd15a221
 801b1ac:	bd9d8795 	.word	0xbd9d8795
 801b1b0:	bde38e38 	.word	0xbde38e38
 801b1b4:	be4ccccd 	.word	0xbe4ccccd
 801b1b8:	401bffff 	.word	0x401bffff
 801b1bc:	0801c740 	.word	0x0801c740
 801b1c0:	0801c750 	.word	0x0801c750
 801b1c4:	00000000 	.word	0x00000000

0801b1c8 <scalbn>:
 801b1c8:	b570      	push	{r4, r5, r6, lr}
 801b1ca:	ec55 4b10 	vmov	r4, r5, d0
 801b1ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b1d2:	4606      	mov	r6, r0
 801b1d4:	462b      	mov	r3, r5
 801b1d6:	b999      	cbnz	r1, 801b200 <scalbn+0x38>
 801b1d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b1dc:	4323      	orrs	r3, r4
 801b1de:	d03f      	beq.n	801b260 <scalbn+0x98>
 801b1e0:	4b35      	ldr	r3, [pc, #212]	; (801b2b8 <scalbn+0xf0>)
 801b1e2:	4629      	mov	r1, r5
 801b1e4:	ee10 0a10 	vmov	r0, s0
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	f7e5 fa2d 	bl	8000648 <__aeabi_dmul>
 801b1ee:	4b33      	ldr	r3, [pc, #204]	; (801b2bc <scalbn+0xf4>)
 801b1f0:	429e      	cmp	r6, r3
 801b1f2:	4604      	mov	r4, r0
 801b1f4:	460d      	mov	r5, r1
 801b1f6:	da10      	bge.n	801b21a <scalbn+0x52>
 801b1f8:	a327      	add	r3, pc, #156	; (adr r3, 801b298 <scalbn+0xd0>)
 801b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1fe:	e01f      	b.n	801b240 <scalbn+0x78>
 801b200:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b204:	4291      	cmp	r1, r2
 801b206:	d10c      	bne.n	801b222 <scalbn+0x5a>
 801b208:	ee10 2a10 	vmov	r2, s0
 801b20c:	4620      	mov	r0, r4
 801b20e:	4629      	mov	r1, r5
 801b210:	f7e5 f864 	bl	80002dc <__adddf3>
 801b214:	4604      	mov	r4, r0
 801b216:	460d      	mov	r5, r1
 801b218:	e022      	b.n	801b260 <scalbn+0x98>
 801b21a:	460b      	mov	r3, r1
 801b21c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b220:	3936      	subs	r1, #54	; 0x36
 801b222:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b226:	4296      	cmp	r6, r2
 801b228:	dd0d      	ble.n	801b246 <scalbn+0x7e>
 801b22a:	2d00      	cmp	r5, #0
 801b22c:	a11c      	add	r1, pc, #112	; (adr r1, 801b2a0 <scalbn+0xd8>)
 801b22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b232:	da02      	bge.n	801b23a <scalbn+0x72>
 801b234:	a11c      	add	r1, pc, #112	; (adr r1, 801b2a8 <scalbn+0xe0>)
 801b236:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b23a:	a319      	add	r3, pc, #100	; (adr r3, 801b2a0 <scalbn+0xd8>)
 801b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b240:	f7e5 fa02 	bl	8000648 <__aeabi_dmul>
 801b244:	e7e6      	b.n	801b214 <scalbn+0x4c>
 801b246:	1872      	adds	r2, r6, r1
 801b248:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b24c:	428a      	cmp	r2, r1
 801b24e:	dcec      	bgt.n	801b22a <scalbn+0x62>
 801b250:	2a00      	cmp	r2, #0
 801b252:	dd08      	ble.n	801b266 <scalbn+0x9e>
 801b254:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b258:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b25c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b260:	ec45 4b10 	vmov	d0, r4, r5
 801b264:	bd70      	pop	{r4, r5, r6, pc}
 801b266:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b26a:	da08      	bge.n	801b27e <scalbn+0xb6>
 801b26c:	2d00      	cmp	r5, #0
 801b26e:	a10a      	add	r1, pc, #40	; (adr r1, 801b298 <scalbn+0xd0>)
 801b270:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b274:	dac0      	bge.n	801b1f8 <scalbn+0x30>
 801b276:	a10e      	add	r1, pc, #56	; (adr r1, 801b2b0 <scalbn+0xe8>)
 801b278:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b27c:	e7bc      	b.n	801b1f8 <scalbn+0x30>
 801b27e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b282:	3236      	adds	r2, #54	; 0x36
 801b284:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b288:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b28c:	4620      	mov	r0, r4
 801b28e:	4b0c      	ldr	r3, [pc, #48]	; (801b2c0 <scalbn+0xf8>)
 801b290:	2200      	movs	r2, #0
 801b292:	e7d5      	b.n	801b240 <scalbn+0x78>
 801b294:	f3af 8000 	nop.w
 801b298:	c2f8f359 	.word	0xc2f8f359
 801b29c:	01a56e1f 	.word	0x01a56e1f
 801b2a0:	8800759c 	.word	0x8800759c
 801b2a4:	7e37e43c 	.word	0x7e37e43c
 801b2a8:	8800759c 	.word	0x8800759c
 801b2ac:	fe37e43c 	.word	0xfe37e43c
 801b2b0:	c2f8f359 	.word	0xc2f8f359
 801b2b4:	81a56e1f 	.word	0x81a56e1f
 801b2b8:	43500000 	.word	0x43500000
 801b2bc:	ffff3cb0 	.word	0xffff3cb0
 801b2c0:	3c900000 	.word	0x3c900000

0801b2c4 <with_errno>:
 801b2c4:	b570      	push	{r4, r5, r6, lr}
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	460d      	mov	r5, r1
 801b2ca:	4616      	mov	r6, r2
 801b2cc:	f7fa f93a 	bl	8015544 <__errno>
 801b2d0:	4629      	mov	r1, r5
 801b2d2:	6006      	str	r6, [r0, #0]
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	bd70      	pop	{r4, r5, r6, pc}

0801b2d8 <xflow>:
 801b2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b2da:	4614      	mov	r4, r2
 801b2dc:	461d      	mov	r5, r3
 801b2de:	b108      	cbz	r0, 801b2e4 <xflow+0xc>
 801b2e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b2e4:	e9cd 2300 	strd	r2, r3, [sp]
 801b2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	4629      	mov	r1, r5
 801b2f0:	f7e5 f9aa 	bl	8000648 <__aeabi_dmul>
 801b2f4:	2222      	movs	r2, #34	; 0x22
 801b2f6:	b003      	add	sp, #12
 801b2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b2fc:	f7ff bfe2 	b.w	801b2c4 <with_errno>

0801b300 <__math_uflow>:
 801b300:	b508      	push	{r3, lr}
 801b302:	2200      	movs	r2, #0
 801b304:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b308:	f7ff ffe6 	bl	801b2d8 <xflow>
 801b30c:	ec41 0b10 	vmov	d0, r0, r1
 801b310:	bd08      	pop	{r3, pc}

0801b312 <__math_oflow>:
 801b312:	b508      	push	{r3, lr}
 801b314:	2200      	movs	r2, #0
 801b316:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801b31a:	f7ff ffdd 	bl	801b2d8 <xflow>
 801b31e:	ec41 0b10 	vmov	d0, r0, r1
 801b322:	bd08      	pop	{r3, pc}

0801b324 <scalbnf>:
 801b324:	ee10 3a10 	vmov	r3, s0
 801b328:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b32c:	d02b      	beq.n	801b386 <scalbnf+0x62>
 801b32e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b332:	d302      	bcc.n	801b33a <scalbnf+0x16>
 801b334:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b338:	4770      	bx	lr
 801b33a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b33e:	d123      	bne.n	801b388 <scalbnf+0x64>
 801b340:	4b24      	ldr	r3, [pc, #144]	; (801b3d4 <scalbnf+0xb0>)
 801b342:	eddf 7a25 	vldr	s15, [pc, #148]	; 801b3d8 <scalbnf+0xb4>
 801b346:	4298      	cmp	r0, r3
 801b348:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b34c:	db17      	blt.n	801b37e <scalbnf+0x5a>
 801b34e:	ee10 3a10 	vmov	r3, s0
 801b352:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b356:	3a19      	subs	r2, #25
 801b358:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b35c:	4288      	cmp	r0, r1
 801b35e:	dd15      	ble.n	801b38c <scalbnf+0x68>
 801b360:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b3dc <scalbnf+0xb8>
 801b364:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801b3e0 <scalbnf+0xbc>
 801b368:	ee10 3a10 	vmov	r3, s0
 801b36c:	eeb0 7a67 	vmov.f32	s14, s15
 801b370:	2b00      	cmp	r3, #0
 801b372:	bfb8      	it	lt
 801b374:	eef0 7a66 	vmovlt.f32	s15, s13
 801b378:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b37c:	4770      	bx	lr
 801b37e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b3e4 <scalbnf+0xc0>
 801b382:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b386:	4770      	bx	lr
 801b388:	0dd2      	lsrs	r2, r2, #23
 801b38a:	e7e5      	b.n	801b358 <scalbnf+0x34>
 801b38c:	4410      	add	r0, r2
 801b38e:	28fe      	cmp	r0, #254	; 0xfe
 801b390:	dce6      	bgt.n	801b360 <scalbnf+0x3c>
 801b392:	2800      	cmp	r0, #0
 801b394:	dd06      	ble.n	801b3a4 <scalbnf+0x80>
 801b396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b39a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b39e:	ee00 3a10 	vmov	s0, r3
 801b3a2:	4770      	bx	lr
 801b3a4:	f110 0f16 	cmn.w	r0, #22
 801b3a8:	da09      	bge.n	801b3be <scalbnf+0x9a>
 801b3aa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b3e4 <scalbnf+0xc0>
 801b3ae:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801b3e8 <scalbnf+0xc4>
 801b3b2:	ee10 3a10 	vmov	r3, s0
 801b3b6:	eeb0 7a67 	vmov.f32	s14, s15
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	e7d9      	b.n	801b372 <scalbnf+0x4e>
 801b3be:	3019      	adds	r0, #25
 801b3c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b3c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b3c8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b3ec <scalbnf+0xc8>
 801b3cc:	ee07 3a90 	vmov	s15, r3
 801b3d0:	e7d7      	b.n	801b382 <scalbnf+0x5e>
 801b3d2:	bf00      	nop
 801b3d4:	ffff3cb0 	.word	0xffff3cb0
 801b3d8:	4c000000 	.word	0x4c000000
 801b3dc:	7149f2ca 	.word	0x7149f2ca
 801b3e0:	f149f2ca 	.word	0xf149f2ca
 801b3e4:	0da24260 	.word	0x0da24260
 801b3e8:	8da24260 	.word	0x8da24260
 801b3ec:	33000000 	.word	0x33000000

0801b3f0 <with_errnof>:
 801b3f0:	b513      	push	{r0, r1, r4, lr}
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b3f8:	f7fa f8a4 	bl	8015544 <__errno>
 801b3fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b400:	6004      	str	r4, [r0, #0]
 801b402:	b002      	add	sp, #8
 801b404:	bd10      	pop	{r4, pc}

0801b406 <xflowf>:
 801b406:	b130      	cbz	r0, 801b416 <xflowf+0x10>
 801b408:	eef1 7a40 	vneg.f32	s15, s0
 801b40c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b410:	2022      	movs	r0, #34	; 0x22
 801b412:	f7ff bfed 	b.w	801b3f0 <with_errnof>
 801b416:	eef0 7a40 	vmov.f32	s15, s0
 801b41a:	e7f7      	b.n	801b40c <xflowf+0x6>

0801b41c <__math_uflowf>:
 801b41c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b424 <__math_uflowf+0x8>
 801b420:	f7ff bff1 	b.w	801b406 <xflowf>
 801b424:	10000000 	.word	0x10000000

0801b428 <__math_oflowf>:
 801b428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b430 <__math_oflowf+0x8>
 801b42c:	f7ff bfeb 	b.w	801b406 <xflowf>
 801b430:	70000000 	.word	0x70000000

0801b434 <__kernel_rem_pio2f>:
 801b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b438:	ed2d 8b04 	vpush	{d8-d9}
 801b43c:	b0d9      	sub	sp, #356	; 0x164
 801b43e:	4688      	mov	r8, r1
 801b440:	9002      	str	r0, [sp, #8]
 801b442:	49b8      	ldr	r1, [pc, #736]	; (801b724 <__kernel_rem_pio2f+0x2f0>)
 801b444:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b446:	9301      	str	r3, [sp, #4]
 801b448:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b44c:	9901      	ldr	r1, [sp, #4]
 801b44e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b450:	f101 3bff 	add.w	fp, r1, #4294967295
 801b454:	1d11      	adds	r1, r2, #4
 801b456:	db25      	blt.n	801b4a4 <__kernel_rem_pio2f+0x70>
 801b458:	1ed0      	subs	r0, r2, #3
 801b45a:	bf48      	it	mi
 801b45c:	1d10      	addmi	r0, r2, #4
 801b45e:	10c0      	asrs	r0, r0, #3
 801b460:	1c45      	adds	r5, r0, #1
 801b462:	00e9      	lsls	r1, r5, #3
 801b464:	eba0 070b 	sub.w	r7, r0, fp
 801b468:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b46c:	9103      	str	r1, [sp, #12]
 801b46e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b472:	eb0a 0c0b 	add.w	ip, sl, fp
 801b476:	ae1c      	add	r6, sp, #112	; 0x70
 801b478:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b47c:	2400      	movs	r4, #0
 801b47e:	4564      	cmp	r4, ip
 801b480:	dd12      	ble.n	801b4a8 <__kernel_rem_pio2f+0x74>
 801b482:	9901      	ldr	r1, [sp, #4]
 801b484:	ac1c      	add	r4, sp, #112	; 0x70
 801b486:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b48a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b48e:	f04f 0c00 	mov.w	ip, #0
 801b492:	45d4      	cmp	ip, sl
 801b494:	dc27      	bgt.n	801b4e6 <__kernel_rem_pio2f+0xb2>
 801b496:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b49a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b49e:	4627      	mov	r7, r4
 801b4a0:	2600      	movs	r6, #0
 801b4a2:	e016      	b.n	801b4d2 <__kernel_rem_pio2f+0x9e>
 801b4a4:	2000      	movs	r0, #0
 801b4a6:	e7db      	b.n	801b460 <__kernel_rem_pio2f+0x2c>
 801b4a8:	42e7      	cmn	r7, r4
 801b4aa:	bf5d      	ittte	pl
 801b4ac:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b4b0:	ee07 1a90 	vmovpl	s15, r1
 801b4b4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b4b8:	eef0 7a47 	vmovmi.f32	s15, s14
 801b4bc:	ece6 7a01 	vstmia	r6!, {s15}
 801b4c0:	3401      	adds	r4, #1
 801b4c2:	e7dc      	b.n	801b47e <__kernel_rem_pio2f+0x4a>
 801b4c4:	ecfe 6a01 	vldmia	lr!, {s13}
 801b4c8:	ed97 7a00 	vldr	s14, [r7]
 801b4cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b4d0:	3601      	adds	r6, #1
 801b4d2:	455e      	cmp	r6, fp
 801b4d4:	f1a7 0704 	sub.w	r7, r7, #4
 801b4d8:	ddf4      	ble.n	801b4c4 <__kernel_rem_pio2f+0x90>
 801b4da:	ece9 7a01 	vstmia	r9!, {s15}
 801b4de:	f10c 0c01 	add.w	ip, ip, #1
 801b4e2:	3404      	adds	r4, #4
 801b4e4:	e7d5      	b.n	801b492 <__kernel_rem_pio2f+0x5e>
 801b4e6:	a908      	add	r1, sp, #32
 801b4e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b4f0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b730 <__kernel_rem_pio2f+0x2fc>
 801b4f4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b72c <__kernel_rem_pio2f+0x2f8>
 801b4f8:	9105      	str	r1, [sp, #20]
 801b4fa:	9304      	str	r3, [sp, #16]
 801b4fc:	4656      	mov	r6, sl
 801b4fe:	00b3      	lsls	r3, r6, #2
 801b500:	9306      	str	r3, [sp, #24]
 801b502:	ab58      	add	r3, sp, #352	; 0x160
 801b504:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b508:	ac08      	add	r4, sp, #32
 801b50a:	ab44      	add	r3, sp, #272	; 0x110
 801b50c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b510:	46a4      	mov	ip, r4
 801b512:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b516:	4637      	mov	r7, r6
 801b518:	2f00      	cmp	r7, #0
 801b51a:	f1a0 0004 	sub.w	r0, r0, #4
 801b51e:	dc4a      	bgt.n	801b5b6 <__kernel_rem_pio2f+0x182>
 801b520:	4628      	mov	r0, r5
 801b522:	9207      	str	r2, [sp, #28]
 801b524:	f7ff fefe 	bl	801b324 <scalbnf>
 801b528:	eeb0 8a40 	vmov.f32	s16, s0
 801b52c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b530:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b534:	f000 f9f0 	bl	801b918 <floorf>
 801b538:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b53c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b540:	2d00      	cmp	r5, #0
 801b542:	9a07      	ldr	r2, [sp, #28]
 801b544:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b548:	ee17 9a90 	vmov	r9, s15
 801b54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b550:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b554:	dd41      	ble.n	801b5da <__kernel_rem_pio2f+0x1a6>
 801b556:	f106 3cff 	add.w	ip, r6, #4294967295
 801b55a:	ab08      	add	r3, sp, #32
 801b55c:	f1c5 0e08 	rsb	lr, r5, #8
 801b560:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b564:	fa47 f00e 	asr.w	r0, r7, lr
 801b568:	4481      	add	r9, r0
 801b56a:	fa00 f00e 	lsl.w	r0, r0, lr
 801b56e:	1a3f      	subs	r7, r7, r0
 801b570:	f1c5 0007 	rsb	r0, r5, #7
 801b574:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b578:	4107      	asrs	r7, r0
 801b57a:	2f00      	cmp	r7, #0
 801b57c:	dd3c      	ble.n	801b5f8 <__kernel_rem_pio2f+0x1c4>
 801b57e:	f04f 0e00 	mov.w	lr, #0
 801b582:	f109 0901 	add.w	r9, r9, #1
 801b586:	4671      	mov	r1, lr
 801b588:	4576      	cmp	r6, lr
 801b58a:	dc67      	bgt.n	801b65c <__kernel_rem_pio2f+0x228>
 801b58c:	2d00      	cmp	r5, #0
 801b58e:	dd03      	ble.n	801b598 <__kernel_rem_pio2f+0x164>
 801b590:	2d01      	cmp	r5, #1
 801b592:	d074      	beq.n	801b67e <__kernel_rem_pio2f+0x24a>
 801b594:	2d02      	cmp	r5, #2
 801b596:	d07b      	beq.n	801b690 <__kernel_rem_pio2f+0x25c>
 801b598:	2f02      	cmp	r7, #2
 801b59a:	d12d      	bne.n	801b5f8 <__kernel_rem_pio2f+0x1c4>
 801b59c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b5a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b5a4:	b341      	cbz	r1, 801b5f8 <__kernel_rem_pio2f+0x1c4>
 801b5a6:	4628      	mov	r0, r5
 801b5a8:	9207      	str	r2, [sp, #28]
 801b5aa:	f7ff febb 	bl	801b324 <scalbnf>
 801b5ae:	9a07      	ldr	r2, [sp, #28]
 801b5b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b5b4:	e020      	b.n	801b5f8 <__kernel_rem_pio2f+0x1c4>
 801b5b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b5ba:	3f01      	subs	r7, #1
 801b5bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b5c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b5c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b5cc:	ecac 0a01 	vstmia	ip!, {s0}
 801b5d0:	ed90 0a00 	vldr	s0, [r0]
 801b5d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b5d8:	e79e      	b.n	801b518 <__kernel_rem_pio2f+0xe4>
 801b5da:	d105      	bne.n	801b5e8 <__kernel_rem_pio2f+0x1b4>
 801b5dc:	1e70      	subs	r0, r6, #1
 801b5de:	ab08      	add	r3, sp, #32
 801b5e0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b5e4:	11ff      	asrs	r7, r7, #7
 801b5e6:	e7c8      	b.n	801b57a <__kernel_rem_pio2f+0x146>
 801b5e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b5ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5f4:	da30      	bge.n	801b658 <__kernel_rem_pio2f+0x224>
 801b5f6:	2700      	movs	r7, #0
 801b5f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b600:	f040 809a 	bne.w	801b738 <__kernel_rem_pio2f+0x304>
 801b604:	1e74      	subs	r4, r6, #1
 801b606:	46a4      	mov	ip, r4
 801b608:	2100      	movs	r1, #0
 801b60a:	45d4      	cmp	ip, sl
 801b60c:	da47      	bge.n	801b69e <__kernel_rem_pio2f+0x26a>
 801b60e:	2900      	cmp	r1, #0
 801b610:	d063      	beq.n	801b6da <__kernel_rem_pio2f+0x2a6>
 801b612:	ab08      	add	r3, sp, #32
 801b614:	3d08      	subs	r5, #8
 801b616:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d07f      	beq.n	801b71e <__kernel_rem_pio2f+0x2ea>
 801b61e:	4628      	mov	r0, r5
 801b620:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b624:	f7ff fe7e 	bl	801b324 <scalbnf>
 801b628:	1c63      	adds	r3, r4, #1
 801b62a:	aa44      	add	r2, sp, #272	; 0x110
 801b62c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b730 <__kernel_rem_pio2f+0x2fc>
 801b630:	0099      	lsls	r1, r3, #2
 801b632:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b636:	4623      	mov	r3, r4
 801b638:	2b00      	cmp	r3, #0
 801b63a:	f280 80ad 	bge.w	801b798 <__kernel_rem_pio2f+0x364>
 801b63e:	4623      	mov	r3, r4
 801b640:	2b00      	cmp	r3, #0
 801b642:	f2c0 80cb 	blt.w	801b7dc <__kernel_rem_pio2f+0x3a8>
 801b646:	aa44      	add	r2, sp, #272	; 0x110
 801b648:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b64c:	4e36      	ldr	r6, [pc, #216]	; (801b728 <__kernel_rem_pio2f+0x2f4>)
 801b64e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b652:	2000      	movs	r0, #0
 801b654:	1ae2      	subs	r2, r4, r3
 801b656:	e0b6      	b.n	801b7c6 <__kernel_rem_pio2f+0x392>
 801b658:	2702      	movs	r7, #2
 801b65a:	e790      	b.n	801b57e <__kernel_rem_pio2f+0x14a>
 801b65c:	6820      	ldr	r0, [r4, #0]
 801b65e:	b949      	cbnz	r1, 801b674 <__kernel_rem_pio2f+0x240>
 801b660:	b118      	cbz	r0, 801b66a <__kernel_rem_pio2f+0x236>
 801b662:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b666:	6020      	str	r0, [r4, #0]
 801b668:	2001      	movs	r0, #1
 801b66a:	f10e 0e01 	add.w	lr, lr, #1
 801b66e:	3404      	adds	r4, #4
 801b670:	4601      	mov	r1, r0
 801b672:	e789      	b.n	801b588 <__kernel_rem_pio2f+0x154>
 801b674:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b678:	6020      	str	r0, [r4, #0]
 801b67a:	4608      	mov	r0, r1
 801b67c:	e7f5      	b.n	801b66a <__kernel_rem_pio2f+0x236>
 801b67e:	1e74      	subs	r4, r6, #1
 801b680:	ab08      	add	r3, sp, #32
 801b682:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b686:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b68a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b68e:	e783      	b.n	801b598 <__kernel_rem_pio2f+0x164>
 801b690:	1e74      	subs	r4, r6, #1
 801b692:	ab08      	add	r3, sp, #32
 801b694:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b698:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b69c:	e7f5      	b.n	801b68a <__kernel_rem_pio2f+0x256>
 801b69e:	ab08      	add	r3, sp, #32
 801b6a0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b6a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b6a8:	4301      	orrs	r1, r0
 801b6aa:	e7ae      	b.n	801b60a <__kernel_rem_pio2f+0x1d6>
 801b6ac:	3001      	adds	r0, #1
 801b6ae:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b6b2:	2f00      	cmp	r7, #0
 801b6b4:	d0fa      	beq.n	801b6ac <__kernel_rem_pio2f+0x278>
 801b6b6:	9b06      	ldr	r3, [sp, #24]
 801b6b8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b6bc:	eb0d 0403 	add.w	r4, sp, r3
 801b6c0:	9b01      	ldr	r3, [sp, #4]
 801b6c2:	18f7      	adds	r7, r6, r3
 801b6c4:	ab1c      	add	r3, sp, #112	; 0x70
 801b6c6:	f106 0c01 	add.w	ip, r6, #1
 801b6ca:	3c4c      	subs	r4, #76	; 0x4c
 801b6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b6d0:	4430      	add	r0, r6
 801b6d2:	4560      	cmp	r0, ip
 801b6d4:	da04      	bge.n	801b6e0 <__kernel_rem_pio2f+0x2ac>
 801b6d6:	4606      	mov	r6, r0
 801b6d8:	e711      	b.n	801b4fe <__kernel_rem_pio2f+0xca>
 801b6da:	9c05      	ldr	r4, [sp, #20]
 801b6dc:	2001      	movs	r0, #1
 801b6de:	e7e6      	b.n	801b6ae <__kernel_rem_pio2f+0x27a>
 801b6e0:	9b04      	ldr	r3, [sp, #16]
 801b6e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b6e6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b6ea:	9306      	str	r3, [sp, #24]
 801b6ec:	ee07 3a90 	vmov	s15, r3
 801b6f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6f4:	2600      	movs	r6, #0
 801b6f6:	ece7 7a01 	vstmia	r7!, {s15}
 801b6fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b6fe:	46b9      	mov	r9, r7
 801b700:	455e      	cmp	r6, fp
 801b702:	dd04      	ble.n	801b70e <__kernel_rem_pio2f+0x2da>
 801b704:	ece4 7a01 	vstmia	r4!, {s15}
 801b708:	f10c 0c01 	add.w	ip, ip, #1
 801b70c:	e7e1      	b.n	801b6d2 <__kernel_rem_pio2f+0x29e>
 801b70e:	ecfe 6a01 	vldmia	lr!, {s13}
 801b712:	ed39 7a01 	vldmdb	r9!, {s14}
 801b716:	3601      	adds	r6, #1
 801b718:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b71c:	e7f0      	b.n	801b700 <__kernel_rem_pio2f+0x2cc>
 801b71e:	3c01      	subs	r4, #1
 801b720:	e777      	b.n	801b612 <__kernel_rem_pio2f+0x1de>
 801b722:	bf00      	nop
 801b724:	0801c78c 	.word	0x0801c78c
 801b728:	0801c760 	.word	0x0801c760
 801b72c:	43800000 	.word	0x43800000
 801b730:	3b800000 	.word	0x3b800000
 801b734:	00000000 	.word	0x00000000
 801b738:	9b03      	ldr	r3, [sp, #12]
 801b73a:	eeb0 0a48 	vmov.f32	s0, s16
 801b73e:	1a98      	subs	r0, r3, r2
 801b740:	f7ff fdf0 	bl	801b324 <scalbnf>
 801b744:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b72c <__kernel_rem_pio2f+0x2f8>
 801b748:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b750:	db19      	blt.n	801b786 <__kernel_rem_pio2f+0x352>
 801b752:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b730 <__kernel_rem_pio2f+0x2fc>
 801b756:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b75a:	aa08      	add	r2, sp, #32
 801b75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b760:	1c74      	adds	r4, r6, #1
 801b762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b766:	3508      	adds	r5, #8
 801b768:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b76c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b770:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b774:	ee10 3a10 	vmov	r3, s0
 801b778:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b77c:	ee17 3a90 	vmov	r3, s15
 801b780:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b784:	e74b      	b.n	801b61e <__kernel_rem_pio2f+0x1ea>
 801b786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b78a:	aa08      	add	r2, sp, #32
 801b78c:	ee10 3a10 	vmov	r3, s0
 801b790:	4634      	mov	r4, r6
 801b792:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b796:	e742      	b.n	801b61e <__kernel_rem_pio2f+0x1ea>
 801b798:	a808      	add	r0, sp, #32
 801b79a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b79e:	9001      	str	r0, [sp, #4]
 801b7a0:	ee07 0a90 	vmov	s15, r0
 801b7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7a8:	3b01      	subs	r3, #1
 801b7aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b7ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b7b2:	ed62 7a01 	vstmdb	r2!, {s15}
 801b7b6:	e73f      	b.n	801b638 <__kernel_rem_pio2f+0x204>
 801b7b8:	ecf6 6a01 	vldmia	r6!, {s13}
 801b7bc:	ecb5 7a01 	vldmia	r5!, {s14}
 801b7c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b7c4:	3001      	adds	r0, #1
 801b7c6:	4550      	cmp	r0, sl
 801b7c8:	dc01      	bgt.n	801b7ce <__kernel_rem_pio2f+0x39a>
 801b7ca:	4290      	cmp	r0, r2
 801b7cc:	ddf4      	ble.n	801b7b8 <__kernel_rem_pio2f+0x384>
 801b7ce:	a858      	add	r0, sp, #352	; 0x160
 801b7d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b7d4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801b7d8:	3b01      	subs	r3, #1
 801b7da:	e731      	b.n	801b640 <__kernel_rem_pio2f+0x20c>
 801b7dc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b7de:	2b02      	cmp	r3, #2
 801b7e0:	dc09      	bgt.n	801b7f6 <__kernel_rem_pio2f+0x3c2>
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	dc2b      	bgt.n	801b83e <__kernel_rem_pio2f+0x40a>
 801b7e6:	d044      	beq.n	801b872 <__kernel_rem_pio2f+0x43e>
 801b7e8:	f009 0007 	and.w	r0, r9, #7
 801b7ec:	b059      	add	sp, #356	; 0x164
 801b7ee:	ecbd 8b04 	vpop	{d8-d9}
 801b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b7f8:	2b03      	cmp	r3, #3
 801b7fa:	d1f5      	bne.n	801b7e8 <__kernel_rem_pio2f+0x3b4>
 801b7fc:	aa30      	add	r2, sp, #192	; 0xc0
 801b7fe:	1f0b      	subs	r3, r1, #4
 801b800:	4413      	add	r3, r2
 801b802:	461a      	mov	r2, r3
 801b804:	4620      	mov	r0, r4
 801b806:	2800      	cmp	r0, #0
 801b808:	f1a2 0204 	sub.w	r2, r2, #4
 801b80c:	dc52      	bgt.n	801b8b4 <__kernel_rem_pio2f+0x480>
 801b80e:	4622      	mov	r2, r4
 801b810:	2a01      	cmp	r2, #1
 801b812:	f1a3 0304 	sub.w	r3, r3, #4
 801b816:	dc5d      	bgt.n	801b8d4 <__kernel_rem_pio2f+0x4a0>
 801b818:	ab30      	add	r3, sp, #192	; 0xc0
 801b81a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b81e:	440b      	add	r3, r1
 801b820:	2c01      	cmp	r4, #1
 801b822:	dc67      	bgt.n	801b8f4 <__kernel_rem_pio2f+0x4c0>
 801b824:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b828:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b82c:	2f00      	cmp	r7, #0
 801b82e:	d167      	bne.n	801b900 <__kernel_rem_pio2f+0x4cc>
 801b830:	edc8 6a00 	vstr	s13, [r8]
 801b834:	ed88 7a01 	vstr	s14, [r8, #4]
 801b838:	edc8 7a02 	vstr	s15, [r8, #8]
 801b83c:	e7d4      	b.n	801b7e8 <__kernel_rem_pio2f+0x3b4>
 801b83e:	ab30      	add	r3, sp, #192	; 0xc0
 801b840:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b844:	440b      	add	r3, r1
 801b846:	4622      	mov	r2, r4
 801b848:	2a00      	cmp	r2, #0
 801b84a:	da24      	bge.n	801b896 <__kernel_rem_pio2f+0x462>
 801b84c:	b34f      	cbz	r7, 801b8a2 <__kernel_rem_pio2f+0x46e>
 801b84e:	eef1 7a47 	vneg.f32	s15, s14
 801b852:	edc8 7a00 	vstr	s15, [r8]
 801b856:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b85a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b85e:	aa31      	add	r2, sp, #196	; 0xc4
 801b860:	2301      	movs	r3, #1
 801b862:	429c      	cmp	r4, r3
 801b864:	da20      	bge.n	801b8a8 <__kernel_rem_pio2f+0x474>
 801b866:	b10f      	cbz	r7, 801b86c <__kernel_rem_pio2f+0x438>
 801b868:	eef1 7a67 	vneg.f32	s15, s15
 801b86c:	edc8 7a01 	vstr	s15, [r8, #4]
 801b870:	e7ba      	b.n	801b7e8 <__kernel_rem_pio2f+0x3b4>
 801b872:	ab30      	add	r3, sp, #192	; 0xc0
 801b874:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b734 <__kernel_rem_pio2f+0x300>
 801b878:	440b      	add	r3, r1
 801b87a:	2c00      	cmp	r4, #0
 801b87c:	da05      	bge.n	801b88a <__kernel_rem_pio2f+0x456>
 801b87e:	b10f      	cbz	r7, 801b884 <__kernel_rem_pio2f+0x450>
 801b880:	eef1 7a67 	vneg.f32	s15, s15
 801b884:	edc8 7a00 	vstr	s15, [r8]
 801b888:	e7ae      	b.n	801b7e8 <__kernel_rem_pio2f+0x3b4>
 801b88a:	ed33 7a01 	vldmdb	r3!, {s14}
 801b88e:	3c01      	subs	r4, #1
 801b890:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b894:	e7f1      	b.n	801b87a <__kernel_rem_pio2f+0x446>
 801b896:	ed73 7a01 	vldmdb	r3!, {s15}
 801b89a:	3a01      	subs	r2, #1
 801b89c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8a0:	e7d2      	b.n	801b848 <__kernel_rem_pio2f+0x414>
 801b8a2:	eef0 7a47 	vmov.f32	s15, s14
 801b8a6:	e7d4      	b.n	801b852 <__kernel_rem_pio2f+0x41e>
 801b8a8:	ecb2 7a01 	vldmia	r2!, {s14}
 801b8ac:	3301      	adds	r3, #1
 801b8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b8b2:	e7d6      	b.n	801b862 <__kernel_rem_pio2f+0x42e>
 801b8b4:	edd2 7a00 	vldr	s15, [r2]
 801b8b8:	edd2 6a01 	vldr	s13, [r2, #4]
 801b8bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b8c0:	3801      	subs	r0, #1
 801b8c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8c6:	ed82 7a00 	vstr	s14, [r2]
 801b8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b8ce:	edc2 7a01 	vstr	s15, [r2, #4]
 801b8d2:	e798      	b.n	801b806 <__kernel_rem_pio2f+0x3d2>
 801b8d4:	edd3 7a00 	vldr	s15, [r3]
 801b8d8:	edd3 6a01 	vldr	s13, [r3, #4]
 801b8dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b8e0:	3a01      	subs	r2, #1
 801b8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8e6:	ed83 7a00 	vstr	s14, [r3]
 801b8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b8ee:	edc3 7a01 	vstr	s15, [r3, #4]
 801b8f2:	e78d      	b.n	801b810 <__kernel_rem_pio2f+0x3dc>
 801b8f4:	ed33 7a01 	vldmdb	r3!, {s14}
 801b8f8:	3c01      	subs	r4, #1
 801b8fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b8fe:	e78f      	b.n	801b820 <__kernel_rem_pio2f+0x3ec>
 801b900:	eef1 6a66 	vneg.f32	s13, s13
 801b904:	eeb1 7a47 	vneg.f32	s14, s14
 801b908:	edc8 6a00 	vstr	s13, [r8]
 801b90c:	ed88 7a01 	vstr	s14, [r8, #4]
 801b910:	eef1 7a67 	vneg.f32	s15, s15
 801b914:	e790      	b.n	801b838 <__kernel_rem_pio2f+0x404>
 801b916:	bf00      	nop

0801b918 <floorf>:
 801b918:	ee10 3a10 	vmov	r3, s0
 801b91c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b920:	3a7f      	subs	r2, #127	; 0x7f
 801b922:	2a16      	cmp	r2, #22
 801b924:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b928:	dc2a      	bgt.n	801b980 <floorf+0x68>
 801b92a:	2a00      	cmp	r2, #0
 801b92c:	da11      	bge.n	801b952 <floorf+0x3a>
 801b92e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b990 <floorf+0x78>
 801b932:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b936:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b93e:	dd05      	ble.n	801b94c <floorf+0x34>
 801b940:	2b00      	cmp	r3, #0
 801b942:	da23      	bge.n	801b98c <floorf+0x74>
 801b944:	4a13      	ldr	r2, [pc, #76]	; (801b994 <floorf+0x7c>)
 801b946:	2900      	cmp	r1, #0
 801b948:	bf18      	it	ne
 801b94a:	4613      	movne	r3, r2
 801b94c:	ee00 3a10 	vmov	s0, r3
 801b950:	4770      	bx	lr
 801b952:	4911      	ldr	r1, [pc, #68]	; (801b998 <floorf+0x80>)
 801b954:	4111      	asrs	r1, r2
 801b956:	420b      	tst	r3, r1
 801b958:	d0fa      	beq.n	801b950 <floorf+0x38>
 801b95a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b990 <floorf+0x78>
 801b95e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b962:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b96a:	ddef      	ble.n	801b94c <floorf+0x34>
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	bfbe      	ittt	lt
 801b970:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b974:	fa40 f202 	asrlt.w	r2, r0, r2
 801b978:	189b      	addlt	r3, r3, r2
 801b97a:	ea23 0301 	bic.w	r3, r3, r1
 801b97e:	e7e5      	b.n	801b94c <floorf+0x34>
 801b980:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b984:	d3e4      	bcc.n	801b950 <floorf+0x38>
 801b986:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b98a:	4770      	bx	lr
 801b98c:	2300      	movs	r3, #0
 801b98e:	e7dd      	b.n	801b94c <floorf+0x34>
 801b990:	7149f2ca 	.word	0x7149f2ca
 801b994:	bf800000 	.word	0xbf800000
 801b998:	007fffff 	.word	0x007fffff

0801b99c <_init>:
 801b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b99e:	bf00      	nop
 801b9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9a2:	bc08      	pop	{r3}
 801b9a4:	469e      	mov	lr, r3
 801b9a6:	4770      	bx	lr

0801b9a8 <_fini>:
 801b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9aa:	bf00      	nop
 801b9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9ae:	bc08      	pop	{r3}
 801b9b0:	469e      	mov	lr, r3
 801b9b2:	4770      	bx	lr
