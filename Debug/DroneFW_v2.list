
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001532c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  08015510  08015510  00025510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e20  08015e20  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08015e20  08015e20  00025e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e28  08015e28  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e28  08015e28  00025e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e2c  08015e2c  00025e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08015e30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004904  200001f0  08016020  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004af4  08016020  00034af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027c10  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000562b  00000000  00000000  00057e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  0005d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001605  00000000  00000000  0005f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d99  00000000  00000000  0006073d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028896  00000000  00000000  0008a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed3e2  00000000  00000000  000b2d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000900c  00000000  00000000  001a0150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080154f4 	.word	0x080154f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080154f4 	.word	0x080154f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

	// Clear controller variables
	pid->prevError  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->integrator = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clear output
	pid->out = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a03 	vldr	s15, [r3, #12]
 8001116:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 7a04 	vldr	s15, [r3, #16]
 8001134:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	ed87 0a02 	vstr	s0, [r7, #8]
 8001164:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal
	float error = reference - measurement;
 8001168:	ed97 7a02 	vldr	s14, [r7, #8]
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001174:	edc7 7a07 	vstr	s15, [r7, #28]

	// Proportional
    float proportional = pid->Kp * error;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001186:	edc7 7a06 	vstr	s15, [r7, #24]

	// Integral with Anti-windup
    if (!pid->antiWindup)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01c      	beq.n	80011d4 <PIDController_Update+0x7c>
    	pid->integrator = pid->integrator + ( pid->Ki * (pid->T / 2) * (error + pid->prevError) );
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80011ac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80011b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80011b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 80011be:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80011c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Derivative with low-pass filter
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011e8:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	ed93 6a02 	vldr	s12, [r3, #8]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011fe:	edd7 5a07 	vldr	s11, [r7, #28]
 8001202:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001206:	ee66 5a27 	vmul.f32	s11, s12, s15
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001210:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// Compute output
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001228:	edd7 7a06 	vldr	s15, [r7, #24]
 800122c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    float preSaturationOutput = pid->out;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	617b      	str	r3, [r7, #20]

    // Saturating (clamping) the output
    if (pid->out > pid->limMax)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd04      	ble.n	8001266 <PIDController_Update+0x10e>
        pid->out = pid->limMax;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
 8001264:	e00e      	b.n	8001284 <PIDController_Update+0x12c>
    else if (pid->out < pid->limMin)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d503      	bpl.n	8001284 <PIDController_Update+0x12c>
        pid->out = pid->limMin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	631a      	str	r2, [r3, #48]	; 0x30

    // Anti-windup check
    // If clamping had an effect...
    if (preSaturationOutput != pid->out)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800128a:	ed97 7a05 	vldr	s14, [r7, #20]
 800128e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	d020      	beq.n	80012da <PIDController_Update+0x182>
    {
    	// ...and if the integrator is trying to make saturation worse
    	if ((preSaturationOutput > 0 && error > 0)
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	dd06      	ble.n	80012b4 <PIDController_Update+0x15c>
 80012a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	dc0d      	bgt.n	80012d0 <PIDController_Update+0x178>
    			|| (preSaturationOutput < 0 && error < 0))
 80012b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d50f      	bpl.n	80012e2 <PIDController_Update+0x18a>
 80012c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d508      	bpl.n	80012e2 <PIDController_Update+0x18a>
    		pid->antiWindup = true;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]
 80012d8:	e003      	b.n	80012e2 <PIDController_Update+0x18a>
    }
    else
    	pid->antiWindup = false;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

	// Store error for later use
    pid->prevError = error;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

	// Return controller output
    return pid->out;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	ee07 3a90 	vmov	s15, r3
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09c      	sub	sp, #112	; 0x70
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <Log+0x44>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d014      	beq.n	800133a <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	490c      	ldr	r1, [pc, #48]	; (8001348 <Log+0x48>)
 8001318:	4618      	mov	r0, r3
 800131a:	f00e fedf 	bl	80100dc <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ffcc 	bl	80002c0 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	f107 010c 	add.w	r1, r7, #12
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <Log+0x4c>)
 8001336:	f009 fe4d 	bl	800afd4 <HAL_UART_Transmit>
	}
}
 800133a:	bf00      	nop
 800133c:	3770      	adds	r7, #112	; 0x70
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000020c 	.word	0x2000020c
 8001348:	08015510 	.word	0x08015510
 800134c:	20000ae4 	.word	0x20000ae4

08001350 <TaskController>:
#include "Controller/PID.h"

extern osMutexId DistMutexHandle;

void TaskController(void const *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b6      	sub	sp, #216	; 0xd8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	// Inner loop controllers
	PIDController PID_Thrust;
	PID_Thrust.Kd = 10;
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <TaskController+0x118>)
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.Ki = 10;
 800135e:	4b42      	ldr	r3, [pc, #264]	; (8001468 <TaskController+0x118>)
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PID_Thrust.Kd = 10;
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <TaskController+0x118>)
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.T = 0.01f;
 800136a:	4b40      	ldr	r3, [pc, #256]	; (800146c <TaskController+0x11c>)
 800136c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	PID_Thrust.limMin = 0;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	PID_Thrust.limMax = 30;
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <TaskController+0x120>)
 800137a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	PIDController_Init(&PID_Thrust);
 800137e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff feac 	bl	80010e0 <PIDController_Init>

	PIDController PID_Yaw;
	PID_Yaw.Kd = 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.Ki = 0;
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	677b      	str	r3, [r7, #116]	; 0x74
	PID_Yaw.Kd = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.T = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	67fb      	str	r3, [r7, #124]	; 0x7c
	PID_Yaw.limMin = 0;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PID_Yaw.limMax = 50;
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <TaskController+0x124>)
 80013aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	PIDController_Init(&PID_Yaw);
 80013ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe94 	bl	80010e0 <PIDController_Init>

	PIDController PID_Pitch;
	PID_Pitch.Kd = 0;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.Ki = 0;
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
	PID_Pitch.Kd = 0;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.T = 0;
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
	PID_Pitch.limMin = 0;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	657b      	str	r3, [r7, #84]	; 0x54
	PID_Pitch.limMax = 50;
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <TaskController+0x124>)
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58
	PIDController_Init(&PID_Pitch);
 80013da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe7e 	bl	80010e0 <PIDController_Init>

	PIDController PID_Roll;
	PID_Roll.Kd = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
	PID_Roll.Ki = 0;
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	PID_Roll.Kd = 0;
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	PID_Roll.T = 0;
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
	PID_Roll.limMin = 0;
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
	PID_Roll.limMax = 50;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <TaskController+0x124>)
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController_Init(&PID_Roll);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe68 	bl	80010e0 <PIDController_Init>

	// Infinite loop
	while (1)
	{

		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <TaskController+0x128>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	4618      	mov	r0, r3
 800141a:	f00b fb0f 	bl	800ca3c <osMutexWait>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d118      	bne.n	8001456 <TaskController+0x106>
		{
			Throttle_controlled = PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <TaskController+0x12c>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001480 <TaskController+0x130>
 800142e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001432:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001436:	eef0 0a47 	vmov.f32	s1, s14
 800143a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001484 <TaskController+0x134>
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe8a 	bl	8001158 <PIDController_Update>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <TaskController+0x138>)
 8001454:	801a      	strh	r2, [r3, #0]
		}
		osMutexRelease(DistMutexHandle);
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <TaskController+0x128>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f00b fb3c 	bl	800cad8 <osMutexRelease>


		osDelay(10);
 8001460:	200a      	movs	r0, #10
 8001462:	f00b fabe 	bl	800c9e2 <osDelay>
		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001466:	e7d3      	b.n	8001410 <TaskController+0xc0>
 8001468:	41200000 	.word	0x41200000
 800146c:	3c23d70a 	.word	0x3c23d70a
 8001470:	41f00000 	.word	0x41f00000
 8001474:	42480000 	.word	0x42480000
 8001478:	20000bf4 	.word	0x20000bf4
 800147c:	20000368 	.word	0x20000368
 8001480:	447a0000 	.word	0x447a0000
 8001484:	3e4ccccd 	.word	0x3e4ccccd
 8001488:	2000021a 	.word	0x2000021a

0800148c <DisassembleFloatIntoUint8s>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void DisassembleFloatIntoUint8s(float* n, uint8_t* array, int position)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	memcpy(array+position, n, sizeof(float));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	4413      	add	r3, r2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 80014b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b4:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 80014b8:	af14      	add	r7, sp, #80	; 0x50
 80014ba:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80014be:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014c2:	6018      	str	r0, [r3, #0]
	char UARTstr[512];
	int8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (int8_t)('i');
 80014c4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80014c8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014cc:	2269      	movs	r2, #105	; 0x69
 80014ce:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 80014d0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80014d4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80014d8:	2266      	movs	r2, #102	; 0x66
 80014da:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 80014dc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80014e0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80014e4:	2267      	movs	r2, #103	; 0x67
 80014e6:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	while (1)
	{
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80014e8:	4bb4      	ldr	r3, [pc, #720]	; (80017bc <TaskDiagnostics+0x30c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00b faa3 	bl	800ca3c <osMutexWait>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 80ed 	bne.w	80016d8 <TaskDiagnostics+0x228>
		{
			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_controlled, TIM1->CCR1-50, TIM1->CCR2-50, TIM1->CCR3-50, TIM1->CCR4-50);
 80014fe:	4bb0      	ldr	r3, [pc, #704]	; (80017c0 <TaskDiagnostics+0x310>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	461d      	mov	r5, r3
 8001504:	4baf      	ldr	r3, [pc, #700]	; (80017c4 <TaskDiagnostics+0x314>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 800150c:	4bad      	ldr	r3, [pc, #692]	; (80017c4 <TaskDiagnostics+0x314>)
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	3b32      	subs	r3, #50	; 0x32
 8001512:	4aac      	ldr	r2, [pc, #688]	; (80017c4 <TaskDiagnostics+0x314>)
 8001514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001516:	3a32      	subs	r2, #50	; 0x32
 8001518:	49aa      	ldr	r1, [pc, #680]	; (80017c4 <TaskDiagnostics+0x314>)
 800151a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800151c:	3932      	subs	r1, #50	; 0x32
 800151e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001522:	9102      	str	r1, [sp, #8]
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4623      	mov	r3, r4
 800152a:	462a      	mov	r2, r5
 800152c:	49a6      	ldr	r1, [pc, #664]	; (80017c8 <TaskDiagnostics+0x318>)
 800152e:	f00e fdd5 	bl	80100dc <siprintf>
			SpiIntData[1] = (int8_t)Throttle_in;
 8001532:	4ba6      	ldr	r3, [pc, #664]	; (80017cc <TaskDiagnostics+0x31c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b25a      	sxtb	r2, r3
 8001538:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800153c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001540:	705a      	strb	r2, [r3, #1]
			SpiIntData[2] = (int8_t)TIM1->CCR1-50;
 8001542:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <TaskDiagnostics+0x314>)
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3b32      	subs	r3, #50	; 0x32
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b25a      	sxtb	r2, r3
 800154e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001552:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001556:	709a      	strb	r2, [r3, #2]
			SpiIntData[3] = (int8_t)TIM1->CCR2-50;
 8001558:	4b9a      	ldr	r3, [pc, #616]	; (80017c4 <TaskDiagnostics+0x314>)
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3b32      	subs	r3, #50	; 0x32
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b25a      	sxtb	r2, r3
 8001564:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001568:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800156c:	70da      	strb	r2, [r3, #3]
			SpiIntData[4] = (int8_t)TIM1->CCR3-50;
 800156e:	4b95      	ldr	r3, [pc, #596]	; (80017c4 <TaskDiagnostics+0x314>)
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3b32      	subs	r3, #50	; 0x32
 8001576:	b2db      	uxtb	r3, r3
 8001578:	b25a      	sxtb	r2, r3
 800157a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800157e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001582:	711a      	strb	r2, [r3, #4]
			SpiIntData[5] = (int8_t)TIM1->CCR4-50;
 8001584:	4b8f      	ldr	r3, [pc, #572]	; (80017c4 <TaskDiagnostics+0x314>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3b32      	subs	r3, #50	; 0x32
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b25a      	sxtb	r2, r3
 8001590:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001594:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001598:	715a      	strb	r2, [r3, #5]

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 800159a:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <TaskDiagnostics+0x320>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80015a4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80015a8:	498a      	ldr	r1, [pc, #552]	; (80017d4 <TaskDiagnostics+0x324>)
 80015aa:	f00e fd97 	bl	80100dc <siprintf>
			SpiIntData[6] = (int8_t)Yaw_in;
 80015ae:	4b88      	ldr	r3, [pc, #544]	; (80017d0 <TaskDiagnostics+0x320>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	b25a      	sxtb	r2, r3
 80015b6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80015ba:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015be:	719a      	strb	r2, [r3, #6]

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 80015c0:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <TaskDiagnostics+0x328>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80015ca:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80015ce:	4983      	ldr	r1, [pc, #524]	; (80017dc <TaskDiagnostics+0x32c>)
 80015d0:	f00e fd84 	bl	80100dc <siprintf>
			SpiIntData[7] = (int8_t)Pitch_in;
 80015d4:	4b80      	ldr	r3, [pc, #512]	; (80017d8 <TaskDiagnostics+0x328>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80015e0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015e4:	71da      	strb	r2, [r3, #7]

			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in);
 80015e6:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <TaskDiagnostics+0x330>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80015f0:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80015f4:	497b      	ldr	r1, [pc, #492]	; (80017e4 <TaskDiagnostics+0x334>)
 80015f6:	f00e fd71 	bl	80100dc <siprintf>
			SpiIntData[8] = (int8_t)Roll_in;
 80015fa:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <TaskDiagnostics+0x330>)
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	b25a      	sxtb	r2, r3
 8001602:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001606:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800160a:	721a      	strb	r2, [r3, #8]

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 800160c:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <TaskDiagnostics+0x338>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001614:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001618:	4974      	ldr	r1, [pc, #464]	; (80017ec <TaskDiagnostics+0x33c>)
 800161a:	f00e fd5f 	bl	80100dc <siprintf>
			SpiIntData[9] = (int8_t)SWA;
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <TaskDiagnostics+0x338>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b25a      	sxtb	r2, r3
 8001624:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001628:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800162c:	725a      	strb	r2, [r3, #9]

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <TaskDiagnostics+0x340>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001636:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800163a:	496e      	ldr	r1, [pc, #440]	; (80017f4 <TaskDiagnostics+0x344>)
 800163c:	f00e fd4e 	bl	80100dc <siprintf>
			SpiIntData[10] = (int8_t)SWB;
 8001640:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <TaskDiagnostics+0x340>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b25a      	sxtb	r2, r3
 8001646:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800164a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800164e:	729a      	strb	r2, [r3, #10]

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <TaskDiagnostics+0x348>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001658:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800165c:	4967      	ldr	r1, [pc, #412]	; (80017fc <TaskDiagnostics+0x34c>)
 800165e:	f00e fd3d 	bl	80100dc <siprintf>
			SpiIntData[11] = (int8_t)SWC;
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <TaskDiagnostics+0x348>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b25a      	sxtb	r2, r3
 8001668:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800166c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001670:	72da      	strb	r2, [r3, #11]

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <TaskDiagnostics+0x350>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800167a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800167e:	4961      	ldr	r1, [pc, #388]	; (8001804 <TaskDiagnostics+0x354>)
 8001680:	f00e fd2c 	bl	80100dc <siprintf>
			SpiIntData[12] = (int8_t)SWD;
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <TaskDiagnostics+0x350>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b25a      	sxtb	r2, r3
 800168a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800168e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001692:	731a      	strb	r2, [r3, #12]

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <TaskDiagnostics+0x358>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800169c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80016a0:	495a      	ldr	r1, [pc, #360]	; (800180c <TaskDiagnostics+0x35c>)
 80016a2:	f00e fd1b 	bl	80100dc <siprintf>
			SpiIntData[13] = (int8_t)VRA;
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <TaskDiagnostics+0x358>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80016b0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016b4:	735a      	strb	r2, [r3, #13]

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <TaskDiagnostics+0x360>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80016be:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80016c2:	4954      	ldr	r1, [pc, #336]	; (8001814 <TaskDiagnostics+0x364>)
 80016c4:	f00e fd0a 	bl	80100dc <siprintf>
			SpiIntData[14] = (int8_t)VRB;
 80016c8:	4b51      	ldr	r3, [pc, #324]	; (8001810 <TaskDiagnostics+0x360>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80016d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016d6:	739a      	strb	r2, [r3, #14]
		}
		osMutexRelease(RemoteDataMutexHandle);
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <TaskDiagnostics+0x30c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f00b f9fb 	bl	800cad8 <osMutexRelease>

		if (IsImuAvailable)
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <TaskDiagnostics+0x368>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8126 	beq.w	8001938 <TaskDiagnostics+0x488>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <TaskDiagnostics+0x36c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b f9a1 	bl	800ca3c <osMutexWait>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8116 	bne.w	800192e <TaskDiagnostics+0x47e>
			{
				sprintf(UARTstr,
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <TaskDiagnostics+0x370>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff46 	bl	8000598 <__aeabi_f2d>
 800170c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001710:	4b44      	ldr	r3, [pc, #272]	; (8001824 <TaskDiagnostics+0x374>)
 8001712:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff3f 	bl	8000598 <__aeabi_f2d>
 800171a:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <TaskDiagnostics+0x374>)
 8001720:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff38 	bl	8000598 <__aeabi_f2d>
 8001728:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <TaskDiagnostics+0x374>)
 800172e:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff31 	bl	8000598 <__aeabi_f2d>
 8001736:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <TaskDiagnostics+0x378>)
 800173c:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff2a 	bl	8000598 <__aeabi_f2d>
 8001744:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8001748:	4b37      	ldr	r3, [pc, #220]	; (8001828 <TaskDiagnostics+0x378>)
 800174a:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
 8001752:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <TaskDiagnostics+0x378>)
 8001758:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff1c 	bl	8000598 <__aeabi_f2d>
 8001760:	4682      	mov	sl, r0
 8001762:	468b      	mov	fp, r1
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <TaskDiagnostics+0x37c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff15 	bl	8000598 <__aeabi_f2d>
 800176e:	4680      	mov	r8, r0
 8001770:	4689      	mov	r9, r1
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <TaskDiagnostics+0x380>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ff0e 	bl	8000598 <__aeabi_f2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <TaskDiagnostics+0x384>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ff07 	bl	8000598 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001792:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001796:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800179a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800179e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80017a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80017a6:	ed97 7b00 	vldr	d7, [r7]
 80017aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80017ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80017b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80017b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80017ba:	e03d      	b.n	8001838 <TaskDiagnostics+0x388>
 80017bc:	20000be8 	.word	0x20000be8
 80017c0:	2000021a 	.word	0x2000021a
 80017c4:	40010000 	.word	0x40010000
 80017c8:	08015518 	.word	0x08015518
 80017cc:	20000218 	.word	0x20000218
 80017d0:	2000021c 	.word	0x2000021c
 80017d4:	08015538 	.word	0x08015538
 80017d8:	2000021e 	.word	0x2000021e
 80017dc:	08015544 	.word	0x08015544
 80017e0:	20000220 	.word	0x20000220
 80017e4:	08015554 	.word	0x08015554
 80017e8:	20000222 	.word	0x20000222
 80017ec:	08015564 	.word	0x08015564
 80017f0:	20000224 	.word	0x20000224
 80017f4:	08015570 	.word	0x08015570
 80017f8:	20000226 	.word	0x20000226
 80017fc:	0801557c 	.word	0x0801557c
 8001800:	20000228 	.word	0x20000228
 8001804:	08015588 	.word	0x08015588
 8001808:	2000022a 	.word	0x2000022a
 800180c:	08015594 	.word	0x08015594
 8001810:	2000022c 	.word	0x2000022c
 8001814:	080155a0 	.word	0x080155a0
 8001818:	20000214 	.word	0x20000214
 800181c:	20000bec 	.word	0x20000bec
 8001820:	200002b0 	.word	0x200002b0
 8001824:	200002a4 	.word	0x200002a4
 8001828:	200002b4 	.word	0x200002b4
 800182c:	200002c0 	.word	0x200002c0
 8001830:	200002c4 	.word	0x200002c4
 8001834:	200002c8 	.word	0x200002c8
 8001838:	ed8d 7b06 	vstr	d7, [sp, #24]
 800183c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001840:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001844:	ed97 7b08 	vldr	d7, [r7, #32]
 8001848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800184c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001850:	ed8d 7b00 	vstr	d7, [sp]
 8001854:	460a      	mov	r2, r1
 8001856:	49ba      	ldr	r1, [pc, #744]	; (8001b40 <TaskDiagnostics+0x690>)
 8001858:	f00e fc40 	bl	80100dc <siprintf>
						Roll_measured, Pitch_measured, Yaw_measured);
				DisassembleFloatIntoUint8s(&TempData, SpiFloatData1, 1);
 800185c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001860:	2201      	movs	r2, #1
 8001862:	4619      	mov	r1, r3
 8001864:	48b7      	ldr	r0, [pc, #732]	; (8001b44 <TaskDiagnostics+0x694>)
 8001866:	f7ff fe11 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData, SpiFloatData1, 5);
 800186a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800186e:	2205      	movs	r2, #5
 8001870:	4619      	mov	r1, r3
 8001872:	48b5      	ldr	r0, [pc, #724]	; (8001b48 <TaskDiagnostics+0x698>)
 8001874:	f7ff fe0a 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+1, SpiFloatData1, 9);
 8001878:	48b4      	ldr	r0, [pc, #720]	; (8001b4c <TaskDiagnostics+0x69c>)
 800187a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800187e:	2209      	movs	r2, #9
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff fe03 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+2, SpiFloatData1, 13);
 8001886:	48b2      	ldr	r0, [pc, #712]	; (8001b50 <TaskDiagnostics+0x6a0>)
 8001888:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800188c:	220d      	movs	r2, #13
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff fdfc 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData, SpiFloatData1, 17);
 8001894:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001898:	2211      	movs	r2, #17
 800189a:	4619      	mov	r1, r3
 800189c:	48ad      	ldr	r0, [pc, #692]	; (8001b54 <TaskDiagnostics+0x6a4>)
 800189e:	f7ff fdf5 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+1, SpiFloatData1, 21);
 80018a2:	48ad      	ldr	r0, [pc, #692]	; (8001b58 <TaskDiagnostics+0x6a8>)
 80018a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018a8:	2215      	movs	r2, #21
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fdee 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+2, SpiFloatData1, 25);
 80018b0:	48aa      	ldr	r0, [pc, #680]	; (8001b5c <TaskDiagnostics+0x6ac>)
 80018b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018b6:	2219      	movs	r2, #25
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff fde7 	bl	800148c <DisassembleFloatIntoUint8s>

				sprintf(UARTstr,
 80018be:	4ba8      	ldr	r3, [pc, #672]	; (8001b60 <TaskDiagnostics+0x6b0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe68 	bl	8000598 <__aeabi_f2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	4ba5      	ldr	r3, [pc, #660]	; (8001b64 <TaskDiagnostics+0x6b4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe61 	bl	8000598 <__aeabi_f2d>
 80018d6:	4680      	mov	r8, r0
 80018d8:	4689      	mov	r9, r1
 80018da:	4ba3      	ldr	r3, [pc, #652]	; (8001b68 <TaskDiagnostics+0x6b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe5a 	bl	8000598 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80018ec:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80018f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018f8:	e9cd 4500 	strd	r4, r5, [sp]
 80018fc:	460a      	mov	r2, r1
 80018fe:	499b      	ldr	r1, [pc, #620]	; (8001b6c <TaskDiagnostics+0x6bc>)
 8001900:	f00e fbec 	bl	80100dc <siprintf>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				DisassembleFloatIntoUint8s(&BMP_Temp, SpiFloatData1, 29);
 8001904:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001908:	221d      	movs	r2, #29
 800190a:	4619      	mov	r1, r3
 800190c:	4894      	ldr	r0, [pc, #592]	; (8001b60 <TaskDiagnostics+0x6b0>)
 800190e:	f7ff fdbd 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Pres, SpiFloatData1, 33);
 8001912:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001916:	2221      	movs	r2, #33	; 0x21
 8001918:	4619      	mov	r1, r3
 800191a:	4892      	ldr	r0, [pc, #584]	; (8001b64 <TaskDiagnostics+0x6b4>)
 800191c:	f7ff fdb6 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Alt, SpiFloatData1, 37);
 8001920:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001924:	2225      	movs	r2, #37	; 0x25
 8001926:	4619      	mov	r1, r3
 8001928:	488f      	ldr	r0, [pc, #572]	; (8001b68 <TaskDiagnostics+0x6b8>)
 800192a:	f7ff fdaf 	bl	800148c <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 800192e:	4b90      	ldr	r3, [pc, #576]	; (8001b70 <TaskDiagnostics+0x6c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f00b f8d0 	bl	800cad8 <osMutexRelease>
				DisassembleFloatIntoUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 8001938:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <TaskDiagnostics+0x6c4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d026      	beq.n	800198e <TaskDiagnostics+0x4de>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001940:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <TaskDiagnostics+0x6c8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	4618      	mov	r0, r3
 800194a:	f00b f877 	bl	800ca3c <osMutexWait>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d117      	bne.n	8001984 <TaskDiagnostics+0x4d4>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 8001954:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <TaskDiagnostics+0x6cc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe1d 	bl	8000598 <__aeabi_f2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001966:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800196a:	e9cd 2300 	strd	r2, r3, [sp]
 800196e:	460a      	mov	r2, r1
 8001970:	4983      	ldr	r1, [pc, #524]	; (8001b80 <TaskDiagnostics+0x6d0>)
 8001972:	f00e fbb3 	bl	80100dc <siprintf>
				DisassembleFloatIntoUint8s(&Distance, SpiFloatData1, 57);
 8001976:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800197a:	2239      	movs	r2, #57	; 0x39
 800197c:	4619      	mov	r1, r3
 800197e:	487f      	ldr	r0, [pc, #508]	; (8001b7c <TaskDiagnostics+0x6cc>)
 8001980:	f7ff fd84 	bl	800148c <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8001984:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <TaskDiagnostics+0x6c8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f00b f8a5 	bl	800cad8 <osMutexRelease>
		}

		if (IsGpsAvailable)
 800198e:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <TaskDiagnostics+0x6d4>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8097 	beq.w	8001ac6 <TaskDiagnostics+0x616>
		{
			if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <TaskDiagnostics+0x6d8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b f84b 	bl	800ca3c <osMutexWait>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8087 	bne.w	8001abc <TaskDiagnostics+0x60c>
			{
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
						UARTstr,
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019ae:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019b0:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdf0 	bl	8000598 <__aeabi_f2d>
 80019b8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019be:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019c0:	623b      	str	r3, [r7, #32]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fde6 	bl	8000598 <__aeabi_f2d>
 80019cc:	4680      	mov	r8, r0
 80019ce:	4689      	mov	r9, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019d0:	4b6e      	ldr	r3, [pc, #440]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019d4:	461d      	mov	r5, r3
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019d8:	6a1e      	ldr	r6, [r3, #32]
 80019da:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019de:	61ba      	str	r2, [r7, #24]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdd7 	bl	8000598 <__aeabi_f2d>
 80019ea:	4682      	mov	sl, r0
 80019ec:	468b      	mov	fp, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdd0 	bl	8000598 <__aeabi_f2d>
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 80019f8:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <TaskDiagnostics+0x6dc>)
 80019fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 80019fe:	461c      	mov	r4, r3
 8001a00:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001a04:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a08:	940e      	str	r4, [sp, #56]	; 0x38
 8001a0a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001a0e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	9108      	str	r1, [sp, #32]
 8001a16:	9607      	str	r6, [sp, #28]
 8001a18:	9506      	str	r5, [sp, #24]
 8001a1a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	9102      	str	r1, [sp, #8]
 8001a22:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001a26:	ed8d 7b00 	vstr	d7, [sp]
 8001a2a:	4959      	ldr	r1, [pc, #356]	; (8001b90 <TaskDiagnostics+0x6e0>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00e fb55 	bl	80100dc <siprintf>
				DisassembleFloatIntoUint8s(&GPS.dec_latitude, SpiFloatData2, 1);
 8001a32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a36:	2201      	movs	r2, #1
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4856      	ldr	r0, [pc, #344]	; (8001b94 <TaskDiagnostics+0x6e4>)
 8001a3c:	f7ff fd26 	bl	800148c <DisassembleFloatIntoUint8s>
				SpiIntData[15] = (int8_t)GPS.ns;
 8001a40:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001a42:	7d1b      	ldrb	r3, [r3, #20]
 8001a44:	b25a      	sxtb	r2, r3
 8001a46:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001a4a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a4e:	73da      	strb	r2, [r3, #15]
				DisassembleFloatIntoUint8s(&GPS.dec_longitude, SpiFloatData2, 5);
 8001a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a54:	2205      	movs	r2, #5
 8001a56:	4619      	mov	r1, r3
 8001a58:	484c      	ldr	r0, [pc, #304]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001a5a:	f7ff fd17 	bl	800148c <DisassembleFloatIntoUint8s>
				SpiIntData[16] = (int8_t)GPS.ew;
 8001a5e:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001a60:	7f1b      	ldrb	r3, [r3, #28]
 8001a62:	b25a      	sxtb	r2, r3
 8001a64:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001a68:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a6c:	741a      	strb	r2, [r3, #16]
				SpiIntData[17] = (int8_t)(GPS.fix & 0x000000ff);
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001a78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a7c:	745a      	strb	r2, [r3, #17]
				SpiIntData[18] = (int8_t)(GPS.num_of_satelites & 0x000000ff);
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001a88:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a8c:	749a      	strb	r2, [r3, #18]
				DisassembleFloatIntoUint8s(&GPS.horizontal_dilution_of_precision, SpiFloatData2, 9);
 8001a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a92:	2209      	movs	r2, #9
 8001a94:	4619      	mov	r1, r3
 8001a96:	4840      	ldr	r0, [pc, #256]	; (8001b98 <TaskDiagnostics+0x6e8>)
 8001a98:	f7ff fcf8 	bl	800148c <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&GPS.mean_sea_level_altitude, SpiFloatData2, 13);
 8001a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa0:	220d      	movs	r2, #13
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	483d      	ldr	r0, [pc, #244]	; (8001b9c <TaskDiagnostics+0x6ec>)
 8001aa6:	f7ff fcf1 	bl	800148c <DisassembleFloatIntoUint8s>
				SpiIntData[19] = (int8_t)GPS.altitude_unit;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <TaskDiagnostics+0x6dc>)
 8001aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab0:	b25a      	sxtb	r2, r3
 8001ab2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001ab6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001aba:	74da      	strb	r2, [r3, #19]
			}
			osMutexRelease(GpsDataMutexHandle);
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <TaskDiagnostics+0x6d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b f809 	bl	800cad8 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001ac6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001aca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <TaskDiagnostics+0x6f0>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00e fb03 	bl	80100dc <siprintf>

		// Sending log info
		if (Diag)
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <TaskDiagnostics+0x6f4>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02b      	beq.n	8001b36 <TaskDiagnostics+0x686>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fbec 	bl	80002c0 <strlen>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	482c      	ldr	r0, [pc, #176]	; (8001ba8 <TaskDiagnostics+0x6f8>)
 8001af6:	f009 fa6d 	bl	800afd4 <HAL_UART_Transmit>
			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001afa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	4829      	ldr	r0, [pc, #164]	; (8001bac <TaskDiagnostics+0x6fc>)
 8001b06:	f006 fd80 	bl	800860a <HAL_SPI_Transmit>
			osDelay(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f00a ff69 	bl	800c9e2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001b10:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	4824      	ldr	r0, [pc, #144]	; (8001bac <TaskDiagnostics+0x6fc>)
 8001b1c:	f006 fd75 	bl	800860a <HAL_SPI_Transmit>
			osDelay(10);
 8001b20:	200a      	movs	r0, #10
 8001b22:	f00a ff5e 	bl	800c9e2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001b26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	481e      	ldr	r0, [pc, #120]	; (8001bac <TaskDiagnostics+0x6fc>)
 8001b32:	f006 fd6a 	bl	800860a <HAL_SPI_Transmit>
		}

		osDelay(250);
 8001b36:	20fa      	movs	r0, #250	; 0xfa
 8001b38:	f00a ff53 	bl	800c9e2 <osDelay>
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001b3c:	e4d4      	b.n	80014e8 <TaskDiagnostics+0x38>
 8001b3e:	bf00      	nop
 8001b40:	080155ac 	.word	0x080155ac
 8001b44:	200002b0 	.word	0x200002b0
 8001b48:	200002a4 	.word	0x200002a4
 8001b4c:	200002a8 	.word	0x200002a8
 8001b50:	200002ac 	.word	0x200002ac
 8001b54:	200002b4 	.word	0x200002b4
 8001b58:	200002b8 	.word	0x200002b8
 8001b5c:	200002bc 	.word	0x200002bc
 8001b60:	200002fc 	.word	0x200002fc
 8001b64:	20000300 	.word	0x20000300
 8001b68:	20000304 	.word	0x20000304
 8001b6c:	08015628 	.word	0x08015628
 8001b70:	20000bec 	.word	0x20000bec
 8001b74:	20000216 	.word	0x20000216
 8001b78:	20000bf4 	.word	0x20000bf4
 8001b7c:	20000368 	.word	0x20000368
 8001b80:	0801565c 	.word	0x0801565c
 8001b84:	20000217 	.word	0x20000217
 8001b88:	20000bf0 	.word	0x20000bf0
 8001b8c:	2000040c 	.word	0x2000040c
 8001b90:	08015674 	.word	0x08015674
 8001b94:	20000410 	.word	0x20000410
 8001b98:	20000434 	.word	0x20000434
 8001b9c:	20000438 	.word	0x20000438
 8001ba0:	080156d8 	.word	0x080156d8
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000ae4 	.word	0x20000ae4
 8001bac:	20000874 	.word	0x20000874

08001bb0 <TaskMotor>:

extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;

void TaskMotor(void const *argument)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	485e      	ldr	r0, [pc, #376]	; (8001d34 <TaskMotor+0x184>)
 8001bbc:	f007 fd0c 	bl	80095d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	485c      	ldr	r0, [pc, #368]	; (8001d34 <TaskMotor+0x184>)
 8001bc4:	f007 fd08 	bl	80095d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bc8:	2108      	movs	r1, #8
 8001bca:	485a      	ldr	r0, [pc, #360]	; (8001d34 <TaskMotor+0x184>)
 8001bcc:	f007 fd04 	bl	80095d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001bd0:	210c      	movs	r1, #12
 8001bd2:	4858      	ldr	r0, [pc, #352]	; (8001d34 <TaskMotor+0x184>)
 8001bd4:	f007 fd00 	bl	80095d8 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 8001bd8:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <TaskMotor+0x188>)
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <TaskMotor+0x188>)
 8001be0:	2232      	movs	r2, #50	; 0x32
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8001be4:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <TaskMotor+0x188>)
 8001be6:	2232      	movs	r2, #50	; 0x32
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 8001bea:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <TaskMotor+0x188>)
 8001bec:	2232      	movs	r2, #50	; 0x32
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

	/* Infinite loop */
	while (1)
	{
		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001bf0:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <TaskMotor+0x18c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a ff1f 	bl	800ca3c <osMutexWait>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 808e 	bne.w	8001d22 <TaskMotor+0x172>
		{
			if (SWA < 10)
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <TaskMotor+0x190>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b09      	cmp	r3, #9
 8001c0c:	d806      	bhi.n	8001c1c <TaskMotor+0x6c>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c14:	484b      	ldr	r0, [pc, #300]	; (8001d44 <TaskMotor+0x194>)
 8001c16:	f004 fded 	bl	80067f4 <HAL_GPIO_WritePin>
 8001c1a:	e005      	b.n	8001c28 <TaskMotor+0x78>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4848      	ldr	r0, [pc, #288]	; (8001d44 <TaskMotor+0x194>)
 8001c24:	f004 fde6 	bl	80067f4 <HAL_GPIO_WritePin>

			if (SWB < 10)
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <TaskMotor+0x198>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d803      	bhi.n	8001c38 <TaskMotor+0x88>
				Rotors = false;
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <TaskMotor+0x19c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e002      	b.n	8001c3e <TaskMotor+0x8e>
			else
				Rotors = true;
 8001c38:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <TaskMotor+0x19c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]


			if (SWD < 10)
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <TaskMotor+0x1a0>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d808      	bhi.n	8001c58 <TaskMotor+0xa8>
			{
				ESC1_start_signal = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	733b      	strb	r3, [r7, #12]
 8001c56:	e007      	b.n	8001c68 <TaskMotor+0xb8>
			}
			else
			{
				ESC1_start_signal = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 3;
 8001c64:	2303      	movs	r3, #3
 8001c66:	733b      	strb	r3, [r7, #12]
			}


			// Setting PWM speed
			if (Rotors)
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <TaskMotor+0x19c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d04c      	beq.n	8001d0a <TaskMotor+0x15a>
			{
				TIM1->CCR1 = (uint32_t) ((Throttle_in * (50-(ESC1_start_signal-1)) / 50) + (50+ESC1_start_signal-1));
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <TaskMotor+0x1a4>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	4a35      	ldr	r2, [pc, #212]	; (8001d58 <TaskMotor+0x1a8>)
 8001c82:	fb82 1203 	smull	r1, r2, r2, r3
 8001c86:	1112      	asrs	r2, r2, #4
 8001c88:	17db      	asrs	r3, r3, #31
 8001c8a:	1ad2      	subs	r2, r2, r3
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	3331      	adds	r3, #49	; 0x31
 8001c90:	441a      	add	r2, r3
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <TaskMotor+0x188>)
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) ((Throttle_in * (50-(ESC2_start_signal-1)) / 50) + (50+ESC2_start_signal-1));
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <TaskMotor+0x1a4>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <TaskMotor+0x1a8>)
 8001ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cac:	1112      	asrs	r2, r2, #4
 8001cae:	17db      	asrs	r3, r3, #31
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	3331      	adds	r3, #49	; 0x31
 8001cb6:	441a      	add	r2, r3
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <TaskMotor+0x188>)
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) ((Throttle_in * (50-(ESC3_start_signal-1)) / 50) + (50+ESC3_start_signal-1));
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <TaskMotor+0x1a4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	7b7b      	ldrb	r3, [r7, #13]
 8001cc4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <TaskMotor+0x1a8>)
 8001cce:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd2:	1112      	asrs	r2, r2, #4
 8001cd4:	17db      	asrs	r3, r3, #31
 8001cd6:	1ad2      	subs	r2, r2, r3
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	3331      	adds	r3, #49	; 0x31
 8001cdc:	441a      	add	r2, r3
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <TaskMotor+0x188>)
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) ((Throttle_in * (50-(ESC4_start_signal-1)) / 50) + (50+ESC4_start_signal-1));
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <TaskMotor+0x1a4>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <TaskMotor+0x1a8>)
 8001cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf8:	1112      	asrs	r2, r2, #4
 8001cfa:	17db      	asrs	r3, r3, #31
 8001cfc:	1ad2      	subs	r2, r2, r3
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	3331      	adds	r3, #49	; 0x31
 8001d02:	441a      	add	r2, r3
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <TaskMotor+0x188>)
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
 8001d08:	e00b      	b.n	8001d22 <TaskMotor+0x172>
			}
			else
			{
				TIM1->CCR1 = (uint32_t) (50);
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <TaskMotor+0x188>)
 8001d0c:	2232      	movs	r2, #50	; 0x32
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) (50);
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <TaskMotor+0x188>)
 8001d12:	2232      	movs	r2, #50	; 0x32
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) (50);
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <TaskMotor+0x188>)
 8001d18:	2232      	movs	r2, #50	; 0x32
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) (50);
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <TaskMotor+0x188>)
 8001d1e:	2232      	movs	r2, #50	; 0x32
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <TaskMotor+0x18c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00a fed6 	bl	800cad8 <osMutexRelease>

		osDelay(100);
 8001d2c:	2064      	movs	r0, #100	; 0x64
 8001d2e:	f00a fe58 	bl	800c9e2 <osDelay>
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001d32:	e75d      	b.n	8001bf0 <TaskMotor+0x40>
 8001d34:	2000093c 	.word	0x2000093c
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	20000be8 	.word	0x20000be8
 8001d40:	20000222 	.word	0x20000222
 8001d44:	40021000 	.word	0x40021000
 8001d48:	20000224 	.word	0x20000224
 8001d4c:	20000001 	.word	0x20000001
 8001d50:	20000228 	.word	0x20000228
 8001d54:	20000218 	.word	0x20000218
 8001d58:	51eb851f 	.word	0x51eb851f

08001d5c <TaskPower>:
void TaskPower(void const *argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f00a fe3c 	bl	800c9e2 <osDelay>
	{
 8001d6a:	e7fb      	b.n	8001d64 <TaskPower+0x8>

08001d6c <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	497f      	ldr	r1, [pc, #508]	; (8001f74 <TaskRemote+0x208>)
 8001d78:	487f      	ldr	r0, [pc, #508]	; (8001f78 <TaskRemote+0x20c>)
 8001d7a:	f009 f9f2 	bl	800b162 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	while (1)
	{
		Log("R-RBFS-WS");
 8001d7e:	487f      	ldr	r0, [pc, #508]	; (8001f7c <TaskRemote+0x210>)
 8001d80:	f7ff fabe 	bl	8001300 <Log>
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001d84:	4b7e      	ldr	r3, [pc, #504]	; (8001f80 <TaskRemote+0x214>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00a ff0b 	bl	800cba8 <osSemaphoreWait>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f040 80e8 	bne.w	8001f6a <TaskRemote+0x1fe>
		{
			Log("R-RBFS-WE");
 8001d9a:	487a      	ldr	r0, [pc, #488]	; (8001f84 <TaskRemote+0x218>)
 8001d9c:	f7ff fab0 	bl	8001300 <Log>

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			Log("R-RBM-WS");
 8001da0:	4879      	ldr	r0, [pc, #484]	; (8001f88 <TaskRemote+0x21c>)
 8001da2:	f7ff faad 	bl	8001300 <Log>
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8001da6:	4b79      	ldr	r3, [pc, #484]	; (8001f8c <TaskRemote+0x220>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00a fe44 	bl	800ca3c <osMutexWait>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d138      	bne.n	8001e2c <TaskRemote+0xc0>
			{
				Log("R-RBM-WE");
 8001dba:	4875      	ldr	r0, [pc, #468]	; (8001f90 <TaskRemote+0x224>)
 8001dbc:	f7ff faa0 	bl	8001300 <Log>

				for (int i = 32; i >= 0; i--)
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e024      	b.n	8001e10 <TaskRemote+0xa4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 8001dc6:	4a73      	ldr	r2, [pc, #460]	; (8001f94 <TaskRemote+0x228>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d11a      	bne.n	8001e0a <TaskRemote+0x9e>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <TaskRemote+0x228>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d113      	bne.n	8001e0a <TaskRemote+0x9e>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e00d      	b.n	8001e04 <TaskRemote+0x98>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <TaskRemote+0x228>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	b2d9      	uxtb	r1, r3
 8001df4:	4a68      	ldr	r2, [pc, #416]	; (8001f98 <TaskRemote+0x22c>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	3301      	adds	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b1f      	cmp	r3, #31
 8001e08:	ddee      	ble.n	8001de8 <TaskRemote+0x7c>
				for (int i = 32; i >= 0; i--)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dad7      	bge.n	8001dc6 <TaskRemote+0x5a>
					}
				}

				Log("R-RBM-RS");
 8001e16:	4861      	ldr	r0, [pc, #388]	; (8001f9c <TaskRemote+0x230>)
 8001e18:	f7ff fa72 	bl	8001300 <Log>
				osMutexRelease(RemoteBufferMutexHandle);
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <TaskRemote+0x220>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00a fe59 	bl	800cad8 <osMutexRelease>
				Log("R-RBM-RE");
 8001e26:	485e      	ldr	r0, [pc, #376]	; (8001fa0 <TaskRemote+0x234>)
 8001e28:	f7ff fa6a 	bl	8001300 <Log>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e018      	b.n	8001e64 <TaskRemote+0xf8>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	3303      	adds	r3, #3
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <TaskRemote+0x22c>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4953      	ldr	r1, [pc, #332]	; (8001f98 <TaskRemote+0x22c>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	b299      	uxth	r1, r3
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <TaskRemote+0x238>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	dde3      	ble.n	8001e32 <TaskRemote+0xc6>

			// Setting the speed

			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001e6a:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <TaskRemote+0x23c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00a fde2 	bl	800ca3c <osMutexWait>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d170      	bne.n	8001f60 <TaskRemote+0x1f4>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = (channelValues[THROTTLE_CHANNEL] / 20) - 50;
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <TaskRemote+0x238>)
 8001e80:	889b      	ldrh	r3, [r3, #4]
 8001e82:	4a4a      	ldr	r2, [pc, #296]	; (8001fac <TaskRemote+0x240>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b32      	subs	r3, #50	; 0x32
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <TaskRemote+0x244>)
 8001e92:	801a      	strh	r2, [r3, #0]
				Pitch_in = (channelValues[PITCH_CHANNEL] / 20) - 75;
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <TaskRemote+0x238>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	4a44      	ldr	r2, [pc, #272]	; (8001fac <TaskRemote+0x240>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b4b      	subs	r3, #75	; 0x4b
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <TaskRemote+0x248>)
 8001eaa:	801a      	strh	r2, [r3, #0]
				Roll_in = (channelValues[ROLL_CHANNEL] / 20) - 75;
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <TaskRemote+0x238>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <TaskRemote+0x240>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b4b      	subs	r3, #75	; 0x4b
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <TaskRemote+0x24c>)
 8001ec2:	801a      	strh	r2, [r3, #0]
				Yaw_in = (channelValues[YAW_CHANNEL] / 20) - 75;
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <TaskRemote+0x238>)
 8001ec6:	88db      	ldrh	r3, [r3, #6]
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <TaskRemote+0x240>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b4b      	subs	r3, #75	; 0x4b
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <TaskRemote+0x250>)
 8001eda:	801a      	strh	r2, [r3, #0]
				SWA = (channelValues[SWA_CHANNEL] / 20) - 50;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <TaskRemote+0x238>)
 8001ede:	891b      	ldrh	r3, [r3, #8]
 8001ee0:	4a32      	ldr	r2, [pc, #200]	; (8001fac <TaskRemote+0x240>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b32      	subs	r3, #50	; 0x32
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <TaskRemote+0x254>)
 8001ef0:	801a      	strh	r2, [r3, #0]
				SWB = (channelValues[SWB_CHANNEL] / 20) - 50;
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <TaskRemote+0x238>)
 8001ef4:	895b      	ldrh	r3, [r3, #10]
 8001ef6:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <TaskRemote+0x240>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b32      	subs	r3, #50	; 0x32
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <TaskRemote+0x258>)
 8001f06:	801a      	strh	r2, [r3, #0]
				SWC = (channelValues[SWC_CHANNEL] / 20) - 50;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <TaskRemote+0x238>)
 8001f0a:	899b      	ldrh	r3, [r3, #12]
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <TaskRemote+0x240>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b32      	subs	r3, #50	; 0x32
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <TaskRemote+0x25c>)
 8001f1c:	801a      	strh	r2, [r3, #0]
				SWD = (channelValues[SWD_CHANNEL] / 20) - 50;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <TaskRemote+0x238>)
 8001f20:	89db      	ldrh	r3, [r3, #14]
 8001f22:	4a22      	ldr	r2, [pc, #136]	; (8001fac <TaskRemote+0x240>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b32      	subs	r3, #50	; 0x32
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <TaskRemote+0x260>)
 8001f32:	801a      	strh	r2, [r3, #0]
				VRA = (channelValues[VRA_CHANNEL] / 20) - 50;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <TaskRemote+0x238>)
 8001f36:	8a1b      	ldrh	r3, [r3, #16]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <TaskRemote+0x240>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b32      	subs	r3, #50	; 0x32
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <TaskRemote+0x264>)
 8001f48:	801a      	strh	r2, [r3, #0]
				VRB = (channelValues[VRB_CHANNEL] / 20) - 50;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <TaskRemote+0x238>)
 8001f4c:	8a5b      	ldrh	r3, [r3, #18]
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <TaskRemote+0x240>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b32      	subs	r3, #50	; 0x32
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <TaskRemote+0x268>)
 8001f5e:	801a      	strh	r2, [r3, #0]
				//sprintf(str1, "In: %d\r\n", channelValues[THROTTLE_CHANNEL]);
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			osMutexRelease(RemoteDataMutexHandle);
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <TaskRemote+0x23c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00a fdb7 	bl	800cad8 <osMutexRelease>

			// Signal to the UART2 Callback
			//RemoteBufferInProgress = true;
		}

		osDelay(100);
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f00a fd39 	bl	800c9e2 <osDelay>
		Log("R-RBFS-WS");
 8001f70:	e705      	b.n	8001d7e <TaskRemote+0x12>
 8001f72:	bf00      	nop
 8001f74:	2000036c 	.word	0x2000036c
 8001f78:	20000a5c 	.word	0x20000a5c
 8001f7c:	080156e0 	.word	0x080156e0
 8001f80:	20000c04 	.word	0x20000c04
 8001f84:	080156ec 	.word	0x080156ec
 8001f88:	080156f8 	.word	0x080156f8
 8001f8c:	20000bf8 	.word	0x20000bf8
 8001f90:	08015704 	.word	0x08015704
 8001f94:	200003ac 	.word	0x200003ac
 8001f98:	200003ec 	.word	0x200003ec
 8001f9c:	08015710 	.word	0x08015710
 8001fa0:	0801571c 	.word	0x0801571c
 8001fa4:	2000056c 	.word	0x2000056c
 8001fa8:	20000be8 	.word	0x20000be8
 8001fac:	cccccccd 	.word	0xcccccccd
 8001fb0:	20000218 	.word	0x20000218
 8001fb4:	2000021e 	.word	0x2000021e
 8001fb8:	20000220 	.word	0x20000220
 8001fbc:	2000021c 	.word	0x2000021c
 8001fc0:	20000222 	.word	0x20000222
 8001fc4:	20000224 	.word	0x20000224
 8001fc8:	20000226 	.word	0x20000226
 8001fcc:	20000228 	.word	0x20000228
 8001fd0:	2000022a 	.word	0x2000022a
 8001fd4:	2000022c 	.word	0x2000022c

08001fd8 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while (1)
	{
		// IMU Data
		if (IsImuAvailable)
 8001fe0:	4bab      	ldr	r3, [pc, #684]	; (8002290 <TaskSensorData+0x2b8>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d049      	beq.n	800207c <TaskSensorData+0xa4>
		{
			//Log("SD-IA");

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_calcAttitude(&hspi2, &MPU9250);
 8001fe8:	49aa      	ldr	r1, [pc, #680]	; (8002294 <TaskSensorData+0x2bc>)
 8001fea:	48ab      	ldr	r0, [pc, #684]	; (8002298 <TaskSensorData+0x2c0>)
 8001fec:	f003 fa10 	bl	8005410 <MPU_calcAttitude>

			BMP280_measure(&BMP280);
 8001ff0:	48aa      	ldr	r0, [pc, #680]	; (800229c <TaskSensorData+0x2c4>)
 8001ff2:	f002 fa21 	bl	8004438 <BMP280_measure>

			//Log("SD-IMW-S");
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001ff6:	4baa      	ldr	r3, [pc, #680]	; (80022a0 <TaskSensorData+0x2c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00a fd1c 	bl	800ca3c <osMutexWait>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d133      	bne.n	8002072 <TaskSensorData+0x9a>
			{
				//Log("SD-IMW-E");

				AccData[0] = MPU9250.sensorData.ax;
 800200a:	4ba2      	ldr	r3, [pc, #648]	; (8002294 <TaskSensorData+0x2bc>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4aa5      	ldr	r2, [pc, #660]	; (80022a4 <TaskSensorData+0x2cc>)
 8002010:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002012:	4ba0      	ldr	r3, [pc, #640]	; (8002294 <TaskSensorData+0x2bc>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4aa3      	ldr	r2, [pc, #652]	; (80022a4 <TaskSensorData+0x2cc>)
 8002018:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800201a:	4b9e      	ldr	r3, [pc, #632]	; (8002294 <TaskSensorData+0x2bc>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4aa1      	ldr	r2, [pc, #644]	; (80022a4 <TaskSensorData+0x2cc>)
 8002020:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8002022:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <TaskSensorData+0x2bc>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	4aa0      	ldr	r2, [pc, #640]	; (80022a8 <TaskSensorData+0x2d0>)
 8002028:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 800202a:	4b9a      	ldr	r3, [pc, #616]	; (8002294 <TaskSensorData+0x2bc>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4a9f      	ldr	r2, [pc, #636]	; (80022ac <TaskSensorData+0x2d4>)
 8002030:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 8002032:	4b98      	ldr	r3, [pc, #608]	; (8002294 <TaskSensorData+0x2bc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a9d      	ldr	r2, [pc, #628]	; (80022ac <TaskSensorData+0x2d4>)
 8002038:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 800203a:	4b96      	ldr	r3, [pc, #600]	; (8002294 <TaskSensorData+0x2bc>)
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	4a9b      	ldr	r2, [pc, #620]	; (80022ac <TaskSensorData+0x2d4>)
 8002040:	6093      	str	r3, [r2, #8]
				Roll_measured = MPU9250.attitude.roll;
 8002042:	4b94      	ldr	r3, [pc, #592]	; (8002294 <TaskSensorData+0x2bc>)
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	4a9a      	ldr	r2, [pc, #616]	; (80022b0 <TaskSensorData+0x2d8>)
 8002048:	6013      	str	r3, [r2, #0]
				Pitch_measured = MPU9250.attitude.pitch;
 800204a:	4b92      	ldr	r3, [pc, #584]	; (8002294 <TaskSensorData+0x2bc>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4a99      	ldr	r2, [pc, #612]	; (80022b4 <TaskSensorData+0x2dc>)
 8002050:	6013      	str	r3, [r2, #0]
				Yaw_measured = MPU9250.attitude.yaw;
 8002052:	4b90      	ldr	r3, [pc, #576]	; (8002294 <TaskSensorData+0x2bc>)
 8002054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002056:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <TaskSensorData+0x2e0>)
 8002058:	6013      	str	r3, [r2, #0]

				BMP_Temp = BMP280.measurement.temperature;
 800205a:	4b90      	ldr	r3, [pc, #576]	; (800229c <TaskSensorData+0x2c4>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a97      	ldr	r2, [pc, #604]	; (80022bc <TaskSensorData+0x2e4>)
 8002060:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8002062:	4b8e      	ldr	r3, [pc, #568]	; (800229c <TaskSensorData+0x2c4>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	4a96      	ldr	r2, [pc, #600]	; (80022c0 <TaskSensorData+0x2e8>)
 8002068:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 800206a:	4b8c      	ldr	r3, [pc, #560]	; (800229c <TaskSensorData+0x2c4>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4a95      	ldr	r2, [pc, #596]	; (80022c4 <TaskSensorData+0x2ec>)
 8002070:	6013      	str	r3, [r2, #0]

				//Log("SD-IMR-S");
			}
			osMutexRelease(ImuMutexHandle);
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <TaskSensorData+0x2c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f00a fd2e 	bl	800cad8 <osMutexRelease>
			//Log("SD-IMR-E");
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <TaskSensorData+0x2f0>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80e8 	beq.w	8002256 <TaskSensorData+0x27e>
		{
			//Log("SD-MA");
			//Log("SD-MMW-S");
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002086:	4b91      	ldr	r3, [pc, #580]	; (80022cc <TaskSensorData+0x2f4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
 800208e:	4618      	mov	r0, r3
 8002090:	f00a fcd4 	bl	800ca3c <osMutexWait>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80d8 	bne.w	800224c <TaskSensorData+0x274>
			{
				//Log("SD-MMW-E");

				struct Vector res = HMC5883L_readRaw();
 800209c:	f001 feb0 	bl	8003e00 <HMC5883L_readRaw>
 80020a0:	eef0 6a40 	vmov.f32	s13, s0
 80020a4:	eeb0 7a60 	vmov.f32	s14, s1
 80020a8:	eef0 7a41 	vmov.f32	s15, s2
 80020ac:	edc7 6a03 	vstr	s13, [r7, #12]
 80020b0:	ed87 7a04 	vstr	s14, [r7, #16]
 80020b4:	edc7 7a05 	vstr	s15, [r7, #20]
				MAG_X_RAW = res.XAxis;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a85      	ldr	r2, [pc, #532]	; (80022d0 <TaskSensorData+0x2f8>)
 80020bc:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4a84      	ldr	r2, [pc, #528]	; (80022d4 <TaskSensorData+0x2fc>)
 80020c2:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4a84      	ldr	r2, [pc, #528]	; (80022d8 <TaskSensorData+0x300>)
 80020c8:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 80020ca:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <TaskSensorData+0x2fc>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	d067      	beq.n	80021aa <TaskSensorData+0x1d2>
				{
					if (MAG_Y_RAW > 0)
 80020da:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <TaskSensorData+0x2fc>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	dd2b      	ble.n	8002142 <TaskSensorData+0x16a>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <TaskSensorData+0x2f8>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <TaskSensorData+0x2fc>)
 80020f2:	ed93 7a00 	vldr	s14, [r3]
 80020f6:	eef0 0a47 	vmov.f32	s1, s14
 80020fa:	eeb0 0a67 	vmov.f32	s0, s15
 80020fe:	f012 f9b3 	bl	8014468 <atan2f>
 8002102:	eef0 7a40 	vmov.f32	s15, s0
 8002106:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80022dc <TaskSensorData+0x304>
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	ee17 0a90 	vmov	r0, s15
 8002112:	f7fe fa41 	bl	8000598 <__aeabi_f2d>
 8002116:	a35a      	add	r3, pc, #360	; (adr r3, 8002280 <TaskSensorData+0x2a8>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fbbe 	bl	800089c <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	496d      	ldr	r1, [pc, #436]	; (80022e0 <TaskSensorData+0x308>)
 800212a:	f7fe f8d5 	bl	80002d8 <__aeabi_dsub>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fd7f 	bl	8000c38 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <TaskSensorData+0x30c>)
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e053      	b.n	80021ea <TaskSensorData+0x212>
					else if (MAG_Y_RAW < 0)
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <TaskSensorData+0x2fc>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	d54b      	bpl.n	80021ea <TaskSensorData+0x212>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <TaskSensorData+0x2f8>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <TaskSensorData+0x2fc>)
 800215a:	ed93 7a00 	vldr	s14, [r3]
 800215e:	eef0 0a47 	vmov.f32	s1, s14
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	f012 f97f 	bl	8014468 <atan2f>
 800216a:	eef0 7a40 	vmov.f32	s15, s0
 800216e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80022dc <TaskSensorData+0x304>
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	ee17 0a90 	vmov	r0, s15
 800217a:	f7fe fa0d 	bl	8000598 <__aeabi_f2d>
 800217e:	a340      	add	r3, pc, #256	; (adr r3, 8002280 <TaskSensorData+0x2a8>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fb8a 	bl	800089c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	a13e      	add	r1, pc, #248	; (adr r1, 8002288 <TaskSensorData+0x2b0>)
 800218e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002192:	f7fe f8a1 	bl	80002d8 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fd4b 	bl	8000c38 <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <TaskSensorData+0x30c>)
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e01f      	b.n	80021ea <TaskSensorData+0x212>
				}
				else if (MAG_Y_RAW == 0)
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <TaskSensorData+0x2fc>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	d117      	bne.n	80021ea <TaskSensorData+0x212>
				{
					if (MAG_X_RAW > 0)
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <TaskSensorData+0x2f8>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	dd04      	ble.n	80021d4 <TaskSensorData+0x1fc>
						MAG_dir = 0.0f;
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <TaskSensorData+0x30c>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e00a      	b.n	80021ea <TaskSensorData+0x212>
					else if (MAG_X_RAW < 0)
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <TaskSensorData+0x2f8>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	d502      	bpl.n	80021ea <TaskSensorData+0x212>
						MAG_dir = 180.0f;
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <TaskSensorData+0x30c>)
 80021e6:	4a40      	ldr	r2, [pc, #256]	; (80022e8 <TaskSensorData+0x310>)
 80021e8:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <TaskSensorData+0x30c>)
 80021ec:	ed93 7a00 	vldr	s14, [r3]
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <TaskSensorData+0x314>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <TaskSensorData+0x30c>)
 80021fc:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <TaskSensorData+0x30c>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d509      	bpl.n	8002224 <TaskSensorData+0x24c>
					MAG_dir += 360.0f;
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <TaskSensorData+0x30c>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80022f0 <TaskSensorData+0x318>
 800221a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <TaskSensorData+0x30c>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002224:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <TaskSensorData+0x30c>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022f0 <TaskSensorData+0x318>
 800222e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	dd09      	ble.n	800224c <TaskSensorData+0x274>
					MAG_dir -= 360.0f;
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <TaskSensorData+0x30c>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022f0 <TaskSensorData+0x318>
 8002242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <TaskSensorData+0x30c>)
 8002248:	edc3 7a00 	vstr	s15, [r3]

				//Log("SD-MMR-S");
			}
			osMutexRelease(MagnMutexHandle);
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <TaskSensorData+0x2f4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f00a fc41 	bl	800cad8 <osMutexRelease>
			//Log("SD-MMR-E");
		}

		// Distance Data
		if (IsDistAvailable)
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <TaskSensorData+0x31c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d076      	beq.n	800234c <TaskSensorData+0x374>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <TaskSensorData+0x320>)
 8002260:	7d1b      	ldrb	r3, [r3, #20]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d047      	beq.n	80022fc <TaskSensorData+0x324>
			{
				HCSR04_Trigger(&HCSR04);
 800226c:	4822      	ldr	r0, [pc, #136]	; (80022f8 <TaskSensorData+0x320>)
 800226e:	f003 fb95 	bl	800599c <HCSR04_Trigger>
				HCSR04.Triggered = true;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <TaskSensorData+0x320>)
 8002274:	2201      	movs	r2, #1
 8002276:	751a      	strb	r2, [r3, #20]
 8002278:	e068      	b.n	800234c <TaskSensorData+0x374>
 800227a:	bf00      	nop
 800227c:	f3af 8000 	nop.w
 8002280:	54442d18 	.word	0x54442d18
 8002284:	400921fb 	.word	0x400921fb
 8002288:	00000000 	.word	0x00000000
 800228c:	4070e000 	.word	0x4070e000
 8002290:	20000214 	.word	0x20000214
 8002294:	20000230 	.word	0x20000230
 8002298:	200008d8 	.word	0x200008d8
 800229c:	200002cc 	.word	0x200002cc
 80022a0:	20000bec 	.word	0x20000bec
 80022a4:	200002a4 	.word	0x200002a4
 80022a8:	200002b0 	.word	0x200002b0
 80022ac:	200002b4 	.word	0x200002b4
 80022b0:	200002c0 	.word	0x200002c0
 80022b4:	200002c4 	.word	0x200002c4
 80022b8:	200002c8 	.word	0x200002c8
 80022bc:	200002fc 	.word	0x200002fc
 80022c0:	20000300 	.word	0x20000300
 80022c4:	20000304 	.word	0x20000304
 80022c8:	20000215 	.word	0x20000215
 80022cc:	20000be4 	.word	0x20000be4
 80022d0:	20000320 	.word	0x20000320
 80022d4:	20000324 	.word	0x20000324
 80022d8:	20000328 	.word	0x20000328
 80022dc:	43340000 	.word	0x43340000
 80022e0:	40568000 	.word	0x40568000
 80022e4:	2000032c 	.word	0x2000032c
 80022e8:	43340000 	.word	0x43340000
 80022ec:	20000004 	.word	0x20000004
 80022f0:	43b40000 	.word	0x43b40000
 80022f4:	20000216 	.word	0x20000216
 80022f8:	20000330 	.word	0x20000330
			}
			else if (HCSR04.Triggered)
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <TaskSensorData+0x3e4>)
 80022fe:	7d1b      	ldrb	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <TaskSensorData+0x374>
			{
				//Log("SD-DSW-S");
				if (osSemaphoreWait(DistSemaphoreHandle, osWaitForever) == osOK)
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <TaskSensorData+0x3e8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	4618      	mov	r0, r3
 800230e:	f00a fc4b 	bl	800cba8 <osSemaphoreWait>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d119      	bne.n	800234c <TaskSensorData+0x374>
				{
					//Log("SD-DSW-E");
					//Log("SD-DMW-S");
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <TaskSensorData+0x3ec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	4618      	mov	r0, r3
 8002322:	f00a fb8b 	bl	800ca3c <osMutexWait>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <TaskSensorData+0x364>
					{
						//Log("SD-DMW-E");

						Distance = HCSR04_Read(&HCSR04);
 800232c:	4823      	ldr	r0, [pc, #140]	; (80023bc <TaskSensorData+0x3e4>)
 800232e:	f003 fb50 	bl	80059d2 <HCSR04_Read>
 8002332:	eef0 7a40 	vmov.f32	s15, s0
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <TaskSensorData+0x3f0>)
 8002338:	edc3 7a00 	vstr	s15, [r3]

						//Log("SD-DMR-S");
					}
					osMutexRelease(DistMutexHandle);
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <TaskSensorData+0x3ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f00a fbc9 	bl	800cad8 <osMutexRelease>
					//Log("SD-DMR-E");

					HCSR04.Triggered = false;
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <TaskSensorData+0x3e4>)
 8002348:	2200      	movs	r2, #0
 800234a:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <TaskSensorData+0x3f4>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02e      	beq.n	80023b2 <TaskSensorData+0x3da>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <TaskSensorData+0x3f8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	4618      	mov	r0, r3
 800235e:	f00a fc23 	bl	800cba8 <osSemaphoreWait>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d124      	bne.n	80023b2 <TaskSensorData+0x3da>
			{
				if (ProcessGPSPackageBuffer)
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <TaskSensorData+0x3fc>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01f      	beq.n	80023b2 <TaskSensorData+0x3da>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <TaskSensorData+0x400>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f04f 31ff 	mov.w	r1, #4294967295
 800237a:	4618      	mov	r0, r3
 800237c:	f00a fb5e 	bl	800ca3c <osMutexWait>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <TaskSensorData+0x3ca>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 8002386:	4815      	ldr	r0, [pc, #84]	; (80023dc <TaskSensorData+0x404>)
 8002388:	f001 fb6a 	bl	8003a60 <GPS_validate>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <TaskSensorData+0x3c0>
							GPS_parse((char*) GPSPackageBuffer);
 8002392:	4812      	ldr	r0, [pc, #72]	; (80023dc <TaskSensorData+0x404>)
 8002394:	f001 fbc6 	bl	8003b24 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	2100      	movs	r1, #0
 800239c:	480f      	ldr	r0, [pc, #60]	; (80023dc <TaskSensorData+0x404>)
 800239e:	f00d ff2e 	bl	80101fe <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <TaskSensorData+0x400>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f00a fb96 	bl	800cad8 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <TaskSensorData+0x3fc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		osDelay(5);
 80023b2:	2005      	movs	r0, #5
 80023b4:	f00a fb15 	bl	800c9e2 <osDelay>
		if (IsImuAvailable)
 80023b8:	e612      	b.n	8001fe0 <TaskSensorData+0x8>
 80023ba:	bf00      	nop
 80023bc:	20000330 	.word	0x20000330
 80023c0:	20000bfc 	.word	0x20000bfc
 80023c4:	20000bf4 	.word	0x20000bf4
 80023c8:	20000368 	.word	0x20000368
 80023cc:	20000217 	.word	0x20000217
 80023d0:	20000c00 	.word	0x20000c00
 80023d4:	2000056b 	.word	0x2000056b
 80023d8:	20000bf0 	.word	0x20000bf0
 80023dc:	2000046c 	.word	0x2000046c

080023e0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <vApplicationGetIdleTaskMemory+0x2c>)
 80023f0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <vApplicationGetIdleTaskMemory+0x30>)
 80023f6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000580 	.word	0x20000580
 8002410:	20000620 	.word	0x20000620

08002414 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_UART_RxCpltCallback+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d130      	bne.n	8002486 <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8002424:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_UART_RxCpltCallback+0x118>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a40      	ldr	r2, [pc, #256]	; (800252c <HAL_UART_RxCpltCallback+0x118>)
 800242c:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_UART_RxCpltCallback+0x11c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00a fb01 	bl	800ca3c <osMutexWait>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11c      	bne.n	800247a <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e00c      	b.n	8002460 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 8002446:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_UART_RxCpltCallback+0x120>)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2d9      	uxtb	r1, r3
 8002450:	4a39      	ldr	r2, [pc, #228]	; (8002538 <HAL_UART_RxCpltCallback+0x124>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	460a      	mov	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b3f      	cmp	r3, #63	; 0x3f
 8002464:	ddef      	ble.n	8002446 <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_UART_RxCpltCallback+0x11c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f00a fb34 	bl	800cad8 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_UART_RxCpltCallback+0x128>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f00a fbe5 	bl	800cc44 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	492d      	ldr	r1, [pc, #180]	; (8002534 <HAL_UART_RxCpltCallback+0x120>)
 800247e:	482a      	ldr	r0, [pc, #168]	; (8002528 <HAL_UART_RxCpltCallback+0x114>)
 8002480:	f008 fe2b 	bl	800b0da <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 8002484:	e04b      	b.n	800251e <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_UART_RxCpltCallback+0x12c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d147      	bne.n	800251e <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d104      	bne.n	80024a2 <HAL_UART_RxCpltCallback+0x8e>
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_UART_RxCpltCallback+0x134>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b24      	cmp	r3, #36	; 0x24
 80024a0:	d013      	beq.n	80024ca <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d104      	bne.n	80024b6 <HAL_UART_RxCpltCallback+0xa2>
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_UART_RxCpltCallback+0x134>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b47      	cmp	r3, #71	; 0x47
 80024b4:	d009      	beq.n	80024ca <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d926      	bls.n	800250e <HAL_UART_RxCpltCallback+0xfa>
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2bff      	cmp	r3, #255	; 0xff
 80024c8:	d021      	beq.n	800250e <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_UART_RxCpltCallback+0x134>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_UART_RxCpltCallback+0x138>)
 80024da:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2bfd      	cmp	r3, #253	; 0xfd
 80024e4:	d807      	bhi.n	80024f6 <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024f2:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 80024f4:	e00e      	b.n	8002514 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_UART_RxCpltCallback+0x13c>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_UART_RxCpltCallback+0x140>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f00a fb9c 	bl	800cc44 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 800250c:	e002      	b.n	8002514 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_UART_RxCpltCallback+0x130>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8002514:	2201      	movs	r2, #1
 8002516:	490c      	ldr	r1, [pc, #48]	; (8002548 <HAL_UART_RxCpltCallback+0x134>)
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_UART_RxCpltCallback+0x12c>)
 800251a:	f008 fe22 	bl	800b162 <HAL_UART_Receive_DMA>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000a5c 	.word	0x20000a5c
 800252c:	20000210 	.word	0x20000210
 8002530:	20000bf8 	.word	0x20000bf8
 8002534:	2000036c 	.word	0x2000036c
 8002538:	200003ac 	.word	0x200003ac
 800253c:	20000c04 	.word	0x20000c04
 8002540:	200009d4 	.word	0x200009d4
 8002544:	20000469 	.word	0x20000469
 8002548:	20000468 	.word	0x20000468
 800254c:	2000046c 	.word	0x2000046c
 8002550:	2000056b 	.word	0x2000056b
 8002554:	20000c00 	.word	0x20000c00

08002558 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_UART_ErrorCallback+0x98>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d11c      	bne.n	80025a2 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03a      	beq.n	80025e8 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	491d      	ldr	r1, [pc, #116]	; (80025f4 <HAL_UART_ErrorCallback+0x9c>)
 800257e:	4618      	mov	r0, r3
 8002580:	f00d fdac 	bl	80100dc <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd fe99 	bl	80002c0 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	f107 0108 	add.w	r1, r7, #8
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	4817      	ldr	r0, [pc, #92]	; (80025f8 <HAL_UART_ErrorCallback+0xa0>)
 800259c:	f008 fd1a 	bl	800afd4 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 80025a0:	e022      	b.n	80025e8 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_UART_ErrorCallback+0xa4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d11e      	bne.n	80025e8 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d019      	beq.n	80025e8 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_UART_ErrorCallback+0xa8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	490f      	ldr	r1, [pc, #60]	; (8002604 <HAL_UART_ErrorCallback+0xac>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00d fd88 	bl	80100dc <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe75 	bl	80002c0 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29a      	uxth	r2, r3
 80025da:	f107 0108 	add.w	r1, r7, #8
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_UART_ErrorCallback+0xa0>)
 80025e4:	f008 fcf6 	bl	800afd4 <HAL_UART_Transmit>
}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000a5c 	.word	0x20000a5c
 80025f4:	08015728 	.word	0x08015728
 80025f8:	20000ae4 	.word	0x20000ae4
 80025fc:	200009d4 	.word	0x200009d4
 8002600:	20000000 	.word	0x20000000
 8002604:	08015744 	.word	0x08015744

08002608 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x20>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4804      	ldr	r0, [pc, #16]	; (800262c <HAL_TIM_IC_CaptureCallback+0x24>)
 800261c:	f003 f878 	bl	8005710 <HCSR04_TMR_IC_ISR>
	}
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000988 	.word	0x20000988
 800262c:	20000330 	.word	0x20000330

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b0bc      	sub	sp, #240	; 0xf0
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002636:	f003 fa04 	bl	8005a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263a:	f000 f9b7 	bl	80029ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263e:	f000 fcb7 	bl	8002fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002642:	f000 fc97 	bl	8002f74 <MX_DMA_Init>
  MX_SPI1_Init();
 8002646:	f000 fa5f 	bl	8002b08 <MX_SPI1_Init>
  MX_SPI2_Init();
 800264a:	f000 fa9b 	bl	8002b84 <MX_SPI2_Init>
  MX_TIM1_Init();
 800264e:	f000 fad7 	bl	8002c00 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002652:	f000 fba7 	bl	8002da4 <MX_TIM3_Init>
  MX_UART4_Init();
 8002656:	f000 fbf9 	bl	8002e4c <MX_UART4_Init>
  MX_USART2_UART_Init();
 800265a:	f000 fc27 	bl	8002eac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800265e:	f000 fa13 	bl	8002a88 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002662:	f000 fc57 	bl	8002f14 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 8002666:	49b4      	ldr	r1, [pc, #720]	; (8002938 <main+0x308>)
 8002668:	48b4      	ldr	r0, [pc, #720]	; (800293c <main+0x30c>)
 800266a:	f002 fb7d 	bl	8004d68 <MPU_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <main+0x5a>
 8002674:	49b2      	ldr	r1, [pc, #712]	; (8002940 <main+0x310>)
 8002676:	48b1      	ldr	r0, [pc, #708]	; (800293c <main+0x30c>)
 8002678:	f001 fd2a 	bl	80040d0 <BMP280_initialize>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <main+0x5a>
  		IsImuAvailable = true;
 8002682:	4bb0      	ldr	r3, [pc, #704]	; (8002944 <main+0x314>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e002      	b.n	8002690 <main+0x60>
  	else
  		IsImuAvailable = false;
 800268a:	4bae      	ldr	r3, [pc, #696]	; (8002944 <main+0x314>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 8002690:	f001 fba0 	bl	8003dd4 <HMC5883L_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <main+0x72>
  		IsMagnAvailable = true;
 800269a:	4bab      	ldr	r3, [pc, #684]	; (8002948 <main+0x318>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e002      	b.n	80026a8 <main+0x78>
  	else
  		IsMagnAvailable = false;
 80026a2:	4ba9      	ldr	r3, [pc, #676]	; (8002948 <main+0x318>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80026a8:	49a8      	ldr	r1, [pc, #672]	; (800294c <main+0x31c>)
 80026aa:	48a9      	ldr	r0, [pc, #676]	; (8002950 <main+0x320>)
 80026ac:	f002 ffe2 	bl	8005674 <HCSR04_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <main+0x8e>
  		IsDistAvailable = true;
 80026b6:	4ba7      	ldr	r3, [pc, #668]	; (8002954 <main+0x324>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e002      	b.n	80026c4 <main+0x94>
  	else
  		IsDistAvailable = false;
 80026be:	4ba5      	ldr	r3, [pc, #660]	; (8002954 <main+0x324>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 80026d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00a f998 	bl	800ca0a <osMutexCreate>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a9e      	ldr	r2, [pc, #632]	; (8002958 <main+0x328>)
 80026de:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 80026ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00a f98a 	bl	800ca0a <osMutexCreate>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a98      	ldr	r2, [pc, #608]	; (800295c <main+0x32c>)
 80026fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 8002708:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800270c:	4618      	mov	r0, r3
 800270e:	f00a f97c 	bl	800ca0a <osMutexCreate>
 8002712:	4603      	mov	r3, r0
 8002714:	4a92      	ldr	r2, [pc, #584]	; (8002960 <main+0x330>)
 8002716:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002724:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002728:	4618      	mov	r0, r3
 800272a:	f00a f96e 	bl	800ca0a <osMutexCreate>
 800272e:	4603      	mov	r3, r0
 8002730:	4a8c      	ldr	r2, [pc, #560]	; (8002964 <main+0x334>)
 8002732:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8002740:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002744:	4618      	mov	r0, r3
 8002746:	f00a f960 	bl	800ca0a <osMutexCreate>
 800274a:	4603      	mov	r3, r0
 800274c:	4a86      	ldr	r2, [pc, #536]	; (8002968 <main+0x338>)
 800274e:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 800275c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002760:	4618      	mov	r0, r3
 8002762:	f00a f952 	bl	800ca0a <osMutexCreate>
 8002766:	4603      	mov	r3, r0
 8002768:	4a80      	ldr	r2, [pc, #512]	; (800296c <main+0x33c>)
 800276a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 800276c:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <main+0x328>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f00a f9b1 	bl	800cad8 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 8002776:	4b79      	ldr	r3, [pc, #484]	; (800295c <main+0x32c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f00a f9ac 	bl	800cad8 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 8002780:	4b77      	ldr	r3, [pc, #476]	; (8002960 <main+0x330>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f00a f9a7 	bl	800cad8 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <main+0x334>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f00a f9a2 	bl	800cad8 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <main+0x33c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f00a f99d 	bl	800cad8 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 80027aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00a f9c7 	bl	800cb44 <osSemaphoreCreate>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a6d      	ldr	r2, [pc, #436]	; (8002970 <main+0x340>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 80027c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00a f9b8 	bl	800cb44 <osSemaphoreCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a67      	ldr	r2, [pc, #412]	; (8002974 <main+0x344>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 80027e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f00a f9a9 	bl	800cb44 <osSemaphoreCreate>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a60      	ldr	r2, [pc, #384]	; (8002978 <main+0x348>)
 80027f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <main+0x340>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a fa57 	bl	800ccb0 <osSemaphoreGetCount>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <main+0x1e6>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <main+0x340>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	4618      	mov	r0, r3
 8002812:	f00a f9c9 	bl	800cba8 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8002816:	4b57      	ldr	r3, [pc, #348]	; (8002974 <main+0x344>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f00a fa48 	bl	800ccb0 <osSemaphoreGetCount>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d106      	bne.n	8002834 <main+0x204>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <main+0x344>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f04f 31ff 	mov.w	r1, #4294967295
 800282e:	4618      	mov	r0, r3
 8002830:	f00a f9ba 	bl	800cba8 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <main+0x348>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fa39 	bl	800ccb0 <osSemaphoreGetCount>
 800283e:	4603      	mov	r3, r0
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <main+0x222>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <main+0x348>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	4618      	mov	r0, r3
 800284e:	f00a f9ab 	bl	800cba8 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityRealtime, 0, 512);
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <main+0x34c>)
 8002854:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002858:	461d      	mov	r5, r3
 800285a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800285c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 8002866:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f00a f86c 	bl	800c94a <osThreadCreate>
 8002872:	4603      	mov	r3, r0
 8002874:	4a42      	ldr	r2, [pc, #264]	; (8002980 <main+0x350>)
 8002876:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <main+0x354>)
 800287a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800287e:	461d      	mov	r5, r3
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 800288c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f00a f859 	bl	800c94a <osThreadCreate>
 8002898:	4603      	mov	r3, r0
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <main+0x358>)
 800289c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityHigh, 0, 512);
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <main+0x35c>)
 80028a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80028a4:	461d      	mov	r5, r3
 80028a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 80028b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f00a f846 	bl	800c94a <osThreadCreate>
 80028be:	4603      	mov	r3, r0
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <main+0x360>)
 80028c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 80028c4:	4b33      	ldr	r3, [pc, #204]	; (8002994 <main+0x364>)
 80028c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80028ca:	461d      	mov	r5, r3
 80028cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 80028d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f00a f833 	bl	800c94a <osThreadCreate>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a2c      	ldr	r2, [pc, #176]	; (8002998 <main+0x368>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <main+0x36c>)
 80028ec:	f107 041c 	add.w	r4, r7, #28
 80028f0:	461d      	mov	r5, r3
 80028f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f00a f820 	bl	800c94a <osThreadCreate>
 800290a:	4603      	mov	r3, r0
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <main+0x370>)
 800290e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <main+0x374>)
 8002912:	463c      	mov	r4, r7
 8002914:	461d      	mov	r5, r3
 8002916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800291e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002922:	463b      	mov	r3, r7
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f00a f80f 	bl	800c94a <osThreadCreate>
 800292c:	4603      	mov	r3, r0
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <main+0x378>)
 8002930:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002932:	f00a f803 	bl	800c93c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002936:	e7fe      	b.n	8002936 <main+0x306>
 8002938:	20000230 	.word	0x20000230
 800293c:	200008d8 	.word	0x200008d8
 8002940:	200002cc 	.word	0x200002cc
 8002944:	20000214 	.word	0x20000214
 8002948:	20000215 	.word	0x20000215
 800294c:	20000988 	.word	0x20000988
 8002950:	20000330 	.word	0x20000330
 8002954:	20000216 	.word	0x20000216
 8002958:	20000be4 	.word	0x20000be4
 800295c:	20000be8 	.word	0x20000be8
 8002960:	20000bec 	.word	0x20000bec
 8002964:	20000bf0 	.word	0x20000bf0
 8002968:	20000bf4 	.word	0x20000bf4
 800296c:	20000bf8 	.word	0x20000bf8
 8002970:	20000bfc 	.word	0x20000bfc
 8002974:	20000c00 	.word	0x20000c00
 8002978:	20000c04 	.word	0x20000c04
 800297c:	08015770 	.word	0x08015770
 8002980:	20000bcc 	.word	0x20000bcc
 8002984:	0801579c 	.word	0x0801579c
 8002988:	20000bd0 	.word	0x20000bd0
 800298c:	080157c4 	.word	0x080157c4
 8002990:	20000bd4 	.word	0x20000bd4
 8002994:	080157ec 	.word	0x080157ec
 8002998:	20000bd8 	.word	0x20000bd8
 800299c:	08015814 	.word	0x08015814
 80029a0:	20000bdc 	.word	0x20000bdc
 80029a4:	08015840 	.word	0x08015840
 80029a8:	20000be0 	.word	0x20000be0

080029ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b094      	sub	sp, #80	; 0x50
 80029b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	2230      	movs	r2, #48	; 0x30
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00d fc1f 	bl	80101fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <SystemClock_Config+0xd4>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <SystemClock_Config+0xd4>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <SystemClock_Config+0xd4>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <SystemClock_Config+0xd8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029f0:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <SystemClock_Config+0xd8>)
 80029f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <SystemClock_Config+0xd8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a10:	2302      	movs	r3, #2
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a18:	2310      	movs	r3, #16
 8002a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002a1c:	23d8      	movs	r3, #216	; 0xd8
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a20:	2302      	movs	r3, #2
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a24:	2302      	movs	r3, #2
 8002a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a28:	f107 0320 	add.w	r3, r7, #32
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 fd3b 	bl	80074a8 <HAL_RCC_OscConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a38:	f000 fba3 	bl	8003182 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a3c:	f004 fce4 	bl	8007408 <HAL_PWREx_EnableOverDrive>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a46:	f000 fb9c 	bl	8003182 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	2103      	movs	r1, #3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 ffc2 	bl	80079f0 <HAL_RCC_ClockConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a72:	f000 fb86 	bl	8003182 <Error_Handler>
  }
}
 8002a76:	bf00      	nop
 8002a78:	3750      	adds	r7, #80	; 0x50
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000

08002a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <MX_I2C1_Init+0x74>)
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20808DD4;
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <MX_I2C1_Init+0x74>)
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <MX_I2C1_Init+0x7c>)
 8002a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <MX_I2C1_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <MX_I2C1_Init+0x74>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MX_I2C1_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <MX_I2C1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <MX_I2C1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_I2C1_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <MX_I2C1_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac2:	480e      	ldr	r0, [pc, #56]	; (8002afc <MX_I2C1_Init+0x74>)
 8002ac4:	f003 feb0 	bl	8006828 <HAL_I2C_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ace:	f000 fb58 	bl	8003182 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <MX_I2C1_Init+0x74>)
 8002ad6:	f004 fbff 	bl	80072d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ae0:	f000 fb4f 	bl	8003182 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_I2C1_Init+0x74>)
 8002ae8:	f004 fc41 	bl	800736e <HAL_I2CEx_ConfigDigitalFilter>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002af2:	f000 fb46 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000820 	.word	0x20000820
 8002b00:	40005400 	.word	0x40005400
 8002b04:	20808dd4 	.word	0x20808dd4

08002b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <MX_SPI1_Init+0x78>)
 8002b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b3e:	2238      	movs	r2, #56	; 0x38
 8002b40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b62:	2208      	movs	r2, #8
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_SPI1_Init+0x74>)
 8002b68:	f005 fca4 	bl	80084b4 <HAL_SPI_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b72:	f000 fb06 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000874 	.word	0x20000874
 8002b80:	40013000 	.word	0x40013000

08002b84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <MX_SPI2_Init+0x78>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002b9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ba2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bba:	2208      	movs	r2, #8
 8002bbc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_SPI2_Init+0x74>)
 8002be4:	f005 fc66 	bl	80084b4 <HAL_SPI_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002bee:	f000 fac8 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200008d8 	.word	0x200008d8
 8002bfc:	40003800 	.word	0x40003800

08002c00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b09a      	sub	sp, #104	; 0x68
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
 8002c30:	615a      	str	r2, [r3, #20]
 8002c32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	222c      	movs	r2, #44	; 0x2c
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f00d fadf 	bl	80101fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c40:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c42:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <MX_TIM1_Init+0x1a0>)
 8002c44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 8002c46:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c48:	f640 026f 	movw	r2, #2159	; 0x86f
 8002c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c62:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c68:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c6e:	484b      	ldr	r0, [pc, #300]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c70:	f006 fb80 	bl	8009374 <HAL_TIM_Base_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002c7a:	f000 fa82 	bl	8003182 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4844      	ldr	r0, [pc, #272]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c8c:	f007 fa16 	bl	800a0bc <HAL_TIM_ConfigClockSource>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002c96:	f000 fa74 	bl	8003182 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c9a:	4840      	ldr	r0, [pc, #256]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002c9c:	f006 fc3a 	bl	8009514 <HAL_TIM_PWM_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002ca6:	f000 fa6c 	bl	8003182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4837      	ldr	r0, [pc, #220]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002cbe:	f008 f811 	bl	800ace4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002cc8:	f000 fa5b 	bl	8003182 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ccc:	2360      	movs	r3, #96	; 0x60
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cec:	2200      	movs	r2, #0
 8002cee:	4619      	mov	r1, r3
 8002cf0:	482a      	ldr	r0, [pc, #168]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002cf2:	f007 f8cf 	bl	8009e94 <HAL_TIM_PWM_ConfigChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002cfc:	f000 fa41 	bl	8003182 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d04:	2204      	movs	r2, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4824      	ldr	r0, [pc, #144]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002d0a:	f007 f8c3 	bl	8009e94 <HAL_TIM_PWM_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002d14:	f000 fa35 	bl	8003182 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	4619      	mov	r1, r3
 8002d20:	481e      	ldr	r0, [pc, #120]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002d22:	f007 f8b7 	bl	8009e94 <HAL_TIM_PWM_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002d2c:	f000 fa29 	bl	8003182 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d34:	220c      	movs	r2, #12
 8002d36:	4619      	mov	r1, r3
 8002d38:	4818      	ldr	r0, [pc, #96]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002d3a:	f007 f8ab 	bl	8009e94 <HAL_TIM_PWM_ConfigChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002d44:	f000 fa1d 	bl	8003182 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002d7e:	f008 f83f 	bl	800ae00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002d88:	f000 f9fb 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <MX_TIM1_Init+0x19c>)
 8002d8e:	f000 fb67 	bl	8003460 <HAL_TIM_MspPostInit>

}
 8002d92:	bf00      	nop
 8002d94:	3768      	adds	r7, #104	; 0x68
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000093c 	.word	0x2000093c
 8002da0:	40010000 	.word	0x40010000

08002da4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <MX_TIM3_Init+0xa4>)
 8002dc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dca:	226b      	movs	r2, #107	; 0x6b
 8002dcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002de8:	4816      	ldr	r0, [pc, #88]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dea:	f006 fcef 	bl	80097cc <HAL_TIM_IC_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002df4:	f000 f9c5 	bl	8003182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	480f      	ldr	r0, [pc, #60]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002e08:	f007 ff6c 	bl	800ace4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002e12:	f000 f9b6 	bl	8003182 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002e2e:	f006 ff94 	bl	8009d5a <HAL_TIM_IC_ConfigChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e38:	f000 f9a3 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000988 	.word	0x20000988
 8002e48:	40000400 	.word	0x40000400

08002e4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <MX_UART4_Init+0x5c>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_UART4_Init+0x58>)
 8002e90:	f008 f852 	bl	800af38 <HAL_UART_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002e9a:	f000 f972 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200009d4 	.word	0x200009d4
 8002ea8:	40004c00 	.word	0x40004c00

08002eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <MX_USART2_UART_Init+0x64>)
 8002eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002eea:	2210      	movs	r2, #16
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART2_UART_Init+0x60>)
 8002ef8:	f008 f81e 	bl	800af38 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002f02:	f000 f93e 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000a5c 	.word	0x20000a5c
 8002f10:	40004400 	.word	0x40004400

08002f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <MX_USART3_UART_Init+0x5c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <MX_USART3_UART_Init+0x58>)
 8002f58:	f007 ffee 	bl	800af38 <HAL_UART_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f62:	f000 f90e 	bl	8003182 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000ae4 	.word	0x20000ae4
 8002f70:	40004800 	.word	0x40004800

08002f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <MX_DMA_Init+0x38>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <MX_DMA_Init+0x38>)
 8002f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <MX_DMA_Init+0x38>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2105      	movs	r1, #5
 8002f96:	2010      	movs	r0, #16
 8002f98:	f002 fe5c 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f9c:	2010      	movs	r0, #16
 8002f9e:	f002 fe75 	bl	8005c8c <HAL_NVIC_EnableIRQ>

}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a40      	ldr	r2, [pc, #256]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fe4:	f043 0310 	orr.w	r3, r3, #16
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	4b35      	ldr	r3, [pc, #212]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a34      	ldr	r2, [pc, #208]	; (80030cc <MX_GPIO_Init+0x11c>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <MX_GPIO_Init+0x11c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <MX_GPIO_Init+0x11c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <MX_GPIO_Init+0x11c>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <MX_GPIO_Init+0x11c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <MX_GPIO_Init+0x11c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a28      	ldr	r2, [pc, #160]	; (80030cc <MX_GPIO_Init+0x11c>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <MX_GPIO_Init+0x11c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003044:	4822      	ldr	r0, [pc, #136]	; (80030d0 <MX_GPIO_Init+0x120>)
 8003046:	f003 fbd5 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8003050:	4820      	ldr	r0, [pc, #128]	; (80030d4 <MX_GPIO_Init+0x124>)
 8003052:	f003 fbcf 	bl	80067f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8003056:	2304      	movs	r3, #4
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	481b      	ldr	r0, [pc, #108]	; (80030d8 <MX_GPIO_Init+0x128>)
 800306a:	f003 fa27 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 800306e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003074:	2301      	movs	r3, #1
 8003076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4812      	ldr	r0, [pc, #72]	; (80030d0 <MX_GPIO_Init+0x120>)
 8003088:	f003 fa18 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 800308c:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8003090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <MX_GPIO_Init+0x124>)
 80030a6:	f003 fa09 	bl	80064bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 80030aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4619      	mov	r1, r3
 80030be:	4807      	ldr	r0, [pc, #28]	; (80030dc <MX_GPIO_Init+0x12c>)
 80030c0:	f003 f9fc 	bl	80064bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030c4:	bf00      	nop
 80030c6:	3728      	adds	r7, #40	; 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40020400 	.word	0x40020400

080030e0 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fe ff75 	bl	8001fd8 <TaskSensorData>
  /* USER CODE END 5 */
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f926 	bl	8001350 <TaskController>
  /* USER CODE END RunTaskController */
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fe fe29 	bl	8001d6c <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fd40 	bl	8001bb0 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe fe0b 	bl	8001d5c <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe f9aa 	bl	80014b0 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d101      	bne.n	800317a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003176:	f002 fc71 	bl	8005a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003186:	b672      	cpsid	i
}
 8003188:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800318a:	e7fe      	b.n	800318a <Error_Handler+0x8>

0800318c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_MspInit+0x4c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_MspInit+0x4c>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_MspInit+0x4c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_MspInit+0x4c>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_MspInit+0x4c>)
 80031b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_MspInit+0x4c>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	210f      	movs	r1, #15
 80031c6:	f06f 0001 	mvn.w	r0, #1
 80031ca:	f002 fd43 	bl	8005c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0aa      	sub	sp, #168	; 0xa8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00c fffe 	bl	80101fe <memset>
  if(hi2c->Instance==I2C1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_I2C_MspInit+0xb4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d13c      	bne.n	8003286 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800320c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003210:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003216:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fdff 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003228:	f7ff ffab 	bl	8003182 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	6313      	str	r3, [r2, #48]	; 0x30
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 8003244:	23c0      	movs	r3, #192	; 0xc0
 8003246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324a:	2312      	movs	r3, #18
 800324c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800325c:	2304      	movs	r3, #4
 800325e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003266:	4619      	mov	r1, r3
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <HAL_I2C_MspInit+0xbc>)
 800326a:	f003 f927 	bl	80064bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 8003274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_I2C_MspInit+0xb8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003286:	bf00      	nop
 8003288:	37a8      	adds	r7, #168	; 0xa8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40005400 	.word	0x40005400
 8003294:	40023800 	.word	0x40023800
 8003298:	40020400 	.word	0x40020400

0800329c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2e      	ldr	r2, [pc, #184]	; (8003374 <HAL_SPI_MspInit+0xd8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d128      	bne.n	8003310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a27      	ldr	r2, [pc, #156]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 80032ee:	23f0      	movs	r3, #240	; 0xf0
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032fe:	2305      	movs	r3, #5
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	481c      	ldr	r0, [pc, #112]	; (800337c <HAL_SPI_MspInit+0xe0>)
 800330a:	f003 f8d7 	bl	80064bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800330e:	e02d      	b.n	800336c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_SPI_MspInit+0xe4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d128      	bne.n	800336c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_SPI_MspInit+0xdc>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 800334a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800335c:	2305      	movs	r3, #5
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	4807      	ldr	r0, [pc, #28]	; (8003384 <HAL_SPI_MspInit+0xe8>)
 8003368:	f003 f8a8 	bl	80064bc <HAL_GPIO_Init>
}
 800336c:	bf00      	nop
 800336e:	3730      	adds	r7, #48	; 0x30
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013000 	.word	0x40013000
 8003378:	40023800 	.word	0x40023800
 800337c:	40020000 	.word	0x40020000
 8003380:	40003800 	.word	0x40003800
 8003384:	40020400 	.word	0x40020400

08003388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_TIM_Base_MspInit+0x38>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10b      	bne.n	80033b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_TIM_Base_MspInit+0x3c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_TIM_Base_MspInit+0x3c>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6453      	str	r3, [r2, #68]	; 0x44
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_TIM_Base_MspInit+0x3c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_TIM_IC_MspInit+0x8c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12f      	bne.n	800344a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a14      	ldr	r2, [pc, #80]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_TIM_IC_MspInit+0x90>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 800341a:	2340      	movs	r3, #64	; 0x40
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <HAL_TIM_IC_MspInit+0x94>)
 8003436:	f003 f841 	bl	80064bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2106      	movs	r1, #6
 800343e:	201d      	movs	r0, #29
 8003440:	f002 fc08 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003444:	201d      	movs	r0, #29
 8003446:	f002 fc21 	bl	8005c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40000400 	.word	0x40000400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020800 	.word	0x40020800

08003460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <HAL_TIM_MspPostInit+0x64>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11c      	bne.n	80034bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_TIM_MspPostInit+0x68>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_TIM_MspPostInit+0x68>)
 8003488:	f043 0310 	orr.w	r3, r3, #16
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_TIM_MspPostInit+0x68>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 800349a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800349e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	4619      	mov	r1, r3
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <HAL_TIM_MspPostInit+0x6c>)
 80034b8:	f003 f800 	bl	80064bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0ae      	sub	sp, #184	; 0xb8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00c fe84 	bl	80101fe <memset>
  if(huart->Instance==UART4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a83      	ldr	r2, [pc, #524]	; (8003708 <HAL_UART_MspInit+0x238>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d144      	bne.n	800358a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800350a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fc86 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800351a:	f7ff fe32 	bl	8003182 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800351e:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_UART_MspInit+0x23c>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_UART_MspInit+0x23c>)
 8003524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_UART_MspInit+0x23c>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_UART_MspInit+0x23c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_UART_MspInit+0x23c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_UART_MspInit+0x23c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 800354e:	2303      	movs	r3, #3
 8003550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003566:	2308      	movs	r3, #8
 8003568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003570:	4619      	mov	r1, r3
 8003572:	4867      	ldr	r0, [pc, #412]	; (8003710 <HAL_UART_MspInit+0x240>)
 8003574:	f002 ffa2 	bl	80064bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2106      	movs	r1, #6
 800357c:	2034      	movs	r0, #52	; 0x34
 800357e:	f002 fb69 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003582:	2034      	movs	r0, #52	; 0x34
 8003584:	f002 fb82 	bl	8005c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003588:	e0b9      	b.n	80036fe <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_UART_MspInit+0x244>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d172      	bne.n	800367a <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003598:	2304      	movs	r3, #4
 800359a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fc3d 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80035ac:	f7ff fde9 	bl	8003182 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b0:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	6413      	str	r3, [r2, #64]	; 0x40
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	4a4f      	ldr	r2, [pc, #316]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035ce:	f043 0308 	orr.w	r3, r3, #8
 80035d2:	6313      	str	r3, [r2, #48]	; 0x30
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_UART_MspInit+0x23c>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 80035e0:	2360      	movs	r3, #96	; 0x60
 80035e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035f8:	2307      	movs	r3, #7
 80035fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003602:	4619      	mov	r1, r3
 8003604:	4844      	ldr	r0, [pc, #272]	; (8003718 <HAL_UART_MspInit+0x248>)
 8003606:	f002 ff59 	bl	80064bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_UART_MspInit+0x24c>)
 800360c:	4a44      	ldr	r2, [pc, #272]	; (8003720 <HAL_UART_MspInit+0x250>)
 800360e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003616:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_UART_MspInit+0x24c>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_UART_MspInit+0x24c>)
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003632:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003638:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_UART_MspInit+0x24c>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003640:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003644:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800364c:	4833      	ldr	r0, [pc, #204]	; (800371c <HAL_UART_MspInit+0x24c>)
 800364e:	f002 fb2b 	bl	8005ca8 <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003658:	f7ff fd93 	bl	8003182 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a2f      	ldr	r2, [pc, #188]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003660:	675a      	str	r2, [r3, #116]	; 0x74
 8003662:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_UART_MspInit+0x24c>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2106      	movs	r1, #6
 800366c:	2026      	movs	r0, #38	; 0x26
 800366e:	f002 faf1 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003672:	2026      	movs	r0, #38	; 0x26
 8003674:	f002 fb0a 	bl	8005c8c <HAL_NVIC_EnableIRQ>
}
 8003678:	e041      	b.n	80036fe <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a29      	ldr	r2, [pc, #164]	; (8003724 <HAL_UART_MspInit+0x254>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d13c      	bne.n	80036fe <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800368a:	2310      	movs	r3, #16
 800368c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fbc4 	bl	8007e20 <HAL_RCCEx_PeriphCLKConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 800369e:	f7ff fd70 	bl	8003182 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_UART_MspInit+0x23c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 80036d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036ec:	2307      	movs	r3, #7
 80036ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036f6:	4619      	mov	r1, r3
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <HAL_UART_MspInit+0x258>)
 80036fa:	f002 fedf 	bl	80064bc <HAL_GPIO_Init>
}
 80036fe:	bf00      	nop
 8003700:	37b8      	adds	r7, #184	; 0xb8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40004c00 	.word	0x40004c00
 800370c:	40023800 	.word	0x40023800
 8003710:	40020000 	.word	0x40020000
 8003714:	40004400 	.word	0x40004400
 8003718:	40020c00 	.word	0x40020c00
 800371c:	20000b6c 	.word	0x20000b6c
 8003720:	40026088 	.word	0x40026088
 8003724:	40004800 	.word	0x40004800
 8003728:	40020800 	.word	0x40020800

0800372c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_InitTick+0xe4>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <HAL_InitTick+0xe4>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6413      	str	r3, [r2, #64]	; 0x40
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_InitTick+0xe4>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003754:	f107 0210 	add.w	r2, r7, #16
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fb2c 	bl	8007dbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800376e:	f004 fafd 	bl	8007d6c <HAL_RCC_GetPCLK1Freq>
 8003772:	6378      	str	r0, [r7, #52]	; 0x34
 8003774:	e004      	b.n	8003780 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003776:	f004 faf9 	bl	8007d6c <HAL_RCC_GetPCLK1Freq>
 800377a:	4603      	mov	r3, r0
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_InitTick+0xe8>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	0c9b      	lsrs	r3, r3, #18
 800378a:	3b01      	subs	r3, #1
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_InitTick+0xec>)
 8003790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_InitTick+0xec>)
 8003798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800379c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_InitTick+0xec>)
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_InitTick+0xec>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_InitTick+0xec>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_InitTick+0xec>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80037b6:	4818      	ldr	r0, [pc, #96]	; (8003818 <HAL_InitTick+0xec>)
 80037b8:	f005 fddc 	bl	8009374 <HAL_TIM_Base_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80037c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11b      	bne.n	8003802 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80037ca:	4813      	ldr	r0, [pc, #76]	; (8003818 <HAL_InitTick+0xec>)
 80037cc:	f005 fe2a 	bl	8009424 <HAL_TIM_Base_Start_IT>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80037d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d111      	bne.n	8003802 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037de:	201c      	movs	r0, #28
 80037e0:	f002 fa54 	bl	8005c8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d808      	bhi.n	80037fc <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80037ea:	2200      	movs	r2, #0
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	201c      	movs	r0, #28
 80037f0:	f002 fa30 	bl	8005c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_InitTick+0xf0>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e002      	b.n	8003802 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003806:	4618      	mov	r0, r3
 8003808:	3738      	adds	r7, #56	; 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	431bde83 	.word	0x431bde83
 8003818:	20000c08 	.word	0x20000c08
 800381c:	2000000c 	.word	0x2000000c

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler+0x4>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <UsageFault_Handler+0x4>

0800383e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <DMA1_Stream5_IRQHandler+0x10>)
 8003852:	f002 fbc9 	bl	8005fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000b6c 	.word	0x20000b6c

08003860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <TIM2_IRQHandler+0x10>)
 8003866:	f006 f959 	bl	8009b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000c08 	.word	0x20000c08

08003874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <TIM3_IRQHandler+0x10>)
 800387a:	f006 f94f 	bl	8009b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000988 	.word	0x20000988

08003888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <USART2_IRQHandler+0x10>)
 800388e:	f007 fcad 	bl	800b1ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000a5c 	.word	0x20000a5c

0800389c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <UART4_IRQHandler+0x10>)
 80038a2:	f007 fca3 	bl	800b1ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200009d4 	.word	0x200009d4

080038b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return 1;
 80038b4:	2301      	movs	r3, #1
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <_kill>:

int _kill(int pid, int sig)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038ca:	f00c fd53 	bl	8010374 <__errno>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2216      	movs	r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
  return -1;
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_exit>:

void _exit (int status)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ffe7 	bl	80038c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038f2:	e7fe      	b.n	80038f2 <_exit+0x12>

080038f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e00a      	b.n	800391c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003906:	f3af 8000 	nop.w
 800390a:	4601      	mov	r1, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	60ba      	str	r2, [r7, #8]
 8003912:	b2ca      	uxtb	r2, r1
 8003914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3301      	adds	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	dbf0      	blt.n	8003906 <_read+0x12>
  }

  return len;
 8003924:	687b      	ldr	r3, [r7, #4]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e009      	b.n	8003954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	60ba      	str	r2, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	3301      	adds	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	dbf1      	blt.n	8003940 <_write+0x12>
  }
  return len;
 800395c:	687b      	ldr	r3, [r7, #4]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <_close>:

int _close(int file)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800398e:	605a      	str	r2, [r3, #4]
  return 0;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <_isatty>:

int _isatty(int file)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039a6:	2301      	movs	r3, #1
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <_sbrk+0x5c>)
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <_sbrk+0x60>)
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <_sbrk+0x64>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <_sbrk+0x64>)
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <_sbrk+0x68>)
 80039f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <_sbrk+0x64>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d207      	bcs.n	8003a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a00:	f00c fcb8 	bl	8010374 <__errno>
 8003a04:	4603      	mov	r3, r0
 8003a06:	220c      	movs	r2, #12
 8003a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	e009      	b.n	8003a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <_sbrk+0x64>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a16:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <_sbrk+0x64>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <_sbrk+0x64>)
 8003a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20040000 	.word	0x20040000
 8003a30:	00000400 	.word	0x00000400
 8003a34:	20000c54 	.word	0x20000c54
 8003a38:	20004af8 	.word	0x20004af8

08003a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <SystemInit+0x20>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <SystemInit+0x20>)
 8003a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b24      	cmp	r3, #36	; 0x24
 8003a7a:	d103      	bne.n	8003a84 <GPS_validate+0x24>
		i++;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003a82:	e00c      	b.n	8003a9e <GPS_validate+0x3e>
		return 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e047      	b.n	8003b18 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4053      	eors	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
		i++;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <GPS_validate+0x5c>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab4:	d002      	beq.n	8003abc <GPS_validate+0x5c>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b4a      	cmp	r3, #74	; 0x4a
 8003aba:	dde5      	ble.n	8003a88 <GPS_validate+0x28>
	}

	if (i >= 75)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b4a      	cmp	r3, #74	; 0x4a
 8003ac0:	dd01      	ble.n	8003ac6 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e028      	b.n	8003b18 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad0:	d119      	bne.n	8003b06 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	490a      	ldr	r1, [pc, #40]	; (8003b20 <GPS_validate+0xc0>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00c faf0 	bl	80100dc <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003afc:	7a3a      	ldrb	r2, [r7, #8]
 8003afe:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d108      	bne.n	8003b16 <GPS_validate+0xb6>
 8003b04:	e001      	b.n	8003b0a <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8003b06:	2300      	movs	r3, #0
 8003b08:	e006      	b.n	8003b18 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b0a:	7a7a      	ldrb	r2, [r7, #9]
 8003b0c:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d101      	bne.n	8003b16 <GPS_validate+0xb6>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <GPS_validate+0xb8>
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0801585c 	.word	0x0801585c

08003b24 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af08      	add	r7, sp, #32
 8003b2a:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8003b2c:	2206      	movs	r2, #6
 8003b2e:	4964      	ldr	r1, [pc, #400]	; (8003cc0 <GPS_parse+0x19c>)
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f00c fb6c 	bl	801020e <strncmp>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d138      	bne.n	8003bae <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <GPS_parse+0x1a0>)
 8003b3e:	9307      	str	r3, [sp, #28]
 8003b40:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <GPS_parse+0x1a4>)
 8003b42:	9306      	str	r3, [sp, #24]
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <GPS_parse+0x1a8>)
 8003b46:	9305      	str	r3, [sp, #20]
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <GPS_parse+0x1ac>)
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <GPS_parse+0x1b0>)
 8003b4e:	9303      	str	r3, [sp, #12]
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <GPS_parse+0x1b4>)
 8003b52:	9302      	str	r3, [sp, #8]
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <GPS_parse+0x1b8>)
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <GPS_parse+0x1bc>)
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <GPS_parse+0x1c0>)
 8003b5e:	4a62      	ldr	r2, [pc, #392]	; (8003ce8 <GPS_parse+0x1c4>)
 8003b60:	4962      	ldr	r1, [pc, #392]	; (8003cec <GPS_parse+0x1c8>)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f00c fada 	bl	801011c <siscanf>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f340 80a4 	ble.w	8003cb8 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003b70:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <GPS_parse+0x1cc>)
 8003b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b76:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <GPS_parse+0x1cc>)
 8003b78:	7d1b      	ldrb	r3, [r3, #20]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	f000 f8da 	bl	8003d38 <GPS_nmea_to_dec>
 8003b84:	eef0 7a40 	vmov.f32	s15, s0
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <GPS_parse+0x1cc>)
 8003b8a:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003b8e:	4b58      	ldr	r3, [pc, #352]	; (8003cf0 <GPS_parse+0x1cc>)
 8003b90:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <GPS_parse+0x1cc>)
 8003b96:	7f1b      	ldrb	r3, [r3, #28]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9e:	f000 f8cb 	bl	8003d38 <GPS_nmea_to_dec>
 8003ba2:	eef0 7a40 	vmov.f32	s15, s0
 8003ba6:	4b52      	ldr	r3, [pc, #328]	; (8003cf0 <GPS_parse+0x1cc>)
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
			return;
 8003bac:	e084      	b.n	8003cb8 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8003bae:	2206      	movs	r2, #6
 8003bb0:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <GPS_parse+0x1d0>)
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f00c fb2b 	bl	801020e <strncmp>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d123      	bne.n	8003c06 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <GPS_parse+0x1d4>)
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <GPS_parse+0x1d8>)
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	4b4e      	ldr	r3, [pc, #312]	; (8003d00 <GPS_parse+0x1dc>)
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <GPS_parse+0x1b4>)
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <GPS_parse+0x1b8>)
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <GPS_parse+0x1bc>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <GPS_parse+0x1c0>)
 8003bd8:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <GPS_parse+0x1c4>)
 8003bda:	494a      	ldr	r1, [pc, #296]	; (8003d04 <GPS_parse+0x1e0>)
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f00c fa9d 	bl	801011c <siscanf>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dd67      	ble.n	8003cb8 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8003be8:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <GPS_parse+0x1cc>)
 8003bea:	7d1b      	ldrb	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <GPS_parse+0x1cc>)
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <GPS_parse+0x1cc>)
 8003bf8:	7f1b      	ldrb	r3, [r3, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d157      	bne.n	8003cae <GPS_parse+0x18a>
				GPS.ew = ' ';
 8003bfe:	4b3c      	ldr	r3, [pc, #240]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c00:	2220      	movs	r2, #32
 8003c02:	771a      	strb	r2, [r3, #28]
			return;
 8003c04:	e053      	b.n	8003cae <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8003c06:	2206      	movs	r2, #6
 8003c08:	493f      	ldr	r1, [pc, #252]	; (8003d08 <GPS_parse+0x1e4>)
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f00c faff 	bl	801020e <strncmp>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11f      	bne.n	8003c56 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8003c16:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <GPS_parse+0x1e8>)
 8003c18:	9303      	str	r3, [sp, #12]
 8003c1a:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <GPS_parse+0x1c4>)
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <GPS_parse+0x1b4>)
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <GPS_parse+0x1b8>)
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <GPS_parse+0x1bc>)
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <GPS_parse+0x1c0>)
 8003c2a:	4939      	ldr	r1, [pc, #228]	; (8003d10 <GPS_parse+0x1ec>)
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f00c fa75 	bl	801011c <siscanf>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	dd3f      	ble.n	8003cb8 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c3a:	7d1b      	ldrb	r3, [r3, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <GPS_parse+0x122>
				GPS.ns = '?';
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c42:	223f      	movs	r2, #63	; 0x3f
 8003c44:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c46:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c48:	7f1b      	ldrb	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d131      	bne.n	8003cb2 <GPS_parse+0x18e>
				GPS.ew = '?';
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c50:	223f      	movs	r2, #63	; 0x3f
 8003c52:	771a      	strb	r2, [r3, #28]
			return;
 8003c54:	e02d      	b.n	8003cb2 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8003c56:	2206      	movs	r2, #6
 8003c58:	492e      	ldr	r1, [pc, #184]	; (8003d14 <GPS_parse+0x1f0>)
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f00c fad7 	bl	801020e <strncmp>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d128      	bne.n	8003cb8 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <GPS_parse+0x1f4>)
 8003c68:	9305      	str	r3, [sp, #20]
 8003c6a:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <GPS_parse+0x1f8>)
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <GPS_parse+0x1fc>)
 8003c70:	9303      	str	r3, [sp, #12]
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <GPS_parse+0x1dc>)
 8003c74:	9302      	str	r3, [sp, #8]
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <GPS_parse+0x200>)
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <GPS_parse+0x204>)
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <GPS_parse+0x208>)
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <GPS_parse+0x20c>)
 8003c82:	492c      	ldr	r1, [pc, #176]	; (8003d34 <GPS_parse+0x210>)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f00c fa49 	bl	801011c <siscanf>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	dd13      	ble.n	8003cb8 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c92:	7d1b      	ldrb	r3, [r3, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <GPS_parse+0x17a>
				GPS.ns = '?';
 8003c98:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <GPS_parse+0x1cc>)
 8003c9a:	223f      	movs	r2, #63	; 0x3f
 8003c9c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <GPS_parse+0x1cc>)
 8003ca0:	7f1b      	ldrb	r3, [r3, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <GPS_parse+0x192>
				GPS.ew = '?';
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <GPS_parse+0x1cc>)
 8003ca8:	223f      	movs	r2, #63	; 0x3f
 8003caa:	771a      	strb	r2, [r3, #28]
			return;
 8003cac:	e003      	b.n	8003cb6 <GPS_parse+0x192>
			return;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <GPS_parse+0x194>
			return;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <GPS_parse+0x194>
			return;
 8003cb6:	bf00      	nop
		}
	}
}
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08015864 	.word	0x08015864
 8003cc4:	2000043c 	.word	0x2000043c
 8003cc8:	20000438 	.word	0x20000438
 8003ccc:	20000434 	.word	0x20000434
 8003cd0:	20000430 	.word	0x20000430
 8003cd4:	2000042c 	.word	0x2000042c
 8003cd8:	20000428 	.word	0x20000428
 8003cdc:	20000424 	.word	0x20000424
 8003ce0:	20000420 	.word	0x20000420
 8003ce4:	2000041c 	.word	0x2000041c
 8003ce8:	20000418 	.word	0x20000418
 8003cec:	0801586c 	.word	0x0801586c
 8003cf0:	2000040c 	.word	0x2000040c
 8003cf4:	08015894 	.word	0x08015894
 8003cf8:	20000448 	.word	0x20000448
 8003cfc:	20000444 	.word	0x20000444
 8003d00:	20000440 	.word	0x20000440
 8003d04:	0801589c 	.word	0x0801589c
 8003d08:	080158bc 	.word	0x080158bc
 8003d0c:	2000044c 	.word	0x2000044c
 8003d10:	080158c4 	.word	0x080158c4
 8003d14:	080158e0 	.word	0x080158e0
 8003d18:	20000464 	.word	0x20000464
 8003d1c:	20000460 	.word	0x20000460
 8003d20:	2000045d 	.word	0x2000045d
 8003d24:	2000045c 	.word	0x2000045c
 8003d28:	20000458 	.word	0x20000458
 8003d2c:	20000454 	.word	0x20000454
 8003d30:	20000450 	.word	0x20000450
 8003d34:	080158e8 	.word	0x080158e8

08003d38 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d42:	4603      	mov	r3, r0
 8003d44:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8003d46:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d4a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003dcc <GPS_nmea_to_dec+0x94>
 8003d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	ee17 3a90 	vmov	r3, s15
 8003d5a:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2264      	movs	r2, #100	; 0x64
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8003d78:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d7c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003dd0 <GPS_nmea_to_dec+0x98>
 8003d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d84:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	2b53      	cmp	r3, #83	; 0x53
 8003da2:	d002      	beq.n	8003daa <GPS_nmea_to_dec+0x72>
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	2b57      	cmp	r3, #87	; 0x57
 8003da8:	d105      	bne.n	8003db6 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8003daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dae:	eef1 7a67 	vneg.f32	s15, s15
 8003db2:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	ee07 3a90 	vmov	s15, r3
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	42c80000 	.word	0x42c80000
 8003dd0:	42700000 	.word	0x42700000

08003dd4 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8003dd8:	2007      	movs	r0, #7
 8003dda:	f000 f871 	bl	8003ec0 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f000 f8c8 	bl	8003f74 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8003de4:	2005      	movs	r0, #5
 8003de6:	f000 f8e0 	bl	8003faa <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8003dea:	2002      	movs	r0, #2
 8003dec:	f000 f8fc 	bl	8003fe8 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8003df0:	2100      	movs	r1, #0
 8003df2:	2000      	movs	r0, #0
 8003df4:	f000 f84e 	bl	8003e94 <HMC5883L_setOffset>

	return 0;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8003e06:	2003      	movs	r0, #3
 8003e08:	f000 f946 	bl	8004098 <HMC5883L_readRegister16>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HMC5883L_readRaw+0x88>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HMC5883L_readRaw+0x8c>)
 8003e20:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8003e24:	2007      	movs	r0, #7
 8003e26:	f000 f937 	bl	8004098 <HMC5883L_readRegister16>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HMC5883L_readRaw+0x90>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HMC5883L_readRaw+0x8c>)
 8003e3e:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8003e42:	2005      	movs	r0, #5
 8003e44:	f000 f928 	bl	8004098 <HMC5883L_readRegister16>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HMC5883L_readRaw+0x8c>)
 8003e54:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HMC5883L_readRaw+0x8c>)
 8003e5a:	f107 0314 	add.w	r3, r7, #20
 8003e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e64:	6979      	ldr	r1, [r7, #20]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	ee06 1a90 	vmov	s13, r1
 8003e6e:	ee07 2a10 	vmov	s14, r2
 8003e72:	ee07 3a90 	vmov	s15, r3
}
 8003e76:	eeb0 0a66 	vmov.f32	s0, s13
 8003e7a:	eef0 0a47 	vmov.f32	s1, s14
 8003e7e:	eeb0 1a67 	vmov.f32	s2, s15
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000318 	.word	0x20000318
 8003e8c:	2000030c 	.word	0x2000030c
 8003e90:	2000031c 	.word	0x2000031c

08003e94 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8003e9e:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <HMC5883L_setOffset+0x24>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8003ea4:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <HMC5883L_setOffset+0x28>)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000318 	.word	0x20000318
 8003ebc:	2000031c 	.word	0x2000031c

08003ec0 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b07      	cmp	r3, #7
 8003ece:	d833      	bhi.n	8003f38 <HMC5883L_setRange+0x78>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <HMC5883L_setRange+0x18>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003ef9 	.word	0x08003ef9
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f09 	.word	0x08003f09
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f19 	.word	0x08003f19
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f31 	.word	0x08003f31
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HMC5883L_setRange+0x94>)
 8003efc:	601a      	str	r2, [r3, #0]
	    break;
 8003efe:	e01c      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8003f00:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HMC5883L_setRange+0x98>)
 8003f04:	601a      	str	r2, [r3, #0]
	    break;
 8003f06:	e018      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HMC5883L_setRange+0x9c>)
 8003f0c:	601a      	str	r2, [r3, #0]
	    break;
 8003f0e:	e014      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HMC5883L_setRange+0xa0>)
 8003f14:	601a      	str	r2, [r3, #0]
	    break;
 8003f16:	e010      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <HMC5883L_setRange+0xa4>)
 8003f1c:	601a      	str	r2, [r3, #0]
	    break;
 8003f1e:	e00c      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <HMC5883L_setRange+0xa8>)
 8003f24:	601a      	str	r2, [r3, #0]
	    break;
 8003f26:	e008      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <HMC5883L_setRange+0xac>)
 8003f2c:	601a      	str	r2, [r3, #0]
	    break;
 8003f2e:	e004      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HMC5883L_setRange+0x90>)
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <HMC5883L_setRange+0xb0>)
 8003f34:	601a      	str	r2, [r3, #0]
	    break;
 8003f36:	e000      	b.n	8003f3a <HMC5883L_setRange+0x7a>

	default:
	    break;
 8003f38:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	2001      	movs	r0, #1
 8003f44:	f000 f870 	bl	8004028 <HMC5883L_writeRegister8>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000308 	.word	0x20000308
 8003f54:	3d958106 	.word	0x3d958106
 8003f58:	3f6b851f 	.word	0x3f6b851f
 8003f5c:	3f9c28f6 	.word	0x3f9c28f6
 8003f60:	3fc28f5c 	.word	0x3fc28f5c
 8003f64:	401147ae 	.word	0x401147ae
 8003f68:	4023d70a 	.word	0x4023d70a
 8003f6c:	4041eb85 	.word	0x4041eb85
 8003f70:	408b3333 	.word	0x408b3333

08003f74 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f000 f86e 	bl	8004060 <HMC5883L_readRegister8>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f000 f843 	bl	8004028 <HMC5883L_writeRegister8>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f000 f853 	bl	8004060 <HMC5883L_readRegister8>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	f023 031c 	bic.w	r3, r3, #28
 8003fc4:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f000 f824 	bl	8004028 <HMC5883L_writeRegister8>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f000 f834 	bl	8004060 <HMC5883L_readRegister8>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004002:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	b25a      	sxtb	r2, r3
 800400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400e:	4313      	orrs	r3, r2
 8004010:	b25b      	sxtb	r3, r3
 8004012:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	4619      	mov	r1, r3
 8004018:	2000      	movs	r0, #0
 800401a:	f000 f805 	bl	8004028 <HMC5883L_writeRegister8>
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af04      	add	r7, sp, #16
 800402e:	4603      	mov	r3, r0
 8004030:	460a      	mov	r2, r1
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	4613      	mov	r3, r2
 8004036:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	b29a      	uxth	r2, r3
 800403c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004040:	9302      	str	r3, [sp, #8]
 8004042:	2301      	movs	r3, #1
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2301      	movs	r3, #1
 800404c:	213c      	movs	r1, #60	; 0x3c
 800404e:	4803      	ldr	r0, [pc, #12]	; (800405c <HMC5883L_writeRegister8+0x34>)
 8004050:	f002 fc7a 	bl	8006948 <HAL_I2C_Mem_Write>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000820 	.word	0x20000820

08004060 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af04      	add	r7, sp, #16
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	b29a      	uxth	r2, r3
 800406e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	2301      	movs	r3, #1
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	f107 030f 	add.w	r3, r7, #15
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2301      	movs	r3, #1
 8004080:	213c      	movs	r1, #60	; 0x3c
 8004082:	4804      	ldr	r0, [pc, #16]	; (8004094 <HMC5883L_readRegister8+0x34>)
 8004084:	f002 fd74 	bl	8006b70 <HAL_I2C_Mem_Read>
    return value;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000820 	.word	0x20000820

08004098 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af04      	add	r7, sp, #16
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	2302      	movs	r3, #2
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	f107 030e 	add.w	r3, r7, #14
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2301      	movs	r3, #1
 80040b8:	213c      	movs	r1, #60	; 0x3c
 80040ba:	4804      	ldr	r0, [pc, #16]	; (80040cc <HMC5883L_readRegister16+0x34>)
 80040bc:	f002 fd58 	bl	8006b70 <HAL_I2C_Mem_Read>
    return value;
 80040c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000820 	.word	0x20000820

080040d0 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 80040da:	2201      	movs	r2, #1
 80040dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040e0:	481a      	ldr	r0, [pc, #104]	; (800414c <BMP280_initialize+0x7c>)
 80040e2:	f002 fb87 	bl	80067f4 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 80040ec:	6838      	ldr	r0, [r7, #0]
 80040ee:	f000 f83c 	bl	800416a <BMP280_getID>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b58      	cmp	r3, #88	; 0x58
 80040f6:	d001      	beq.n	80040fc <BMP280_initialize+0x2c>
    {
        return 1;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 80040fc:	6838      	ldr	r0, [r7, #0]
 80040fe:	f000 f827 	bl	8004150 <BMP280_reset>
    HAL_Delay(500);
 8004102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004106:	f001 fcc9 	bl	8005a9c <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 800410a:	2105      	movs	r1, #5
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f000 f8ef 	bl	80042f0 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 8004112:	2102      	movs	r1, #2
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f000 f90c 	bl	8004332 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 800411a:	2103      	movs	r1, #3
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f000 f929 	bl	8004374 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 8004122:	2104      	movs	r1, #4
 8004124:	6838      	ldr	r0, [r7, #0]
 8004126:	f000 f966 	bl	80043f6 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 800412a:	2100      	movs	r1, #0
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f000 f941 	bl	80043b4 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f000 f826 	bl	8004184 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8004138:	2232      	movs	r2, #50	; 0x32
 800413a:	2164      	movs	r1, #100	; 0x64
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f000 f89e 	bl	800427e <BMP280_setReferencePressure>

    return 0;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40020c00 	.word	0x40020c00

08004150 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8004158:	22b6      	movs	r2, #182	; 0xb6
 800415a:	21e0      	movs	r1, #224	; 0xe0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa25 	bl	80045ac <BMP280_writeRegister>
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 8004172:	21d0      	movs	r1, #208	; 0xd0
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f9fd 	bl	8004574 <BMP280_readRegister>
 800417a:	4603      	mov	r3, r0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 800418c:	f107 0208 	add.w	r2, r7, #8
 8004190:	2318      	movs	r3, #24
 8004192:	2188      	movs	r1, #136	; 0x88
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fa28 	bl	80045ea <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 800419a:	7a7b      	ldrb	r3, [r7, #9]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	b21a      	sxth	r2, r3
 80041a0:	7a3b      	ldrb	r3, [r7, #8]
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	7abb      	ldrb	r3, [r7, #10]
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b21a      	sxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 80041c0:	7b7b      	ldrb	r3, [r7, #13]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	7b3b      	ldrb	r3, [r7, #12]
 80041c8:	b21b      	sxth	r3, r3
 80041ca:	4313      	orrs	r3, r2
 80041cc:	b21a      	sxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	b21a      	sxth	r2, r3
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	b21b      	sxth	r3, r3
 80041dc:	4313      	orrs	r3, r2
 80041de:	b21b      	sxth	r3, r3
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 80041e6:	7c7b      	ldrb	r3, [r7, #17]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	b21a      	sxth	r2, r3
 80041ec:	7c3b      	ldrb	r3, [r7, #16]
 80041ee:	b21b      	sxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	7cbb      	ldrb	r3, [r7, #18]
 8004200:	b21b      	sxth	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b21a      	sxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 800420a:	7d7b      	ldrb	r3, [r7, #21]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	b21a      	sxth	r2, r3
 8004210:	7d3b      	ldrb	r3, [r7, #20]
 8004212:	b21b      	sxth	r3, r3
 8004214:	4313      	orrs	r3, r2
 8004216:	b21a      	sxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	b21a      	sxth	r2, r3
 8004222:	7dbb      	ldrb	r3, [r7, #22]
 8004224:	b21b      	sxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b21a      	sxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 800422e:	7e7b      	ldrb	r3, [r7, #25]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	b21a      	sxth	r2, r3
 8004234:	7e3b      	ldrb	r3, [r7, #24]
 8004236:	b21b      	sxth	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b21a      	sxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8004240:	7efb      	ldrb	r3, [r7, #27]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	b21a      	sxth	r2, r3
 8004246:	7ebb      	ldrb	r3, [r7, #26]
 8004248:	b21b      	sxth	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b21a      	sxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 8004252:	7f7b      	ldrb	r3, [r7, #29]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	b21a      	sxth	r2, r3
 8004258:	7f3b      	ldrb	r3, [r7, #28]
 800425a:	b21b      	sxth	r3, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	b21a      	sxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8004264:	7ffb      	ldrb	r3, [r7, #31]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b21a      	sxth	r2, r3
 800426a:	7fbb      	ldrb	r3, [r7, #30]
 800426c:	b21b      	sxth	r3, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	b21a      	sxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	807b      	strh	r3, [r7, #2]
 800428a:	4613      	mov	r3, r2
 800428c:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 800428e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004292:	f001 fc03 	bl	8005a9c <HAL_Delay>
    float sum = 0;
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	e012      	b.n	80042c8 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8c8 	bl	8004438 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80042ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80042b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b6:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 80042ba:	787b      	ldrb	r3, [r7, #1]
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fbed 	bl	8005a9c <HAL_Delay>
    for (int i = 0; i < samples; i++)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	dbe8      	blt.n	80042a2 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042da:	edd7 6a03 	vldr	s13, [r7, #12]
 80042de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80042fc:	21f4      	movs	r1, #244	; 0xf4
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f938 	bl	8004574 <BMP280_readRegister>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8004308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430c:	f023 031c 	bic.w	r3, r3, #28
 8004310:	b25a      	sxtb	r2, r3
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	b25b      	sxtb	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b25b      	sxtb	r3, r3
 800431c:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	461a      	mov	r2, r3
 8004322:	21f4      	movs	r1, #244	; 0xf4
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f941 	bl	80045ac <BMP280_writeRegister>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800433e:	21f4      	movs	r1, #244	; 0xf4
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f917 	bl	8004574 <BMP280_readRegister>
 8004346:	4603      	mov	r3, r0
 8004348:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 800434a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	b25a      	sxtb	r2, r3
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015b      	lsls	r3, r3, #5
 8004358:	b25b      	sxtb	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b25b      	sxtb	r3, r3
 800435e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	461a      	mov	r2, r3
 8004364:	21f4      	movs	r1, #244	; 0xf4
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f920 	bl	80045ac <BMP280_writeRegister>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8004380:	21f4      	movs	r1, #244	; 0xf4
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8f6 	bl	8004574 <BMP280_readRegister>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	f023 0303 	bic.w	r3, r3, #3
 8004394:	b25a      	sxtb	r2, r3
 8004396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439a:	4313      	orrs	r3, r2
 800439c:	b25b      	sxtb	r3, r3
 800439e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	461a      	mov	r2, r3
 80043a4:	21f4      	movs	r1, #244	; 0xf4
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f900 	bl	80045ac <BMP280_writeRegister>
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80043c0:	21f5      	movs	r1, #245	; 0xf5
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8d6 	bl	8004574 <BMP280_readRegister>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 80043cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	b25a      	sxtb	r2, r3
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	015b      	lsls	r3, r3, #5
 80043da:	b25b      	sxtb	r3, r3
 80043dc:	4313      	orrs	r3, r2
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	461a      	mov	r2, r3
 80043e6:	21f5      	movs	r1, #245	; 0xf5
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8df 	bl	80045ac <BMP280_writeRegister>
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004402:	21f5      	movs	r1, #245	; 0xf5
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8b5 	bl	8004574 <BMP280_readRegister>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	f023 031c 	bic.w	r3, r3, #28
 8004416:	b25a      	sxtb	r2, r3
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	b25b      	sxtb	r3, r3
 800441e:	4313      	orrs	r3, r2
 8004420:	b25b      	sxtb	r3, r3
 8004422:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	461a      	mov	r2, r3
 8004428:	21f5      	movs	r1, #245	; 0xf5
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8be 	bl	80045ac <BMP280_writeRegister>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8004440:	f107 0208 	add.w	r2, r7, #8
 8004444:	2306      	movs	r3, #6
 8004446:	21f7      	movs	r1, #247	; 0xf7
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8ce 	bl	80045ea <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800444e:	7a3b      	ldrb	r3, [r7, #8]
 8004450:	031a      	lsls	r2, r3, #12
 8004452:	7a7b      	ldrb	r3, [r7, #9]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4313      	orrs	r3, r2
 8004458:	7aba      	ldrb	r2, [r7, #10]
 800445a:	0912      	lsrs	r2, r2, #4
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	031a      	lsls	r2, r3, #12
 8004466:	7b3b      	ldrb	r3, [r7, #12]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4313      	orrs	r3, r2
 800446c:	7b7a      	ldrb	r2, [r7, #13]
 800446e:	0912      	lsrs	r2, r2, #4
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 8004476:	6939      	ldr	r1, [r7, #16]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f917 	bl	80046ac <BMP280_compensate_temperature>
 800447e:	ee07 0a90 	vmov	s15, r0
 8004482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004486:	ee17 0a90 	vmov	r0, s15
 800448a:	f7fc f885 	bl	8000598 <__aeabi_f2d>
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	4b35      	ldr	r3, [pc, #212]	; (8004568 <BMP280_measure+0x130>)
 8004494:	f7fc fa02 	bl	800089c <__aeabi_ddiv>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fbca 	bl	8000c38 <__aeabi_d2f>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f953 	bl	8004758 <BMP280_compensate_pressure>
 80044b2:	ee07 0a90 	vmov	s15, r0
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	ee17 0a90 	vmov	r0, s15
 80044be:	f7fc f86b 	bl	8000598 <__aeabi_f2d>
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <BMP280_measure+0x134>)
 80044c8:	f7fc f9e8 	bl	800089c <__aeabi_ddiv>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f7fc fbb0 	bl	8000c38 <__aeabi_d2f>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80044e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	dc00      	bgt.n	80044f0 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 80044ee:	e02c      	b.n	800454a <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80044fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004500:	ee16 0a90 	vmov	r0, s13
 8004504:	f7fc f848 	bl	8000598 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004558 <BMP280_measure+0x120>
 8004510:	ec43 2b10 	vmov	d0, r2, r3
 8004514:	f00f ff0c 	bl	8014330 <pow>
 8004518:	ec53 2b10 	vmov	r2, r3, d0
 800451c:	f04f 0000 	mov.w	r0, #0
 8004520:	4913      	ldr	r1, [pc, #76]	; (8004570 <BMP280_measure+0x138>)
 8004522:	f7fb fed9 	bl	80002d8 <__aeabi_dsub>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	a30c      	add	r3, pc, #48	; (adr r3, 8004560 <BMP280_measure+0x128>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc f888 	bl	8000648 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	f7fc fb7a 	bl	8000c38 <__aeabi_d2f>
 8004544:	4602      	mov	r2, r0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	f3af 8000 	nop.w
 8004558:	1a36e2eb 	.word	0x1a36e2eb
 800455c:	3fc85bc0 	.word	0x3fc85bc0
 8004560:	00000000 	.word	0x00000000
 8004564:	4150e92d 	.word	0x4150e92d
 8004568:	40590000 	.word	0x40590000
 800456c:	40700000 	.word	0x40700000
 8004570:	3ff00000 	.word	0x3ff00000

08004574 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f883 	bl	800468c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f855 	bl	800463a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8004590:	2100      	movs	r1, #0
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f851 	bl	800463a <BMP280_spiReadWrite>
 8004598:	4603      	mov	r3, r0
 800459a:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f865 	bl	800466c <BMP280_spiCSNhigh>
    return value;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
 80045b8:	4613      	mov	r3, r2
 80045ba:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f865 	bl	800468c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f834 	bl	800463a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 80045d2:	78bb      	ldrb	r3, [r7, #2]
 80045d4:	4619      	mov	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f82f 	bl	800463a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f845 	bl	800466c <BMP280_spiCSNhigh>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 80045ea:	b590      	push	{r4, r7, lr}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	461a      	mov	r2, r3
 80045f6:	460b      	mov	r3, r1
 80045f8:	72fb      	strb	r3, [r7, #11]
 80045fa:	4613      	mov	r3, r2
 80045fc:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f844 	bl	800468c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f816 	bl	800463a <BMP280_spiReadWrite>
    while (length--)
 800460e:	e008      	b.n	8004622 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8004610:	687c      	ldr	r4, [r7, #4]
 8004612:	1c63      	adds	r3, r4, #1
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	2100      	movs	r1, #0
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f80e 	bl	800463a <BMP280_spiReadWrite>
 800461e:	4603      	mov	r3, r0
 8004620:	7023      	strb	r3, [r4, #0]
    while (length--)
 8004622:	7abb      	ldrb	r3, [r7, #10]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	72ba      	strb	r2, [r7, #10]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f1      	bne.n	8004610 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f81d 	bl	800466c <BMP280_spiCSNhigh>
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bd90      	pop	{r4, r7, pc}

0800463a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af02      	add	r7, sp, #8
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8004646:	23ff      	movs	r3, #255	; 0xff
 8004648:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f107 020f 	add.w	r2, r7, #15
 8004652:	1cf9      	adds	r1, r7, #3
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2301      	movs	r3, #1
 800465c:	f004 fa73 	bl	8008b46 <HAL_SPI_TransmitReceive>
    return rx_message;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004674:	2201      	movs	r2, #1
 8004676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800467a:	4803      	ldr	r0, [pc, #12]	; (8004688 <BMP280_spiCSNhigh+0x1c>)
 800467c:	f002 f8ba 	bl	80067f4 <HAL_GPIO_WritePin>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40020c00 	.word	0x40020c00

0800468c <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800469a:	4803      	ldr	r0, [pc, #12]	; (80046a8 <BMP280_spiCSNlow+0x1c>)
 800469c:	f002 f8aa 	bl	80067f4 <HAL_GPIO_WritePin>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40020c00 	.word	0x40020c00

080046ac <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	da00      	bge.n	80046be <BMP280_compensate_temperature+0x12>
 80046bc:	3307      	adds	r3, #7
 80046be:	10db      	asrs	r3, r3, #3
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8b1b      	ldrh	r3, [r3, #24]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da01      	bge.n	80046dc <BMP280_compensate_temperature+0x30>
 80046d8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80046dc:	12db      	asrs	r3, r3, #11
 80046de:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da00      	bge.n	80046e8 <BMP280_compensate_temperature+0x3c>
 80046e6:	330f      	adds	r3, #15
 80046e8:	111b      	asrs	r3, r3, #4
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8b1b      	ldrh	r3, [r3, #24]
 80046f0:	1ad2      	subs	r2, r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da00      	bge.n	80046fa <BMP280_compensate_temperature+0x4e>
 80046f8:	330f      	adds	r3, #15
 80046fa:	111b      	asrs	r3, r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8b1b      	ldrh	r3, [r3, #24]
 8004702:	1acb      	subs	r3, r1, r3
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	da01      	bge.n	8004710 <BMP280_compensate_temperature+0x64>
 800470c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004710:	131b      	asrs	r3, r3, #12
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	da03      	bge.n	800472a <BMP280_compensate_temperature+0x7e>
 8004722:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004726:	441a      	add	r2, r3
 8004728:	4613      	mov	r3, r2
 800472a:	139b      	asrs	r3, r3, #14
 800472c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	3380      	adds	r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	da00      	bge.n	800474a <BMP280_compensate_temperature+0x9e>
 8004748:	33ff      	adds	r3, #255	; 0xff
 800474a:	121b      	asrs	r3, r3, #8
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b0d6      	sub	sp, #344	; 0x158
 800475e:	af00      	add	r7, sp, #0
 8004760:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8004764:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8004768:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	17da      	asrs	r2, r3, #31
 8004770:	461c      	mov	r4, r3
 8004772:	4615      	mov	r5, r2
 8004774:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8004778:	f145 3bff 	adc.w	fp, r5, #4294967295
 800477c:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8004780:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004784:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004788:	fb03 f102 	mul.w	r1, r3, r2
 800478c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004790:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	18ca      	adds	r2, r1, r3
 800479a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800479e:	fba3 8903 	umull	r8, r9, r3, r3
 80047a2:	eb02 0309 	add.w	r3, r2, r9
 80047a6:	4699      	mov	r9, r3
 80047a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047ac:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80047b0:	b21b      	sxth	r3, r3
 80047b2:	17da      	asrs	r2, r3, #31
 80047b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047b8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047bc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80047c0:	4603      	mov	r3, r0
 80047c2:	fb03 f209 	mul.w	r2, r3, r9
 80047c6:	460b      	mov	r3, r1
 80047c8:	fb08 f303 	mul.w	r3, r8, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	4602      	mov	r2, r0
 80047d0:	fba8 1202 	umull	r1, r2, r8, r2
 80047d4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80047d8:	460a      	mov	r2, r1
 80047da:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80047de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80047e2:	4413      	add	r3, r2
 80047e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047e8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80047ec:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80047f0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 80047f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047f8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	17da      	asrs	r2, r3, #31
 8004800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004804:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004808:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800480c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004810:	462a      	mov	r2, r5
 8004812:	fb02 f203 	mul.w	r2, r2, r3
 8004816:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800481a:	4621      	mov	r1, r4
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	441a      	add	r2, r3
 8004822:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004826:	4621      	mov	r1, r4
 8004828:	fba3 1301 	umull	r1, r3, r3, r1
 800482c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004830:	460b      	mov	r3, r1
 8004832:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004836:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800483a:	18d3      	adds	r3, r2, r3
 800483c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800484c:	462b      	mov	r3, r5
 800484e:	0459      	lsls	r1, r3, #17
 8004850:	4623      	mov	r3, r4
 8004852:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004856:	4623      	mov	r3, r4
 8004858:	0458      	lsls	r0, r3, #17
 800485a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800485e:	1814      	adds	r4, r2, r0
 8004860:	67bc      	str	r4, [r7, #120]	; 0x78
 8004862:	414b      	adcs	r3, r1
 8004864:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004866:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800486a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 800486e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004872:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004876:	b21b      	sxth	r3, r3
 8004878:	17da      	asrs	r2, r3, #31
 800487a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800487e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800488e:	00d9      	lsls	r1, r3, #3
 8004890:	2000      	movs	r0, #0
 8004892:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004896:	1814      	adds	r4, r2, r0
 8004898:	673c      	str	r4, [r7, #112]	; 0x70
 800489a:	414b      	adcs	r3, r1
 800489c:	677b      	str	r3, [r7, #116]	; 0x74
 800489e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80048a2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 80048a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048ae:	fb03 f102 	mul.w	r1, r3, r2
 80048b2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	18ca      	adds	r2, r1, r3
 80048c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048c4:	fba3 1303 	umull	r1, r3, r3, r3
 80048c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80048cc:	460b      	mov	r3, r1
 80048ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d6:	18d3      	adds	r3, r2, r3
 80048d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80048dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	17da      	asrs	r2, r3, #31
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048f0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80048f4:	462b      	mov	r3, r5
 80048f6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048fa:	4642      	mov	r2, r8
 80048fc:	fb02 f203 	mul.w	r2, r2, r3
 8004900:	464b      	mov	r3, r9
 8004902:	4621      	mov	r1, r4
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	4622      	mov	r2, r4
 800490c:	4641      	mov	r1, r8
 800490e:	fba2 1201 	umull	r1, r2, r2, r1
 8004912:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004916:	460a      	mov	r2, r1
 8004918:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800491c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004920:	4413      	add	r3, r2
 8004922:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004926:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800492a:	2b00      	cmp	r3, #0
 800492c:	da07      	bge.n	800493e <BMP280_compensate_pressure+0x1e6>
 800492e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004932:	66b9      	str	r1, [r7, #104]	; 0x68
 8004934:	f143 0300 	adc.w	r3, r3, #0
 8004938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800493a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0a10      	lsrs	r0, r2, #8
 8004948:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800494c:	1219      	asrs	r1, r3, #8
 800494e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004952:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004956:	b21b      	sxth	r3, r3
 8004958:	17da      	asrs	r2, r3, #31
 800495a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004962:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004966:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800496a:	464a      	mov	r2, r9
 800496c:	fb02 f203 	mul.w	r2, r2, r3
 8004970:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004974:	4644      	mov	r4, r8
 8004976:	fb04 f303 	mul.w	r3, r4, r3
 800497a:	441a      	add	r2, r3
 800497c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004980:	4644      	mov	r4, r8
 8004982:	fba3 4304 	umull	r4, r3, r3, r4
 8004986:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800498a:	4623      	mov	r3, r4
 800498c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004990:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80049a6:	464c      	mov	r4, r9
 80049a8:	0323      	lsls	r3, r4, #12
 80049aa:	4644      	mov	r4, r8
 80049ac:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80049b0:	4644      	mov	r4, r8
 80049b2:	0322      	lsls	r2, r4, #12
 80049b4:	1884      	adds	r4, r0, r2
 80049b6:	663c      	str	r4, [r7, #96]	; 0x60
 80049b8:	eb41 0303 	adc.w	r3, r1, r3
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64
 80049be:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80049c2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 80049c6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80049ca:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80049ce:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80049d2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80049d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049da:	8bdb      	ldrh	r3, [r3, #30]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049e8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80049ec:	462b      	mov	r3, r5
 80049ee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049f2:	4642      	mov	r2, r8
 80049f4:	fb02 f203 	mul.w	r2, r2, r3
 80049f8:	464b      	mov	r3, r9
 80049fa:	4621      	mov	r1, r4
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	4622      	mov	r2, r4
 8004a04:	4641      	mov	r1, r8
 8004a06:	fba2 1201 	umull	r1, r2, r2, r1
 8004a0a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004a0e:	460a      	mov	r2, r1
 8004a10:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004a14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a18:	4413      	add	r3, r2
 8004a1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a1e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da06      	bge.n	8004a34 <BMP280_compensate_pressure+0x2dc>
 8004a26:	1e51      	subs	r1, r2, #1
 8004a28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a2a:	f143 0301 	adc.w	r3, r3, #1
 8004a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	1058      	asrs	r0, r3, #1
 8004a3e:	17d9      	asrs	r1, r3, #31
 8004a40:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8004a44:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e182      	b.n	8004d56 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8004a50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a54:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004a58:	17da      	asrs	r2, r3, #31
 8004a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a5e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004a62:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8004a66:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004a6a:	f04f 0000 	mov.w	r0, #0
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	07d9      	lsls	r1, r3, #31
 8004a74:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8004a78:	07d0      	lsls	r0, r2, #31
 8004a7a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004a7e:	1a84      	subs	r4, r0, r2
 8004a80:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004a84:	eb61 0303 	sbc.w	r3, r1, r3
 8004a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a8c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004a90:	4622      	mov	r2, r4
 8004a92:	462b      	mov	r3, r5
 8004a94:	1891      	adds	r1, r2, r2
 8004a96:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a98:	415b      	adcs	r3, r3
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	1851      	adds	r1, r2, r1
 8004aa4:	6439      	str	r1, [r7, #64]	; 0x40
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ab8:	4649      	mov	r1, r9
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	1889      	adds	r1, r1, r2
 8004aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004acc:	4649      	mov	r1, r9
 8004ace:	eb43 0101 	adc.w	r1, r3, r1
 8004ad2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aea:	4641      	mov	r1, r8
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4622      	mov	r2, r4
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	460b      	mov	r3, r1
 8004afc:	462a      	mov	r2, r5
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004b10:	4649      	mov	r1, r9
 8004b12:	008b      	lsls	r3, r1, #2
 8004b14:	4641      	mov	r1, r8
 8004b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	008a      	lsls	r2, r1, #2
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4622      	mov	r2, r4
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b38:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004b3c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004b40:	f7fc f8ca 	bl	8000cd8 <__aeabi_ldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8004b4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b50:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	17da      	asrs	r2, r3, #31
 8004b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b5c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b60:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	da08      	bge.n	8004b7a <BMP280_compensate_pressure+0x422>
 8004b68:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004b6c:	1851      	adds	r1, r2, r1
 8004b6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b70:	f143 0300 	adc.w	r3, r3, #0
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	0b50      	lsrs	r0, r2, #13
 8004b84:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b88:	1359      	asrs	r1, r3, #13
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004b92:	4629      	mov	r1, r5
 8004b94:	fb02 f001 	mul.w	r0, r2, r1
 8004b98:	4621      	mov	r1, r4
 8004b9a:	fb01 f103 	mul.w	r1, r1, r3
 8004b9e:	4401      	add	r1, r0
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	fba0 2302 	umull	r2, r3, r0, r2
 8004ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004baa:	4613      	mov	r3, r2
 8004bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb4:	18cb      	adds	r3, r1, r3
 8004bb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da08      	bge.n	8004bd4 <BMP280_compensate_pressure+0x47c>
 8004bc2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004bc6:	1851      	adds	r1, r2, r1
 8004bc8:	6239      	str	r1, [r7, #32]
 8004bca:	f143 0300 	adc.w	r3, r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	0b50      	lsrs	r0, r2, #13
 8004bde:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004be2:	1359      	asrs	r1, r3, #13
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004bec:	4629      	mov	r1, r5
 8004bee:	fb02 f001 	mul.w	r0, r2, r1
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	fb01 f103 	mul.w	r1, r1, r3
 8004bf8:	4401      	add	r1, r0
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	fba0 2302 	umull	r2, r3, r0, r2
 8004c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c04:	4613      	mov	r3, r2
 8004c06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0e:	18cb      	adds	r3, r1, r3
 8004c10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c14:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da08      	bge.n	8004c2e <BMP280_compensate_pressure+0x4d6>
 8004c1c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004c20:	1851      	adds	r1, r2, r1
 8004c22:	61b9      	str	r1, [r7, #24]
 8004c24:	f143 0300 	adc.w	r3, r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0e50      	lsrs	r0, r2, #25
 8004c38:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004c3c:	1659      	asrs	r1, r3, #25
 8004c3e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8004c42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004c46:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	17da      	asrs	r2, r3, #31
 8004c4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c52:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c56:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c5a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004c5e:	462a      	mov	r2, r5
 8004c60:	fb02 f203 	mul.w	r2, r2, r3
 8004c64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c68:	4621      	mov	r1, r4
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	441a      	add	r2, r3
 8004c70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c74:	4621      	mov	r1, r4
 8004c76:	fba3 1301 	umull	r1, r3, r3, r1
 8004c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c7e:	460b      	mov	r3, r1
 8004c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c88:	18d3      	adds	r3, r2, r3
 8004c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c8e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004c92:	2900      	cmp	r1, #0
 8004c94:	da07      	bge.n	8004ca6 <BMP280_compensate_pressure+0x54e>
 8004c96:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <BMP280_compensate_pressure+0x60c>)
 8004c98:	18c3      	adds	r3, r0, r3
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	f141 0300 	adc.w	r3, r1, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	0cc2      	lsrs	r2, r0, #19
 8004cb0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004cb4:	14cb      	asrs	r3, r1, #19
 8004cb6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8004cba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004cbe:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004cc2:	1884      	adds	r4, r0, r2
 8004cc4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004cc8:	eb41 0303 	adc.w	r3, r1, r3
 8004ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004cd4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cd8:	4621      	mov	r1, r4
 8004cda:	1889      	adds	r1, r1, r2
 8004cdc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	eb43 0101 	adc.w	r1, r3, r1
 8004ce6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8004cea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da07      	bge.n	8004d02 <BMP280_compensate_pressure+0x5aa>
 8004cf2:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	f143 0300 	adc.w	r3, r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0a10      	lsrs	r0, r2, #8
 8004d0c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004d10:	1219      	asrs	r1, r3, #8
 8004d12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d16:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	17da      	asrs	r2, r3, #31
 8004d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d22:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004d32:	464c      	mov	r4, r9
 8004d34:	0123      	lsls	r3, r4, #4
 8004d36:	4644      	mov	r4, r8
 8004d38:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004d3c:	4644      	mov	r4, r8
 8004d3e:	0122      	lsls	r2, r4, #4
 8004d40:	1884      	adds	r4, r0, r2
 8004d42:	603c      	str	r4, [r7, #0]
 8004d44:	eb41 0303 	adc.w	r3, r1, r3
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8004d52:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	0007ffff 	.word	0x0007ffff

08004d68 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004d68:	b5b0      	push	{r4, r5, r7, lr}
 8004d6a:	b09c      	sub	sp, #112	; 0x70
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004d72:	2201      	movs	r2, #1
 8004d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d78:	482c      	ldr	r0, [pc, #176]	; (8004e2c <MPU_Init+0xc4>)
 8004d7a:	f001 fd3b 	bl	80067f4 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_250DPS;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d94:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <MPU_Init+0xc4>)
 8004d9c:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <MPU_Init+0xc8>)
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2200      	movs	r2, #0
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f843 	bl	8004e40 <MPU_begin>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d023      	beq.n	8004e08 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8004dc0:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <MPU_Init+0xcc>)
 8004dc2:	f107 040c 	add.w	r4, r7, #12
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	6828      	ldr	r0, [r5, #0]
 8004dca:	6869      	ldr	r1, [r5, #4]
 8004dcc:	68aa      	ldr	r2, [r5, #8]
 8004dce:	68eb      	ldr	r3, [r5, #12]
 8004dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dd2:	6928      	ldr	r0, [r5, #16]
 8004dd4:	6969      	ldr	r1, [r5, #20]
 8004dd6:	69aa      	ldr	r2, [r5, #24]
 8004dd8:	c407      	stmia	r4!, {r0, r1, r2}
 8004dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dde:	2248      	movs	r2, #72	; 0x48
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f00b fa0b 	bl	80101fe <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fa67 	bl	80002c0 <strlen>
 8004df2:	4603      	mov	r3, r0
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	f107 010c 	add.w	r1, r7, #12
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	480e      	ldr	r0, [pc, #56]	; (8004e38 <MPU_Init+0xd0>)
 8004e00:	f006 f8e8 	bl	800afd4 <HAL_UART_Transmit>
		return 1;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e00c      	b.n	8004e22 <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	490b      	ldr	r1, [pc, #44]	; (8004e3c <MPU_Init+0xd4>)
 8004e10:	4809      	ldr	r0, [pc, #36]	; (8004e38 <MPU_Init+0xd0>)
 8004e12:	f006 f8df 	bl	800afd4 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 10);
 8004e16:	220a      	movs	r2, #10
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f850 	bl	8004ec0 <MPU_calibrateGyro>

	return 0;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3770      	adds	r7, #112	; 0x70
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bdb0      	pop	{r4, r5, r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40020c00 	.word	0x40020c00
 8004e30:	3f7ae148 	.word	0x3f7ae148
 8004e34:	0801591c 	.word	0x0801591c
 8004e38:	20000ae4 	.word	0x20000ae4
 8004e3c:	08015908 	.word	0x08015908

08004e40 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8004e4a:	f107 030f 	add.w	r3, r7, #15
 8004e4e:	2201      	movs	r2, #1
 8004e50:	9200      	str	r2, [sp, #0]
 8004e52:	2275      	movs	r2, #117	; 0x75
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8bc 	bl	8004fd4 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b70      	cmp	r3, #112	; 0x70
 8004e60:	d129      	bne.n	8004eb6 <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8004e62:	236b      	movs	r3, #107	; 0x6b
 8004e64:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8004e66:	2300      	movs	r3, #0
 8004e68:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004e6a:	f107 030d 	add.w	r3, r7, #13
 8004e6e:	f107 020e 	add.w	r2, r7, #14
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f88c 	bl	8004f92 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8004e7a:	236a      	movs	r3, #106	; 0x6a
 8004e7c:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8004e7e:	2310      	movs	r3, #16
 8004e80:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004e82:	f107 030d 	add.w	r3, r7, #13
 8004e86:	f107 020e 	add.w	r2, r7, #14
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f880 	bl	8004f92 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8d5 	bl	800504c <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f935 	bl	800511c <MPU_writeGyroFullScaleRange>
        return 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8004eb6:	2300      	movs	r3, #0
    }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	827b      	strh	r3, [r7, #18]
 8004ee8:	e01e      	b.n	8004f28 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f97f 	bl	80051f0 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004f06:	461a      	mov	r2, r3
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8004f1c:	2003      	movs	r0, #3
 8004f1e:	f000 fdbd 	bl	8005a9c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8004f22:	8a7b      	ldrh	r3, [r7, #18]
 8004f24:	3301      	adds	r3, #1
 8004f26:	827b      	strh	r3, [r7, #18]
 8004f28:	8a7a      	ldrh	r2, [r7, #18]
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3dc      	bcc.n	8004eea <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 8004f8a:	bf00      	nop
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	68b8      	ldr	r0, [r7, #8]
 8004fa4:	f000 f83e 	bl	8005024 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8004fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fac:	2201      	movs	r2, #1
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f003 fb2a 	bl	800860a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8004fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fba:	2201      	movs	r2, #1
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f003 fb23 	bl	800860a <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	68b8      	ldr	r0, [r7, #8]
 8004fc8:	f000 f82c 	bl	8005024 <MPU_CS>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 f81c 	bl	8005024 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8004ff6:	f107 0117 	add.w	r1, r7, #23
 8004ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ffe:	2201      	movs	r2, #1
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f003 fb02 	bl	800860a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8005006:	8c3a      	ldrh	r2, [r7, #32]
 8005008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f003 fc69 	bl	80088e6 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8005014:	2101      	movs	r1, #1
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f000 f804 	bl	8005024 <MPU_CS>
}
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	4619      	mov	r1, r3
 800503e:	f001 fbd9 	bl	80067f4 <HAL_GPIO_WritePin>
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800505a:	231c      	movs	r3, #28
 800505c:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d847      	bhi.n	80050f4 <MPU_writeAccFullScaleRange+0xa8>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <MPU_writeAccFullScaleRange+0x20>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800509b 	.word	0x0800509b
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050d7 	.word	0x080050d7
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005082:	615a      	str	r2, [r3, #20]
        val = 0x00;
 8005084:	2300      	movs	r3, #0
 8005086:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005088:	f107 0316 	add.w	r3, r7, #22
 800508c:	f107 0217 	add.w	r2, r7, #23
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff7d 	bl	8004f92 <MPU_REG_WRITE>
        break;
 8005098:	e03b      	b.n	8005112 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80050a0:	615a      	str	r2, [r3, #20]
        val = 0x08;
 80050a2:	2308      	movs	r3, #8
 80050a4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050a6:	f107 0316 	add.w	r3, r7, #22
 80050aa:	f107 0217 	add.w	r2, r7, #23
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff6e 	bl	8004f92 <MPU_REG_WRITE>
        break;
 80050b6:	e02c      	b.n	8005112 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80050be:	615a      	str	r2, [r3, #20]
        val = 0x10;
 80050c0:	2310      	movs	r3, #16
 80050c2:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050c4:	f107 0316 	add.w	r3, r7, #22
 80050c8:	f107 0217 	add.w	r2, r7, #23
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff ff5f 	bl	8004f92 <MPU_REG_WRITE>
        break;
 80050d4:	e01d      	b.n	8005112 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80050dc:	615a      	str	r2, [r3, #20]
        val = 0x18;
 80050de:	2318      	movs	r3, #24
 80050e0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050e2:	f107 0316 	add.w	r3, r7, #22
 80050e6:	f107 0217 	add.w	r2, r7, #23
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff50 	bl	8004f92 <MPU_REG_WRITE>
        break;
 80050f2:	e00e      	b.n	8005112 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80050fa:	615a      	str	r2, [r3, #20]
        val = 0x08;
 80050fc:	2308      	movs	r3, #8
 80050fe:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005100:	f107 0316 	add.w	r3, r7, #22
 8005104:	f107 0217 	add.w	r2, r7, #23
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff ff41 	bl	8004f92 <MPU_REG_WRITE>
        break;
 8005110:	bf00      	nop
    }
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop

0800511c <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800512a:	231b      	movs	r3, #27
 800512c:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d843      	bhi.n	80051bc <MPU_writeGyroFullScaleRange+0xa0>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <MPU_writeGyroFullScaleRange+0x20>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	0800514d 	.word	0x0800514d
 8005140:	08005169 	.word	0x08005169
 8005144:	08005185 	.word	0x08005185
 8005148:	080051a1 	.word	0x080051a1
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <MPU_writeGyroFullScaleRange+0xc4>)
 8005150:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 8005152:	2300      	movs	r3, #0
 8005154:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005156:	f107 0316 	add.w	r3, r7, #22
 800515a:	f107 0217 	add.w	r2, r7, #23
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff16 	bl	8004f92 <MPU_REG_WRITE>
        break;
 8005166:	e037      	b.n	80051d8 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <MPU_writeGyroFullScaleRange+0xc8>)
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800516e:	2308      	movs	r3, #8
 8005170:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005172:	f107 0316 	add.w	r3, r7, #22
 8005176:	f107 0217 	add.w	r2, r7, #23
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff08 	bl	8004f92 <MPU_REG_WRITE>
        break;
 8005182:	e029      	b.n	80051d8 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <MPU_writeGyroFullScaleRange+0xcc>)
 8005188:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 800518a:	2310      	movs	r3, #16
 800518c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800518e:	f107 0316 	add.w	r3, r7, #22
 8005192:	f107 0217 	add.w	r2, r7, #23
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff fefa 	bl	8004f92 <MPU_REG_WRITE>
        break;
 800519e:	e01b      	b.n	80051d8 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <MPU_writeGyroFullScaleRange+0xd0>)
 80051a4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 80051a6:	2318      	movs	r3, #24
 80051a8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80051aa:	f107 0316 	add.w	r3, r7, #22
 80051ae:	f107 0217 	add.w	r2, r7, #23
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff feec 	bl	8004f92 <MPU_REG_WRITE>
        break;
 80051ba:	e00d      	b.n	80051d8 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <MPU_writeGyroFullScaleRange+0xc8>)
 80051c0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 80051c2:	2308      	movs	r3, #8
 80051c4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80051c6:	f107 0316 	add.w	r3, r7, #22
 80051ca:	f107 0217 	add.w	r2, r7, #23
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff fede 	bl	8004f92 <MPU_REG_WRITE>
        break;
 80051d6:	bf00      	nop
    }
}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	43030000 	.word	0x43030000
 80051e4:	42830000 	.word	0x42830000
 80051e8:	42033333 	.word	0x42033333
 80051ec:	41833333 	.word	0x41833333

080051f0 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	2226      	movs	r2, #38	; 0x26
 8005200:	9200      	str	r2, [sp, #0]
 8005202:	223b      	movs	r2, #59	; 0x3b
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fee4 	bl	8004fd4 <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800520c:	7a3b      	ldrb	r3, [r7, #8]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	b21a      	sxth	r2, r3
 8005212:	7a7b      	ldrb	r3, [r7, #9]
 8005214:	b21b      	sxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b21a      	sxth	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800521e:	7abb      	ldrb	r3, [r7, #10]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	b21a      	sxth	r2, r3
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	b21b      	sxth	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b21a      	sxth	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 8005230:	7b3b      	ldrb	r3, [r7, #12]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b21a      	sxth	r2, r3
 8005236:	7b7b      	ldrb	r3, [r7, #13]
 8005238:	b21b      	sxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b21a      	sxth	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	b21a      	sxth	r2, r3
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	b21b      	sxth	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b21a      	sxth	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 8005254:	7c3b      	ldrb	r3, [r7, #16]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	b21a      	sxth	r2, r3
 800525a:	7c7b      	ldrb	r3, [r7, #17]
 800525c:	b21b      	sxth	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b21b      	sxth	r3, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	425b      	negs	r3, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	b21a      	sxth	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 800526e:	7cbb      	ldrb	r3, [r7, #18]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	b21a      	sxth	r2, r3
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	b21b      	sxth	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b21b      	sxth	r3, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	425b      	negs	r3, r3
 8005280:	b29b      	uxth	r3, r3
 8005282:	b21a      	sxth	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 8005288:	7d3b      	ldrb	r3, [r7, #20]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	b21a      	sxth	r2, r3
 800528e:	7d7b      	ldrb	r3, [r7, #21]
 8005290:	b21b      	sxth	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b21b      	sxth	r3, r3
 8005296:	b29b      	uxth	r3, r3
 8005298:	425b      	negs	r3, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	b21a      	sxth	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 80052a2:	bf00      	nop
 80052a4:	3730      	adds	r7, #48	; 0x30
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	0000      	movs	r0, r0
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff97 	bl	80051f0 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80052d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80052f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f926 	bl	8000574 <__aeabi_i2d>
 8005328:	a336      	add	r3, pc, #216	; (adr r3, 8005404 <MPU_readProcessedData+0x154>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb fab5 	bl	800089c <__aeabi_ddiv>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <MPU_readProcessedData+0x150>)
 8005340:	f7fa ffcc 	bl	80002dc <__adddf3>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f7fb fc74 	bl	8000c38 <__aeabi_d2f>
 8005350:	4602      	mov	r2, r0
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800536a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80053a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	40350000 	.word	0x40350000
 8005404:	851eb852 	.word	0x851eb852
 8005408:	4074ddeb 	.word	0x4074ddeb
 800540c:	00000000 	.word	0x00000000

08005410 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	ed2d 8b02 	vpush	{d8}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff45 	bl	80052b0 <MPU_readProcessedData>

    // Complementary filter
    float accelRoll = atan2f(pMPU9250->sensorData.ay, sqrt(pow(pMPU9250->sensorData.ax,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	ed93 8a07 	vldr	s16, [r3, #28]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb f8b1 	bl	8000598 <__aeabi_f2d>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8005660 <MPU_calcAttitude+0x250>
 800543e:	ec43 2b10 	vmov	d0, r2, r3
 8005442:	f00e ff75 	bl	8014330 <pow>
 8005446:	ec55 4b10 	vmov	r4, r5, d0
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fb f8a2 	bl	8000598 <__aeabi_f2d>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8005660 <MPU_calcAttitude+0x250>
 800545c:	ec43 2b10 	vmov	d0, r2, r3
 8005460:	f00e ff66 	bl	8014330 <pow>
 8005464:	ec53 2b10 	vmov	r2, r3, d0
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f7fa ff36 	bl	80002dc <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	ec43 2b17 	vmov	d7, r2, r3
 8005478:	eeb0 0a47 	vmov.f32	s0, s14
 800547c:	eef0 0a67 	vmov.f32	s1, s15
 8005480:	f00e ffc6 	bl	8014410 <sqrt>
 8005484:	ec53 2b10 	vmov	r2, r3, d0
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f7fb fbd4 	bl	8000c38 <__aeabi_d2f>
 8005490:	4603      	mov	r3, r0
 8005492:	ee00 3a90 	vmov	s1, r3
 8005496:	eeb0 0a48 	vmov.f32	s0, s16
 800549a:	f00e ffe5 	bl	8014468 <atan2f>
 800549e:	ee10 3a10 	vmov	r3, s0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fb f878 	bl	8000598 <__aeabi_f2d>
 80054a8:	a370      	add	r3, pc, #448	; (adr r3, 800566c <MPU_calcAttitude+0x25c>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fb f8cb 	bl	8000648 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4610      	mov	r0, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	f7fb fbbd 	bl	8000c38 <__aeabi_d2f>
 80054be:	4603      	mov	r3, r0
 80054c0:	617b      	str	r3, [r7, #20]
    float accelPitch = atan2f(-(pMPU9250->sensorData.ax), sqrt(pow(pMPU9250->sensorData.ay,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80054c8:	eeb1 8a67 	vneg.f32	s16, s15
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fb f861 	bl	8000598 <__aeabi_f2d>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8005660 <MPU_calcAttitude+0x250>
 80054de:	ec43 2b10 	vmov	d0, r2, r3
 80054e2:	f00e ff25 	bl	8014330 <pow>
 80054e6:	ec55 4b10 	vmov	r4, r5, d0
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fb f852 	bl	8000598 <__aeabi_f2d>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8005660 <MPU_calcAttitude+0x250>
 80054fc:	ec43 2b10 	vmov	d0, r2, r3
 8005500:	f00e ff16 	bl	8014330 <pow>
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	4620      	mov	r0, r4
 800550a:	4629      	mov	r1, r5
 800550c:	f7fa fee6 	bl	80002dc <__adddf3>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	ec43 2b17 	vmov	d7, r2, r3
 8005518:	eeb0 0a47 	vmov.f32	s0, s14
 800551c:	eef0 0a67 	vmov.f32	s1, s15
 8005520:	f00e ff76 	bl	8014410 <sqrt>
 8005524:	ec53 2b10 	vmov	r2, r3, d0
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb fb84 	bl	8000c38 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
 8005532:	ee00 3a90 	vmov	s1, r3
 8005536:	eeb0 0a48 	vmov.f32	s0, s16
 800553a:	f00e ff95 	bl	8014468 <atan2f>
 800553e:	ee10 3a10 	vmov	r3, s0
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb f828 	bl	8000598 <__aeabi_f2d>
 8005548:	a348      	add	r3, pc, #288	; (adr r3, 800566c <MPU_calcAttitude+0x25c>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f87b 	bl	8000648 <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fb fb6d 	bl	8000c38 <__aeabi_d2f>
 800555e:	4603      	mov	r3, r0
 8005560:	613b      	str	r3, [r7, #16]

    // Calculating dt
    uint32_t currentTick = xTaskGetTickCount();
 8005562:	f008 fd33 	bl	800dfcc <xTaskGetTickCount>
 8005566:	4603      	mov	r3, r0
 8005568:	60fb      	str	r3, [r7, #12]
    if (pMPU9250->attitude.lastTick == 0 && pMPU9250->attitude.dt == 0)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	2b00      	cmp	r3, #0
 8005570:	d107      	bne.n	8005582 <MPU_calcAttitude+0x172>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005578:	eef5 7a40 	vcmp.f32	s15, #0.0
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d00e      	beq.n	80055a0 <MPU_calcAttitude+0x190>
    	{}
    else
    	pMPU9250->attitude.dt = (currentTick - pMPU9250->attitude.lastTick) / 1000.0f;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005592:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005668 <MPU_calcAttitude+0x258>
 8005596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.lastTick = currentTick;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54

    //pMPU9250->attitude.roll += (pMPU9250->sensorData.gx * pMPU9250->attitude.dt);
    pMPU9250->attitude.roll = pMPU9250->attitude.tau * (pMPU9250->attitude.roll + pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelRoll;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80055be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80055d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80055d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80055dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    //pMPU9250->attitude.pitch += (pMPU9250->sensorData.gy * pMPU9250->attitude.dt);
    pMPU9250->attitude.pitch = pMPU9250->attitude.tau * (pMPU9250->attitude.pitch + pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelPitch;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005602:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005618:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800561c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    pMPU9250->attitude.yaw += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	ecbd 8b02 	vpop	{d8}
 8005658:	bdb0      	pop	{r4, r5, r7, pc}
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w
 8005660:	00000000 	.word	0x00000000
 8005664:	40000000 	.word	0x40000000
 8005668:	447a0000 	.word	0x447a0000
 800566c:	1a63cbb0 	.word	0x1a63cbb0
 8005670:	404ca5dc 	.word	0x404ca5dc

08005674 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a21      	ldr	r2, [pc, #132]	; (8005708 <HCSR04_Init+0x94>)
 8005682:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800568a:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HCSR04_Init+0x98>)
 8005690:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	226c      	movs	r2, #108	; 0x6c
 800569c:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80056b4:	e019      	b.n	80056ea <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d104      	bne.n	80056c8 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80056c6:	e010      	b.n	80056ea <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d104      	bne.n	80056da <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2204      	movs	r2, #4
 80056d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80056d8:	e007      	b.n	80056ea <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b0c      	cmp	r3, #12
 80056e0:	d103      	bne.n	80056ea <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2208      	movs	r2, #8
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f003 fe9a 	bl	8009424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6838      	ldr	r0, [r7, #0]
 80056f8:	f004 f8c0 	bl	800987c <HAL_TIM_IC_Start_IT>

	return 0;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40020c00 	.word	0x40020c00
 800570c:	40000400 	.word	0x40000400

08005710 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	429a      	cmp	r2, r3
 8005728:	f040 812e 	bne.w	8005988 <HCSR04_TMR_IC_ISR+0x278>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	7f1a      	ldrb	r2, [r3, #28]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005736:	429a      	cmp	r2, r3
 8005738:	f040 8126 	bne.w	8005988 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7d5b      	ldrb	r3, [r3, #21]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d16d      	bne.n	8005820 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4619      	mov	r1, r3
 800574a:	6838      	ldr	r0, [r7, #0]
 800574c:	f004 fd80 	bl	800a250 <HAL_TIM_ReadCapturedValue>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <HCSR04_TMR_IC_ISR+0x66>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 020a 	bic.w	r2, r2, #10
 8005772:	621a      	str	r2, [r3, #32]
 8005774:	e021      	b.n	80057ba <HCSR04_TMR_IC_ISR+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d108      	bne.n	8005790 <HCSR04_TMR_IC_ISR+0x80>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800578c:	6213      	str	r3, [r2, #32]
 800578e:	e014      	b.n	80057ba <HCSR04_TMR_IC_ISR+0xaa>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d108      	bne.n	80057aa <HCSR04_TMR_IC_ISR+0x9a>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057a6:	6213      	str	r3, [r2, #32]
 80057a8:	e007      	b.n	80057ba <HCSR04_TMR_IC_ISR+0xaa>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057b8:	6213      	str	r3, [r2, #32]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HCSR04_TMR_IC_ISR+0xc4>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0202 	orr.w	r2, r2, #2
 80057d0:	621a      	str	r2, [r3, #32]
 80057d2:	e021      	b.n	8005818 <HCSR04_TMR_IC_ISR+0x108>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d108      	bne.n	80057ee <HCSR04_TMR_IC_ISR+0xde>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	f043 0320 	orr.w	r3, r3, #32
 80057ea:	6213      	str	r3, [r2, #32]
 80057ec:	e014      	b.n	8005818 <HCSR04_TMR_IC_ISR+0x108>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d108      	bne.n	8005808 <HCSR04_TMR_IC_ISR+0xf8>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005804:	6213      	str	r3, [r2, #32]
 8005806:	e007      	b.n	8005818 <HCSR04_TMR_IC_ISR+0x108>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005816:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800581e:	e0b3      	b.n	8005988 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7d5b      	ldrb	r3, [r3, #21]
 8005824:	2b01      	cmp	r3, #1
 8005826:	f040 80af 	bne.w	8005988 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4619      	mov	r1, r3
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f004 fd04 	bl	800a250 <HAL_TIM_ReadCapturedValue>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	429a      	cmp	r2, r3
 8005858:	d207      	bcs.n	800586a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
 8005868:	e00f      	b.n	800588a <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	429a      	cmp	r2, r3
 8005874:	d209      	bcs.n	800588a <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005884:	4413      	add	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005896:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005990 <HCSR04_TMR_IC_ISR+0x280>
 800589a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800589e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005994 <HCSR04_TMR_IC_ISR+0x284>
 80058a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80058aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <HCSR04_TMR_IC_ISR+0x1dc>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 020a 	bic.w	r2, r2, #10
 80058e8:	621a      	str	r2, [r3, #32]
 80058ea:	e021      	b.n	8005930 <HCSR04_TMR_IC_ISR+0x220>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d108      	bne.n	8005906 <HCSR04_TMR_IC_ISR+0x1f6>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005902:	6213      	str	r3, [r2, #32]
 8005904:	e014      	b.n	8005930 <HCSR04_TMR_IC_ISR+0x220>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d108      	bne.n	8005920 <HCSR04_TMR_IC_ISR+0x210>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800591c:	6213      	str	r3, [r2, #32]
 800591e:	e007      	b.n	8005930 <HCSR04_TMR_IC_ISR+0x220>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800592e:	6213      	str	r3, [r2, #32]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HCSR04_TMR_IC_ISR+0x236>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a12      	ldr	r2, [r2, #32]
 8005942:	621a      	str	r2, [r3, #32]
 8005944:	e01b      	b.n	800597e <HCSR04_TMR_IC_ISR+0x26e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d106      	bne.n	800595c <HCSR04_TMR_IC_ISR+0x24c>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	6213      	str	r3, [r2, #32]
 800595a:	e010      	b.n	800597e <HCSR04_TMR_IC_ISR+0x26e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d106      	bne.n	8005972 <HCSR04_TMR_IC_ISR+0x262>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	6213      	str	r3, [r2, #32]
 8005970:	e005      	b.n	800597e <HCSR04_TMR_IC_ISR+0x26e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HCSR04_TMR_IC_ISR+0x288>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f007 f95e 	bl	800cc44 <osSemaphoreRelease>
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	447a0000 	.word	0x447a0000
 8005994:	43aa0000 	.word	0x43aa0000
 8005998:	20000bfc 	.word	0x20000bfc

0800599c <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	889b      	ldrh	r3, [r3, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	4619      	mov	r1, r3
 80059b0:	f000 ff20 	bl	80067f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f000 f871 	bl	8005a9c <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	889b      	ldrh	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	4619      	mov	r1, r3
 80059c6:	f000 ff15 	bl	80067f4 <HAL_GPIO_WritePin>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	ee07 3a90 	vmov	s15, r3
}
 80059e2:	eeb0 0a67 	vmov.f32	s0, s15
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80059f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059f4:	480d      	ldr	r0, [pc, #52]	; (8005a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059f6:	490e      	ldr	r1, [pc, #56]	; (8005a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059f8:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059fc:	e002      	b.n	8005a04 <LoopCopyDataInit>

080059fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a02:	3304      	adds	r3, #4

08005a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a08:	d3f9      	bcc.n	80059fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a0a:	4a0b      	ldr	r2, [pc, #44]	; (8005a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a0c:	4c0b      	ldr	r4, [pc, #44]	; (8005a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a10:	e001      	b.n	8005a16 <LoopFillZerobss>

08005a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a14:	3204      	adds	r2, #4

08005a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a18:	d3fb      	bcc.n	8005a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a1a:	f7fe f80f 	bl	8003a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a1e:	f00a fcaf 	bl	8010380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a22:	f7fc fe05 	bl	8002630 <main>
  bx  lr    
 8005a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a28:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a30:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005a34:	08015e30 	.word	0x08015e30
  ldr r2, =_sbss
 8005a38:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005a3c:	20004af4 	.word	0x20004af4

08005a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a40:	e7fe      	b.n	8005a40 <ADC_IRQHandler>

08005a42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a46:	2003      	movs	r0, #3
 8005a48:	f000 f8f9 	bl	8005c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a4c:	200f      	movs	r0, #15
 8005a4e:	f7fd fe6d 	bl	800372c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a52:	f7fd fb9b 	bl	800318c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <HAL_IncTick+0x20>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_IncTick+0x24>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <HAL_IncTick+0x24>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000010 	.word	0x20000010
 8005a80:	20000c58 	.word	0x20000c58

08005a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return uwTick;
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <HAL_GetTick+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000c58 	.word	0x20000c58

08005a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7ff ffee 	bl	8005a84 <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d005      	beq.n	8005ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_Delay+0x44>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ac2:	bf00      	nop
 8005ac4:	f7ff ffde 	bl	8005a84 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d8f7      	bhi.n	8005ac4 <HAL_Delay+0x28>
  {
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000010 	.word	0x20000010

08005ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <__NVIC_SetPriorityGrouping+0x40>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b00:	4013      	ands	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <__NVIC_SetPriorityGrouping+0x44>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b12:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <__NVIC_SetPriorityGrouping+0x40>)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	60d3      	str	r3, [r2, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	e000ed00 	.word	0xe000ed00
 8005b28:	05fa0000 	.word	0x05fa0000

08005b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <__NVIC_GetPriorityGrouping+0x18>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	f003 0307 	and.w	r3, r3, #7
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	db0b      	blt.n	8005b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	f003 021f 	and.w	r2, r3, #31
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <__NVIC_EnableIRQ+0x38>)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2001      	movs	r0, #1
 8005b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e100 	.word	0xe000e100

08005b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db0a      	blt.n	8005bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <__NVIC_SetPriority+0x4c>)
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bac:	e00a      	b.n	8005bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <__NVIC_SetPriority+0x50>)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	0112      	lsls	r2, r2, #4
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	761a      	strb	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b089      	sub	sp, #36	; 0x24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f1c3 0307 	rsb	r3, r3, #7
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	bf28      	it	cs
 8005bf6:	2304      	movcs	r3, #4
 8005bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d902      	bls.n	8005c08 <NVIC_EncodePriority+0x30>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3b03      	subs	r3, #3
 8005c06:	e000      	b.n	8005c0a <NVIC_EncodePriority+0x32>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43da      	mvns	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c20:	f04f 31ff 	mov.w	r1, #4294967295
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	43d9      	mvns	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c30:	4313      	orrs	r3, r2
         );
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3724      	adds	r7, #36	; 0x24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ff4c 	bl	8005ae4 <__NVIC_SetPriorityGrouping>
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c66:	f7ff ff61 	bl	8005b2c <__NVIC_GetPriorityGrouping>
 8005c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f7ff ffb1 	bl	8005bd8 <NVIC_EncodePriority>
 8005c76:	4602      	mov	r2, r0
 8005c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff80 	bl	8005b84 <__NVIC_SetPriority>
}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff ff54 	bl	8005b48 <__NVIC_EnableIRQ>
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cb4:	f7ff fee6 	bl	8005a84 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e099      	b.n	8005df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce4:	e00f      	b.n	8005d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ce6:	f7ff fecd 	bl	8005a84 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d908      	bls.n	8005d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e078      	b.n	8005df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e8      	bne.n	8005ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4b38      	ldr	r3, [pc, #224]	; (8005e00 <HAL_DMA_Init+0x158>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d107      	bne.n	8005d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d117      	bne.n	8005dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fb09 	bl	80063c4 <DMA_CheckFifoParam>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e016      	b.n	8005df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fac0 	bl	8006358 <DMA_CalcBaseAndBitshift>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	223f      	movs	r2, #63	; 0x3f
 8005de2:	409a      	lsls	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	e010803f 	.word	0xe010803f

08005e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_DMA_Start_IT+0x26>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e048      	b.n	8005ebc <HAL_DMA_Start_IT+0xb8>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d137      	bne.n	8005eae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fa52 	bl	80062fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5c:	223f      	movs	r2, #63	; 0x3f
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0216 	orr.w	r2, r2, #22
 8005e72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e005      	b.n	8005eba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ed2:	f7ff fdd7 	bl	8005a84 <HAL_GetTick>
 8005ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d008      	beq.n	8005ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e052      	b.n	8005f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0216 	bic.w	r2, r2, #22
 8005f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_DMA_Abort+0x62>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0208 	bic.w	r2, r2, #8
 8005f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f46:	e013      	b.n	8005f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f48:	f7ff fd9c 	bl	8005a84 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d90c      	bls.n	8005f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e015      	b.n	8005f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e4      	bne.n	8005f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	223f      	movs	r2, #63	; 0x3f
 8005f84:	409a      	lsls	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2280      	movs	r2, #128	; 0x80
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e00c      	b.n	8005fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2205      	movs	r2, #5
 8005fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005ff4:	4b8e      	ldr	r3, [pc, #568]	; (8006230 <HAL_DMA_IRQHandler+0x248>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a8e      	ldr	r2, [pc, #568]	; (8006234 <HAL_DMA_IRQHandler+0x24c>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	0a9b      	lsrs	r3, r3, #10
 8006000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006012:	2208      	movs	r2, #8
 8006014:	409a      	lsls	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01a      	beq.n	8006054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0204 	bic.w	r2, r2, #4
 800603a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	2208      	movs	r2, #8
 8006042:	409a      	lsls	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	f043 0201 	orr.w	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	2201      	movs	r2, #1
 800605a:	409a      	lsls	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	2201      	movs	r2, #1
 8006078:	409a      	lsls	r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	f043 0202 	orr.w	r2, r3, #2
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	2204      	movs	r2, #4
 8006090:	409a      	lsls	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d012      	beq.n	80060c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	2204      	movs	r2, #4
 80060ae:	409a      	lsls	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	f043 0204 	orr.w	r2, r3, #4
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	2210      	movs	r2, #16
 80060c6:	409a      	lsls	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d043      	beq.n	8006158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03c      	beq.n	8006158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e2:	2210      	movs	r2, #16
 80060e4:	409a      	lsls	r2, r3
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d018      	beq.n	800612a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d024      	beq.n	8006158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	e01f      	b.n	8006158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
 8006128:	e016      	b.n	8006158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d107      	bne.n	8006148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0208 	bic.w	r2, r2, #8
 8006146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	2220      	movs	r2, #32
 800615e:	409a      	lsls	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 808f 	beq.w	8006288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8087 	beq.w	8006288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	2220      	movs	r2, #32
 8006180:	409a      	lsls	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b05      	cmp	r3, #5
 8006190:	d136      	bne.n	8006200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0216 	bic.w	r2, r2, #22
 80061a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <HAL_DMA_IRQHandler+0x1da>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0208 	bic.w	r2, r2, #8
 80061d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d6:	223f      	movs	r2, #63	; 0x3f
 80061d8:	409a      	lsls	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d07e      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
        }
        return;
 80061fe:	e079      	b.n	80062f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01d      	beq.n	800624a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006220:	2b00      	cmp	r3, #0
 8006222:	d031      	beq.n	8006288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
 800622c:	e02c      	b.n	8006288 <HAL_DMA_IRQHandler+0x2a0>
 800622e:	bf00      	nop
 8006230:	20000008 	.word	0x20000008
 8006234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d023      	beq.n	8006288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
 8006248:	e01e      	b.n	8006288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10f      	bne.n	8006278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0210 	bic.w	r2, r2, #16
 8006266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	2b00      	cmp	r3, #0
 800628e:	d032      	beq.n	80062f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2205      	movs	r2, #5
 80062a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d307      	bcc.n	80062d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f2      	bne.n	80062b4 <HAL_DMA_IRQHandler+0x2cc>
 80062ce:	e000      	b.n	80062d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
 80062f2:	e000      	b.n	80062f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062f4:	bf00      	nop
    }
  }
}
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d108      	bne.n	800633c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800633a:	e007      	b.n	800634c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	3b10      	subs	r3, #16
 8006368:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <DMA_CalcBaseAndBitshift+0x60>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	091b      	lsrs	r3, r3, #4
 8006370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006372:	4a12      	ldr	r2, [pc, #72]	; (80063bc <DMA_CalcBaseAndBitshift+0x64>)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d908      	bls.n	8006398 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <DMA_CalcBaseAndBitshift+0x68>)
 800638e:	4013      	ands	r3, r2
 8006390:	1d1a      	adds	r2, r3, #4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	659a      	str	r2, [r3, #88]	; 0x58
 8006396:	e006      	b.n	80063a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <DMA_CalcBaseAndBitshift+0x68>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	aaaaaaab 	.word	0xaaaaaaab
 80063bc:	08015964 	.word	0x08015964
 80063c0:	fffffc00 	.word	0xfffffc00

080063c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d11f      	bne.n	800641e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d856      	bhi.n	8006492 <DMA_CheckFifoParam+0xce>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <DMA_CheckFifoParam+0x28>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	0800640f 	.word	0x0800640f
 80063f4:	080063fd 	.word	0x080063fd
 80063f8:	08006493 	.word	0x08006493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d046      	beq.n	8006496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640c:	e043      	b.n	8006496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006416:	d140      	bne.n	800649a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800641c:	e03d      	b.n	800649a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d121      	bne.n	800646c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d837      	bhi.n	800649e <DMA_CheckFifoParam+0xda>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <DMA_CheckFifoParam+0x70>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006445 	.word	0x08006445
 8006438:	0800644b 	.word	0x0800644b
 800643c:	08006445 	.word	0x08006445
 8006440:	0800645d 	.word	0x0800645d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e030      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d025      	beq.n	80064a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645a:	e022      	b.n	80064a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006464:	d11f      	bne.n	80064a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800646a:	e01c      	b.n	80064a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d903      	bls.n	800647a <DMA_CheckFifoParam+0xb6>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d003      	beq.n	8006480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006478:	e018      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
      break;
 800647e:	e015      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e00b      	b.n	80064aa <DMA_CheckFifoParam+0xe6>
      break;
 8006492:	bf00      	nop
 8006494:	e00a      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;
 8006496:	bf00      	nop
 8006498:	e008      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;
 800649a:	bf00      	nop
 800649c:	e006      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;
 800649e:	bf00      	nop
 80064a0:	e004      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;   
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <DMA_CheckFifoParam+0xe8>
      break;
 80064aa:	bf00      	nop
    }
  } 
  
  return status; 
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	e169      	b.n	80067b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80064dc:	2201      	movs	r2, #1
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4013      	ands	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	f040 8158 	bne.w	80067aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d005      	beq.n	8006512 <HAL_GPIO_Init+0x56>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d130      	bne.n	8006574 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	2203      	movs	r2, #3
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006548:	2201      	movs	r2, #1
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 0201 	and.w	r2, r3, #1
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d017      	beq.n	80065b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	2203      	movs	r2, #3
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d123      	bne.n	8006604 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	08da      	lsrs	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3208      	adds	r2, #8
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	220f      	movs	r2, #15
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	43db      	mvns	r3, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	08da      	lsrs	r2, r3, #3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3208      	adds	r2, #8
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	2203      	movs	r2, #3
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f003 0203 	and.w	r2, r3, #3
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4313      	orrs	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80b2 	beq.w	80067aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006646:	4b60      	ldr	r3, [pc, #384]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	4a5f      	ldr	r2, [pc, #380]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 800664c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006650:	6453      	str	r3, [r2, #68]	; 0x44
 8006652:	4b5d      	ldr	r3, [pc, #372]	; (80067c8 <HAL_GPIO_Init+0x30c>)
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800665e:	4a5b      	ldr	r2, [pc, #364]	; (80067cc <HAL_GPIO_Init+0x310>)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	3302      	adds	r3, #2
 8006666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	220f      	movs	r2, #15
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a52      	ldr	r2, [pc, #328]	; (80067d0 <HAL_GPIO_Init+0x314>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d02b      	beq.n	80066e2 <HAL_GPIO_Init+0x226>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a51      	ldr	r2, [pc, #324]	; (80067d4 <HAL_GPIO_Init+0x318>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d025      	beq.n	80066de <HAL_GPIO_Init+0x222>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a50      	ldr	r2, [pc, #320]	; (80067d8 <HAL_GPIO_Init+0x31c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01f      	beq.n	80066da <HAL_GPIO_Init+0x21e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a4f      	ldr	r2, [pc, #316]	; (80067dc <HAL_GPIO_Init+0x320>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d019      	beq.n	80066d6 <HAL_GPIO_Init+0x21a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4e      	ldr	r2, [pc, #312]	; (80067e0 <HAL_GPIO_Init+0x324>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_GPIO_Init+0x216>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4d      	ldr	r2, [pc, #308]	; (80067e4 <HAL_GPIO_Init+0x328>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00d      	beq.n	80066ce <HAL_GPIO_Init+0x212>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a4c      	ldr	r2, [pc, #304]	; (80067e8 <HAL_GPIO_Init+0x32c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d007      	beq.n	80066ca <HAL_GPIO_Init+0x20e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <HAL_GPIO_Init+0x330>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_GPIO_Init+0x20a>
 80066c2:	2307      	movs	r3, #7
 80066c4:	e00e      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066c6:	2308      	movs	r3, #8
 80066c8:	e00c      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066ca:	2306      	movs	r3, #6
 80066cc:	e00a      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066ce:	2305      	movs	r3, #5
 80066d0:	e008      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066d2:	2304      	movs	r3, #4
 80066d4:	e006      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066d6:	2303      	movs	r3, #3
 80066d8:	e004      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066da:	2302      	movs	r3, #2
 80066dc:	e002      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <HAL_GPIO_Init+0x228>
 80066e2:	2300      	movs	r3, #0
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	f002 0203 	and.w	r2, r2, #3
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	4093      	lsls	r3, r2
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80066f4:	4935      	ldr	r1, [pc, #212]	; (80067cc <HAL_GPIO_Init+0x310>)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	3302      	adds	r3, #2
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006726:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_GPIO_Init+0x334>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006750:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_GPIO_Init+0x334>)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_GPIO_Init+0x334>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	43db      	mvns	r3, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <HAL_GPIO_Init+0x334>)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	f67f ae92 	bls.w	80064dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40013800 	.word	0x40013800
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020400 	.word	0x40020400
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40021400 	.word	0x40021400
 80067e8:	40021800 	.word	0x40021800
 80067ec:	40021c00 	.word	0x40021c00
 80067f0:	40013c00 	.word	0x40013c00

080067f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
 8006800:	4613      	mov	r3, r2
 8006802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006804:	787b      	ldrb	r3, [r7, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800680a:	887a      	ldrh	r2, [r7, #2]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006810:	e003      	b.n	800681a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	041a      	lsls	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	619a      	str	r2, [r3, #24]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e07f      	b.n	800693a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc fcc4 	bl	80031dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2224      	movs	r2, #36	; 0x24
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0201 	bic.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d107      	bne.n	80068a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	e006      	b.n	80068b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80068ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d104      	bne.n	80068c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <HAL_I2C_Init+0x11c>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69d9      	ldr	r1, [r3, #28]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	02008000 	.word	0x02008000

08006948 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	817b      	strh	r3, [r7, #10]
 800695a:	460b      	mov	r3, r1
 800695c:	813b      	strh	r3, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b20      	cmp	r3, #32
 800696c:	f040 80f9 	bne.w	8006b62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_I2C_Mem_Write+0x34>
 8006976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0ed      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_I2C_Mem_Write+0x4e>
 8006992:	2302      	movs	r3, #2
 8006994:	e0e6      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800699e:	f7ff f871 	bl	8005a84 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2319      	movs	r3, #25
 80069aa:	2201      	movs	r2, #1
 80069ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fac3 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0d1      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2221      	movs	r2, #33	; 0x21
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e8:	88f8      	ldrh	r0, [r7, #6]
 80069ea:	893a      	ldrh	r2, [r7, #8]
 80069ec:	8979      	ldrh	r1, [r7, #10]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4603      	mov	r3, r0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f9d3 	bl	8006da4 <I2C_RequestMemoryWrite>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0a9      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2bff      	cmp	r3, #255	; 0xff
 8006a18:	d90e      	bls.n	8006a38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	22ff      	movs	r2, #255	; 0xff
 8006a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	8979      	ldrh	r1, [r7, #10]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fc1f 	bl	8007274 <I2C_TransferConfig>
 8006a36:	e00f      	b.n	8006a58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	8979      	ldrh	r1, [r7, #10]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fc0e 	bl	8007274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 faad 	bl	8006fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e07b      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d034      	beq.n	8006b10 <HAL_I2C_Mem_Write+0x1c8>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d130      	bne.n	8006b10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fa3f 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e04d      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2bff      	cmp	r3, #255	; 0xff
 8006ad0:	d90e      	bls.n	8006af0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	8979      	ldrh	r1, [r7, #10]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fbc3 	bl	8007274 <I2C_TransferConfig>
 8006aee:	e00f      	b.n	8006b10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	8979      	ldrh	r1, [r7, #10]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fbb2 	bl	8007274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d19e      	bne.n	8006a58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa8c 	bl	800703c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e01a      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2220      	movs	r2, #32
 8006b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <HAL_I2C_Mem_Write+0x224>)
 8006b42:	400b      	ands	r3, r1
 8006b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e000      	b.n	8006b64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b62:	2302      	movs	r3, #2
  }
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	fe00e800 	.word	0xfe00e800

08006b70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	460b      	mov	r3, r1
 8006b84:	813b      	strh	r3, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	f040 80fd 	bne.w	8006d92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_I2C_Mem_Read+0x34>
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0f1      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_I2C_Mem_Read+0x4e>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0ea      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bc6:	f7fe ff5d 	bl	8005a84 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2319      	movs	r3, #25
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f9af 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0d5      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2222      	movs	r2, #34	; 0x22
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c10:	88f8      	ldrh	r0, [r7, #6]
 8006c12:	893a      	ldrh	r2, [r7, #8]
 8006c14:	8979      	ldrh	r1, [r7, #10]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4603      	mov	r3, r0
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f913 	bl	8006e4c <I2C_RequestMemoryRead>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0ad      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2bff      	cmp	r3, #255	; 0xff
 8006c40:	d90e      	bls.n	8006c60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	8979      	ldrh	r1, [r7, #10]
 8006c50:	4b52      	ldr	r3, [pc, #328]	; (8006d9c <HAL_I2C_Mem_Read+0x22c>)
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fb0b 	bl	8007274 <I2C_TransferConfig>
 8006c5e:	e00f      	b.n	8006c80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	8979      	ldrh	r1, [r7, #10]
 8006c72:	4b4a      	ldr	r3, [pc, #296]	; (8006d9c <HAL_I2C_Mem_Read+0x22c>)
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fafa 	bl	8007274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	2200      	movs	r2, #0
 8006c88:	2104      	movs	r1, #4
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f956 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e07c      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d034      	beq.n	8006d40 <HAL_I2C_Mem_Read+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d130      	bne.n	8006d40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f927 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e04d      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d90e      	bls.n	8006d20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	8979      	ldrh	r1, [r7, #10]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 faab 	bl	8007274 <I2C_TransferConfig>
 8006d1e:	e00f      	b.n	8006d40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	8979      	ldrh	r1, [r7, #10]
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fa9a 	bl	8007274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d19a      	bne.n	8006c80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f974 	bl	800703c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e01a      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2220      	movs	r2, #32
 8006d64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <HAL_I2C_Mem_Read+0x230>)
 8006d72:	400b      	ands	r3, r1
 8006d74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
  }
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	80002400 	.word	0x80002400
 8006da0:	fe00e800 	.word	0xfe00e800

08006da4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	817b      	strh	r3, [r7, #10]
 8006db6:	460b      	mov	r3, r1
 8006db8:	813b      	strh	r3, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	8979      	ldrh	r1, [r7, #10]
 8006dc4:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <I2C_RequestMemoryWrite+0xa4>)
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fa51 	bl	8007274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	69b9      	ldr	r1, [r7, #24]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8f0 	bl	8006fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e02c      	b.n	8006e40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d105      	bne.n	8006df8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dec:	893b      	ldrh	r3, [r7, #8]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	629a      	str	r2, [r3, #40]	; 0x28
 8006df6:	e015      	b.n	8006e24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006df8:	893b      	ldrh	r3, [r7, #8]
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f8d6 	bl	8006fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e012      	b.n	8006e40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e1a:	893b      	ldrh	r3, [r7, #8]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f884 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	80002000 	.word	0x80002000

08006e4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	817b      	strh	r3, [r7, #10]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	813b      	strh	r3, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	8979      	ldrh	r1, [r7, #10]
 8006e6c:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <I2C_RequestMemoryRead+0xa4>)
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	2300      	movs	r3, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f9fe 	bl	8007274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	69b9      	ldr	r1, [r7, #24]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f89d 	bl	8006fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e02c      	b.n	8006ee6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d105      	bne.n	8006e9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e92:	893b      	ldrh	r3, [r7, #8]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	e015      	b.n	8006eca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e9e:	893b      	ldrh	r3, [r7, #8]
 8006ea0:	0a1b      	lsrs	r3, r3, #8
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	69b9      	ldr	r1, [r7, #24]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f883 	bl	8006fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e012      	b.n	8006ee6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2140      	movs	r1, #64	; 0x40
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f831 	bl	8006f3c <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	80002000 	.word	0x80002000

08006ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d103      	bne.n	8006f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d007      	beq.n	8006f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	619a      	str	r2, [r3, #24]
  }
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f4c:	e022      	b.n	8006f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d01e      	beq.n	8006f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f56:	f7fe fd95 	bl	8005a84 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d113      	bne.n	8006f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e00f      	b.n	8006fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bf0c      	ite	eq
 8006fa4:	2301      	moveq	r3, #1
 8006fa6:	2300      	movne	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d0cd      	beq.n	8006f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fc8:	e02c      	b.n	8007024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f870 	bl	80070b4 <I2C_IsErrorOccurred>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e02a      	b.n	8007034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d01e      	beq.n	8007024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fe fd4d 	bl	8005a84 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d113      	bne.n	8007024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e007      	b.n	8007034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d1cb      	bne.n	8006fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007048:	e028      	b.n	800709c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f830 	bl	80070b4 <I2C_IsErrorOccurred>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e026      	b.n	80070ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fe fd11 	bl	8005a84 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d113      	bne.n	800709c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	f043 0220 	orr.w	r2, r3, #32
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e007      	b.n	80070ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d1cf      	bne.n	800704a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	; 0x28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d068      	beq.n	80071b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2210      	movs	r2, #16
 80070e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070e8:	e049      	b.n	800717e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d045      	beq.n	800717e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070f2:	f7fe fcc7 	bl	8005a84 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <I2C_IsErrorOccurred+0x54>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d13a      	bne.n	800717e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007112:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712a:	d121      	bne.n	8007170 <I2C_IsErrorOccurred+0xbc>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007132:	d01d      	beq.n	8007170 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007134:	7cfb      	ldrb	r3, [r7, #19]
 8007136:	2b20      	cmp	r3, #32
 8007138:	d01a      	beq.n	8007170 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007148:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800714a:	f7fe fc9b 	bl	8005a84 <HAL_GetTick>
 800714e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007150:	e00e      	b.n	8007170 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007152:	f7fe fc97 	bl	8005a84 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b19      	cmp	r3, #25
 800715e:	d907      	bls.n	8007170 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	f043 0320 	orr.w	r3, r3, #32
 8007166:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800716e:	e006      	b.n	800717e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b20      	cmp	r3, #32
 800717c:	d1e9      	bne.n	8007152 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b20      	cmp	r3, #32
 800718a:	d003      	beq.n	8007194 <I2C_IsErrorOccurred+0xe0>
 800718c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0aa      	beq.n	80070ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2220      	movs	r2, #32
 80071a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f043 0304 	orr.w	r3, r3, #4
 80071aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f043 0308 	orr.w	r3, r3, #8
 80071ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01c      	beq.n	8007262 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff fe63 	bl	8006ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6859      	ldr	r1, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <I2C_IsErrorOccurred+0x1bc>)
 800723a:	400b      	ands	r3, r1
 800723c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	fe00e800 	.word	0xfe00e800

08007274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	817b      	strh	r3, [r7, #10]
 8007282:	4613      	mov	r3, r2
 8007284:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007286:	897b      	ldrh	r3, [r7, #10]
 8007288:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800728c:	7a7b      	ldrb	r3, [r7, #9]
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007294:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	4313      	orrs	r3, r2
 800729e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	0d5b      	lsrs	r3, r3, #21
 80072ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <I2C_TransferConfig+0x60>)
 80072b4:	430b      	orrs	r3, r1
 80072b6:	43db      	mvns	r3, r3
 80072b8:	ea02 0103 	and.w	r1, r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	03ff63ff 	.word	0x03ff63ff

080072d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d138      	bne.n	8007360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e032      	b.n	8007362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2224      	movs	r2, #36	; 0x24
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0201 	bic.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800732a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b20      	cmp	r3, #32
 8007382:	d139      	bne.n	80073f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800738e:	2302      	movs	r3, #2
 8007390:	e033      	b.n	80073fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2224      	movs	r2, #36	; 0x24
 800739e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e000      	b.n	80073fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007412:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741c:	6413      	str	r3, [r2, #64]	; 0x40
 800741e:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007436:	f7fe fb25 	bl	8005a84 <HAL_GetTick>
 800743a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800743c:	e009      	b.n	8007452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800743e:	f7fe fb21 	bl	8005a84 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800744c:	d901      	bls.n	8007452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e022      	b.n	8007498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745e:	d1ee      	bne.n	800743e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007460:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800746c:	f7fe fb0a 	bl	8005a84 <HAL_GetTick>
 8007470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007472:	e009      	b.n	8007488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007474:	f7fe fb06 	bl	8005a84 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007482:	d901      	bls.n	8007488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e007      	b.n	8007498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007494:	d1ee      	bne.n	8007474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40007000 	.word	0x40007000

080074a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e291      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8087 	beq.w	80075da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074cc:	4b96      	ldr	r3, [pc, #600]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00c      	beq.n	80074f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d8:	4b93      	ldr	r3, [pc, #588]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d112      	bne.n	800750a <HAL_RCC_OscConfig+0x62>
 80074e4:	4b90      	ldr	r3, [pc, #576]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d10b      	bne.n	800750a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	4b8d      	ldr	r3, [pc, #564]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d06c      	beq.n	80075d8 <HAL_RCC_OscConfig+0x130>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d168      	bne.n	80075d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e26b      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x7a>
 8007514:	4b84      	ldr	r3, [pc, #528]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a83      	ldr	r2, [pc, #524]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e02e      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x9c>
 800752a:	4b7f      	ldr	r3, [pc, #508]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7e      	ldr	r2, [pc, #504]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b7c      	ldr	r3, [pc, #496]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7b      	ldr	r2, [pc, #492]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800753c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e01d      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800754c:	d10c      	bne.n	8007568 <HAL_RCC_OscConfig+0xc0>
 800754e:	4b76      	ldr	r3, [pc, #472]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a75      	ldr	r2, [pc, #468]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	4b73      	ldr	r3, [pc, #460]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a72      	ldr	r2, [pc, #456]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e00b      	b.n	8007580 <HAL_RCC_OscConfig+0xd8>
 8007568:	4b6f      	ldr	r3, [pc, #444]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6e      	ldr	r2, [pc, #440]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800756e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b6c      	ldr	r3, [pc, #432]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a6b      	ldr	r2, [pc, #428]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800757a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800757e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d013      	beq.n	80075b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fe fa7c 	bl	8005a84 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007590:	f7fe fa78 	bl	8005a84 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e21f      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	4b61      	ldr	r3, [pc, #388]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0xe8>
 80075ae:	e014      	b.n	80075da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fe fa68 	bl	8005a84 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fe fa64 	bl	8005a84 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e20b      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ca:	4b57      	ldr	r3, [pc, #348]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <HAL_RCC_OscConfig+0x110>
 80075d6:	e000      	b.n	80075da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d069      	beq.n	80076ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075e6:	4b50      	ldr	r3, [pc, #320]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 030c 	and.w	r3, r3, #12
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075f2:	4b4d      	ldr	r3, [pc, #308]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d11c      	bne.n	8007638 <HAL_RCC_OscConfig+0x190>
 80075fe:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d116      	bne.n	8007638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800760a:	4b47      	ldr	r3, [pc, #284]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_RCC_OscConfig+0x17a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d001      	beq.n	8007622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e1df      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	493d      	ldr	r1, [pc, #244]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007632:	4313      	orrs	r3, r2
 8007634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007636:	e040      	b.n	80076ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007640:	4b39      	ldr	r3, [pc, #228]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a38      	ldr	r2, [pc, #224]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fe fa1a 	bl	8005a84 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007654:	f7fe fa16 	bl	8005a84 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e1bd      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007666:	4b30      	ldr	r3, [pc, #192]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007672:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4929      	ldr	r1, [pc, #164]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]
 8007686:	e018      	b.n	80076ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fe f9f6 	bl	8005a84 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800769c:	f7fe f9f2 	bl	8005a84 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e199      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ae:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d038      	beq.n	8007738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d019      	beq.n	8007702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ce:	4b16      	ldr	r3, [pc, #88]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076da:	f7fe f9d3 	bl	8005a84 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e2:	f7fe f9cf 	bl	8005a84 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e176      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 80076f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x23a>
 8007700:	e01a      	b.n	8007738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	4a08      	ldr	r2, [pc, #32]	; (8007728 <HAL_RCC_OscConfig+0x280>)
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fe f9b9 	bl	8005a84 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	e00a      	b.n	800772c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fe f9b5 	bl	8005a84 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d903      	bls.n	800772c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e15c      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
 8007728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800772c:	4b91      	ldr	r3, [pc, #580]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 800772e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ee      	bne.n	8007716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80a4 	beq.w	800788e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007746:	4b8b      	ldr	r3, [pc, #556]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	4b88      	ldr	r3, [pc, #544]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	4a87      	ldr	r2, [pc, #540]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775c:	6413      	str	r3, [r2, #64]	; 0x40
 800775e:	4b85      	ldr	r3, [pc, #532]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800776e:	4b82      	ldr	r3, [pc, #520]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d118      	bne.n	80077ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800777a:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a7e      	ldr	r2, [pc, #504]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 8007780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007786:	f7fe f97d 	bl	8005a84 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778e:	f7fe f979 	bl	8005a84 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b64      	cmp	r3, #100	; 0x64
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e120      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a0:	4b75      	ldr	r3, [pc, #468]	; (8007978 <HAL_RCC_OscConfig+0x4d0>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x31a>
 80077b4:	4b6f      	ldr	r3, [pc, #444]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b8:	4a6e      	ldr	r2, [pc, #440]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6713      	str	r3, [r2, #112]	; 0x70
 80077c0:	e02d      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x33c>
 80077ca:	4b6a      	ldr	r3, [pc, #424]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a69      	ldr	r2, [pc, #420]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
 80077d6:	4b67      	ldr	r3, [pc, #412]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	4a66      	ldr	r2, [pc, #408]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077dc:	f023 0304 	bic.w	r3, r3, #4
 80077e0:	6713      	str	r3, [r2, #112]	; 0x70
 80077e2:	e01c      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d10c      	bne.n	8007806 <HAL_RCC_OscConfig+0x35e>
 80077ec:	4b61      	ldr	r3, [pc, #388]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4a60      	ldr	r2, [pc, #384]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077f2:	f043 0304 	orr.w	r3, r3, #4
 80077f6:	6713      	str	r3, [r2, #112]	; 0x70
 80077f8:	4b5e      	ldr	r3, [pc, #376]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	4a5d      	ldr	r2, [pc, #372]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6713      	str	r3, [r2, #112]	; 0x70
 8007804:	e00b      	b.n	800781e <HAL_RCC_OscConfig+0x376>
 8007806:	4b5b      	ldr	r3, [pc, #364]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	4a5a      	ldr	r2, [pc, #360]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	6713      	str	r3, [r2, #112]	; 0x70
 8007812:	4b58      	ldr	r3, [pc, #352]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	4a57      	ldr	r2, [pc, #348]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007818:	f023 0304 	bic.w	r3, r3, #4
 800781c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d015      	beq.n	8007852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007826:	f7fe f92d 	bl	8005a84 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782c:	e00a      	b.n	8007844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782e:	f7fe f929 	bl	8005a84 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	f241 3288 	movw	r2, #5000	; 0x1388
 800783c:	4293      	cmp	r3, r2
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e0ce      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007844:	4b4b      	ldr	r3, [pc, #300]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ee      	beq.n	800782e <HAL_RCC_OscConfig+0x386>
 8007850:	e014      	b.n	800787c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007852:	f7fe f917 	bl	8005a84 <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007858:	e00a      	b.n	8007870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fe f913 	bl	8005a84 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e0b8      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007870:	4b40      	ldr	r3, [pc, #256]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1ee      	bne.n	800785a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d105      	bne.n	800788e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007882:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4a3b      	ldr	r2, [pc, #236]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80a4 	beq.w	80079e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007898:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 030c 	and.w	r3, r3, #12
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d06b      	beq.n	800797c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d149      	bne.n	8007940 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ac:	4b31      	ldr	r3, [pc, #196]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a30      	ldr	r2, [pc, #192]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80078b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fe f8e4 	bl	8005a84 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c0:	f7fe f8e0 	bl	8005a84 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e087      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d2:	4b28      	ldr	r3, [pc, #160]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f0      	bne.n	80078c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	3b01      	subs	r3, #1
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	061b      	lsls	r3, r3, #24
 8007902:	4313      	orrs	r3, r2
 8007904:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800790a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a18      	ldr	r2, [pc, #96]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007918:	f7fe f8b4 	bl	8005a84 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fe f8b0 	bl	8005a84 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e057      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x478>
 800793e:	e04f      	b.n	80079e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007940:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a0b      	ldr	r2, [pc, #44]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794c:	f7fe f89a 	bl	8005a84 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007954:	f7fe f896 	bl	8005a84 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e03d      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <HAL_RCC_OscConfig+0x4cc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f0      	bne.n	8007954 <HAL_RCC_OscConfig+0x4ac>
 8007972:	e035      	b.n	80079e0 <HAL_RCC_OscConfig+0x538>
 8007974:	40023800 	.word	0x40023800
 8007978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800797c:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <HAL_RCC_OscConfig+0x544>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d028      	beq.n	80079dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007994:	429a      	cmp	r2, r3
 8007996:	d121      	bne.n	80079dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d11a      	bne.n	80079dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079ac:	4013      	ands	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d111      	bne.n	80079dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	3b01      	subs	r3, #1
 80079c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d107      	bne.n	80079dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d001      	beq.n	80079e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800

080079f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0d0      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a08:	4b6a      	ldr	r3, [pc, #424]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d910      	bls.n	8007a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a16:	4b67      	ldr	r3, [pc, #412]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 020f 	bic.w	r2, r3, #15
 8007a1e:	4965      	ldr	r1, [pc, #404]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a26:	4b63      	ldr	r3, [pc, #396]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d001      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0b8      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d020      	beq.n	8007a86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a50:	4b59      	ldr	r3, [pc, #356]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	4a58      	ldr	r2, [pc, #352]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a68:	4b53      	ldr	r3, [pc, #332]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	4a52      	ldr	r2, [pc, #328]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a74:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	494d      	ldr	r1, [pc, #308]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d040      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d107      	bne.n	8007aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a9a:	4b47      	ldr	r3, [pc, #284]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d115      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e07f      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab2:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e073      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac2:	4b3d      	ldr	r3, [pc, #244]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e06b      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad2:	4b39      	ldr	r3, [pc, #228]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4936      	ldr	r1, [pc, #216]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae4:	f7fd ffce 	bl	8005a84 <HAL_GetTick>
 8007ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aec:	f7fd ffca 	bl	8005a84 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e053      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 020c 	and.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d1eb      	bne.n	8007aec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b14:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d210      	bcs.n	8007b44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 020f 	bic.w	r2, r3, #15
 8007b2a:	4922      	ldr	r1, [pc, #136]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b32:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d001      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e032      	b.n	8007baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b50:	4b19      	ldr	r3, [pc, #100]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4916      	ldr	r1, [pc, #88]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	490e      	ldr	r1, [pc, #56]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b82:	f000 f821 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8007b86:	4602      	mov	r2, r0
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	091b      	lsrs	r3, r3, #4
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	490a      	ldr	r1, [pc, #40]	; (8007bbc <HAL_RCC_ClockConfig+0x1cc>)
 8007b94:	5ccb      	ldrb	r3, [r1, r3]
 8007b96:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9a:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8007b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <HAL_RCC_ClockConfig+0x1d4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fb fdc2 	bl	800372c <HAL_InitTick>

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40023c00 	.word	0x40023c00
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	0801594c 	.word	0x0801594c
 8007bc0:	20000008 	.word	0x20000008
 8007bc4:	2000000c 	.word	0x2000000c

08007bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bcc:	b090      	sub	sp, #64	; 0x40
 8007bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd8:	2300      	movs	r3, #0
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007be0:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 030c 	and.w	r3, r3, #12
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d00d      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x40>
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	f200 80a1 	bhi.w	8007d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_RCC_GetSysClockFreq+0x34>
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bfa:	e09b      	b.n	8007d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bfc:	4b53      	ldr	r3, [pc, #332]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8007bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c00:	e09b      	b.n	8007d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c02:	4b53      	ldr	r3, [pc, #332]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c06:	e098      	b.n	8007d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c08:	4b4f      	ldr	r3, [pc, #316]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c12:	4b4d      	ldr	r3, [pc, #308]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d028      	beq.n	8007c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c1e:	4b4a      	ldr	r3, [pc, #296]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	099b      	lsrs	r3, r3, #6
 8007c24:	2200      	movs	r2, #0
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	627a      	str	r2, [r7, #36]	; 0x24
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c30:	2100      	movs	r1, #0
 8007c32:	4b47      	ldr	r3, [pc, #284]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c34:	fb03 f201 	mul.w	r2, r3, r1
 8007c38:	2300      	movs	r3, #0
 8007c3a:	fb00 f303 	mul.w	r3, r0, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	4a43      	ldr	r2, [pc, #268]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c42:	fba0 1202 	umull	r1, r2, r0, r2
 8007c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c48:	460a      	mov	r2, r1
 8007c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c4e:	4413      	add	r3, r2
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	2200      	movs	r2, #0
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	61fa      	str	r2, [r7, #28]
 8007c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c62:	f7f9 f889 	bl	8000d78 <__aeabi_uldivmod>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6e:	e053      	b.n	8007d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	099b      	lsrs	r3, r3, #6
 8007c76:	2200      	movs	r2, #0
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	617a      	str	r2, [r7, #20]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c82:	f04f 0b00 	mov.w	fp, #0
 8007c86:	4652      	mov	r2, sl
 8007c88:	465b      	mov	r3, fp
 8007c8a:	f04f 0000 	mov.w	r0, #0
 8007c8e:	f04f 0100 	mov.w	r1, #0
 8007c92:	0159      	lsls	r1, r3, #5
 8007c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c98:	0150      	lsls	r0, r2, #5
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8007ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007cba:	ebb2 0408 	subs.w	r4, r2, r8
 8007cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	00eb      	lsls	r3, r5, #3
 8007ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cd0:	00e2      	lsls	r2, r4, #3
 8007cd2:	4614      	mov	r4, r2
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	eb14 030a 	adds.w	r3, r4, sl
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	eb45 030b 	adc.w	r3, r5, fp
 8007ce0:	607b      	str	r3, [r7, #4]
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cee:	4629      	mov	r1, r5
 8007cf0:	028b      	lsls	r3, r1, #10
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	028a      	lsls	r2, r1, #10
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	2200      	movs	r2, #0
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	60fa      	str	r2, [r7, #12]
 8007d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d0c:	f7f9 f834 	bl	8000d78 <__aeabi_uldivmod>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4613      	mov	r3, r2
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	3301      	adds	r3, #1
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3740      	adds	r7, #64	; 0x40
 8007d40:	46bd      	mov	sp, r7
 8007d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d46:	bf00      	nop
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	00f42400 	.word	0x00f42400
 8007d50:	017d7840 	.word	0x017d7840

08007d54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d58:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000008 	.word	0x20000008

08007d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d70:	f7ff fff0 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 8007d74:	4602      	mov	r2, r0
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	0a9b      	lsrs	r3, r3, #10
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	4903      	ldr	r1, [pc, #12]	; (8007d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d82:	5ccb      	ldrb	r3, [r1, r3]
 8007d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	0801595c 	.word	0x0801595c

08007d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d98:	f7ff ffdc 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	0b5b      	lsrs	r3, r3, #13
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	4903      	ldr	r1, [pc, #12]	; (8007db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007daa:	5ccb      	ldrb	r3, [r1, r3]
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40023800 	.word	0x40023800
 8007db8:	0801595c 	.word	0x0801595c

08007dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	220f      	movs	r2, #15
 8007dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007dcc:	4b12      	ldr	r3, [pc, #72]	; (8007e18 <HAL_RCC_GetClockConfig+0x5c>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 0203 	and.w	r2, r3, #3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <HAL_RCC_GetClockConfig+0x5c>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007de4:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <HAL_RCC_GetClockConfig+0x5c>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007df0:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <HAL_RCC_GetClockConfig+0x5c>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007dfe:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <HAL_RCC_GetClockConfig+0x60>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 020f 	and.w	r2, r3, #15
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	40023c00 	.word	0x40023c00

08007e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e44:	4b65      	ldr	r3, [pc, #404]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4a64      	ldr	r2, [pc, #400]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e4e:	6093      	str	r3, [r2, #8]
 8007e50:	4b62      	ldr	r3, [pc, #392]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4960      	ldr	r1, [pc, #384]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007e66:	2301      	movs	r3, #1
 8007e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e76:	4b59      	ldr	r3, [pc, #356]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e84:	4955      	ldr	r1, [pc, #340]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e94:	d101      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d017      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007eb2:	4b4a      	ldr	r3, [pc, #296]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4946      	ldr	r1, [pc, #280]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed0:	d101      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 808b 	beq.w	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ef0:	4b3a      	ldr	r3, [pc, #232]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	4a39      	ldr	r2, [pc, #228]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007efa:	6413      	str	r3, [r2, #64]	; 0x40
 8007efc:	4b37      	ldr	r3, [pc, #220]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f08:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f14:	f7fd fdb6 	bl	8005a84 <HAL_GetTick>
 8007f18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f1c:	f7fd fdb2 	bl	8005a84 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b64      	cmp	r3, #100	; 0x64
 8007f28:	d901      	bls.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e2bc      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f2e:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f0      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f3a:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d035      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d02e      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f58:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f62:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f6e:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f72:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007f7a:	4a18      	ldr	r2, [pc, #96]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f80:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d114      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fd fd7a 	bl	8005a84 <HAL_GetTick>
 8007f90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f92:	e00a      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f94:	f7fd fd76 	bl	8005a84 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e27e      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007faa:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0ee      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fc2:	d111      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007fd2:	400b      	ands	r3, r1
 8007fd4:	4901      	ldr	r1, [pc, #4]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
 8007fda:	e00b      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	40007000 	.word	0x40007000
 8007fe4:	0ffffcff 	.word	0x0ffffcff
 8007fe8:	4ba4      	ldr	r3, [pc, #656]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4aa3      	ldr	r2, [pc, #652]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ff2:	6093      	str	r3, [r2, #8]
 8007ff4:	4ba1      	ldr	r3, [pc, #644]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008000:	499e      	ldr	r1, [pc, #632]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008002:	4313      	orrs	r3, r2
 8008004:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d010      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008012:	4b9a      	ldr	r3, [pc, #616]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008018:	4a98      	ldr	r2, [pc, #608]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800801a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800801e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008022:	4b96      	ldr	r3, [pc, #600]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008024:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	4993      	ldr	r1, [pc, #588]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800802e:	4313      	orrs	r3, r2
 8008030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008040:	4b8e      	ldr	r3, [pc, #568]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	498b      	ldr	r1, [pc, #556]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008050:	4313      	orrs	r3, r2
 8008052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008062:	4b86      	ldr	r3, [pc, #536]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008070:	4982      	ldr	r1, [pc, #520]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008084:	4b7d      	ldr	r3, [pc, #500]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008092:	497a      	ldr	r1, [pc, #488]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008094:	4313      	orrs	r3, r2
 8008096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080a6:	4b75      	ldr	r3, [pc, #468]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ac:	f023 0203 	bic.w	r2, r3, #3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b4:	4971      	ldr	r1, [pc, #452]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080c8:	4b6c      	ldr	r3, [pc, #432]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ce:	f023 020c 	bic.w	r2, r3, #12
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	4969      	ldr	r1, [pc, #420]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080ea:	4b64      	ldr	r3, [pc, #400]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	4960      	ldr	r1, [pc, #384]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800810c:	4b5b      	ldr	r3, [pc, #364]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811a:	4958      	ldr	r1, [pc, #352]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800812e:	4b53      	ldr	r3, [pc, #332]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813c:	494f      	ldr	r1, [pc, #316]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008150:	4b4a      	ldr	r3, [pc, #296]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	4947      	ldr	r1, [pc, #284]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008172:	4b42      	ldr	r3, [pc, #264]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008180:	493e      	ldr	r1, [pc, #248]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008194:	4b39      	ldr	r3, [pc, #228]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a2:	4936      	ldr	r1, [pc, #216]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d011      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80081b6:	4b31      	ldr	r3, [pc, #196]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c4:	492d      	ldr	r1, [pc, #180]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d4:	d101      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80081d6:	2301      	movs	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081e6:	4b25      	ldr	r3, [pc, #148]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f4:	4921      	ldr	r1, [pc, #132]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008208:	4b1c      	ldr	r3, [pc, #112]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800820a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008216:	4919      	ldr	r1, [pc, #100]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008218:	4313      	orrs	r3, r2
 800821a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800822c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008230:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008238:	4910      	ldr	r1, [pc, #64]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d006      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 809d 	beq.w	800838e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a08      	ldr	r2, [pc, #32]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800825a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800825e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008260:	f7fd fc10 	bl	8005a84 <HAL_GetTick>
 8008264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008266:	e00b      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008268:	f7fd fc0c 	bl	8005a84 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b64      	cmp	r3, #100	; 0x64
 8008274:	d904      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e116      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008280:	4b8b      	ldr	r3, [pc, #556]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1ed      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d017      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d113      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082a0:	4b83      	ldr	r3, [pc, #524]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80082a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a6:	0e1b      	lsrs	r3, r3, #24
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	019a      	lsls	r2, r3, #6
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	061b      	lsls	r3, r3, #24
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	071b      	lsls	r3, r3, #28
 80082c0:	497b      	ldr	r1, [pc, #492]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d024      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f2:	d11f      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80082f4:	4b6e      	ldr	r3, [pc, #440]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fa:	0f1b      	lsrs	r3, r3, #28
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	019a      	lsls	r2, r3, #6
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	061b      	lsls	r3, r3, #24
 800830e:	431a      	orrs	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	071b      	lsls	r3, r3, #28
 8008314:	4966      	ldr	r1, [pc, #408]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800831c:	4b64      	ldr	r3, [pc, #400]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800831e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008322:	f023 021f 	bic.w	r2, r3, #31
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	3b01      	subs	r3, #1
 800832c:	4960      	ldr	r1, [pc, #384]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00d      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	019a      	lsls	r2, r3, #6
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	4956      	ldr	r1, [pc, #344]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800835c:	4b54      	ldr	r3, [pc, #336]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a53      	ldr	r2, [pc, #332]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008368:	f7fd fb8c 	bl	8005a84 <HAL_GetTick>
 800836c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800836e:	e008      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008370:	f7fd fb88 	bl	8005a84 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b64      	cmp	r3, #100	; 0x64
 800837c:	d901      	bls.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e092      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008382:	4b4b      	ldr	r3, [pc, #300]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f0      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b01      	cmp	r3, #1
 8008392:	f040 8088 	bne.w	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008396:	4b46      	ldr	r3, [pc, #280]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a45      	ldr	r2, [pc, #276]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800839c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a2:	f7fd fb6f 	bl	8005a84 <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083a8:	e008      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083aa:	f7fd fb6b 	bl	8005a84 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b64      	cmp	r3, #100	; 0x64
 80083b6:	d901      	bls.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e075      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083bc:	4b3c      	ldr	r3, [pc, #240]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c8:	d0ef      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d024      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d120      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083f2:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	019a      	lsls	r2, r3, #6
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	061b      	lsls	r3, r3, #24
 8008412:	4927      	ldr	r1, [pc, #156]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800841a:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008420:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	3b01      	subs	r3, #1
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	4920      	ldr	r1, [pc, #128]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d018      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008448:	d113      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800844a:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800844c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008450:	0e1b      	lsrs	r3, r3, #24
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	019a      	lsls	r2, r3, #6
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	431a      	orrs	r2, r3
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	4911      	ldr	r1, [pc, #68]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800846c:	4313      	orrs	r3, r2
 800846e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800847c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847e:	f7fd fb01 	bl	8005a84 <HAL_GetTick>
 8008482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008484:	e008      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008486:	f7fd fafd 	bl	8005a84 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b64      	cmp	r3, #100	; 0x64
 8008492:	d901      	bls.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e007      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a4:	d1ef      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800

080084b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e09d      	b.n	8008602 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d108      	bne.n	80084e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d6:	d009      	beq.n	80084ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	61da      	str	r2, [r3, #28]
 80084de:	e005      	b.n	80084ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fa fec8 	bl	800329c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008522:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800852c:	d902      	bls.n	8008534 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e002      	b.n	800853a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008538:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008542:	d007      	beq.n	8008554 <HAL_SPI_Init+0xa0>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800854c:	d002      	beq.n	8008554 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	ea42 0103 	orr.w	r1, r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	0c1b      	lsrs	r3, r3, #16
 80085b0:	f003 0204 	and.w	r2, r3, #4
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80085d0:	ea42 0103 	orr.w	r1, r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b088      	sub	sp, #32
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	4613      	mov	r3, r2
 8008618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_SPI_Transmit+0x22>
 8008628:	2302      	movs	r3, #2
 800862a:	e158      	b.n	80088de <HAL_SPI_Transmit+0x2d4>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008634:	f7fd fa26 	bl	8005a84 <HAL_GetTick>
 8008638:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d002      	beq.n	8008650 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800864a:	2302      	movs	r3, #2
 800864c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800864e:	e13d      	b.n	80088cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_SPI_Transmit+0x52>
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008660:	e134      	b.n	80088cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2203      	movs	r2, #3
 8008666:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ac:	d10f      	bne.n	80086ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d007      	beq.n	80086ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086f4:	d94b      	bls.n	800878e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <HAL_SPI_Transmit+0xfa>
 80086fe:	8afb      	ldrh	r3, [r7, #22]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d13e      	bne.n	8008782 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	881a      	ldrh	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	1c9a      	adds	r2, r3, #2
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008728:	e02b      	b.n	8008782 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b02      	cmp	r3, #2
 8008736:	d112      	bne.n	800875e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	881a      	ldrh	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	1c9a      	adds	r2, r3, #2
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800875c:	e011      	b.n	8008782 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800875e:	f7fd f991 	bl	8005a84 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d803      	bhi.n	8008776 <HAL_SPI_Transmit+0x16c>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d102      	bne.n	800877c <HAL_SPI_Transmit+0x172>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008780:	e0a4      	b.n	80088cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ce      	bne.n	800872a <HAL_SPI_Transmit+0x120>
 800878c:	e07c      	b.n	8008888 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_SPI_Transmit+0x192>
 8008796:	8afb      	ldrh	r3, [r7, #22]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d170      	bne.n	800887e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d912      	bls.n	80087cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	881a      	ldrh	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	1c9a      	adds	r2, r3, #2
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b02      	subs	r3, #2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087ca:	e058      	b.n	800887e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	7812      	ldrb	r2, [r2, #0]
 80087d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80087f2:	e044      	b.n	800887e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d12b      	bne.n	800885a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d912      	bls.n	8008832 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	881a      	ldrh	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	1c9a      	adds	r2, r3, #2
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b02      	subs	r3, #2
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008830:	e025      	b.n	800887e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	7812      	ldrb	r2, [r2, #0]
 800883e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884e:	b29b      	uxth	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008858:	e011      	b.n	800887e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800885a:	f7fd f913 	bl	8005a84 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d803      	bhi.n	8008872 <HAL_SPI_Transmit+0x268>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d102      	bne.n	8008878 <HAL_SPI_Transmit+0x26e>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800887c:	e026      	b.n	80088cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1b5      	bne.n	80087f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fd07 	bl	80092a0 <SPI_EndRxTxTransaction>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088a6:	2300      	movs	r3, #0
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	77fb      	strb	r3, [r7, #31]
 80088c8:	e000      	b.n	80088cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80088ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b088      	sub	sp, #32
 80088ea:	af02      	add	r7, sp, #8
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008902:	d112      	bne.n	800892a <HAL_SPI_Receive+0x44>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10e      	bne.n	800892a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2204      	movs	r2, #4
 8008910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4613      	mov	r3, r2
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f910 	bl	8008b46 <HAL_SPI_TransmitReceive>
 8008926:	4603      	mov	r3, r0
 8008928:	e109      	b.n	8008b3e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_SPI_Receive+0x52>
 8008934:	2302      	movs	r3, #2
 8008936:	e102      	b.n	8008b3e <HAL_SPI_Receive+0x258>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008940:	f7fd f8a0 	bl	8005a84 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b01      	cmp	r3, #1
 8008950:	d002      	beq.n	8008958 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008952:	2302      	movs	r3, #2
 8008954:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008956:	e0e9      	b.n	8008b2c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_SPI_Receive+0x7e>
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008968:	e0e0      	b.n	8008b2c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2204      	movs	r2, #4
 800896e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	88fa      	ldrh	r2, [r7, #6]
 8008982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089b4:	d908      	bls.n	80089c8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	e007      	b.n	80089d8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e0:	d10f      	bne.n	8008a02 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b40      	cmp	r3, #64	; 0x40
 8008a0e:	d007      	beq.n	8008a20 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a28:	d867      	bhi.n	8008afa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008a2a:	e030      	b.n	8008a8e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d117      	bne.n	8008a6a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f103 020c 	add.w	r2, r3, #12
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008a68:	e011      	b.n	8008a8e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a6a:	f7fd f80b 	bl	8005a84 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d803      	bhi.n	8008a82 <HAL_SPI_Receive+0x19c>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d102      	bne.n	8008a88 <HAL_SPI_Receive+0x1a2>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a8c:	e04e      	b.n	8008b2c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1c8      	bne.n	8008a2c <HAL_SPI_Receive+0x146>
 8008a9a:	e034      	b.n	8008b06 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d115      	bne.n	8008ad6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	1c9a      	adds	r2, r3, #2
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008ad4:	e011      	b.n	8008afa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ad6:	f7fc ffd5 	bl	8005a84 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d803      	bhi.n	8008aee <HAL_SPI_Receive+0x208>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d102      	bne.n	8008af4 <HAL_SPI_Receive+0x20e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008af8:	e018      	b.n	8008b2c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1ca      	bne.n	8008a9c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fb4c 	bl	80091a8 <SPI_EndRxTransaction>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	75fb      	strb	r3, [r7, #23]
 8008b28:	e000      	b.n	8008b2c <HAL_SPI_Receive+0x246>
  }

error :
 8008b2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08a      	sub	sp, #40	; 0x28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b54:	2301      	movs	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_SPI_TransmitReceive+0x26>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e1fb      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x41e>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b74:	f7fc ff86 	bl	8005a84 <HAL_GetTick>
 8008b78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b90:	7efb      	ldrb	r3, [r7, #27]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d00e      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x6e>
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b9c:	d106      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x66>
 8008ba6:	7efb      	ldrb	r3, [r7, #27]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d003      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
 8008bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bb2:	e1cd      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <HAL_SPI_TransmitReceive+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_TransmitReceive+0x80>
 8008bc0:	887b      	ldrh	r3, [r7, #2]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bcc:	e1c0      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d003      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2205      	movs	r2, #5
 8008bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	887a      	ldrh	r2, [r7, #2]
 8008bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	887a      	ldrh	r2, [r7, #2]
 8008c08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	887a      	ldrh	r2, [r7, #2]
 8008c0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c24:	d802      	bhi.n	8008c2c <HAL_SPI_TransmitReceive+0xe6>
 8008c26:	8a3b      	ldrh	r3, [r7, #16]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d908      	bls.n	8008c3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	e007      	b.n	8008c4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b40      	cmp	r3, #64	; 0x40
 8008c5a:	d007      	beq.n	8008c6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c74:	d97c      	bls.n	8008d70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_SPI_TransmitReceive+0x13e>
 8008c7e:	8a7b      	ldrh	r3, [r7, #18]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d169      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	881a      	ldrh	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca8:	e056      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d016      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d113      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	881a      	ldrh	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	1c9a      	adds	r2, r3, #2
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d11c      	bne.n	8008d38 <HAL_SPI_TransmitReceive+0x1f2>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d016      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	b292      	uxth	r2, r2
 8008d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	1c9a      	adds	r2, r3, #2
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d34:	2301      	movs	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d38:	f7fc fea4 	bl	8005a84 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d807      	bhi.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4e:	d003      	beq.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d56:	e0fb      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1a3      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x164>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d19d      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x164>
 8008d6e:	e0df      	b.n	8008f30 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_SPI_TransmitReceive+0x23a>
 8008d78:	8a7b      	ldrh	r3, [r7, #18]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	f040 80cb 	bne.w	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d912      	bls.n	8008db0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	881a      	ldrh	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	1c9a      	adds	r2, r3, #2
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b02      	subs	r3, #2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dae:	e0b2      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	330c      	adds	r3, #12
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd6:	e09e      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d134      	bne.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d02f      	beq.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d12c      	bne.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d912      	bls.n	8008e26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	1c9a      	adds	r2, r3, #2
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b02      	subs	r3, #2
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e24:	e012      	b.n	8008e4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d148      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x3aa>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d042      	beq.n	8008ef0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d923      	bls.n	8008ebe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	b292      	uxth	r2, r2
 8008e82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	1c9a      	adds	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b02      	subs	r3, #2
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d81f      	bhi.n	8008eec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	e016      	b.n	8008eec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f103 020c 	add.w	r2, r3, #12
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eec:	2301      	movs	r3, #1
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ef0:	f7fc fdc8 	bl	8005a84 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d803      	bhi.n	8008f08 <HAL_SPI_TransmitReceive+0x3c2>
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d102      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x3c8>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d103      	bne.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f14:	e01c      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f47f af5b 	bne.w	8008dd8 <HAL_SPI_TransmitReceive+0x292>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f af54 	bne.w	8008dd8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f9b3 	bl	80092a0 <SPI_EndRxTxTransaction>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	661a      	str	r2, [r3, #96]	; 0x60
 8008f4c:	e000      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3728      	adds	r7, #40	; 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f7c:	f7fc fd82 	bl	8005a84 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4413      	add	r3, r2
 8008f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f8c:	f7fc fd7a 	bl	8005a84 <HAL_GetTick>
 8008f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f92:	4b39      	ldr	r3, [pc, #228]	; (8009078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	015b      	lsls	r3, r3, #5
 8008f98:	0d1b      	lsrs	r3, r3, #20
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fa2:	e054      	b.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d050      	beq.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fac:	f7fc fd6a 	bl	8005a84 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d902      	bls.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d13d      	bne.n	800903e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fda:	d111      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe4:	d004      	beq.n	8008ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fee:	d107      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009008:	d10f      	bne.n	800902a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e017      	b.n	800906e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3b01      	subs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d19b      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000008 	.word	0x20000008

0800907c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800908e:	f7fc fcf9 	bl	8005a84 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	4413      	add	r3, r2
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800909e:	f7fc fcf1 	bl	8005a84 <HAL_GetTick>
 80090a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090ac:	4b3d      	ldr	r3, [pc, #244]	; (80091a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	00da      	lsls	r2, r3, #3
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	0d1b      	lsrs	r3, r3, #20
 80090bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80090c4:	e060      	b.n	8009188 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80090cc:	d107      	bne.n	80090de <SPI_WaitFifoStateUntilTimeout+0x62>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d050      	beq.n	8009188 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090e6:	f7fc fccd 	bl	8005a84 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d902      	bls.n	80090fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d13d      	bne.n	8009178 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800910a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009114:	d111      	bne.n	800913a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911e:	d004      	beq.n	800912a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009128:	d107      	bne.n	800913a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009138:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009142:	d10f      	bne.n	8009164 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009162:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e010      	b.n	800919a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	3b01      	subs	r3, #1
 8009186:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	4013      	ands	r3, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d196      	bne.n	80090c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000008 	.word	0x20000008

080091a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091bc:	d111      	bne.n	80091e2 <SPI_EndRxTransaction+0x3a>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091c6:	d004      	beq.n	80091d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d0:	d107      	bne.n	80091e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ea:	d112      	bne.n	8009212 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2200      	movs	r2, #0
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff feb8 	bl	8008f6c <SPI_WaitFlagStateUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d021      	beq.n	8009246 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009206:	f043 0220 	orr.w	r2, r3, #32
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e03d      	b.n	800928e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009212:	4b21      	ldr	r3, [pc, #132]	; (8009298 <SPI_EndRxTransaction+0xf0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a21      	ldr	r2, [pc, #132]	; (800929c <SPI_EndRxTransaction+0xf4>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	0d5b      	lsrs	r3, r3, #21
 800921e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009222:	fb02 f303 	mul.w	r3, r2, r3
 8009226:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	3b01      	subs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923e:	2b80      	cmp	r3, #128	; 0x80
 8009240:	d0f2      	beq.n	8009228 <SPI_EndRxTransaction+0x80>
 8009242:	e000      	b.n	8009246 <SPI_EndRxTransaction+0x9e>
        break;
 8009244:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800924e:	d11d      	bne.n	800928c <SPI_EndRxTransaction+0xe4>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009258:	d004      	beq.n	8009264 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009262:	d113      	bne.n	800928c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2200      	movs	r2, #0
 800926c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff ff03 	bl	800907c <SPI_WaitFifoStateUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009280:	f043 0220 	orr.w	r2, r3, #32
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e000      	b.n	800928e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000008 	.word	0x20000008
 800929c:	165e9f81 	.word	0x165e9f81

080092a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff fedf 	bl	800907c <SPI_WaitFifoStateUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c8:	f043 0220 	orr.w	r2, r3, #32
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e046      	b.n	8009362 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <SPI_EndRxTxTransaction+0xcc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a25      	ldr	r2, [pc, #148]	; (8009370 <SPI_EndRxTxTransaction+0xd0>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0d5b      	lsrs	r3, r3, #21
 80092e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092f2:	d112      	bne.n	800931a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	2180      	movs	r1, #128	; 0x80
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7ff fe34 	bl	8008f6c <SPI_WaitFlagStateUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d016      	beq.n	8009338 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930e:	f043 0220 	orr.w	r2, r3, #32
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e023      	b.n	8009362 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3b01      	subs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b80      	cmp	r3, #128	; 0x80
 8009332:	d0f2      	beq.n	800931a <SPI_EndRxTxTransaction+0x7a>
 8009334:	e000      	b.n	8009338 <SPI_EndRxTxTransaction+0x98>
        break;
 8009336:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2200      	movs	r2, #0
 8009340:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7ff fe99 	bl	800907c <SPI_WaitFifoStateUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d007      	beq.n	8009360 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009354:	f043 0220 	orr.w	r2, r3, #32
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e000      	b.n	8009362 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000008 	.word	0x20000008
 8009370:	165e9f81 	.word	0x165e9f81

08009374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e049      	b.n	800941a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7f9 fff4 	bl	8003388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f000 ffae 	bl	800a314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b01      	cmp	r3, #1
 8009436:	d001      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e054      	b.n	80094e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0201 	orr.w	r2, r2, #1
 8009452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a26      	ldr	r2, [pc, #152]	; (80094f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d022      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009466:	d01d      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d018      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a21      	ldr	r2, [pc, #132]	; (80094fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d013      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a1f      	ldr	r2, [pc, #124]	; (8009500 <HAL_TIM_Base_Start_IT+0xdc>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00e      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <HAL_TIM_Base_Start_IT+0xe0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d009      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <HAL_TIM_Base_Start_IT+0xe4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d004      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x80>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1b      	ldr	r2, [pc, #108]	; (800950c <HAL_TIM_Base_Start_IT+0xe8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d115      	bne.n	80094d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	4b19      	ldr	r3, [pc, #100]	; (8009510 <HAL_TIM_Base_Start_IT+0xec>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b06      	cmp	r3, #6
 80094b4:	d015      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0xbe>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094bc:	d011      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0201 	orr.w	r2, r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ce:	e008      	b.n	80094e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e000      	b.n	80094e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	40010000 	.word	0x40010000
 80094f8:	40000400 	.word	0x40000400
 80094fc:	40000800 	.word	0x40000800
 8009500:	40000c00 	.word	0x40000c00
 8009504:	40010400 	.word	0x40010400
 8009508:	40014000 	.word	0x40014000
 800950c:	40001800 	.word	0x40001800
 8009510:	00010007 	.word	0x00010007

08009514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e049      	b.n	80095ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f841 	bl	80095c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f000 fede 	bl	800a314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <HAL_TIM_PWM_Start+0x24>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	bf14      	ite	ne
 80095f4:	2301      	movne	r3, #1
 80095f6:	2300      	moveq	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	e03c      	b.n	8009676 <HAL_TIM_PWM_Start+0x9e>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d109      	bne.n	8009616 <HAL_TIM_PWM_Start+0x3e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	bf14      	ite	ne
 800960e:	2301      	movne	r3, #1
 8009610:	2300      	moveq	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	e02f      	b.n	8009676 <HAL_TIM_PWM_Start+0x9e>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b08      	cmp	r3, #8
 800961a:	d109      	bne.n	8009630 <HAL_TIM_PWM_Start+0x58>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	e022      	b.n	8009676 <HAL_TIM_PWM_Start+0x9e>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b0c      	cmp	r3, #12
 8009634:	d109      	bne.n	800964a <HAL_TIM_PWM_Start+0x72>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b01      	cmp	r3, #1
 8009640:	bf14      	ite	ne
 8009642:	2301      	movne	r3, #1
 8009644:	2300      	moveq	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	e015      	b.n	8009676 <HAL_TIM_PWM_Start+0x9e>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b10      	cmp	r3, #16
 800964e:	d109      	bne.n	8009664 <HAL_TIM_PWM_Start+0x8c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b01      	cmp	r3, #1
 800965a:	bf14      	ite	ne
 800965c:	2301      	movne	r3, #1
 800965e:	2300      	moveq	r3, #0
 8009660:	b2db      	uxtb	r3, r3
 8009662:	e008      	b.n	8009676 <HAL_TIM_PWM_Start+0x9e>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	bf14      	ite	ne
 8009670:	2301      	movne	r3, #1
 8009672:	2300      	moveq	r3, #0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e092      	b.n	80097a4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <HAL_TIM_PWM_Start+0xb6>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800968c:	e023      	b.n	80096d6 <HAL_TIM_PWM_Start+0xfe>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b04      	cmp	r3, #4
 8009692:	d104      	bne.n	800969e <HAL_TIM_PWM_Start+0xc6>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800969c:	e01b      	b.n	80096d6 <HAL_TIM_PWM_Start+0xfe>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d104      	bne.n	80096ae <HAL_TIM_PWM_Start+0xd6>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096ac:	e013      	b.n	80096d6 <HAL_TIM_PWM_Start+0xfe>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b0c      	cmp	r3, #12
 80096b2:	d104      	bne.n	80096be <HAL_TIM_PWM_Start+0xe6>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096bc:	e00b      	b.n	80096d6 <HAL_TIM_PWM_Start+0xfe>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b10      	cmp	r3, #16
 80096c2:	d104      	bne.n	80096ce <HAL_TIM_PWM_Start+0xf6>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096cc:	e003      	b.n	80096d6 <HAL_TIM_PWM_Start+0xfe>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2202      	movs	r2, #2
 80096d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 fada 	bl	800ac98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a30      	ldr	r2, [pc, #192]	; (80097ac <HAL_TIM_PWM_Start+0x1d4>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d004      	beq.n	80096f8 <HAL_TIM_PWM_Start+0x120>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a2f      	ldr	r2, [pc, #188]	; (80097b0 <HAL_TIM_PWM_Start+0x1d8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d101      	bne.n	80096fc <HAL_TIM_PWM_Start+0x124>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <HAL_TIM_PWM_Start+0x126>
 80096fc:	2300      	movs	r3, #0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a25      	ldr	r2, [pc, #148]	; (80097ac <HAL_TIM_PWM_Start+0x1d4>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d022      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009724:	d01d      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <HAL_TIM_PWM_Start+0x1dc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d018      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <HAL_TIM_PWM_Start+0x1e0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d013      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_TIM_PWM_Start+0x1e4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00e      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a19      	ldr	r2, [pc, #100]	; (80097b0 <HAL_TIM_PWM_Start+0x1d8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d009      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1b      	ldr	r2, [pc, #108]	; (80097c0 <HAL_TIM_PWM_Start+0x1e8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d004      	beq.n	8009762 <HAL_TIM_PWM_Start+0x18a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <HAL_TIM_PWM_Start+0x1ec>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d115      	bne.n	800978e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	4b17      	ldr	r3, [pc, #92]	; (80097c8 <HAL_TIM_PWM_Start+0x1f0>)
 800976a:	4013      	ands	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b06      	cmp	r3, #6
 8009772:	d015      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x1c8>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977a:	d011      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978c:	e008      	b.n	80097a0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e000      	b.n	80097a2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40010400 	.word	0x40010400
 80097b4:	40000400 	.word	0x40000400
 80097b8:	40000800 	.word	0x40000800
 80097bc:	40000c00 	.word	0x40000c00
 80097c0:	40014000 	.word	0x40014000
 80097c4:	40001800 	.word	0x40001800
 80097c8:	00010007 	.word	0x00010007

080097cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e049      	b.n	8009872 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f9 fde8 	bl	80033c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f000 fd82 	bl	800a314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <HAL_TIM_IC_Start_IT+0x1e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009896:	b2db      	uxtb	r3, r3
 8009898:	e023      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x66>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d104      	bne.n	80098aa <HAL_TIM_IC_Start_IT+0x2e>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	e01b      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x66>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d104      	bne.n	80098ba <HAL_TIM_IC_Start_IT+0x3e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	e013      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x66>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b0c      	cmp	r3, #12
 80098be:	d104      	bne.n	80098ca <HAL_TIM_IC_Start_IT+0x4e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	e00b      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x66>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b10      	cmp	r3, #16
 80098ce:	d104      	bne.n	80098da <HAL_TIM_IC_Start_IT+0x5e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	e003      	b.n	80098e2 <HAL_TIM_IC_Start_IT+0x66>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d104      	bne.n	80098f4 <HAL_TIM_IC_Start_IT+0x78>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e013      	b.n	800991c <HAL_TIM_IC_Start_IT+0xa0>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d104      	bne.n	8009904 <HAL_TIM_IC_Start_IT+0x88>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e00b      	b.n	800991c <HAL_TIM_IC_Start_IT+0xa0>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b08      	cmp	r3, #8
 8009908:	d104      	bne.n	8009914 <HAL_TIM_IC_Start_IT+0x98>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e003      	b.n	800991c <HAL_TIM_IC_Start_IT+0xa0>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800991a:	b2db      	uxtb	r3, r3
 800991c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d102      	bne.n	800992a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009924:	7b7b      	ldrb	r3, [r7, #13]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d001      	beq.n	800992e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e0e2      	b.n	8009af4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <HAL_TIM_IC_Start_IT+0xc2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800993c:	e023      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x10a>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d104      	bne.n	800994e <HAL_TIM_IC_Start_IT+0xd2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800994c:	e01b      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x10a>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b08      	cmp	r3, #8
 8009952:	d104      	bne.n	800995e <HAL_TIM_IC_Start_IT+0xe2>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800995c:	e013      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x10a>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b0c      	cmp	r3, #12
 8009962:	d104      	bne.n	800996e <HAL_TIM_IC_Start_IT+0xf2>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800996c:	e00b      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x10a>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b10      	cmp	r3, #16
 8009972:	d104      	bne.n	800997e <HAL_TIM_IC_Start_IT+0x102>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800997c:	e003      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x10a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <HAL_TIM_IC_Start_IT+0x11a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009994:	e013      	b.n	80099be <HAL_TIM_IC_Start_IT+0x142>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_IC_Start_IT+0x12a>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a4:	e00b      	b.n	80099be <HAL_TIM_IC_Start_IT+0x142>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_IC_Start_IT+0x13a>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099b4:	e003      	b.n	80099be <HAL_TIM_IC_Start_IT+0x142>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b0c      	cmp	r3, #12
 80099c2:	d841      	bhi.n	8009a48 <HAL_TIM_IC_Start_IT+0x1cc>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <HAL_TIM_IC_Start_IT+0x150>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009a01 	.word	0x08009a01
 80099d0:	08009a49 	.word	0x08009a49
 80099d4:	08009a49 	.word	0x08009a49
 80099d8:	08009a49 	.word	0x08009a49
 80099dc:	08009a13 	.word	0x08009a13
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	08009a49 	.word	0x08009a49
 80099e8:	08009a49 	.word	0x08009a49
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	08009a49 	.word	0x08009a49
 80099fc:	08009a37 	.word	0x08009a37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0202 	orr.w	r2, r2, #2
 8009a0e:	60da      	str	r2, [r3, #12]
      break;
 8009a10:	e01d      	b.n	8009a4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0204 	orr.w	r2, r2, #4
 8009a20:	60da      	str	r2, [r3, #12]
      break;
 8009a22:	e014      	b.n	8009a4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0208 	orr.w	r2, r2, #8
 8009a32:	60da      	str	r2, [r3, #12]
      break;
 8009a34:	e00b      	b.n	8009a4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0210 	orr.w	r2, r2, #16
 8009a44:	60da      	str	r2, [r3, #12]
      break;
 8009a46:	e002      	b.n	8009a4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d14e      	bne.n	8009af2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 f91b 	bl	800ac98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a25      	ldr	r2, [pc, #148]	; (8009afc <HAL_TIM_IC_Start_IT+0x280>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d022      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a74:	d01d      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a21      	ldr	r2, [pc, #132]	; (8009b00 <HAL_TIM_IC_Start_IT+0x284>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d018      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <HAL_TIM_IC_Start_IT+0x288>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d013      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a1e      	ldr	r2, [pc, #120]	; (8009b08 <HAL_TIM_IC_Start_IT+0x28c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00e      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <HAL_TIM_IC_Start_IT+0x290>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d009      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a1b      	ldr	r2, [pc, #108]	; (8009b10 <HAL_TIM_IC_Start_IT+0x294>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_TIM_IC_Start_IT+0x236>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a19      	ldr	r2, [pc, #100]	; (8009b14 <HAL_TIM_IC_Start_IT+0x298>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d115      	bne.n	8009ade <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <HAL_TIM_IC_Start_IT+0x29c>)
 8009aba:	4013      	ands	r3, r2
 8009abc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b06      	cmp	r3, #6
 8009ac2:	d015      	beq.n	8009af0 <HAL_TIM_IC_Start_IT+0x274>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aca:	d011      	beq.n	8009af0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009adc:	e008      	b.n	8009af0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f042 0201 	orr.w	r2, r2, #1
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e000      	b.n	8009af2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40000400 	.word	0x40000400
 8009b04:	40000800 	.word	0x40000800
 8009b08:	40000c00 	.word	0x40000c00
 8009b0c:	40010400 	.word	0x40010400
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40001800 	.word	0x40001800
 8009b18:	00010007 	.word	0x00010007

08009b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d122      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d11b      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0202 	mvn.w	r2, #2
 8009b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f8 fd52 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8009b64:	e005      	b.n	8009b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fbb6 	bl	800a2d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fbbd 	bl	800a2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d122      	bne.n	8009bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d11b      	bne.n	8009bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0204 	mvn.w	r2, #4
 8009b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7f8 fd28 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8009bb8:	e005      	b.n	8009bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb8c 	bl	800a2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fb93 	bl	800a2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	f003 0308 	and.w	r3, r3, #8
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d122      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d11b      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f06f 0208 	mvn.w	r2, #8
 8009bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7f8 fcfe 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8009c0c:	e005      	b.n	8009c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fb62 	bl	800a2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb69 	bl	800a2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d122      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d11b      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0210 	mvn.w	r2, #16
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2208      	movs	r2, #8
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f8 fcd4 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb38 	bl	800a2d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb3f 	bl	800a2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d10e      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d107      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0201 	mvn.w	r2, #1
 8009c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7f9 fa62 	bl	8003164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d10e      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d107      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 f922 	bl	800af10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cda:	d10e      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce6:	2b80      	cmp	r3, #128	; 0x80
 8009ce8:	d107      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 f915 	bl	800af24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d04:	2b40      	cmp	r3, #64	; 0x40
 8009d06:	d10e      	bne.n	8009d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d12:	2b40      	cmp	r3, #64	; 0x40
 8009d14:	d107      	bne.n	8009d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 faed 	bl	800a300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d10e      	bne.n	8009d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f003 0320 	and.w	r3, r3, #32
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	d107      	bne.n	8009d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f06f 0220 	mvn.w	r2, #32
 8009d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 f8d5 	bl	800aefc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e088      	b.n	8009e8a <HAL_TIM_IC_ConfigChannel+0x130>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d11b      	bne.n	8009dbe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009d96:	f000 fdbb 	bl	800a910 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 020c 	bic.w	r2, r2, #12
 8009da8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6999      	ldr	r1, [r3, #24]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	619a      	str	r2, [r3, #24]
 8009dbc:	e060      	b.n	8009e80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d11c      	bne.n	8009dfe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009dd4:	f000 fe3f 	bl	800aa56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699a      	ldr	r2, [r3, #24]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009de6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6999      	ldr	r1, [r3, #24]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	021a      	lsls	r2, r3, #8
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	619a      	str	r2, [r3, #24]
 8009dfc:	e040      	b.n	8009e80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d11b      	bne.n	8009e3c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009e14:	f000 fe8c 	bl	800ab30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69da      	ldr	r2, [r3, #28]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f022 020c 	bic.w	r2, r2, #12
 8009e26:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69d9      	ldr	r1, [r3, #28]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	61da      	str	r2, [r3, #28]
 8009e3a:	e021      	b.n	8009e80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b0c      	cmp	r3, #12
 8009e40:	d11c      	bne.n	8009e7c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009e52:	f000 fea9 	bl	800aba8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69d9      	ldr	r1, [r3, #28]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	021a      	lsls	r2, r3, #8
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	61da      	str	r2, [r3, #28]
 8009e7a:	e001      	b.n	8009e80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e0ff      	b.n	800a0b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b14      	cmp	r3, #20
 8009ebe:	f200 80f0 	bhi.w	800a0a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	0800a0a3 	.word	0x0800a0a3
 8009ed0:	0800a0a3 	.word	0x0800a0a3
 8009ed4:	0800a0a3 	.word	0x0800a0a3
 8009ed8:	08009f5d 	.word	0x08009f5d
 8009edc:	0800a0a3 	.word	0x0800a0a3
 8009ee0:	0800a0a3 	.word	0x0800a0a3
 8009ee4:	0800a0a3 	.word	0x0800a0a3
 8009ee8:	08009f9f 	.word	0x08009f9f
 8009eec:	0800a0a3 	.word	0x0800a0a3
 8009ef0:	0800a0a3 	.word	0x0800a0a3
 8009ef4:	0800a0a3 	.word	0x0800a0a3
 8009ef8:	08009fdf 	.word	0x08009fdf
 8009efc:	0800a0a3 	.word	0x0800a0a3
 8009f00:	0800a0a3 	.word	0x0800a0a3
 8009f04:	0800a0a3 	.word	0x0800a0a3
 8009f08:	0800a021 	.word	0x0800a021
 8009f0c:	0800a0a3 	.word	0x0800a0a3
 8009f10:	0800a0a3 	.word	0x0800a0a3
 8009f14:	0800a0a3 	.word	0x0800a0a3
 8009f18:	0800a061 	.word	0x0800a061
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fa96 	bl	800a454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0208 	orr.w	r2, r2, #8
 8009f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0204 	bic.w	r2, r2, #4
 8009f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6999      	ldr	r1, [r3, #24]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	691a      	ldr	r2, [r3, #16]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	619a      	str	r2, [r3, #24]
      break;
 8009f5a:	e0a5      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fae8 	bl	800a538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699a      	ldr	r2, [r3, #24]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6999      	ldr	r1, [r3, #24]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	021a      	lsls	r2, r3, #8
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	619a      	str	r2, [r3, #24]
      break;
 8009f9c:	e084      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fb3f 	bl	800a628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0208 	orr.w	r2, r2, #8
 8009fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69da      	ldr	r2, [r3, #28]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0204 	bic.w	r2, r2, #4
 8009fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69d9      	ldr	r1, [r3, #28]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	61da      	str	r2, [r3, #28]
      break;
 8009fdc:	e064      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fb95 	bl	800a714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69d9      	ldr	r1, [r3, #28]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	021a      	lsls	r2, r3, #8
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	61da      	str	r2, [r3, #28]
      break;
 800a01e:	e043      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fbcc 	bl	800a7c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0208 	orr.w	r2, r2, #8
 800a03a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0204 	bic.w	r2, r2, #4
 800a04a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	691a      	ldr	r2, [r3, #16]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a05e:	e023      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fbfe 	bl	800a868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a07a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a08a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	021a      	lsls	r2, r3, #8
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a0a0:	e002      	b.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop

0800a0bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e0b4      	b.n	800a242 <HAL_TIM_ConfigClockSource+0x186>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	4b56      	ldr	r3, [pc, #344]	; (800a24c <HAL_TIM_ConfigClockSource+0x190>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a110:	d03e      	beq.n	800a190 <HAL_TIM_ConfigClockSource+0xd4>
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a116:	f200 8087 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11e:	f000 8086 	beq.w	800a22e <HAL_TIM_ConfigClockSource+0x172>
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	d87f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a128:	2b70      	cmp	r3, #112	; 0x70
 800a12a:	d01a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0xa6>
 800a12c:	2b70      	cmp	r3, #112	; 0x70
 800a12e:	d87b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a130:	2b60      	cmp	r3, #96	; 0x60
 800a132:	d050      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a134:	2b60      	cmp	r3, #96	; 0x60
 800a136:	d877      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a138:	2b50      	cmp	r3, #80	; 0x50
 800a13a:	d03c      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a13c:	2b50      	cmp	r3, #80	; 0x50
 800a13e:	d873      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a140:	2b40      	cmp	r3, #64	; 0x40
 800a142:	d058      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a144:	2b40      	cmp	r3, #64	; 0x40
 800a146:	d86f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a148:	2b30      	cmp	r3, #48	; 0x30
 800a14a:	d064      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a14c:	2b30      	cmp	r3, #48	; 0x30
 800a14e:	d86b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a150:	2b20      	cmp	r3, #32
 800a152:	d060      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d867      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05c      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a15c:	2b10      	cmp	r3, #16
 800a15e:	d05a      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a160:	e062      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a172:	f000 fd71 	bl	800ac58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	609a      	str	r2, [r3, #8]
      break;
 800a18e:	e04f      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1a0:	f000 fd5a 	bl	800ac58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1b2:	609a      	str	r2, [r3, #8]
      break;
 800a1b4:	e03c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 fc18 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2150      	movs	r1, #80	; 0x50
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fd27 	bl	800ac22 <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e02c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f000 fc74 	bl	800aad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2160      	movs	r1, #96	; 0x60
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fd17 	bl	800ac22 <TIM_ITRx_SetConfig>
      break;
 800a1f4:	e01c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a202:	461a      	mov	r2, r3
 800a204:	f000 fbf8 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2140      	movs	r1, #64	; 0x40
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fd07 	bl	800ac22 <TIM_ITRx_SetConfig>
      break;
 800a214:	e00c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f000 fcfe 	bl	800ac22 <TIM_ITRx_SetConfig>
      break;
 800a226:	e003      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	e000      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a22e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	fffeff88 	.word	0xfffeff88

0800a250 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b0c      	cmp	r3, #12
 800a262:	d831      	bhi.n	800a2c8 <HAL_TIM_ReadCapturedValue+0x78>
 800a264:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26a:	bf00      	nop
 800a26c:	0800a2a1 	.word	0x0800a2a1
 800a270:	0800a2c9 	.word	0x0800a2c9
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a2c9 	.word	0x0800a2c9
 800a27c:	0800a2ab 	.word	0x0800a2ab
 800a280:	0800a2c9 	.word	0x0800a2c9
 800a284:	0800a2c9 	.word	0x0800a2c9
 800a288:	0800a2c9 	.word	0x0800a2c9
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2c9 	.word	0x0800a2c9
 800a294:	0800a2c9 	.word	0x0800a2c9
 800a298:	0800a2c9 	.word	0x0800a2c9
 800a29c:	0800a2bf 	.word	0x0800a2bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a6:	60fb      	str	r3, [r7, #12]

      break;
 800a2a8:	e00f      	b.n	800a2ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	60fb      	str	r3, [r7, #12]

      break;
 800a2b2:	e00a      	b.n	800a2ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ba:	60fb      	str	r3, [r7, #12]

      break;
 800a2bc:	e005      	b.n	800a2ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	60fb      	str	r3, [r7, #12]

      break;
 800a2c6:	e000      	b.n	800a2ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a2c8:	bf00      	nop
  }

  return tmpreg;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a40      	ldr	r2, [pc, #256]	; (800a428 <TIM_Base_SetConfig+0x114>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d013      	beq.n	800a354 <TIM_Base_SetConfig+0x40>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a332:	d00f      	beq.n	800a354 <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a3d      	ldr	r2, [pc, #244]	; (800a42c <TIM_Base_SetConfig+0x118>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00b      	beq.n	800a354 <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a3c      	ldr	r2, [pc, #240]	; (800a430 <TIM_Base_SetConfig+0x11c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d007      	beq.n	800a354 <TIM_Base_SetConfig+0x40>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a3b      	ldr	r2, [pc, #236]	; (800a434 <TIM_Base_SetConfig+0x120>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_Base_SetConfig+0x40>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a3a      	ldr	r2, [pc, #232]	; (800a438 <TIM_Base_SetConfig+0x124>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d108      	bne.n	800a366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a2f      	ldr	r2, [pc, #188]	; (800a428 <TIM_Base_SetConfig+0x114>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d02b      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a374:	d027      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a2c      	ldr	r2, [pc, #176]	; (800a42c <TIM_Base_SetConfig+0x118>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d023      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a2b      	ldr	r2, [pc, #172]	; (800a430 <TIM_Base_SetConfig+0x11c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d01f      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a2a      	ldr	r2, [pc, #168]	; (800a434 <TIM_Base_SetConfig+0x120>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d01b      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a29      	ldr	r2, [pc, #164]	; (800a438 <TIM_Base_SetConfig+0x124>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d017      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a28      	ldr	r2, [pc, #160]	; (800a43c <TIM_Base_SetConfig+0x128>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a27      	ldr	r2, [pc, #156]	; (800a440 <TIM_Base_SetConfig+0x12c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00f      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a26      	ldr	r2, [pc, #152]	; (800a444 <TIM_Base_SetConfig+0x130>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00b      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a25      	ldr	r2, [pc, #148]	; (800a448 <TIM_Base_SetConfig+0x134>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d007      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a24      	ldr	r2, [pc, #144]	; (800a44c <TIM_Base_SetConfig+0x138>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d003      	beq.n	800a3c6 <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a23      	ldr	r2, [pc, #140]	; (800a450 <TIM_Base_SetConfig+0x13c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d108      	bne.n	800a3d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a0a      	ldr	r2, [pc, #40]	; (800a428 <TIM_Base_SetConfig+0x114>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d003      	beq.n	800a40c <TIM_Base_SetConfig+0xf8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a0c      	ldr	r2, [pc, #48]	; (800a438 <TIM_Base_SetConfig+0x124>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d103      	bne.n	800a414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	615a      	str	r2, [r3, #20]
}
 800a41a:	bf00      	nop
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40010000 	.word	0x40010000
 800a42c:	40000400 	.word	0x40000400
 800a430:	40000800 	.word	0x40000800
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40010400 	.word	0x40010400
 800a43c:	40014000 	.word	0x40014000
 800a440:	40014400 	.word	0x40014400
 800a444:	40014800 	.word	0x40014800
 800a448:	40001800 	.word	0x40001800
 800a44c:	40001c00 	.word	0x40001c00
 800a450:	40002000 	.word	0x40002000

0800a454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	f023 0201 	bic.w	r2, r3, #1
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <TIM_OC1_SetConfig+0xd8>)
 800a480:	4013      	ands	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4313      	orrs	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f023 0302 	bic.w	r3, r3, #2
 800a49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a21      	ldr	r2, [pc, #132]	; (800a530 <TIM_OC1_SetConfig+0xdc>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d003      	beq.n	800a4b8 <TIM_OC1_SetConfig+0x64>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a20      	ldr	r2, [pc, #128]	; (800a534 <TIM_OC1_SetConfig+0xe0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d10c      	bne.n	800a4d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f023 0308 	bic.w	r3, r3, #8
 800a4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f023 0304 	bic.w	r3, r3, #4
 800a4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a16      	ldr	r2, [pc, #88]	; (800a530 <TIM_OC1_SetConfig+0xdc>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d003      	beq.n	800a4e2 <TIM_OC1_SetConfig+0x8e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	; (800a534 <TIM_OC1_SetConfig+0xe0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d111      	bne.n	800a506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	621a      	str	r2, [r3, #32]
}
 800a520:	bf00      	nop
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	fffeff8f 	.word	0xfffeff8f
 800a530:	40010000 	.word	0x40010000
 800a534:	40010400 	.word	0x40010400

0800a538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	f023 0210 	bic.w	r2, r3, #16
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <TIM_OC2_SetConfig+0xe4>)
 800a564:	4013      	ands	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0320 	bic.w	r3, r3, #32
 800a582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	011b      	lsls	r3, r3, #4
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a23      	ldr	r2, [pc, #140]	; (800a620 <TIM_OC2_SetConfig+0xe8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d003      	beq.n	800a5a0 <TIM_OC2_SetConfig+0x68>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a22      	ldr	r2, [pc, #136]	; (800a624 <TIM_OC2_SetConfig+0xec>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d10d      	bne.n	800a5bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a18      	ldr	r2, [pc, #96]	; (800a620 <TIM_OC2_SetConfig+0xe8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC2_SetConfig+0x94>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a17      	ldr	r2, [pc, #92]	; (800a624 <TIM_OC2_SetConfig+0xec>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d113      	bne.n	800a5f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	feff8fff 	.word	0xfeff8fff
 800a620:	40010000 	.word	0x40010000
 800a624:	40010400 	.word	0x40010400

0800a628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <TIM_OC3_SetConfig+0xe0>)
 800a654:	4013      	ands	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0303 	bic.w	r3, r3, #3
 800a65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a22      	ldr	r2, [pc, #136]	; (800a70c <TIM_OC3_SetConfig+0xe4>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d003      	beq.n	800a68e <TIM_OC3_SetConfig+0x66>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a21      	ldr	r2, [pc, #132]	; (800a710 <TIM_OC3_SetConfig+0xe8>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d10d      	bne.n	800a6aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a17      	ldr	r2, [pc, #92]	; (800a70c <TIM_OC3_SetConfig+0xe4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_OC3_SetConfig+0x92>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a16      	ldr	r2, [pc, #88]	; (800a710 <TIM_OC3_SetConfig+0xe8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d113      	bne.n	800a6e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	621a      	str	r2, [r3, #32]
}
 800a6fc:	bf00      	nop
 800a6fe:	371c      	adds	r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	fffeff8f 	.word	0xfffeff8f
 800a70c:	40010000 	.word	0x40010000
 800a710:	40010400 	.word	0x40010400

0800a714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a714:	b480      	push	{r7}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4b1e      	ldr	r3, [pc, #120]	; (800a7b8 <TIM_OC4_SetConfig+0xa4>)
 800a740:	4013      	ands	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a75e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	031b      	lsls	r3, r3, #12
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a13      	ldr	r2, [pc, #76]	; (800a7bc <TIM_OC4_SetConfig+0xa8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d003      	beq.n	800a77c <TIM_OC4_SetConfig+0x68>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a12      	ldr	r2, [pc, #72]	; (800a7c0 <TIM_OC4_SetConfig+0xac>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d109      	bne.n	800a790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	019b      	lsls	r3, r3, #6
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	feff8fff 	.word	0xfeff8fff
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40010400 	.word	0x40010400

0800a7c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <TIM_OC5_SetConfig+0x98>)
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	041b      	lsls	r3, r3, #16
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	4313      	orrs	r3, r2
 800a810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a12      	ldr	r2, [pc, #72]	; (800a860 <TIM_OC5_SetConfig+0x9c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d003      	beq.n	800a822 <TIM_OC5_SetConfig+0x5e>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a11      	ldr	r2, [pc, #68]	; (800a864 <TIM_OC5_SetConfig+0xa0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d109      	bne.n	800a836 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	621a      	str	r2, [r3, #32]
}
 800a850:	bf00      	nop
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	fffeff8f 	.word	0xfffeff8f
 800a860:	40010000 	.word	0x40010000
 800a864:	40010400 	.word	0x40010400

0800a868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4b1c      	ldr	r3, [pc, #112]	; (800a904 <TIM_OC6_SetConfig+0x9c>)
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	051b      	lsls	r3, r3, #20
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a13      	ldr	r2, [pc, #76]	; (800a908 <TIM_OC6_SetConfig+0xa0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d003      	beq.n	800a8c8 <TIM_OC6_SetConfig+0x60>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a12      	ldr	r2, [pc, #72]	; (800a90c <TIM_OC6_SetConfig+0xa4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d109      	bne.n	800a8dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	029b      	lsls	r3, r3, #10
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	621a      	str	r2, [r3, #32]
}
 800a8f6:	bf00      	nop
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	feff8fff 	.word	0xfeff8fff
 800a908:	40010000 	.word	0x40010000
 800a90c:	40010400 	.word	0x40010400

0800a910 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	f023 0201 	bic.w	r2, r3, #1
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4a28      	ldr	r2, [pc, #160]	; (800a9dc <TIM_TI1_SetConfig+0xcc>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d01b      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a944:	d017      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a25      	ldr	r2, [pc, #148]	; (800a9e0 <TIM_TI1_SetConfig+0xd0>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <TIM_TI1_SetConfig+0xd4>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00f      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a23      	ldr	r2, [pc, #140]	; (800a9e8 <TIM_TI1_SetConfig+0xd8>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00b      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a22      	ldr	r2, [pc, #136]	; (800a9ec <TIM_TI1_SetConfig+0xdc>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d007      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4a21      	ldr	r2, [pc, #132]	; (800a9f0 <TIM_TI1_SetConfig+0xe0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_TI1_SetConfig+0x66>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a20      	ldr	r2, [pc, #128]	; (800a9f4 <TIM_TI1_SetConfig+0xe4>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d101      	bne.n	800a97a <TIM_TI1_SetConfig+0x6a>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <TIM_TI1_SetConfig+0x6c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d008      	beq.n	800a992 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e003      	b.n	800a99a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f043 0301 	orr.w	r3, r3, #1
 800a998:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	011b      	lsls	r3, r3, #4
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f023 030a 	bic.w	r3, r3, #10
 800a9b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f003 030a 	and.w	r3, r3, #10
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	621a      	str	r2, [r3, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	40010000 	.word	0x40010000
 800a9e0:	40000400 	.word	0x40000400
 800a9e4:	40000800 	.word	0x40000800
 800a9e8:	40000c00 	.word	0x40000c00
 800a9ec:	40010400 	.word	0x40010400
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	40001800 	.word	0x40001800

0800a9f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	f023 0201 	bic.w	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f023 030a 	bic.w	r3, r3, #10
 800aa34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b087      	sub	sp, #28
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	f023 0210 	bic.w	r2, r3, #16
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	031b      	lsls	r3, r3, #12
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	621a      	str	r2, [r3, #32]
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	f023 0210 	bic.w	r2, r3, #16
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aafa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	031b      	lsls	r3, r3, #12
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	621a      	str	r2, [r3, #32]
}
 800ab24:	bf00      	nop
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	021b      	lsls	r3, r3, #8
 800ab86:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	621a      	str	r2, [r3, #32]
}
 800ab9c:	bf00      	nop
 800ab9e:	371c      	adds	r7, #28
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abe6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	031b      	lsls	r3, r3, #12
 800abec:	b29b      	uxth	r3, r3
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800abfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	031b      	lsls	r3, r3, #12
 800ac00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	621a      	str	r2, [r3, #32]
}
 800ac16:	bf00      	nop
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	f043 0307 	orr.w	r3, r3, #7
 800ac44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	609a      	str	r2, [r3, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	021a      	lsls	r2, r3, #8
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	431a      	orrs	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	609a      	str	r2, [r3, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	2201      	movs	r2, #1
 800acac:	fa02 f303 	lsl.w	r3, r2, r3
 800acb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	43db      	mvns	r3, r3
 800acba:	401a      	ands	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a1a      	ldr	r2, [r3, #32]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	fa01 f303 	lsl.w	r3, r1, r3
 800acd0:	431a      	orrs	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	621a      	str	r2, [r3, #32]
}
 800acd6:	bf00      	nop
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d101      	bne.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acf8:	2302      	movs	r3, #2
 800acfa:	e06d      	b.n	800add8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a30      	ldr	r2, [pc, #192]	; (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a2f      	ldr	r2, [pc, #188]	; (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d108      	bne.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a20      	ldr	r2, [pc, #128]	; (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d022      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad6e:	d01d      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a1d      	ldr	r2, [pc, #116]	; (800adec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d018      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a1c      	ldr	r2, [pc, #112]	; (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d013      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a1a      	ldr	r2, [pc, #104]	; (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00e      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d009      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d004      	beq.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a15      	ldr	r2, [pc, #84]	; (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d10c      	bne.n	800adc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40010400 	.word	0x40010400
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40014000 	.word	0x40014000
 800adfc:	40001800 	.word	0x40001800

0800ae00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d101      	bne.n	800ae1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e065      	b.n	800aee8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	041b      	lsls	r3, r3, #16
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a16      	ldr	r2, [pc, #88]	; (800aef4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d004      	beq.n	800aeaa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a14      	ldr	r2, [pc, #80]	; (800aef8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d115      	bne.n	800aed6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	051b      	lsls	r3, r3, #20
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40010400 	.word	0x40010400

0800aefc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e040      	b.n	800afcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7f8 fab8 	bl	80034d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2224      	movs	r2, #36	; 0x24
 800af64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0201 	bic.w	r2, r2, #1
 800af74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fc2a 	bl	800b7d0 <UART_SetConfig>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e022      	b.n	800afcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fe82 	bl	800bc98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689a      	ldr	r2, [r3, #8]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0201 	orr.w	r2, r2, #1
 800afc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 ff09 	bl	800bddc <UART_CheckIdleState>
 800afca:	4603      	mov	r3, r0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	; 0x28
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	603b      	str	r3, [r7, #0]
 800afe0:	4613      	mov	r3, r2
 800afe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe8:	2b20      	cmp	r3, #32
 800afea:	d171      	bne.n	800b0d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <HAL_UART_Transmit+0x24>
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e06a      	b.n	800b0d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2221      	movs	r2, #33	; 0x21
 800b008:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b00a:	f7fa fd3b 	bl	8005a84 <HAL_GetTick>
 800b00e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	88fa      	ldrh	r2, [r7, #6]
 800b014:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	88fa      	ldrh	r2, [r7, #6]
 800b01c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b028:	d108      	bne.n	800b03c <HAL_UART_Transmit+0x68>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	e003      	b.n	800b044 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b044:	e02c      	b.n	800b0a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	2180      	movs	r1, #128	; 0x80
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fefa 	bl	800be4a <UART_WaitOnFlagUntilTimeout>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e038      	b.n	800b0d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10b      	bne.n	800b07e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	3302      	adds	r3, #2
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	e007      	b.n	800b08e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	3301      	adds	r3, #1
 800b08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b094:	b29b      	uxth	r3, r3
 800b096:	3b01      	subs	r3, #1
 800b098:	b29a      	uxth	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1cc      	bne.n	800b046 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2140      	movs	r1, #64	; 0x40
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 fec7 	bl	800be4a <UART_WaitOnFlagUntilTimeout>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e005      	b.n	800b0d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e000      	b.n	800b0d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b0d0:	2302      	movs	r3, #2
  }
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3720      	adds	r7, #32
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b08a      	sub	sp, #40	; 0x28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0ee:	2b20      	cmp	r3, #32
 800b0f0:	d132      	bne.n	800b158 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <HAL_UART_Receive_IT+0x24>
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e02b      	b.n	800b15a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d018      	beq.n	800b148 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	613b      	str	r3, [r7, #16]
   return(result);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	623b      	str	r3, [r7, #32]
 800b136:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	69f9      	ldr	r1, [r7, #28]
 800b13a:	6a3a      	ldr	r2, [r7, #32]
 800b13c:	e841 2300 	strex	r3, r2, [r1]
 800b140:	61bb      	str	r3, [r7, #24]
   return(result);
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1e6      	bne.n	800b116 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	461a      	mov	r2, r3
 800b14c:	68b9      	ldr	r1, [r7, #8]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 ff42 	bl	800bfd8 <UART_Start_Receive_IT>
 800b154:	4603      	mov	r3, r0
 800b156:	e000      	b.n	800b15a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b158:	2302      	movs	r3, #2
  }
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3728      	adds	r7, #40	; 0x28
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b08a      	sub	sp, #40	; 0x28
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	4613      	mov	r3, r2
 800b16e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b176:	2b20      	cmp	r3, #32
 800b178:	d132      	bne.n	800b1e0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <HAL_UART_Receive_DMA+0x24>
 800b180:	88fb      	ldrh	r3, [r7, #6]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e02b      	b.n	800b1e2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d018      	beq.n	800b1d0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	623b      	str	r3, [r7, #32]
 800b1be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	6a3a      	ldr	r2, [r7, #32]
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e6      	bne.n	800b19e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b1d0:	88fb      	ldrh	r3, [r7, #6]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 ffc4 	bl	800c164 <UART_Start_Receive_DMA>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	e000      	b.n	800b1e2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b1e0:	2302      	movs	r3, #2
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3728      	adds	r7, #40	; 0x28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b0ba      	sub	sp, #232	; 0xe8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b216:	f640 030f 	movw	r3, #2063	; 0x80f
 800b21a:	4013      	ands	r3, r2
 800b21c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b224:	2b00      	cmp	r3, #0
 800b226:	d115      	bne.n	800b254 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22c:	f003 0320 	and.w	r3, r3, #32
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00f      	beq.n	800b254 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b238:	f003 0320 	and.w	r3, r3, #32
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 8297 	beq.w	800b778 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
      }
      return;
 800b252:	e291      	b.n	800b778 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8117 	beq.w	800b48c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b26a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b26e:	4b85      	ldr	r3, [pc, #532]	; (800b484 <HAL_UART_IRQHandler+0x298>)
 800b270:	4013      	ands	r3, r2
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 810a 	beq.w	800b48c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d011      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xbc>
 800b284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2201      	movs	r2, #1
 800b296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b29e:	f043 0201 	orr.w	r2, r3, #1
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d011      	beq.n	800b2d8 <HAL_UART_IRQHandler+0xec>
 800b2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2ce:	f043 0204 	orr.w	r2, r3, #4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2dc:	f003 0304 	and.w	r3, r3, #4
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d011      	beq.n	800b308 <HAL_UART_IRQHandler+0x11c>
 800b2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00b      	beq.n	800b308 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2204      	movs	r2, #4
 800b2f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2fe:	f043 0202 	orr.w	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d017      	beq.n	800b344 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d105      	bne.n	800b32c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b324:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2208      	movs	r2, #8
 800b332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b33a:	f043 0208 	orr.w	r2, r3, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d012      	beq.n	800b376 <HAL_UART_IRQHandler+0x18a>
 800b350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00c      	beq.n	800b376 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b36c:	f043 0220 	orr.w	r2, r3, #32
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 81fd 	beq.w	800b77c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b38e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b392:	f003 0320 	and.w	r3, r3, #32
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3be:	2b40      	cmp	r3, #64	; 0x40
 800b3c0:	d005      	beq.n	800b3ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d04f      	beq.n	800b46e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 ff8e 	bl	800c2f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3de:	2b40      	cmp	r3, #64	; 0x40
 800b3e0:	d141      	bne.n	800b466 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3f0:	e853 3f00 	ldrex	r3, [r3]
 800b3f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b40e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b41a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1d9      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b432:	2b00      	cmp	r3, #0
 800b434:	d013      	beq.n	800b45e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b43a:	4a13      	ldr	r2, [pc, #76]	; (800b488 <HAL_UART_IRQHandler+0x29c>)
 800b43c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b442:	4618      	mov	r0, r3
 800b444:	f7fa fdae 	bl	8005fa4 <HAL_DMA_Abort_IT>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d017      	beq.n	800b47e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45c:	e00f      	b.n	800b47e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7f7 f87a 	bl	8002558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b464:	e00b      	b.n	800b47e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7f7 f876 	bl	8002558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46c:	e007      	b.n	800b47e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f7 f872 	bl	8002558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b47c:	e17e      	b.n	800b77c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47e:	bf00      	nop
    return;
 800b480:	e17c      	b.n	800b77c <HAL_UART_IRQHandler+0x590>
 800b482:	bf00      	nop
 800b484:	04000120 	.word	0x04000120
 800b488:	0800c59d 	.word	0x0800c59d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b490:	2b01      	cmp	r3, #1
 800b492:	f040 814c 	bne.w	800b72e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49a:	f003 0310 	and.w	r3, r3, #16
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 8145 	beq.w	800b72e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 813e 	beq.w	800b72e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2210      	movs	r2, #16
 800b4b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	f040 80b6 	bne.w	800b636 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8150 	beq.w	800b780 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	f080 8148 	bcs.w	800b780 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b504:	f000 8086 	beq.w	800b614 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b53e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b54a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1da      	bne.n	800b508 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b564:	f023 0301 	bic.w	r3, r3, #1
 800b568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3308      	adds	r3, #8
 800b572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b57a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b57e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e1      	bne.n	800b552 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3308      	adds	r3, #8
 800b594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e3      	bne.n	800b58e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5e4:	f023 0310 	bic.w	r3, r3, #16
 800b5e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5fe:	e841 2300 	strex	r3, r2, [r1]
 800b602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1e4      	bne.n	800b5d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fa fc58 	bl	8005ec4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b626:	b29b      	uxth	r3, r3
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f8c2 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b634:	e0a4      	b.n	800b780 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b642:	b29b      	uxth	r3, r3
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b650:	b29b      	uxth	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 8096 	beq.w	800b784 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8091 	beq.w	800b784 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b684:	647b      	str	r3, [r7, #68]	; 0x44
 800b686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e4      	bne.n	800b662 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	623b      	str	r3, [r7, #32]
   return(result);
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	f023 0301 	bic.w	r3, r3, #1
 800b6ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6bc:	633a      	str	r2, [r7, #48]	; 0x30
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c4:	e841 2300 	strex	r3, r2, [r1]
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e3      	bne.n	800b698 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f023 0310 	bic.w	r3, r3, #16
 800b6f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	69b9      	ldr	r1, [r7, #24]
 800b70c:	69fa      	ldr	r2, [r7, #28]
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	617b      	str	r3, [r7, #20]
   return(result);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e4      	bne.n	800b6e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2202      	movs	r2, #2
 800b71e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f846 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b72c:	e02a      	b.n	800b784 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00e      	beq.n	800b758 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01c      	beq.n	800b788 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
    }
    return;
 800b756:	e017      	b.n	800b788 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d012      	beq.n	800b78a <HAL_UART_IRQHandler+0x59e>
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00c      	beq.n	800b78a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 ff29 	bl	800c5c8 <UART_EndTransmit_IT>
    return;
 800b776:	e008      	b.n	800b78a <HAL_UART_IRQHandler+0x59e>
      return;
 800b778:	bf00      	nop
 800b77a:	e006      	b.n	800b78a <HAL_UART_IRQHandler+0x59e>
    return;
 800b77c:	bf00      	nop
 800b77e:	e004      	b.n	800b78a <HAL_UART_IRQHandler+0x59e>
      return;
 800b780:	bf00      	nop
 800b782:	e002      	b.n	800b78a <HAL_UART_IRQHandler+0x59e>
      return;
 800b784:	bf00      	nop
 800b786:	e000      	b.n	800b78a <HAL_UART_IRQHandler+0x59e>
    return;
 800b788:	bf00      	nop
  }

}
 800b78a:	37e8      	adds	r7, #232	; 0xe8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	4ba6      	ldr	r3, [pc, #664]	; (800ba94 <UART_SetConfig+0x2c4>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	6979      	ldr	r1, [r7, #20]
 800b804:	430b      	orrs	r3, r1
 800b806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	430a      	orrs	r2, r1
 800b81c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	430a      	orrs	r2, r1
 800b840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a94      	ldr	r2, [pc, #592]	; (800ba98 <UART_SetConfig+0x2c8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d120      	bne.n	800b88e <UART_SetConfig+0xbe>
 800b84c:	4b93      	ldr	r3, [pc, #588]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	2b03      	cmp	r3, #3
 800b858:	d816      	bhi.n	800b888 <UART_SetConfig+0xb8>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <UART_SetConfig+0x90>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b87d 	.word	0x0800b87d
 800b868:	0800b877 	.word	0x0800b877
 800b86c:	0800b883 	.word	0x0800b883
 800b870:	2301      	movs	r3, #1
 800b872:	77fb      	strb	r3, [r7, #31]
 800b874:	e150      	b.n	800bb18 <UART_SetConfig+0x348>
 800b876:	2302      	movs	r3, #2
 800b878:	77fb      	strb	r3, [r7, #31]
 800b87a:	e14d      	b.n	800bb18 <UART_SetConfig+0x348>
 800b87c:	2304      	movs	r3, #4
 800b87e:	77fb      	strb	r3, [r7, #31]
 800b880:	e14a      	b.n	800bb18 <UART_SetConfig+0x348>
 800b882:	2308      	movs	r3, #8
 800b884:	77fb      	strb	r3, [r7, #31]
 800b886:	e147      	b.n	800bb18 <UART_SetConfig+0x348>
 800b888:	2310      	movs	r3, #16
 800b88a:	77fb      	strb	r3, [r7, #31]
 800b88c:	e144      	b.n	800bb18 <UART_SetConfig+0x348>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a83      	ldr	r2, [pc, #524]	; (800baa0 <UART_SetConfig+0x2d0>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d132      	bne.n	800b8fe <UART_SetConfig+0x12e>
 800b898:	4b80      	ldr	r3, [pc, #512]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89e:	f003 030c 	and.w	r3, r3, #12
 800b8a2:	2b0c      	cmp	r3, #12
 800b8a4:	d828      	bhi.n	800b8f8 <UART_SetConfig+0x128>
 800b8a6:	a201      	add	r2, pc, #4	; (adr r2, 800b8ac <UART_SetConfig+0xdc>)
 800b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ac:	0800b8e1 	.word	0x0800b8e1
 800b8b0:	0800b8f9 	.word	0x0800b8f9
 800b8b4:	0800b8f9 	.word	0x0800b8f9
 800b8b8:	0800b8f9 	.word	0x0800b8f9
 800b8bc:	0800b8ed 	.word	0x0800b8ed
 800b8c0:	0800b8f9 	.word	0x0800b8f9
 800b8c4:	0800b8f9 	.word	0x0800b8f9
 800b8c8:	0800b8f9 	.word	0x0800b8f9
 800b8cc:	0800b8e7 	.word	0x0800b8e7
 800b8d0:	0800b8f9 	.word	0x0800b8f9
 800b8d4:	0800b8f9 	.word	0x0800b8f9
 800b8d8:	0800b8f9 	.word	0x0800b8f9
 800b8dc:	0800b8f3 	.word	0x0800b8f3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	77fb      	strb	r3, [r7, #31]
 800b8e4:	e118      	b.n	800bb18 <UART_SetConfig+0x348>
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	77fb      	strb	r3, [r7, #31]
 800b8ea:	e115      	b.n	800bb18 <UART_SetConfig+0x348>
 800b8ec:	2304      	movs	r3, #4
 800b8ee:	77fb      	strb	r3, [r7, #31]
 800b8f0:	e112      	b.n	800bb18 <UART_SetConfig+0x348>
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	77fb      	strb	r3, [r7, #31]
 800b8f6:	e10f      	b.n	800bb18 <UART_SetConfig+0x348>
 800b8f8:	2310      	movs	r3, #16
 800b8fa:	77fb      	strb	r3, [r7, #31]
 800b8fc:	e10c      	b.n	800bb18 <UART_SetConfig+0x348>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a68      	ldr	r2, [pc, #416]	; (800baa4 <UART_SetConfig+0x2d4>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d120      	bne.n	800b94a <UART_SetConfig+0x17a>
 800b908:	4b64      	ldr	r3, [pc, #400]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b90e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b912:	2b30      	cmp	r3, #48	; 0x30
 800b914:	d013      	beq.n	800b93e <UART_SetConfig+0x16e>
 800b916:	2b30      	cmp	r3, #48	; 0x30
 800b918:	d814      	bhi.n	800b944 <UART_SetConfig+0x174>
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	d009      	beq.n	800b932 <UART_SetConfig+0x162>
 800b91e:	2b20      	cmp	r3, #32
 800b920:	d810      	bhi.n	800b944 <UART_SetConfig+0x174>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <UART_SetConfig+0x15c>
 800b926:	2b10      	cmp	r3, #16
 800b928:	d006      	beq.n	800b938 <UART_SetConfig+0x168>
 800b92a:	e00b      	b.n	800b944 <UART_SetConfig+0x174>
 800b92c:	2300      	movs	r3, #0
 800b92e:	77fb      	strb	r3, [r7, #31]
 800b930:	e0f2      	b.n	800bb18 <UART_SetConfig+0x348>
 800b932:	2302      	movs	r3, #2
 800b934:	77fb      	strb	r3, [r7, #31]
 800b936:	e0ef      	b.n	800bb18 <UART_SetConfig+0x348>
 800b938:	2304      	movs	r3, #4
 800b93a:	77fb      	strb	r3, [r7, #31]
 800b93c:	e0ec      	b.n	800bb18 <UART_SetConfig+0x348>
 800b93e:	2308      	movs	r3, #8
 800b940:	77fb      	strb	r3, [r7, #31]
 800b942:	e0e9      	b.n	800bb18 <UART_SetConfig+0x348>
 800b944:	2310      	movs	r3, #16
 800b946:	77fb      	strb	r3, [r7, #31]
 800b948:	e0e6      	b.n	800bb18 <UART_SetConfig+0x348>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a56      	ldr	r2, [pc, #344]	; (800baa8 <UART_SetConfig+0x2d8>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d120      	bne.n	800b996 <UART_SetConfig+0x1c6>
 800b954:	4b51      	ldr	r3, [pc, #324]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b95a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b95e:	2bc0      	cmp	r3, #192	; 0xc0
 800b960:	d013      	beq.n	800b98a <UART_SetConfig+0x1ba>
 800b962:	2bc0      	cmp	r3, #192	; 0xc0
 800b964:	d814      	bhi.n	800b990 <UART_SetConfig+0x1c0>
 800b966:	2b80      	cmp	r3, #128	; 0x80
 800b968:	d009      	beq.n	800b97e <UART_SetConfig+0x1ae>
 800b96a:	2b80      	cmp	r3, #128	; 0x80
 800b96c:	d810      	bhi.n	800b990 <UART_SetConfig+0x1c0>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <UART_SetConfig+0x1a8>
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d006      	beq.n	800b984 <UART_SetConfig+0x1b4>
 800b976:	e00b      	b.n	800b990 <UART_SetConfig+0x1c0>
 800b978:	2300      	movs	r3, #0
 800b97a:	77fb      	strb	r3, [r7, #31]
 800b97c:	e0cc      	b.n	800bb18 <UART_SetConfig+0x348>
 800b97e:	2302      	movs	r3, #2
 800b980:	77fb      	strb	r3, [r7, #31]
 800b982:	e0c9      	b.n	800bb18 <UART_SetConfig+0x348>
 800b984:	2304      	movs	r3, #4
 800b986:	77fb      	strb	r3, [r7, #31]
 800b988:	e0c6      	b.n	800bb18 <UART_SetConfig+0x348>
 800b98a:	2308      	movs	r3, #8
 800b98c:	77fb      	strb	r3, [r7, #31]
 800b98e:	e0c3      	b.n	800bb18 <UART_SetConfig+0x348>
 800b990:	2310      	movs	r3, #16
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e0c0      	b.n	800bb18 <UART_SetConfig+0x348>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a44      	ldr	r2, [pc, #272]	; (800baac <UART_SetConfig+0x2dc>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d125      	bne.n	800b9ec <UART_SetConfig+0x21c>
 800b9a0:	4b3e      	ldr	r3, [pc, #248]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9ae:	d017      	beq.n	800b9e0 <UART_SetConfig+0x210>
 800b9b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9b4:	d817      	bhi.n	800b9e6 <UART_SetConfig+0x216>
 800b9b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ba:	d00b      	beq.n	800b9d4 <UART_SetConfig+0x204>
 800b9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9c0:	d811      	bhi.n	800b9e6 <UART_SetConfig+0x216>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <UART_SetConfig+0x1fe>
 800b9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ca:	d006      	beq.n	800b9da <UART_SetConfig+0x20a>
 800b9cc:	e00b      	b.n	800b9e6 <UART_SetConfig+0x216>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	77fb      	strb	r3, [r7, #31]
 800b9d2:	e0a1      	b.n	800bb18 <UART_SetConfig+0x348>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	77fb      	strb	r3, [r7, #31]
 800b9d8:	e09e      	b.n	800bb18 <UART_SetConfig+0x348>
 800b9da:	2304      	movs	r3, #4
 800b9dc:	77fb      	strb	r3, [r7, #31]
 800b9de:	e09b      	b.n	800bb18 <UART_SetConfig+0x348>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	77fb      	strb	r3, [r7, #31]
 800b9e4:	e098      	b.n	800bb18 <UART_SetConfig+0x348>
 800b9e6:	2310      	movs	r3, #16
 800b9e8:	77fb      	strb	r3, [r7, #31]
 800b9ea:	e095      	b.n	800bb18 <UART_SetConfig+0x348>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a2f      	ldr	r2, [pc, #188]	; (800bab0 <UART_SetConfig+0x2e0>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d125      	bne.n	800ba42 <UART_SetConfig+0x272>
 800b9f6:	4b29      	ldr	r3, [pc, #164]	; (800ba9c <UART_SetConfig+0x2cc>)
 800b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba04:	d017      	beq.n	800ba36 <UART_SetConfig+0x266>
 800ba06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba0a:	d817      	bhi.n	800ba3c <UART_SetConfig+0x26c>
 800ba0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba10:	d00b      	beq.n	800ba2a <UART_SetConfig+0x25a>
 800ba12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba16:	d811      	bhi.n	800ba3c <UART_SetConfig+0x26c>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <UART_SetConfig+0x254>
 800ba1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba20:	d006      	beq.n	800ba30 <UART_SetConfig+0x260>
 800ba22:	e00b      	b.n	800ba3c <UART_SetConfig+0x26c>
 800ba24:	2301      	movs	r3, #1
 800ba26:	77fb      	strb	r3, [r7, #31]
 800ba28:	e076      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	77fb      	strb	r3, [r7, #31]
 800ba2e:	e073      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba30:	2304      	movs	r3, #4
 800ba32:	77fb      	strb	r3, [r7, #31]
 800ba34:	e070      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba36:	2308      	movs	r3, #8
 800ba38:	77fb      	strb	r3, [r7, #31]
 800ba3a:	e06d      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba3c:	2310      	movs	r3, #16
 800ba3e:	77fb      	strb	r3, [r7, #31]
 800ba40:	e06a      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <UART_SetConfig+0x2e4>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d138      	bne.n	800babe <UART_SetConfig+0x2ee>
 800ba4c:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <UART_SetConfig+0x2cc>)
 800ba4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba5a:	d017      	beq.n	800ba8c <UART_SetConfig+0x2bc>
 800ba5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba60:	d82a      	bhi.n	800bab8 <UART_SetConfig+0x2e8>
 800ba62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba66:	d00b      	beq.n	800ba80 <UART_SetConfig+0x2b0>
 800ba68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba6c:	d824      	bhi.n	800bab8 <UART_SetConfig+0x2e8>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <UART_SetConfig+0x2aa>
 800ba72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba76:	d006      	beq.n	800ba86 <UART_SetConfig+0x2b6>
 800ba78:	e01e      	b.n	800bab8 <UART_SetConfig+0x2e8>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	77fb      	strb	r3, [r7, #31]
 800ba7e:	e04b      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba80:	2302      	movs	r3, #2
 800ba82:	77fb      	strb	r3, [r7, #31]
 800ba84:	e048      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba86:	2304      	movs	r3, #4
 800ba88:	77fb      	strb	r3, [r7, #31]
 800ba8a:	e045      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	77fb      	strb	r3, [r7, #31]
 800ba90:	e042      	b.n	800bb18 <UART_SetConfig+0x348>
 800ba92:	bf00      	nop
 800ba94:	efff69f3 	.word	0xefff69f3
 800ba98:	40011000 	.word	0x40011000
 800ba9c:	40023800 	.word	0x40023800
 800baa0:	40004400 	.word	0x40004400
 800baa4:	40004800 	.word	0x40004800
 800baa8:	40004c00 	.word	0x40004c00
 800baac:	40005000 	.word	0x40005000
 800bab0:	40011400 	.word	0x40011400
 800bab4:	40007800 	.word	0x40007800
 800bab8:	2310      	movs	r3, #16
 800baba:	77fb      	strb	r3, [r7, #31]
 800babc:	e02c      	b.n	800bb18 <UART_SetConfig+0x348>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a72      	ldr	r2, [pc, #456]	; (800bc8c <UART_SetConfig+0x4bc>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d125      	bne.n	800bb14 <UART_SetConfig+0x344>
 800bac8:	4b71      	ldr	r3, [pc, #452]	; (800bc90 <UART_SetConfig+0x4c0>)
 800baca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bad2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bad6:	d017      	beq.n	800bb08 <UART_SetConfig+0x338>
 800bad8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800badc:	d817      	bhi.n	800bb0e <UART_SetConfig+0x33e>
 800bade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bae2:	d00b      	beq.n	800bafc <UART_SetConfig+0x32c>
 800bae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bae8:	d811      	bhi.n	800bb0e <UART_SetConfig+0x33e>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <UART_SetConfig+0x326>
 800baee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baf2:	d006      	beq.n	800bb02 <UART_SetConfig+0x332>
 800baf4:	e00b      	b.n	800bb0e <UART_SetConfig+0x33e>
 800baf6:	2300      	movs	r3, #0
 800baf8:	77fb      	strb	r3, [r7, #31]
 800bafa:	e00d      	b.n	800bb18 <UART_SetConfig+0x348>
 800bafc:	2302      	movs	r3, #2
 800bafe:	77fb      	strb	r3, [r7, #31]
 800bb00:	e00a      	b.n	800bb18 <UART_SetConfig+0x348>
 800bb02:	2304      	movs	r3, #4
 800bb04:	77fb      	strb	r3, [r7, #31]
 800bb06:	e007      	b.n	800bb18 <UART_SetConfig+0x348>
 800bb08:	2308      	movs	r3, #8
 800bb0a:	77fb      	strb	r3, [r7, #31]
 800bb0c:	e004      	b.n	800bb18 <UART_SetConfig+0x348>
 800bb0e:	2310      	movs	r3, #16
 800bb10:	77fb      	strb	r3, [r7, #31]
 800bb12:	e001      	b.n	800bb18 <UART_SetConfig+0x348>
 800bb14:	2310      	movs	r3, #16
 800bb16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb20:	d15b      	bne.n	800bbda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bb22:	7ffb      	ldrb	r3, [r7, #31]
 800bb24:	2b08      	cmp	r3, #8
 800bb26:	d828      	bhi.n	800bb7a <UART_SetConfig+0x3aa>
 800bb28:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <UART_SetConfig+0x360>)
 800bb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2e:	bf00      	nop
 800bb30:	0800bb55 	.word	0x0800bb55
 800bb34:	0800bb5d 	.word	0x0800bb5d
 800bb38:	0800bb65 	.word	0x0800bb65
 800bb3c:	0800bb7b 	.word	0x0800bb7b
 800bb40:	0800bb6b 	.word	0x0800bb6b
 800bb44:	0800bb7b 	.word	0x0800bb7b
 800bb48:	0800bb7b 	.word	0x0800bb7b
 800bb4c:	0800bb7b 	.word	0x0800bb7b
 800bb50:	0800bb73 	.word	0x0800bb73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb54:	f7fc f90a 	bl	8007d6c <HAL_RCC_GetPCLK1Freq>
 800bb58:	61b8      	str	r0, [r7, #24]
        break;
 800bb5a:	e013      	b.n	800bb84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb5c:	f7fc f91a 	bl	8007d94 <HAL_RCC_GetPCLK2Freq>
 800bb60:	61b8      	str	r0, [r7, #24]
        break;
 800bb62:	e00f      	b.n	800bb84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb64:	4b4b      	ldr	r3, [pc, #300]	; (800bc94 <UART_SetConfig+0x4c4>)
 800bb66:	61bb      	str	r3, [r7, #24]
        break;
 800bb68:	e00c      	b.n	800bb84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb6a:	f7fc f82d 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 800bb6e:	61b8      	str	r0, [r7, #24]
        break;
 800bb70:	e008      	b.n	800bb84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb76:	61bb      	str	r3, [r7, #24]
        break;
 800bb78:	e004      	b.n	800bb84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	77bb      	strb	r3, [r7, #30]
        break;
 800bb82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d074      	beq.n	800bc74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	005a      	lsls	r2, r3, #1
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	085b      	lsrs	r3, r3, #1
 800bb94:	441a      	add	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2b0f      	cmp	r3, #15
 800bba4:	d916      	bls.n	800bbd4 <UART_SetConfig+0x404>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbac:	d212      	bcs.n	800bbd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	f023 030f 	bic.w	r3, r3, #15
 800bbb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	89fb      	ldrh	r3, [r7, #14]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	89fa      	ldrh	r2, [r7, #14]
 800bbd0:	60da      	str	r2, [r3, #12]
 800bbd2:	e04f      	b.n	800bc74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	77bb      	strb	r3, [r7, #30]
 800bbd8:	e04c      	b.n	800bc74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbda:	7ffb      	ldrb	r3, [r7, #31]
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d828      	bhi.n	800bc32 <UART_SetConfig+0x462>
 800bbe0:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <UART_SetConfig+0x418>)
 800bbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe6:	bf00      	nop
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bc15 	.word	0x0800bc15
 800bbf0:	0800bc1d 	.word	0x0800bc1d
 800bbf4:	0800bc33 	.word	0x0800bc33
 800bbf8:	0800bc23 	.word	0x0800bc23
 800bbfc:	0800bc33 	.word	0x0800bc33
 800bc00:	0800bc33 	.word	0x0800bc33
 800bc04:	0800bc33 	.word	0x0800bc33
 800bc08:	0800bc2b 	.word	0x0800bc2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc0c:	f7fc f8ae 	bl	8007d6c <HAL_RCC_GetPCLK1Freq>
 800bc10:	61b8      	str	r0, [r7, #24]
        break;
 800bc12:	e013      	b.n	800bc3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc14:	f7fc f8be 	bl	8007d94 <HAL_RCC_GetPCLK2Freq>
 800bc18:	61b8      	str	r0, [r7, #24]
        break;
 800bc1a:	e00f      	b.n	800bc3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc1c:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <UART_SetConfig+0x4c4>)
 800bc1e:	61bb      	str	r3, [r7, #24]
        break;
 800bc20:	e00c      	b.n	800bc3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc22:	f7fb ffd1 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 800bc26:	61b8      	str	r0, [r7, #24]
        break;
 800bc28:	e008      	b.n	800bc3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc2e:	61bb      	str	r3, [r7, #24]
        break;
 800bc30:	e004      	b.n	800bc3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	77bb      	strb	r3, [r7, #30]
        break;
 800bc3a:	bf00      	nop
    }

    if (pclk != 0U)
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d018      	beq.n	800bc74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	085a      	lsrs	r2, r3, #1
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	441a      	add	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b0f      	cmp	r3, #15
 800bc5a:	d909      	bls.n	800bc70 <UART_SetConfig+0x4a0>
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc62:	d205      	bcs.n	800bc70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60da      	str	r2, [r3, #12]
 800bc6e:	e001      	b.n	800bc74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bc80:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40007c00 	.word	0x40007c00
 800bc90:	40023800 	.word	0x40023800
 800bc94:	00f42400 	.word	0x00f42400

0800bc98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00a      	beq.n	800bcc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	430a      	orrs	r2, r1
 800bce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00a      	beq.n	800bd06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	430a      	orrs	r2, r1
 800bd04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0a:	f003 0308 	and.w	r3, r3, #8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00a      	beq.n	800bd28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	430a      	orrs	r2, r1
 800bd26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	f003 0310 	and.w	r3, r3, #16
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00a      	beq.n	800bd4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	430a      	orrs	r2, r1
 800bd48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	f003 0320 	and.w	r3, r3, #32
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00a      	beq.n	800bd6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01a      	beq.n	800bdae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd96:	d10a      	bne.n	800bdae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	605a      	str	r2, [r3, #4]
  }
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdec:	f7f9 fe4a 	bl	8005a84 <HAL_GetTick>
 800bdf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0308 	and.w	r3, r3, #8
 800bdfc:	2b08      	cmp	r3, #8
 800bdfe:	d10e      	bne.n	800be1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f81b 	bl	800be4a <UART_WaitOnFlagUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e011      	b.n	800be42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2220      	movs	r2, #32
 800be22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2220      	movs	r2, #32
 800be28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b09c      	sub	sp, #112	; 0x70
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	603b      	str	r3, [r7, #0]
 800be56:	4613      	mov	r3, r2
 800be58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be5a:	e0a7      	b.n	800bfac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be62:	f000 80a3 	beq.w	800bfac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be66:	f7f9 fe0d 	bl	8005a84 <HAL_GetTick>
 800be6a:	4602      	mov	r2, r0
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be72:	429a      	cmp	r2, r3
 800be74:	d302      	bcc.n	800be7c <UART_WaitOnFlagUntilTimeout+0x32>
 800be76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d13f      	bne.n	800befc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be90:	667b      	str	r3, [r7, #100]	; 0x64
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bea0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e6      	bne.n	800be7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3308      	adds	r3, #8
 800beb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	f023 0301 	bic.w	r3, r3, #1
 800bec4:	663b      	str	r3, [r7, #96]	; 0x60
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3308      	adds	r3, #8
 800becc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bece:	64ba      	str	r2, [r7, #72]	; 0x48
 800bed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e5      	bne.n	800beae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2220      	movs	r2, #32
 800bee6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e068      	b.n	800bfce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d050      	beq.n	800bfac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf18:	d148      	bne.n	800bfac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	e853 3f00 	ldrex	r3, [r3]
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
 800bf44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e6      	bne.n	800bf24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	613b      	str	r3, [r7, #16]
   return(result);
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f023 0301 	bic.w	r3, r3, #1
 800bf6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf76:	623a      	str	r2, [r7, #32]
 800bf78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	69f9      	ldr	r1, [r7, #28]
 800bf7c:	6a3a      	ldr	r2, [r7, #32]
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e5      	bne.n	800bf56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e010      	b.n	800bfce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69da      	ldr	r2, [r3, #28]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	bf0c      	ite	eq
 800bfbc:	2301      	moveq	r3, #1
 800bfbe:	2300      	movne	r3, #0
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	f43f af48 	beq.w	800be5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3770      	adds	r7, #112	; 0x70
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b097      	sub	sp, #92	; 0x5c
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	88fa      	ldrh	r2, [r7, #6]
 800bff0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	88fa      	ldrh	r2, [r7, #6]
 800bff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c00a:	d10e      	bne.n	800c02a <UART_Start_Receive_IT+0x52>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <UART_Start_Receive_IT+0x48>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c01a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c01e:	e02d      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	22ff      	movs	r2, #255	; 0xff
 800c024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c028:	e028      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10d      	bne.n	800c04e <UART_Start_Receive_IT+0x76>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d104      	bne.n	800c044 <UART_Start_Receive_IT+0x6c>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	22ff      	movs	r2, #255	; 0xff
 800c03e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c042:	e01b      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	227f      	movs	r2, #127	; 0x7f
 800c048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c04c:	e016      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c056:	d10d      	bne.n	800c074 <UART_Start_Receive_IT+0x9c>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d104      	bne.n	800c06a <UART_Start_Receive_IT+0x92>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	227f      	movs	r2, #127	; 0x7f
 800c064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c068:	e008      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	223f      	movs	r2, #63	; 0x3f
 800c06e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c072:	e003      	b.n	800c07c <UART_Start_Receive_IT+0xa4>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2222      	movs	r2, #34	; 0x22
 800c088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3308      	adds	r3, #8
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	f043 0301 	orr.w	r3, r3, #1
 800c0a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3308      	adds	r3, #8
 800c0aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800c0ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e5      	bne.n	800c08c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c8:	d107      	bne.n	800c0da <UART_Start_Receive_IT+0x102>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d103      	bne.n	800c0da <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	4a21      	ldr	r2, [pc, #132]	; (800c15c <UART_Start_Receive_IT+0x184>)
 800c0d6:	669a      	str	r2, [r3, #104]	; 0x68
 800c0d8:	e002      	b.n	800c0e0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	4a20      	ldr	r2, [pc, #128]	; (800c160 <UART_Start_Receive_IT+0x188>)
 800c0de:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d019      	beq.n	800c11c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c106:	637b      	str	r3, [r7, #52]	; 0x34
 800c108:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c10c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10e:	e841 2300 	strex	r3, r2, [r1]
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e6      	bne.n	800c0e8 <UART_Start_Receive_IT+0x110>
 800c11a:	e018      	b.n	800c14e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	613b      	str	r3, [r7, #16]
   return(result);
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	f043 0320 	orr.w	r3, r3, #32
 800c130:	653b      	str	r3, [r7, #80]	; 0x50
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13a:	623b      	str	r3, [r7, #32]
 800c13c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	69f9      	ldr	r1, [r7, #28]
 800c140:	6a3a      	ldr	r2, [r7, #32]
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	61bb      	str	r3, [r7, #24]
   return(result);
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e6      	bne.n	800c11c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	375c      	adds	r7, #92	; 0x5c
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	0800c783 	.word	0x0800c783
 800c160:	0800c61d 	.word	0x0800c61d

0800c164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b096      	sub	sp, #88	; 0x58
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	4613      	mov	r3, r2
 800c170:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	88fa      	ldrh	r2, [r7, #6]
 800c17c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2222      	movs	r2, #34	; 0x22
 800c18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c194:	2b00      	cmp	r3, #0
 800c196:	d028      	beq.n	800c1ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19c:	4a3e      	ldr	r2, [pc, #248]	; (800c298 <UART_Start_Receive_DMA+0x134>)
 800c19e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1a4:	4a3d      	ldr	r2, [pc, #244]	; (800c29c <UART_Start_Receive_DMA+0x138>)
 800c1a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ac:	4a3c      	ldr	r2, [pc, #240]	; (800c2a0 <UART_Start_Receive_DMA+0x13c>)
 800c1ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3324      	adds	r3, #36	; 0x24
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	88fb      	ldrh	r3, [r7, #6]
 800c1cc:	f7f9 fe1a 	bl	8005e04 <HAL_DMA_Start_IT>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2210      	movs	r2, #16
 800c1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2220      	movs	r2, #32
 800c1e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e051      	b.n	800c28e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d018      	beq.n	800c224 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c206:	657b      	str	r3, [r7, #84]	; 0x54
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	461a      	mov	r2, r3
 800c20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c210:	64bb      	str	r3, [r7, #72]	; 0x48
 800c212:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c218:	e841 2300 	strex	r3, r2, [r1]
 800c21c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e6      	bne.n	800c1f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	f043 0301 	orr.w	r3, r3, #1
 800c23a:	653b      	str	r3, [r7, #80]	; 0x50
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3308      	adds	r3, #8
 800c242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c244:	637a      	str	r2, [r7, #52]	; 0x34
 800c246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e5      	bne.n	800c224 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	613b      	str	r3, [r7, #16]
   return(result);
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	3308      	adds	r3, #8
 800c276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c278:	623a      	str	r2, [r7, #32]
 800c27a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	69f9      	ldr	r1, [r7, #28]
 800c27e:	6a3a      	ldr	r2, [r7, #32]
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	61bb      	str	r3, [r7, #24]
   return(result);
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e5      	bne.n	800c258 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3758      	adds	r7, #88	; 0x58
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	0800c3b9 	.word	0x0800c3b9
 800c29c:	0800c4e1 	.word	0x0800c4e1
 800c2a0:	0800c51f 	.word	0x0800c51f

0800c2a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b089      	sub	sp, #36	; 0x24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	e853 3f00 	ldrex	r3, [r3]
 800c2b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ce:	6979      	ldr	r1, [r7, #20]
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1e6      	bne.n	800c2ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c2e4:	bf00      	nop
 800c2e6:	3724      	adds	r7, #36	; 0x24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b095      	sub	sp, #84	; 0x54
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c30c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c316:	643b      	str	r3, [r7, #64]	; 0x40
 800c318:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c31c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e6      	bne.n	800c2f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3308      	adds	r3, #8
 800c330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	61fb      	str	r3, [r7, #28]
   return(result);
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	64bb      	str	r3, [r7, #72]	; 0x48
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3308      	adds	r3, #8
 800c348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c34a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c34c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e5      	bne.n	800c32a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c362:	2b01      	cmp	r3, #1
 800c364:	d118      	bne.n	800c398 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	60bb      	str	r3, [r7, #8]
   return(result);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f023 0310 	bic.w	r3, r3, #16
 800c37a:	647b      	str	r3, [r7, #68]	; 0x44
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	461a      	mov	r2, r3
 800c382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c384:	61bb      	str	r3, [r7, #24]
 800c386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	6979      	ldr	r1, [r7, #20]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	613b      	str	r3, [r7, #16]
   return(result);
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e6      	bne.n	800c366 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2220      	movs	r2, #32
 800c39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c3ac:	bf00      	nop
 800c3ae:	3754      	adds	r7, #84	; 0x54
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b09c      	sub	sp, #112	; 0x70
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ce:	d071      	beq.n	800c4b4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3fe:	e841 2300 	strex	r3, r2, [r1]
 800c402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1e6      	bne.n	800c3d8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	f023 0301 	bic.w	r3, r3, #1
 800c420:	667b      	str	r3, [r7, #100]	; 0x64
 800c422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3308      	adds	r3, #8
 800c428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c42a:	647a      	str	r2, [r7, #68]	; 0x44
 800c42c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e5      	bne.n	800c40a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	623b      	str	r3, [r7, #32]
   return(result);
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c454:	663b      	str	r3, [r7, #96]	; 0x60
 800c456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3308      	adds	r3, #8
 800c45c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c45e:	633a      	str	r2, [r7, #48]	; 0x30
 800c460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c466:	e841 2300 	strex	r3, r2, [r1]
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1e5      	bne.n	800c43e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c474:	2220      	movs	r2, #32
 800c476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d118      	bne.n	800c4b4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	e853 3f00 	ldrex	r3, [r3]
 800c48e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0310 	bic.w	r3, r3, #16
 800c496:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	69b9      	ldr	r1, [r7, #24]
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	e841 2300 	strex	r3, r2, [r1]
 800c4ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e6      	bne.n	800c482 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d107      	bne.n	800c4d2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4cc:	f7ff f974 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4d0:	e002      	b.n	800c4d8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c4d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4d4:	f7f5 ff9e 	bl	8002414 <HAL_UART_RxCpltCallback>
}
 800c4d8:	bf00      	nop
 800c4da:	3770      	adds	r7, #112	; 0x70
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d109      	bne.n	800c510 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c502:	085b      	lsrs	r3, r3, #1
 800c504:	b29b      	uxth	r3, r3
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff f955 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c50e:	e002      	b.n	800c516 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f7ff f947 	bl	800b7a4 <HAL_UART_RxHalfCpltCallback>
}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b086      	sub	sp, #24
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c530:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c538:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c544:	2b80      	cmp	r3, #128	; 0x80
 800c546:	d109      	bne.n	800c55c <UART_DMAError+0x3e>
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	2b21      	cmp	r3, #33	; 0x21
 800c54c:	d106      	bne.n	800c55c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2200      	movs	r2, #0
 800c552:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c556:	6978      	ldr	r0, [r7, #20]
 800c558:	f7ff fea4 	bl	800c2a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d109      	bne.n	800c57e <UART_DMAError+0x60>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b22      	cmp	r3, #34	; 0x22
 800c56e:	d106      	bne.n	800c57e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2200      	movs	r2, #0
 800c574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c578:	6978      	ldr	r0, [r7, #20]
 800c57a:	f7ff feb9 	bl	800c2f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c584:	f043 0210 	orr.w	r2, r3, #16
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c58e:	6978      	ldr	r0, [r7, #20]
 800c590:	f7f5 ffe2 	bl	8002558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7f5 ffcc 	bl	8002558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e4:	61fb      	str	r3, [r7, #28]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	61bb      	str	r3, [r7, #24]
 800c5f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	6979      	ldr	r1, [r7, #20]
 800c5f4:	69ba      	ldr	r2, [r7, #24]
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e6      	bne.n	800c5d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2220      	movs	r2, #32
 800c606:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7ff f8be 	bl	800b790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c614:	bf00      	nop
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b096      	sub	sp, #88	; 0x58
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c62a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c634:	2b22      	cmp	r3, #34	; 0x22
 800c636:	f040 8098 	bne.w	800c76a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c644:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c648:	b2d9      	uxtb	r1, r3
 800c64a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c654:	400a      	ands	r2, r1
 800c656:	b2d2      	uxtb	r2, r2
 800c658:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	3b01      	subs	r3, #1
 800c66e:	b29a      	uxth	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d17b      	bne.n	800c77a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c696:	653b      	str	r3, [r7, #80]	; 0x50
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6a8:	e841 2300 	strex	r3, r2, [r1]
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e6      	bne.n	800c682 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	f023 0301 	bic.w	r3, r3, #1
 800c6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6d4:	633a      	str	r2, [r7, #48]	; 0x30
 800c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e5      	bne.n	800c6b4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c700:	2b01      	cmp	r3, #1
 800c702:	d12e      	bne.n	800c762 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	60fb      	str	r3, [r7, #12]
   return(result);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0310 	bic.w	r3, r3, #16
 800c71e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	461a      	mov	r2, r3
 800c726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c728:	61fb      	str	r3, [r7, #28]
 800c72a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72c:	69b9      	ldr	r1, [r7, #24]
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	e841 2300 	strex	r3, r2, [r1]
 800c734:	617b      	str	r3, [r7, #20]
   return(result);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e6      	bne.n	800c70a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	f003 0310 	and.w	r3, r3, #16
 800c746:	2b10      	cmp	r3, #16
 800c748:	d103      	bne.n	800c752 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2210      	movs	r2, #16
 800c750:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff f82c 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c760:	e00b      	b.n	800c77a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7f5 fe56 	bl	8002414 <HAL_UART_RxCpltCallback>
}
 800c768:	e007      	b.n	800c77a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	699a      	ldr	r2, [r3, #24]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f042 0208 	orr.w	r2, r2, #8
 800c778:	619a      	str	r2, [r3, #24]
}
 800c77a:	bf00      	nop
 800c77c:	3758      	adds	r7, #88	; 0x58
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b096      	sub	sp, #88	; 0x58
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c790:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c79a:	2b22      	cmp	r3, #34	; 0x22
 800c79c:	f040 8098 	bne.w	800c8d0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c7b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c7b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c4:	1c9a      	adds	r2, r3, #2
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d17b      	bne.n	800c8e0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f0:	e853 3f00 	ldrex	r3, [r3]
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
 800c808:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c80e:	e841 2300 	strex	r3, r2, [r1]
 800c812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1e6      	bne.n	800c7e8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	e853 3f00 	ldrex	r3, [r3]
 800c828:	61fb      	str	r3, [r7, #28]
   return(result);
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	f023 0301 	bic.w	r3, r3, #1
 800c830:	64bb      	str	r3, [r7, #72]	; 0x48
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3308      	adds	r3, #8
 800c838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c83a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c83c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e5      	bne.n	800c81a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2220      	movs	r2, #32
 800c852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c866:	2b01      	cmp	r3, #1
 800c868:	d12e      	bne.n	800c8c8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	e853 3f00 	ldrex	r3, [r3]
 800c87c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f023 0310 	bic.w	r3, r3, #16
 800c884:	647b      	str	r3, [r7, #68]	; 0x44
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c892:	6979      	ldr	r1, [r7, #20]
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	e841 2300 	strex	r3, r2, [r1]
 800c89a:	613b      	str	r3, [r7, #16]
   return(result);
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1e6      	bne.n	800c870 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	69db      	ldr	r3, [r3, #28]
 800c8a8:	f003 0310 	and.w	r3, r3, #16
 800c8ac:	2b10      	cmp	r3, #16
 800c8ae:	d103      	bne.n	800c8b8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2210      	movs	r2, #16
 800c8b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7fe ff79 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8c6:	e00b      	b.n	800c8e0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7f5 fda3 	bl	8002414 <HAL_UART_RxCpltCallback>
}
 800c8ce:	e007      	b.n	800c8e0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	699a      	ldr	r2, [r3, #24]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f042 0208 	orr.w	r2, r2, #8
 800c8de:	619a      	str	r2, [r3, #24]
}
 800c8e0:	bf00      	nop
 800c8e2:	3758      	adds	r7, #88	; 0x58
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c8f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8fa:	2b84      	cmp	r3, #132	; 0x84
 800c8fc:	d005      	beq.n	800c90a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c8fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4413      	add	r3, r2
 800c906:	3303      	adds	r3, #3
 800c908:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c90a:	68fb      	ldr	r3, [r7, #12]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c91e:	f3ef 8305 	mrs	r3, IPSR
 800c922:	607b      	str	r3, [r7, #4]
  return(result);
 800c924:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c926:	2b00      	cmp	r3, #0
 800c928:	bf14      	ite	ne
 800c92a:	2301      	movne	r3, #1
 800c92c:	2300      	moveq	r3, #0
 800c92e:	b2db      	uxtb	r3, r3
}
 800c930:	4618      	mov	r0, r3
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c940:	f001 fa38 	bl	800ddb4 <vTaskStartScheduler>
  
  return osOK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	bd80      	pop	{r7, pc}

0800c94a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c94a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94c:	b089      	sub	sp, #36	; 0x24
 800c94e:	af04      	add	r7, sp, #16
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d020      	beq.n	800c99e <osThreadCreate+0x54>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01c      	beq.n	800c99e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685c      	ldr	r4, [r3, #4]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	691e      	ldr	r6, [r3, #16]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff ffb6 	bl	800c8e8 <makeFreeRtosPriority>
 800c97c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c986:	9202      	str	r2, [sp, #8]
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	9100      	str	r1, [sp, #0]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	4632      	mov	r2, r6
 800c990:	4629      	mov	r1, r5
 800c992:	4620      	mov	r0, r4
 800c994:	f001 f834 	bl	800da00 <xTaskCreateStatic>
 800c998:	4603      	mov	r3, r0
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	e01c      	b.n	800c9d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685c      	ldr	r4, [r3, #4]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c9aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff ff98 	bl	800c8e8 <makeFreeRtosPriority>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	f107 030c 	add.w	r3, r7, #12
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	9200      	str	r2, [sp, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f001 f87c 	bl	800dac6 <xTaskCreate>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d001      	beq.n	800c9d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e000      	b.n	800c9da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <osDelay+0x16>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	e000      	b.n	800c9fa <osDelay+0x18>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f001 f9a4 	bl	800dd48 <vTaskDelay>
  
  return osOK;
 800ca00:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	2001      	movs	r0, #1
 800ca22:	f000 fb77 	bl	800d114 <xQueueCreateMutexStatic>
 800ca26:	4603      	mov	r3, r0
 800ca28:	e003      	b.n	800ca32 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	f000 fb5a 	bl	800d0e4 <xQueueCreateMutex>
 800ca30:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ca46:	2300      	movs	r3, #0
 800ca48:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <osMutexWait+0x18>
    return osErrorParameter;
 800ca50:	2380      	movs	r3, #128	; 0x80
 800ca52:	e03a      	b.n	800caca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5e:	d103      	bne.n	800ca68 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	e009      	b.n	800ca7c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d006      	beq.n	800ca7c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <osMutexWait+0x40>
      ticks = 1;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ca7c:	f7ff ff4c 	bl	800c918 <inHandlerMode>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d017      	beq.n	800cab6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fde8 	bl	800d664 <xQueueReceiveFromISR>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d001      	beq.n	800ca9e <osMutexWait+0x62>
      return osErrorOS;
 800ca9a:	23ff      	movs	r3, #255	; 0xff
 800ca9c:	e015      	b.n	800caca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d011      	beq.n	800cac8 <osMutexWait+0x8c>
 800caa4:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <osMutexWait+0x98>)
 800caa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	e008      	b.n	800cac8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fccb 	bl	800d454 <xQueueSemaphoreTake>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d001      	beq.n	800cac8 <osMutexWait+0x8c>
    return osErrorOS;
 800cac4:	23ff      	movs	r3, #255	; 0xff
 800cac6:	e000      	b.n	800caca <osMutexWait+0x8e>
  }
  
  return osOK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cae8:	f7ff ff16 	bl	800c918 <inHandlerMode>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d016      	beq.n	800cb20 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800caf2:	f107 0308 	add.w	r3, r7, #8
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fc15 	bl	800d328 <xQueueGiveFromISR>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d001      	beq.n	800cb08 <osMutexRelease+0x30>
      return osErrorOS;
 800cb04:	23ff      	movs	r3, #255	; 0xff
 800cb06:	e017      	b.n	800cb38 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d013      	beq.n	800cb36 <osMutexRelease+0x5e>
 800cb0e:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <osMutexRelease+0x68>)
 800cb10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	e00a      	b.n	800cb36 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cb20:	2300      	movs	r3, #0
 800cb22:	2200      	movs	r2, #0
 800cb24:	2100      	movs	r1, #0
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fb10 	bl	800d14c <xQueueGenericSend>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d001      	beq.n	800cb36 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800cb32:	23ff      	movs	r3, #255	; 0xff
 800cb34:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800cb36:	68fb      	ldr	r3, [r7, #12]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	e000ed04 	.word	0xe000ed04

0800cb44 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af02      	add	r7, sp, #8
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00f      	beq.n	800cb76 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d10a      	bne.n	800cb72 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	2203      	movs	r2, #3
 800cb62:	9200      	str	r2, [sp, #0]
 800cb64:	2200      	movs	r2, #0
 800cb66:	2100      	movs	r1, #0
 800cb68:	2001      	movs	r0, #1
 800cb6a:	f000 f9be 	bl	800ceea <xQueueGenericCreateStatic>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	e016      	b.n	800cba0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e014      	b.n	800cba0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d110      	bne.n	800cb9e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800cb7c:	2203      	movs	r2, #3
 800cb7e:	2100      	movs	r1, #0
 800cb80:	2001      	movs	r0, #1
 800cb82:	f000 fa34 	bl	800cfee <xQueueGenericCreate>
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d005      	beq.n	800cb9a <osSemaphoreCreate+0x56>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	2200      	movs	r2, #0
 800cb92:	2100      	movs	r1, #0
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f000 fad9 	bl	800d14c <xQueueGenericSend>
      return sema;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	e000      	b.n	800cba0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800cb9e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800cbbc:	2380      	movs	r3, #128	; 0x80
 800cbbe:	e03a      	b.n	800cc36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbca:	d103      	bne.n	800cbd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800cbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e009      	b.n	800cbe8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <osSemaphoreWait+0x40>
      ticks = 1;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cbe8:	f7ff fe96 	bl	800c918 <inHandlerMode>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d017      	beq.n	800cc22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fd32 	bl	800d664 <xQueueReceiveFromISR>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d001      	beq.n	800cc0a <osSemaphoreWait+0x62>
      return osErrorOS;
 800cc06:	23ff      	movs	r3, #255	; 0xff
 800cc08:	e015      	b.n	800cc36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d011      	beq.n	800cc34 <osSemaphoreWait+0x8c>
 800cc10:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <osSemaphoreWait+0x98>)
 800cc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	e008      	b.n	800cc34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fc15 	bl	800d454 <xQueueSemaphoreTake>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d001      	beq.n	800cc34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800cc30:	23ff      	movs	r3, #255	; 0xff
 800cc32:	e000      	b.n	800cc36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cc54:	f7ff fe60 	bl	800c918 <inHandlerMode>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d016      	beq.n	800cc8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fb5f 	bl	800d328 <xQueueGiveFromISR>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d001      	beq.n	800cc74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cc70:	23ff      	movs	r3, #255	; 0xff
 800cc72:	e017      	b.n	800cca4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d013      	beq.n	800cca2 <osSemaphoreRelease+0x5e>
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <osSemaphoreRelease+0x68>)
 800cc7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	e00a      	b.n	800cca2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2100      	movs	r1, #0
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fa5a 	bl	800d14c <xQueueGenericSend>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d001      	beq.n	800cca2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800cc9e:	23ff      	movs	r3, #255	; 0xff
 800cca0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800cca2:	68fb      	ldr	r3, [r7, #12]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	e000ed04 	.word	0xe000ed04

0800ccb0 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fd59 	bl	800d770 <uxQueueMessagesWaiting>
 800ccbe:	4603      	mov	r3, r0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f103 0208 	add.w	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f103 0208 	add.w	r2, r3, #8
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f103 0208 	add.w	r2, r3, #8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd22:	b480      	push	{r7}
 800cd24:	b085      	sub	sp, #20
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	689a      	ldr	r2, [r3, #8]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
}
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd80:	d103      	bne.n	800cd8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	e00c      	b.n	800cda4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e002      	b.n	800cd98 <vListInsert+0x2e>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d2f6      	bcs.n	800cd92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	685a      	ldr	r2, [r3, #4]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	601a      	str	r2, [r3, #0]
}
 800cdd0:	bf00      	nop
 800cdd2:	3714      	adds	r7, #20
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	6892      	ldr	r2, [r2, #8]
 800cdf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	6852      	ldr	r2, [r2, #4]
 800cdfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d103      	bne.n	800ce10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	689a      	ldr	r2, [r3, #8]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	1e5a      	subs	r2, r3, #1
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10c      	bne.n	800ce5e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce48:	b672      	cpsid	i
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	b662      	cpsie	i
 800ce58:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ce5e:	f001 fef5 	bl	800ec4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	68f9      	ldr	r1, [r7, #12]
 800ce6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce6e:	fb01 f303 	mul.w	r3, r1, r3
 800ce72:	441a      	add	r2, r3
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	68f9      	ldr	r1, [r7, #12]
 800ce92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce94:	fb01 f303 	mul.w	r3, r1, r3
 800ce98:	441a      	add	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	22ff      	movs	r2, #255	; 0xff
 800cea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	22ff      	movs	r2, #255	; 0xff
 800ceaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <xQueueGenericReset+0x98>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00f      	beq.n	800cedc <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3310      	adds	r3, #16
 800cec0:	4618      	mov	r0, r3
 800cec2:	f001 f9b5 	bl	800e230 <xTaskRemoveFromEventList>
 800cec6:	e009      	b.n	800cedc <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3310      	adds	r3, #16
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff fefb 	bl	800ccc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3324      	adds	r3, #36	; 0x24
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fef6 	bl	800ccc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cedc:	f001 feea 	bl	800ecb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cee0:	2301      	movs	r3, #1
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b08e      	sub	sp, #56	; 0x38
 800ceee:	af02      	add	r7, sp, #8
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10c      	bne.n	800cf18 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	b672      	cpsid	i
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	b662      	cpsie	i
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10c      	bne.n	800cf38 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	b672      	cpsid	i
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	b662      	cpsie	i
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d002      	beq.n	800cf44 <xQueueGenericCreateStatic+0x5a>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <xQueueGenericCreateStatic+0x5e>
 800cf44:	2301      	movs	r3, #1
 800cf46:	e000      	b.n	800cf4a <xQueueGenericCreateStatic+0x60>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10c      	bne.n	800cf68 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	b672      	cpsid	i
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	b662      	cpsie	i
 800cf62:	623b      	str	r3, [r7, #32]
}
 800cf64:	bf00      	nop
 800cf66:	e7fe      	b.n	800cf66 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <xQueueGenericCreateStatic+0x8a>
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <xQueueGenericCreateStatic+0x8e>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e000      	b.n	800cf7a <xQueueGenericCreateStatic+0x90>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10c      	bne.n	800cf98 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	b672      	cpsid	i
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	b662      	cpsie	i
 800cf92:	61fb      	str	r3, [r7, #28]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf98:	2348      	movs	r3, #72	; 0x48
 800cf9a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2b48      	cmp	r3, #72	; 0x48
 800cfa0:	d00c      	beq.n	800cfbc <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	b672      	cpsid	i
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	b662      	cpsie	i
 800cfb6:	61bb      	str	r3, [r7, #24]
}
 800cfb8:	bf00      	nop
 800cfba:	e7fe      	b.n	800cfba <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00d      	beq.n	800cfe4 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfd0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f847 	bl	800d072 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3730      	adds	r7, #48	; 0x30
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b08a      	sub	sp, #40	; 0x28
 800cff2:	af02      	add	r7, sp, #8
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	4613      	mov	r3, r2
 800cffa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10c      	bne.n	800d01c <xQueueGenericCreate+0x2e>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	b672      	cpsid	i
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	b662      	cpsie	i
 800d016:	613b      	str	r3, [r7, #16]
}
 800d018:	bf00      	nop
 800d01a:	e7fe      	b.n	800d01a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d022:	2300      	movs	r3, #0
 800d024:	61fb      	str	r3, [r7, #28]
 800d026:	e004      	b.n	800d032 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	fb02 f303 	mul.w	r3, r2, r3
 800d030:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3348      	adds	r3, #72	; 0x48
 800d036:	4618      	mov	r0, r3
 800d038:	f001 ff34 	bl	800eea4 <pvPortMalloc>
 800d03c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d011      	beq.n	800d068 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	3348      	adds	r3, #72	; 0x48
 800d04c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d056:	79fa      	ldrb	r2, [r7, #7]
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	4613      	mov	r3, r2
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 f805 	bl	800d072 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d068:	69bb      	ldr	r3, [r7, #24]
	}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	69ba      	ldr	r2, [r7, #24]
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	e002      	b.n	800d094 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	69b8      	ldr	r0, [r7, #24]
 800d0a4:	f7ff fec4 	bl	800ce30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0a8:	bf00      	nop
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00e      	beq.n	800d0dc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f838 	bl	800d14c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d0dc:	bf00      	nop
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6939      	ldr	r1, [r7, #16]
 800d0fc:	6978      	ldr	r0, [r7, #20]
 800d0fe:	f7ff ff76 	bl	800cfee <xQueueGenericCreate>
 800d102:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7ff ffd3 	bl	800d0b0 <prvInitialiseMutex>

		return xNewQueue;
 800d10a:	68fb      	ldr	r3, [r7, #12]
	}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af02      	add	r7, sp, #8
 800d11a:	4603      	mov	r3, r0
 800d11c:	6039      	str	r1, [r7, #0]
 800d11e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d120:	2301      	movs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	2300      	movs	r3, #0
 800d126:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2200      	movs	r2, #0
 800d130:	6939      	ldr	r1, [r7, #16]
 800d132:	6978      	ldr	r0, [r7, #20]
 800d134:	f7ff fed9 	bl	800ceea <xQueueGenericCreateStatic>
 800d138:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff ffb8 	bl	800d0b0 <prvInitialiseMutex>

		return xNewQueue;
 800d140:	68fb      	ldr	r3, [r7, #12]
	}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
	...

0800d14c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08e      	sub	sp, #56	; 0x38
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d15a:	2300      	movs	r3, #0
 800d15c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10c      	bne.n	800d182 <xQueueGenericSend+0x36>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	b672      	cpsid	i
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	b662      	cpsie	i
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <xQueueGenericSend+0x44>
 800d188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <xQueueGenericSend+0x48>
 800d190:	2301      	movs	r3, #1
 800d192:	e000      	b.n	800d196 <xQueueGenericSend+0x4a>
 800d194:	2300      	movs	r3, #0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10c      	bne.n	800d1b4 <xQueueGenericSend+0x68>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	b672      	cpsid	i
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	b662      	cpsie	i
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d103      	bne.n	800d1c2 <xQueueGenericSend+0x76>
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d101      	bne.n	800d1c6 <xQueueGenericSend+0x7a>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e000      	b.n	800d1c8 <xQueueGenericSend+0x7c>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10c      	bne.n	800d1e6 <xQueueGenericSend+0x9a>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	b672      	cpsid	i
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	b662      	cpsie	i
 800d1e0:	623b      	str	r3, [r7, #32]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1e6:	f001 f9e5 	bl	800e5b4 <xTaskGetSchedulerState>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <xQueueGenericSend+0xaa>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <xQueueGenericSend+0xae>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <xQueueGenericSend+0xb0>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10c      	bne.n	800d21a <xQueueGenericSend+0xce>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	b672      	cpsid	i
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	b662      	cpsie	i
 800d214:	61fb      	str	r3, [r7, #28]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d21a:	f001 fd17 	bl	800ec4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d226:	429a      	cmp	r2, r3
 800d228:	d302      	bcc.n	800d230 <xQueueGenericSend+0xe4>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d112      	bne.n	800d256 <xQueueGenericSend+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68b9      	ldr	r1, [r7, #8]
 800d234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d236:	f000 fad3 	bl	800d7e0 <prvCopyDataToQueue>
 800d23a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d004      	beq.n	800d24e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d246:	3324      	adds	r3, #36	; 0x24
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 fff1 	bl	800e230 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d24e:	f001 fd31 	bl	800ecb4 <vPortExitCritical>
				return pdPASS;
 800d252:	2301      	movs	r3, #1
 800d254:	e062      	b.n	800d31c <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d103      	bne.n	800d264 <xQueueGenericSend+0x118>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d25c:	f001 fd2a 	bl	800ecb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d260:	2300      	movs	r3, #0
 800d262:	e05b      	b.n	800d31c <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <xQueueGenericSend+0x12c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d26a:	f107 0314 	add.w	r3, r7, #20
 800d26e:	4618      	mov	r0, r3
 800d270:	f001 f842 	bl	800e2f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d274:	2301      	movs	r3, #1
 800d276:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d278:	f001 fd1c 	bl	800ecb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d27c:	f000 fe08 	bl	800de90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d280:	f001 fce4 	bl	800ec4c <vPortEnterCritical>
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d290:	d103      	bne.n	800d29a <xQueueGenericSend+0x14e>
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2a0:	b25b      	sxtb	r3, r3
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d103      	bne.n	800d2b0 <xQueueGenericSend+0x164>
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2b0:	f001 fd00 	bl	800ecb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2b4:	1d3a      	adds	r2, r7, #4
 800d2b6:	f107 0314 	add.w	r3, r7, #20
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 f831 	bl	800e324 <xTaskCheckForTimeOut>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d123      	bne.n	800d310 <xQueueGenericSend+0x1c4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ca:	f000 fb81 	bl	800d9d0 <prvIsQueueFull>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d017      	beq.n	800d304 <xQueueGenericSend+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	3310      	adds	r3, #16
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	4611      	mov	r1, r2
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 ff81 	bl	800e1e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e4:	f000 fb0c 	bl	800d900 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2e8:	f000 fde0 	bl	800deac <xTaskResumeAll>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d193      	bne.n	800d21a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <xQueueGenericSend+0x1d8>)
 800d2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	e78a      	b.n	800d21a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d306:	f000 fafb 	bl	800d900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d30a:	f000 fdcf 	bl	800deac <xTaskResumeAll>
 800d30e:	e784      	b.n	800d21a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d312:	f000 faf5 	bl	800d900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d316:	f000 fdc9 	bl	800deac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d31a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3738      	adds	r7, #56	; 0x38
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08e      	sub	sp, #56	; 0x38
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10c      	bne.n	800d356 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	b672      	cpsid	i
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	b662      	cpsie	i
 800d350:	623b      	str	r3, [r7, #32]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00c      	beq.n	800d378 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	61fb      	str	r3, [r7, #28]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d103      	bne.n	800d388 <xQueueGiveFromISR+0x60>
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <xQueueGiveFromISR+0x64>
 800d388:	2301      	movs	r3, #1
 800d38a:	e000      	b.n	800d38e <xQueueGiveFromISR+0x66>
 800d38c:	2300      	movs	r3, #0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10c      	bne.n	800d3ac <xQueueGiveFromISR+0x84>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	b672      	cpsid	i
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	b662      	cpsie	i
 800d3a6:	61bb      	str	r3, [r7, #24]
}
 800d3a8:	bf00      	nop
 800d3aa:	e7fe      	b.n	800d3aa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ac:	f001 fd36 	bl	800ee1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3b0:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	b672      	cpsid	i
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	b662      	cpsie	i
 800d3c8:	617a      	str	r2, [r7, #20]
 800d3ca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d22b      	bcs.n	800d438 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fa:	d112      	bne.n	800d422 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d016      	beq.n	800d432 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d406:	3324      	adds	r3, #36	; 0x24
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 ff11 	bl	800e230 <xTaskRemoveFromEventList>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00e      	beq.n	800d432 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00b      	beq.n	800d432 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2201      	movs	r2, #1
 800d41e:	601a      	str	r2, [r3, #0]
 800d420:	e007      	b.n	800d432 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d426:	3301      	adds	r3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	b25a      	sxtb	r2, r3
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d432:	2301      	movs	r3, #1
 800d434:	637b      	str	r3, [r7, #52]	; 0x34
 800d436:	e001      	b.n	800d43c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d438:	2300      	movs	r3, #0
 800d43a:	637b      	str	r3, [r7, #52]	; 0x34
 800d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d446:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3738      	adds	r7, #56	; 0x38
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08e      	sub	sp, #56	; 0x38
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d45e:	2300      	movs	r3, #0
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d466:	2300      	movs	r3, #0
 800d468:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10c      	bne.n	800d48a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	b672      	cpsid	i
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	b662      	cpsie	i
 800d484:	623b      	str	r3, [r7, #32]
}
 800d486:	bf00      	nop
 800d488:	e7fe      	b.n	800d488 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00c      	beq.n	800d4ac <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	b672      	cpsid	i
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	b662      	cpsie	i
 800d4a6:	61fb      	str	r3, [r7, #28]
}
 800d4a8:	bf00      	nop
 800d4aa:	e7fe      	b.n	800d4aa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4ac:	f001 f882 	bl	800e5b4 <xTaskGetSchedulerState>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d102      	bne.n	800d4bc <xQueueSemaphoreTake+0x68>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <xQueueSemaphoreTake+0x6c>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <xQueueSemaphoreTake+0x6e>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10c      	bne.n	800d4e0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	b672      	cpsid	i
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	b662      	cpsie	i
 800d4da:	61bb      	str	r3, [r7, #24]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4e0:	f001 fbb4 	bl	800ec4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d019      	beq.n	800d524 <xQueueSemaphoreTake+0xd0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	1e5a      	subs	r2, r3, #1
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d104      	bne.n	800d50a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d500:	f001 fa1e 	bl	800e940 <pvTaskIncrementMutexHeldCount>
 800d504:	4602      	mov	r2, r0
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d004      	beq.n	800d51c <xQueueSemaphoreTake+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	3310      	adds	r3, #16
 800d516:	4618      	mov	r0, r3
 800d518:	f000 fe8a 	bl	800e230 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d51c:	f001 fbca 	bl	800ecb4 <vPortExitCritical>
				return pdPASS;
 800d520:	2301      	movs	r3, #1
 800d522:	e099      	b.n	800d658 <xQueueSemaphoreTake+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d113      	bne.n	800d552 <xQueueSemaphoreTake+0xfe>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00c      	beq.n	800d54a <xQueueSemaphoreTake+0xf6>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	b672      	cpsid	i
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	b662      	cpsie	i
 800d544:	617b      	str	r3, [r7, #20]
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <xQueueSemaphoreTake+0xf4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d54a:	f001 fbb3 	bl	800ecb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d54e:	2300      	movs	r3, #0
 800d550:	e082      	b.n	800d658 <xQueueSemaphoreTake+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <xQueueSemaphoreTake+0x112>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 fecb 	bl	800e2f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d562:	2301      	movs	r3, #1
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d566:	f001 fba5 	bl	800ecb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d56a:	f000 fc91 	bl	800de90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d56e:	f001 fb6d 	bl	800ec4c <vPortEnterCritical>
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d578:	b25b      	sxtb	r3, r3
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57e:	d103      	bne.n	800d588 <xQueueSemaphoreTake+0x134>
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d594:	d103      	bne.n	800d59e <xQueueSemaphoreTake+0x14a>
 800d596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d59e:	f001 fb89 	bl	800ecb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5a2:	463a      	mov	r2, r7
 800d5a4:	f107 030c 	add.w	r3, r7, #12
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 feba 	bl	800e324 <xTaskCheckForTimeOut>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d132      	bne.n	800d61c <xQueueSemaphoreTake+0x1c8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5b8:	f000 f9f4 	bl	800d9a4 <prvIsQueueEmpty>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d026      	beq.n	800d610 <xQueueSemaphoreTake+0x1bc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d109      	bne.n	800d5de <xQueueSemaphoreTake+0x18a>
					{
						taskENTER_CRITICAL();
 800d5ca:	f001 fb3f 	bl	800ec4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f001 f80c 	bl	800e5f0 <xTaskPriorityInherit>
 800d5d8:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d5da:	f001 fb6b 	bl	800ecb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	3324      	adds	r3, #36	; 0x24
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 fdfc 	bl	800e1e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ee:	f000 f987 	bl	800d900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5f2:	f000 fc5b 	bl	800deac <xTaskResumeAll>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f47f af71 	bne.w	800d4e0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d5fe:	4b18      	ldr	r3, [pc, #96]	; (800d660 <xQueueSemaphoreTake+0x20c>)
 800d600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	e767      	b.n	800d4e0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d612:	f000 f975 	bl	800d900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d616:	f000 fc49 	bl	800deac <xTaskResumeAll>
 800d61a:	e761      	b.n	800d4e0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d61c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d61e:	f000 f96f 	bl	800d900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d622:	f000 fc43 	bl	800deac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d628:	f000 f9bc 	bl	800d9a4 <prvIsQueueEmpty>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f43f af56 	beq.w	800d4e0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00d      	beq.n	800d656 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 800d63a:	f001 fb07 	bl	800ec4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d640:	f000 f8b6 	bl	800d7b0 <prvGetDisinheritPriorityAfterTimeout>
 800d644:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 f8d9 	bl	800e804 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d652:	f001 fb2f 	bl	800ecb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d656:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3738      	adds	r7, #56	; 0x38
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	; 0x38
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10c      	bne.n	800d694 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	b672      	cpsid	i
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	b662      	cpsie	i
 800d68e:	623b      	str	r3, [r7, #32]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d103      	bne.n	800d6a2 <xQueueReceiveFromISR+0x3e>
 800d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <xQueueReceiveFromISR+0x42>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e000      	b.n	800d6a8 <xQueueReceiveFromISR+0x44>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10c      	bne.n	800d6c6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b0:	b672      	cpsid	i
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	b662      	cpsie	i
 800d6c0:	61fb      	str	r3, [r7, #28]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6c6:	f001 fba9 	bl	800ee1c <vPortValidateInterruptPriority>
	__asm volatile
 800d6ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	61ba      	str	r2, [r7, #24]
 800d6e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d6e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d02f      	beq.n	800d756 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d704:	f000 f8d6 	bl	800d8b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	1e5a      	subs	r2, r3, #1
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d718:	d112      	bne.n	800d740 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d016      	beq.n	800d750 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	3310      	adds	r3, #16
 800d726:	4618      	mov	r0, r3
 800d728:	f000 fd82 	bl	800e230 <xTaskRemoveFromEventList>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00e      	beq.n	800d750 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00b      	beq.n	800d750 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	e007      	b.n	800d750 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d744:	3301      	adds	r3, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	b25a      	sxtb	r2, r3
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d750:	2301      	movs	r3, #1
 800d752:	637b      	str	r3, [r7, #52]	; 0x34
 800d754:	e001      	b.n	800d75a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d756:	2300      	movs	r3, #0
 800d758:	637b      	str	r3, [r7, #52]	; 0x34
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	f383 8811 	msr	BASEPRI, r3
}
 800d764:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3738      	adds	r7, #56	; 0x38
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10c      	bne.n	800d798 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	b672      	cpsid	i
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	b662      	cpsie	i
 800d792:	60bb      	str	r3, [r7, #8]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d798:	f001 fa58 	bl	800ec4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d7a2:	f001 fa87 	bl	800ecb4 <vPortExitCritical>

	return uxReturn;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d006      	beq.n	800d7ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f1c3 0307 	rsb	r3, r3, #7
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e001      	b.n	800d7d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
	}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10d      	bne.n	800d81a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d14d      	bne.n	800d8a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 ff70 	bl	800e6f0 <xTaskPriorityDisinherit>
 800d810:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	609a      	str	r2, [r3, #8]
 800d818:	e043      	b.n	800d8a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d119      	bne.n	800d854 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6858      	ldr	r0, [r3, #4]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d828:	461a      	mov	r2, r3
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	f002 fdcf 	bl	80103ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685a      	ldr	r2, [r3, #4]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d838:	441a      	add	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	429a      	cmp	r2, r3
 800d848:	d32b      	bcc.n	800d8a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	605a      	str	r2, [r3, #4]
 800d852:	e026      	b.n	800d8a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	68d8      	ldr	r0, [r3, #12]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85c:	461a      	mov	r2, r3
 800d85e:	68b9      	ldr	r1, [r7, #8]
 800d860:	f002 fdb5 	bl	80103ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86c:	425b      	negs	r3, r3
 800d86e:	441a      	add	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d207      	bcs.n	800d890 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	689a      	ldr	r2, [r3, #8]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d888:	425b      	negs	r3, r3
 800d88a:	441a      	add	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b02      	cmp	r3, #2
 800d894:	d105      	bne.n	800d8a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8aa:	697b      	ldr	r3, [r7, #20]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d018      	beq.n	800d8f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68da      	ldr	r2, [r3, #12]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ce:	441a      	add	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68da      	ldr	r2, [r3, #12]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d303      	bcc.n	800d8e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68d9      	ldr	r1, [r3, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	6838      	ldr	r0, [r7, #0]
 800d8f4:	f002 fd6b 	bl	80103ce <memcpy>
	}
}
 800d8f8:	bf00      	nop
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d908:	f001 f9a0 	bl	800ec4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d912:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d914:	e011      	b.n	800d93a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d012      	beq.n	800d944 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	3324      	adds	r3, #36	; 0x24
 800d922:	4618      	mov	r0, r3
 800d924:	f000 fc84 	bl	800e230 <xTaskRemoveFromEventList>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d92e:	f000 fd5f 	bl	800e3f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	3b01      	subs	r3, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	dce9      	bgt.n	800d916 <prvUnlockQueue+0x16>
 800d942:	e000      	b.n	800d946 <prvUnlockQueue+0x46>
					break;
 800d944:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	22ff      	movs	r2, #255	; 0xff
 800d94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d94e:	f001 f9b1 	bl	800ecb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d952:	f001 f97b 	bl	800ec4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d95c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d95e:	e011      	b.n	800d984 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d012      	beq.n	800d98e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3310      	adds	r3, #16
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 fc5f 	bl	800e230 <xTaskRemoveFromEventList>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d978:	f000 fd3a 	bl	800e3f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
 800d97e:	3b01      	subs	r3, #1
 800d980:	b2db      	uxtb	r3, r3
 800d982:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dce9      	bgt.n	800d960 <prvUnlockQueue+0x60>
 800d98c:	e000      	b.n	800d990 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d98e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	22ff      	movs	r2, #255	; 0xff
 800d994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d998:	f001 f98c 	bl	800ecb4 <vPortExitCritical>
}
 800d99c:	bf00      	nop
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9ac:	f001 f94e 	bl	800ec4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	e001      	b.n	800d9c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9c2:	f001 f977 	bl	800ecb4 <vPortExitCritical>

	return xReturn;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9d8:	f001 f938 	bl	800ec4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d102      	bne.n	800d9ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	e001      	b.n	800d9f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9f2:	f001 f95f 	bl	800ecb4 <vPortExitCritical>

	return xReturn;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08e      	sub	sp, #56	; 0x38
 800da04:	af04      	add	r7, sp, #16
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10c      	bne.n	800da2e <xTaskCreateStatic+0x2e>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	b672      	cpsid	i
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	b662      	cpsie	i
 800da28:	623b      	str	r3, [r7, #32]
}
 800da2a:	bf00      	nop
 800da2c:	e7fe      	b.n	800da2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800da2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10c      	bne.n	800da4e <xTaskCreateStatic+0x4e>
	__asm volatile
 800da34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da38:	b672      	cpsid	i
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	b662      	cpsie	i
 800da48:	61fb      	str	r3, [r7, #28]
}
 800da4a:	bf00      	nop
 800da4c:	e7fe      	b.n	800da4c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da4e:	23a0      	movs	r3, #160	; 0xa0
 800da50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2ba0      	cmp	r3, #160	; 0xa0
 800da56:	d00c      	beq.n	800da72 <xTaskCreateStatic+0x72>
	__asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5c:	b672      	cpsid	i
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	b662      	cpsie	i
 800da6c:	61bb      	str	r3, [r7, #24]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	2b00      	cmp	r3, #0
 800da78:	d01e      	beq.n	800dab8 <xTaskCreateStatic+0xb8>
 800da7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d01b      	beq.n	800dab8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	2202      	movs	r2, #2
 800da8e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da92:	2300      	movs	r3, #0
 800da94:	9303      	str	r3, [sp, #12]
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	9302      	str	r3, [sp, #8]
 800da9a:	f107 0314 	add.w	r3, r7, #20
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	68b9      	ldr	r1, [r7, #8]
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f000 f850 	bl	800db50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dab2:	f000 f8ed 	bl	800dc90 <prvAddNewTaskToReadyList>
 800dab6:	e001      	b.n	800dabc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dab8:	2300      	movs	r3, #0
 800daba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dabc:	697b      	ldr	r3, [r7, #20]
	}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3728      	adds	r7, #40	; 0x28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b08c      	sub	sp, #48	; 0x30
 800daca:	af04      	add	r7, sp, #16
 800dacc:	60f8      	str	r0, [r7, #12]
 800dace:	60b9      	str	r1, [r7, #8]
 800dad0:	603b      	str	r3, [r7, #0]
 800dad2:	4613      	mov	r3, r2
 800dad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dad6:	88fb      	ldrh	r3, [r7, #6]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4618      	mov	r0, r3
 800dadc:	f001 f9e2 	bl	800eea4 <pvPortMalloc>
 800dae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00e      	beq.n	800db06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dae8:	20a0      	movs	r0, #160	; 0xa0
 800daea:	f001 f9db 	bl	800eea4 <pvPortMalloc>
 800daee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	631a      	str	r2, [r3, #48]	; 0x30
 800dafc:	e005      	b.n	800db0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dafe:	6978      	ldr	r0, [r7, #20]
 800db00:	f001 fa9a 	bl	800f038 <vPortFree>
 800db04:	e001      	b.n	800db0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db06:	2300      	movs	r3, #0
 800db08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d017      	beq.n	800db40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db18:	88fa      	ldrh	r2, [r7, #6]
 800db1a:	2300      	movs	r3, #0
 800db1c:	9303      	str	r3, [sp, #12]
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	9302      	str	r3, [sp, #8]
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 f80e 	bl	800db50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db34:	69f8      	ldr	r0, [r7, #28]
 800db36:	f000 f8ab 	bl	800dc90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db3a:	2301      	movs	r3, #1
 800db3c:	61bb      	str	r3, [r7, #24]
 800db3e:	e002      	b.n	800db46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db40:	f04f 33ff 	mov.w	r3, #4294967295
 800db44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db46:	69bb      	ldr	r3, [r7, #24]
	}
 800db48:	4618      	mov	r0, r3
 800db4a:	3720      	adds	r7, #32
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db62:	6879      	ldr	r1, [r7, #4]
 800db64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db68:	440b      	add	r3, r1
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	f023 0307 	bic.w	r3, r3, #7
 800db76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	f003 0307 	and.w	r3, r3, #7
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00c      	beq.n	800db9c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	b672      	cpsid	i
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	b662      	cpsie	i
 800db96:	617b      	str	r3, [r7, #20]
}
 800db98:	bf00      	nop
 800db9a:	e7fe      	b.n	800db9a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d01f      	beq.n	800dbe2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dba2:	2300      	movs	r3, #0
 800dba4:	61fb      	str	r3, [r7, #28]
 800dba6:	e012      	b.n	800dbce <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	4413      	add	r3, r2
 800dbae:	7819      	ldrb	r1, [r3, #0]
 800dbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	3334      	adds	r3, #52	; 0x34
 800dbb8:	460a      	mov	r2, r1
 800dbba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d006      	beq.n	800dbd6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	61fb      	str	r3, [r7, #28]
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	2b0f      	cmp	r3, #15
 800dbd2:	d9e9      	bls.n	800dba8 <prvInitialiseNewTask+0x58>
 800dbd4:	e000      	b.n	800dbd8 <prvInitialiseNewTask+0x88>
			{
				break;
 800dbd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dbe0:	e003      	b.n	800dbea <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	2b06      	cmp	r3, #6
 800dbee:	d901      	bls.n	800dbf4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbf0:	2306      	movs	r3, #6
 800dbf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbfe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	2200      	movs	r2, #0
 800dc04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7ff f87c 	bl	800cd08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc12:	3318      	adds	r3, #24
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff f877 	bl	800cd08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	f1c3 0207 	rsb	r2, r3, #7
 800dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	2200      	movs	r2, #0
 800dc34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	334c      	adds	r3, #76	; 0x4c
 800dc44:	224c      	movs	r2, #76	; 0x4c
 800dc46:	2100      	movs	r1, #0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f002 fad8 	bl	80101fe <memset>
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	4a0c      	ldr	r2, [pc, #48]	; (800dc84 <prvInitialiseNewTask+0x134>)
 800dc52:	651a      	str	r2, [r3, #80]	; 0x50
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	4a0c      	ldr	r2, [pc, #48]	; (800dc88 <prvInitialiseNewTask+0x138>)
 800dc58:	655a      	str	r2, [r3, #84]	; 0x54
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	4a0b      	ldr	r2, [pc, #44]	; (800dc8c <prvInitialiseNewTask+0x13c>)
 800dc5e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	68f9      	ldr	r1, [r7, #12]
 800dc64:	69b8      	ldr	r0, [r7, #24]
 800dc66:	f000 fee5 	bl	800ea34 <pxPortInitialiseStack>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d002      	beq.n	800dc7c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc7c:	bf00      	nop
 800dc7e:	3720      	adds	r7, #32
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	200049a8 	.word	0x200049a8
 800dc88:	20004a10 	.word	0x20004a10
 800dc8c:	20004a78 	.word	0x20004a78

0800dc90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc98:	f000 ffd8 	bl	800ec4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc9c:	4b24      	ldr	r3, [pc, #144]	; (800dd30 <prvAddNewTaskToReadyList+0xa0>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3301      	adds	r3, #1
 800dca2:	4a23      	ldr	r2, [pc, #140]	; (800dd30 <prvAddNewTaskToReadyList+0xa0>)
 800dca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dca6:	4b23      	ldr	r3, [pc, #140]	; (800dd34 <prvAddNewTaskToReadyList+0xa4>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d109      	bne.n	800dcc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcae:	4a21      	ldr	r2, [pc, #132]	; (800dd34 <prvAddNewTaskToReadyList+0xa4>)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcb4:	4b1e      	ldr	r3, [pc, #120]	; (800dd30 <prvAddNewTaskToReadyList+0xa0>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d110      	bne.n	800dcde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcbc:	f000 fbb6 	bl	800e42c <prvInitialiseTaskLists>
 800dcc0:	e00d      	b.n	800dcde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcc2:	4b1d      	ldr	r3, [pc, #116]	; (800dd38 <prvAddNewTaskToReadyList+0xa8>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcca:	4b1a      	ldr	r3, [pc, #104]	; (800dd34 <prvAddNewTaskToReadyList+0xa4>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d802      	bhi.n	800dcde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcd8:	4a16      	ldr	r2, [pc, #88]	; (800dd34 <prvAddNewTaskToReadyList+0xa4>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dcde:	4b17      	ldr	r3, [pc, #92]	; (800dd3c <prvAddNewTaskToReadyList+0xac>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a15      	ldr	r2, [pc, #84]	; (800dd3c <prvAddNewTaskToReadyList+0xac>)
 800dce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcec:	2201      	movs	r2, #1
 800dcee:	409a      	lsls	r2, r3
 800dcf0:	4b13      	ldr	r3, [pc, #76]	; (800dd40 <prvAddNewTaskToReadyList+0xb0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	4a12      	ldr	r2, [pc, #72]	; (800dd40 <prvAddNewTaskToReadyList+0xb0>)
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4a0f      	ldr	r2, [pc, #60]	; (800dd44 <prvAddNewTaskToReadyList+0xb4>)
 800dd08:	441a      	add	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7ff f806 	bl	800cd22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd16:	f000 ffcd 	bl	800ecb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd1a:	4b07      	ldr	r3, [pc, #28]	; (800dd38 <prvAddNewTaskToReadyList+0xa8>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd22:	4b04      	ldr	r3, [pc, #16]	; (800dd34 <prvAddNewTaskToReadyList+0xa4>)
 800dd24:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd26:	bf00      	nop
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20000d5c 	.word	0x20000d5c
 800dd34:	20000c5c 	.word	0x20000c5c
 800dd38:	20000d68 	.word	0x20000d68
 800dd3c:	20000d78 	.word	0x20000d78
 800dd40:	20000d64 	.word	0x20000d64
 800dd44:	20000c60 	.word	0x20000c60

0800dd48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd50:	2300      	movs	r3, #0
 800dd52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d019      	beq.n	800dd8e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd5a:	4b14      	ldr	r3, [pc, #80]	; (800ddac <vTaskDelay+0x64>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00c      	beq.n	800dd7c <vTaskDelay+0x34>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	b672      	cpsid	i
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	b662      	cpsie	i
 800dd76:	60bb      	str	r3, [r7, #8]
}
 800dd78:	bf00      	nop
 800dd7a:	e7fe      	b.n	800dd7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dd7c:	f000 f888 	bl	800de90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd80:	2100      	movs	r1, #0
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fdf0 	bl	800e968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd88:	f000 f890 	bl	800deac <xTaskResumeAll>
 800dd8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d107      	bne.n	800dda4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <vTaskDelay+0x68>)
 800dd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dda4:	bf00      	nop
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	20000d84 	.word	0x20000d84
 800ddb0:	e000ed04 	.word	0xe000ed04

0800ddb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08a      	sub	sp, #40	; 0x28
 800ddb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddc2:	463a      	mov	r2, r7
 800ddc4:	1d39      	adds	r1, r7, #4
 800ddc6:	f107 0308 	add.w	r3, r7, #8
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7f4 fb08 	bl	80023e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	9202      	str	r2, [sp, #8]
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	2300      	movs	r3, #0
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	2300      	movs	r3, #0
 800dde0:	460a      	mov	r2, r1
 800dde2:	4923      	ldr	r1, [pc, #140]	; (800de70 <vTaskStartScheduler+0xbc>)
 800dde4:	4823      	ldr	r0, [pc, #140]	; (800de74 <vTaskStartScheduler+0xc0>)
 800dde6:	f7ff fe0b 	bl	800da00 <xTaskCreateStatic>
 800ddea:	4603      	mov	r3, r0
 800ddec:	4a22      	ldr	r2, [pc, #136]	; (800de78 <vTaskStartScheduler+0xc4>)
 800ddee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ddf0:	4b21      	ldr	r3, [pc, #132]	; (800de78 <vTaskStartScheduler+0xc4>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d002      	beq.n	800ddfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	e001      	b.n	800de02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d11d      	bne.n	800de44 <vTaskStartScheduler+0x90>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	b672      	cpsid	i
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	b662      	cpsie	i
 800de1c:	613b      	str	r3, [r7, #16]
}
 800de1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de20:	4b16      	ldr	r3, [pc, #88]	; (800de7c <vTaskStartScheduler+0xc8>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	334c      	adds	r3, #76	; 0x4c
 800de26:	4a16      	ldr	r2, [pc, #88]	; (800de80 <vTaskStartScheduler+0xcc>)
 800de28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de2a:	4b16      	ldr	r3, [pc, #88]	; (800de84 <vTaskStartScheduler+0xd0>)
 800de2c:	f04f 32ff 	mov.w	r2, #4294967295
 800de30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de32:	4b15      	ldr	r3, [pc, #84]	; (800de88 <vTaskStartScheduler+0xd4>)
 800de34:	2201      	movs	r2, #1
 800de36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de38:	4b14      	ldr	r3, [pc, #80]	; (800de8c <vTaskStartScheduler+0xd8>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de3e:	f000 fe87 	bl	800eb50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de42:	e010      	b.n	800de66 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4a:	d10c      	bne.n	800de66 <vTaskStartScheduler+0xb2>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de50:	b672      	cpsid	i
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	b662      	cpsie	i
 800de60:	60fb      	str	r3, [r7, #12]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <vTaskStartScheduler+0xb0>
}
 800de66:	bf00      	nop
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	08015938 	.word	0x08015938
 800de74:	0800e409 	.word	0x0800e409
 800de78:	20000d80 	.word	0x20000d80
 800de7c:	20000c5c 	.word	0x20000c5c
 800de80:	20000070 	.word	0x20000070
 800de84:	20000d7c 	.word	0x20000d7c
 800de88:	20000d68 	.word	0x20000d68
 800de8c:	20000d60 	.word	0x20000d60

0800de90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800de94:	4b04      	ldr	r3, [pc, #16]	; (800dea8 <vTaskSuspendAll+0x18>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	3301      	adds	r3, #1
 800de9a:	4a03      	ldr	r2, [pc, #12]	; (800dea8 <vTaskSuspendAll+0x18>)
 800de9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800de9e:	bf00      	nop
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	20000d84 	.word	0x20000d84

0800deac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deb6:	2300      	movs	r3, #0
 800deb8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800deba:	4b3c      	ldr	r3, [pc, #240]	; (800dfac <xTaskResumeAll+0x100>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10c      	bne.n	800dedc <xTaskResumeAll+0x30>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec6:	b672      	cpsid	i
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	b662      	cpsie	i
 800ded6:	603b      	str	r3, [r7, #0]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dedc:	f000 feb6 	bl	800ec4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dee0:	4b32      	ldr	r3, [pc, #200]	; (800dfac <xTaskResumeAll+0x100>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	4a31      	ldr	r2, [pc, #196]	; (800dfac <xTaskResumeAll+0x100>)
 800dee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deea:	4b30      	ldr	r3, [pc, #192]	; (800dfac <xTaskResumeAll+0x100>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d155      	bne.n	800df9e <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800def2:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <xTaskResumeAll+0x104>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d051      	beq.n	800df9e <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800defa:	e02e      	b.n	800df5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defc:	4b2d      	ldr	r3, [pc, #180]	; (800dfb4 <xTaskResumeAll+0x108>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3318      	adds	r3, #24
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe ff67 	bl	800cddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3304      	adds	r3, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe ff62 	bl	800cddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	2201      	movs	r2, #1
 800df1e:	409a      	lsls	r2, r3
 800df20:	4b25      	ldr	r3, [pc, #148]	; (800dfb8 <xTaskResumeAll+0x10c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4313      	orrs	r3, r2
 800df26:	4a24      	ldr	r2, [pc, #144]	; (800dfb8 <xTaskResumeAll+0x10c>)
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4a21      	ldr	r2, [pc, #132]	; (800dfbc <xTaskResumeAll+0x110>)
 800df38:	441a      	add	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3304      	adds	r3, #4
 800df3e:	4619      	mov	r1, r3
 800df40:	4610      	mov	r0, r2
 800df42:	f7fe feee 	bl	800cd22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <xTaskResumeAll+0x114>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	429a      	cmp	r2, r3
 800df52:	d302      	bcc.n	800df5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800df54:	4b1b      	ldr	r3, [pc, #108]	; (800dfc4 <xTaskResumeAll+0x118>)
 800df56:	2201      	movs	r2, #1
 800df58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df5a:	4b16      	ldr	r3, [pc, #88]	; (800dfb4 <xTaskResumeAll+0x108>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1cc      	bne.n	800defc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df68:	f000 fb04 	bl	800e574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800df6c:	4b16      	ldr	r3, [pc, #88]	; (800dfc8 <xTaskResumeAll+0x11c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d010      	beq.n	800df9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df78:	f000 f838 	bl	800dfec <xTaskIncrementTick>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800df82:	4b10      	ldr	r3, [pc, #64]	; (800dfc4 <xTaskResumeAll+0x118>)
 800df84:	2201      	movs	r2, #1
 800df86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1f1      	bne.n	800df78 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800df94:	4b0c      	ldr	r3, [pc, #48]	; (800dfc8 <xTaskResumeAll+0x11c>)
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df9a:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <xTaskResumeAll+0x118>)
 800df9c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df9e:	f000 fe89 	bl	800ecb4 <vPortExitCritical>

	return xAlreadyYielded;
 800dfa2:	687b      	ldr	r3, [r7, #4]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	20000d84 	.word	0x20000d84
 800dfb0:	20000d5c 	.word	0x20000d5c
 800dfb4:	20000d1c 	.word	0x20000d1c
 800dfb8:	20000d64 	.word	0x20000d64
 800dfbc:	20000c60 	.word	0x20000c60
 800dfc0:	20000c5c 	.word	0x20000c5c
 800dfc4:	20000d70 	.word	0x20000d70
 800dfc8:	20000d6c 	.word	0x20000d6c

0800dfcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfd2:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <xTaskGetTickCount+0x1c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dfd8:	687b      	ldr	r3, [r7, #4]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	20000d60 	.word	0x20000d60

0800dfec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dff6:	4b40      	ldr	r3, [pc, #256]	; (800e0f8 <xTaskIncrementTick+0x10c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d171      	bne.n	800e0e2 <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dffe:	4b3f      	ldr	r3, [pc, #252]	; (800e0fc <xTaskIncrementTick+0x110>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3301      	adds	r3, #1
 800e004:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e006:	4a3d      	ldr	r2, [pc, #244]	; (800e0fc <xTaskIncrementTick+0x110>)
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d122      	bne.n	800e058 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e012:	4b3b      	ldr	r3, [pc, #236]	; (800e100 <xTaskIncrementTick+0x114>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00c      	beq.n	800e036 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e020:	b672      	cpsid	i
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	b662      	cpsie	i
 800e030:	603b      	str	r3, [r7, #0]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <xTaskIncrementTick+0x48>
 800e036:	4b32      	ldr	r3, [pc, #200]	; (800e100 <xTaskIncrementTick+0x114>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	4b31      	ldr	r3, [pc, #196]	; (800e104 <xTaskIncrementTick+0x118>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a2f      	ldr	r2, [pc, #188]	; (800e100 <xTaskIncrementTick+0x114>)
 800e042:	6013      	str	r3, [r2, #0]
 800e044:	4a2f      	ldr	r2, [pc, #188]	; (800e104 <xTaskIncrementTick+0x118>)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	4b2f      	ldr	r3, [pc, #188]	; (800e108 <xTaskIncrementTick+0x11c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	4a2d      	ldr	r2, [pc, #180]	; (800e108 <xTaskIncrementTick+0x11c>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	f000 fa8e 	bl	800e574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e058:	4b2c      	ldr	r3, [pc, #176]	; (800e10c <xTaskIncrementTick+0x120>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	693a      	ldr	r2, [r7, #16]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d344      	bcc.n	800e0ec <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e062:	4b27      	ldr	r3, [pc, #156]	; (800e100 <xTaskIncrementTick+0x114>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d104      	bne.n	800e076 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e06c:	4b27      	ldr	r3, [pc, #156]	; (800e10c <xTaskIncrementTick+0x120>)
 800e06e:	f04f 32ff 	mov.w	r2, #4294967295
 800e072:	601a      	str	r2, [r3, #0]
					break;
 800e074:	e03a      	b.n	800e0ec <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e076:	4b22      	ldr	r3, [pc, #136]	; (800e100 <xTaskIncrementTick+0x114>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d203      	bcs.n	800e096 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e08e:	4a1f      	ldr	r2, [pc, #124]	; (800e10c <xTaskIncrementTick+0x120>)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e094:	e02a      	b.n	800e0ec <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	3304      	adds	r3, #4
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fe fe9e 	bl	800cddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d004      	beq.n	800e0b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	3318      	adds	r3, #24
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe fe95 	bl	800cddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	409a      	lsls	r2, r3
 800e0ba:	4b15      	ldr	r3, [pc, #84]	; (800e110 <xTaskIncrementTick+0x124>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	4a13      	ldr	r2, [pc, #76]	; (800e110 <xTaskIncrementTick+0x124>)
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4a10      	ldr	r2, [pc, #64]	; (800e114 <xTaskIncrementTick+0x128>)
 800e0d2:	441a      	add	r2, r3
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f7fe fe21 	bl	800cd22 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e0:	e7bf      	b.n	800e062 <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e0e2:	4b0d      	ldr	r3, [pc, #52]	; (800e118 <xTaskIncrementTick+0x12c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	4a0b      	ldr	r2, [pc, #44]	; (800e118 <xTaskIncrementTick+0x12c>)
 800e0ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e0ec:	697b      	ldr	r3, [r7, #20]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000d84 	.word	0x20000d84
 800e0fc:	20000d60 	.word	0x20000d60
 800e100:	20000d14 	.word	0x20000d14
 800e104:	20000d18 	.word	0x20000d18
 800e108:	20000d74 	.word	0x20000d74
 800e10c:	20000d7c 	.word	0x20000d7c
 800e110:	20000d64 	.word	0x20000d64
 800e114:	20000c60 	.word	0x20000c60
 800e118:	20000d6c 	.word	0x20000d6c

0800e11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b087      	sub	sp, #28
 800e120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e122:	4b2a      	ldr	r3, [pc, #168]	; (800e1cc <vTaskSwitchContext+0xb0>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e12a:	4b29      	ldr	r3, [pc, #164]	; (800e1d0 <vTaskSwitchContext+0xb4>)
 800e12c:	2201      	movs	r2, #1
 800e12e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e130:	e046      	b.n	800e1c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e132:	4b27      	ldr	r3, [pc, #156]	; (800e1d0 <vTaskSwitchContext+0xb4>)
 800e134:	2200      	movs	r2, #0
 800e136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e138:	4b26      	ldr	r3, [pc, #152]	; (800e1d4 <vTaskSwitchContext+0xb8>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	fab3 f383 	clz	r3, r3
 800e144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e146:	7afb      	ldrb	r3, [r7, #11]
 800e148:	f1c3 031f 	rsb	r3, r3, #31
 800e14c:	617b      	str	r3, [r7, #20]
 800e14e:	4922      	ldr	r1, [pc, #136]	; (800e1d8 <vTaskSwitchContext+0xbc>)
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	440b      	add	r3, r1
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10c      	bne.n	800e17c <vTaskSwitchContext+0x60>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	b672      	cpsid	i
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	b662      	cpsie	i
 800e176:	607b      	str	r3, [r7, #4]
}
 800e178:	bf00      	nop
 800e17a:	e7fe      	b.n	800e17a <vTaskSwitchContext+0x5e>
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	4613      	mov	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4a14      	ldr	r2, [pc, #80]	; (800e1d8 <vTaskSwitchContext+0xbc>)
 800e188:	4413      	add	r3, r2
 800e18a:	613b      	str	r3, [r7, #16]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	605a      	str	r2, [r3, #4]
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	3308      	adds	r3, #8
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d104      	bne.n	800e1ac <vTaskSwitchContext+0x90>
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	605a      	str	r2, [r3, #4]
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	4a0a      	ldr	r2, [pc, #40]	; (800e1dc <vTaskSwitchContext+0xc0>)
 800e1b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1b6:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <vTaskSwitchContext+0xc0>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	334c      	adds	r3, #76	; 0x4c
 800e1bc:	4a08      	ldr	r2, [pc, #32]	; (800e1e0 <vTaskSwitchContext+0xc4>)
 800e1be:	6013      	str	r3, [r2, #0]
}
 800e1c0:	bf00      	nop
 800e1c2:	371c      	adds	r7, #28
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	20000d84 	.word	0x20000d84
 800e1d0:	20000d70 	.word	0x20000d70
 800e1d4:	20000d64 	.word	0x20000d64
 800e1d8:	20000c60 	.word	0x20000c60
 800e1dc:	20000c5c 	.word	0x20000c5c
 800e1e0:	20000070 	.word	0x20000070

0800e1e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10c      	bne.n	800e20e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f8:	b672      	cpsid	i
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	b662      	cpsie	i
 800e208:	60fb      	str	r3, [r7, #12]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e20e:	4b07      	ldr	r3, [pc, #28]	; (800e22c <vTaskPlaceOnEventList+0x48>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3318      	adds	r3, #24
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fe fda7 	bl	800cd6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e21c:	2101      	movs	r1, #1
 800e21e:	6838      	ldr	r0, [r7, #0]
 800e220:	f000 fba2 	bl	800e968 <prvAddCurrentTaskToDelayedList>
}
 800e224:	bf00      	nop
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	20000c5c 	.word	0x20000c5c

0800e230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10c      	bne.n	800e260 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	b672      	cpsid	i
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	b662      	cpsie	i
 800e25a:	60fb      	str	r3, [r7, #12]
}
 800e25c:	bf00      	nop
 800e25e:	e7fe      	b.n	800e25e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	3318      	adds	r3, #24
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe fdb9 	bl	800cddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e26a:	4b1d      	ldr	r3, [pc, #116]	; (800e2e0 <xTaskRemoveFromEventList+0xb0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d11c      	bne.n	800e2ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	3304      	adds	r3, #4
 800e276:	4618      	mov	r0, r3
 800e278:	f7fe fdb0 	bl	800cddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	409a      	lsls	r2, r3
 800e284:	4b17      	ldr	r3, [pc, #92]	; (800e2e4 <xTaskRemoveFromEventList+0xb4>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4313      	orrs	r3, r2
 800e28a:	4a16      	ldr	r2, [pc, #88]	; (800e2e4 <xTaskRemoveFromEventList+0xb4>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4a13      	ldr	r2, [pc, #76]	; (800e2e8 <xTaskRemoveFromEventList+0xb8>)
 800e29c:	441a      	add	r2, r3
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f7fe fd3c 	bl	800cd22 <vListInsertEnd>
 800e2aa:	e005      	b.n	800e2b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	3318      	adds	r3, #24
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	480e      	ldr	r0, [pc, #56]	; (800e2ec <xTaskRemoveFromEventList+0xbc>)
 800e2b4:	f7fe fd35 	bl	800cd22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <xTaskRemoveFromEventList+0xc0>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d905      	bls.n	800e2d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <xTaskRemoveFromEventList+0xc4>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	e001      	b.n	800e2d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e2d6:	697b      	ldr	r3, [r7, #20]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	20000d84 	.word	0x20000d84
 800e2e4:	20000d64 	.word	0x20000d64
 800e2e8:	20000c60 	.word	0x20000c60
 800e2ec:	20000d1c 	.word	0x20000d1c
 800e2f0:	20000c5c 	.word	0x20000c5c
 800e2f4:	20000d70 	.word	0x20000d70

0800e2f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <vTaskInternalSetTimeOutState+0x24>)
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e308:	4b05      	ldr	r3, [pc, #20]	; (800e320 <vTaskInternalSetTimeOutState+0x28>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	605a      	str	r2, [r3, #4]
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	20000d74 	.word	0x20000d74
 800e320:	20000d60 	.word	0x20000d60

0800e324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10c      	bne.n	800e34e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	b672      	cpsid	i
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	b662      	cpsie	i
 800e348:	613b      	str	r3, [r7, #16]
}
 800e34a:	bf00      	nop
 800e34c:	e7fe      	b.n	800e34c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10c      	bne.n	800e36e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e358:	b672      	cpsid	i
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	b662      	cpsie	i
 800e368:	60fb      	str	r3, [r7, #12]
}
 800e36a:	bf00      	nop
 800e36c:	e7fe      	b.n	800e36c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e36e:	f000 fc6d 	bl	800ec4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e372:	4b1d      	ldr	r3, [pc, #116]	; (800e3e8 <xTaskCheckForTimeOut+0xc4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	69ba      	ldr	r2, [r7, #24]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38a:	d102      	bne.n	800e392 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e38c:	2300      	movs	r3, #0
 800e38e:	61fb      	str	r3, [r7, #28]
 800e390:	e023      	b.n	800e3da <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <xTaskCheckForTimeOut+0xc8>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d007      	beq.n	800e3ae <xTaskCheckForTimeOut+0x8a>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	69ba      	ldr	r2, [r7, #24]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d302      	bcc.n	800e3ae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	61fb      	str	r3, [r7, #28]
 800e3ac:	e015      	b.n	800e3da <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d20b      	bcs.n	800e3d0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff ff97 	bl	800e2f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61fb      	str	r3, [r7, #28]
 800e3ce:	e004      	b.n	800e3da <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e3da:	f000 fc6b 	bl	800ecb4 <vPortExitCritical>

	return xReturn;
 800e3de:	69fb      	ldr	r3, [r7, #28]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3720      	adds	r7, #32
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20000d60 	.word	0x20000d60
 800e3ec:	20000d74 	.word	0x20000d74

0800e3f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3f4:	4b03      	ldr	r3, [pc, #12]	; (800e404 <vTaskMissedYield+0x14>)
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	601a      	str	r2, [r3, #0]
}
 800e3fa:	bf00      	nop
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	20000d70 	.word	0x20000d70

0800e408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e410:	f000 f84c 	bl	800e4ac <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800e414:	4b04      	ldr	r3, [pc, #16]	; (800e428 <prvIdleTask+0x20>)
 800e416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e424:	e7f4      	b.n	800e410 <prvIdleTask+0x8>
 800e426:	bf00      	nop
 800e428:	e000ed04 	.word	0xe000ed04

0800e42c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e432:	2300      	movs	r3, #0
 800e434:	607b      	str	r3, [r7, #4]
 800e436:	e00c      	b.n	800e452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	4613      	mov	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4a12      	ldr	r2, [pc, #72]	; (800e48c <prvInitialiseTaskLists+0x60>)
 800e444:	4413      	add	r3, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fc3e 	bl	800ccc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3301      	adds	r3, #1
 800e450:	607b      	str	r3, [r7, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b06      	cmp	r3, #6
 800e456:	d9ef      	bls.n	800e438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e458:	480d      	ldr	r0, [pc, #52]	; (800e490 <prvInitialiseTaskLists+0x64>)
 800e45a:	f7fe fc35 	bl	800ccc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e45e:	480d      	ldr	r0, [pc, #52]	; (800e494 <prvInitialiseTaskLists+0x68>)
 800e460:	f7fe fc32 	bl	800ccc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e464:	480c      	ldr	r0, [pc, #48]	; (800e498 <prvInitialiseTaskLists+0x6c>)
 800e466:	f7fe fc2f 	bl	800ccc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e46a:	480c      	ldr	r0, [pc, #48]	; (800e49c <prvInitialiseTaskLists+0x70>)
 800e46c:	f7fe fc2c 	bl	800ccc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e470:	480b      	ldr	r0, [pc, #44]	; (800e4a0 <prvInitialiseTaskLists+0x74>)
 800e472:	f7fe fc29 	bl	800ccc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <prvInitialiseTaskLists+0x78>)
 800e478:	4a05      	ldr	r2, [pc, #20]	; (800e490 <prvInitialiseTaskLists+0x64>)
 800e47a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <prvInitialiseTaskLists+0x7c>)
 800e47e:	4a05      	ldr	r2, [pc, #20]	; (800e494 <prvInitialiseTaskLists+0x68>)
 800e480:	601a      	str	r2, [r3, #0]
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20000c60 	.word	0x20000c60
 800e490:	20000cec 	.word	0x20000cec
 800e494:	20000d00 	.word	0x20000d00
 800e498:	20000d1c 	.word	0x20000d1c
 800e49c:	20000d30 	.word	0x20000d30
 800e4a0:	20000d48 	.word	0x20000d48
 800e4a4:	20000d14 	.word	0x20000d14
 800e4a8:	20000d18 	.word	0x20000d18

0800e4ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4b2:	e019      	b.n	800e4e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4b4:	f000 fbca 	bl	800ec4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b8:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <prvCheckTasksWaitingTermination+0x50>)
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fe fc89 	bl	800cddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <prvCheckTasksWaitingTermination+0x54>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	4a0b      	ldr	r2, [pc, #44]	; (800e500 <prvCheckTasksWaitingTermination+0x54>)
 800e4d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <prvCheckTasksWaitingTermination+0x58>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	4a0a      	ldr	r2, [pc, #40]	; (800e504 <prvCheckTasksWaitingTermination+0x58>)
 800e4dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4de:	f000 fbe9 	bl	800ecb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f810 	bl	800e508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4e8:	4b06      	ldr	r3, [pc, #24]	; (800e504 <prvCheckTasksWaitingTermination+0x58>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e1      	bne.n	800e4b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4f0:	bf00      	nop
 800e4f2:	bf00      	nop
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	20000d30 	.word	0x20000d30
 800e500:	20000d5c 	.word	0x20000d5c
 800e504:	20000d44 	.word	0x20000d44

0800e508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	334c      	adds	r3, #76	; 0x4c
 800e514:	4618      	mov	r0, r3
 800e516:	f001 fea1 	bl	801025c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e520:	2b00      	cmp	r3, #0
 800e522:	d108      	bne.n	800e536 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 fd85 	bl	800f038 <vPortFree>
				vPortFree( pxTCB );
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fd82 	bl	800f038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e534:	e01a      	b.n	800e56c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d103      	bne.n	800e548 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fd79 	bl	800f038 <vPortFree>
	}
 800e546:	e011      	b.n	800e56c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d00c      	beq.n	800e56c <prvDeleteTCB+0x64>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	b672      	cpsid	i
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	b662      	cpsie	i
 800e566:	60fb      	str	r3, [r7, #12]
}
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <prvDeleteTCB+0x62>
	}
 800e56c:	bf00      	nop
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e57a:	4b0c      	ldr	r3, [pc, #48]	; (800e5ac <prvResetNextTaskUnblockTime+0x38>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d104      	bne.n	800e58e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e584:	4b0a      	ldr	r3, [pc, #40]	; (800e5b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e586:	f04f 32ff 	mov.w	r2, #4294967295
 800e58a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e58c:	e008      	b.n	800e5a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e58e:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <prvResetNextTaskUnblockTime+0x38>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	4a04      	ldr	r2, [pc, #16]	; (800e5b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e59e:	6013      	str	r3, [r2, #0]
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20000d14 	.word	0x20000d14
 800e5b0:	20000d7c 	.word	0x20000d7c

0800e5b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5ba:	4b0b      	ldr	r3, [pc, #44]	; (800e5e8 <xTaskGetSchedulerState+0x34>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d102      	bne.n	800e5c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	e008      	b.n	800e5da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5c8:	4b08      	ldr	r3, [pc, #32]	; (800e5ec <xTaskGetSchedulerState+0x38>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	607b      	str	r3, [r7, #4]
 800e5d4:	e001      	b.n	800e5da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5da:	687b      	ldr	r3, [r7, #4]
	}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	20000d68 	.word	0x20000d68
 800e5ec:	20000d84 	.word	0x20000d84

0800e5f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d069      	beq.n	800e6da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60a:	4b36      	ldr	r3, [pc, #216]	; (800e6e4 <xTaskPriorityInherit+0xf4>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	429a      	cmp	r2, r3
 800e612:	d259      	bcs.n	800e6c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	699b      	ldr	r3, [r3, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	db06      	blt.n	800e62a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e61c:	4b31      	ldr	r3, [pc, #196]	; (800e6e4 <xTaskPriorityInherit+0xf4>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e622:	f1c3 0207 	rsb	r2, r3, #7
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	6959      	ldr	r1, [r3, #20]
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4a2b      	ldr	r2, [pc, #172]	; (800e6e8 <xTaskPriorityInherit+0xf8>)
 800e63c:	4413      	add	r3, r2
 800e63e:	4299      	cmp	r1, r3
 800e640:	d13a      	bne.n	800e6b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	3304      	adds	r3, #4
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe fbc8 	bl	800cddc <uxListRemove>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d115      	bne.n	800e67e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e656:	4924      	ldr	r1, [pc, #144]	; (800e6e8 <xTaskPriorityInherit+0xf8>)
 800e658:	4613      	mov	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4413      	add	r3, r2
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	440b      	add	r3, r1
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10a      	bne.n	800e67e <xTaskPriorityInherit+0x8e>
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66c:	2201      	movs	r2, #1
 800e66e:	fa02 f303 	lsl.w	r3, r2, r3
 800e672:	43da      	mvns	r2, r3
 800e674:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <xTaskPriorityInherit+0xfc>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4013      	ands	r3, r2
 800e67a:	4a1c      	ldr	r2, [pc, #112]	; (800e6ec <xTaskPriorityInherit+0xfc>)
 800e67c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e67e:	4b19      	ldr	r3, [pc, #100]	; (800e6e4 <xTaskPriorityInherit+0xf4>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68c:	2201      	movs	r2, #1
 800e68e:	409a      	lsls	r2, r3
 800e690:	4b16      	ldr	r3, [pc, #88]	; (800e6ec <xTaskPriorityInherit+0xfc>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4313      	orrs	r3, r2
 800e696:	4a15      	ldr	r2, [pc, #84]	; (800e6ec <xTaskPriorityInherit+0xfc>)
 800e698:	6013      	str	r3, [r2, #0]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69e:	4613      	mov	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4413      	add	r3, r2
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	4a10      	ldr	r2, [pc, #64]	; (800e6e8 <xTaskPriorityInherit+0xf8>)
 800e6a8:	441a      	add	r2, r3
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	f7fe fb36 	bl	800cd22 <vListInsertEnd>
 800e6b6:	e004      	b.n	800e6c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <xTaskPriorityInherit+0xf4>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	e008      	b.n	800e6da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6cc:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <xTaskPriorityInherit+0xf4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d201      	bcs.n	800e6da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6da:	68fb      	ldr	r3, [r7, #12]
	}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20000c5c 	.word	0x20000c5c
 800e6e8:	20000c60 	.word	0x20000c60
 800e6ec:	20000d64 	.word	0x20000d64

0800e6f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d072      	beq.n	800e7ec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e706:	4b3c      	ldr	r3, [pc, #240]	; (800e7f8 <xTaskPriorityDisinherit+0x108>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	693a      	ldr	r2, [r7, #16]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d00c      	beq.n	800e72a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	b672      	cpsid	i
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	b662      	cpsie	i
 800e724:	60fb      	str	r3, [r7, #12]
}
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10c      	bne.n	800e74c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	b672      	cpsid	i
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	b662      	cpsie	i
 800e746:	60bb      	str	r3, [r7, #8]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e750:	1e5a      	subs	r2, r3, #1
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e75e:	429a      	cmp	r2, r3
 800e760:	d044      	beq.n	800e7ec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e766:	2b00      	cmp	r3, #0
 800e768:	d140      	bne.n	800e7ec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	3304      	adds	r3, #4
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fb34 	bl	800cddc <uxListRemove>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d115      	bne.n	800e7a6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77e:	491f      	ldr	r1, [pc, #124]	; (800e7fc <xTaskPriorityDisinherit+0x10c>)
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	440b      	add	r3, r1
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10a      	bne.n	800e7a6 <xTaskPriorityDisinherit+0xb6>
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e794:	2201      	movs	r2, #1
 800e796:	fa02 f303 	lsl.w	r3, r2, r3
 800e79a:	43da      	mvns	r2, r3
 800e79c:	4b18      	ldr	r3, [pc, #96]	; (800e800 <xTaskPriorityDisinherit+0x110>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	4a17      	ldr	r2, [pc, #92]	; (800e800 <xTaskPriorityDisinherit+0x110>)
 800e7a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b2:	f1c3 0207 	rsb	r2, r3, #7
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7be:	2201      	movs	r2, #1
 800e7c0:	409a      	lsls	r2, r3
 800e7c2:	4b0f      	ldr	r3, [pc, #60]	; (800e800 <xTaskPriorityDisinherit+0x110>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	; (800e800 <xTaskPriorityDisinherit+0x110>)
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	4413      	add	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4a08      	ldr	r2, [pc, #32]	; (800e7fc <xTaskPriorityDisinherit+0x10c>)
 800e7da:	441a      	add	r2, r3
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	f7fe fa9d 	bl	800cd22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7ec:	697b      	ldr	r3, [r7, #20]
	}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20000c5c 	.word	0x20000c5c
 800e7fc:	20000c60 	.word	0x20000c60
 800e800:	20000d64 	.word	0x20000d64

0800e804 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e804:	b580      	push	{r7, lr}
 800e806:	b088      	sub	sp, #32
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e812:	2301      	movs	r3, #1
 800e814:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 8087 	beq.w	800e92c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10c      	bne.n	800e840 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82a:	b672      	cpsid	i
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	b662      	cpsie	i
 800e83a:	60fb      	str	r3, [r7, #12]
}
 800e83c:	bf00      	nop
 800e83e:	e7fe      	b.n	800e83e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	429a      	cmp	r2, r3
 800e848:	d902      	bls.n	800e850 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	61fb      	str	r3, [r7, #28]
 800e84e:	e002      	b.n	800e856 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e854:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d065      	beq.n	800e92c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e864:	697a      	ldr	r2, [r7, #20]
 800e866:	429a      	cmp	r2, r3
 800e868:	d160      	bne.n	800e92c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e86a:	4b32      	ldr	r3, [pc, #200]	; (800e934 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	429a      	cmp	r2, r3
 800e872:	d10c      	bne.n	800e88e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e878:	b672      	cpsid	i
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	b662      	cpsie	i
 800e888:	60bb      	str	r3, [r7, #8]
}
 800e88a:	bf00      	nop
 800e88c:	e7fe      	b.n	800e88c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e892:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	69fa      	ldr	r2, [r7, #28]
 800e898:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	699b      	ldr	r3, [r3, #24]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	db04      	blt.n	800e8ac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	f1c3 0207 	rsb	r2, r3, #7
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	6959      	ldr	r1, [r3, #20]
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8bc:	4413      	add	r3, r2
 800e8be:	4299      	cmp	r1, r3
 800e8c0:	d134      	bne.n	800e92c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fa88 	bl	800cddc <uxListRemove>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d115      	bne.n	800e8fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d6:	4918      	ldr	r1, [pc, #96]	; (800e938 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8d8:	4613      	mov	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	440b      	add	r3, r1
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10a      	bne.n	800e8fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f2:	43da      	mvns	r2, r3
 800e8f4:	4b11      	ldr	r3, [pc, #68]	; (800e93c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4013      	ands	r3, r2
 800e8fa:	4a10      	ldr	r2, [pc, #64]	; (800e93c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e8fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e902:	2201      	movs	r2, #1
 800e904:	409a      	lsls	r2, r3
 800e906:	4b0d      	ldr	r3, [pc, #52]	; (800e93c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	4a0b      	ldr	r2, [pc, #44]	; (800e93c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e914:	4613      	mov	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4a06      	ldr	r2, [pc, #24]	; (800e938 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e91e:	441a      	add	r2, r3
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	3304      	adds	r3, #4
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f7fe f9fb 	bl	800cd22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e92c:	bf00      	nop
 800e92e:	3720      	adds	r7, #32
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	20000c5c 	.word	0x20000c5c
 800e938:	20000c60 	.word	0x20000c60
 800e93c:	20000d64 	.word	0x20000d64

0800e940 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e944:	4b07      	ldr	r3, [pc, #28]	; (800e964 <pvTaskIncrementMutexHeldCount+0x24>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e94c:	4b05      	ldr	r3, [pc, #20]	; (800e964 <pvTaskIncrementMutexHeldCount+0x24>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e952:	3201      	adds	r2, #1
 800e954:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e956:	4b03      	ldr	r3, [pc, #12]	; (800e964 <pvTaskIncrementMutexHeldCount+0x24>)
 800e958:	681b      	ldr	r3, [r3, #0]
	}
 800e95a:	4618      	mov	r0, r3
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	20000c5c 	.word	0x20000c5c

0800e968 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e972:	4b29      	ldr	r3, [pc, #164]	; (800ea18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e978:	4b28      	ldr	r3, [pc, #160]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3304      	adds	r3, #4
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe fa2c 	bl	800cddc <uxListRemove>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d10b      	bne.n	800e9a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e990:	2201      	movs	r2, #1
 800e992:	fa02 f303 	lsl.w	r3, r2, r3
 800e996:	43da      	mvns	r2, r3
 800e998:	4b21      	ldr	r3, [pc, #132]	; (800ea20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4013      	ands	r3, r2
 800e99e:	4a20      	ldr	r2, [pc, #128]	; (800ea20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e9a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d10a      	bne.n	800e9c0 <prvAddCurrentTaskToDelayedList+0x58>
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d007      	beq.n	800e9c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	481a      	ldr	r0, [pc, #104]	; (800ea24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e9ba:	f7fe f9b2 	bl	800cd22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9be:	e026      	b.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9c8:	4b14      	ldr	r3, [pc, #80]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d209      	bcs.n	800e9ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d8:	4b13      	ldr	r3, [pc, #76]	; (800ea28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7fe f9c0 	bl	800cd6a <vListInsert>
}
 800e9ea:	e010      	b.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f7fe f9b6 	bl	800cd6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ea30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d202      	bcs.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	6013      	str	r3, [r2, #0]
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000d60 	.word	0x20000d60
 800ea1c:	20000c5c 	.word	0x20000c5c
 800ea20:	20000d64 	.word	0x20000d64
 800ea24:	20000d48 	.word	0x20000d48
 800ea28:	20000d18 	.word	0x20000d18
 800ea2c:	20000d14 	.word	0x20000d14
 800ea30:	20000d7c 	.word	0x20000d7c

0800ea34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3b04      	subs	r3, #4
 800ea44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3b04      	subs	r3, #4
 800ea52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	f023 0201 	bic.w	r2, r3, #1
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3b04      	subs	r3, #4
 800ea62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea64:	4a0c      	ldr	r2, [pc, #48]	; (800ea98 <pxPortInitialiseStack+0x64>)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	3b14      	subs	r3, #20
 800ea6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	3b04      	subs	r3, #4
 800ea7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f06f 0202 	mvn.w	r2, #2
 800ea82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3b20      	subs	r3, #32
 800ea88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr
 800ea98:	0800ea9d 	.word	0x0800ea9d

0800ea9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b085      	sub	sp, #20
 800eaa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eaa6:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <prvTaskExitError+0x5c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d00c      	beq.n	800eaca <prvTaskExitError+0x2e>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab4:	b672      	cpsid	i
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	b662      	cpsie	i
 800eac4:	60fb      	str	r3, [r7, #12]
}
 800eac6:	bf00      	nop
 800eac8:	e7fe      	b.n	800eac8 <prvTaskExitError+0x2c>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	b672      	cpsid	i
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	b662      	cpsie	i
 800eade:	60bb      	str	r3, [r7, #8]
}
 800eae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eae2:	bf00      	nop
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0fc      	beq.n	800eae4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eaea:	bf00      	nop
 800eaec:	bf00      	nop
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	20000014 	.word	0x20000014
 800eafc:	00000000 	.word	0x00000000

0800eb00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb00:	4b07      	ldr	r3, [pc, #28]	; (800eb20 <pxCurrentTCBConst2>)
 800eb02:	6819      	ldr	r1, [r3, #0]
 800eb04:	6808      	ldr	r0, [r1, #0]
 800eb06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0a:	f380 8809 	msr	PSP, r0
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f04f 0000 	mov.w	r0, #0
 800eb16:	f380 8811 	msr	BASEPRI, r0
 800eb1a:	4770      	bx	lr
 800eb1c:	f3af 8000 	nop.w

0800eb20 <pxCurrentTCBConst2>:
 800eb20:	20000c5c 	.word	0x20000c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb24:	bf00      	nop
 800eb26:	bf00      	nop

0800eb28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb28:	4808      	ldr	r0, [pc, #32]	; (800eb4c <prvPortStartFirstTask+0x24>)
 800eb2a:	6800      	ldr	r0, [r0, #0]
 800eb2c:	6800      	ldr	r0, [r0, #0]
 800eb2e:	f380 8808 	msr	MSP, r0
 800eb32:	f04f 0000 	mov.w	r0, #0
 800eb36:	f380 8814 	msr	CONTROL, r0
 800eb3a:	b662      	cpsie	i
 800eb3c:	b661      	cpsie	f
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	df00      	svc	0
 800eb48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb4a:	bf00      	nop
 800eb4c:	e000ed08 	.word	0xe000ed08

0800eb50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb56:	4b37      	ldr	r3, [pc, #220]	; (800ec34 <xPortStartScheduler+0xe4>)
 800eb58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	22ff      	movs	r2, #255	; 0xff
 800eb66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb70:	78fb      	ldrb	r3, [r7, #3]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb78:	b2da      	uxtb	r2, r3
 800eb7a:	4b2f      	ldr	r3, [pc, #188]	; (800ec38 <xPortStartScheduler+0xe8>)
 800eb7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb7e:	4b2f      	ldr	r3, [pc, #188]	; (800ec3c <xPortStartScheduler+0xec>)
 800eb80:	2207      	movs	r2, #7
 800eb82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb84:	e009      	b.n	800eb9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb86:	4b2d      	ldr	r3, [pc, #180]	; (800ec3c <xPortStartScheduler+0xec>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	4a2b      	ldr	r2, [pc, #172]	; (800ec3c <xPortStartScheduler+0xec>)
 800eb8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb90:	78fb      	ldrb	r3, [r7, #3]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb9a:	78fb      	ldrb	r3, [r7, #3]
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba2:	2b80      	cmp	r3, #128	; 0x80
 800eba4:	d0ef      	beq.n	800eb86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eba6:	4b25      	ldr	r3, [pc, #148]	; (800ec3c <xPortStartScheduler+0xec>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f1c3 0307 	rsb	r3, r3, #7
 800ebae:	2b04      	cmp	r3, #4
 800ebb0:	d00c      	beq.n	800ebcc <xPortStartScheduler+0x7c>
	__asm volatile
 800ebb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb6:	b672      	cpsid	i
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	b662      	cpsie	i
 800ebc6:	60bb      	str	r3, [r7, #8]
}
 800ebc8:	bf00      	nop
 800ebca:	e7fe      	b.n	800ebca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebcc:	4b1b      	ldr	r3, [pc, #108]	; (800ec3c <xPortStartScheduler+0xec>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	021b      	lsls	r3, r3, #8
 800ebd2:	4a1a      	ldr	r2, [pc, #104]	; (800ec3c <xPortStartScheduler+0xec>)
 800ebd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebd6:	4b19      	ldr	r3, [pc, #100]	; (800ec3c <xPortStartScheduler+0xec>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebde:	4a17      	ldr	r2, [pc, #92]	; (800ec3c <xPortStartScheduler+0xec>)
 800ebe0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	b2da      	uxtb	r2, r3
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebea:	4b15      	ldr	r3, [pc, #84]	; (800ec40 <xPortStartScheduler+0xf0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a14      	ldr	r2, [pc, #80]	; (800ec40 <xPortStartScheduler+0xf0>)
 800ebf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebf6:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <xPortStartScheduler+0xf0>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a11      	ldr	r2, [pc, #68]	; (800ec40 <xPortStartScheduler+0xf0>)
 800ebfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec02:	f000 f8dd 	bl	800edc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec06:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <xPortStartScheduler+0xf4>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec0c:	f000 f8fc 	bl	800ee08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec10:	4b0d      	ldr	r3, [pc, #52]	; (800ec48 <xPortStartScheduler+0xf8>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a0c      	ldr	r2, [pc, #48]	; (800ec48 <xPortStartScheduler+0xf8>)
 800ec16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec1c:	f7ff ff84 	bl	800eb28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec20:	f7ff fa7c 	bl	800e11c <vTaskSwitchContext>
	prvTaskExitError();
 800ec24:	f7ff ff3a 	bl	800ea9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	e000e400 	.word	0xe000e400
 800ec38:	20000d88 	.word	0x20000d88
 800ec3c:	20000d8c 	.word	0x20000d8c
 800ec40:	e000ed20 	.word	0xe000ed20
 800ec44:	20000014 	.word	0x20000014
 800ec48:	e000ef34 	.word	0xe000ef34

0800ec4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	b672      	cpsid	i
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	b662      	cpsie	i
 800ec66:	607b      	str	r3, [r7, #4]
}
 800ec68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec6a:	4b10      	ldr	r3, [pc, #64]	; (800ecac <vPortEnterCritical+0x60>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	4a0e      	ldr	r2, [pc, #56]	; (800ecac <vPortEnterCritical+0x60>)
 800ec72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec74:	4b0d      	ldr	r3, [pc, #52]	; (800ecac <vPortEnterCritical+0x60>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d111      	bne.n	800eca0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec7c:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <vPortEnterCritical+0x64>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00c      	beq.n	800eca0 <vPortEnterCritical+0x54>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	b672      	cpsid	i
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	b662      	cpsie	i
 800ec9a:	603b      	str	r3, [r7, #0]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <vPortEnterCritical+0x52>
	}
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	20000014 	.word	0x20000014
 800ecb0:	e000ed04 	.word	0xe000ed04

0800ecb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ecba:	4b13      	ldr	r3, [pc, #76]	; (800ed08 <vPortExitCritical+0x54>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10c      	bne.n	800ecdc <vPortExitCritical+0x28>
	__asm volatile
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	b672      	cpsid	i
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	b662      	cpsie	i
 800ecd6:	607b      	str	r3, [r7, #4]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ecdc:	4b0a      	ldr	r3, [pc, #40]	; (800ed08 <vPortExitCritical+0x54>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3b01      	subs	r3, #1
 800ece2:	4a09      	ldr	r2, [pc, #36]	; (800ed08 <vPortExitCritical+0x54>)
 800ece4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ece6:	4b08      	ldr	r3, [pc, #32]	; (800ed08 <vPortExitCritical+0x54>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d105      	bne.n	800ecfa <vPortExitCritical+0x46>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	f383 8811 	msr	BASEPRI, r3
}
 800ecf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecfa:	bf00      	nop
 800ecfc:	370c      	adds	r7, #12
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	20000014 	.word	0x20000014
 800ed0c:	00000000 	.word	0x00000000

0800ed10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed10:	f3ef 8009 	mrs	r0, PSP
 800ed14:	f3bf 8f6f 	isb	sy
 800ed18:	4b15      	ldr	r3, [pc, #84]	; (800ed70 <pxCurrentTCBConst>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	f01e 0f10 	tst.w	lr, #16
 800ed20:	bf08      	it	eq
 800ed22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2a:	6010      	str	r0, [r2, #0]
 800ed2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed34:	b672      	cpsid	i
 800ed36:	f380 8811 	msr	BASEPRI, r0
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	b662      	cpsie	i
 800ed44:	f7ff f9ea 	bl	800e11c <vTaskSwitchContext>
 800ed48:	f04f 0000 	mov.w	r0, #0
 800ed4c:	f380 8811 	msr	BASEPRI, r0
 800ed50:	bc09      	pop	{r0, r3}
 800ed52:	6819      	ldr	r1, [r3, #0]
 800ed54:	6808      	ldr	r0, [r1, #0]
 800ed56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed5a:	f01e 0f10 	tst.w	lr, #16
 800ed5e:	bf08      	it	eq
 800ed60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed64:	f380 8809 	msr	PSP, r0
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop

0800ed70 <pxCurrentTCBConst>:
 800ed70:	20000c5c 	.word	0x20000c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop

0800ed78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	b672      	cpsid	i
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	b662      	cpsie	i
 800ed92:	607b      	str	r3, [r7, #4]
}
 800ed94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed96:	f7ff f929 	bl	800dfec <xTaskIncrementTick>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d003      	beq.n	800eda8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eda0:	4b06      	ldr	r3, [pc, #24]	; (800edbc <SysTick_Handler+0x44>)
 800eda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda6:	601a      	str	r2, [r3, #0]
 800eda8:	2300      	movs	r3, #0
 800edaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	f383 8811 	msr	BASEPRI, r3
}
 800edb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800edb4:	bf00      	nop
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	e000ed04 	.word	0xe000ed04

0800edc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800edc0:	b480      	push	{r7}
 800edc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edc4:	4b0b      	ldr	r3, [pc, #44]	; (800edf4 <vPortSetupTimerInterrupt+0x34>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edca:	4b0b      	ldr	r3, [pc, #44]	; (800edf8 <vPortSetupTimerInterrupt+0x38>)
 800edcc:	2200      	movs	r2, #0
 800edce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edd0:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <vPortSetupTimerInterrupt+0x3c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a0a      	ldr	r2, [pc, #40]	; (800ee00 <vPortSetupTimerInterrupt+0x40>)
 800edd6:	fba2 2303 	umull	r2, r3, r2, r3
 800edda:	099b      	lsrs	r3, r3, #6
 800eddc:	4a09      	ldr	r2, [pc, #36]	; (800ee04 <vPortSetupTimerInterrupt+0x44>)
 800edde:	3b01      	subs	r3, #1
 800ede0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ede2:	4b04      	ldr	r3, [pc, #16]	; (800edf4 <vPortSetupTimerInterrupt+0x34>)
 800ede4:	2207      	movs	r2, #7
 800ede6:	601a      	str	r2, [r3, #0]
}
 800ede8:	bf00      	nop
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	e000e010 	.word	0xe000e010
 800edf8:	e000e018 	.word	0xe000e018
 800edfc:	20000008 	.word	0x20000008
 800ee00:	10624dd3 	.word	0x10624dd3
 800ee04:	e000e014 	.word	0xe000e014

0800ee08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee18 <vPortEnableVFP+0x10>
 800ee0c:	6801      	ldr	r1, [r0, #0]
 800ee0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee12:	6001      	str	r1, [r0, #0]
 800ee14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee16:	bf00      	nop
 800ee18:	e000ed88 	.word	0xe000ed88

0800ee1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee22:	f3ef 8305 	mrs	r3, IPSR
 800ee26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b0f      	cmp	r3, #15
 800ee2c:	d916      	bls.n	800ee5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee2e:	4a19      	ldr	r2, [pc, #100]	; (800ee94 <vPortValidateInterruptPriority+0x78>)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	4413      	add	r3, r2
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee38:	4b17      	ldr	r3, [pc, #92]	; (800ee98 <vPortValidateInterruptPriority+0x7c>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	7afa      	ldrb	r2, [r7, #11]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d20c      	bcs.n	800ee5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	b672      	cpsid	i
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	b662      	cpsie	i
 800ee56:	607b      	str	r3, [r7, #4]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee5c:	4b0f      	ldr	r3, [pc, #60]	; (800ee9c <vPortValidateInterruptPriority+0x80>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee64:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <vPortValidateInterruptPriority+0x84>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d90c      	bls.n	800ee86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	b672      	cpsid	i
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	b662      	cpsie	i
 800ee80:	603b      	str	r3, [r7, #0]
}
 800ee82:	bf00      	nop
 800ee84:	e7fe      	b.n	800ee84 <vPortValidateInterruptPriority+0x68>
	}
 800ee86:	bf00      	nop
 800ee88:	3714      	adds	r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	e000e3f0 	.word	0xe000e3f0
 800ee98:	20000d88 	.word	0x20000d88
 800ee9c:	e000ed0c 	.word	0xe000ed0c
 800eea0:	20000d8c 	.word	0x20000d8c

0800eea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b08a      	sub	sp, #40	; 0x28
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eeac:	2300      	movs	r3, #0
 800eeae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eeb0:	f7fe ffee 	bl	800de90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eeb4:	4b5b      	ldr	r3, [pc, #364]	; (800f024 <pvPortMalloc+0x180>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eebc:	f000 f91a 	bl	800f0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eec0:	4b59      	ldr	r3, [pc, #356]	; (800f028 <pvPortMalloc+0x184>)
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4013      	ands	r3, r2
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f040 8092 	bne.w	800eff2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d01f      	beq.n	800ef14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800eed4:	2208      	movs	r2, #8
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4413      	add	r3, r2
 800eeda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f003 0307 	and.w	r3, r3, #7
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d016      	beq.n	800ef14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f023 0307 	bic.w	r3, r3, #7
 800eeec:	3308      	adds	r3, #8
 800eeee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f003 0307 	and.w	r3, r3, #7
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00c      	beq.n	800ef14 <pvPortMalloc+0x70>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	b672      	cpsid	i
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	b662      	cpsie	i
 800ef0e:	617b      	str	r3, [r7, #20]
}
 800ef10:	bf00      	nop
 800ef12:	e7fe      	b.n	800ef12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d06b      	beq.n	800eff2 <pvPortMalloc+0x14e>
 800ef1a:	4b44      	ldr	r3, [pc, #272]	; (800f02c <pvPortMalloc+0x188>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d866      	bhi.n	800eff2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef24:	4b42      	ldr	r3, [pc, #264]	; (800f030 <pvPortMalloc+0x18c>)
 800ef26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef28:	4b41      	ldr	r3, [pc, #260]	; (800f030 <pvPortMalloc+0x18c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef2e:	e004      	b.n	800ef3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d903      	bls.n	800ef4c <pvPortMalloc+0xa8>
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1f1      	bne.n	800ef30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef4c:	4b35      	ldr	r3, [pc, #212]	; (800f024 <pvPortMalloc+0x180>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d04d      	beq.n	800eff2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2208      	movs	r2, #8
 800ef5c:	4413      	add	r3, r2
 800ef5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	1ad2      	subs	r2, r2, r3
 800ef70:	2308      	movs	r3, #8
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d921      	bls.n	800efbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00c      	beq.n	800efa4 <pvPortMalloc+0x100>
	__asm volatile
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	b672      	cpsid	i
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	b662      	cpsie	i
 800ef9e:	613b      	str	r3, [r7, #16]
}
 800efa0:	bf00      	nop
 800efa2:	e7fe      	b.n	800efa2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	1ad2      	subs	r2, r2, r3
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efb6:	69b8      	ldr	r0, [r7, #24]
 800efb8:	f000 f8fe 	bl	800f1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efbc:	4b1b      	ldr	r3, [pc, #108]	; (800f02c <pvPortMalloc+0x188>)
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	4a19      	ldr	r2, [pc, #100]	; (800f02c <pvPortMalloc+0x188>)
 800efc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efca:	4b18      	ldr	r3, [pc, #96]	; (800f02c <pvPortMalloc+0x188>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	4b19      	ldr	r3, [pc, #100]	; (800f034 <pvPortMalloc+0x190>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d203      	bcs.n	800efde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efd6:	4b15      	ldr	r3, [pc, #84]	; (800f02c <pvPortMalloc+0x188>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a16      	ldr	r2, [pc, #88]	; (800f034 <pvPortMalloc+0x190>)
 800efdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	4b11      	ldr	r3, [pc, #68]	; (800f028 <pvPortMalloc+0x184>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	431a      	orrs	r2, r3
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	2200      	movs	r2, #0
 800eff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eff2:	f7fe ff5b 	bl	800deac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	f003 0307 	and.w	r3, r3, #7
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00c      	beq.n	800f01a <pvPortMalloc+0x176>
	__asm volatile
 800f000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f004:	b672      	cpsid	i
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	b662      	cpsie	i
 800f014:	60fb      	str	r3, [r7, #12]
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <pvPortMalloc+0x174>
	return pvReturn;
 800f01a:	69fb      	ldr	r3, [r7, #28]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3728      	adds	r7, #40	; 0x28
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	20004998 	.word	0x20004998
 800f028:	200049a4 	.word	0x200049a4
 800f02c:	2000499c 	.word	0x2000499c
 800f030:	20004990 	.word	0x20004990
 800f034:	200049a0 	.word	0x200049a0

0800f038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d04c      	beq.n	800f0e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f04a:	2308      	movs	r3, #8
 800f04c:	425b      	negs	r3, r3
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	4413      	add	r3, r2
 800f052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	4b23      	ldr	r3, [pc, #140]	; (800f0ec <vPortFree+0xb4>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4013      	ands	r3, r2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10c      	bne.n	800f080 <vPortFree+0x48>
	__asm volatile
 800f066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06a:	b672      	cpsid	i
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	b662      	cpsie	i
 800f07a:	60fb      	str	r3, [r7, #12]
}
 800f07c:	bf00      	nop
 800f07e:	e7fe      	b.n	800f07e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00c      	beq.n	800f0a2 <vPortFree+0x6a>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08c:	b672      	cpsid	i
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	b662      	cpsie	i
 800f09c:	60bb      	str	r3, [r7, #8]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	685a      	ldr	r2, [r3, #4]
 800f0a6:	4b11      	ldr	r3, [pc, #68]	; (800f0ec <vPortFree+0xb4>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d019      	beq.n	800f0e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d115      	bne.n	800f0e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <vPortFree+0xb4>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	43db      	mvns	r3, r3
 800f0c2:	401a      	ands	r2, r3
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0c8:	f7fe fee2 	bl	800de90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	685a      	ldr	r2, [r3, #4]
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <vPortFree+0xb8>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	4a06      	ldr	r2, [pc, #24]	; (800f0f0 <vPortFree+0xb8>)
 800f0d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0da:	6938      	ldr	r0, [r7, #16]
 800f0dc:	f000 f86c 	bl	800f1b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f0e0:	f7fe fee4 	bl	800deac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0e4:	bf00      	nop
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	200049a4 	.word	0x200049a4
 800f0f0:	2000499c 	.word	0x2000499c

0800f0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f100:	4b27      	ldr	r3, [pc, #156]	; (800f1a0 <prvHeapInit+0xac>)
 800f102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00c      	beq.n	800f128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3307      	adds	r3, #7
 800f112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 0307 	bic.w	r3, r3, #7
 800f11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	4a1f      	ldr	r2, [pc, #124]	; (800f1a0 <prvHeapInit+0xac>)
 800f124:	4413      	add	r3, r2
 800f126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f12c:	4a1d      	ldr	r2, [pc, #116]	; (800f1a4 <prvHeapInit+0xb0>)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f132:	4b1c      	ldr	r3, [pc, #112]	; (800f1a4 <prvHeapInit+0xb0>)
 800f134:	2200      	movs	r2, #0
 800f136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	4413      	add	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f140:	2208      	movs	r2, #8
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f023 0307 	bic.w	r3, r3, #7
 800f14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	4a15      	ldr	r2, [pc, #84]	; (800f1a8 <prvHeapInit+0xb4>)
 800f154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f156:	4b14      	ldr	r3, [pc, #80]	; (800f1a8 <prvHeapInit+0xb4>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2200      	movs	r2, #0
 800f15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f15e:	4b12      	ldr	r3, [pc, #72]	; (800f1a8 <prvHeapInit+0xb4>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2200      	movs	r2, #0
 800f164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	1ad2      	subs	r2, r2, r3
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f174:	4b0c      	ldr	r3, [pc, #48]	; (800f1a8 <prvHeapInit+0xb4>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	4a0a      	ldr	r2, [pc, #40]	; (800f1ac <prvHeapInit+0xb8>)
 800f182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	4a09      	ldr	r2, [pc, #36]	; (800f1b0 <prvHeapInit+0xbc>)
 800f18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f18c:	4b09      	ldr	r3, [pc, #36]	; (800f1b4 <prvHeapInit+0xc0>)
 800f18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f192:	601a      	str	r2, [r3, #0]
}
 800f194:	bf00      	nop
 800f196:	3714      	adds	r7, #20
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	20000d90 	.word	0x20000d90
 800f1a4:	20004990 	.word	0x20004990
 800f1a8:	20004998 	.word	0x20004998
 800f1ac:	200049a0 	.word	0x200049a0
 800f1b0:	2000499c 	.word	0x2000499c
 800f1b4:	200049a4 	.word	0x200049a4

0800f1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1c0:	4b28      	ldr	r3, [pc, #160]	; (800f264 <prvInsertBlockIntoFreeList+0xac>)
 800f1c2:	60fb      	str	r3, [r7, #12]
 800f1c4:	e002      	b.n	800f1cc <prvInsertBlockIntoFreeList+0x14>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	60fb      	str	r3, [r7, #12]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d8f7      	bhi.n	800f1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d108      	bne.n	800f1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	441a      	add	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d118      	bne.n	800f240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	4b15      	ldr	r3, [pc, #84]	; (800f268 <prvInsertBlockIntoFreeList+0xb0>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d00d      	beq.n	800f236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	441a      	add	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	e008      	b.n	800f248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f236:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <prvInsertBlockIntoFreeList+0xb0>)
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	e003      	b.n	800f248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d002      	beq.n	800f256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f256:	bf00      	nop
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	20004990 	.word	0x20004990
 800f268:	20004998 	.word	0x20004998

0800f26c <__cvt>:
 800f26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f270:	ec55 4b10 	vmov	r4, r5, d0
 800f274:	2d00      	cmp	r5, #0
 800f276:	460e      	mov	r6, r1
 800f278:	4619      	mov	r1, r3
 800f27a:	462b      	mov	r3, r5
 800f27c:	bfbb      	ittet	lt
 800f27e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f282:	461d      	movlt	r5, r3
 800f284:	2300      	movge	r3, #0
 800f286:	232d      	movlt	r3, #45	; 0x2d
 800f288:	700b      	strb	r3, [r1, #0]
 800f28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f28c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f290:	4691      	mov	r9, r2
 800f292:	f023 0820 	bic.w	r8, r3, #32
 800f296:	bfbc      	itt	lt
 800f298:	4622      	movlt	r2, r4
 800f29a:	4614      	movlt	r4, r2
 800f29c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2a0:	d005      	beq.n	800f2ae <__cvt+0x42>
 800f2a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f2a6:	d100      	bne.n	800f2aa <__cvt+0x3e>
 800f2a8:	3601      	adds	r6, #1
 800f2aa:	2102      	movs	r1, #2
 800f2ac:	e000      	b.n	800f2b0 <__cvt+0x44>
 800f2ae:	2103      	movs	r1, #3
 800f2b0:	ab03      	add	r3, sp, #12
 800f2b2:	9301      	str	r3, [sp, #4]
 800f2b4:	ab02      	add	r3, sp, #8
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	ec45 4b10 	vmov	d0, r4, r5
 800f2bc:	4653      	mov	r3, sl
 800f2be:	4632      	mov	r2, r6
 800f2c0:	f001 f922 	bl	8010508 <_dtoa_r>
 800f2c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f2c8:	4607      	mov	r7, r0
 800f2ca:	d102      	bne.n	800f2d2 <__cvt+0x66>
 800f2cc:	f019 0f01 	tst.w	r9, #1
 800f2d0:	d022      	beq.n	800f318 <__cvt+0xac>
 800f2d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2d6:	eb07 0906 	add.w	r9, r7, r6
 800f2da:	d110      	bne.n	800f2fe <__cvt+0x92>
 800f2dc:	783b      	ldrb	r3, [r7, #0]
 800f2de:	2b30      	cmp	r3, #48	; 0x30
 800f2e0:	d10a      	bne.n	800f2f8 <__cvt+0x8c>
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f1 fc15 	bl	8000b18 <__aeabi_dcmpeq>
 800f2ee:	b918      	cbnz	r0, 800f2f8 <__cvt+0x8c>
 800f2f0:	f1c6 0601 	rsb	r6, r6, #1
 800f2f4:	f8ca 6000 	str.w	r6, [sl]
 800f2f8:	f8da 3000 	ldr.w	r3, [sl]
 800f2fc:	4499      	add	r9, r3
 800f2fe:	2200      	movs	r2, #0
 800f300:	2300      	movs	r3, #0
 800f302:	4620      	mov	r0, r4
 800f304:	4629      	mov	r1, r5
 800f306:	f7f1 fc07 	bl	8000b18 <__aeabi_dcmpeq>
 800f30a:	b108      	cbz	r0, 800f310 <__cvt+0xa4>
 800f30c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f310:	2230      	movs	r2, #48	; 0x30
 800f312:	9b03      	ldr	r3, [sp, #12]
 800f314:	454b      	cmp	r3, r9
 800f316:	d307      	bcc.n	800f328 <__cvt+0xbc>
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f31c:	1bdb      	subs	r3, r3, r7
 800f31e:	4638      	mov	r0, r7
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	b004      	add	sp, #16
 800f324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f328:	1c59      	adds	r1, r3, #1
 800f32a:	9103      	str	r1, [sp, #12]
 800f32c:	701a      	strb	r2, [r3, #0]
 800f32e:	e7f0      	b.n	800f312 <__cvt+0xa6>

0800f330 <__exponent>:
 800f330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f332:	4603      	mov	r3, r0
 800f334:	2900      	cmp	r1, #0
 800f336:	bfb8      	it	lt
 800f338:	4249      	neglt	r1, r1
 800f33a:	f803 2b02 	strb.w	r2, [r3], #2
 800f33e:	bfb4      	ite	lt
 800f340:	222d      	movlt	r2, #45	; 0x2d
 800f342:	222b      	movge	r2, #43	; 0x2b
 800f344:	2909      	cmp	r1, #9
 800f346:	7042      	strb	r2, [r0, #1]
 800f348:	dd2a      	ble.n	800f3a0 <__exponent+0x70>
 800f34a:	f10d 0207 	add.w	r2, sp, #7
 800f34e:	4617      	mov	r7, r2
 800f350:	260a      	movs	r6, #10
 800f352:	4694      	mov	ip, r2
 800f354:	fb91 f5f6 	sdiv	r5, r1, r6
 800f358:	fb06 1415 	mls	r4, r6, r5, r1
 800f35c:	3430      	adds	r4, #48	; 0x30
 800f35e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f362:	460c      	mov	r4, r1
 800f364:	2c63      	cmp	r4, #99	; 0x63
 800f366:	f102 32ff 	add.w	r2, r2, #4294967295
 800f36a:	4629      	mov	r1, r5
 800f36c:	dcf1      	bgt.n	800f352 <__exponent+0x22>
 800f36e:	3130      	adds	r1, #48	; 0x30
 800f370:	f1ac 0402 	sub.w	r4, ip, #2
 800f374:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f378:	1c41      	adds	r1, r0, #1
 800f37a:	4622      	mov	r2, r4
 800f37c:	42ba      	cmp	r2, r7
 800f37e:	d30a      	bcc.n	800f396 <__exponent+0x66>
 800f380:	f10d 0209 	add.w	r2, sp, #9
 800f384:	eba2 020c 	sub.w	r2, r2, ip
 800f388:	42bc      	cmp	r4, r7
 800f38a:	bf88      	it	hi
 800f38c:	2200      	movhi	r2, #0
 800f38e:	4413      	add	r3, r2
 800f390:	1a18      	subs	r0, r3, r0
 800f392:	b003      	add	sp, #12
 800f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f396:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f39a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f39e:	e7ed      	b.n	800f37c <__exponent+0x4c>
 800f3a0:	2330      	movs	r3, #48	; 0x30
 800f3a2:	3130      	adds	r1, #48	; 0x30
 800f3a4:	7083      	strb	r3, [r0, #2]
 800f3a6:	70c1      	strb	r1, [r0, #3]
 800f3a8:	1d03      	adds	r3, r0, #4
 800f3aa:	e7f1      	b.n	800f390 <__exponent+0x60>

0800f3ac <_printf_float>:
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	ed2d 8b02 	vpush	{d8}
 800f3b4:	b08d      	sub	sp, #52	; 0x34
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f3bc:	4616      	mov	r6, r2
 800f3be:	461f      	mov	r7, r3
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	f000 ff37 	bl	8010234 <_localeconv_r>
 800f3c6:	f8d0 a000 	ldr.w	sl, [r0]
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	f7f0 ff78 	bl	80002c0 <strlen>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	9305      	str	r3, [sp, #20]
 800f3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800f3dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f3e0:	3307      	adds	r3, #7
 800f3e2:	f023 0307 	bic.w	r3, r3, #7
 800f3e6:	f103 0208 	add.w	r2, r3, #8
 800f3ea:	f8c8 2000 	str.w	r2, [r8]
 800f3ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3f6:	9307      	str	r3, [sp, #28]
 800f3f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f3fc:	ee08 0a10 	vmov	s16, r0
 800f400:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f408:	4b9e      	ldr	r3, [pc, #632]	; (800f684 <_printf_float+0x2d8>)
 800f40a:	f04f 32ff 	mov.w	r2, #4294967295
 800f40e:	f7f1 fbb5 	bl	8000b7c <__aeabi_dcmpun>
 800f412:	bb88      	cbnz	r0, 800f478 <_printf_float+0xcc>
 800f414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f418:	4b9a      	ldr	r3, [pc, #616]	; (800f684 <_printf_float+0x2d8>)
 800f41a:	f04f 32ff 	mov.w	r2, #4294967295
 800f41e:	f7f1 fb8f 	bl	8000b40 <__aeabi_dcmple>
 800f422:	bb48      	cbnz	r0, 800f478 <_printf_float+0xcc>
 800f424:	2200      	movs	r2, #0
 800f426:	2300      	movs	r3, #0
 800f428:	4640      	mov	r0, r8
 800f42a:	4649      	mov	r1, r9
 800f42c:	f7f1 fb7e 	bl	8000b2c <__aeabi_dcmplt>
 800f430:	b110      	cbz	r0, 800f438 <_printf_float+0x8c>
 800f432:	232d      	movs	r3, #45	; 0x2d
 800f434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f438:	4a93      	ldr	r2, [pc, #588]	; (800f688 <_printf_float+0x2dc>)
 800f43a:	4b94      	ldr	r3, [pc, #592]	; (800f68c <_printf_float+0x2e0>)
 800f43c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f440:	bf94      	ite	ls
 800f442:	4690      	movls	r8, r2
 800f444:	4698      	movhi	r8, r3
 800f446:	2303      	movs	r3, #3
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	9b05      	ldr	r3, [sp, #20]
 800f44c:	f023 0304 	bic.w	r3, r3, #4
 800f450:	6023      	str	r3, [r4, #0]
 800f452:	f04f 0900 	mov.w	r9, #0
 800f456:	9700      	str	r7, [sp, #0]
 800f458:	4633      	mov	r3, r6
 800f45a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f45c:	4621      	mov	r1, r4
 800f45e:	4628      	mov	r0, r5
 800f460:	f000 f9da 	bl	800f818 <_printf_common>
 800f464:	3001      	adds	r0, #1
 800f466:	f040 8090 	bne.w	800f58a <_printf_float+0x1de>
 800f46a:	f04f 30ff 	mov.w	r0, #4294967295
 800f46e:	b00d      	add	sp, #52	; 0x34
 800f470:	ecbd 8b02 	vpop	{d8}
 800f474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f478:	4642      	mov	r2, r8
 800f47a:	464b      	mov	r3, r9
 800f47c:	4640      	mov	r0, r8
 800f47e:	4649      	mov	r1, r9
 800f480:	f7f1 fb7c 	bl	8000b7c <__aeabi_dcmpun>
 800f484:	b140      	cbz	r0, 800f498 <_printf_float+0xec>
 800f486:	464b      	mov	r3, r9
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfbc      	itt	lt
 800f48c:	232d      	movlt	r3, #45	; 0x2d
 800f48e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f492:	4a7f      	ldr	r2, [pc, #508]	; (800f690 <_printf_float+0x2e4>)
 800f494:	4b7f      	ldr	r3, [pc, #508]	; (800f694 <_printf_float+0x2e8>)
 800f496:	e7d1      	b.n	800f43c <_printf_float+0x90>
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f49e:	9206      	str	r2, [sp, #24]
 800f4a0:	1c5a      	adds	r2, r3, #1
 800f4a2:	d13f      	bne.n	800f524 <_printf_float+0x178>
 800f4a4:	2306      	movs	r3, #6
 800f4a6:	6063      	str	r3, [r4, #4]
 800f4a8:	9b05      	ldr	r3, [sp, #20]
 800f4aa:	6861      	ldr	r1, [r4, #4]
 800f4ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	9303      	str	r3, [sp, #12]
 800f4b4:	ab0a      	add	r3, sp, #40	; 0x28
 800f4b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f4ba:	ab09      	add	r3, sp, #36	; 0x24
 800f4bc:	ec49 8b10 	vmov	d0, r8, r9
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	6022      	str	r2, [r4, #0]
 800f4c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	f7ff fecf 	bl	800f26c <__cvt>
 800f4ce:	9b06      	ldr	r3, [sp, #24]
 800f4d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4d2:	2b47      	cmp	r3, #71	; 0x47
 800f4d4:	4680      	mov	r8, r0
 800f4d6:	d108      	bne.n	800f4ea <_printf_float+0x13e>
 800f4d8:	1cc8      	adds	r0, r1, #3
 800f4da:	db02      	blt.n	800f4e2 <_printf_float+0x136>
 800f4dc:	6863      	ldr	r3, [r4, #4]
 800f4de:	4299      	cmp	r1, r3
 800f4e0:	dd41      	ble.n	800f566 <_printf_float+0x1ba>
 800f4e2:	f1ab 0302 	sub.w	r3, fp, #2
 800f4e6:	fa5f fb83 	uxtb.w	fp, r3
 800f4ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f4ee:	d820      	bhi.n	800f532 <_printf_float+0x186>
 800f4f0:	3901      	subs	r1, #1
 800f4f2:	465a      	mov	r2, fp
 800f4f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f4f8:	9109      	str	r1, [sp, #36]	; 0x24
 800f4fa:	f7ff ff19 	bl	800f330 <__exponent>
 800f4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f500:	1813      	adds	r3, r2, r0
 800f502:	2a01      	cmp	r2, #1
 800f504:	4681      	mov	r9, r0
 800f506:	6123      	str	r3, [r4, #16]
 800f508:	dc02      	bgt.n	800f510 <_printf_float+0x164>
 800f50a:	6822      	ldr	r2, [r4, #0]
 800f50c:	07d2      	lsls	r2, r2, #31
 800f50e:	d501      	bpl.n	800f514 <_printf_float+0x168>
 800f510:	3301      	adds	r3, #1
 800f512:	6123      	str	r3, [r4, #16]
 800f514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d09c      	beq.n	800f456 <_printf_float+0xaa>
 800f51c:	232d      	movs	r3, #45	; 0x2d
 800f51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f522:	e798      	b.n	800f456 <_printf_float+0xaa>
 800f524:	9a06      	ldr	r2, [sp, #24]
 800f526:	2a47      	cmp	r2, #71	; 0x47
 800f528:	d1be      	bne.n	800f4a8 <_printf_float+0xfc>
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d1bc      	bne.n	800f4a8 <_printf_float+0xfc>
 800f52e:	2301      	movs	r3, #1
 800f530:	e7b9      	b.n	800f4a6 <_printf_float+0xfa>
 800f532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f536:	d118      	bne.n	800f56a <_printf_float+0x1be>
 800f538:	2900      	cmp	r1, #0
 800f53a:	6863      	ldr	r3, [r4, #4]
 800f53c:	dd0b      	ble.n	800f556 <_printf_float+0x1aa>
 800f53e:	6121      	str	r1, [r4, #16]
 800f540:	b913      	cbnz	r3, 800f548 <_printf_float+0x19c>
 800f542:	6822      	ldr	r2, [r4, #0]
 800f544:	07d0      	lsls	r0, r2, #31
 800f546:	d502      	bpl.n	800f54e <_printf_float+0x1a2>
 800f548:	3301      	adds	r3, #1
 800f54a:	440b      	add	r3, r1
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f550:	f04f 0900 	mov.w	r9, #0
 800f554:	e7de      	b.n	800f514 <_printf_float+0x168>
 800f556:	b913      	cbnz	r3, 800f55e <_printf_float+0x1b2>
 800f558:	6822      	ldr	r2, [r4, #0]
 800f55a:	07d2      	lsls	r2, r2, #31
 800f55c:	d501      	bpl.n	800f562 <_printf_float+0x1b6>
 800f55e:	3302      	adds	r3, #2
 800f560:	e7f4      	b.n	800f54c <_printf_float+0x1a0>
 800f562:	2301      	movs	r3, #1
 800f564:	e7f2      	b.n	800f54c <_printf_float+0x1a0>
 800f566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f56c:	4299      	cmp	r1, r3
 800f56e:	db05      	blt.n	800f57c <_printf_float+0x1d0>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	6121      	str	r1, [r4, #16]
 800f574:	07d8      	lsls	r0, r3, #31
 800f576:	d5ea      	bpl.n	800f54e <_printf_float+0x1a2>
 800f578:	1c4b      	adds	r3, r1, #1
 800f57a:	e7e7      	b.n	800f54c <_printf_float+0x1a0>
 800f57c:	2900      	cmp	r1, #0
 800f57e:	bfd4      	ite	le
 800f580:	f1c1 0202 	rsble	r2, r1, #2
 800f584:	2201      	movgt	r2, #1
 800f586:	4413      	add	r3, r2
 800f588:	e7e0      	b.n	800f54c <_printf_float+0x1a0>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	055a      	lsls	r2, r3, #21
 800f58e:	d407      	bmi.n	800f5a0 <_printf_float+0x1f4>
 800f590:	6923      	ldr	r3, [r4, #16]
 800f592:	4642      	mov	r2, r8
 800f594:	4631      	mov	r1, r6
 800f596:	4628      	mov	r0, r5
 800f598:	47b8      	blx	r7
 800f59a:	3001      	adds	r0, #1
 800f59c:	d12c      	bne.n	800f5f8 <_printf_float+0x24c>
 800f59e:	e764      	b.n	800f46a <_printf_float+0xbe>
 800f5a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5a4:	f240 80e0 	bls.w	800f768 <_printf_float+0x3bc>
 800f5a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f7f1 fab2 	bl	8000b18 <__aeabi_dcmpeq>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d034      	beq.n	800f622 <_printf_float+0x276>
 800f5b8:	4a37      	ldr	r2, [pc, #220]	; (800f698 <_printf_float+0x2ec>)
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	4631      	mov	r1, r6
 800f5be:	4628      	mov	r0, r5
 800f5c0:	47b8      	blx	r7
 800f5c2:	3001      	adds	r0, #1
 800f5c4:	f43f af51 	beq.w	800f46a <_printf_float+0xbe>
 800f5c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	db02      	blt.n	800f5d6 <_printf_float+0x22a>
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	07d8      	lsls	r0, r3, #31
 800f5d4:	d510      	bpl.n	800f5f8 <_printf_float+0x24c>
 800f5d6:	ee18 3a10 	vmov	r3, s16
 800f5da:	4652      	mov	r2, sl
 800f5dc:	4631      	mov	r1, r6
 800f5de:	4628      	mov	r0, r5
 800f5e0:	47b8      	blx	r7
 800f5e2:	3001      	adds	r0, #1
 800f5e4:	f43f af41 	beq.w	800f46a <_printf_float+0xbe>
 800f5e8:	f04f 0800 	mov.w	r8, #0
 800f5ec:	f104 091a 	add.w	r9, r4, #26
 800f5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	4543      	cmp	r3, r8
 800f5f6:	dc09      	bgt.n	800f60c <_printf_float+0x260>
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	079b      	lsls	r3, r3, #30
 800f5fc:	f100 8107 	bmi.w	800f80e <_printf_float+0x462>
 800f600:	68e0      	ldr	r0, [r4, #12]
 800f602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f604:	4298      	cmp	r0, r3
 800f606:	bfb8      	it	lt
 800f608:	4618      	movlt	r0, r3
 800f60a:	e730      	b.n	800f46e <_printf_float+0xc2>
 800f60c:	2301      	movs	r3, #1
 800f60e:	464a      	mov	r2, r9
 800f610:	4631      	mov	r1, r6
 800f612:	4628      	mov	r0, r5
 800f614:	47b8      	blx	r7
 800f616:	3001      	adds	r0, #1
 800f618:	f43f af27 	beq.w	800f46a <_printf_float+0xbe>
 800f61c:	f108 0801 	add.w	r8, r8, #1
 800f620:	e7e6      	b.n	800f5f0 <_printf_float+0x244>
 800f622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f624:	2b00      	cmp	r3, #0
 800f626:	dc39      	bgt.n	800f69c <_printf_float+0x2f0>
 800f628:	4a1b      	ldr	r2, [pc, #108]	; (800f698 <_printf_float+0x2ec>)
 800f62a:	2301      	movs	r3, #1
 800f62c:	4631      	mov	r1, r6
 800f62e:	4628      	mov	r0, r5
 800f630:	47b8      	blx	r7
 800f632:	3001      	adds	r0, #1
 800f634:	f43f af19 	beq.w	800f46a <_printf_float+0xbe>
 800f638:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f63c:	4313      	orrs	r3, r2
 800f63e:	d102      	bne.n	800f646 <_printf_float+0x29a>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	07d9      	lsls	r1, r3, #31
 800f644:	d5d8      	bpl.n	800f5f8 <_printf_float+0x24c>
 800f646:	ee18 3a10 	vmov	r3, s16
 800f64a:	4652      	mov	r2, sl
 800f64c:	4631      	mov	r1, r6
 800f64e:	4628      	mov	r0, r5
 800f650:	47b8      	blx	r7
 800f652:	3001      	adds	r0, #1
 800f654:	f43f af09 	beq.w	800f46a <_printf_float+0xbe>
 800f658:	f04f 0900 	mov.w	r9, #0
 800f65c:	f104 0a1a 	add.w	sl, r4, #26
 800f660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f662:	425b      	negs	r3, r3
 800f664:	454b      	cmp	r3, r9
 800f666:	dc01      	bgt.n	800f66c <_printf_float+0x2c0>
 800f668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f66a:	e792      	b.n	800f592 <_printf_float+0x1e6>
 800f66c:	2301      	movs	r3, #1
 800f66e:	4652      	mov	r2, sl
 800f670:	4631      	mov	r1, r6
 800f672:	4628      	mov	r0, r5
 800f674:	47b8      	blx	r7
 800f676:	3001      	adds	r0, #1
 800f678:	f43f aef7 	beq.w	800f46a <_printf_float+0xbe>
 800f67c:	f109 0901 	add.w	r9, r9, #1
 800f680:	e7ee      	b.n	800f660 <_printf_float+0x2b4>
 800f682:	bf00      	nop
 800f684:	7fefffff 	.word	0x7fefffff
 800f688:	0801596c 	.word	0x0801596c
 800f68c:	08015970 	.word	0x08015970
 800f690:	08015974 	.word	0x08015974
 800f694:	08015978 	.word	0x08015978
 800f698:	08015d08 	.word	0x08015d08
 800f69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f69e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	bfa8      	it	ge
 800f6a4:	461a      	movge	r2, r3
 800f6a6:	2a00      	cmp	r2, #0
 800f6a8:	4691      	mov	r9, r2
 800f6aa:	dc37      	bgt.n	800f71c <_printf_float+0x370>
 800f6ac:	f04f 0b00 	mov.w	fp, #0
 800f6b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6b4:	f104 021a 	add.w	r2, r4, #26
 800f6b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6ba:	9305      	str	r3, [sp, #20]
 800f6bc:	eba3 0309 	sub.w	r3, r3, r9
 800f6c0:	455b      	cmp	r3, fp
 800f6c2:	dc33      	bgt.n	800f72c <_printf_float+0x380>
 800f6c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	db3b      	blt.n	800f744 <_printf_float+0x398>
 800f6cc:	6823      	ldr	r3, [r4, #0]
 800f6ce:	07da      	lsls	r2, r3, #31
 800f6d0:	d438      	bmi.n	800f744 <_printf_float+0x398>
 800f6d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f6d6:	eba2 0903 	sub.w	r9, r2, r3
 800f6da:	9b05      	ldr	r3, [sp, #20]
 800f6dc:	1ad2      	subs	r2, r2, r3
 800f6de:	4591      	cmp	r9, r2
 800f6e0:	bfa8      	it	ge
 800f6e2:	4691      	movge	r9, r2
 800f6e4:	f1b9 0f00 	cmp.w	r9, #0
 800f6e8:	dc35      	bgt.n	800f756 <_printf_float+0x3aa>
 800f6ea:	f04f 0800 	mov.w	r8, #0
 800f6ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6f2:	f104 0a1a 	add.w	sl, r4, #26
 800f6f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6fa:	1a9b      	subs	r3, r3, r2
 800f6fc:	eba3 0309 	sub.w	r3, r3, r9
 800f700:	4543      	cmp	r3, r8
 800f702:	f77f af79 	ble.w	800f5f8 <_printf_float+0x24c>
 800f706:	2301      	movs	r3, #1
 800f708:	4652      	mov	r2, sl
 800f70a:	4631      	mov	r1, r6
 800f70c:	4628      	mov	r0, r5
 800f70e:	47b8      	blx	r7
 800f710:	3001      	adds	r0, #1
 800f712:	f43f aeaa 	beq.w	800f46a <_printf_float+0xbe>
 800f716:	f108 0801 	add.w	r8, r8, #1
 800f71a:	e7ec      	b.n	800f6f6 <_printf_float+0x34a>
 800f71c:	4613      	mov	r3, r2
 800f71e:	4631      	mov	r1, r6
 800f720:	4642      	mov	r2, r8
 800f722:	4628      	mov	r0, r5
 800f724:	47b8      	blx	r7
 800f726:	3001      	adds	r0, #1
 800f728:	d1c0      	bne.n	800f6ac <_printf_float+0x300>
 800f72a:	e69e      	b.n	800f46a <_printf_float+0xbe>
 800f72c:	2301      	movs	r3, #1
 800f72e:	4631      	mov	r1, r6
 800f730:	4628      	mov	r0, r5
 800f732:	9205      	str	r2, [sp, #20]
 800f734:	47b8      	blx	r7
 800f736:	3001      	adds	r0, #1
 800f738:	f43f ae97 	beq.w	800f46a <_printf_float+0xbe>
 800f73c:	9a05      	ldr	r2, [sp, #20]
 800f73e:	f10b 0b01 	add.w	fp, fp, #1
 800f742:	e7b9      	b.n	800f6b8 <_printf_float+0x30c>
 800f744:	ee18 3a10 	vmov	r3, s16
 800f748:	4652      	mov	r2, sl
 800f74a:	4631      	mov	r1, r6
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b8      	blx	r7
 800f750:	3001      	adds	r0, #1
 800f752:	d1be      	bne.n	800f6d2 <_printf_float+0x326>
 800f754:	e689      	b.n	800f46a <_printf_float+0xbe>
 800f756:	9a05      	ldr	r2, [sp, #20]
 800f758:	464b      	mov	r3, r9
 800f75a:	4442      	add	r2, r8
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	47b8      	blx	r7
 800f762:	3001      	adds	r0, #1
 800f764:	d1c1      	bne.n	800f6ea <_printf_float+0x33e>
 800f766:	e680      	b.n	800f46a <_printf_float+0xbe>
 800f768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f76a:	2a01      	cmp	r2, #1
 800f76c:	dc01      	bgt.n	800f772 <_printf_float+0x3c6>
 800f76e:	07db      	lsls	r3, r3, #31
 800f770:	d53a      	bpl.n	800f7e8 <_printf_float+0x43c>
 800f772:	2301      	movs	r3, #1
 800f774:	4642      	mov	r2, r8
 800f776:	4631      	mov	r1, r6
 800f778:	4628      	mov	r0, r5
 800f77a:	47b8      	blx	r7
 800f77c:	3001      	adds	r0, #1
 800f77e:	f43f ae74 	beq.w	800f46a <_printf_float+0xbe>
 800f782:	ee18 3a10 	vmov	r3, s16
 800f786:	4652      	mov	r2, sl
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	47b8      	blx	r7
 800f78e:	3001      	adds	r0, #1
 800f790:	f43f ae6b 	beq.w	800f46a <_printf_float+0xbe>
 800f794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f798:	2200      	movs	r2, #0
 800f79a:	2300      	movs	r3, #0
 800f79c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f7a0:	f7f1 f9ba 	bl	8000b18 <__aeabi_dcmpeq>
 800f7a4:	b9d8      	cbnz	r0, 800f7de <_printf_float+0x432>
 800f7a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f7aa:	f108 0201 	add.w	r2, r8, #1
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	47b8      	blx	r7
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d10e      	bne.n	800f7d6 <_printf_float+0x42a>
 800f7b8:	e657      	b.n	800f46a <_printf_float+0xbe>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4652      	mov	r2, sl
 800f7be:	4631      	mov	r1, r6
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	47b8      	blx	r7
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	f43f ae50 	beq.w	800f46a <_printf_float+0xbe>
 800f7ca:	f108 0801 	add.w	r8, r8, #1
 800f7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	4543      	cmp	r3, r8
 800f7d4:	dcf1      	bgt.n	800f7ba <_printf_float+0x40e>
 800f7d6:	464b      	mov	r3, r9
 800f7d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f7dc:	e6da      	b.n	800f594 <_printf_float+0x1e8>
 800f7de:	f04f 0800 	mov.w	r8, #0
 800f7e2:	f104 0a1a 	add.w	sl, r4, #26
 800f7e6:	e7f2      	b.n	800f7ce <_printf_float+0x422>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4642      	mov	r2, r8
 800f7ec:	e7df      	b.n	800f7ae <_printf_float+0x402>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	464a      	mov	r2, r9
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	47b8      	blx	r7
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	f43f ae36 	beq.w	800f46a <_printf_float+0xbe>
 800f7fe:	f108 0801 	add.w	r8, r8, #1
 800f802:	68e3      	ldr	r3, [r4, #12]
 800f804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f806:	1a5b      	subs	r3, r3, r1
 800f808:	4543      	cmp	r3, r8
 800f80a:	dcf0      	bgt.n	800f7ee <_printf_float+0x442>
 800f80c:	e6f8      	b.n	800f600 <_printf_float+0x254>
 800f80e:	f04f 0800 	mov.w	r8, #0
 800f812:	f104 0919 	add.w	r9, r4, #25
 800f816:	e7f4      	b.n	800f802 <_printf_float+0x456>

0800f818 <_printf_common>:
 800f818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f81c:	4616      	mov	r6, r2
 800f81e:	4699      	mov	r9, r3
 800f820:	688a      	ldr	r2, [r1, #8]
 800f822:	690b      	ldr	r3, [r1, #16]
 800f824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f828:	4293      	cmp	r3, r2
 800f82a:	bfb8      	it	lt
 800f82c:	4613      	movlt	r3, r2
 800f82e:	6033      	str	r3, [r6, #0]
 800f830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f834:	4607      	mov	r7, r0
 800f836:	460c      	mov	r4, r1
 800f838:	b10a      	cbz	r2, 800f83e <_printf_common+0x26>
 800f83a:	3301      	adds	r3, #1
 800f83c:	6033      	str	r3, [r6, #0]
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	0699      	lsls	r1, r3, #26
 800f842:	bf42      	ittt	mi
 800f844:	6833      	ldrmi	r3, [r6, #0]
 800f846:	3302      	addmi	r3, #2
 800f848:	6033      	strmi	r3, [r6, #0]
 800f84a:	6825      	ldr	r5, [r4, #0]
 800f84c:	f015 0506 	ands.w	r5, r5, #6
 800f850:	d106      	bne.n	800f860 <_printf_common+0x48>
 800f852:	f104 0a19 	add.w	sl, r4, #25
 800f856:	68e3      	ldr	r3, [r4, #12]
 800f858:	6832      	ldr	r2, [r6, #0]
 800f85a:	1a9b      	subs	r3, r3, r2
 800f85c:	42ab      	cmp	r3, r5
 800f85e:	dc26      	bgt.n	800f8ae <_printf_common+0x96>
 800f860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f864:	1e13      	subs	r3, r2, #0
 800f866:	6822      	ldr	r2, [r4, #0]
 800f868:	bf18      	it	ne
 800f86a:	2301      	movne	r3, #1
 800f86c:	0692      	lsls	r2, r2, #26
 800f86e:	d42b      	bmi.n	800f8c8 <_printf_common+0xb0>
 800f870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f874:	4649      	mov	r1, r9
 800f876:	4638      	mov	r0, r7
 800f878:	47c0      	blx	r8
 800f87a:	3001      	adds	r0, #1
 800f87c:	d01e      	beq.n	800f8bc <_printf_common+0xa4>
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	6922      	ldr	r2, [r4, #16]
 800f882:	f003 0306 	and.w	r3, r3, #6
 800f886:	2b04      	cmp	r3, #4
 800f888:	bf02      	ittt	eq
 800f88a:	68e5      	ldreq	r5, [r4, #12]
 800f88c:	6833      	ldreq	r3, [r6, #0]
 800f88e:	1aed      	subeq	r5, r5, r3
 800f890:	68a3      	ldr	r3, [r4, #8]
 800f892:	bf0c      	ite	eq
 800f894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f898:	2500      	movne	r5, #0
 800f89a:	4293      	cmp	r3, r2
 800f89c:	bfc4      	itt	gt
 800f89e:	1a9b      	subgt	r3, r3, r2
 800f8a0:	18ed      	addgt	r5, r5, r3
 800f8a2:	2600      	movs	r6, #0
 800f8a4:	341a      	adds	r4, #26
 800f8a6:	42b5      	cmp	r5, r6
 800f8a8:	d11a      	bne.n	800f8e0 <_printf_common+0xc8>
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	e008      	b.n	800f8c0 <_printf_common+0xa8>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	47c0      	blx	r8
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	d103      	bne.n	800f8c4 <_printf_common+0xac>
 800f8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8c4:	3501      	adds	r5, #1
 800f8c6:	e7c6      	b.n	800f856 <_printf_common+0x3e>
 800f8c8:	18e1      	adds	r1, r4, r3
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	2030      	movs	r0, #48	; 0x30
 800f8ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8d2:	4422      	add	r2, r4
 800f8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8dc:	3302      	adds	r3, #2
 800f8de:	e7c7      	b.n	800f870 <_printf_common+0x58>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	47c0      	blx	r8
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d0e6      	beq.n	800f8bc <_printf_common+0xa4>
 800f8ee:	3601      	adds	r6, #1
 800f8f0:	e7d9      	b.n	800f8a6 <_printf_common+0x8e>
	...

0800f8f4 <_printf_i>:
 800f8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f8:	7e0f      	ldrb	r7, [r1, #24]
 800f8fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f8fc:	2f78      	cmp	r7, #120	; 0x78
 800f8fe:	4691      	mov	r9, r2
 800f900:	4680      	mov	r8, r0
 800f902:	460c      	mov	r4, r1
 800f904:	469a      	mov	sl, r3
 800f906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f90a:	d807      	bhi.n	800f91c <_printf_i+0x28>
 800f90c:	2f62      	cmp	r7, #98	; 0x62
 800f90e:	d80a      	bhi.n	800f926 <_printf_i+0x32>
 800f910:	2f00      	cmp	r7, #0
 800f912:	f000 80d4 	beq.w	800fabe <_printf_i+0x1ca>
 800f916:	2f58      	cmp	r7, #88	; 0x58
 800f918:	f000 80c0 	beq.w	800fa9c <_printf_i+0x1a8>
 800f91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f924:	e03a      	b.n	800f99c <_printf_i+0xa8>
 800f926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f92a:	2b15      	cmp	r3, #21
 800f92c:	d8f6      	bhi.n	800f91c <_printf_i+0x28>
 800f92e:	a101      	add	r1, pc, #4	; (adr r1, 800f934 <_printf_i+0x40>)
 800f930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f934:	0800f98d 	.word	0x0800f98d
 800f938:	0800f9a1 	.word	0x0800f9a1
 800f93c:	0800f91d 	.word	0x0800f91d
 800f940:	0800f91d 	.word	0x0800f91d
 800f944:	0800f91d 	.word	0x0800f91d
 800f948:	0800f91d 	.word	0x0800f91d
 800f94c:	0800f9a1 	.word	0x0800f9a1
 800f950:	0800f91d 	.word	0x0800f91d
 800f954:	0800f91d 	.word	0x0800f91d
 800f958:	0800f91d 	.word	0x0800f91d
 800f95c:	0800f91d 	.word	0x0800f91d
 800f960:	0800faa5 	.word	0x0800faa5
 800f964:	0800f9cd 	.word	0x0800f9cd
 800f968:	0800fa5f 	.word	0x0800fa5f
 800f96c:	0800f91d 	.word	0x0800f91d
 800f970:	0800f91d 	.word	0x0800f91d
 800f974:	0800fac7 	.word	0x0800fac7
 800f978:	0800f91d 	.word	0x0800f91d
 800f97c:	0800f9cd 	.word	0x0800f9cd
 800f980:	0800f91d 	.word	0x0800f91d
 800f984:	0800f91d 	.word	0x0800f91d
 800f988:	0800fa67 	.word	0x0800fa67
 800f98c:	682b      	ldr	r3, [r5, #0]
 800f98e:	1d1a      	adds	r2, r3, #4
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	602a      	str	r2, [r5, #0]
 800f994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f99c:	2301      	movs	r3, #1
 800f99e:	e09f      	b.n	800fae0 <_printf_i+0x1ec>
 800f9a0:	6820      	ldr	r0, [r4, #0]
 800f9a2:	682b      	ldr	r3, [r5, #0]
 800f9a4:	0607      	lsls	r7, r0, #24
 800f9a6:	f103 0104 	add.w	r1, r3, #4
 800f9aa:	6029      	str	r1, [r5, #0]
 800f9ac:	d501      	bpl.n	800f9b2 <_printf_i+0xbe>
 800f9ae:	681e      	ldr	r6, [r3, #0]
 800f9b0:	e003      	b.n	800f9ba <_printf_i+0xc6>
 800f9b2:	0646      	lsls	r6, r0, #25
 800f9b4:	d5fb      	bpl.n	800f9ae <_printf_i+0xba>
 800f9b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f9ba:	2e00      	cmp	r6, #0
 800f9bc:	da03      	bge.n	800f9c6 <_printf_i+0xd2>
 800f9be:	232d      	movs	r3, #45	; 0x2d
 800f9c0:	4276      	negs	r6, r6
 800f9c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9c6:	485a      	ldr	r0, [pc, #360]	; (800fb30 <_printf_i+0x23c>)
 800f9c8:	230a      	movs	r3, #10
 800f9ca:	e012      	b.n	800f9f2 <_printf_i+0xfe>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	6820      	ldr	r0, [r4, #0]
 800f9d0:	1d19      	adds	r1, r3, #4
 800f9d2:	6029      	str	r1, [r5, #0]
 800f9d4:	0605      	lsls	r5, r0, #24
 800f9d6:	d501      	bpl.n	800f9dc <_printf_i+0xe8>
 800f9d8:	681e      	ldr	r6, [r3, #0]
 800f9da:	e002      	b.n	800f9e2 <_printf_i+0xee>
 800f9dc:	0641      	lsls	r1, r0, #25
 800f9de:	d5fb      	bpl.n	800f9d8 <_printf_i+0xe4>
 800f9e0:	881e      	ldrh	r6, [r3, #0]
 800f9e2:	4853      	ldr	r0, [pc, #332]	; (800fb30 <_printf_i+0x23c>)
 800f9e4:	2f6f      	cmp	r7, #111	; 0x6f
 800f9e6:	bf0c      	ite	eq
 800f9e8:	2308      	moveq	r3, #8
 800f9ea:	230a      	movne	r3, #10
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9f2:	6865      	ldr	r5, [r4, #4]
 800f9f4:	60a5      	str	r5, [r4, #8]
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	bfa2      	ittt	ge
 800f9fa:	6821      	ldrge	r1, [r4, #0]
 800f9fc:	f021 0104 	bicge.w	r1, r1, #4
 800fa00:	6021      	strge	r1, [r4, #0]
 800fa02:	b90e      	cbnz	r6, 800fa08 <_printf_i+0x114>
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	d04b      	beq.n	800faa0 <_printf_i+0x1ac>
 800fa08:	4615      	mov	r5, r2
 800fa0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa0e:	fb03 6711 	mls	r7, r3, r1, r6
 800fa12:	5dc7      	ldrb	r7, [r0, r7]
 800fa14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa18:	4637      	mov	r7, r6
 800fa1a:	42bb      	cmp	r3, r7
 800fa1c:	460e      	mov	r6, r1
 800fa1e:	d9f4      	bls.n	800fa0a <_printf_i+0x116>
 800fa20:	2b08      	cmp	r3, #8
 800fa22:	d10b      	bne.n	800fa3c <_printf_i+0x148>
 800fa24:	6823      	ldr	r3, [r4, #0]
 800fa26:	07de      	lsls	r6, r3, #31
 800fa28:	d508      	bpl.n	800fa3c <_printf_i+0x148>
 800fa2a:	6923      	ldr	r3, [r4, #16]
 800fa2c:	6861      	ldr	r1, [r4, #4]
 800fa2e:	4299      	cmp	r1, r3
 800fa30:	bfde      	ittt	le
 800fa32:	2330      	movle	r3, #48	; 0x30
 800fa34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa3c:	1b52      	subs	r2, r2, r5
 800fa3e:	6122      	str	r2, [r4, #16]
 800fa40:	f8cd a000 	str.w	sl, [sp]
 800fa44:	464b      	mov	r3, r9
 800fa46:	aa03      	add	r2, sp, #12
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	f7ff fee4 	bl	800f818 <_printf_common>
 800fa50:	3001      	adds	r0, #1
 800fa52:	d14a      	bne.n	800faea <_printf_i+0x1f6>
 800fa54:	f04f 30ff 	mov.w	r0, #4294967295
 800fa58:	b004      	add	sp, #16
 800fa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	f043 0320 	orr.w	r3, r3, #32
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	4833      	ldr	r0, [pc, #204]	; (800fb34 <_printf_i+0x240>)
 800fa68:	2778      	movs	r7, #120	; 0x78
 800fa6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa6e:	6823      	ldr	r3, [r4, #0]
 800fa70:	6829      	ldr	r1, [r5, #0]
 800fa72:	061f      	lsls	r7, r3, #24
 800fa74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fa78:	d402      	bmi.n	800fa80 <_printf_i+0x18c>
 800fa7a:	065f      	lsls	r7, r3, #25
 800fa7c:	bf48      	it	mi
 800fa7e:	b2b6      	uxthmi	r6, r6
 800fa80:	07df      	lsls	r7, r3, #31
 800fa82:	bf48      	it	mi
 800fa84:	f043 0320 	orrmi.w	r3, r3, #32
 800fa88:	6029      	str	r1, [r5, #0]
 800fa8a:	bf48      	it	mi
 800fa8c:	6023      	strmi	r3, [r4, #0]
 800fa8e:	b91e      	cbnz	r6, 800fa98 <_printf_i+0x1a4>
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	f023 0320 	bic.w	r3, r3, #32
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	2310      	movs	r3, #16
 800fa9a:	e7a7      	b.n	800f9ec <_printf_i+0xf8>
 800fa9c:	4824      	ldr	r0, [pc, #144]	; (800fb30 <_printf_i+0x23c>)
 800fa9e:	e7e4      	b.n	800fa6a <_printf_i+0x176>
 800faa0:	4615      	mov	r5, r2
 800faa2:	e7bd      	b.n	800fa20 <_printf_i+0x12c>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	6826      	ldr	r6, [r4, #0]
 800faa8:	6961      	ldr	r1, [r4, #20]
 800faaa:	1d18      	adds	r0, r3, #4
 800faac:	6028      	str	r0, [r5, #0]
 800faae:	0635      	lsls	r5, r6, #24
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	d501      	bpl.n	800fab8 <_printf_i+0x1c4>
 800fab4:	6019      	str	r1, [r3, #0]
 800fab6:	e002      	b.n	800fabe <_printf_i+0x1ca>
 800fab8:	0670      	lsls	r0, r6, #25
 800faba:	d5fb      	bpl.n	800fab4 <_printf_i+0x1c0>
 800fabc:	8019      	strh	r1, [r3, #0]
 800fabe:	2300      	movs	r3, #0
 800fac0:	6123      	str	r3, [r4, #16]
 800fac2:	4615      	mov	r5, r2
 800fac4:	e7bc      	b.n	800fa40 <_printf_i+0x14c>
 800fac6:	682b      	ldr	r3, [r5, #0]
 800fac8:	1d1a      	adds	r2, r3, #4
 800faca:	602a      	str	r2, [r5, #0]
 800facc:	681d      	ldr	r5, [r3, #0]
 800face:	6862      	ldr	r2, [r4, #4]
 800fad0:	2100      	movs	r1, #0
 800fad2:	4628      	mov	r0, r5
 800fad4:	f7f0 fba4 	bl	8000220 <memchr>
 800fad8:	b108      	cbz	r0, 800fade <_printf_i+0x1ea>
 800fada:	1b40      	subs	r0, r0, r5
 800fadc:	6060      	str	r0, [r4, #4]
 800fade:	6863      	ldr	r3, [r4, #4]
 800fae0:	6123      	str	r3, [r4, #16]
 800fae2:	2300      	movs	r3, #0
 800fae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fae8:	e7aa      	b.n	800fa40 <_printf_i+0x14c>
 800faea:	6923      	ldr	r3, [r4, #16]
 800faec:	462a      	mov	r2, r5
 800faee:	4649      	mov	r1, r9
 800faf0:	4640      	mov	r0, r8
 800faf2:	47d0      	blx	sl
 800faf4:	3001      	adds	r0, #1
 800faf6:	d0ad      	beq.n	800fa54 <_printf_i+0x160>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	079b      	lsls	r3, r3, #30
 800fafc:	d413      	bmi.n	800fb26 <_printf_i+0x232>
 800fafe:	68e0      	ldr	r0, [r4, #12]
 800fb00:	9b03      	ldr	r3, [sp, #12]
 800fb02:	4298      	cmp	r0, r3
 800fb04:	bfb8      	it	lt
 800fb06:	4618      	movlt	r0, r3
 800fb08:	e7a6      	b.n	800fa58 <_printf_i+0x164>
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	4649      	mov	r1, r9
 800fb10:	4640      	mov	r0, r8
 800fb12:	47d0      	blx	sl
 800fb14:	3001      	adds	r0, #1
 800fb16:	d09d      	beq.n	800fa54 <_printf_i+0x160>
 800fb18:	3501      	adds	r5, #1
 800fb1a:	68e3      	ldr	r3, [r4, #12]
 800fb1c:	9903      	ldr	r1, [sp, #12]
 800fb1e:	1a5b      	subs	r3, r3, r1
 800fb20:	42ab      	cmp	r3, r5
 800fb22:	dcf2      	bgt.n	800fb0a <_printf_i+0x216>
 800fb24:	e7eb      	b.n	800fafe <_printf_i+0x20a>
 800fb26:	2500      	movs	r5, #0
 800fb28:	f104 0619 	add.w	r6, r4, #25
 800fb2c:	e7f5      	b.n	800fb1a <_printf_i+0x226>
 800fb2e:	bf00      	nop
 800fb30:	0801597c 	.word	0x0801597c
 800fb34:	0801598d 	.word	0x0801598d

0800fb38 <_scanf_float>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	b087      	sub	sp, #28
 800fb3e:	4617      	mov	r7, r2
 800fb40:	9303      	str	r3, [sp, #12]
 800fb42:	688b      	ldr	r3, [r1, #8]
 800fb44:	1e5a      	subs	r2, r3, #1
 800fb46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fb4a:	bf83      	ittte	hi
 800fb4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fb50:	195b      	addhi	r3, r3, r5
 800fb52:	9302      	strhi	r3, [sp, #8]
 800fb54:	2300      	movls	r3, #0
 800fb56:	bf86      	itte	hi
 800fb58:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fb5c:	608b      	strhi	r3, [r1, #8]
 800fb5e:	9302      	strls	r3, [sp, #8]
 800fb60:	680b      	ldr	r3, [r1, #0]
 800fb62:	468b      	mov	fp, r1
 800fb64:	2500      	movs	r5, #0
 800fb66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fb6a:	f84b 3b1c 	str.w	r3, [fp], #28
 800fb6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb72:	4680      	mov	r8, r0
 800fb74:	460c      	mov	r4, r1
 800fb76:	465e      	mov	r6, fp
 800fb78:	46aa      	mov	sl, r5
 800fb7a:	46a9      	mov	r9, r5
 800fb7c:	9501      	str	r5, [sp, #4]
 800fb7e:	68a2      	ldr	r2, [r4, #8]
 800fb80:	b152      	cbz	r2, 800fb98 <_scanf_float+0x60>
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	2b4e      	cmp	r3, #78	; 0x4e
 800fb88:	d864      	bhi.n	800fc54 <_scanf_float+0x11c>
 800fb8a:	2b40      	cmp	r3, #64	; 0x40
 800fb8c:	d83c      	bhi.n	800fc08 <_scanf_float+0xd0>
 800fb8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fb92:	b2c8      	uxtb	r0, r1
 800fb94:	280e      	cmp	r0, #14
 800fb96:	d93a      	bls.n	800fc0e <_scanf_float+0xd6>
 800fb98:	f1b9 0f00 	cmp.w	r9, #0
 800fb9c:	d003      	beq.n	800fba6 <_scanf_float+0x6e>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbaa:	f1ba 0f01 	cmp.w	sl, #1
 800fbae:	f200 8113 	bhi.w	800fdd8 <_scanf_float+0x2a0>
 800fbb2:	455e      	cmp	r6, fp
 800fbb4:	f200 8105 	bhi.w	800fdc2 <_scanf_float+0x28a>
 800fbb8:	2501      	movs	r5, #1
 800fbba:	4628      	mov	r0, r5
 800fbbc:	b007      	add	sp, #28
 800fbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fbc6:	2a0d      	cmp	r2, #13
 800fbc8:	d8e6      	bhi.n	800fb98 <_scanf_float+0x60>
 800fbca:	a101      	add	r1, pc, #4	; (adr r1, 800fbd0 <_scanf_float+0x98>)
 800fbcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbd0:	0800fd0f 	.word	0x0800fd0f
 800fbd4:	0800fb99 	.word	0x0800fb99
 800fbd8:	0800fb99 	.word	0x0800fb99
 800fbdc:	0800fb99 	.word	0x0800fb99
 800fbe0:	0800fd6f 	.word	0x0800fd6f
 800fbe4:	0800fd47 	.word	0x0800fd47
 800fbe8:	0800fb99 	.word	0x0800fb99
 800fbec:	0800fb99 	.word	0x0800fb99
 800fbf0:	0800fd1d 	.word	0x0800fd1d
 800fbf4:	0800fb99 	.word	0x0800fb99
 800fbf8:	0800fb99 	.word	0x0800fb99
 800fbfc:	0800fb99 	.word	0x0800fb99
 800fc00:	0800fb99 	.word	0x0800fb99
 800fc04:	0800fcd5 	.word	0x0800fcd5
 800fc08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fc0c:	e7db      	b.n	800fbc6 <_scanf_float+0x8e>
 800fc0e:	290e      	cmp	r1, #14
 800fc10:	d8c2      	bhi.n	800fb98 <_scanf_float+0x60>
 800fc12:	a001      	add	r0, pc, #4	; (adr r0, 800fc18 <_scanf_float+0xe0>)
 800fc14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fc18:	0800fcc7 	.word	0x0800fcc7
 800fc1c:	0800fb99 	.word	0x0800fb99
 800fc20:	0800fcc7 	.word	0x0800fcc7
 800fc24:	0800fd5b 	.word	0x0800fd5b
 800fc28:	0800fb99 	.word	0x0800fb99
 800fc2c:	0800fc75 	.word	0x0800fc75
 800fc30:	0800fcb1 	.word	0x0800fcb1
 800fc34:	0800fcb1 	.word	0x0800fcb1
 800fc38:	0800fcb1 	.word	0x0800fcb1
 800fc3c:	0800fcb1 	.word	0x0800fcb1
 800fc40:	0800fcb1 	.word	0x0800fcb1
 800fc44:	0800fcb1 	.word	0x0800fcb1
 800fc48:	0800fcb1 	.word	0x0800fcb1
 800fc4c:	0800fcb1 	.word	0x0800fcb1
 800fc50:	0800fcb1 	.word	0x0800fcb1
 800fc54:	2b6e      	cmp	r3, #110	; 0x6e
 800fc56:	d809      	bhi.n	800fc6c <_scanf_float+0x134>
 800fc58:	2b60      	cmp	r3, #96	; 0x60
 800fc5a:	d8b2      	bhi.n	800fbc2 <_scanf_float+0x8a>
 800fc5c:	2b54      	cmp	r3, #84	; 0x54
 800fc5e:	d077      	beq.n	800fd50 <_scanf_float+0x218>
 800fc60:	2b59      	cmp	r3, #89	; 0x59
 800fc62:	d199      	bne.n	800fb98 <_scanf_float+0x60>
 800fc64:	2d07      	cmp	r5, #7
 800fc66:	d197      	bne.n	800fb98 <_scanf_float+0x60>
 800fc68:	2508      	movs	r5, #8
 800fc6a:	e029      	b.n	800fcc0 <_scanf_float+0x188>
 800fc6c:	2b74      	cmp	r3, #116	; 0x74
 800fc6e:	d06f      	beq.n	800fd50 <_scanf_float+0x218>
 800fc70:	2b79      	cmp	r3, #121	; 0x79
 800fc72:	e7f6      	b.n	800fc62 <_scanf_float+0x12a>
 800fc74:	6821      	ldr	r1, [r4, #0]
 800fc76:	05c8      	lsls	r0, r1, #23
 800fc78:	d51a      	bpl.n	800fcb0 <_scanf_float+0x178>
 800fc7a:	9b02      	ldr	r3, [sp, #8]
 800fc7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fc80:	6021      	str	r1, [r4, #0]
 800fc82:	f109 0901 	add.w	r9, r9, #1
 800fc86:	b11b      	cbz	r3, 800fc90 <_scanf_float+0x158>
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	3201      	adds	r2, #1
 800fc8c:	9302      	str	r3, [sp, #8]
 800fc8e:	60a2      	str	r2, [r4, #8]
 800fc90:	68a3      	ldr	r3, [r4, #8]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	60a3      	str	r3, [r4, #8]
 800fc96:	6923      	ldr	r3, [r4, #16]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	6123      	str	r3, [r4, #16]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	607b      	str	r3, [r7, #4]
 800fca4:	f340 8084 	ble.w	800fdb0 <_scanf_float+0x278>
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	603b      	str	r3, [r7, #0]
 800fcae:	e766      	b.n	800fb7e <_scanf_float+0x46>
 800fcb0:	eb1a 0f05 	cmn.w	sl, r5
 800fcb4:	f47f af70 	bne.w	800fb98 <_scanf_float+0x60>
 800fcb8:	6822      	ldr	r2, [r4, #0]
 800fcba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fcbe:	6022      	str	r2, [r4, #0]
 800fcc0:	f806 3b01 	strb.w	r3, [r6], #1
 800fcc4:	e7e4      	b.n	800fc90 <_scanf_float+0x158>
 800fcc6:	6822      	ldr	r2, [r4, #0]
 800fcc8:	0610      	lsls	r0, r2, #24
 800fcca:	f57f af65 	bpl.w	800fb98 <_scanf_float+0x60>
 800fcce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcd2:	e7f4      	b.n	800fcbe <_scanf_float+0x186>
 800fcd4:	f1ba 0f00 	cmp.w	sl, #0
 800fcd8:	d10e      	bne.n	800fcf8 <_scanf_float+0x1c0>
 800fcda:	f1b9 0f00 	cmp.w	r9, #0
 800fcde:	d10e      	bne.n	800fcfe <_scanf_float+0x1c6>
 800fce0:	6822      	ldr	r2, [r4, #0]
 800fce2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fce6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fcea:	d108      	bne.n	800fcfe <_scanf_float+0x1c6>
 800fcec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fcf0:	6022      	str	r2, [r4, #0]
 800fcf2:	f04f 0a01 	mov.w	sl, #1
 800fcf6:	e7e3      	b.n	800fcc0 <_scanf_float+0x188>
 800fcf8:	f1ba 0f02 	cmp.w	sl, #2
 800fcfc:	d055      	beq.n	800fdaa <_scanf_float+0x272>
 800fcfe:	2d01      	cmp	r5, #1
 800fd00:	d002      	beq.n	800fd08 <_scanf_float+0x1d0>
 800fd02:	2d04      	cmp	r5, #4
 800fd04:	f47f af48 	bne.w	800fb98 <_scanf_float+0x60>
 800fd08:	3501      	adds	r5, #1
 800fd0a:	b2ed      	uxtb	r5, r5
 800fd0c:	e7d8      	b.n	800fcc0 <_scanf_float+0x188>
 800fd0e:	f1ba 0f01 	cmp.w	sl, #1
 800fd12:	f47f af41 	bne.w	800fb98 <_scanf_float+0x60>
 800fd16:	f04f 0a02 	mov.w	sl, #2
 800fd1a:	e7d1      	b.n	800fcc0 <_scanf_float+0x188>
 800fd1c:	b97d      	cbnz	r5, 800fd3e <_scanf_float+0x206>
 800fd1e:	f1b9 0f00 	cmp.w	r9, #0
 800fd22:	f47f af3c 	bne.w	800fb9e <_scanf_float+0x66>
 800fd26:	6822      	ldr	r2, [r4, #0]
 800fd28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fd2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fd30:	f47f af39 	bne.w	800fba6 <_scanf_float+0x6e>
 800fd34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd38:	6022      	str	r2, [r4, #0]
 800fd3a:	2501      	movs	r5, #1
 800fd3c:	e7c0      	b.n	800fcc0 <_scanf_float+0x188>
 800fd3e:	2d03      	cmp	r5, #3
 800fd40:	d0e2      	beq.n	800fd08 <_scanf_float+0x1d0>
 800fd42:	2d05      	cmp	r5, #5
 800fd44:	e7de      	b.n	800fd04 <_scanf_float+0x1cc>
 800fd46:	2d02      	cmp	r5, #2
 800fd48:	f47f af26 	bne.w	800fb98 <_scanf_float+0x60>
 800fd4c:	2503      	movs	r5, #3
 800fd4e:	e7b7      	b.n	800fcc0 <_scanf_float+0x188>
 800fd50:	2d06      	cmp	r5, #6
 800fd52:	f47f af21 	bne.w	800fb98 <_scanf_float+0x60>
 800fd56:	2507      	movs	r5, #7
 800fd58:	e7b2      	b.n	800fcc0 <_scanf_float+0x188>
 800fd5a:	6822      	ldr	r2, [r4, #0]
 800fd5c:	0591      	lsls	r1, r2, #22
 800fd5e:	f57f af1b 	bpl.w	800fb98 <_scanf_float+0x60>
 800fd62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fd66:	6022      	str	r2, [r4, #0]
 800fd68:	f8cd 9004 	str.w	r9, [sp, #4]
 800fd6c:	e7a8      	b.n	800fcc0 <_scanf_float+0x188>
 800fd6e:	6822      	ldr	r2, [r4, #0]
 800fd70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fd74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fd78:	d006      	beq.n	800fd88 <_scanf_float+0x250>
 800fd7a:	0550      	lsls	r0, r2, #21
 800fd7c:	f57f af0c 	bpl.w	800fb98 <_scanf_float+0x60>
 800fd80:	f1b9 0f00 	cmp.w	r9, #0
 800fd84:	f43f af0f 	beq.w	800fba6 <_scanf_float+0x6e>
 800fd88:	0591      	lsls	r1, r2, #22
 800fd8a:	bf58      	it	pl
 800fd8c:	9901      	ldrpl	r1, [sp, #4]
 800fd8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd92:	bf58      	it	pl
 800fd94:	eba9 0101 	subpl.w	r1, r9, r1
 800fd98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fd9c:	bf58      	it	pl
 800fd9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fda2:	6022      	str	r2, [r4, #0]
 800fda4:	f04f 0900 	mov.w	r9, #0
 800fda8:	e78a      	b.n	800fcc0 <_scanf_float+0x188>
 800fdaa:	f04f 0a03 	mov.w	sl, #3
 800fdae:	e787      	b.n	800fcc0 <_scanf_float+0x188>
 800fdb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	4798      	blx	r3
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	f43f aedf 	beq.w	800fb7e <_scanf_float+0x46>
 800fdc0:	e6ea      	b.n	800fb98 <_scanf_float+0x60>
 800fdc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdca:	463a      	mov	r2, r7
 800fdcc:	4640      	mov	r0, r8
 800fdce:	4798      	blx	r3
 800fdd0:	6923      	ldr	r3, [r4, #16]
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	6123      	str	r3, [r4, #16]
 800fdd6:	e6ec      	b.n	800fbb2 <_scanf_float+0x7a>
 800fdd8:	1e6b      	subs	r3, r5, #1
 800fdda:	2b06      	cmp	r3, #6
 800fddc:	d825      	bhi.n	800fe2a <_scanf_float+0x2f2>
 800fdde:	2d02      	cmp	r5, #2
 800fde0:	d836      	bhi.n	800fe50 <_scanf_float+0x318>
 800fde2:	455e      	cmp	r6, fp
 800fde4:	f67f aee8 	bls.w	800fbb8 <_scanf_float+0x80>
 800fde8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdf0:	463a      	mov	r2, r7
 800fdf2:	4640      	mov	r0, r8
 800fdf4:	4798      	blx	r3
 800fdf6:	6923      	ldr	r3, [r4, #16]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	6123      	str	r3, [r4, #16]
 800fdfc:	e7f1      	b.n	800fde2 <_scanf_float+0x2aa>
 800fdfe:	9802      	ldr	r0, [sp, #8]
 800fe00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fe08:	9002      	str	r0, [sp, #8]
 800fe0a:	463a      	mov	r2, r7
 800fe0c:	4640      	mov	r0, r8
 800fe0e:	4798      	blx	r3
 800fe10:	6923      	ldr	r3, [r4, #16]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	6123      	str	r3, [r4, #16]
 800fe16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe1a:	fa5f fa8a 	uxtb.w	sl, sl
 800fe1e:	f1ba 0f02 	cmp.w	sl, #2
 800fe22:	d1ec      	bne.n	800fdfe <_scanf_float+0x2c6>
 800fe24:	3d03      	subs	r5, #3
 800fe26:	b2ed      	uxtb	r5, r5
 800fe28:	1b76      	subs	r6, r6, r5
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	05da      	lsls	r2, r3, #23
 800fe2e:	d52f      	bpl.n	800fe90 <_scanf_float+0x358>
 800fe30:	055b      	lsls	r3, r3, #21
 800fe32:	d510      	bpl.n	800fe56 <_scanf_float+0x31e>
 800fe34:	455e      	cmp	r6, fp
 800fe36:	f67f aebf 	bls.w	800fbb8 <_scanf_float+0x80>
 800fe3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe42:	463a      	mov	r2, r7
 800fe44:	4640      	mov	r0, r8
 800fe46:	4798      	blx	r3
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	6123      	str	r3, [r4, #16]
 800fe4e:	e7f1      	b.n	800fe34 <_scanf_float+0x2fc>
 800fe50:	46aa      	mov	sl, r5
 800fe52:	9602      	str	r6, [sp, #8]
 800fe54:	e7df      	b.n	800fe16 <_scanf_float+0x2de>
 800fe56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	2965      	cmp	r1, #101	; 0x65
 800fe5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe62:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe66:	6123      	str	r3, [r4, #16]
 800fe68:	d00c      	beq.n	800fe84 <_scanf_float+0x34c>
 800fe6a:	2945      	cmp	r1, #69	; 0x45
 800fe6c:	d00a      	beq.n	800fe84 <_scanf_float+0x34c>
 800fe6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe72:	463a      	mov	r2, r7
 800fe74:	4640      	mov	r0, r8
 800fe76:	4798      	blx	r3
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	1eb5      	subs	r5, r6, #2
 800fe82:	6123      	str	r3, [r4, #16]
 800fe84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe88:	463a      	mov	r2, r7
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	4798      	blx	r3
 800fe8e:	462e      	mov	r6, r5
 800fe90:	6825      	ldr	r5, [r4, #0]
 800fe92:	f015 0510 	ands.w	r5, r5, #16
 800fe96:	d158      	bne.n	800ff4a <_scanf_float+0x412>
 800fe98:	7035      	strb	r5, [r6, #0]
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fea4:	d11c      	bne.n	800fee0 <_scanf_float+0x3a8>
 800fea6:	9b01      	ldr	r3, [sp, #4]
 800fea8:	454b      	cmp	r3, r9
 800feaa:	eba3 0209 	sub.w	r2, r3, r9
 800feae:	d124      	bne.n	800fefa <_scanf_float+0x3c2>
 800feb0:	2200      	movs	r2, #0
 800feb2:	4659      	mov	r1, fp
 800feb4:	4640      	mov	r0, r8
 800feb6:	f002 fcd3 	bl	8012860 <_strtod_r>
 800feba:	9b03      	ldr	r3, [sp, #12]
 800febc:	6821      	ldr	r1, [r4, #0]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f011 0f02 	tst.w	r1, #2
 800fec4:	ec57 6b10 	vmov	r6, r7, d0
 800fec8:	f103 0204 	add.w	r2, r3, #4
 800fecc:	d020      	beq.n	800ff10 <_scanf_float+0x3d8>
 800fece:	9903      	ldr	r1, [sp, #12]
 800fed0:	600a      	str	r2, [r1, #0]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	e9c3 6700 	strd	r6, r7, [r3]
 800fed8:	68e3      	ldr	r3, [r4, #12]
 800feda:	3301      	adds	r3, #1
 800fedc:	60e3      	str	r3, [r4, #12]
 800fede:	e66c      	b.n	800fbba <_scanf_float+0x82>
 800fee0:	9b04      	ldr	r3, [sp, #16]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d0e4      	beq.n	800feb0 <_scanf_float+0x378>
 800fee6:	9905      	ldr	r1, [sp, #20]
 800fee8:	230a      	movs	r3, #10
 800feea:	462a      	mov	r2, r5
 800feec:	3101      	adds	r1, #1
 800feee:	4640      	mov	r0, r8
 800fef0:	f002 fd3e 	bl	8012970 <_strtol_r>
 800fef4:	9b04      	ldr	r3, [sp, #16]
 800fef6:	9e05      	ldr	r6, [sp, #20]
 800fef8:	1ac2      	subs	r2, r0, r3
 800fefa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fefe:	429e      	cmp	r6, r3
 800ff00:	bf28      	it	cs
 800ff02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ff06:	4912      	ldr	r1, [pc, #72]	; (800ff50 <_scanf_float+0x418>)
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f000 f8e7 	bl	80100dc <siprintf>
 800ff0e:	e7cf      	b.n	800feb0 <_scanf_float+0x378>
 800ff10:	f011 0f04 	tst.w	r1, #4
 800ff14:	9903      	ldr	r1, [sp, #12]
 800ff16:	600a      	str	r2, [r1, #0]
 800ff18:	d1db      	bne.n	800fed2 <_scanf_float+0x39a>
 800ff1a:	f8d3 8000 	ldr.w	r8, [r3]
 800ff1e:	ee10 2a10 	vmov	r2, s0
 800ff22:	ee10 0a10 	vmov	r0, s0
 800ff26:	463b      	mov	r3, r7
 800ff28:	4639      	mov	r1, r7
 800ff2a:	f7f0 fe27 	bl	8000b7c <__aeabi_dcmpun>
 800ff2e:	b128      	cbz	r0, 800ff3c <_scanf_float+0x404>
 800ff30:	4808      	ldr	r0, [pc, #32]	; (800ff54 <_scanf_float+0x41c>)
 800ff32:	f000 fa5b 	bl	80103ec <nanf>
 800ff36:	ed88 0a00 	vstr	s0, [r8]
 800ff3a:	e7cd      	b.n	800fed8 <_scanf_float+0x3a0>
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	4639      	mov	r1, r7
 800ff40:	f7f0 fe7a 	bl	8000c38 <__aeabi_d2f>
 800ff44:	f8c8 0000 	str.w	r0, [r8]
 800ff48:	e7c6      	b.n	800fed8 <_scanf_float+0x3a0>
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	e635      	b.n	800fbba <_scanf_float+0x82>
 800ff4e:	bf00      	nop
 800ff50:	0801599e 	.word	0x0801599e
 800ff54:	08015d50 	.word	0x08015d50

0800ff58 <std>:
 800ff58:	2300      	movs	r3, #0
 800ff5a:	b510      	push	{r4, lr}
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff66:	6083      	str	r3, [r0, #8]
 800ff68:	8181      	strh	r1, [r0, #12]
 800ff6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ff6c:	81c2      	strh	r2, [r0, #14]
 800ff6e:	6183      	str	r3, [r0, #24]
 800ff70:	4619      	mov	r1, r3
 800ff72:	2208      	movs	r2, #8
 800ff74:	305c      	adds	r0, #92	; 0x5c
 800ff76:	f000 f942 	bl	80101fe <memset>
 800ff7a:	4b0d      	ldr	r3, [pc, #52]	; (800ffb0 <std+0x58>)
 800ff7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ff7e:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <std+0x5c>)
 800ff80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff82:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <std+0x60>)
 800ff84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff86:	4b0d      	ldr	r3, [pc, #52]	; (800ffbc <std+0x64>)
 800ff88:	6323      	str	r3, [r4, #48]	; 0x30
 800ff8a:	4b0d      	ldr	r3, [pc, #52]	; (800ffc0 <std+0x68>)
 800ff8c:	6224      	str	r4, [r4, #32]
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	d006      	beq.n	800ffa0 <std+0x48>
 800ff92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff96:	4294      	cmp	r4, r2
 800ff98:	d002      	beq.n	800ffa0 <std+0x48>
 800ff9a:	33d0      	adds	r3, #208	; 0xd0
 800ff9c:	429c      	cmp	r4, r3
 800ff9e:	d105      	bne.n	800ffac <std+0x54>
 800ffa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ffa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa8:	f000 ba0e 	b.w	80103c8 <__retarget_lock_init_recursive>
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop
 800ffb0:	08010175 	.word	0x08010175
 800ffb4:	0801019b 	.word	0x0801019b
 800ffb8:	080101d3 	.word	0x080101d3
 800ffbc:	080101f7 	.word	0x080101f7
 800ffc0:	200049a8 	.word	0x200049a8

0800ffc4 <stdio_exit_handler>:
 800ffc4:	4a02      	ldr	r2, [pc, #8]	; (800ffd0 <stdio_exit_handler+0xc>)
 800ffc6:	4903      	ldr	r1, [pc, #12]	; (800ffd4 <stdio_exit_handler+0x10>)
 800ffc8:	4803      	ldr	r0, [pc, #12]	; (800ffd8 <stdio_exit_handler+0x14>)
 800ffca:	f000 b869 	b.w	80100a0 <_fwalk_sglue>
 800ffce:	bf00      	nop
 800ffd0:	20000018 	.word	0x20000018
 800ffd4:	08013371 	.word	0x08013371
 800ffd8:	20000024 	.word	0x20000024

0800ffdc <cleanup_stdio>:
 800ffdc:	6841      	ldr	r1, [r0, #4]
 800ffde:	4b0c      	ldr	r3, [pc, #48]	; (8010010 <cleanup_stdio+0x34>)
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	b510      	push	{r4, lr}
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	d001      	beq.n	800ffec <cleanup_stdio+0x10>
 800ffe8:	f003 f9c2 	bl	8013370 <_fflush_r>
 800ffec:	68a1      	ldr	r1, [r4, #8]
 800ffee:	4b09      	ldr	r3, [pc, #36]	; (8010014 <cleanup_stdio+0x38>)
 800fff0:	4299      	cmp	r1, r3
 800fff2:	d002      	beq.n	800fffa <cleanup_stdio+0x1e>
 800fff4:	4620      	mov	r0, r4
 800fff6:	f003 f9bb 	bl	8013370 <_fflush_r>
 800fffa:	68e1      	ldr	r1, [r4, #12]
 800fffc:	4b06      	ldr	r3, [pc, #24]	; (8010018 <cleanup_stdio+0x3c>)
 800fffe:	4299      	cmp	r1, r3
 8010000:	d004      	beq.n	801000c <cleanup_stdio+0x30>
 8010002:	4620      	mov	r0, r4
 8010004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010008:	f003 b9b2 	b.w	8013370 <_fflush_r>
 801000c:	bd10      	pop	{r4, pc}
 801000e:	bf00      	nop
 8010010:	200049a8 	.word	0x200049a8
 8010014:	20004a10 	.word	0x20004a10
 8010018:	20004a78 	.word	0x20004a78

0801001c <global_stdio_init.part.0>:
 801001c:	b510      	push	{r4, lr}
 801001e:	4b0b      	ldr	r3, [pc, #44]	; (801004c <global_stdio_init.part.0+0x30>)
 8010020:	4c0b      	ldr	r4, [pc, #44]	; (8010050 <global_stdio_init.part.0+0x34>)
 8010022:	4a0c      	ldr	r2, [pc, #48]	; (8010054 <global_stdio_init.part.0+0x38>)
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	4620      	mov	r0, r4
 8010028:	2200      	movs	r2, #0
 801002a:	2104      	movs	r1, #4
 801002c:	f7ff ff94 	bl	800ff58 <std>
 8010030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010034:	2201      	movs	r2, #1
 8010036:	2109      	movs	r1, #9
 8010038:	f7ff ff8e 	bl	800ff58 <std>
 801003c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010040:	2202      	movs	r2, #2
 8010042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010046:	2112      	movs	r1, #18
 8010048:	f7ff bf86 	b.w	800ff58 <std>
 801004c:	20004ae0 	.word	0x20004ae0
 8010050:	200049a8 	.word	0x200049a8
 8010054:	0800ffc5 	.word	0x0800ffc5

08010058 <__sfp_lock_acquire>:
 8010058:	4801      	ldr	r0, [pc, #4]	; (8010060 <__sfp_lock_acquire+0x8>)
 801005a:	f000 b9b6 	b.w	80103ca <__retarget_lock_acquire_recursive>
 801005e:	bf00      	nop
 8010060:	20004ae9 	.word	0x20004ae9

08010064 <__sfp_lock_release>:
 8010064:	4801      	ldr	r0, [pc, #4]	; (801006c <__sfp_lock_release+0x8>)
 8010066:	f000 b9b1 	b.w	80103cc <__retarget_lock_release_recursive>
 801006a:	bf00      	nop
 801006c:	20004ae9 	.word	0x20004ae9

08010070 <__sinit>:
 8010070:	b510      	push	{r4, lr}
 8010072:	4604      	mov	r4, r0
 8010074:	f7ff fff0 	bl	8010058 <__sfp_lock_acquire>
 8010078:	6a23      	ldr	r3, [r4, #32]
 801007a:	b11b      	cbz	r3, 8010084 <__sinit+0x14>
 801007c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010080:	f7ff bff0 	b.w	8010064 <__sfp_lock_release>
 8010084:	4b04      	ldr	r3, [pc, #16]	; (8010098 <__sinit+0x28>)
 8010086:	6223      	str	r3, [r4, #32]
 8010088:	4b04      	ldr	r3, [pc, #16]	; (801009c <__sinit+0x2c>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1f5      	bne.n	801007c <__sinit+0xc>
 8010090:	f7ff ffc4 	bl	801001c <global_stdio_init.part.0>
 8010094:	e7f2      	b.n	801007c <__sinit+0xc>
 8010096:	bf00      	nop
 8010098:	0800ffdd 	.word	0x0800ffdd
 801009c:	20004ae0 	.word	0x20004ae0

080100a0 <_fwalk_sglue>:
 80100a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a4:	4607      	mov	r7, r0
 80100a6:	4688      	mov	r8, r1
 80100a8:	4614      	mov	r4, r2
 80100aa:	2600      	movs	r6, #0
 80100ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100b0:	f1b9 0901 	subs.w	r9, r9, #1
 80100b4:	d505      	bpl.n	80100c2 <_fwalk_sglue+0x22>
 80100b6:	6824      	ldr	r4, [r4, #0]
 80100b8:	2c00      	cmp	r4, #0
 80100ba:	d1f7      	bne.n	80100ac <_fwalk_sglue+0xc>
 80100bc:	4630      	mov	r0, r6
 80100be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c2:	89ab      	ldrh	r3, [r5, #12]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d907      	bls.n	80100d8 <_fwalk_sglue+0x38>
 80100c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100cc:	3301      	adds	r3, #1
 80100ce:	d003      	beq.n	80100d8 <_fwalk_sglue+0x38>
 80100d0:	4629      	mov	r1, r5
 80100d2:	4638      	mov	r0, r7
 80100d4:	47c0      	blx	r8
 80100d6:	4306      	orrs	r6, r0
 80100d8:	3568      	adds	r5, #104	; 0x68
 80100da:	e7e9      	b.n	80100b0 <_fwalk_sglue+0x10>

080100dc <siprintf>:
 80100dc:	b40e      	push	{r1, r2, r3}
 80100de:	b500      	push	{lr}
 80100e0:	b09c      	sub	sp, #112	; 0x70
 80100e2:	ab1d      	add	r3, sp, #116	; 0x74
 80100e4:	9002      	str	r0, [sp, #8]
 80100e6:	9006      	str	r0, [sp, #24]
 80100e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100ec:	4809      	ldr	r0, [pc, #36]	; (8010114 <siprintf+0x38>)
 80100ee:	9107      	str	r1, [sp, #28]
 80100f0:	9104      	str	r1, [sp, #16]
 80100f2:	4909      	ldr	r1, [pc, #36]	; (8010118 <siprintf+0x3c>)
 80100f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100f8:	9105      	str	r1, [sp, #20]
 80100fa:	6800      	ldr	r0, [r0, #0]
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	a902      	add	r1, sp, #8
 8010100:	f002 fc92 	bl	8012a28 <_svfiprintf_r>
 8010104:	9b02      	ldr	r3, [sp, #8]
 8010106:	2200      	movs	r2, #0
 8010108:	701a      	strb	r2, [r3, #0]
 801010a:	b01c      	add	sp, #112	; 0x70
 801010c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010110:	b003      	add	sp, #12
 8010112:	4770      	bx	lr
 8010114:	20000070 	.word	0x20000070
 8010118:	ffff0208 	.word	0xffff0208

0801011c <siscanf>:
 801011c:	b40e      	push	{r1, r2, r3}
 801011e:	b510      	push	{r4, lr}
 8010120:	b09f      	sub	sp, #124	; 0x7c
 8010122:	ac21      	add	r4, sp, #132	; 0x84
 8010124:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010128:	f854 2b04 	ldr.w	r2, [r4], #4
 801012c:	9201      	str	r2, [sp, #4]
 801012e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010132:	9004      	str	r0, [sp, #16]
 8010134:	9008      	str	r0, [sp, #32]
 8010136:	f7f0 f8c3 	bl	80002c0 <strlen>
 801013a:	4b0c      	ldr	r3, [pc, #48]	; (801016c <siscanf+0x50>)
 801013c:	9005      	str	r0, [sp, #20]
 801013e:	9009      	str	r0, [sp, #36]	; 0x24
 8010140:	930d      	str	r3, [sp, #52]	; 0x34
 8010142:	480b      	ldr	r0, [pc, #44]	; (8010170 <siscanf+0x54>)
 8010144:	9a01      	ldr	r2, [sp, #4]
 8010146:	6800      	ldr	r0, [r0, #0]
 8010148:	9403      	str	r4, [sp, #12]
 801014a:	2300      	movs	r3, #0
 801014c:	9311      	str	r3, [sp, #68]	; 0x44
 801014e:	9316      	str	r3, [sp, #88]	; 0x58
 8010150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010154:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010158:	a904      	add	r1, sp, #16
 801015a:	4623      	mov	r3, r4
 801015c:	f002 fdbc 	bl	8012cd8 <__ssvfiscanf_r>
 8010160:	b01f      	add	sp, #124	; 0x7c
 8010162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010166:	b003      	add	sp, #12
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	08010197 	.word	0x08010197
 8010170:	20000070 	.word	0x20000070

08010174 <__sread>:
 8010174:	b510      	push	{r4, lr}
 8010176:	460c      	mov	r4, r1
 8010178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017c:	f000 f8d6 	bl	801032c <_read_r>
 8010180:	2800      	cmp	r0, #0
 8010182:	bfab      	itete	ge
 8010184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010186:	89a3      	ldrhlt	r3, [r4, #12]
 8010188:	181b      	addge	r3, r3, r0
 801018a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801018e:	bfac      	ite	ge
 8010190:	6563      	strge	r3, [r4, #84]	; 0x54
 8010192:	81a3      	strhlt	r3, [r4, #12]
 8010194:	bd10      	pop	{r4, pc}

08010196 <__seofread>:
 8010196:	2000      	movs	r0, #0
 8010198:	4770      	bx	lr

0801019a <__swrite>:
 801019a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019e:	461f      	mov	r7, r3
 80101a0:	898b      	ldrh	r3, [r1, #12]
 80101a2:	05db      	lsls	r3, r3, #23
 80101a4:	4605      	mov	r5, r0
 80101a6:	460c      	mov	r4, r1
 80101a8:	4616      	mov	r6, r2
 80101aa:	d505      	bpl.n	80101b8 <__swrite+0x1e>
 80101ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101b0:	2302      	movs	r3, #2
 80101b2:	2200      	movs	r2, #0
 80101b4:	f000 f8a8 	bl	8010308 <_lseek_r>
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80101c2:	81a3      	strh	r3, [r4, #12]
 80101c4:	4632      	mov	r2, r6
 80101c6:	463b      	mov	r3, r7
 80101c8:	4628      	mov	r0, r5
 80101ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101ce:	f000 b8bf 	b.w	8010350 <_write_r>

080101d2 <__sseek>:
 80101d2:	b510      	push	{r4, lr}
 80101d4:	460c      	mov	r4, r1
 80101d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101da:	f000 f895 	bl	8010308 <_lseek_r>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	89a3      	ldrh	r3, [r4, #12]
 80101e2:	bf15      	itete	ne
 80101e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80101e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101ee:	81a3      	strheq	r3, [r4, #12]
 80101f0:	bf18      	it	ne
 80101f2:	81a3      	strhne	r3, [r4, #12]
 80101f4:	bd10      	pop	{r4, pc}

080101f6 <__sclose>:
 80101f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101fa:	f000 b81f 	b.w	801023c <_close_r>

080101fe <memset>:
 80101fe:	4402      	add	r2, r0
 8010200:	4603      	mov	r3, r0
 8010202:	4293      	cmp	r3, r2
 8010204:	d100      	bne.n	8010208 <memset+0xa>
 8010206:	4770      	bx	lr
 8010208:	f803 1b01 	strb.w	r1, [r3], #1
 801020c:	e7f9      	b.n	8010202 <memset+0x4>

0801020e <strncmp>:
 801020e:	b510      	push	{r4, lr}
 8010210:	b16a      	cbz	r2, 801022e <strncmp+0x20>
 8010212:	3901      	subs	r1, #1
 8010214:	1884      	adds	r4, r0, r2
 8010216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801021a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801021e:	429a      	cmp	r2, r3
 8010220:	d103      	bne.n	801022a <strncmp+0x1c>
 8010222:	42a0      	cmp	r0, r4
 8010224:	d001      	beq.n	801022a <strncmp+0x1c>
 8010226:	2a00      	cmp	r2, #0
 8010228:	d1f5      	bne.n	8010216 <strncmp+0x8>
 801022a:	1ad0      	subs	r0, r2, r3
 801022c:	bd10      	pop	{r4, pc}
 801022e:	4610      	mov	r0, r2
 8010230:	e7fc      	b.n	801022c <strncmp+0x1e>
	...

08010234 <_localeconv_r>:
 8010234:	4800      	ldr	r0, [pc, #0]	; (8010238 <_localeconv_r+0x4>)
 8010236:	4770      	bx	lr
 8010238:	20000164 	.word	0x20000164

0801023c <_close_r>:
 801023c:	b538      	push	{r3, r4, r5, lr}
 801023e:	4d06      	ldr	r5, [pc, #24]	; (8010258 <_close_r+0x1c>)
 8010240:	2300      	movs	r3, #0
 8010242:	4604      	mov	r4, r0
 8010244:	4608      	mov	r0, r1
 8010246:	602b      	str	r3, [r5, #0]
 8010248:	f7f3 fb8d 	bl	8003966 <_close>
 801024c:	1c43      	adds	r3, r0, #1
 801024e:	d102      	bne.n	8010256 <_close_r+0x1a>
 8010250:	682b      	ldr	r3, [r5, #0]
 8010252:	b103      	cbz	r3, 8010256 <_close_r+0x1a>
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	bd38      	pop	{r3, r4, r5, pc}
 8010258:	20004ae4 	.word	0x20004ae4

0801025c <_reclaim_reent>:
 801025c:	4b29      	ldr	r3, [pc, #164]	; (8010304 <_reclaim_reent+0xa8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4283      	cmp	r3, r0
 8010262:	b570      	push	{r4, r5, r6, lr}
 8010264:	4604      	mov	r4, r0
 8010266:	d04b      	beq.n	8010300 <_reclaim_reent+0xa4>
 8010268:	69c3      	ldr	r3, [r0, #28]
 801026a:	b143      	cbz	r3, 801027e <_reclaim_reent+0x22>
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d144      	bne.n	80102fc <_reclaim_reent+0xa0>
 8010272:	69e3      	ldr	r3, [r4, #28]
 8010274:	6819      	ldr	r1, [r3, #0]
 8010276:	b111      	cbz	r1, 801027e <_reclaim_reent+0x22>
 8010278:	4620      	mov	r0, r4
 801027a:	f000 ff37 	bl	80110ec <_free_r>
 801027e:	6961      	ldr	r1, [r4, #20]
 8010280:	b111      	cbz	r1, 8010288 <_reclaim_reent+0x2c>
 8010282:	4620      	mov	r0, r4
 8010284:	f000 ff32 	bl	80110ec <_free_r>
 8010288:	69e1      	ldr	r1, [r4, #28]
 801028a:	b111      	cbz	r1, 8010292 <_reclaim_reent+0x36>
 801028c:	4620      	mov	r0, r4
 801028e:	f000 ff2d 	bl	80110ec <_free_r>
 8010292:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010294:	b111      	cbz	r1, 801029c <_reclaim_reent+0x40>
 8010296:	4620      	mov	r0, r4
 8010298:	f000 ff28 	bl	80110ec <_free_r>
 801029c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801029e:	b111      	cbz	r1, 80102a6 <_reclaim_reent+0x4a>
 80102a0:	4620      	mov	r0, r4
 80102a2:	f000 ff23 	bl	80110ec <_free_r>
 80102a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102a8:	b111      	cbz	r1, 80102b0 <_reclaim_reent+0x54>
 80102aa:	4620      	mov	r0, r4
 80102ac:	f000 ff1e 	bl	80110ec <_free_r>
 80102b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80102b2:	b111      	cbz	r1, 80102ba <_reclaim_reent+0x5e>
 80102b4:	4620      	mov	r0, r4
 80102b6:	f000 ff19 	bl	80110ec <_free_r>
 80102ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80102bc:	b111      	cbz	r1, 80102c4 <_reclaim_reent+0x68>
 80102be:	4620      	mov	r0, r4
 80102c0:	f000 ff14 	bl	80110ec <_free_r>
 80102c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80102c6:	b111      	cbz	r1, 80102ce <_reclaim_reent+0x72>
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 ff0f 	bl	80110ec <_free_r>
 80102ce:	6a23      	ldr	r3, [r4, #32]
 80102d0:	b1b3      	cbz	r3, 8010300 <_reclaim_reent+0xa4>
 80102d2:	4620      	mov	r0, r4
 80102d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102d8:	4718      	bx	r3
 80102da:	5949      	ldr	r1, [r1, r5]
 80102dc:	b941      	cbnz	r1, 80102f0 <_reclaim_reent+0x94>
 80102de:	3504      	adds	r5, #4
 80102e0:	69e3      	ldr	r3, [r4, #28]
 80102e2:	2d80      	cmp	r5, #128	; 0x80
 80102e4:	68d9      	ldr	r1, [r3, #12]
 80102e6:	d1f8      	bne.n	80102da <_reclaim_reent+0x7e>
 80102e8:	4620      	mov	r0, r4
 80102ea:	f000 feff 	bl	80110ec <_free_r>
 80102ee:	e7c0      	b.n	8010272 <_reclaim_reent+0x16>
 80102f0:	680e      	ldr	r6, [r1, #0]
 80102f2:	4620      	mov	r0, r4
 80102f4:	f000 fefa 	bl	80110ec <_free_r>
 80102f8:	4631      	mov	r1, r6
 80102fa:	e7ef      	b.n	80102dc <_reclaim_reent+0x80>
 80102fc:	2500      	movs	r5, #0
 80102fe:	e7ef      	b.n	80102e0 <_reclaim_reent+0x84>
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	bf00      	nop
 8010304:	20000070 	.word	0x20000070

08010308 <_lseek_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4d07      	ldr	r5, [pc, #28]	; (8010328 <_lseek_r+0x20>)
 801030c:	4604      	mov	r4, r0
 801030e:	4608      	mov	r0, r1
 8010310:	4611      	mov	r1, r2
 8010312:	2200      	movs	r2, #0
 8010314:	602a      	str	r2, [r5, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	f7f3 fb4c 	bl	80039b4 <_lseek>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_lseek_r+0x1e>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_lseek_r+0x1e>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	20004ae4 	.word	0x20004ae4

0801032c <_read_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4d07      	ldr	r5, [pc, #28]	; (801034c <_read_r+0x20>)
 8010330:	4604      	mov	r4, r0
 8010332:	4608      	mov	r0, r1
 8010334:	4611      	mov	r1, r2
 8010336:	2200      	movs	r2, #0
 8010338:	602a      	str	r2, [r5, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	f7f3 fada 	bl	80038f4 <_read>
 8010340:	1c43      	adds	r3, r0, #1
 8010342:	d102      	bne.n	801034a <_read_r+0x1e>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	b103      	cbz	r3, 801034a <_read_r+0x1e>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	bd38      	pop	{r3, r4, r5, pc}
 801034c:	20004ae4 	.word	0x20004ae4

08010350 <_write_r>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	4d07      	ldr	r5, [pc, #28]	; (8010370 <_write_r+0x20>)
 8010354:	4604      	mov	r4, r0
 8010356:	4608      	mov	r0, r1
 8010358:	4611      	mov	r1, r2
 801035a:	2200      	movs	r2, #0
 801035c:	602a      	str	r2, [r5, #0]
 801035e:	461a      	mov	r2, r3
 8010360:	f7f3 fae5 	bl	800392e <_write>
 8010364:	1c43      	adds	r3, r0, #1
 8010366:	d102      	bne.n	801036e <_write_r+0x1e>
 8010368:	682b      	ldr	r3, [r5, #0]
 801036a:	b103      	cbz	r3, 801036e <_write_r+0x1e>
 801036c:	6023      	str	r3, [r4, #0]
 801036e:	bd38      	pop	{r3, r4, r5, pc}
 8010370:	20004ae4 	.word	0x20004ae4

08010374 <__errno>:
 8010374:	4b01      	ldr	r3, [pc, #4]	; (801037c <__errno+0x8>)
 8010376:	6818      	ldr	r0, [r3, #0]
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	20000070 	.word	0x20000070

08010380 <__libc_init_array>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	4d0d      	ldr	r5, [pc, #52]	; (80103b8 <__libc_init_array+0x38>)
 8010384:	4c0d      	ldr	r4, [pc, #52]	; (80103bc <__libc_init_array+0x3c>)
 8010386:	1b64      	subs	r4, r4, r5
 8010388:	10a4      	asrs	r4, r4, #2
 801038a:	2600      	movs	r6, #0
 801038c:	42a6      	cmp	r6, r4
 801038e:	d109      	bne.n	80103a4 <__libc_init_array+0x24>
 8010390:	4d0b      	ldr	r5, [pc, #44]	; (80103c0 <__libc_init_array+0x40>)
 8010392:	4c0c      	ldr	r4, [pc, #48]	; (80103c4 <__libc_init_array+0x44>)
 8010394:	f005 f8ae 	bl	80154f4 <_init>
 8010398:	1b64      	subs	r4, r4, r5
 801039a:	10a4      	asrs	r4, r4, #2
 801039c:	2600      	movs	r6, #0
 801039e:	42a6      	cmp	r6, r4
 80103a0:	d105      	bne.n	80103ae <__libc_init_array+0x2e>
 80103a2:	bd70      	pop	{r4, r5, r6, pc}
 80103a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80103a8:	4798      	blx	r3
 80103aa:	3601      	adds	r6, #1
 80103ac:	e7ee      	b.n	801038c <__libc_init_array+0xc>
 80103ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80103b2:	4798      	blx	r3
 80103b4:	3601      	adds	r6, #1
 80103b6:	e7f2      	b.n	801039e <__libc_init_array+0x1e>
 80103b8:	08015e28 	.word	0x08015e28
 80103bc:	08015e28 	.word	0x08015e28
 80103c0:	08015e28 	.word	0x08015e28
 80103c4:	08015e2c 	.word	0x08015e2c

080103c8 <__retarget_lock_init_recursive>:
 80103c8:	4770      	bx	lr

080103ca <__retarget_lock_acquire_recursive>:
 80103ca:	4770      	bx	lr

080103cc <__retarget_lock_release_recursive>:
 80103cc:	4770      	bx	lr

080103ce <memcpy>:
 80103ce:	440a      	add	r2, r1
 80103d0:	4291      	cmp	r1, r2
 80103d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80103d6:	d100      	bne.n	80103da <memcpy+0xc>
 80103d8:	4770      	bx	lr
 80103da:	b510      	push	{r4, lr}
 80103dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e4:	4291      	cmp	r1, r2
 80103e6:	d1f9      	bne.n	80103dc <memcpy+0xe>
 80103e8:	bd10      	pop	{r4, pc}
	...

080103ec <nanf>:
 80103ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80103f4 <nanf+0x8>
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	7fc00000 	.word	0x7fc00000

080103f8 <quorem>:
 80103f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fc:	6903      	ldr	r3, [r0, #16]
 80103fe:	690c      	ldr	r4, [r1, #16]
 8010400:	42a3      	cmp	r3, r4
 8010402:	4607      	mov	r7, r0
 8010404:	db7e      	blt.n	8010504 <quorem+0x10c>
 8010406:	3c01      	subs	r4, #1
 8010408:	f101 0814 	add.w	r8, r1, #20
 801040c:	f100 0514 	add.w	r5, r0, #20
 8010410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010414:	9301      	str	r3, [sp, #4]
 8010416:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801041a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801041e:	3301      	adds	r3, #1
 8010420:	429a      	cmp	r2, r3
 8010422:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010426:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801042a:	fbb2 f6f3 	udiv	r6, r2, r3
 801042e:	d331      	bcc.n	8010494 <quorem+0x9c>
 8010430:	f04f 0e00 	mov.w	lr, #0
 8010434:	4640      	mov	r0, r8
 8010436:	46ac      	mov	ip, r5
 8010438:	46f2      	mov	sl, lr
 801043a:	f850 2b04 	ldr.w	r2, [r0], #4
 801043e:	b293      	uxth	r3, r2
 8010440:	fb06 e303 	mla	r3, r6, r3, lr
 8010444:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010448:	0c1a      	lsrs	r2, r3, #16
 801044a:	b29b      	uxth	r3, r3
 801044c:	ebaa 0303 	sub.w	r3, sl, r3
 8010450:	f8dc a000 	ldr.w	sl, [ip]
 8010454:	fa13 f38a 	uxtah	r3, r3, sl
 8010458:	fb06 220e 	mla	r2, r6, lr, r2
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	9b00      	ldr	r3, [sp, #0]
 8010460:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010464:	b292      	uxth	r2, r2
 8010466:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801046a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801046e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010472:	4581      	cmp	r9, r0
 8010474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010478:	f84c 3b04 	str.w	r3, [ip], #4
 801047c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010480:	d2db      	bcs.n	801043a <quorem+0x42>
 8010482:	f855 300b 	ldr.w	r3, [r5, fp]
 8010486:	b92b      	cbnz	r3, 8010494 <quorem+0x9c>
 8010488:	9b01      	ldr	r3, [sp, #4]
 801048a:	3b04      	subs	r3, #4
 801048c:	429d      	cmp	r5, r3
 801048e:	461a      	mov	r2, r3
 8010490:	d32c      	bcc.n	80104ec <quorem+0xf4>
 8010492:	613c      	str	r4, [r7, #16]
 8010494:	4638      	mov	r0, r7
 8010496:	f001 f9ef 	bl	8011878 <__mcmp>
 801049a:	2800      	cmp	r0, #0
 801049c:	db22      	blt.n	80104e4 <quorem+0xec>
 801049e:	3601      	adds	r6, #1
 80104a0:	4629      	mov	r1, r5
 80104a2:	2000      	movs	r0, #0
 80104a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80104a8:	f8d1 c000 	ldr.w	ip, [r1]
 80104ac:	b293      	uxth	r3, r2
 80104ae:	1ac3      	subs	r3, r0, r3
 80104b0:	0c12      	lsrs	r2, r2, #16
 80104b2:	fa13 f38c 	uxtah	r3, r3, ip
 80104b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80104ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104be:	b29b      	uxth	r3, r3
 80104c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104c4:	45c1      	cmp	r9, r8
 80104c6:	f841 3b04 	str.w	r3, [r1], #4
 80104ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80104ce:	d2e9      	bcs.n	80104a4 <quorem+0xac>
 80104d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104d8:	b922      	cbnz	r2, 80104e4 <quorem+0xec>
 80104da:	3b04      	subs	r3, #4
 80104dc:	429d      	cmp	r5, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	d30a      	bcc.n	80104f8 <quorem+0x100>
 80104e2:	613c      	str	r4, [r7, #16]
 80104e4:	4630      	mov	r0, r6
 80104e6:	b003      	add	sp, #12
 80104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	6812      	ldr	r2, [r2, #0]
 80104ee:	3b04      	subs	r3, #4
 80104f0:	2a00      	cmp	r2, #0
 80104f2:	d1ce      	bne.n	8010492 <quorem+0x9a>
 80104f4:	3c01      	subs	r4, #1
 80104f6:	e7c9      	b.n	801048c <quorem+0x94>
 80104f8:	6812      	ldr	r2, [r2, #0]
 80104fa:	3b04      	subs	r3, #4
 80104fc:	2a00      	cmp	r2, #0
 80104fe:	d1f0      	bne.n	80104e2 <quorem+0xea>
 8010500:	3c01      	subs	r4, #1
 8010502:	e7eb      	b.n	80104dc <quorem+0xe4>
 8010504:	2000      	movs	r0, #0
 8010506:	e7ee      	b.n	80104e6 <quorem+0xee>

08010508 <_dtoa_r>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	ed2d 8b04 	vpush	{d8-d9}
 8010510:	69c5      	ldr	r5, [r0, #28]
 8010512:	b093      	sub	sp, #76	; 0x4c
 8010514:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010518:	ec57 6b10 	vmov	r6, r7, d0
 801051c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010520:	9107      	str	r1, [sp, #28]
 8010522:	4604      	mov	r4, r0
 8010524:	920a      	str	r2, [sp, #40]	; 0x28
 8010526:	930d      	str	r3, [sp, #52]	; 0x34
 8010528:	b975      	cbnz	r5, 8010548 <_dtoa_r+0x40>
 801052a:	2010      	movs	r0, #16
 801052c:	f000 fe2a 	bl	8011184 <malloc>
 8010530:	4602      	mov	r2, r0
 8010532:	61e0      	str	r0, [r4, #28]
 8010534:	b920      	cbnz	r0, 8010540 <_dtoa_r+0x38>
 8010536:	4bae      	ldr	r3, [pc, #696]	; (80107f0 <_dtoa_r+0x2e8>)
 8010538:	21ef      	movs	r1, #239	; 0xef
 801053a:	48ae      	ldr	r0, [pc, #696]	; (80107f4 <_dtoa_r+0x2ec>)
 801053c:	f002 ffe8 	bl	8013510 <__assert_func>
 8010540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010544:	6005      	str	r5, [r0, #0]
 8010546:	60c5      	str	r5, [r0, #12]
 8010548:	69e3      	ldr	r3, [r4, #28]
 801054a:	6819      	ldr	r1, [r3, #0]
 801054c:	b151      	cbz	r1, 8010564 <_dtoa_r+0x5c>
 801054e:	685a      	ldr	r2, [r3, #4]
 8010550:	604a      	str	r2, [r1, #4]
 8010552:	2301      	movs	r3, #1
 8010554:	4093      	lsls	r3, r2
 8010556:	608b      	str	r3, [r1, #8]
 8010558:	4620      	mov	r0, r4
 801055a:	f000 ff07 	bl	801136c <_Bfree>
 801055e:	69e3      	ldr	r3, [r4, #28]
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]
 8010564:	1e3b      	subs	r3, r7, #0
 8010566:	bfbb      	ittet	lt
 8010568:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801056c:	9303      	strlt	r3, [sp, #12]
 801056e:	2300      	movge	r3, #0
 8010570:	2201      	movlt	r2, #1
 8010572:	bfac      	ite	ge
 8010574:	f8c8 3000 	strge.w	r3, [r8]
 8010578:	f8c8 2000 	strlt.w	r2, [r8]
 801057c:	4b9e      	ldr	r3, [pc, #632]	; (80107f8 <_dtoa_r+0x2f0>)
 801057e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010582:	ea33 0308 	bics.w	r3, r3, r8
 8010586:	d11b      	bne.n	80105c0 <_dtoa_r+0xb8>
 8010588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801058a:	f242 730f 	movw	r3, #9999	; 0x270f
 801058e:	6013      	str	r3, [r2, #0]
 8010590:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010594:	4333      	orrs	r3, r6
 8010596:	f000 8593 	beq.w	80110c0 <_dtoa_r+0xbb8>
 801059a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801059c:	b963      	cbnz	r3, 80105b8 <_dtoa_r+0xb0>
 801059e:	4b97      	ldr	r3, [pc, #604]	; (80107fc <_dtoa_r+0x2f4>)
 80105a0:	e027      	b.n	80105f2 <_dtoa_r+0xea>
 80105a2:	4b97      	ldr	r3, [pc, #604]	; (8010800 <_dtoa_r+0x2f8>)
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	3308      	adds	r3, #8
 80105a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105aa:	6013      	str	r3, [r2, #0]
 80105ac:	9800      	ldr	r0, [sp, #0]
 80105ae:	b013      	add	sp, #76	; 0x4c
 80105b0:	ecbd 8b04 	vpop	{d8-d9}
 80105b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b8:	4b90      	ldr	r3, [pc, #576]	; (80107fc <_dtoa_r+0x2f4>)
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	3303      	adds	r3, #3
 80105be:	e7f3      	b.n	80105a8 <_dtoa_r+0xa0>
 80105c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105c4:	2200      	movs	r2, #0
 80105c6:	ec51 0b17 	vmov	r0, r1, d7
 80105ca:	eeb0 8a47 	vmov.f32	s16, s14
 80105ce:	eef0 8a67 	vmov.f32	s17, s15
 80105d2:	2300      	movs	r3, #0
 80105d4:	f7f0 faa0 	bl	8000b18 <__aeabi_dcmpeq>
 80105d8:	4681      	mov	r9, r0
 80105da:	b160      	cbz	r0, 80105f6 <_dtoa_r+0xee>
 80105dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105de:	2301      	movs	r3, #1
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 8568 	beq.w	80110ba <_dtoa_r+0xbb2>
 80105ea:	4b86      	ldr	r3, [pc, #536]	; (8010804 <_dtoa_r+0x2fc>)
 80105ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105ee:	6013      	str	r3, [r2, #0]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	e7da      	b.n	80105ac <_dtoa_r+0xa4>
 80105f6:	aa10      	add	r2, sp, #64	; 0x40
 80105f8:	a911      	add	r1, sp, #68	; 0x44
 80105fa:	4620      	mov	r0, r4
 80105fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010600:	eef0 0a68 	vmov.f32	s1, s17
 8010604:	f001 fa4e 	bl	8011aa4 <__d2b>
 8010608:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801060c:	4682      	mov	sl, r0
 801060e:	2d00      	cmp	r5, #0
 8010610:	d07f      	beq.n	8010712 <_dtoa_r+0x20a>
 8010612:	ee18 3a90 	vmov	r3, s17
 8010616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801061a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801061e:	ec51 0b18 	vmov	r0, r1, d8
 8010622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801062a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801062e:	4619      	mov	r1, r3
 8010630:	2200      	movs	r2, #0
 8010632:	4b75      	ldr	r3, [pc, #468]	; (8010808 <_dtoa_r+0x300>)
 8010634:	f7ef fe50 	bl	80002d8 <__aeabi_dsub>
 8010638:	a367      	add	r3, pc, #412	; (adr r3, 80107d8 <_dtoa_r+0x2d0>)
 801063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063e:	f7f0 f803 	bl	8000648 <__aeabi_dmul>
 8010642:	a367      	add	r3, pc, #412	; (adr r3, 80107e0 <_dtoa_r+0x2d8>)
 8010644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010648:	f7ef fe48 	bl	80002dc <__adddf3>
 801064c:	4606      	mov	r6, r0
 801064e:	4628      	mov	r0, r5
 8010650:	460f      	mov	r7, r1
 8010652:	f7ef ff8f 	bl	8000574 <__aeabi_i2d>
 8010656:	a364      	add	r3, pc, #400	; (adr r3, 80107e8 <_dtoa_r+0x2e0>)
 8010658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065c:	f7ef fff4 	bl	8000648 <__aeabi_dmul>
 8010660:	4602      	mov	r2, r0
 8010662:	460b      	mov	r3, r1
 8010664:	4630      	mov	r0, r6
 8010666:	4639      	mov	r1, r7
 8010668:	f7ef fe38 	bl	80002dc <__adddf3>
 801066c:	4606      	mov	r6, r0
 801066e:	460f      	mov	r7, r1
 8010670:	f7f0 fa9a 	bl	8000ba8 <__aeabi_d2iz>
 8010674:	2200      	movs	r2, #0
 8010676:	4683      	mov	fp, r0
 8010678:	2300      	movs	r3, #0
 801067a:	4630      	mov	r0, r6
 801067c:	4639      	mov	r1, r7
 801067e:	f7f0 fa55 	bl	8000b2c <__aeabi_dcmplt>
 8010682:	b148      	cbz	r0, 8010698 <_dtoa_r+0x190>
 8010684:	4658      	mov	r0, fp
 8010686:	f7ef ff75 	bl	8000574 <__aeabi_i2d>
 801068a:	4632      	mov	r2, r6
 801068c:	463b      	mov	r3, r7
 801068e:	f7f0 fa43 	bl	8000b18 <__aeabi_dcmpeq>
 8010692:	b908      	cbnz	r0, 8010698 <_dtoa_r+0x190>
 8010694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010698:	f1bb 0f16 	cmp.w	fp, #22
 801069c:	d857      	bhi.n	801074e <_dtoa_r+0x246>
 801069e:	4b5b      	ldr	r3, [pc, #364]	; (801080c <_dtoa_r+0x304>)
 80106a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	ec51 0b18 	vmov	r0, r1, d8
 80106ac:	f7f0 fa3e 	bl	8000b2c <__aeabi_dcmplt>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d04e      	beq.n	8010752 <_dtoa_r+0x24a>
 80106b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106b8:	2300      	movs	r3, #0
 80106ba:	930c      	str	r3, [sp, #48]	; 0x30
 80106bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106be:	1b5b      	subs	r3, r3, r5
 80106c0:	1e5a      	subs	r2, r3, #1
 80106c2:	bf45      	ittet	mi
 80106c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80106c8:	9305      	strmi	r3, [sp, #20]
 80106ca:	2300      	movpl	r3, #0
 80106cc:	2300      	movmi	r3, #0
 80106ce:	9206      	str	r2, [sp, #24]
 80106d0:	bf54      	ite	pl
 80106d2:	9305      	strpl	r3, [sp, #20]
 80106d4:	9306      	strmi	r3, [sp, #24]
 80106d6:	f1bb 0f00 	cmp.w	fp, #0
 80106da:	db3c      	blt.n	8010756 <_dtoa_r+0x24e>
 80106dc:	9b06      	ldr	r3, [sp, #24]
 80106de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80106e2:	445b      	add	r3, fp
 80106e4:	9306      	str	r3, [sp, #24]
 80106e6:	2300      	movs	r3, #0
 80106e8:	9308      	str	r3, [sp, #32]
 80106ea:	9b07      	ldr	r3, [sp, #28]
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	d868      	bhi.n	80107c2 <_dtoa_r+0x2ba>
 80106f0:	2b05      	cmp	r3, #5
 80106f2:	bfc4      	itt	gt
 80106f4:	3b04      	subgt	r3, #4
 80106f6:	9307      	strgt	r3, [sp, #28]
 80106f8:	9b07      	ldr	r3, [sp, #28]
 80106fa:	f1a3 0302 	sub.w	r3, r3, #2
 80106fe:	bfcc      	ite	gt
 8010700:	2500      	movgt	r5, #0
 8010702:	2501      	movle	r5, #1
 8010704:	2b03      	cmp	r3, #3
 8010706:	f200 8085 	bhi.w	8010814 <_dtoa_r+0x30c>
 801070a:	e8df f003 	tbb	[pc, r3]
 801070e:	3b2e      	.short	0x3b2e
 8010710:	5839      	.short	0x5839
 8010712:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010716:	441d      	add	r5, r3
 8010718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801071c:	2b20      	cmp	r3, #32
 801071e:	bfc1      	itttt	gt
 8010720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010724:	fa08 f803 	lslgt.w	r8, r8, r3
 8010728:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801072c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010730:	bfd6      	itet	le
 8010732:	f1c3 0320 	rsble	r3, r3, #32
 8010736:	ea48 0003 	orrgt.w	r0, r8, r3
 801073a:	fa06 f003 	lslle.w	r0, r6, r3
 801073e:	f7ef ff09 	bl	8000554 <__aeabi_ui2d>
 8010742:	2201      	movs	r2, #1
 8010744:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010748:	3d01      	subs	r5, #1
 801074a:	920e      	str	r2, [sp, #56]	; 0x38
 801074c:	e76f      	b.n	801062e <_dtoa_r+0x126>
 801074e:	2301      	movs	r3, #1
 8010750:	e7b3      	b.n	80106ba <_dtoa_r+0x1b2>
 8010752:	900c      	str	r0, [sp, #48]	; 0x30
 8010754:	e7b2      	b.n	80106bc <_dtoa_r+0x1b4>
 8010756:	9b05      	ldr	r3, [sp, #20]
 8010758:	eba3 030b 	sub.w	r3, r3, fp
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	f1cb 0300 	rsb	r3, fp, #0
 8010762:	9308      	str	r3, [sp, #32]
 8010764:	2300      	movs	r3, #0
 8010766:	930b      	str	r3, [sp, #44]	; 0x2c
 8010768:	e7bf      	b.n	80106ea <_dtoa_r+0x1e2>
 801076a:	2300      	movs	r3, #0
 801076c:	9309      	str	r3, [sp, #36]	; 0x24
 801076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010770:	2b00      	cmp	r3, #0
 8010772:	dc52      	bgt.n	801081a <_dtoa_r+0x312>
 8010774:	2301      	movs	r3, #1
 8010776:	9301      	str	r3, [sp, #4]
 8010778:	9304      	str	r3, [sp, #16]
 801077a:	461a      	mov	r2, r3
 801077c:	920a      	str	r2, [sp, #40]	; 0x28
 801077e:	e00b      	b.n	8010798 <_dtoa_r+0x290>
 8010780:	2301      	movs	r3, #1
 8010782:	e7f3      	b.n	801076c <_dtoa_r+0x264>
 8010784:	2300      	movs	r3, #0
 8010786:	9309      	str	r3, [sp, #36]	; 0x24
 8010788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801078a:	445b      	add	r3, fp
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	3301      	adds	r3, #1
 8010790:	2b01      	cmp	r3, #1
 8010792:	9304      	str	r3, [sp, #16]
 8010794:	bfb8      	it	lt
 8010796:	2301      	movlt	r3, #1
 8010798:	69e0      	ldr	r0, [r4, #28]
 801079a:	2100      	movs	r1, #0
 801079c:	2204      	movs	r2, #4
 801079e:	f102 0614 	add.w	r6, r2, #20
 80107a2:	429e      	cmp	r6, r3
 80107a4:	d93d      	bls.n	8010822 <_dtoa_r+0x31a>
 80107a6:	6041      	str	r1, [r0, #4]
 80107a8:	4620      	mov	r0, r4
 80107aa:	f000 fd9f 	bl	80112ec <_Balloc>
 80107ae:	9000      	str	r0, [sp, #0]
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d139      	bne.n	8010828 <_dtoa_r+0x320>
 80107b4:	4b16      	ldr	r3, [pc, #88]	; (8010810 <_dtoa_r+0x308>)
 80107b6:	4602      	mov	r2, r0
 80107b8:	f240 11af 	movw	r1, #431	; 0x1af
 80107bc:	e6bd      	b.n	801053a <_dtoa_r+0x32>
 80107be:	2301      	movs	r3, #1
 80107c0:	e7e1      	b.n	8010786 <_dtoa_r+0x27e>
 80107c2:	2501      	movs	r5, #1
 80107c4:	2300      	movs	r3, #0
 80107c6:	9307      	str	r3, [sp, #28]
 80107c8:	9509      	str	r5, [sp, #36]	; 0x24
 80107ca:	f04f 33ff 	mov.w	r3, #4294967295
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	9304      	str	r3, [sp, #16]
 80107d2:	2200      	movs	r2, #0
 80107d4:	2312      	movs	r3, #18
 80107d6:	e7d1      	b.n	801077c <_dtoa_r+0x274>
 80107d8:	636f4361 	.word	0x636f4361
 80107dc:	3fd287a7 	.word	0x3fd287a7
 80107e0:	8b60c8b3 	.word	0x8b60c8b3
 80107e4:	3fc68a28 	.word	0x3fc68a28
 80107e8:	509f79fb 	.word	0x509f79fb
 80107ec:	3fd34413 	.word	0x3fd34413
 80107f0:	080159b0 	.word	0x080159b0
 80107f4:	080159c7 	.word	0x080159c7
 80107f8:	7ff00000 	.word	0x7ff00000
 80107fc:	080159ac 	.word	0x080159ac
 8010800:	080159a3 	.word	0x080159a3
 8010804:	08015d09 	.word	0x08015d09
 8010808:	3ff80000 	.word	0x3ff80000
 801080c:	08015ab8 	.word	0x08015ab8
 8010810:	08015a1f 	.word	0x08015a1f
 8010814:	2301      	movs	r3, #1
 8010816:	9309      	str	r3, [sp, #36]	; 0x24
 8010818:	e7d7      	b.n	80107ca <_dtoa_r+0x2c2>
 801081a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	9304      	str	r3, [sp, #16]
 8010820:	e7ba      	b.n	8010798 <_dtoa_r+0x290>
 8010822:	3101      	adds	r1, #1
 8010824:	0052      	lsls	r2, r2, #1
 8010826:	e7ba      	b.n	801079e <_dtoa_r+0x296>
 8010828:	69e3      	ldr	r3, [r4, #28]
 801082a:	9a00      	ldr	r2, [sp, #0]
 801082c:	601a      	str	r2, [r3, #0]
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	2b0e      	cmp	r3, #14
 8010832:	f200 80a8 	bhi.w	8010986 <_dtoa_r+0x47e>
 8010836:	2d00      	cmp	r5, #0
 8010838:	f000 80a5 	beq.w	8010986 <_dtoa_r+0x47e>
 801083c:	f1bb 0f00 	cmp.w	fp, #0
 8010840:	dd38      	ble.n	80108b4 <_dtoa_r+0x3ac>
 8010842:	4bc0      	ldr	r3, [pc, #768]	; (8010b44 <_dtoa_r+0x63c>)
 8010844:	f00b 020f 	and.w	r2, fp, #15
 8010848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801084c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010850:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010854:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010858:	d019      	beq.n	801088e <_dtoa_r+0x386>
 801085a:	4bbb      	ldr	r3, [pc, #748]	; (8010b48 <_dtoa_r+0x640>)
 801085c:	ec51 0b18 	vmov	r0, r1, d8
 8010860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010864:	f7f0 f81a 	bl	800089c <__aeabi_ddiv>
 8010868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801086c:	f008 080f 	and.w	r8, r8, #15
 8010870:	2503      	movs	r5, #3
 8010872:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010b48 <_dtoa_r+0x640>
 8010876:	f1b8 0f00 	cmp.w	r8, #0
 801087a:	d10a      	bne.n	8010892 <_dtoa_r+0x38a>
 801087c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010880:	4632      	mov	r2, r6
 8010882:	463b      	mov	r3, r7
 8010884:	f7f0 f80a 	bl	800089c <__aeabi_ddiv>
 8010888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801088c:	e02b      	b.n	80108e6 <_dtoa_r+0x3de>
 801088e:	2502      	movs	r5, #2
 8010890:	e7ef      	b.n	8010872 <_dtoa_r+0x36a>
 8010892:	f018 0f01 	tst.w	r8, #1
 8010896:	d008      	beq.n	80108aa <_dtoa_r+0x3a2>
 8010898:	4630      	mov	r0, r6
 801089a:	4639      	mov	r1, r7
 801089c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80108a0:	f7ef fed2 	bl	8000648 <__aeabi_dmul>
 80108a4:	3501      	adds	r5, #1
 80108a6:	4606      	mov	r6, r0
 80108a8:	460f      	mov	r7, r1
 80108aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80108ae:	f109 0908 	add.w	r9, r9, #8
 80108b2:	e7e0      	b.n	8010876 <_dtoa_r+0x36e>
 80108b4:	f000 809f 	beq.w	80109f6 <_dtoa_r+0x4ee>
 80108b8:	f1cb 0600 	rsb	r6, fp, #0
 80108bc:	4ba1      	ldr	r3, [pc, #644]	; (8010b44 <_dtoa_r+0x63c>)
 80108be:	4fa2      	ldr	r7, [pc, #648]	; (8010b48 <_dtoa_r+0x640>)
 80108c0:	f006 020f 	and.w	r2, r6, #15
 80108c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108cc:	ec51 0b18 	vmov	r0, r1, d8
 80108d0:	f7ef feba 	bl	8000648 <__aeabi_dmul>
 80108d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d8:	1136      	asrs	r6, r6, #4
 80108da:	2300      	movs	r3, #0
 80108dc:	2502      	movs	r5, #2
 80108de:	2e00      	cmp	r6, #0
 80108e0:	d17e      	bne.n	80109e0 <_dtoa_r+0x4d8>
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d1d0      	bne.n	8010888 <_dtoa_r+0x380>
 80108e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 8084 	beq.w	80109fa <_dtoa_r+0x4f2>
 80108f2:	4b96      	ldr	r3, [pc, #600]	; (8010b4c <_dtoa_r+0x644>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	4640      	mov	r0, r8
 80108f8:	4649      	mov	r1, r9
 80108fa:	f7f0 f917 	bl	8000b2c <__aeabi_dcmplt>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d07b      	beq.n	80109fa <_dtoa_r+0x4f2>
 8010902:	9b04      	ldr	r3, [sp, #16]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d078      	beq.n	80109fa <_dtoa_r+0x4f2>
 8010908:	9b01      	ldr	r3, [sp, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	dd39      	ble.n	8010982 <_dtoa_r+0x47a>
 801090e:	4b90      	ldr	r3, [pc, #576]	; (8010b50 <_dtoa_r+0x648>)
 8010910:	2200      	movs	r2, #0
 8010912:	4640      	mov	r0, r8
 8010914:	4649      	mov	r1, r9
 8010916:	f7ef fe97 	bl	8000648 <__aeabi_dmul>
 801091a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801091e:	9e01      	ldr	r6, [sp, #4]
 8010920:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010924:	3501      	adds	r5, #1
 8010926:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801092a:	4628      	mov	r0, r5
 801092c:	f7ef fe22 	bl	8000574 <__aeabi_i2d>
 8010930:	4642      	mov	r2, r8
 8010932:	464b      	mov	r3, r9
 8010934:	f7ef fe88 	bl	8000648 <__aeabi_dmul>
 8010938:	4b86      	ldr	r3, [pc, #536]	; (8010b54 <_dtoa_r+0x64c>)
 801093a:	2200      	movs	r2, #0
 801093c:	f7ef fcce 	bl	80002dc <__adddf3>
 8010940:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010948:	9303      	str	r3, [sp, #12]
 801094a:	2e00      	cmp	r6, #0
 801094c:	d158      	bne.n	8010a00 <_dtoa_r+0x4f8>
 801094e:	4b82      	ldr	r3, [pc, #520]	; (8010b58 <_dtoa_r+0x650>)
 8010950:	2200      	movs	r2, #0
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	f7ef fcbf 	bl	80002d8 <__aeabi_dsub>
 801095a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801095e:	4680      	mov	r8, r0
 8010960:	4689      	mov	r9, r1
 8010962:	f7f0 f901 	bl	8000b68 <__aeabi_dcmpgt>
 8010966:	2800      	cmp	r0, #0
 8010968:	f040 8296 	bne.w	8010e98 <_dtoa_r+0x990>
 801096c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010970:	4640      	mov	r0, r8
 8010972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010976:	4649      	mov	r1, r9
 8010978:	f7f0 f8d8 	bl	8000b2c <__aeabi_dcmplt>
 801097c:	2800      	cmp	r0, #0
 801097e:	f040 8289 	bne.w	8010e94 <_dtoa_r+0x98c>
 8010982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010988:	2b00      	cmp	r3, #0
 801098a:	f2c0 814e 	blt.w	8010c2a <_dtoa_r+0x722>
 801098e:	f1bb 0f0e 	cmp.w	fp, #14
 8010992:	f300 814a 	bgt.w	8010c2a <_dtoa_r+0x722>
 8010996:	4b6b      	ldr	r3, [pc, #428]	; (8010b44 <_dtoa_r+0x63c>)
 8010998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801099c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f280 80dc 	bge.w	8010b60 <_dtoa_r+0x658>
 80109a8:	9b04      	ldr	r3, [sp, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f300 80d8 	bgt.w	8010b60 <_dtoa_r+0x658>
 80109b0:	f040 826f 	bne.w	8010e92 <_dtoa_r+0x98a>
 80109b4:	4b68      	ldr	r3, [pc, #416]	; (8010b58 <_dtoa_r+0x650>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	4640      	mov	r0, r8
 80109ba:	4649      	mov	r1, r9
 80109bc:	f7ef fe44 	bl	8000648 <__aeabi_dmul>
 80109c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109c4:	f7f0 f8c6 	bl	8000b54 <__aeabi_dcmpge>
 80109c8:	9e04      	ldr	r6, [sp, #16]
 80109ca:	4637      	mov	r7, r6
 80109cc:	2800      	cmp	r0, #0
 80109ce:	f040 8245 	bne.w	8010e5c <_dtoa_r+0x954>
 80109d2:	9d00      	ldr	r5, [sp, #0]
 80109d4:	2331      	movs	r3, #49	; 0x31
 80109d6:	f805 3b01 	strb.w	r3, [r5], #1
 80109da:	f10b 0b01 	add.w	fp, fp, #1
 80109de:	e241      	b.n	8010e64 <_dtoa_r+0x95c>
 80109e0:	07f2      	lsls	r2, r6, #31
 80109e2:	d505      	bpl.n	80109f0 <_dtoa_r+0x4e8>
 80109e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109e8:	f7ef fe2e 	bl	8000648 <__aeabi_dmul>
 80109ec:	3501      	adds	r5, #1
 80109ee:	2301      	movs	r3, #1
 80109f0:	1076      	asrs	r6, r6, #1
 80109f2:	3708      	adds	r7, #8
 80109f4:	e773      	b.n	80108de <_dtoa_r+0x3d6>
 80109f6:	2502      	movs	r5, #2
 80109f8:	e775      	b.n	80108e6 <_dtoa_r+0x3de>
 80109fa:	9e04      	ldr	r6, [sp, #16]
 80109fc:	465f      	mov	r7, fp
 80109fe:	e792      	b.n	8010926 <_dtoa_r+0x41e>
 8010a00:	9900      	ldr	r1, [sp, #0]
 8010a02:	4b50      	ldr	r3, [pc, #320]	; (8010b44 <_dtoa_r+0x63c>)
 8010a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a08:	4431      	add	r1, r6
 8010a0a:	9102      	str	r1, [sp, #8]
 8010a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a0e:	eeb0 9a47 	vmov.f32	s18, s14
 8010a12:	eef0 9a67 	vmov.f32	s19, s15
 8010a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a1e:	2900      	cmp	r1, #0
 8010a20:	d044      	beq.n	8010aac <_dtoa_r+0x5a4>
 8010a22:	494e      	ldr	r1, [pc, #312]	; (8010b5c <_dtoa_r+0x654>)
 8010a24:	2000      	movs	r0, #0
 8010a26:	f7ef ff39 	bl	800089c <__aeabi_ddiv>
 8010a2a:	ec53 2b19 	vmov	r2, r3, d9
 8010a2e:	f7ef fc53 	bl	80002d8 <__aeabi_dsub>
 8010a32:	9d00      	ldr	r5, [sp, #0]
 8010a34:	ec41 0b19 	vmov	d9, r0, r1
 8010a38:	4649      	mov	r1, r9
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	f7f0 f8b4 	bl	8000ba8 <__aeabi_d2iz>
 8010a40:	4606      	mov	r6, r0
 8010a42:	f7ef fd97 	bl	8000574 <__aeabi_i2d>
 8010a46:	4602      	mov	r2, r0
 8010a48:	460b      	mov	r3, r1
 8010a4a:	4640      	mov	r0, r8
 8010a4c:	4649      	mov	r1, r9
 8010a4e:	f7ef fc43 	bl	80002d8 <__aeabi_dsub>
 8010a52:	3630      	adds	r6, #48	; 0x30
 8010a54:	f805 6b01 	strb.w	r6, [r5], #1
 8010a58:	ec53 2b19 	vmov	r2, r3, d9
 8010a5c:	4680      	mov	r8, r0
 8010a5e:	4689      	mov	r9, r1
 8010a60:	f7f0 f864 	bl	8000b2c <__aeabi_dcmplt>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d164      	bne.n	8010b32 <_dtoa_r+0x62a>
 8010a68:	4642      	mov	r2, r8
 8010a6a:	464b      	mov	r3, r9
 8010a6c:	4937      	ldr	r1, [pc, #220]	; (8010b4c <_dtoa_r+0x644>)
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f7ef fc32 	bl	80002d8 <__aeabi_dsub>
 8010a74:	ec53 2b19 	vmov	r2, r3, d9
 8010a78:	f7f0 f858 	bl	8000b2c <__aeabi_dcmplt>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	f040 80b6 	bne.w	8010bee <_dtoa_r+0x6e6>
 8010a82:	9b02      	ldr	r3, [sp, #8]
 8010a84:	429d      	cmp	r5, r3
 8010a86:	f43f af7c 	beq.w	8010982 <_dtoa_r+0x47a>
 8010a8a:	4b31      	ldr	r3, [pc, #196]	; (8010b50 <_dtoa_r+0x648>)
 8010a8c:	ec51 0b19 	vmov	r0, r1, d9
 8010a90:	2200      	movs	r2, #0
 8010a92:	f7ef fdd9 	bl	8000648 <__aeabi_dmul>
 8010a96:	4b2e      	ldr	r3, [pc, #184]	; (8010b50 <_dtoa_r+0x648>)
 8010a98:	ec41 0b19 	vmov	d9, r0, r1
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	4649      	mov	r1, r9
 8010aa2:	f7ef fdd1 	bl	8000648 <__aeabi_dmul>
 8010aa6:	4680      	mov	r8, r0
 8010aa8:	4689      	mov	r9, r1
 8010aaa:	e7c5      	b.n	8010a38 <_dtoa_r+0x530>
 8010aac:	ec51 0b17 	vmov	r0, r1, d7
 8010ab0:	f7ef fdca 	bl	8000648 <__aeabi_dmul>
 8010ab4:	9b02      	ldr	r3, [sp, #8]
 8010ab6:	9d00      	ldr	r5, [sp, #0]
 8010ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010aba:	ec41 0b19 	vmov	d9, r0, r1
 8010abe:	4649      	mov	r1, r9
 8010ac0:	4640      	mov	r0, r8
 8010ac2:	f7f0 f871 	bl	8000ba8 <__aeabi_d2iz>
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	f7ef fd54 	bl	8000574 <__aeabi_i2d>
 8010acc:	3630      	adds	r6, #48	; 0x30
 8010ace:	4602      	mov	r2, r0
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	4649      	mov	r1, r9
 8010ad6:	f7ef fbff 	bl	80002d8 <__aeabi_dsub>
 8010ada:	f805 6b01 	strb.w	r6, [r5], #1
 8010ade:	9b02      	ldr	r3, [sp, #8]
 8010ae0:	429d      	cmp	r5, r3
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	4689      	mov	r9, r1
 8010ae6:	f04f 0200 	mov.w	r2, #0
 8010aea:	d124      	bne.n	8010b36 <_dtoa_r+0x62e>
 8010aec:	4b1b      	ldr	r3, [pc, #108]	; (8010b5c <_dtoa_r+0x654>)
 8010aee:	ec51 0b19 	vmov	r0, r1, d9
 8010af2:	f7ef fbf3 	bl	80002dc <__adddf3>
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	4640      	mov	r0, r8
 8010afc:	4649      	mov	r1, r9
 8010afe:	f7f0 f833 	bl	8000b68 <__aeabi_dcmpgt>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d173      	bne.n	8010bee <_dtoa_r+0x6e6>
 8010b06:	ec53 2b19 	vmov	r2, r3, d9
 8010b0a:	4914      	ldr	r1, [pc, #80]	; (8010b5c <_dtoa_r+0x654>)
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f7ef fbe3 	bl	80002d8 <__aeabi_dsub>
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	4640      	mov	r0, r8
 8010b18:	4649      	mov	r1, r9
 8010b1a:	f7f0 f807 	bl	8000b2c <__aeabi_dcmplt>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f43f af2f 	beq.w	8010982 <_dtoa_r+0x47a>
 8010b24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010b26:	1e6b      	subs	r3, r5, #1
 8010b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b2e:	2b30      	cmp	r3, #48	; 0x30
 8010b30:	d0f8      	beq.n	8010b24 <_dtoa_r+0x61c>
 8010b32:	46bb      	mov	fp, r7
 8010b34:	e04a      	b.n	8010bcc <_dtoa_r+0x6c4>
 8010b36:	4b06      	ldr	r3, [pc, #24]	; (8010b50 <_dtoa_r+0x648>)
 8010b38:	f7ef fd86 	bl	8000648 <__aeabi_dmul>
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	4689      	mov	r9, r1
 8010b40:	e7bd      	b.n	8010abe <_dtoa_r+0x5b6>
 8010b42:	bf00      	nop
 8010b44:	08015ab8 	.word	0x08015ab8
 8010b48:	08015a90 	.word	0x08015a90
 8010b4c:	3ff00000 	.word	0x3ff00000
 8010b50:	40240000 	.word	0x40240000
 8010b54:	401c0000 	.word	0x401c0000
 8010b58:	40140000 	.word	0x40140000
 8010b5c:	3fe00000 	.word	0x3fe00000
 8010b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010b64:	9d00      	ldr	r5, [sp, #0]
 8010b66:	4642      	mov	r2, r8
 8010b68:	464b      	mov	r3, r9
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	f7ef fe95 	bl	800089c <__aeabi_ddiv>
 8010b72:	f7f0 f819 	bl	8000ba8 <__aeabi_d2iz>
 8010b76:	9001      	str	r0, [sp, #4]
 8010b78:	f7ef fcfc 	bl	8000574 <__aeabi_i2d>
 8010b7c:	4642      	mov	r2, r8
 8010b7e:	464b      	mov	r3, r9
 8010b80:	f7ef fd62 	bl	8000648 <__aeabi_dmul>
 8010b84:	4602      	mov	r2, r0
 8010b86:	460b      	mov	r3, r1
 8010b88:	4630      	mov	r0, r6
 8010b8a:	4639      	mov	r1, r7
 8010b8c:	f7ef fba4 	bl	80002d8 <__aeabi_dsub>
 8010b90:	9e01      	ldr	r6, [sp, #4]
 8010b92:	9f04      	ldr	r7, [sp, #16]
 8010b94:	3630      	adds	r6, #48	; 0x30
 8010b96:	f805 6b01 	strb.w	r6, [r5], #1
 8010b9a:	9e00      	ldr	r6, [sp, #0]
 8010b9c:	1bae      	subs	r6, r5, r6
 8010b9e:	42b7      	cmp	r7, r6
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	d134      	bne.n	8010c10 <_dtoa_r+0x708>
 8010ba6:	f7ef fb99 	bl	80002dc <__adddf3>
 8010baa:	4642      	mov	r2, r8
 8010bac:	464b      	mov	r3, r9
 8010bae:	4606      	mov	r6, r0
 8010bb0:	460f      	mov	r7, r1
 8010bb2:	f7ef ffd9 	bl	8000b68 <__aeabi_dcmpgt>
 8010bb6:	b9c8      	cbnz	r0, 8010bec <_dtoa_r+0x6e4>
 8010bb8:	4642      	mov	r2, r8
 8010bba:	464b      	mov	r3, r9
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	4639      	mov	r1, r7
 8010bc0:	f7ef ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 8010bc4:	b110      	cbz	r0, 8010bcc <_dtoa_r+0x6c4>
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	07db      	lsls	r3, r3, #31
 8010bca:	d40f      	bmi.n	8010bec <_dtoa_r+0x6e4>
 8010bcc:	4651      	mov	r1, sl
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f000 fbcc 	bl	801136c <_Bfree>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bd8:	702b      	strb	r3, [r5, #0]
 8010bda:	f10b 0301 	add.w	r3, fp, #1
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f43f ace2 	beq.w	80105ac <_dtoa_r+0xa4>
 8010be8:	601d      	str	r5, [r3, #0]
 8010bea:	e4df      	b.n	80105ac <_dtoa_r+0xa4>
 8010bec:	465f      	mov	r7, fp
 8010bee:	462b      	mov	r3, r5
 8010bf0:	461d      	mov	r5, r3
 8010bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bf6:	2a39      	cmp	r2, #57	; 0x39
 8010bf8:	d106      	bne.n	8010c08 <_dtoa_r+0x700>
 8010bfa:	9a00      	ldr	r2, [sp, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d1f7      	bne.n	8010bf0 <_dtoa_r+0x6e8>
 8010c00:	9900      	ldr	r1, [sp, #0]
 8010c02:	2230      	movs	r2, #48	; 0x30
 8010c04:	3701      	adds	r7, #1
 8010c06:	700a      	strb	r2, [r1, #0]
 8010c08:	781a      	ldrb	r2, [r3, #0]
 8010c0a:	3201      	adds	r2, #1
 8010c0c:	701a      	strb	r2, [r3, #0]
 8010c0e:	e790      	b.n	8010b32 <_dtoa_r+0x62a>
 8010c10:	4ba3      	ldr	r3, [pc, #652]	; (8010ea0 <_dtoa_r+0x998>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	f7ef fd18 	bl	8000648 <__aeabi_dmul>
 8010c18:	2200      	movs	r2, #0
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	460f      	mov	r7, r1
 8010c20:	f7ef ff7a 	bl	8000b18 <__aeabi_dcmpeq>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	d09e      	beq.n	8010b66 <_dtoa_r+0x65e>
 8010c28:	e7d0      	b.n	8010bcc <_dtoa_r+0x6c4>
 8010c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	f000 80ca 	beq.w	8010dc6 <_dtoa_r+0x8be>
 8010c32:	9a07      	ldr	r2, [sp, #28]
 8010c34:	2a01      	cmp	r2, #1
 8010c36:	f300 80ad 	bgt.w	8010d94 <_dtoa_r+0x88c>
 8010c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	f000 80a5 	beq.w	8010d8c <_dtoa_r+0x884>
 8010c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010c46:	9e08      	ldr	r6, [sp, #32]
 8010c48:	9d05      	ldr	r5, [sp, #20]
 8010c4a:	9a05      	ldr	r2, [sp, #20]
 8010c4c:	441a      	add	r2, r3
 8010c4e:	9205      	str	r2, [sp, #20]
 8010c50:	9a06      	ldr	r2, [sp, #24]
 8010c52:	2101      	movs	r1, #1
 8010c54:	441a      	add	r2, r3
 8010c56:	4620      	mov	r0, r4
 8010c58:	9206      	str	r2, [sp, #24]
 8010c5a:	f000 fc87 	bl	801156c <__i2b>
 8010c5e:	4607      	mov	r7, r0
 8010c60:	b165      	cbz	r5, 8010c7c <_dtoa_r+0x774>
 8010c62:	9b06      	ldr	r3, [sp, #24]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	dd09      	ble.n	8010c7c <_dtoa_r+0x774>
 8010c68:	42ab      	cmp	r3, r5
 8010c6a:	9a05      	ldr	r2, [sp, #20]
 8010c6c:	bfa8      	it	ge
 8010c6e:	462b      	movge	r3, r5
 8010c70:	1ad2      	subs	r2, r2, r3
 8010c72:	9205      	str	r2, [sp, #20]
 8010c74:	9a06      	ldr	r2, [sp, #24]
 8010c76:	1aed      	subs	r5, r5, r3
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	9306      	str	r3, [sp, #24]
 8010c7c:	9b08      	ldr	r3, [sp, #32]
 8010c7e:	b1f3      	cbz	r3, 8010cbe <_dtoa_r+0x7b6>
 8010c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f000 80a3 	beq.w	8010dce <_dtoa_r+0x8c6>
 8010c88:	2e00      	cmp	r6, #0
 8010c8a:	dd10      	ble.n	8010cae <_dtoa_r+0x7a6>
 8010c8c:	4639      	mov	r1, r7
 8010c8e:	4632      	mov	r2, r6
 8010c90:	4620      	mov	r0, r4
 8010c92:	f000 fd2b 	bl	80116ec <__pow5mult>
 8010c96:	4652      	mov	r2, sl
 8010c98:	4601      	mov	r1, r0
 8010c9a:	4607      	mov	r7, r0
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f000 fc7b 	bl	8011598 <__multiply>
 8010ca2:	4651      	mov	r1, sl
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f000 fb60 	bl	801136c <_Bfree>
 8010cac:	46c2      	mov	sl, r8
 8010cae:	9b08      	ldr	r3, [sp, #32]
 8010cb0:	1b9a      	subs	r2, r3, r6
 8010cb2:	d004      	beq.n	8010cbe <_dtoa_r+0x7b6>
 8010cb4:	4651      	mov	r1, sl
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 fd18 	bl	80116ec <__pow5mult>
 8010cbc:	4682      	mov	sl, r0
 8010cbe:	2101      	movs	r1, #1
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f000 fc53 	bl	801156c <__i2b>
 8010cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	4606      	mov	r6, r0
 8010ccc:	f340 8081 	ble.w	8010dd2 <_dtoa_r+0x8ca>
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	4601      	mov	r1, r0
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	f000 fd09 	bl	80116ec <__pow5mult>
 8010cda:	9b07      	ldr	r3, [sp, #28]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	4606      	mov	r6, r0
 8010ce0:	dd7a      	ble.n	8010dd8 <_dtoa_r+0x8d0>
 8010ce2:	f04f 0800 	mov.w	r8, #0
 8010ce6:	6933      	ldr	r3, [r6, #16]
 8010ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010cec:	6918      	ldr	r0, [r3, #16]
 8010cee:	f000 fbef 	bl	80114d0 <__hi0bits>
 8010cf2:	f1c0 0020 	rsb	r0, r0, #32
 8010cf6:	9b06      	ldr	r3, [sp, #24]
 8010cf8:	4418      	add	r0, r3
 8010cfa:	f010 001f 	ands.w	r0, r0, #31
 8010cfe:	f000 8094 	beq.w	8010e2a <_dtoa_r+0x922>
 8010d02:	f1c0 0320 	rsb	r3, r0, #32
 8010d06:	2b04      	cmp	r3, #4
 8010d08:	f340 8085 	ble.w	8010e16 <_dtoa_r+0x90e>
 8010d0c:	9b05      	ldr	r3, [sp, #20]
 8010d0e:	f1c0 001c 	rsb	r0, r0, #28
 8010d12:	4403      	add	r3, r0
 8010d14:	9305      	str	r3, [sp, #20]
 8010d16:	9b06      	ldr	r3, [sp, #24]
 8010d18:	4403      	add	r3, r0
 8010d1a:	4405      	add	r5, r0
 8010d1c:	9306      	str	r3, [sp, #24]
 8010d1e:	9b05      	ldr	r3, [sp, #20]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	dd05      	ble.n	8010d30 <_dtoa_r+0x828>
 8010d24:	4651      	mov	r1, sl
 8010d26:	461a      	mov	r2, r3
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fd39 	bl	80117a0 <__lshift>
 8010d2e:	4682      	mov	sl, r0
 8010d30:	9b06      	ldr	r3, [sp, #24]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	dd05      	ble.n	8010d42 <_dtoa_r+0x83a>
 8010d36:	4631      	mov	r1, r6
 8010d38:	461a      	mov	r2, r3
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f000 fd30 	bl	80117a0 <__lshift>
 8010d40:	4606      	mov	r6, r0
 8010d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d072      	beq.n	8010e2e <_dtoa_r+0x926>
 8010d48:	4631      	mov	r1, r6
 8010d4a:	4650      	mov	r0, sl
 8010d4c:	f000 fd94 	bl	8011878 <__mcmp>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	da6c      	bge.n	8010e2e <_dtoa_r+0x926>
 8010d54:	2300      	movs	r3, #0
 8010d56:	4651      	mov	r1, sl
 8010d58:	220a      	movs	r2, #10
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f000 fb28 	bl	80113b0 <__multadd>
 8010d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010d66:	4682      	mov	sl, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 81b0 	beq.w	80110ce <_dtoa_r+0xbc6>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	4639      	mov	r1, r7
 8010d72:	220a      	movs	r2, #10
 8010d74:	4620      	mov	r0, r4
 8010d76:	f000 fb1b 	bl	80113b0 <__multadd>
 8010d7a:	9b01      	ldr	r3, [sp, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	4607      	mov	r7, r0
 8010d80:	f300 8096 	bgt.w	8010eb0 <_dtoa_r+0x9a8>
 8010d84:	9b07      	ldr	r3, [sp, #28]
 8010d86:	2b02      	cmp	r3, #2
 8010d88:	dc59      	bgt.n	8010e3e <_dtoa_r+0x936>
 8010d8a:	e091      	b.n	8010eb0 <_dtoa_r+0x9a8>
 8010d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d92:	e758      	b.n	8010c46 <_dtoa_r+0x73e>
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	1e5e      	subs	r6, r3, #1
 8010d98:	9b08      	ldr	r3, [sp, #32]
 8010d9a:	42b3      	cmp	r3, r6
 8010d9c:	bfbf      	itttt	lt
 8010d9e:	9b08      	ldrlt	r3, [sp, #32]
 8010da0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010da2:	9608      	strlt	r6, [sp, #32]
 8010da4:	1af3      	sublt	r3, r6, r3
 8010da6:	bfb4      	ite	lt
 8010da8:	18d2      	addlt	r2, r2, r3
 8010daa:	1b9e      	subge	r6, r3, r6
 8010dac:	9b04      	ldr	r3, [sp, #16]
 8010dae:	bfbc      	itt	lt
 8010db0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010db2:	2600      	movlt	r6, #0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	bfb7      	itett	lt
 8010db8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010dbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010dc0:	1a9d      	sublt	r5, r3, r2
 8010dc2:	2300      	movlt	r3, #0
 8010dc4:	e741      	b.n	8010c4a <_dtoa_r+0x742>
 8010dc6:	9e08      	ldr	r6, [sp, #32]
 8010dc8:	9d05      	ldr	r5, [sp, #20]
 8010dca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010dcc:	e748      	b.n	8010c60 <_dtoa_r+0x758>
 8010dce:	9a08      	ldr	r2, [sp, #32]
 8010dd0:	e770      	b.n	8010cb4 <_dtoa_r+0x7ac>
 8010dd2:	9b07      	ldr	r3, [sp, #28]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	dc19      	bgt.n	8010e0c <_dtoa_r+0x904>
 8010dd8:	9b02      	ldr	r3, [sp, #8]
 8010dda:	b9bb      	cbnz	r3, 8010e0c <_dtoa_r+0x904>
 8010ddc:	9b03      	ldr	r3, [sp, #12]
 8010dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010de2:	b99b      	cbnz	r3, 8010e0c <_dtoa_r+0x904>
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010dea:	0d1b      	lsrs	r3, r3, #20
 8010dec:	051b      	lsls	r3, r3, #20
 8010dee:	b183      	cbz	r3, 8010e12 <_dtoa_r+0x90a>
 8010df0:	9b05      	ldr	r3, [sp, #20]
 8010df2:	3301      	adds	r3, #1
 8010df4:	9305      	str	r3, [sp, #20]
 8010df6:	9b06      	ldr	r3, [sp, #24]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	9306      	str	r3, [sp, #24]
 8010dfc:	f04f 0801 	mov.w	r8, #1
 8010e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f af6f 	bne.w	8010ce6 <_dtoa_r+0x7de>
 8010e08:	2001      	movs	r0, #1
 8010e0a:	e774      	b.n	8010cf6 <_dtoa_r+0x7ee>
 8010e0c:	f04f 0800 	mov.w	r8, #0
 8010e10:	e7f6      	b.n	8010e00 <_dtoa_r+0x8f8>
 8010e12:	4698      	mov	r8, r3
 8010e14:	e7f4      	b.n	8010e00 <_dtoa_r+0x8f8>
 8010e16:	d082      	beq.n	8010d1e <_dtoa_r+0x816>
 8010e18:	9a05      	ldr	r2, [sp, #20]
 8010e1a:	331c      	adds	r3, #28
 8010e1c:	441a      	add	r2, r3
 8010e1e:	9205      	str	r2, [sp, #20]
 8010e20:	9a06      	ldr	r2, [sp, #24]
 8010e22:	441a      	add	r2, r3
 8010e24:	441d      	add	r5, r3
 8010e26:	9206      	str	r2, [sp, #24]
 8010e28:	e779      	b.n	8010d1e <_dtoa_r+0x816>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	e7f4      	b.n	8010e18 <_dtoa_r+0x910>
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dc37      	bgt.n	8010ea4 <_dtoa_r+0x99c>
 8010e34:	9b07      	ldr	r3, [sp, #28]
 8010e36:	2b02      	cmp	r3, #2
 8010e38:	dd34      	ble.n	8010ea4 <_dtoa_r+0x99c>
 8010e3a:	9b04      	ldr	r3, [sp, #16]
 8010e3c:	9301      	str	r3, [sp, #4]
 8010e3e:	9b01      	ldr	r3, [sp, #4]
 8010e40:	b963      	cbnz	r3, 8010e5c <_dtoa_r+0x954>
 8010e42:	4631      	mov	r1, r6
 8010e44:	2205      	movs	r2, #5
 8010e46:	4620      	mov	r0, r4
 8010e48:	f000 fab2 	bl	80113b0 <__multadd>
 8010e4c:	4601      	mov	r1, r0
 8010e4e:	4606      	mov	r6, r0
 8010e50:	4650      	mov	r0, sl
 8010e52:	f000 fd11 	bl	8011878 <__mcmp>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	f73f adbb 	bgt.w	80109d2 <_dtoa_r+0x4ca>
 8010e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5e:	9d00      	ldr	r5, [sp, #0]
 8010e60:	ea6f 0b03 	mvn.w	fp, r3
 8010e64:	f04f 0800 	mov.w	r8, #0
 8010e68:	4631      	mov	r1, r6
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fa7e 	bl	801136c <_Bfree>
 8010e70:	2f00      	cmp	r7, #0
 8010e72:	f43f aeab 	beq.w	8010bcc <_dtoa_r+0x6c4>
 8010e76:	f1b8 0f00 	cmp.w	r8, #0
 8010e7a:	d005      	beq.n	8010e88 <_dtoa_r+0x980>
 8010e7c:	45b8      	cmp	r8, r7
 8010e7e:	d003      	beq.n	8010e88 <_dtoa_r+0x980>
 8010e80:	4641      	mov	r1, r8
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fa72 	bl	801136c <_Bfree>
 8010e88:	4639      	mov	r1, r7
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f000 fa6e 	bl	801136c <_Bfree>
 8010e90:	e69c      	b.n	8010bcc <_dtoa_r+0x6c4>
 8010e92:	2600      	movs	r6, #0
 8010e94:	4637      	mov	r7, r6
 8010e96:	e7e1      	b.n	8010e5c <_dtoa_r+0x954>
 8010e98:	46bb      	mov	fp, r7
 8010e9a:	4637      	mov	r7, r6
 8010e9c:	e599      	b.n	80109d2 <_dtoa_r+0x4ca>
 8010e9e:	bf00      	nop
 8010ea0:	40240000 	.word	0x40240000
 8010ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f000 80c8 	beq.w	801103c <_dtoa_r+0xb34>
 8010eac:	9b04      	ldr	r3, [sp, #16]
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	2d00      	cmp	r5, #0
 8010eb2:	dd05      	ble.n	8010ec0 <_dtoa_r+0x9b8>
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	462a      	mov	r2, r5
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 fc71 	bl	80117a0 <__lshift>
 8010ebe:	4607      	mov	r7, r0
 8010ec0:	f1b8 0f00 	cmp.w	r8, #0
 8010ec4:	d05b      	beq.n	8010f7e <_dtoa_r+0xa76>
 8010ec6:	6879      	ldr	r1, [r7, #4]
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f000 fa0f 	bl	80112ec <_Balloc>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	b928      	cbnz	r0, 8010ede <_dtoa_r+0x9d6>
 8010ed2:	4b83      	ldr	r3, [pc, #524]	; (80110e0 <_dtoa_r+0xbd8>)
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010eda:	f7ff bb2e 	b.w	801053a <_dtoa_r+0x32>
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	3202      	adds	r2, #2
 8010ee2:	0092      	lsls	r2, r2, #2
 8010ee4:	f107 010c 	add.w	r1, r7, #12
 8010ee8:	300c      	adds	r0, #12
 8010eea:	f7ff fa70 	bl	80103ce <memcpy>
 8010eee:	2201      	movs	r2, #1
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f000 fc54 	bl	80117a0 <__lshift>
 8010ef8:	9b00      	ldr	r3, [sp, #0]
 8010efa:	3301      	adds	r3, #1
 8010efc:	9304      	str	r3, [sp, #16]
 8010efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f02:	4413      	add	r3, r2
 8010f04:	9308      	str	r3, [sp, #32]
 8010f06:	9b02      	ldr	r3, [sp, #8]
 8010f08:	f003 0301 	and.w	r3, r3, #1
 8010f0c:	46b8      	mov	r8, r7
 8010f0e:	9306      	str	r3, [sp, #24]
 8010f10:	4607      	mov	r7, r0
 8010f12:	9b04      	ldr	r3, [sp, #16]
 8010f14:	4631      	mov	r1, r6
 8010f16:	3b01      	subs	r3, #1
 8010f18:	4650      	mov	r0, sl
 8010f1a:	9301      	str	r3, [sp, #4]
 8010f1c:	f7ff fa6c 	bl	80103f8 <quorem>
 8010f20:	4641      	mov	r1, r8
 8010f22:	9002      	str	r0, [sp, #8]
 8010f24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010f28:	4650      	mov	r0, sl
 8010f2a:	f000 fca5 	bl	8011878 <__mcmp>
 8010f2e:	463a      	mov	r2, r7
 8010f30:	9005      	str	r0, [sp, #20]
 8010f32:	4631      	mov	r1, r6
 8010f34:	4620      	mov	r0, r4
 8010f36:	f000 fcbb 	bl	80118b0 <__mdiff>
 8010f3a:	68c2      	ldr	r2, [r0, #12]
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	bb02      	cbnz	r2, 8010f82 <_dtoa_r+0xa7a>
 8010f40:	4601      	mov	r1, r0
 8010f42:	4650      	mov	r0, sl
 8010f44:	f000 fc98 	bl	8011878 <__mcmp>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	4629      	mov	r1, r5
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f50:	f000 fa0c 	bl	801136c <_Bfree>
 8010f54:	9b07      	ldr	r3, [sp, #28]
 8010f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f58:	9d04      	ldr	r5, [sp, #16]
 8010f5a:	ea43 0102 	orr.w	r1, r3, r2
 8010f5e:	9b06      	ldr	r3, [sp, #24]
 8010f60:	4319      	orrs	r1, r3
 8010f62:	d110      	bne.n	8010f86 <_dtoa_r+0xa7e>
 8010f64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010f68:	d029      	beq.n	8010fbe <_dtoa_r+0xab6>
 8010f6a:	9b05      	ldr	r3, [sp, #20]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	dd02      	ble.n	8010f76 <_dtoa_r+0xa6e>
 8010f70:	9b02      	ldr	r3, [sp, #8]
 8010f72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	f883 9000 	strb.w	r9, [r3]
 8010f7c:	e774      	b.n	8010e68 <_dtoa_r+0x960>
 8010f7e:	4638      	mov	r0, r7
 8010f80:	e7ba      	b.n	8010ef8 <_dtoa_r+0x9f0>
 8010f82:	2201      	movs	r2, #1
 8010f84:	e7e1      	b.n	8010f4a <_dtoa_r+0xa42>
 8010f86:	9b05      	ldr	r3, [sp, #20]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	db04      	blt.n	8010f96 <_dtoa_r+0xa8e>
 8010f8c:	9907      	ldr	r1, [sp, #28]
 8010f8e:	430b      	orrs	r3, r1
 8010f90:	9906      	ldr	r1, [sp, #24]
 8010f92:	430b      	orrs	r3, r1
 8010f94:	d120      	bne.n	8010fd8 <_dtoa_r+0xad0>
 8010f96:	2a00      	cmp	r2, #0
 8010f98:	dded      	ble.n	8010f76 <_dtoa_r+0xa6e>
 8010f9a:	4651      	mov	r1, sl
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 fbfe 	bl	80117a0 <__lshift>
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	4682      	mov	sl, r0
 8010fa8:	f000 fc66 	bl	8011878 <__mcmp>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	dc03      	bgt.n	8010fb8 <_dtoa_r+0xab0>
 8010fb0:	d1e1      	bne.n	8010f76 <_dtoa_r+0xa6e>
 8010fb2:	f019 0f01 	tst.w	r9, #1
 8010fb6:	d0de      	beq.n	8010f76 <_dtoa_r+0xa6e>
 8010fb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fbc:	d1d8      	bne.n	8010f70 <_dtoa_r+0xa68>
 8010fbe:	9a01      	ldr	r2, [sp, #4]
 8010fc0:	2339      	movs	r3, #57	; 0x39
 8010fc2:	7013      	strb	r3, [r2, #0]
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	461d      	mov	r5, r3
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010fce:	2a39      	cmp	r2, #57	; 0x39
 8010fd0:	d06c      	beq.n	80110ac <_dtoa_r+0xba4>
 8010fd2:	3201      	adds	r2, #1
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e747      	b.n	8010e68 <_dtoa_r+0x960>
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dd07      	ble.n	8010fec <_dtoa_r+0xae4>
 8010fdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fe0:	d0ed      	beq.n	8010fbe <_dtoa_r+0xab6>
 8010fe2:	9a01      	ldr	r2, [sp, #4]
 8010fe4:	f109 0301 	add.w	r3, r9, #1
 8010fe8:	7013      	strb	r3, [r2, #0]
 8010fea:	e73d      	b.n	8010e68 <_dtoa_r+0x960>
 8010fec:	9b04      	ldr	r3, [sp, #16]
 8010fee:	9a08      	ldr	r2, [sp, #32]
 8010ff0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d043      	beq.n	8011080 <_dtoa_r+0xb78>
 8010ff8:	4651      	mov	r1, sl
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	220a      	movs	r2, #10
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 f9d6 	bl	80113b0 <__multadd>
 8011004:	45b8      	cmp	r8, r7
 8011006:	4682      	mov	sl, r0
 8011008:	f04f 0300 	mov.w	r3, #0
 801100c:	f04f 020a 	mov.w	r2, #10
 8011010:	4641      	mov	r1, r8
 8011012:	4620      	mov	r0, r4
 8011014:	d107      	bne.n	8011026 <_dtoa_r+0xb1e>
 8011016:	f000 f9cb 	bl	80113b0 <__multadd>
 801101a:	4680      	mov	r8, r0
 801101c:	4607      	mov	r7, r0
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	3301      	adds	r3, #1
 8011022:	9304      	str	r3, [sp, #16]
 8011024:	e775      	b.n	8010f12 <_dtoa_r+0xa0a>
 8011026:	f000 f9c3 	bl	80113b0 <__multadd>
 801102a:	4639      	mov	r1, r7
 801102c:	4680      	mov	r8, r0
 801102e:	2300      	movs	r3, #0
 8011030:	220a      	movs	r2, #10
 8011032:	4620      	mov	r0, r4
 8011034:	f000 f9bc 	bl	80113b0 <__multadd>
 8011038:	4607      	mov	r7, r0
 801103a:	e7f0      	b.n	801101e <_dtoa_r+0xb16>
 801103c:	9b04      	ldr	r3, [sp, #16]
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	9d00      	ldr	r5, [sp, #0]
 8011042:	4631      	mov	r1, r6
 8011044:	4650      	mov	r0, sl
 8011046:	f7ff f9d7 	bl	80103f8 <quorem>
 801104a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801104e:	9b00      	ldr	r3, [sp, #0]
 8011050:	f805 9b01 	strb.w	r9, [r5], #1
 8011054:	1aea      	subs	r2, r5, r3
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	4293      	cmp	r3, r2
 801105a:	dd07      	ble.n	801106c <_dtoa_r+0xb64>
 801105c:	4651      	mov	r1, sl
 801105e:	2300      	movs	r3, #0
 8011060:	220a      	movs	r2, #10
 8011062:	4620      	mov	r0, r4
 8011064:	f000 f9a4 	bl	80113b0 <__multadd>
 8011068:	4682      	mov	sl, r0
 801106a:	e7ea      	b.n	8011042 <_dtoa_r+0xb3a>
 801106c:	9b01      	ldr	r3, [sp, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	bfc8      	it	gt
 8011072:	461d      	movgt	r5, r3
 8011074:	9b00      	ldr	r3, [sp, #0]
 8011076:	bfd8      	it	le
 8011078:	2501      	movle	r5, #1
 801107a:	441d      	add	r5, r3
 801107c:	f04f 0800 	mov.w	r8, #0
 8011080:	4651      	mov	r1, sl
 8011082:	2201      	movs	r2, #1
 8011084:	4620      	mov	r0, r4
 8011086:	f000 fb8b 	bl	80117a0 <__lshift>
 801108a:	4631      	mov	r1, r6
 801108c:	4682      	mov	sl, r0
 801108e:	f000 fbf3 	bl	8011878 <__mcmp>
 8011092:	2800      	cmp	r0, #0
 8011094:	dc96      	bgt.n	8010fc4 <_dtoa_r+0xabc>
 8011096:	d102      	bne.n	801109e <_dtoa_r+0xb96>
 8011098:	f019 0f01 	tst.w	r9, #1
 801109c:	d192      	bne.n	8010fc4 <_dtoa_r+0xabc>
 801109e:	462b      	mov	r3, r5
 80110a0:	461d      	mov	r5, r3
 80110a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110a6:	2a30      	cmp	r2, #48	; 0x30
 80110a8:	d0fa      	beq.n	80110a0 <_dtoa_r+0xb98>
 80110aa:	e6dd      	b.n	8010e68 <_dtoa_r+0x960>
 80110ac:	9a00      	ldr	r2, [sp, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d189      	bne.n	8010fc6 <_dtoa_r+0xabe>
 80110b2:	f10b 0b01 	add.w	fp, fp, #1
 80110b6:	2331      	movs	r3, #49	; 0x31
 80110b8:	e796      	b.n	8010fe8 <_dtoa_r+0xae0>
 80110ba:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <_dtoa_r+0xbdc>)
 80110bc:	f7ff ba99 	b.w	80105f2 <_dtoa_r+0xea>
 80110c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f47f aa6d 	bne.w	80105a2 <_dtoa_r+0x9a>
 80110c8:	4b07      	ldr	r3, [pc, #28]	; (80110e8 <_dtoa_r+0xbe0>)
 80110ca:	f7ff ba92 	b.w	80105f2 <_dtoa_r+0xea>
 80110ce:	9b01      	ldr	r3, [sp, #4]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	dcb5      	bgt.n	8011040 <_dtoa_r+0xb38>
 80110d4:	9b07      	ldr	r3, [sp, #28]
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	f73f aeb1 	bgt.w	8010e3e <_dtoa_r+0x936>
 80110dc:	e7b0      	b.n	8011040 <_dtoa_r+0xb38>
 80110de:	bf00      	nop
 80110e0:	08015a1f 	.word	0x08015a1f
 80110e4:	08015d08 	.word	0x08015d08
 80110e8:	080159a3 	.word	0x080159a3

080110ec <_free_r>:
 80110ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110ee:	2900      	cmp	r1, #0
 80110f0:	d044      	beq.n	801117c <_free_r+0x90>
 80110f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110f6:	9001      	str	r0, [sp, #4]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f1a1 0404 	sub.w	r4, r1, #4
 80110fe:	bfb8      	it	lt
 8011100:	18e4      	addlt	r4, r4, r3
 8011102:	f000 f8e7 	bl	80112d4 <__malloc_lock>
 8011106:	4a1e      	ldr	r2, [pc, #120]	; (8011180 <_free_r+0x94>)
 8011108:	9801      	ldr	r0, [sp, #4]
 801110a:	6813      	ldr	r3, [r2, #0]
 801110c:	b933      	cbnz	r3, 801111c <_free_r+0x30>
 801110e:	6063      	str	r3, [r4, #4]
 8011110:	6014      	str	r4, [r2, #0]
 8011112:	b003      	add	sp, #12
 8011114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011118:	f000 b8e2 	b.w	80112e0 <__malloc_unlock>
 801111c:	42a3      	cmp	r3, r4
 801111e:	d908      	bls.n	8011132 <_free_r+0x46>
 8011120:	6825      	ldr	r5, [r4, #0]
 8011122:	1961      	adds	r1, r4, r5
 8011124:	428b      	cmp	r3, r1
 8011126:	bf01      	itttt	eq
 8011128:	6819      	ldreq	r1, [r3, #0]
 801112a:	685b      	ldreq	r3, [r3, #4]
 801112c:	1949      	addeq	r1, r1, r5
 801112e:	6021      	streq	r1, [r4, #0]
 8011130:	e7ed      	b.n	801110e <_free_r+0x22>
 8011132:	461a      	mov	r2, r3
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	b10b      	cbz	r3, 801113c <_free_r+0x50>
 8011138:	42a3      	cmp	r3, r4
 801113a:	d9fa      	bls.n	8011132 <_free_r+0x46>
 801113c:	6811      	ldr	r1, [r2, #0]
 801113e:	1855      	adds	r5, r2, r1
 8011140:	42a5      	cmp	r5, r4
 8011142:	d10b      	bne.n	801115c <_free_r+0x70>
 8011144:	6824      	ldr	r4, [r4, #0]
 8011146:	4421      	add	r1, r4
 8011148:	1854      	adds	r4, r2, r1
 801114a:	42a3      	cmp	r3, r4
 801114c:	6011      	str	r1, [r2, #0]
 801114e:	d1e0      	bne.n	8011112 <_free_r+0x26>
 8011150:	681c      	ldr	r4, [r3, #0]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	6053      	str	r3, [r2, #4]
 8011156:	440c      	add	r4, r1
 8011158:	6014      	str	r4, [r2, #0]
 801115a:	e7da      	b.n	8011112 <_free_r+0x26>
 801115c:	d902      	bls.n	8011164 <_free_r+0x78>
 801115e:	230c      	movs	r3, #12
 8011160:	6003      	str	r3, [r0, #0]
 8011162:	e7d6      	b.n	8011112 <_free_r+0x26>
 8011164:	6825      	ldr	r5, [r4, #0]
 8011166:	1961      	adds	r1, r4, r5
 8011168:	428b      	cmp	r3, r1
 801116a:	bf04      	itt	eq
 801116c:	6819      	ldreq	r1, [r3, #0]
 801116e:	685b      	ldreq	r3, [r3, #4]
 8011170:	6063      	str	r3, [r4, #4]
 8011172:	bf04      	itt	eq
 8011174:	1949      	addeq	r1, r1, r5
 8011176:	6021      	streq	r1, [r4, #0]
 8011178:	6054      	str	r4, [r2, #4]
 801117a:	e7ca      	b.n	8011112 <_free_r+0x26>
 801117c:	b003      	add	sp, #12
 801117e:	bd30      	pop	{r4, r5, pc}
 8011180:	20004aec 	.word	0x20004aec

08011184 <malloc>:
 8011184:	4b02      	ldr	r3, [pc, #8]	; (8011190 <malloc+0xc>)
 8011186:	4601      	mov	r1, r0
 8011188:	6818      	ldr	r0, [r3, #0]
 801118a:	f000 b823 	b.w	80111d4 <_malloc_r>
 801118e:	bf00      	nop
 8011190:	20000070 	.word	0x20000070

08011194 <sbrk_aligned>:
 8011194:	b570      	push	{r4, r5, r6, lr}
 8011196:	4e0e      	ldr	r6, [pc, #56]	; (80111d0 <sbrk_aligned+0x3c>)
 8011198:	460c      	mov	r4, r1
 801119a:	6831      	ldr	r1, [r6, #0]
 801119c:	4605      	mov	r5, r0
 801119e:	b911      	cbnz	r1, 80111a6 <sbrk_aligned+0x12>
 80111a0:	f002 f99c 	bl	80134dc <_sbrk_r>
 80111a4:	6030      	str	r0, [r6, #0]
 80111a6:	4621      	mov	r1, r4
 80111a8:	4628      	mov	r0, r5
 80111aa:	f002 f997 	bl	80134dc <_sbrk_r>
 80111ae:	1c43      	adds	r3, r0, #1
 80111b0:	d00a      	beq.n	80111c8 <sbrk_aligned+0x34>
 80111b2:	1cc4      	adds	r4, r0, #3
 80111b4:	f024 0403 	bic.w	r4, r4, #3
 80111b8:	42a0      	cmp	r0, r4
 80111ba:	d007      	beq.n	80111cc <sbrk_aligned+0x38>
 80111bc:	1a21      	subs	r1, r4, r0
 80111be:	4628      	mov	r0, r5
 80111c0:	f002 f98c 	bl	80134dc <_sbrk_r>
 80111c4:	3001      	adds	r0, #1
 80111c6:	d101      	bne.n	80111cc <sbrk_aligned+0x38>
 80111c8:	f04f 34ff 	mov.w	r4, #4294967295
 80111cc:	4620      	mov	r0, r4
 80111ce:	bd70      	pop	{r4, r5, r6, pc}
 80111d0:	20004af0 	.word	0x20004af0

080111d4 <_malloc_r>:
 80111d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d8:	1ccd      	adds	r5, r1, #3
 80111da:	f025 0503 	bic.w	r5, r5, #3
 80111de:	3508      	adds	r5, #8
 80111e0:	2d0c      	cmp	r5, #12
 80111e2:	bf38      	it	cc
 80111e4:	250c      	movcc	r5, #12
 80111e6:	2d00      	cmp	r5, #0
 80111e8:	4607      	mov	r7, r0
 80111ea:	db01      	blt.n	80111f0 <_malloc_r+0x1c>
 80111ec:	42a9      	cmp	r1, r5
 80111ee:	d905      	bls.n	80111fc <_malloc_r+0x28>
 80111f0:	230c      	movs	r3, #12
 80111f2:	603b      	str	r3, [r7, #0]
 80111f4:	2600      	movs	r6, #0
 80111f6:	4630      	mov	r0, r6
 80111f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80112d0 <_malloc_r+0xfc>
 8011200:	f000 f868 	bl	80112d4 <__malloc_lock>
 8011204:	f8d8 3000 	ldr.w	r3, [r8]
 8011208:	461c      	mov	r4, r3
 801120a:	bb5c      	cbnz	r4, 8011264 <_malloc_r+0x90>
 801120c:	4629      	mov	r1, r5
 801120e:	4638      	mov	r0, r7
 8011210:	f7ff ffc0 	bl	8011194 <sbrk_aligned>
 8011214:	1c43      	adds	r3, r0, #1
 8011216:	4604      	mov	r4, r0
 8011218:	d155      	bne.n	80112c6 <_malloc_r+0xf2>
 801121a:	f8d8 4000 	ldr.w	r4, [r8]
 801121e:	4626      	mov	r6, r4
 8011220:	2e00      	cmp	r6, #0
 8011222:	d145      	bne.n	80112b0 <_malloc_r+0xdc>
 8011224:	2c00      	cmp	r4, #0
 8011226:	d048      	beq.n	80112ba <_malloc_r+0xe6>
 8011228:	6823      	ldr	r3, [r4, #0]
 801122a:	4631      	mov	r1, r6
 801122c:	4638      	mov	r0, r7
 801122e:	eb04 0903 	add.w	r9, r4, r3
 8011232:	f002 f953 	bl	80134dc <_sbrk_r>
 8011236:	4581      	cmp	r9, r0
 8011238:	d13f      	bne.n	80112ba <_malloc_r+0xe6>
 801123a:	6821      	ldr	r1, [r4, #0]
 801123c:	1a6d      	subs	r5, r5, r1
 801123e:	4629      	mov	r1, r5
 8011240:	4638      	mov	r0, r7
 8011242:	f7ff ffa7 	bl	8011194 <sbrk_aligned>
 8011246:	3001      	adds	r0, #1
 8011248:	d037      	beq.n	80112ba <_malloc_r+0xe6>
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	442b      	add	r3, r5
 801124e:	6023      	str	r3, [r4, #0]
 8011250:	f8d8 3000 	ldr.w	r3, [r8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d038      	beq.n	80112ca <_malloc_r+0xf6>
 8011258:	685a      	ldr	r2, [r3, #4]
 801125a:	42a2      	cmp	r2, r4
 801125c:	d12b      	bne.n	80112b6 <_malloc_r+0xe2>
 801125e:	2200      	movs	r2, #0
 8011260:	605a      	str	r2, [r3, #4]
 8011262:	e00f      	b.n	8011284 <_malloc_r+0xb0>
 8011264:	6822      	ldr	r2, [r4, #0]
 8011266:	1b52      	subs	r2, r2, r5
 8011268:	d41f      	bmi.n	80112aa <_malloc_r+0xd6>
 801126a:	2a0b      	cmp	r2, #11
 801126c:	d917      	bls.n	801129e <_malloc_r+0xca>
 801126e:	1961      	adds	r1, r4, r5
 8011270:	42a3      	cmp	r3, r4
 8011272:	6025      	str	r5, [r4, #0]
 8011274:	bf18      	it	ne
 8011276:	6059      	strne	r1, [r3, #4]
 8011278:	6863      	ldr	r3, [r4, #4]
 801127a:	bf08      	it	eq
 801127c:	f8c8 1000 	streq.w	r1, [r8]
 8011280:	5162      	str	r2, [r4, r5]
 8011282:	604b      	str	r3, [r1, #4]
 8011284:	4638      	mov	r0, r7
 8011286:	f104 060b 	add.w	r6, r4, #11
 801128a:	f000 f829 	bl	80112e0 <__malloc_unlock>
 801128e:	f026 0607 	bic.w	r6, r6, #7
 8011292:	1d23      	adds	r3, r4, #4
 8011294:	1af2      	subs	r2, r6, r3
 8011296:	d0ae      	beq.n	80111f6 <_malloc_r+0x22>
 8011298:	1b9b      	subs	r3, r3, r6
 801129a:	50a3      	str	r3, [r4, r2]
 801129c:	e7ab      	b.n	80111f6 <_malloc_r+0x22>
 801129e:	42a3      	cmp	r3, r4
 80112a0:	6862      	ldr	r2, [r4, #4]
 80112a2:	d1dd      	bne.n	8011260 <_malloc_r+0x8c>
 80112a4:	f8c8 2000 	str.w	r2, [r8]
 80112a8:	e7ec      	b.n	8011284 <_malloc_r+0xb0>
 80112aa:	4623      	mov	r3, r4
 80112ac:	6864      	ldr	r4, [r4, #4]
 80112ae:	e7ac      	b.n	801120a <_malloc_r+0x36>
 80112b0:	4634      	mov	r4, r6
 80112b2:	6876      	ldr	r6, [r6, #4]
 80112b4:	e7b4      	b.n	8011220 <_malloc_r+0x4c>
 80112b6:	4613      	mov	r3, r2
 80112b8:	e7cc      	b.n	8011254 <_malloc_r+0x80>
 80112ba:	230c      	movs	r3, #12
 80112bc:	603b      	str	r3, [r7, #0]
 80112be:	4638      	mov	r0, r7
 80112c0:	f000 f80e 	bl	80112e0 <__malloc_unlock>
 80112c4:	e797      	b.n	80111f6 <_malloc_r+0x22>
 80112c6:	6025      	str	r5, [r4, #0]
 80112c8:	e7dc      	b.n	8011284 <_malloc_r+0xb0>
 80112ca:	605b      	str	r3, [r3, #4]
 80112cc:	deff      	udf	#255	; 0xff
 80112ce:	bf00      	nop
 80112d0:	20004aec 	.word	0x20004aec

080112d4 <__malloc_lock>:
 80112d4:	4801      	ldr	r0, [pc, #4]	; (80112dc <__malloc_lock+0x8>)
 80112d6:	f7ff b878 	b.w	80103ca <__retarget_lock_acquire_recursive>
 80112da:	bf00      	nop
 80112dc:	20004ae8 	.word	0x20004ae8

080112e0 <__malloc_unlock>:
 80112e0:	4801      	ldr	r0, [pc, #4]	; (80112e8 <__malloc_unlock+0x8>)
 80112e2:	f7ff b873 	b.w	80103cc <__retarget_lock_release_recursive>
 80112e6:	bf00      	nop
 80112e8:	20004ae8 	.word	0x20004ae8

080112ec <_Balloc>:
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	69c6      	ldr	r6, [r0, #28]
 80112f0:	4604      	mov	r4, r0
 80112f2:	460d      	mov	r5, r1
 80112f4:	b976      	cbnz	r6, 8011314 <_Balloc+0x28>
 80112f6:	2010      	movs	r0, #16
 80112f8:	f7ff ff44 	bl	8011184 <malloc>
 80112fc:	4602      	mov	r2, r0
 80112fe:	61e0      	str	r0, [r4, #28]
 8011300:	b920      	cbnz	r0, 801130c <_Balloc+0x20>
 8011302:	4b18      	ldr	r3, [pc, #96]	; (8011364 <_Balloc+0x78>)
 8011304:	4818      	ldr	r0, [pc, #96]	; (8011368 <_Balloc+0x7c>)
 8011306:	216b      	movs	r1, #107	; 0x6b
 8011308:	f002 f902 	bl	8013510 <__assert_func>
 801130c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011310:	6006      	str	r6, [r0, #0]
 8011312:	60c6      	str	r6, [r0, #12]
 8011314:	69e6      	ldr	r6, [r4, #28]
 8011316:	68f3      	ldr	r3, [r6, #12]
 8011318:	b183      	cbz	r3, 801133c <_Balloc+0x50>
 801131a:	69e3      	ldr	r3, [r4, #28]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011322:	b9b8      	cbnz	r0, 8011354 <_Balloc+0x68>
 8011324:	2101      	movs	r1, #1
 8011326:	fa01 f605 	lsl.w	r6, r1, r5
 801132a:	1d72      	adds	r2, r6, #5
 801132c:	0092      	lsls	r2, r2, #2
 801132e:	4620      	mov	r0, r4
 8011330:	f002 f90c 	bl	801354c <_calloc_r>
 8011334:	b160      	cbz	r0, 8011350 <_Balloc+0x64>
 8011336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801133a:	e00e      	b.n	801135a <_Balloc+0x6e>
 801133c:	2221      	movs	r2, #33	; 0x21
 801133e:	2104      	movs	r1, #4
 8011340:	4620      	mov	r0, r4
 8011342:	f002 f903 	bl	801354c <_calloc_r>
 8011346:	69e3      	ldr	r3, [r4, #28]
 8011348:	60f0      	str	r0, [r6, #12]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1e4      	bne.n	801131a <_Balloc+0x2e>
 8011350:	2000      	movs	r0, #0
 8011352:	bd70      	pop	{r4, r5, r6, pc}
 8011354:	6802      	ldr	r2, [r0, #0]
 8011356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801135a:	2300      	movs	r3, #0
 801135c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011360:	e7f7      	b.n	8011352 <_Balloc+0x66>
 8011362:	bf00      	nop
 8011364:	080159b0 	.word	0x080159b0
 8011368:	08015a30 	.word	0x08015a30

0801136c <_Bfree>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	69c6      	ldr	r6, [r0, #28]
 8011370:	4605      	mov	r5, r0
 8011372:	460c      	mov	r4, r1
 8011374:	b976      	cbnz	r6, 8011394 <_Bfree+0x28>
 8011376:	2010      	movs	r0, #16
 8011378:	f7ff ff04 	bl	8011184 <malloc>
 801137c:	4602      	mov	r2, r0
 801137e:	61e8      	str	r0, [r5, #28]
 8011380:	b920      	cbnz	r0, 801138c <_Bfree+0x20>
 8011382:	4b09      	ldr	r3, [pc, #36]	; (80113a8 <_Bfree+0x3c>)
 8011384:	4809      	ldr	r0, [pc, #36]	; (80113ac <_Bfree+0x40>)
 8011386:	218f      	movs	r1, #143	; 0x8f
 8011388:	f002 f8c2 	bl	8013510 <__assert_func>
 801138c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011390:	6006      	str	r6, [r0, #0]
 8011392:	60c6      	str	r6, [r0, #12]
 8011394:	b13c      	cbz	r4, 80113a6 <_Bfree+0x3a>
 8011396:	69eb      	ldr	r3, [r5, #28]
 8011398:	6862      	ldr	r2, [r4, #4]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113a0:	6021      	str	r1, [r4, #0]
 80113a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	080159b0 	.word	0x080159b0
 80113ac:	08015a30 	.word	0x08015a30

080113b0 <__multadd>:
 80113b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b4:	690d      	ldr	r5, [r1, #16]
 80113b6:	4607      	mov	r7, r0
 80113b8:	460c      	mov	r4, r1
 80113ba:	461e      	mov	r6, r3
 80113bc:	f101 0c14 	add.w	ip, r1, #20
 80113c0:	2000      	movs	r0, #0
 80113c2:	f8dc 3000 	ldr.w	r3, [ip]
 80113c6:	b299      	uxth	r1, r3
 80113c8:	fb02 6101 	mla	r1, r2, r1, r6
 80113cc:	0c1e      	lsrs	r6, r3, #16
 80113ce:	0c0b      	lsrs	r3, r1, #16
 80113d0:	fb02 3306 	mla	r3, r2, r6, r3
 80113d4:	b289      	uxth	r1, r1
 80113d6:	3001      	adds	r0, #1
 80113d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113dc:	4285      	cmp	r5, r0
 80113de:	f84c 1b04 	str.w	r1, [ip], #4
 80113e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113e6:	dcec      	bgt.n	80113c2 <__multadd+0x12>
 80113e8:	b30e      	cbz	r6, 801142e <__multadd+0x7e>
 80113ea:	68a3      	ldr	r3, [r4, #8]
 80113ec:	42ab      	cmp	r3, r5
 80113ee:	dc19      	bgt.n	8011424 <__multadd+0x74>
 80113f0:	6861      	ldr	r1, [r4, #4]
 80113f2:	4638      	mov	r0, r7
 80113f4:	3101      	adds	r1, #1
 80113f6:	f7ff ff79 	bl	80112ec <_Balloc>
 80113fa:	4680      	mov	r8, r0
 80113fc:	b928      	cbnz	r0, 801140a <__multadd+0x5a>
 80113fe:	4602      	mov	r2, r0
 8011400:	4b0c      	ldr	r3, [pc, #48]	; (8011434 <__multadd+0x84>)
 8011402:	480d      	ldr	r0, [pc, #52]	; (8011438 <__multadd+0x88>)
 8011404:	21ba      	movs	r1, #186	; 0xba
 8011406:	f002 f883 	bl	8013510 <__assert_func>
 801140a:	6922      	ldr	r2, [r4, #16]
 801140c:	3202      	adds	r2, #2
 801140e:	f104 010c 	add.w	r1, r4, #12
 8011412:	0092      	lsls	r2, r2, #2
 8011414:	300c      	adds	r0, #12
 8011416:	f7fe ffda 	bl	80103ce <memcpy>
 801141a:	4621      	mov	r1, r4
 801141c:	4638      	mov	r0, r7
 801141e:	f7ff ffa5 	bl	801136c <_Bfree>
 8011422:	4644      	mov	r4, r8
 8011424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011428:	3501      	adds	r5, #1
 801142a:	615e      	str	r6, [r3, #20]
 801142c:	6125      	str	r5, [r4, #16]
 801142e:	4620      	mov	r0, r4
 8011430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011434:	08015a1f 	.word	0x08015a1f
 8011438:	08015a30 	.word	0x08015a30

0801143c <__s2b>:
 801143c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011440:	460c      	mov	r4, r1
 8011442:	4615      	mov	r5, r2
 8011444:	461f      	mov	r7, r3
 8011446:	2209      	movs	r2, #9
 8011448:	3308      	adds	r3, #8
 801144a:	4606      	mov	r6, r0
 801144c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011450:	2100      	movs	r1, #0
 8011452:	2201      	movs	r2, #1
 8011454:	429a      	cmp	r2, r3
 8011456:	db09      	blt.n	801146c <__s2b+0x30>
 8011458:	4630      	mov	r0, r6
 801145a:	f7ff ff47 	bl	80112ec <_Balloc>
 801145e:	b940      	cbnz	r0, 8011472 <__s2b+0x36>
 8011460:	4602      	mov	r2, r0
 8011462:	4b19      	ldr	r3, [pc, #100]	; (80114c8 <__s2b+0x8c>)
 8011464:	4819      	ldr	r0, [pc, #100]	; (80114cc <__s2b+0x90>)
 8011466:	21d3      	movs	r1, #211	; 0xd3
 8011468:	f002 f852 	bl	8013510 <__assert_func>
 801146c:	0052      	lsls	r2, r2, #1
 801146e:	3101      	adds	r1, #1
 8011470:	e7f0      	b.n	8011454 <__s2b+0x18>
 8011472:	9b08      	ldr	r3, [sp, #32]
 8011474:	6143      	str	r3, [r0, #20]
 8011476:	2d09      	cmp	r5, #9
 8011478:	f04f 0301 	mov.w	r3, #1
 801147c:	6103      	str	r3, [r0, #16]
 801147e:	dd16      	ble.n	80114ae <__s2b+0x72>
 8011480:	f104 0909 	add.w	r9, r4, #9
 8011484:	46c8      	mov	r8, r9
 8011486:	442c      	add	r4, r5
 8011488:	f818 3b01 	ldrb.w	r3, [r8], #1
 801148c:	4601      	mov	r1, r0
 801148e:	3b30      	subs	r3, #48	; 0x30
 8011490:	220a      	movs	r2, #10
 8011492:	4630      	mov	r0, r6
 8011494:	f7ff ff8c 	bl	80113b0 <__multadd>
 8011498:	45a0      	cmp	r8, r4
 801149a:	d1f5      	bne.n	8011488 <__s2b+0x4c>
 801149c:	f1a5 0408 	sub.w	r4, r5, #8
 80114a0:	444c      	add	r4, r9
 80114a2:	1b2d      	subs	r5, r5, r4
 80114a4:	1963      	adds	r3, r4, r5
 80114a6:	42bb      	cmp	r3, r7
 80114a8:	db04      	blt.n	80114b4 <__s2b+0x78>
 80114aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ae:	340a      	adds	r4, #10
 80114b0:	2509      	movs	r5, #9
 80114b2:	e7f6      	b.n	80114a2 <__s2b+0x66>
 80114b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80114b8:	4601      	mov	r1, r0
 80114ba:	3b30      	subs	r3, #48	; 0x30
 80114bc:	220a      	movs	r2, #10
 80114be:	4630      	mov	r0, r6
 80114c0:	f7ff ff76 	bl	80113b0 <__multadd>
 80114c4:	e7ee      	b.n	80114a4 <__s2b+0x68>
 80114c6:	bf00      	nop
 80114c8:	08015a1f 	.word	0x08015a1f
 80114cc:	08015a30 	.word	0x08015a30

080114d0 <__hi0bits>:
 80114d0:	0c03      	lsrs	r3, r0, #16
 80114d2:	041b      	lsls	r3, r3, #16
 80114d4:	b9d3      	cbnz	r3, 801150c <__hi0bits+0x3c>
 80114d6:	0400      	lsls	r0, r0, #16
 80114d8:	2310      	movs	r3, #16
 80114da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80114de:	bf04      	itt	eq
 80114e0:	0200      	lsleq	r0, r0, #8
 80114e2:	3308      	addeq	r3, #8
 80114e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80114e8:	bf04      	itt	eq
 80114ea:	0100      	lsleq	r0, r0, #4
 80114ec:	3304      	addeq	r3, #4
 80114ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80114f2:	bf04      	itt	eq
 80114f4:	0080      	lsleq	r0, r0, #2
 80114f6:	3302      	addeq	r3, #2
 80114f8:	2800      	cmp	r0, #0
 80114fa:	db05      	blt.n	8011508 <__hi0bits+0x38>
 80114fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011500:	f103 0301 	add.w	r3, r3, #1
 8011504:	bf08      	it	eq
 8011506:	2320      	moveq	r3, #32
 8011508:	4618      	mov	r0, r3
 801150a:	4770      	bx	lr
 801150c:	2300      	movs	r3, #0
 801150e:	e7e4      	b.n	80114da <__hi0bits+0xa>

08011510 <__lo0bits>:
 8011510:	6803      	ldr	r3, [r0, #0]
 8011512:	f013 0207 	ands.w	r2, r3, #7
 8011516:	d00c      	beq.n	8011532 <__lo0bits+0x22>
 8011518:	07d9      	lsls	r1, r3, #31
 801151a:	d422      	bmi.n	8011562 <__lo0bits+0x52>
 801151c:	079a      	lsls	r2, r3, #30
 801151e:	bf49      	itett	mi
 8011520:	085b      	lsrmi	r3, r3, #1
 8011522:	089b      	lsrpl	r3, r3, #2
 8011524:	6003      	strmi	r3, [r0, #0]
 8011526:	2201      	movmi	r2, #1
 8011528:	bf5c      	itt	pl
 801152a:	6003      	strpl	r3, [r0, #0]
 801152c:	2202      	movpl	r2, #2
 801152e:	4610      	mov	r0, r2
 8011530:	4770      	bx	lr
 8011532:	b299      	uxth	r1, r3
 8011534:	b909      	cbnz	r1, 801153a <__lo0bits+0x2a>
 8011536:	0c1b      	lsrs	r3, r3, #16
 8011538:	2210      	movs	r2, #16
 801153a:	b2d9      	uxtb	r1, r3
 801153c:	b909      	cbnz	r1, 8011542 <__lo0bits+0x32>
 801153e:	3208      	adds	r2, #8
 8011540:	0a1b      	lsrs	r3, r3, #8
 8011542:	0719      	lsls	r1, r3, #28
 8011544:	bf04      	itt	eq
 8011546:	091b      	lsreq	r3, r3, #4
 8011548:	3204      	addeq	r2, #4
 801154a:	0799      	lsls	r1, r3, #30
 801154c:	bf04      	itt	eq
 801154e:	089b      	lsreq	r3, r3, #2
 8011550:	3202      	addeq	r2, #2
 8011552:	07d9      	lsls	r1, r3, #31
 8011554:	d403      	bmi.n	801155e <__lo0bits+0x4e>
 8011556:	085b      	lsrs	r3, r3, #1
 8011558:	f102 0201 	add.w	r2, r2, #1
 801155c:	d003      	beq.n	8011566 <__lo0bits+0x56>
 801155e:	6003      	str	r3, [r0, #0]
 8011560:	e7e5      	b.n	801152e <__lo0bits+0x1e>
 8011562:	2200      	movs	r2, #0
 8011564:	e7e3      	b.n	801152e <__lo0bits+0x1e>
 8011566:	2220      	movs	r2, #32
 8011568:	e7e1      	b.n	801152e <__lo0bits+0x1e>
	...

0801156c <__i2b>:
 801156c:	b510      	push	{r4, lr}
 801156e:	460c      	mov	r4, r1
 8011570:	2101      	movs	r1, #1
 8011572:	f7ff febb 	bl	80112ec <_Balloc>
 8011576:	4602      	mov	r2, r0
 8011578:	b928      	cbnz	r0, 8011586 <__i2b+0x1a>
 801157a:	4b05      	ldr	r3, [pc, #20]	; (8011590 <__i2b+0x24>)
 801157c:	4805      	ldr	r0, [pc, #20]	; (8011594 <__i2b+0x28>)
 801157e:	f240 1145 	movw	r1, #325	; 0x145
 8011582:	f001 ffc5 	bl	8013510 <__assert_func>
 8011586:	2301      	movs	r3, #1
 8011588:	6144      	str	r4, [r0, #20]
 801158a:	6103      	str	r3, [r0, #16]
 801158c:	bd10      	pop	{r4, pc}
 801158e:	bf00      	nop
 8011590:	08015a1f 	.word	0x08015a1f
 8011594:	08015a30 	.word	0x08015a30

08011598 <__multiply>:
 8011598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	4691      	mov	r9, r2
 801159e:	690a      	ldr	r2, [r1, #16]
 80115a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	bfb8      	it	lt
 80115a8:	460b      	movlt	r3, r1
 80115aa:	460c      	mov	r4, r1
 80115ac:	bfbc      	itt	lt
 80115ae:	464c      	movlt	r4, r9
 80115b0:	4699      	movlt	r9, r3
 80115b2:	6927      	ldr	r7, [r4, #16]
 80115b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115b8:	68a3      	ldr	r3, [r4, #8]
 80115ba:	6861      	ldr	r1, [r4, #4]
 80115bc:	eb07 060a 	add.w	r6, r7, sl
 80115c0:	42b3      	cmp	r3, r6
 80115c2:	b085      	sub	sp, #20
 80115c4:	bfb8      	it	lt
 80115c6:	3101      	addlt	r1, #1
 80115c8:	f7ff fe90 	bl	80112ec <_Balloc>
 80115cc:	b930      	cbnz	r0, 80115dc <__multiply+0x44>
 80115ce:	4602      	mov	r2, r0
 80115d0:	4b44      	ldr	r3, [pc, #272]	; (80116e4 <__multiply+0x14c>)
 80115d2:	4845      	ldr	r0, [pc, #276]	; (80116e8 <__multiply+0x150>)
 80115d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80115d8:	f001 ff9a 	bl	8013510 <__assert_func>
 80115dc:	f100 0514 	add.w	r5, r0, #20
 80115e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80115e4:	462b      	mov	r3, r5
 80115e6:	2200      	movs	r2, #0
 80115e8:	4543      	cmp	r3, r8
 80115ea:	d321      	bcc.n	8011630 <__multiply+0x98>
 80115ec:	f104 0314 	add.w	r3, r4, #20
 80115f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80115f4:	f109 0314 	add.w	r3, r9, #20
 80115f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80115fc:	9202      	str	r2, [sp, #8]
 80115fe:	1b3a      	subs	r2, r7, r4
 8011600:	3a15      	subs	r2, #21
 8011602:	f022 0203 	bic.w	r2, r2, #3
 8011606:	3204      	adds	r2, #4
 8011608:	f104 0115 	add.w	r1, r4, #21
 801160c:	428f      	cmp	r7, r1
 801160e:	bf38      	it	cc
 8011610:	2204      	movcc	r2, #4
 8011612:	9201      	str	r2, [sp, #4]
 8011614:	9a02      	ldr	r2, [sp, #8]
 8011616:	9303      	str	r3, [sp, #12]
 8011618:	429a      	cmp	r2, r3
 801161a:	d80c      	bhi.n	8011636 <__multiply+0x9e>
 801161c:	2e00      	cmp	r6, #0
 801161e:	dd03      	ble.n	8011628 <__multiply+0x90>
 8011620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011624:	2b00      	cmp	r3, #0
 8011626:	d05b      	beq.n	80116e0 <__multiply+0x148>
 8011628:	6106      	str	r6, [r0, #16]
 801162a:	b005      	add	sp, #20
 801162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011630:	f843 2b04 	str.w	r2, [r3], #4
 8011634:	e7d8      	b.n	80115e8 <__multiply+0x50>
 8011636:	f8b3 a000 	ldrh.w	sl, [r3]
 801163a:	f1ba 0f00 	cmp.w	sl, #0
 801163e:	d024      	beq.n	801168a <__multiply+0xf2>
 8011640:	f104 0e14 	add.w	lr, r4, #20
 8011644:	46a9      	mov	r9, r5
 8011646:	f04f 0c00 	mov.w	ip, #0
 801164a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801164e:	f8d9 1000 	ldr.w	r1, [r9]
 8011652:	fa1f fb82 	uxth.w	fp, r2
 8011656:	b289      	uxth	r1, r1
 8011658:	fb0a 110b 	mla	r1, sl, fp, r1
 801165c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011660:	f8d9 2000 	ldr.w	r2, [r9]
 8011664:	4461      	add	r1, ip
 8011666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801166a:	fb0a c20b 	mla	r2, sl, fp, ip
 801166e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011672:	b289      	uxth	r1, r1
 8011674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011678:	4577      	cmp	r7, lr
 801167a:	f849 1b04 	str.w	r1, [r9], #4
 801167e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011682:	d8e2      	bhi.n	801164a <__multiply+0xb2>
 8011684:	9a01      	ldr	r2, [sp, #4]
 8011686:	f845 c002 	str.w	ip, [r5, r2]
 801168a:	9a03      	ldr	r2, [sp, #12]
 801168c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011690:	3304      	adds	r3, #4
 8011692:	f1b9 0f00 	cmp.w	r9, #0
 8011696:	d021      	beq.n	80116dc <__multiply+0x144>
 8011698:	6829      	ldr	r1, [r5, #0]
 801169a:	f104 0c14 	add.w	ip, r4, #20
 801169e:	46ae      	mov	lr, r5
 80116a0:	f04f 0a00 	mov.w	sl, #0
 80116a4:	f8bc b000 	ldrh.w	fp, [ip]
 80116a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80116ac:	fb09 220b 	mla	r2, r9, fp, r2
 80116b0:	4452      	add	r2, sl
 80116b2:	b289      	uxth	r1, r1
 80116b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80116b8:	f84e 1b04 	str.w	r1, [lr], #4
 80116bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80116c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80116c4:	f8be 1000 	ldrh.w	r1, [lr]
 80116c8:	fb09 110a 	mla	r1, r9, sl, r1
 80116cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80116d0:	4567      	cmp	r7, ip
 80116d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80116d6:	d8e5      	bhi.n	80116a4 <__multiply+0x10c>
 80116d8:	9a01      	ldr	r2, [sp, #4]
 80116da:	50a9      	str	r1, [r5, r2]
 80116dc:	3504      	adds	r5, #4
 80116de:	e799      	b.n	8011614 <__multiply+0x7c>
 80116e0:	3e01      	subs	r6, #1
 80116e2:	e79b      	b.n	801161c <__multiply+0x84>
 80116e4:	08015a1f 	.word	0x08015a1f
 80116e8:	08015a30 	.word	0x08015a30

080116ec <__pow5mult>:
 80116ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f0:	4615      	mov	r5, r2
 80116f2:	f012 0203 	ands.w	r2, r2, #3
 80116f6:	4606      	mov	r6, r0
 80116f8:	460f      	mov	r7, r1
 80116fa:	d007      	beq.n	801170c <__pow5mult+0x20>
 80116fc:	4c25      	ldr	r4, [pc, #148]	; (8011794 <__pow5mult+0xa8>)
 80116fe:	3a01      	subs	r2, #1
 8011700:	2300      	movs	r3, #0
 8011702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011706:	f7ff fe53 	bl	80113b0 <__multadd>
 801170a:	4607      	mov	r7, r0
 801170c:	10ad      	asrs	r5, r5, #2
 801170e:	d03d      	beq.n	801178c <__pow5mult+0xa0>
 8011710:	69f4      	ldr	r4, [r6, #28]
 8011712:	b97c      	cbnz	r4, 8011734 <__pow5mult+0x48>
 8011714:	2010      	movs	r0, #16
 8011716:	f7ff fd35 	bl	8011184 <malloc>
 801171a:	4602      	mov	r2, r0
 801171c:	61f0      	str	r0, [r6, #28]
 801171e:	b928      	cbnz	r0, 801172c <__pow5mult+0x40>
 8011720:	4b1d      	ldr	r3, [pc, #116]	; (8011798 <__pow5mult+0xac>)
 8011722:	481e      	ldr	r0, [pc, #120]	; (801179c <__pow5mult+0xb0>)
 8011724:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011728:	f001 fef2 	bl	8013510 <__assert_func>
 801172c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011730:	6004      	str	r4, [r0, #0]
 8011732:	60c4      	str	r4, [r0, #12]
 8011734:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801173c:	b94c      	cbnz	r4, 8011752 <__pow5mult+0x66>
 801173e:	f240 2171 	movw	r1, #625	; 0x271
 8011742:	4630      	mov	r0, r6
 8011744:	f7ff ff12 	bl	801156c <__i2b>
 8011748:	2300      	movs	r3, #0
 801174a:	f8c8 0008 	str.w	r0, [r8, #8]
 801174e:	4604      	mov	r4, r0
 8011750:	6003      	str	r3, [r0, #0]
 8011752:	f04f 0900 	mov.w	r9, #0
 8011756:	07eb      	lsls	r3, r5, #31
 8011758:	d50a      	bpl.n	8011770 <__pow5mult+0x84>
 801175a:	4639      	mov	r1, r7
 801175c:	4622      	mov	r2, r4
 801175e:	4630      	mov	r0, r6
 8011760:	f7ff ff1a 	bl	8011598 <__multiply>
 8011764:	4639      	mov	r1, r7
 8011766:	4680      	mov	r8, r0
 8011768:	4630      	mov	r0, r6
 801176a:	f7ff fdff 	bl	801136c <_Bfree>
 801176e:	4647      	mov	r7, r8
 8011770:	106d      	asrs	r5, r5, #1
 8011772:	d00b      	beq.n	801178c <__pow5mult+0xa0>
 8011774:	6820      	ldr	r0, [r4, #0]
 8011776:	b938      	cbnz	r0, 8011788 <__pow5mult+0x9c>
 8011778:	4622      	mov	r2, r4
 801177a:	4621      	mov	r1, r4
 801177c:	4630      	mov	r0, r6
 801177e:	f7ff ff0b 	bl	8011598 <__multiply>
 8011782:	6020      	str	r0, [r4, #0]
 8011784:	f8c0 9000 	str.w	r9, [r0]
 8011788:	4604      	mov	r4, r0
 801178a:	e7e4      	b.n	8011756 <__pow5mult+0x6a>
 801178c:	4638      	mov	r0, r7
 801178e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011792:	bf00      	nop
 8011794:	08015b80 	.word	0x08015b80
 8011798:	080159b0 	.word	0x080159b0
 801179c:	08015a30 	.word	0x08015a30

080117a0 <__lshift>:
 80117a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a4:	460c      	mov	r4, r1
 80117a6:	6849      	ldr	r1, [r1, #4]
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117ae:	68a3      	ldr	r3, [r4, #8]
 80117b0:	4607      	mov	r7, r0
 80117b2:	4691      	mov	r9, r2
 80117b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117b8:	f108 0601 	add.w	r6, r8, #1
 80117bc:	42b3      	cmp	r3, r6
 80117be:	db0b      	blt.n	80117d8 <__lshift+0x38>
 80117c0:	4638      	mov	r0, r7
 80117c2:	f7ff fd93 	bl	80112ec <_Balloc>
 80117c6:	4605      	mov	r5, r0
 80117c8:	b948      	cbnz	r0, 80117de <__lshift+0x3e>
 80117ca:	4602      	mov	r2, r0
 80117cc:	4b28      	ldr	r3, [pc, #160]	; (8011870 <__lshift+0xd0>)
 80117ce:	4829      	ldr	r0, [pc, #164]	; (8011874 <__lshift+0xd4>)
 80117d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80117d4:	f001 fe9c 	bl	8013510 <__assert_func>
 80117d8:	3101      	adds	r1, #1
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	e7ee      	b.n	80117bc <__lshift+0x1c>
 80117de:	2300      	movs	r3, #0
 80117e0:	f100 0114 	add.w	r1, r0, #20
 80117e4:	f100 0210 	add.w	r2, r0, #16
 80117e8:	4618      	mov	r0, r3
 80117ea:	4553      	cmp	r3, sl
 80117ec:	db33      	blt.n	8011856 <__lshift+0xb6>
 80117ee:	6920      	ldr	r0, [r4, #16]
 80117f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117f4:	f104 0314 	add.w	r3, r4, #20
 80117f8:	f019 091f 	ands.w	r9, r9, #31
 80117fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011804:	d02b      	beq.n	801185e <__lshift+0xbe>
 8011806:	f1c9 0e20 	rsb	lr, r9, #32
 801180a:	468a      	mov	sl, r1
 801180c:	2200      	movs	r2, #0
 801180e:	6818      	ldr	r0, [r3, #0]
 8011810:	fa00 f009 	lsl.w	r0, r0, r9
 8011814:	4310      	orrs	r0, r2
 8011816:	f84a 0b04 	str.w	r0, [sl], #4
 801181a:	f853 2b04 	ldr.w	r2, [r3], #4
 801181e:	459c      	cmp	ip, r3
 8011820:	fa22 f20e 	lsr.w	r2, r2, lr
 8011824:	d8f3      	bhi.n	801180e <__lshift+0x6e>
 8011826:	ebac 0304 	sub.w	r3, ip, r4
 801182a:	3b15      	subs	r3, #21
 801182c:	f023 0303 	bic.w	r3, r3, #3
 8011830:	3304      	adds	r3, #4
 8011832:	f104 0015 	add.w	r0, r4, #21
 8011836:	4584      	cmp	ip, r0
 8011838:	bf38      	it	cc
 801183a:	2304      	movcc	r3, #4
 801183c:	50ca      	str	r2, [r1, r3]
 801183e:	b10a      	cbz	r2, 8011844 <__lshift+0xa4>
 8011840:	f108 0602 	add.w	r6, r8, #2
 8011844:	3e01      	subs	r6, #1
 8011846:	4638      	mov	r0, r7
 8011848:	612e      	str	r6, [r5, #16]
 801184a:	4621      	mov	r1, r4
 801184c:	f7ff fd8e 	bl	801136c <_Bfree>
 8011850:	4628      	mov	r0, r5
 8011852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011856:	f842 0f04 	str.w	r0, [r2, #4]!
 801185a:	3301      	adds	r3, #1
 801185c:	e7c5      	b.n	80117ea <__lshift+0x4a>
 801185e:	3904      	subs	r1, #4
 8011860:	f853 2b04 	ldr.w	r2, [r3], #4
 8011864:	f841 2f04 	str.w	r2, [r1, #4]!
 8011868:	459c      	cmp	ip, r3
 801186a:	d8f9      	bhi.n	8011860 <__lshift+0xc0>
 801186c:	e7ea      	b.n	8011844 <__lshift+0xa4>
 801186e:	bf00      	nop
 8011870:	08015a1f 	.word	0x08015a1f
 8011874:	08015a30 	.word	0x08015a30

08011878 <__mcmp>:
 8011878:	b530      	push	{r4, r5, lr}
 801187a:	6902      	ldr	r2, [r0, #16]
 801187c:	690c      	ldr	r4, [r1, #16]
 801187e:	1b12      	subs	r2, r2, r4
 8011880:	d10e      	bne.n	80118a0 <__mcmp+0x28>
 8011882:	f100 0314 	add.w	r3, r0, #20
 8011886:	3114      	adds	r1, #20
 8011888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801188c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011898:	42a5      	cmp	r5, r4
 801189a:	d003      	beq.n	80118a4 <__mcmp+0x2c>
 801189c:	d305      	bcc.n	80118aa <__mcmp+0x32>
 801189e:	2201      	movs	r2, #1
 80118a0:	4610      	mov	r0, r2
 80118a2:	bd30      	pop	{r4, r5, pc}
 80118a4:	4283      	cmp	r3, r0
 80118a6:	d3f3      	bcc.n	8011890 <__mcmp+0x18>
 80118a8:	e7fa      	b.n	80118a0 <__mcmp+0x28>
 80118aa:	f04f 32ff 	mov.w	r2, #4294967295
 80118ae:	e7f7      	b.n	80118a0 <__mcmp+0x28>

080118b0 <__mdiff>:
 80118b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	460c      	mov	r4, r1
 80118b6:	4606      	mov	r6, r0
 80118b8:	4611      	mov	r1, r2
 80118ba:	4620      	mov	r0, r4
 80118bc:	4690      	mov	r8, r2
 80118be:	f7ff ffdb 	bl	8011878 <__mcmp>
 80118c2:	1e05      	subs	r5, r0, #0
 80118c4:	d110      	bne.n	80118e8 <__mdiff+0x38>
 80118c6:	4629      	mov	r1, r5
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff fd0f 	bl	80112ec <_Balloc>
 80118ce:	b930      	cbnz	r0, 80118de <__mdiff+0x2e>
 80118d0:	4b3a      	ldr	r3, [pc, #232]	; (80119bc <__mdiff+0x10c>)
 80118d2:	4602      	mov	r2, r0
 80118d4:	f240 2137 	movw	r1, #567	; 0x237
 80118d8:	4839      	ldr	r0, [pc, #228]	; (80119c0 <__mdiff+0x110>)
 80118da:	f001 fe19 	bl	8013510 <__assert_func>
 80118de:	2301      	movs	r3, #1
 80118e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e8:	bfa4      	itt	ge
 80118ea:	4643      	movge	r3, r8
 80118ec:	46a0      	movge	r8, r4
 80118ee:	4630      	mov	r0, r6
 80118f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80118f4:	bfa6      	itte	ge
 80118f6:	461c      	movge	r4, r3
 80118f8:	2500      	movge	r5, #0
 80118fa:	2501      	movlt	r5, #1
 80118fc:	f7ff fcf6 	bl	80112ec <_Balloc>
 8011900:	b920      	cbnz	r0, 801190c <__mdiff+0x5c>
 8011902:	4b2e      	ldr	r3, [pc, #184]	; (80119bc <__mdiff+0x10c>)
 8011904:	4602      	mov	r2, r0
 8011906:	f240 2145 	movw	r1, #581	; 0x245
 801190a:	e7e5      	b.n	80118d8 <__mdiff+0x28>
 801190c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011910:	6926      	ldr	r6, [r4, #16]
 8011912:	60c5      	str	r5, [r0, #12]
 8011914:	f104 0914 	add.w	r9, r4, #20
 8011918:	f108 0514 	add.w	r5, r8, #20
 801191c:	f100 0e14 	add.w	lr, r0, #20
 8011920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011928:	f108 0210 	add.w	r2, r8, #16
 801192c:	46f2      	mov	sl, lr
 801192e:	2100      	movs	r1, #0
 8011930:	f859 3b04 	ldr.w	r3, [r9], #4
 8011934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011938:	fa11 f88b 	uxtah	r8, r1, fp
 801193c:	b299      	uxth	r1, r3
 801193e:	0c1b      	lsrs	r3, r3, #16
 8011940:	eba8 0801 	sub.w	r8, r8, r1
 8011944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011948:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801194c:	fa1f f888 	uxth.w	r8, r8
 8011950:	1419      	asrs	r1, r3, #16
 8011952:	454e      	cmp	r6, r9
 8011954:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011958:	f84a 3b04 	str.w	r3, [sl], #4
 801195c:	d8e8      	bhi.n	8011930 <__mdiff+0x80>
 801195e:	1b33      	subs	r3, r6, r4
 8011960:	3b15      	subs	r3, #21
 8011962:	f023 0303 	bic.w	r3, r3, #3
 8011966:	3304      	adds	r3, #4
 8011968:	3415      	adds	r4, #21
 801196a:	42a6      	cmp	r6, r4
 801196c:	bf38      	it	cc
 801196e:	2304      	movcc	r3, #4
 8011970:	441d      	add	r5, r3
 8011972:	4473      	add	r3, lr
 8011974:	469e      	mov	lr, r3
 8011976:	462e      	mov	r6, r5
 8011978:	4566      	cmp	r6, ip
 801197a:	d30e      	bcc.n	801199a <__mdiff+0xea>
 801197c:	f10c 0203 	add.w	r2, ip, #3
 8011980:	1b52      	subs	r2, r2, r5
 8011982:	f022 0203 	bic.w	r2, r2, #3
 8011986:	3d03      	subs	r5, #3
 8011988:	45ac      	cmp	ip, r5
 801198a:	bf38      	it	cc
 801198c:	2200      	movcc	r2, #0
 801198e:	4413      	add	r3, r2
 8011990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011994:	b17a      	cbz	r2, 80119b6 <__mdiff+0x106>
 8011996:	6107      	str	r7, [r0, #16]
 8011998:	e7a4      	b.n	80118e4 <__mdiff+0x34>
 801199a:	f856 8b04 	ldr.w	r8, [r6], #4
 801199e:	fa11 f288 	uxtah	r2, r1, r8
 80119a2:	1414      	asrs	r4, r2, #16
 80119a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80119a8:	b292      	uxth	r2, r2
 80119aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80119ae:	f84e 2b04 	str.w	r2, [lr], #4
 80119b2:	1421      	asrs	r1, r4, #16
 80119b4:	e7e0      	b.n	8011978 <__mdiff+0xc8>
 80119b6:	3f01      	subs	r7, #1
 80119b8:	e7ea      	b.n	8011990 <__mdiff+0xe0>
 80119ba:	bf00      	nop
 80119bc:	08015a1f 	.word	0x08015a1f
 80119c0:	08015a30 	.word	0x08015a30

080119c4 <__ulp>:
 80119c4:	b082      	sub	sp, #8
 80119c6:	ed8d 0b00 	vstr	d0, [sp]
 80119ca:	9a01      	ldr	r2, [sp, #4]
 80119cc:	4b0f      	ldr	r3, [pc, #60]	; (8011a0c <__ulp+0x48>)
 80119ce:	4013      	ands	r3, r2
 80119d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	dc08      	bgt.n	80119ea <__ulp+0x26>
 80119d8:	425b      	negs	r3, r3
 80119da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80119de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80119e2:	da04      	bge.n	80119ee <__ulp+0x2a>
 80119e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80119e8:	4113      	asrs	r3, r2
 80119ea:	2200      	movs	r2, #0
 80119ec:	e008      	b.n	8011a00 <__ulp+0x3c>
 80119ee:	f1a2 0314 	sub.w	r3, r2, #20
 80119f2:	2b1e      	cmp	r3, #30
 80119f4:	bfda      	itte	le
 80119f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80119fa:	40da      	lsrle	r2, r3
 80119fc:	2201      	movgt	r2, #1
 80119fe:	2300      	movs	r3, #0
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	ec41 0b10 	vmov	d0, r0, r1
 8011a08:	b002      	add	sp, #8
 8011a0a:	4770      	bx	lr
 8011a0c:	7ff00000 	.word	0x7ff00000

08011a10 <__b2d>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	6906      	ldr	r6, [r0, #16]
 8011a16:	f100 0814 	add.w	r8, r0, #20
 8011a1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011a1e:	1f37      	subs	r7, r6, #4
 8011a20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011a24:	4610      	mov	r0, r2
 8011a26:	f7ff fd53 	bl	80114d0 <__hi0bits>
 8011a2a:	f1c0 0320 	rsb	r3, r0, #32
 8011a2e:	280a      	cmp	r0, #10
 8011a30:	600b      	str	r3, [r1, #0]
 8011a32:	491b      	ldr	r1, [pc, #108]	; (8011aa0 <__b2d+0x90>)
 8011a34:	dc15      	bgt.n	8011a62 <__b2d+0x52>
 8011a36:	f1c0 0c0b 	rsb	ip, r0, #11
 8011a3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011a3e:	45b8      	cmp	r8, r7
 8011a40:	ea43 0501 	orr.w	r5, r3, r1
 8011a44:	bf34      	ite	cc
 8011a46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a4a:	2300      	movcs	r3, #0
 8011a4c:	3015      	adds	r0, #21
 8011a4e:	fa02 f000 	lsl.w	r0, r2, r0
 8011a52:	fa23 f30c 	lsr.w	r3, r3, ip
 8011a56:	4303      	orrs	r3, r0
 8011a58:	461c      	mov	r4, r3
 8011a5a:	ec45 4b10 	vmov	d0, r4, r5
 8011a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a62:	45b8      	cmp	r8, r7
 8011a64:	bf3a      	itte	cc
 8011a66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a6e:	2300      	movcs	r3, #0
 8011a70:	380b      	subs	r0, #11
 8011a72:	d012      	beq.n	8011a9a <__b2d+0x8a>
 8011a74:	f1c0 0120 	rsb	r1, r0, #32
 8011a78:	fa23 f401 	lsr.w	r4, r3, r1
 8011a7c:	4082      	lsls	r2, r0
 8011a7e:	4322      	orrs	r2, r4
 8011a80:	4547      	cmp	r7, r8
 8011a82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011a86:	bf8c      	ite	hi
 8011a88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011a8c:	2200      	movls	r2, #0
 8011a8e:	4083      	lsls	r3, r0
 8011a90:	40ca      	lsrs	r2, r1
 8011a92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a96:	4313      	orrs	r3, r2
 8011a98:	e7de      	b.n	8011a58 <__b2d+0x48>
 8011a9a:	ea42 0501 	orr.w	r5, r2, r1
 8011a9e:	e7db      	b.n	8011a58 <__b2d+0x48>
 8011aa0:	3ff00000 	.word	0x3ff00000

08011aa4 <__d2b>:
 8011aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011aa8:	460f      	mov	r7, r1
 8011aaa:	2101      	movs	r1, #1
 8011aac:	ec59 8b10 	vmov	r8, r9, d0
 8011ab0:	4616      	mov	r6, r2
 8011ab2:	f7ff fc1b 	bl	80112ec <_Balloc>
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	b930      	cbnz	r0, 8011ac8 <__d2b+0x24>
 8011aba:	4602      	mov	r2, r0
 8011abc:	4b24      	ldr	r3, [pc, #144]	; (8011b50 <__d2b+0xac>)
 8011abe:	4825      	ldr	r0, [pc, #148]	; (8011b54 <__d2b+0xb0>)
 8011ac0:	f240 310f 	movw	r1, #783	; 0x30f
 8011ac4:	f001 fd24 	bl	8013510 <__assert_func>
 8011ac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011acc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ad0:	bb2d      	cbnz	r5, 8011b1e <__d2b+0x7a>
 8011ad2:	9301      	str	r3, [sp, #4]
 8011ad4:	f1b8 0300 	subs.w	r3, r8, #0
 8011ad8:	d026      	beq.n	8011b28 <__d2b+0x84>
 8011ada:	4668      	mov	r0, sp
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	f7ff fd17 	bl	8011510 <__lo0bits>
 8011ae2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ae6:	b1e8      	cbz	r0, 8011b24 <__d2b+0x80>
 8011ae8:	f1c0 0320 	rsb	r3, r0, #32
 8011aec:	fa02 f303 	lsl.w	r3, r2, r3
 8011af0:	430b      	orrs	r3, r1
 8011af2:	40c2      	lsrs	r2, r0
 8011af4:	6163      	str	r3, [r4, #20]
 8011af6:	9201      	str	r2, [sp, #4]
 8011af8:	9b01      	ldr	r3, [sp, #4]
 8011afa:	61a3      	str	r3, [r4, #24]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	bf14      	ite	ne
 8011b00:	2202      	movne	r2, #2
 8011b02:	2201      	moveq	r2, #1
 8011b04:	6122      	str	r2, [r4, #16]
 8011b06:	b1bd      	cbz	r5, 8011b38 <__d2b+0x94>
 8011b08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b0c:	4405      	add	r5, r0
 8011b0e:	603d      	str	r5, [r7, #0]
 8011b10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b14:	6030      	str	r0, [r6, #0]
 8011b16:	4620      	mov	r0, r4
 8011b18:	b003      	add	sp, #12
 8011b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b22:	e7d6      	b.n	8011ad2 <__d2b+0x2e>
 8011b24:	6161      	str	r1, [r4, #20]
 8011b26:	e7e7      	b.n	8011af8 <__d2b+0x54>
 8011b28:	a801      	add	r0, sp, #4
 8011b2a:	f7ff fcf1 	bl	8011510 <__lo0bits>
 8011b2e:	9b01      	ldr	r3, [sp, #4]
 8011b30:	6163      	str	r3, [r4, #20]
 8011b32:	3020      	adds	r0, #32
 8011b34:	2201      	movs	r2, #1
 8011b36:	e7e5      	b.n	8011b04 <__d2b+0x60>
 8011b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b40:	6038      	str	r0, [r7, #0]
 8011b42:	6918      	ldr	r0, [r3, #16]
 8011b44:	f7ff fcc4 	bl	80114d0 <__hi0bits>
 8011b48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b4c:	e7e2      	b.n	8011b14 <__d2b+0x70>
 8011b4e:	bf00      	nop
 8011b50:	08015a1f 	.word	0x08015a1f
 8011b54:	08015a30 	.word	0x08015a30

08011b58 <__ratio>:
 8011b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	4688      	mov	r8, r1
 8011b5e:	4669      	mov	r1, sp
 8011b60:	4681      	mov	r9, r0
 8011b62:	f7ff ff55 	bl	8011a10 <__b2d>
 8011b66:	a901      	add	r1, sp, #4
 8011b68:	4640      	mov	r0, r8
 8011b6a:	ec55 4b10 	vmov	r4, r5, d0
 8011b6e:	f7ff ff4f 	bl	8011a10 <__b2d>
 8011b72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b7a:	eba3 0c02 	sub.w	ip, r3, r2
 8011b7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b82:	1a9b      	subs	r3, r3, r2
 8011b84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011b88:	ec51 0b10 	vmov	r0, r1, d0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	bfd6      	itet	le
 8011b90:	460a      	movle	r2, r1
 8011b92:	462a      	movgt	r2, r5
 8011b94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b98:	468b      	mov	fp, r1
 8011b9a:	462f      	mov	r7, r5
 8011b9c:	bfd4      	ite	le
 8011b9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011ba2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	ee10 2a10 	vmov	r2, s0
 8011bac:	465b      	mov	r3, fp
 8011bae:	4639      	mov	r1, r7
 8011bb0:	f7ee fe74 	bl	800089c <__aeabi_ddiv>
 8011bb4:	ec41 0b10 	vmov	d0, r0, r1
 8011bb8:	b003      	add	sp, #12
 8011bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bbe <__copybits>:
 8011bbe:	3901      	subs	r1, #1
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	1149      	asrs	r1, r1, #5
 8011bc4:	6914      	ldr	r4, [r2, #16]
 8011bc6:	3101      	adds	r1, #1
 8011bc8:	f102 0314 	add.w	r3, r2, #20
 8011bcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011bd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011bd4:	1f05      	subs	r5, r0, #4
 8011bd6:	42a3      	cmp	r3, r4
 8011bd8:	d30c      	bcc.n	8011bf4 <__copybits+0x36>
 8011bda:	1aa3      	subs	r3, r4, r2
 8011bdc:	3b11      	subs	r3, #17
 8011bde:	f023 0303 	bic.w	r3, r3, #3
 8011be2:	3211      	adds	r2, #17
 8011be4:	42a2      	cmp	r2, r4
 8011be6:	bf88      	it	hi
 8011be8:	2300      	movhi	r3, #0
 8011bea:	4418      	add	r0, r3
 8011bec:	2300      	movs	r3, #0
 8011bee:	4288      	cmp	r0, r1
 8011bf0:	d305      	bcc.n	8011bfe <__copybits+0x40>
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8011bf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8011bfc:	e7eb      	b.n	8011bd6 <__copybits+0x18>
 8011bfe:	f840 3b04 	str.w	r3, [r0], #4
 8011c02:	e7f4      	b.n	8011bee <__copybits+0x30>

08011c04 <__any_on>:
 8011c04:	f100 0214 	add.w	r2, r0, #20
 8011c08:	6900      	ldr	r0, [r0, #16]
 8011c0a:	114b      	asrs	r3, r1, #5
 8011c0c:	4298      	cmp	r0, r3
 8011c0e:	b510      	push	{r4, lr}
 8011c10:	db11      	blt.n	8011c36 <__any_on+0x32>
 8011c12:	dd0a      	ble.n	8011c2a <__any_on+0x26>
 8011c14:	f011 011f 	ands.w	r1, r1, #31
 8011c18:	d007      	beq.n	8011c2a <__any_on+0x26>
 8011c1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c1e:	fa24 f001 	lsr.w	r0, r4, r1
 8011c22:	fa00 f101 	lsl.w	r1, r0, r1
 8011c26:	428c      	cmp	r4, r1
 8011c28:	d10b      	bne.n	8011c42 <__any_on+0x3e>
 8011c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d803      	bhi.n	8011c3a <__any_on+0x36>
 8011c32:	2000      	movs	r0, #0
 8011c34:	bd10      	pop	{r4, pc}
 8011c36:	4603      	mov	r3, r0
 8011c38:	e7f7      	b.n	8011c2a <__any_on+0x26>
 8011c3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c3e:	2900      	cmp	r1, #0
 8011c40:	d0f5      	beq.n	8011c2e <__any_on+0x2a>
 8011c42:	2001      	movs	r0, #1
 8011c44:	e7f6      	b.n	8011c34 <__any_on+0x30>

08011c46 <sulp>:
 8011c46:	b570      	push	{r4, r5, r6, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	460d      	mov	r5, r1
 8011c4c:	ec45 4b10 	vmov	d0, r4, r5
 8011c50:	4616      	mov	r6, r2
 8011c52:	f7ff feb7 	bl	80119c4 <__ulp>
 8011c56:	ec51 0b10 	vmov	r0, r1, d0
 8011c5a:	b17e      	cbz	r6, 8011c7c <sulp+0x36>
 8011c5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dd09      	ble.n	8011c7c <sulp+0x36>
 8011c68:	051b      	lsls	r3, r3, #20
 8011c6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011c6e:	2400      	movs	r4, #0
 8011c70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011c74:	4622      	mov	r2, r4
 8011c76:	462b      	mov	r3, r5
 8011c78:	f7ee fce6 	bl	8000648 <__aeabi_dmul>
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c80 <_strtod_l>:
 8011c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c84:	ed2d 8b02 	vpush	{d8}
 8011c88:	b09b      	sub	sp, #108	; 0x6c
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011c8e:	2200      	movs	r2, #0
 8011c90:	9216      	str	r2, [sp, #88]	; 0x58
 8011c92:	460d      	mov	r5, r1
 8011c94:	f04f 0800 	mov.w	r8, #0
 8011c98:	f04f 0900 	mov.w	r9, #0
 8011c9c:	460a      	mov	r2, r1
 8011c9e:	9215      	str	r2, [sp, #84]	; 0x54
 8011ca0:	7811      	ldrb	r1, [r2, #0]
 8011ca2:	292b      	cmp	r1, #43	; 0x2b
 8011ca4:	d04c      	beq.n	8011d40 <_strtod_l+0xc0>
 8011ca6:	d83a      	bhi.n	8011d1e <_strtod_l+0x9e>
 8011ca8:	290d      	cmp	r1, #13
 8011caa:	d834      	bhi.n	8011d16 <_strtod_l+0x96>
 8011cac:	2908      	cmp	r1, #8
 8011cae:	d834      	bhi.n	8011d1a <_strtod_l+0x9a>
 8011cb0:	2900      	cmp	r1, #0
 8011cb2:	d03d      	beq.n	8011d30 <_strtod_l+0xb0>
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	920a      	str	r2, [sp, #40]	; 0x28
 8011cb8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011cba:	7832      	ldrb	r2, [r6, #0]
 8011cbc:	2a30      	cmp	r2, #48	; 0x30
 8011cbe:	f040 80b4 	bne.w	8011e2a <_strtod_l+0x1aa>
 8011cc2:	7872      	ldrb	r2, [r6, #1]
 8011cc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011cc8:	2a58      	cmp	r2, #88	; 0x58
 8011cca:	d170      	bne.n	8011dae <_strtod_l+0x12e>
 8011ccc:	9302      	str	r3, [sp, #8]
 8011cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	ab16      	add	r3, sp, #88	; 0x58
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	4a8e      	ldr	r2, [pc, #568]	; (8011f10 <_strtod_l+0x290>)
 8011cd8:	ab17      	add	r3, sp, #92	; 0x5c
 8011cda:	a915      	add	r1, sp, #84	; 0x54
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f001 fcb3 	bl	8013648 <__gethex>
 8011ce2:	f010 070f 	ands.w	r7, r0, #15
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	d005      	beq.n	8011cf6 <_strtod_l+0x76>
 8011cea:	2f06      	cmp	r7, #6
 8011cec:	d12a      	bne.n	8011d44 <_strtod_l+0xc4>
 8011cee:	3601      	adds	r6, #1
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	9615      	str	r6, [sp, #84]	; 0x54
 8011cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f040 857f 	bne.w	80127fc <_strtod_l+0xb7c>
 8011cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d00:	b1db      	cbz	r3, 8011d3a <_strtod_l+0xba>
 8011d02:	4642      	mov	r2, r8
 8011d04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011d08:	ec43 2b10 	vmov	d0, r2, r3
 8011d0c:	b01b      	add	sp, #108	; 0x6c
 8011d0e:	ecbd 8b02 	vpop	{d8}
 8011d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d16:	2920      	cmp	r1, #32
 8011d18:	d1cc      	bne.n	8011cb4 <_strtod_l+0x34>
 8011d1a:	3201      	adds	r2, #1
 8011d1c:	e7bf      	b.n	8011c9e <_strtod_l+0x1e>
 8011d1e:	292d      	cmp	r1, #45	; 0x2d
 8011d20:	d1c8      	bne.n	8011cb4 <_strtod_l+0x34>
 8011d22:	2101      	movs	r1, #1
 8011d24:	910a      	str	r1, [sp, #40]	; 0x28
 8011d26:	1c51      	adds	r1, r2, #1
 8011d28:	9115      	str	r1, [sp, #84]	; 0x54
 8011d2a:	7852      	ldrb	r2, [r2, #1]
 8011d2c:	2a00      	cmp	r2, #0
 8011d2e:	d1c3      	bne.n	8011cb8 <_strtod_l+0x38>
 8011d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d32:	9515      	str	r5, [sp, #84]	; 0x54
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	f040 855f 	bne.w	80127f8 <_strtod_l+0xb78>
 8011d3a:	4642      	mov	r2, r8
 8011d3c:	464b      	mov	r3, r9
 8011d3e:	e7e3      	b.n	8011d08 <_strtod_l+0x88>
 8011d40:	2100      	movs	r1, #0
 8011d42:	e7ef      	b.n	8011d24 <_strtod_l+0xa4>
 8011d44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d46:	b13a      	cbz	r2, 8011d58 <_strtod_l+0xd8>
 8011d48:	2135      	movs	r1, #53	; 0x35
 8011d4a:	a818      	add	r0, sp, #96	; 0x60
 8011d4c:	f7ff ff37 	bl	8011bbe <__copybits>
 8011d50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011d52:	4620      	mov	r0, r4
 8011d54:	f7ff fb0a 	bl	801136c <_Bfree>
 8011d58:	3f01      	subs	r7, #1
 8011d5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011d5c:	2f04      	cmp	r7, #4
 8011d5e:	d806      	bhi.n	8011d6e <_strtod_l+0xee>
 8011d60:	e8df f007 	tbb	[pc, r7]
 8011d64:	201d0314 	.word	0x201d0314
 8011d68:	14          	.byte	0x14
 8011d69:	00          	.byte	0x00
 8011d6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011d6e:	05e9      	lsls	r1, r5, #23
 8011d70:	bf48      	it	mi
 8011d72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011d7a:	0d1b      	lsrs	r3, r3, #20
 8011d7c:	051b      	lsls	r3, r3, #20
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d1b9      	bne.n	8011cf6 <_strtod_l+0x76>
 8011d82:	f7fe faf7 	bl	8010374 <__errno>
 8011d86:	2322      	movs	r3, #34	; 0x22
 8011d88:	6003      	str	r3, [r0, #0]
 8011d8a:	e7b4      	b.n	8011cf6 <_strtod_l+0x76>
 8011d8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011d90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011d94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011d98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011d9c:	e7e7      	b.n	8011d6e <_strtod_l+0xee>
 8011d9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011f18 <_strtod_l+0x298>
 8011da2:	e7e4      	b.n	8011d6e <_strtod_l+0xee>
 8011da4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011da8:	f04f 38ff 	mov.w	r8, #4294967295
 8011dac:	e7df      	b.n	8011d6e <_strtod_l+0xee>
 8011dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db0:	1c5a      	adds	r2, r3, #1
 8011db2:	9215      	str	r2, [sp, #84]	; 0x54
 8011db4:	785b      	ldrb	r3, [r3, #1]
 8011db6:	2b30      	cmp	r3, #48	; 0x30
 8011db8:	d0f9      	beq.n	8011dae <_strtod_l+0x12e>
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d09b      	beq.n	8011cf6 <_strtod_l+0x76>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f04f 0a00 	mov.w	sl, #0
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011dca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011dce:	46d3      	mov	fp, sl
 8011dd0:	220a      	movs	r2, #10
 8011dd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011dd4:	7806      	ldrb	r6, [r0, #0]
 8011dd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011dda:	b2d9      	uxtb	r1, r3
 8011ddc:	2909      	cmp	r1, #9
 8011dde:	d926      	bls.n	8011e2e <_strtod_l+0x1ae>
 8011de0:	494c      	ldr	r1, [pc, #304]	; (8011f14 <_strtod_l+0x294>)
 8011de2:	2201      	movs	r2, #1
 8011de4:	f7fe fa13 	bl	801020e <strncmp>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d030      	beq.n	8011e4e <_strtod_l+0x1ce>
 8011dec:	2000      	movs	r0, #0
 8011dee:	4632      	mov	r2, r6
 8011df0:	9005      	str	r0, [sp, #20]
 8011df2:	465e      	mov	r6, fp
 8011df4:	4603      	mov	r3, r0
 8011df6:	2a65      	cmp	r2, #101	; 0x65
 8011df8:	d001      	beq.n	8011dfe <_strtod_l+0x17e>
 8011dfa:	2a45      	cmp	r2, #69	; 0x45
 8011dfc:	d113      	bne.n	8011e26 <_strtod_l+0x1a6>
 8011dfe:	b91e      	cbnz	r6, 8011e08 <_strtod_l+0x188>
 8011e00:	9a04      	ldr	r2, [sp, #16]
 8011e02:	4302      	orrs	r2, r0
 8011e04:	d094      	beq.n	8011d30 <_strtod_l+0xb0>
 8011e06:	2600      	movs	r6, #0
 8011e08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011e0a:	1c6a      	adds	r2, r5, #1
 8011e0c:	9215      	str	r2, [sp, #84]	; 0x54
 8011e0e:	786a      	ldrb	r2, [r5, #1]
 8011e10:	2a2b      	cmp	r2, #43	; 0x2b
 8011e12:	d074      	beq.n	8011efe <_strtod_l+0x27e>
 8011e14:	2a2d      	cmp	r2, #45	; 0x2d
 8011e16:	d078      	beq.n	8011f0a <_strtod_l+0x28a>
 8011e18:	f04f 0c00 	mov.w	ip, #0
 8011e1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011e20:	2909      	cmp	r1, #9
 8011e22:	d97f      	bls.n	8011f24 <_strtod_l+0x2a4>
 8011e24:	9515      	str	r5, [sp, #84]	; 0x54
 8011e26:	2700      	movs	r7, #0
 8011e28:	e09e      	b.n	8011f68 <_strtod_l+0x2e8>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	e7c8      	b.n	8011dc0 <_strtod_l+0x140>
 8011e2e:	f1bb 0f08 	cmp.w	fp, #8
 8011e32:	bfd8      	it	le
 8011e34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011e36:	f100 0001 	add.w	r0, r0, #1
 8011e3a:	bfda      	itte	le
 8011e3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e40:	9309      	strle	r3, [sp, #36]	; 0x24
 8011e42:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011e46:	f10b 0b01 	add.w	fp, fp, #1
 8011e4a:	9015      	str	r0, [sp, #84]	; 0x54
 8011e4c:	e7c1      	b.n	8011dd2 <_strtod_l+0x152>
 8011e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e50:	1c5a      	adds	r2, r3, #1
 8011e52:	9215      	str	r2, [sp, #84]	; 0x54
 8011e54:	785a      	ldrb	r2, [r3, #1]
 8011e56:	f1bb 0f00 	cmp.w	fp, #0
 8011e5a:	d037      	beq.n	8011ecc <_strtod_l+0x24c>
 8011e5c:	9005      	str	r0, [sp, #20]
 8011e5e:	465e      	mov	r6, fp
 8011e60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011e64:	2b09      	cmp	r3, #9
 8011e66:	d912      	bls.n	8011e8e <_strtod_l+0x20e>
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e7c4      	b.n	8011df6 <_strtod_l+0x176>
 8011e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	9215      	str	r2, [sp, #84]	; 0x54
 8011e72:	785a      	ldrb	r2, [r3, #1]
 8011e74:	3001      	adds	r0, #1
 8011e76:	2a30      	cmp	r2, #48	; 0x30
 8011e78:	d0f8      	beq.n	8011e6c <_strtod_l+0x1ec>
 8011e7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011e7e:	2b08      	cmp	r3, #8
 8011e80:	f200 84c1 	bhi.w	8012806 <_strtod_l+0xb86>
 8011e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e86:	9005      	str	r0, [sp, #20]
 8011e88:	2000      	movs	r0, #0
 8011e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e8c:	4606      	mov	r6, r0
 8011e8e:	3a30      	subs	r2, #48	; 0x30
 8011e90:	f100 0301 	add.w	r3, r0, #1
 8011e94:	d014      	beq.n	8011ec0 <_strtod_l+0x240>
 8011e96:	9905      	ldr	r1, [sp, #20]
 8011e98:	4419      	add	r1, r3
 8011e9a:	9105      	str	r1, [sp, #20]
 8011e9c:	4633      	mov	r3, r6
 8011e9e:	eb00 0c06 	add.w	ip, r0, r6
 8011ea2:	210a      	movs	r1, #10
 8011ea4:	4563      	cmp	r3, ip
 8011ea6:	d113      	bne.n	8011ed0 <_strtod_l+0x250>
 8011ea8:	1833      	adds	r3, r6, r0
 8011eaa:	2b08      	cmp	r3, #8
 8011eac:	f106 0601 	add.w	r6, r6, #1
 8011eb0:	4406      	add	r6, r0
 8011eb2:	dc1a      	bgt.n	8011eea <_strtod_l+0x26a>
 8011eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011eb6:	230a      	movs	r3, #10
 8011eb8:	fb03 2301 	mla	r3, r3, r1, r2
 8011ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011ec2:	1c51      	adds	r1, r2, #1
 8011ec4:	9115      	str	r1, [sp, #84]	; 0x54
 8011ec6:	7852      	ldrb	r2, [r2, #1]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	e7c9      	b.n	8011e60 <_strtod_l+0x1e0>
 8011ecc:	4658      	mov	r0, fp
 8011ece:	e7d2      	b.n	8011e76 <_strtod_l+0x1f6>
 8011ed0:	2b08      	cmp	r3, #8
 8011ed2:	f103 0301 	add.w	r3, r3, #1
 8011ed6:	dc03      	bgt.n	8011ee0 <_strtod_l+0x260>
 8011ed8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011eda:	434f      	muls	r7, r1
 8011edc:	9709      	str	r7, [sp, #36]	; 0x24
 8011ede:	e7e1      	b.n	8011ea4 <_strtod_l+0x224>
 8011ee0:	2b10      	cmp	r3, #16
 8011ee2:	bfd8      	it	le
 8011ee4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011ee8:	e7dc      	b.n	8011ea4 <_strtod_l+0x224>
 8011eea:	2e10      	cmp	r6, #16
 8011eec:	bfdc      	itt	le
 8011eee:	230a      	movle	r3, #10
 8011ef0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011ef4:	e7e3      	b.n	8011ebe <_strtod_l+0x23e>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	9305      	str	r3, [sp, #20]
 8011efa:	2301      	movs	r3, #1
 8011efc:	e780      	b.n	8011e00 <_strtod_l+0x180>
 8011efe:	f04f 0c00 	mov.w	ip, #0
 8011f02:	1caa      	adds	r2, r5, #2
 8011f04:	9215      	str	r2, [sp, #84]	; 0x54
 8011f06:	78aa      	ldrb	r2, [r5, #2]
 8011f08:	e788      	b.n	8011e1c <_strtod_l+0x19c>
 8011f0a:	f04f 0c01 	mov.w	ip, #1
 8011f0e:	e7f8      	b.n	8011f02 <_strtod_l+0x282>
 8011f10:	08015b90 	.word	0x08015b90
 8011f14:	08015b8c 	.word	0x08015b8c
 8011f18:	7ff00000 	.word	0x7ff00000
 8011f1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f1e:	1c51      	adds	r1, r2, #1
 8011f20:	9115      	str	r1, [sp, #84]	; 0x54
 8011f22:	7852      	ldrb	r2, [r2, #1]
 8011f24:	2a30      	cmp	r2, #48	; 0x30
 8011f26:	d0f9      	beq.n	8011f1c <_strtod_l+0x29c>
 8011f28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011f2c:	2908      	cmp	r1, #8
 8011f2e:	f63f af7a 	bhi.w	8011e26 <_strtod_l+0x1a6>
 8011f32:	3a30      	subs	r2, #48	; 0x30
 8011f34:	9208      	str	r2, [sp, #32]
 8011f36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f38:	920c      	str	r2, [sp, #48]	; 0x30
 8011f3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f3c:	1c57      	adds	r7, r2, #1
 8011f3e:	9715      	str	r7, [sp, #84]	; 0x54
 8011f40:	7852      	ldrb	r2, [r2, #1]
 8011f42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011f46:	f1be 0f09 	cmp.w	lr, #9
 8011f4a:	d938      	bls.n	8011fbe <_strtod_l+0x33e>
 8011f4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f4e:	1a7f      	subs	r7, r7, r1
 8011f50:	2f08      	cmp	r7, #8
 8011f52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011f56:	dc03      	bgt.n	8011f60 <_strtod_l+0x2e0>
 8011f58:	9908      	ldr	r1, [sp, #32]
 8011f5a:	428f      	cmp	r7, r1
 8011f5c:	bfa8      	it	ge
 8011f5e:	460f      	movge	r7, r1
 8011f60:	f1bc 0f00 	cmp.w	ip, #0
 8011f64:	d000      	beq.n	8011f68 <_strtod_l+0x2e8>
 8011f66:	427f      	negs	r7, r7
 8011f68:	2e00      	cmp	r6, #0
 8011f6a:	d14f      	bne.n	801200c <_strtod_l+0x38c>
 8011f6c:	9904      	ldr	r1, [sp, #16]
 8011f6e:	4301      	orrs	r1, r0
 8011f70:	f47f aec1 	bne.w	8011cf6 <_strtod_l+0x76>
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f47f aedb 	bne.w	8011d30 <_strtod_l+0xb0>
 8011f7a:	2a69      	cmp	r2, #105	; 0x69
 8011f7c:	d029      	beq.n	8011fd2 <_strtod_l+0x352>
 8011f7e:	dc26      	bgt.n	8011fce <_strtod_l+0x34e>
 8011f80:	2a49      	cmp	r2, #73	; 0x49
 8011f82:	d026      	beq.n	8011fd2 <_strtod_l+0x352>
 8011f84:	2a4e      	cmp	r2, #78	; 0x4e
 8011f86:	f47f aed3 	bne.w	8011d30 <_strtod_l+0xb0>
 8011f8a:	499b      	ldr	r1, [pc, #620]	; (80121f8 <_strtod_l+0x578>)
 8011f8c:	a815      	add	r0, sp, #84	; 0x54
 8011f8e:	f001 fd9b 	bl	8013ac8 <__match>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f43f aecc 	beq.w	8011d30 <_strtod_l+0xb0>
 8011f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b28      	cmp	r3, #40	; 0x28
 8011f9e:	d12f      	bne.n	8012000 <_strtod_l+0x380>
 8011fa0:	4996      	ldr	r1, [pc, #600]	; (80121fc <_strtod_l+0x57c>)
 8011fa2:	aa18      	add	r2, sp, #96	; 0x60
 8011fa4:	a815      	add	r0, sp, #84	; 0x54
 8011fa6:	f001 fda3 	bl	8013af0 <__hexnan>
 8011faa:	2805      	cmp	r0, #5
 8011fac:	d128      	bne.n	8012000 <_strtod_l+0x380>
 8011fae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011fb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011fb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011fbc:	e69b      	b.n	8011cf6 <_strtod_l+0x76>
 8011fbe:	9f08      	ldr	r7, [sp, #32]
 8011fc0:	210a      	movs	r1, #10
 8011fc2:	fb01 2107 	mla	r1, r1, r7, r2
 8011fc6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011fca:	9208      	str	r2, [sp, #32]
 8011fcc:	e7b5      	b.n	8011f3a <_strtod_l+0x2ba>
 8011fce:	2a6e      	cmp	r2, #110	; 0x6e
 8011fd0:	e7d9      	b.n	8011f86 <_strtod_l+0x306>
 8011fd2:	498b      	ldr	r1, [pc, #556]	; (8012200 <_strtod_l+0x580>)
 8011fd4:	a815      	add	r0, sp, #84	; 0x54
 8011fd6:	f001 fd77 	bl	8013ac8 <__match>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	f43f aea8 	beq.w	8011d30 <_strtod_l+0xb0>
 8011fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fe2:	4988      	ldr	r1, [pc, #544]	; (8012204 <_strtod_l+0x584>)
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	a815      	add	r0, sp, #84	; 0x54
 8011fe8:	9315      	str	r3, [sp, #84]	; 0x54
 8011fea:	f001 fd6d 	bl	8013ac8 <__match>
 8011fee:	b910      	cbnz	r0, 8011ff6 <_strtod_l+0x376>
 8011ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	9315      	str	r3, [sp, #84]	; 0x54
 8011ff6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012214 <_strtod_l+0x594>
 8011ffa:	f04f 0800 	mov.w	r8, #0
 8011ffe:	e67a      	b.n	8011cf6 <_strtod_l+0x76>
 8012000:	4881      	ldr	r0, [pc, #516]	; (8012208 <_strtod_l+0x588>)
 8012002:	f001 fa7d 	bl	8013500 <nan>
 8012006:	ec59 8b10 	vmov	r8, r9, d0
 801200a:	e674      	b.n	8011cf6 <_strtod_l+0x76>
 801200c:	9b05      	ldr	r3, [sp, #20]
 801200e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012010:	1afb      	subs	r3, r7, r3
 8012012:	f1bb 0f00 	cmp.w	fp, #0
 8012016:	bf08      	it	eq
 8012018:	46b3      	moveq	fp, r6
 801201a:	2e10      	cmp	r6, #16
 801201c:	9308      	str	r3, [sp, #32]
 801201e:	4635      	mov	r5, r6
 8012020:	bfa8      	it	ge
 8012022:	2510      	movge	r5, #16
 8012024:	f7ee fa96 	bl	8000554 <__aeabi_ui2d>
 8012028:	2e09      	cmp	r6, #9
 801202a:	4680      	mov	r8, r0
 801202c:	4689      	mov	r9, r1
 801202e:	dd13      	ble.n	8012058 <_strtod_l+0x3d8>
 8012030:	4b76      	ldr	r3, [pc, #472]	; (801220c <_strtod_l+0x58c>)
 8012032:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012036:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801203a:	f7ee fb05 	bl	8000648 <__aeabi_dmul>
 801203e:	4680      	mov	r8, r0
 8012040:	4650      	mov	r0, sl
 8012042:	4689      	mov	r9, r1
 8012044:	f7ee fa86 	bl	8000554 <__aeabi_ui2d>
 8012048:	4602      	mov	r2, r0
 801204a:	460b      	mov	r3, r1
 801204c:	4640      	mov	r0, r8
 801204e:	4649      	mov	r1, r9
 8012050:	f7ee f944 	bl	80002dc <__adddf3>
 8012054:	4680      	mov	r8, r0
 8012056:	4689      	mov	r9, r1
 8012058:	2e0f      	cmp	r6, #15
 801205a:	dc38      	bgt.n	80120ce <_strtod_l+0x44e>
 801205c:	9b08      	ldr	r3, [sp, #32]
 801205e:	2b00      	cmp	r3, #0
 8012060:	f43f ae49 	beq.w	8011cf6 <_strtod_l+0x76>
 8012064:	dd24      	ble.n	80120b0 <_strtod_l+0x430>
 8012066:	2b16      	cmp	r3, #22
 8012068:	dc0b      	bgt.n	8012082 <_strtod_l+0x402>
 801206a:	4968      	ldr	r1, [pc, #416]	; (801220c <_strtod_l+0x58c>)
 801206c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012074:	4642      	mov	r2, r8
 8012076:	464b      	mov	r3, r9
 8012078:	f7ee fae6 	bl	8000648 <__aeabi_dmul>
 801207c:	4680      	mov	r8, r0
 801207e:	4689      	mov	r9, r1
 8012080:	e639      	b.n	8011cf6 <_strtod_l+0x76>
 8012082:	9a08      	ldr	r2, [sp, #32]
 8012084:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012088:	4293      	cmp	r3, r2
 801208a:	db20      	blt.n	80120ce <_strtod_l+0x44e>
 801208c:	4c5f      	ldr	r4, [pc, #380]	; (801220c <_strtod_l+0x58c>)
 801208e:	f1c6 060f 	rsb	r6, r6, #15
 8012092:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012096:	4642      	mov	r2, r8
 8012098:	464b      	mov	r3, r9
 801209a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801209e:	f7ee fad3 	bl	8000648 <__aeabi_dmul>
 80120a2:	9b08      	ldr	r3, [sp, #32]
 80120a4:	1b9e      	subs	r6, r3, r6
 80120a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80120aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80120ae:	e7e3      	b.n	8012078 <_strtod_l+0x3f8>
 80120b0:	9b08      	ldr	r3, [sp, #32]
 80120b2:	3316      	adds	r3, #22
 80120b4:	db0b      	blt.n	80120ce <_strtod_l+0x44e>
 80120b6:	9b05      	ldr	r3, [sp, #20]
 80120b8:	1bdf      	subs	r7, r3, r7
 80120ba:	4b54      	ldr	r3, [pc, #336]	; (801220c <_strtod_l+0x58c>)
 80120bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80120c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120c4:	4640      	mov	r0, r8
 80120c6:	4649      	mov	r1, r9
 80120c8:	f7ee fbe8 	bl	800089c <__aeabi_ddiv>
 80120cc:	e7d6      	b.n	801207c <_strtod_l+0x3fc>
 80120ce:	9b08      	ldr	r3, [sp, #32]
 80120d0:	1b75      	subs	r5, r6, r5
 80120d2:	441d      	add	r5, r3
 80120d4:	2d00      	cmp	r5, #0
 80120d6:	dd70      	ble.n	80121ba <_strtod_l+0x53a>
 80120d8:	f015 030f 	ands.w	r3, r5, #15
 80120dc:	d00a      	beq.n	80120f4 <_strtod_l+0x474>
 80120de:	494b      	ldr	r1, [pc, #300]	; (801220c <_strtod_l+0x58c>)
 80120e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120e4:	4642      	mov	r2, r8
 80120e6:	464b      	mov	r3, r9
 80120e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120ec:	f7ee faac 	bl	8000648 <__aeabi_dmul>
 80120f0:	4680      	mov	r8, r0
 80120f2:	4689      	mov	r9, r1
 80120f4:	f035 050f 	bics.w	r5, r5, #15
 80120f8:	d04d      	beq.n	8012196 <_strtod_l+0x516>
 80120fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80120fe:	dd22      	ble.n	8012146 <_strtod_l+0x4c6>
 8012100:	2500      	movs	r5, #0
 8012102:	46ab      	mov	fp, r5
 8012104:	9509      	str	r5, [sp, #36]	; 0x24
 8012106:	9505      	str	r5, [sp, #20]
 8012108:	2322      	movs	r3, #34	; 0x22
 801210a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012214 <_strtod_l+0x594>
 801210e:	6023      	str	r3, [r4, #0]
 8012110:	f04f 0800 	mov.w	r8, #0
 8012114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012116:	2b00      	cmp	r3, #0
 8012118:	f43f aded 	beq.w	8011cf6 <_strtod_l+0x76>
 801211c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801211e:	4620      	mov	r0, r4
 8012120:	f7ff f924 	bl	801136c <_Bfree>
 8012124:	9905      	ldr	r1, [sp, #20]
 8012126:	4620      	mov	r0, r4
 8012128:	f7ff f920 	bl	801136c <_Bfree>
 801212c:	4659      	mov	r1, fp
 801212e:	4620      	mov	r0, r4
 8012130:	f7ff f91c 	bl	801136c <_Bfree>
 8012134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012136:	4620      	mov	r0, r4
 8012138:	f7ff f918 	bl	801136c <_Bfree>
 801213c:	4629      	mov	r1, r5
 801213e:	4620      	mov	r0, r4
 8012140:	f7ff f914 	bl	801136c <_Bfree>
 8012144:	e5d7      	b.n	8011cf6 <_strtod_l+0x76>
 8012146:	4b32      	ldr	r3, [pc, #200]	; (8012210 <_strtod_l+0x590>)
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	2300      	movs	r3, #0
 801214c:	112d      	asrs	r5, r5, #4
 801214e:	4640      	mov	r0, r8
 8012150:	4649      	mov	r1, r9
 8012152:	469a      	mov	sl, r3
 8012154:	2d01      	cmp	r5, #1
 8012156:	dc21      	bgt.n	801219c <_strtod_l+0x51c>
 8012158:	b10b      	cbz	r3, 801215e <_strtod_l+0x4de>
 801215a:	4680      	mov	r8, r0
 801215c:	4689      	mov	r9, r1
 801215e:	492c      	ldr	r1, [pc, #176]	; (8012210 <_strtod_l+0x590>)
 8012160:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012164:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012168:	4642      	mov	r2, r8
 801216a:	464b      	mov	r3, r9
 801216c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012170:	f7ee fa6a 	bl	8000648 <__aeabi_dmul>
 8012174:	4b27      	ldr	r3, [pc, #156]	; (8012214 <_strtod_l+0x594>)
 8012176:	460a      	mov	r2, r1
 8012178:	400b      	ands	r3, r1
 801217a:	4927      	ldr	r1, [pc, #156]	; (8012218 <_strtod_l+0x598>)
 801217c:	428b      	cmp	r3, r1
 801217e:	4680      	mov	r8, r0
 8012180:	d8be      	bhi.n	8012100 <_strtod_l+0x480>
 8012182:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012186:	428b      	cmp	r3, r1
 8012188:	bf86      	itte	hi
 801218a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801221c <_strtod_l+0x59c>
 801218e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012192:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012196:	2300      	movs	r3, #0
 8012198:	9304      	str	r3, [sp, #16]
 801219a:	e07b      	b.n	8012294 <_strtod_l+0x614>
 801219c:	07ea      	lsls	r2, r5, #31
 801219e:	d505      	bpl.n	80121ac <_strtod_l+0x52c>
 80121a0:	9b04      	ldr	r3, [sp, #16]
 80121a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a6:	f7ee fa4f 	bl	8000648 <__aeabi_dmul>
 80121aa:	2301      	movs	r3, #1
 80121ac:	9a04      	ldr	r2, [sp, #16]
 80121ae:	3208      	adds	r2, #8
 80121b0:	f10a 0a01 	add.w	sl, sl, #1
 80121b4:	106d      	asrs	r5, r5, #1
 80121b6:	9204      	str	r2, [sp, #16]
 80121b8:	e7cc      	b.n	8012154 <_strtod_l+0x4d4>
 80121ba:	d0ec      	beq.n	8012196 <_strtod_l+0x516>
 80121bc:	426d      	negs	r5, r5
 80121be:	f015 020f 	ands.w	r2, r5, #15
 80121c2:	d00a      	beq.n	80121da <_strtod_l+0x55a>
 80121c4:	4b11      	ldr	r3, [pc, #68]	; (801220c <_strtod_l+0x58c>)
 80121c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d2:	f7ee fb63 	bl	800089c <__aeabi_ddiv>
 80121d6:	4680      	mov	r8, r0
 80121d8:	4689      	mov	r9, r1
 80121da:	112d      	asrs	r5, r5, #4
 80121dc:	d0db      	beq.n	8012196 <_strtod_l+0x516>
 80121de:	2d1f      	cmp	r5, #31
 80121e0:	dd1e      	ble.n	8012220 <_strtod_l+0x5a0>
 80121e2:	2500      	movs	r5, #0
 80121e4:	46ab      	mov	fp, r5
 80121e6:	9509      	str	r5, [sp, #36]	; 0x24
 80121e8:	9505      	str	r5, [sp, #20]
 80121ea:	2322      	movs	r3, #34	; 0x22
 80121ec:	f04f 0800 	mov.w	r8, #0
 80121f0:	f04f 0900 	mov.w	r9, #0
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	e78d      	b.n	8012114 <_strtod_l+0x494>
 80121f8:	08015979 	.word	0x08015979
 80121fc:	08015ba4 	.word	0x08015ba4
 8012200:	08015971 	.word	0x08015971
 8012204:	080159a6 	.word	0x080159a6
 8012208:	08015d50 	.word	0x08015d50
 801220c:	08015ab8 	.word	0x08015ab8
 8012210:	08015a90 	.word	0x08015a90
 8012214:	7ff00000 	.word	0x7ff00000
 8012218:	7ca00000 	.word	0x7ca00000
 801221c:	7fefffff 	.word	0x7fefffff
 8012220:	f015 0310 	ands.w	r3, r5, #16
 8012224:	bf18      	it	ne
 8012226:	236a      	movne	r3, #106	; 0x6a
 8012228:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80125cc <_strtod_l+0x94c>
 801222c:	9304      	str	r3, [sp, #16]
 801222e:	4640      	mov	r0, r8
 8012230:	4649      	mov	r1, r9
 8012232:	2300      	movs	r3, #0
 8012234:	07ea      	lsls	r2, r5, #31
 8012236:	d504      	bpl.n	8012242 <_strtod_l+0x5c2>
 8012238:	e9da 2300 	ldrd	r2, r3, [sl]
 801223c:	f7ee fa04 	bl	8000648 <__aeabi_dmul>
 8012240:	2301      	movs	r3, #1
 8012242:	106d      	asrs	r5, r5, #1
 8012244:	f10a 0a08 	add.w	sl, sl, #8
 8012248:	d1f4      	bne.n	8012234 <_strtod_l+0x5b4>
 801224a:	b10b      	cbz	r3, 8012250 <_strtod_l+0x5d0>
 801224c:	4680      	mov	r8, r0
 801224e:	4689      	mov	r9, r1
 8012250:	9b04      	ldr	r3, [sp, #16]
 8012252:	b1bb      	cbz	r3, 8012284 <_strtod_l+0x604>
 8012254:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012258:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801225c:	2b00      	cmp	r3, #0
 801225e:	4649      	mov	r1, r9
 8012260:	dd10      	ble.n	8012284 <_strtod_l+0x604>
 8012262:	2b1f      	cmp	r3, #31
 8012264:	f340 811e 	ble.w	80124a4 <_strtod_l+0x824>
 8012268:	2b34      	cmp	r3, #52	; 0x34
 801226a:	bfde      	ittt	le
 801226c:	f04f 33ff 	movle.w	r3, #4294967295
 8012270:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012274:	4093      	lslle	r3, r2
 8012276:	f04f 0800 	mov.w	r8, #0
 801227a:	bfcc      	ite	gt
 801227c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012280:	ea03 0901 	andle.w	r9, r3, r1
 8012284:	2200      	movs	r2, #0
 8012286:	2300      	movs	r3, #0
 8012288:	4640      	mov	r0, r8
 801228a:	4649      	mov	r1, r9
 801228c:	f7ee fc44 	bl	8000b18 <__aeabi_dcmpeq>
 8012290:	2800      	cmp	r0, #0
 8012292:	d1a6      	bne.n	80121e2 <_strtod_l+0x562>
 8012294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801229a:	4633      	mov	r3, r6
 801229c:	465a      	mov	r2, fp
 801229e:	4620      	mov	r0, r4
 80122a0:	f7ff f8cc 	bl	801143c <__s2b>
 80122a4:	9009      	str	r0, [sp, #36]	; 0x24
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f43f af2a 	beq.w	8012100 <_strtod_l+0x480>
 80122ac:	9a08      	ldr	r2, [sp, #32]
 80122ae:	9b05      	ldr	r3, [sp, #20]
 80122b0:	2a00      	cmp	r2, #0
 80122b2:	eba3 0307 	sub.w	r3, r3, r7
 80122b6:	bfa8      	it	ge
 80122b8:	2300      	movge	r3, #0
 80122ba:	930c      	str	r3, [sp, #48]	; 0x30
 80122bc:	2500      	movs	r5, #0
 80122be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80122c2:	9312      	str	r3, [sp, #72]	; 0x48
 80122c4:	46ab      	mov	fp, r5
 80122c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c8:	4620      	mov	r0, r4
 80122ca:	6859      	ldr	r1, [r3, #4]
 80122cc:	f7ff f80e 	bl	80112ec <_Balloc>
 80122d0:	9005      	str	r0, [sp, #20]
 80122d2:	2800      	cmp	r0, #0
 80122d4:	f43f af18 	beq.w	8012108 <_strtod_l+0x488>
 80122d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122da:	691a      	ldr	r2, [r3, #16]
 80122dc:	3202      	adds	r2, #2
 80122de:	f103 010c 	add.w	r1, r3, #12
 80122e2:	0092      	lsls	r2, r2, #2
 80122e4:	300c      	adds	r0, #12
 80122e6:	f7fe f872 	bl	80103ce <memcpy>
 80122ea:	ec49 8b10 	vmov	d0, r8, r9
 80122ee:	aa18      	add	r2, sp, #96	; 0x60
 80122f0:	a917      	add	r1, sp, #92	; 0x5c
 80122f2:	4620      	mov	r0, r4
 80122f4:	f7ff fbd6 	bl	8011aa4 <__d2b>
 80122f8:	ec49 8b18 	vmov	d8, r8, r9
 80122fc:	9016      	str	r0, [sp, #88]	; 0x58
 80122fe:	2800      	cmp	r0, #0
 8012300:	f43f af02 	beq.w	8012108 <_strtod_l+0x488>
 8012304:	2101      	movs	r1, #1
 8012306:	4620      	mov	r0, r4
 8012308:	f7ff f930 	bl	801156c <__i2b>
 801230c:	4683      	mov	fp, r0
 801230e:	2800      	cmp	r0, #0
 8012310:	f43f aefa 	beq.w	8012108 <_strtod_l+0x488>
 8012314:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012316:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012318:	2e00      	cmp	r6, #0
 801231a:	bfab      	itete	ge
 801231c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801231e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012320:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012322:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012326:	bfac      	ite	ge
 8012328:	eb06 0a03 	addge.w	sl, r6, r3
 801232c:	1b9f      	sublt	r7, r3, r6
 801232e:	9b04      	ldr	r3, [sp, #16]
 8012330:	1af6      	subs	r6, r6, r3
 8012332:	4416      	add	r6, r2
 8012334:	4ba0      	ldr	r3, [pc, #640]	; (80125b8 <_strtod_l+0x938>)
 8012336:	3e01      	subs	r6, #1
 8012338:	429e      	cmp	r6, r3
 801233a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801233e:	f280 80c4 	bge.w	80124ca <_strtod_l+0x84a>
 8012342:	1b9b      	subs	r3, r3, r6
 8012344:	2b1f      	cmp	r3, #31
 8012346:	eba2 0203 	sub.w	r2, r2, r3
 801234a:	f04f 0101 	mov.w	r1, #1
 801234e:	f300 80b0 	bgt.w	80124b2 <_strtod_l+0x832>
 8012352:	fa01 f303 	lsl.w	r3, r1, r3
 8012356:	930e      	str	r3, [sp, #56]	; 0x38
 8012358:	2300      	movs	r3, #0
 801235a:	930d      	str	r3, [sp, #52]	; 0x34
 801235c:	eb0a 0602 	add.w	r6, sl, r2
 8012360:	9b04      	ldr	r3, [sp, #16]
 8012362:	45b2      	cmp	sl, r6
 8012364:	4417      	add	r7, r2
 8012366:	441f      	add	r7, r3
 8012368:	4653      	mov	r3, sl
 801236a:	bfa8      	it	ge
 801236c:	4633      	movge	r3, r6
 801236e:	42bb      	cmp	r3, r7
 8012370:	bfa8      	it	ge
 8012372:	463b      	movge	r3, r7
 8012374:	2b00      	cmp	r3, #0
 8012376:	bfc2      	ittt	gt
 8012378:	1af6      	subgt	r6, r6, r3
 801237a:	1aff      	subgt	r7, r7, r3
 801237c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012382:	2b00      	cmp	r3, #0
 8012384:	dd17      	ble.n	80123b6 <_strtod_l+0x736>
 8012386:	4659      	mov	r1, fp
 8012388:	461a      	mov	r2, r3
 801238a:	4620      	mov	r0, r4
 801238c:	f7ff f9ae 	bl	80116ec <__pow5mult>
 8012390:	4683      	mov	fp, r0
 8012392:	2800      	cmp	r0, #0
 8012394:	f43f aeb8 	beq.w	8012108 <_strtod_l+0x488>
 8012398:	4601      	mov	r1, r0
 801239a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801239c:	4620      	mov	r0, r4
 801239e:	f7ff f8fb 	bl	8011598 <__multiply>
 80123a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80123a4:	2800      	cmp	r0, #0
 80123a6:	f43f aeaf 	beq.w	8012108 <_strtod_l+0x488>
 80123aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80123ac:	4620      	mov	r0, r4
 80123ae:	f7fe ffdd 	bl	801136c <_Bfree>
 80123b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123b4:	9316      	str	r3, [sp, #88]	; 0x58
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	f300 808c 	bgt.w	80124d4 <_strtod_l+0x854>
 80123bc:	9b08      	ldr	r3, [sp, #32]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	dd08      	ble.n	80123d4 <_strtod_l+0x754>
 80123c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123c4:	9905      	ldr	r1, [sp, #20]
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7ff f990 	bl	80116ec <__pow5mult>
 80123cc:	9005      	str	r0, [sp, #20]
 80123ce:	2800      	cmp	r0, #0
 80123d0:	f43f ae9a 	beq.w	8012108 <_strtod_l+0x488>
 80123d4:	2f00      	cmp	r7, #0
 80123d6:	dd08      	ble.n	80123ea <_strtod_l+0x76a>
 80123d8:	9905      	ldr	r1, [sp, #20]
 80123da:	463a      	mov	r2, r7
 80123dc:	4620      	mov	r0, r4
 80123de:	f7ff f9df 	bl	80117a0 <__lshift>
 80123e2:	9005      	str	r0, [sp, #20]
 80123e4:	2800      	cmp	r0, #0
 80123e6:	f43f ae8f 	beq.w	8012108 <_strtod_l+0x488>
 80123ea:	f1ba 0f00 	cmp.w	sl, #0
 80123ee:	dd08      	ble.n	8012402 <_strtod_l+0x782>
 80123f0:	4659      	mov	r1, fp
 80123f2:	4652      	mov	r2, sl
 80123f4:	4620      	mov	r0, r4
 80123f6:	f7ff f9d3 	bl	80117a0 <__lshift>
 80123fa:	4683      	mov	fp, r0
 80123fc:	2800      	cmp	r0, #0
 80123fe:	f43f ae83 	beq.w	8012108 <_strtod_l+0x488>
 8012402:	9a05      	ldr	r2, [sp, #20]
 8012404:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012406:	4620      	mov	r0, r4
 8012408:	f7ff fa52 	bl	80118b0 <__mdiff>
 801240c:	4605      	mov	r5, r0
 801240e:	2800      	cmp	r0, #0
 8012410:	f43f ae7a 	beq.w	8012108 <_strtod_l+0x488>
 8012414:	68c3      	ldr	r3, [r0, #12]
 8012416:	930b      	str	r3, [sp, #44]	; 0x2c
 8012418:	2300      	movs	r3, #0
 801241a:	60c3      	str	r3, [r0, #12]
 801241c:	4659      	mov	r1, fp
 801241e:	f7ff fa2b 	bl	8011878 <__mcmp>
 8012422:	2800      	cmp	r0, #0
 8012424:	da60      	bge.n	80124e8 <_strtod_l+0x868>
 8012426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012428:	ea53 0308 	orrs.w	r3, r3, r8
 801242c:	f040 8084 	bne.w	8012538 <_strtod_l+0x8b8>
 8012430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012434:	2b00      	cmp	r3, #0
 8012436:	d17f      	bne.n	8012538 <_strtod_l+0x8b8>
 8012438:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801243c:	0d1b      	lsrs	r3, r3, #20
 801243e:	051b      	lsls	r3, r3, #20
 8012440:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012444:	d978      	bls.n	8012538 <_strtod_l+0x8b8>
 8012446:	696b      	ldr	r3, [r5, #20]
 8012448:	b913      	cbnz	r3, 8012450 <_strtod_l+0x7d0>
 801244a:	692b      	ldr	r3, [r5, #16]
 801244c:	2b01      	cmp	r3, #1
 801244e:	dd73      	ble.n	8012538 <_strtod_l+0x8b8>
 8012450:	4629      	mov	r1, r5
 8012452:	2201      	movs	r2, #1
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff f9a3 	bl	80117a0 <__lshift>
 801245a:	4659      	mov	r1, fp
 801245c:	4605      	mov	r5, r0
 801245e:	f7ff fa0b 	bl	8011878 <__mcmp>
 8012462:	2800      	cmp	r0, #0
 8012464:	dd68      	ble.n	8012538 <_strtod_l+0x8b8>
 8012466:	9904      	ldr	r1, [sp, #16]
 8012468:	4a54      	ldr	r2, [pc, #336]	; (80125bc <_strtod_l+0x93c>)
 801246a:	464b      	mov	r3, r9
 801246c:	2900      	cmp	r1, #0
 801246e:	f000 8084 	beq.w	801257a <_strtod_l+0x8fa>
 8012472:	ea02 0109 	and.w	r1, r2, r9
 8012476:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801247a:	dc7e      	bgt.n	801257a <_strtod_l+0x8fa>
 801247c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012480:	f77f aeb3 	ble.w	80121ea <_strtod_l+0x56a>
 8012484:	4b4e      	ldr	r3, [pc, #312]	; (80125c0 <_strtod_l+0x940>)
 8012486:	4640      	mov	r0, r8
 8012488:	4649      	mov	r1, r9
 801248a:	2200      	movs	r2, #0
 801248c:	f7ee f8dc 	bl	8000648 <__aeabi_dmul>
 8012490:	4b4a      	ldr	r3, [pc, #296]	; (80125bc <_strtod_l+0x93c>)
 8012492:	400b      	ands	r3, r1
 8012494:	4680      	mov	r8, r0
 8012496:	4689      	mov	r9, r1
 8012498:	2b00      	cmp	r3, #0
 801249a:	f47f ae3f 	bne.w	801211c <_strtod_l+0x49c>
 801249e:	2322      	movs	r3, #34	; 0x22
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	e63b      	b.n	801211c <_strtod_l+0x49c>
 80124a4:	f04f 32ff 	mov.w	r2, #4294967295
 80124a8:	fa02 f303 	lsl.w	r3, r2, r3
 80124ac:	ea03 0808 	and.w	r8, r3, r8
 80124b0:	e6e8      	b.n	8012284 <_strtod_l+0x604>
 80124b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80124b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80124ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80124be:	36e2      	adds	r6, #226	; 0xe2
 80124c0:	fa01 f306 	lsl.w	r3, r1, r6
 80124c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80124c8:	e748      	b.n	801235c <_strtod_l+0x6dc>
 80124ca:	2100      	movs	r1, #0
 80124cc:	2301      	movs	r3, #1
 80124ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80124d2:	e743      	b.n	801235c <_strtod_l+0x6dc>
 80124d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80124d6:	4632      	mov	r2, r6
 80124d8:	4620      	mov	r0, r4
 80124da:	f7ff f961 	bl	80117a0 <__lshift>
 80124de:	9016      	str	r0, [sp, #88]	; 0x58
 80124e0:	2800      	cmp	r0, #0
 80124e2:	f47f af6b 	bne.w	80123bc <_strtod_l+0x73c>
 80124e6:	e60f      	b.n	8012108 <_strtod_l+0x488>
 80124e8:	46ca      	mov	sl, r9
 80124ea:	d171      	bne.n	80125d0 <_strtod_l+0x950>
 80124ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124f2:	b352      	cbz	r2, 801254a <_strtod_l+0x8ca>
 80124f4:	4a33      	ldr	r2, [pc, #204]	; (80125c4 <_strtod_l+0x944>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d12a      	bne.n	8012550 <_strtod_l+0x8d0>
 80124fa:	9b04      	ldr	r3, [sp, #16]
 80124fc:	4641      	mov	r1, r8
 80124fe:	b1fb      	cbz	r3, 8012540 <_strtod_l+0x8c0>
 8012500:	4b2e      	ldr	r3, [pc, #184]	; (80125bc <_strtod_l+0x93c>)
 8012502:	ea09 0303 	and.w	r3, r9, r3
 8012506:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801250a:	f04f 32ff 	mov.w	r2, #4294967295
 801250e:	d81a      	bhi.n	8012546 <_strtod_l+0x8c6>
 8012510:	0d1b      	lsrs	r3, r3, #20
 8012512:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012516:	fa02 f303 	lsl.w	r3, r2, r3
 801251a:	4299      	cmp	r1, r3
 801251c:	d118      	bne.n	8012550 <_strtod_l+0x8d0>
 801251e:	4b2a      	ldr	r3, [pc, #168]	; (80125c8 <_strtod_l+0x948>)
 8012520:	459a      	cmp	sl, r3
 8012522:	d102      	bne.n	801252a <_strtod_l+0x8aa>
 8012524:	3101      	adds	r1, #1
 8012526:	f43f adef 	beq.w	8012108 <_strtod_l+0x488>
 801252a:	4b24      	ldr	r3, [pc, #144]	; (80125bc <_strtod_l+0x93c>)
 801252c:	ea0a 0303 	and.w	r3, sl, r3
 8012530:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012534:	f04f 0800 	mov.w	r8, #0
 8012538:	9b04      	ldr	r3, [sp, #16]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1a2      	bne.n	8012484 <_strtod_l+0x804>
 801253e:	e5ed      	b.n	801211c <_strtod_l+0x49c>
 8012540:	f04f 33ff 	mov.w	r3, #4294967295
 8012544:	e7e9      	b.n	801251a <_strtod_l+0x89a>
 8012546:	4613      	mov	r3, r2
 8012548:	e7e7      	b.n	801251a <_strtod_l+0x89a>
 801254a:	ea53 0308 	orrs.w	r3, r3, r8
 801254e:	d08a      	beq.n	8012466 <_strtod_l+0x7e6>
 8012550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012552:	b1e3      	cbz	r3, 801258e <_strtod_l+0x90e>
 8012554:	ea13 0f0a 	tst.w	r3, sl
 8012558:	d0ee      	beq.n	8012538 <_strtod_l+0x8b8>
 801255a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801255c:	9a04      	ldr	r2, [sp, #16]
 801255e:	4640      	mov	r0, r8
 8012560:	4649      	mov	r1, r9
 8012562:	b1c3      	cbz	r3, 8012596 <_strtod_l+0x916>
 8012564:	f7ff fb6f 	bl	8011c46 <sulp>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	ec51 0b18 	vmov	r0, r1, d8
 8012570:	f7ed feb4 	bl	80002dc <__adddf3>
 8012574:	4680      	mov	r8, r0
 8012576:	4689      	mov	r9, r1
 8012578:	e7de      	b.n	8012538 <_strtod_l+0x8b8>
 801257a:	4013      	ands	r3, r2
 801257c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012580:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012584:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012588:	f04f 38ff 	mov.w	r8, #4294967295
 801258c:	e7d4      	b.n	8012538 <_strtod_l+0x8b8>
 801258e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012590:	ea13 0f08 	tst.w	r3, r8
 8012594:	e7e0      	b.n	8012558 <_strtod_l+0x8d8>
 8012596:	f7ff fb56 	bl	8011c46 <sulp>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	ec51 0b18 	vmov	r0, r1, d8
 80125a2:	f7ed fe99 	bl	80002d8 <__aeabi_dsub>
 80125a6:	2200      	movs	r2, #0
 80125a8:	2300      	movs	r3, #0
 80125aa:	4680      	mov	r8, r0
 80125ac:	4689      	mov	r9, r1
 80125ae:	f7ee fab3 	bl	8000b18 <__aeabi_dcmpeq>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d0c0      	beq.n	8012538 <_strtod_l+0x8b8>
 80125b6:	e618      	b.n	80121ea <_strtod_l+0x56a>
 80125b8:	fffffc02 	.word	0xfffffc02
 80125bc:	7ff00000 	.word	0x7ff00000
 80125c0:	39500000 	.word	0x39500000
 80125c4:	000fffff 	.word	0x000fffff
 80125c8:	7fefffff 	.word	0x7fefffff
 80125cc:	08015bb8 	.word	0x08015bb8
 80125d0:	4659      	mov	r1, fp
 80125d2:	4628      	mov	r0, r5
 80125d4:	f7ff fac0 	bl	8011b58 <__ratio>
 80125d8:	ec57 6b10 	vmov	r6, r7, d0
 80125dc:	ee10 0a10 	vmov	r0, s0
 80125e0:	2200      	movs	r2, #0
 80125e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125e6:	4639      	mov	r1, r7
 80125e8:	f7ee faaa 	bl	8000b40 <__aeabi_dcmple>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d071      	beq.n	80126d4 <_strtod_l+0xa54>
 80125f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d17c      	bne.n	80126f0 <_strtod_l+0xa70>
 80125f6:	f1b8 0f00 	cmp.w	r8, #0
 80125fa:	d15a      	bne.n	80126b2 <_strtod_l+0xa32>
 80125fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012600:	2b00      	cmp	r3, #0
 8012602:	d15d      	bne.n	80126c0 <_strtod_l+0xa40>
 8012604:	4b90      	ldr	r3, [pc, #576]	; (8012848 <_strtod_l+0xbc8>)
 8012606:	2200      	movs	r2, #0
 8012608:	4630      	mov	r0, r6
 801260a:	4639      	mov	r1, r7
 801260c:	f7ee fa8e 	bl	8000b2c <__aeabi_dcmplt>
 8012610:	2800      	cmp	r0, #0
 8012612:	d15c      	bne.n	80126ce <_strtod_l+0xa4e>
 8012614:	4630      	mov	r0, r6
 8012616:	4639      	mov	r1, r7
 8012618:	4b8c      	ldr	r3, [pc, #560]	; (801284c <_strtod_l+0xbcc>)
 801261a:	2200      	movs	r2, #0
 801261c:	f7ee f814 	bl	8000648 <__aeabi_dmul>
 8012620:	4606      	mov	r6, r0
 8012622:	460f      	mov	r7, r1
 8012624:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012628:	9606      	str	r6, [sp, #24]
 801262a:	9307      	str	r3, [sp, #28]
 801262c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012630:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012634:	4b86      	ldr	r3, [pc, #536]	; (8012850 <_strtod_l+0xbd0>)
 8012636:	ea0a 0303 	and.w	r3, sl, r3
 801263a:	930d      	str	r3, [sp, #52]	; 0x34
 801263c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801263e:	4b85      	ldr	r3, [pc, #532]	; (8012854 <_strtod_l+0xbd4>)
 8012640:	429a      	cmp	r2, r3
 8012642:	f040 8090 	bne.w	8012766 <_strtod_l+0xae6>
 8012646:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801264a:	ec49 8b10 	vmov	d0, r8, r9
 801264e:	f7ff f9b9 	bl	80119c4 <__ulp>
 8012652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012656:	ec51 0b10 	vmov	r0, r1, d0
 801265a:	f7ed fff5 	bl	8000648 <__aeabi_dmul>
 801265e:	4642      	mov	r2, r8
 8012660:	464b      	mov	r3, r9
 8012662:	f7ed fe3b 	bl	80002dc <__adddf3>
 8012666:	460b      	mov	r3, r1
 8012668:	4979      	ldr	r1, [pc, #484]	; (8012850 <_strtod_l+0xbd0>)
 801266a:	4a7b      	ldr	r2, [pc, #492]	; (8012858 <_strtod_l+0xbd8>)
 801266c:	4019      	ands	r1, r3
 801266e:	4291      	cmp	r1, r2
 8012670:	4680      	mov	r8, r0
 8012672:	d944      	bls.n	80126fe <_strtod_l+0xa7e>
 8012674:	ee18 2a90 	vmov	r2, s17
 8012678:	4b78      	ldr	r3, [pc, #480]	; (801285c <_strtod_l+0xbdc>)
 801267a:	429a      	cmp	r2, r3
 801267c:	d104      	bne.n	8012688 <_strtod_l+0xa08>
 801267e:	ee18 3a10 	vmov	r3, s16
 8012682:	3301      	adds	r3, #1
 8012684:	f43f ad40 	beq.w	8012108 <_strtod_l+0x488>
 8012688:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801285c <_strtod_l+0xbdc>
 801268c:	f04f 38ff 	mov.w	r8, #4294967295
 8012690:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012692:	4620      	mov	r0, r4
 8012694:	f7fe fe6a 	bl	801136c <_Bfree>
 8012698:	9905      	ldr	r1, [sp, #20]
 801269a:	4620      	mov	r0, r4
 801269c:	f7fe fe66 	bl	801136c <_Bfree>
 80126a0:	4659      	mov	r1, fp
 80126a2:	4620      	mov	r0, r4
 80126a4:	f7fe fe62 	bl	801136c <_Bfree>
 80126a8:	4629      	mov	r1, r5
 80126aa:	4620      	mov	r0, r4
 80126ac:	f7fe fe5e 	bl	801136c <_Bfree>
 80126b0:	e609      	b.n	80122c6 <_strtod_l+0x646>
 80126b2:	f1b8 0f01 	cmp.w	r8, #1
 80126b6:	d103      	bne.n	80126c0 <_strtod_l+0xa40>
 80126b8:	f1b9 0f00 	cmp.w	r9, #0
 80126bc:	f43f ad95 	beq.w	80121ea <_strtod_l+0x56a>
 80126c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012818 <_strtod_l+0xb98>
 80126c4:	4f60      	ldr	r7, [pc, #384]	; (8012848 <_strtod_l+0xbc8>)
 80126c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126ca:	2600      	movs	r6, #0
 80126cc:	e7ae      	b.n	801262c <_strtod_l+0x9ac>
 80126ce:	4f5f      	ldr	r7, [pc, #380]	; (801284c <_strtod_l+0xbcc>)
 80126d0:	2600      	movs	r6, #0
 80126d2:	e7a7      	b.n	8012624 <_strtod_l+0x9a4>
 80126d4:	4b5d      	ldr	r3, [pc, #372]	; (801284c <_strtod_l+0xbcc>)
 80126d6:	4630      	mov	r0, r6
 80126d8:	4639      	mov	r1, r7
 80126da:	2200      	movs	r2, #0
 80126dc:	f7ed ffb4 	bl	8000648 <__aeabi_dmul>
 80126e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e2:	4606      	mov	r6, r0
 80126e4:	460f      	mov	r7, r1
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d09c      	beq.n	8012624 <_strtod_l+0x9a4>
 80126ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80126ee:	e79d      	b.n	801262c <_strtod_l+0x9ac>
 80126f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012820 <_strtod_l+0xba0>
 80126f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126f8:	ec57 6b17 	vmov	r6, r7, d7
 80126fc:	e796      	b.n	801262c <_strtod_l+0x9ac>
 80126fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012702:	9b04      	ldr	r3, [sp, #16]
 8012704:	46ca      	mov	sl, r9
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1c2      	bne.n	8012690 <_strtod_l+0xa10>
 801270a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801270e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012710:	0d1b      	lsrs	r3, r3, #20
 8012712:	051b      	lsls	r3, r3, #20
 8012714:	429a      	cmp	r2, r3
 8012716:	d1bb      	bne.n	8012690 <_strtod_l+0xa10>
 8012718:	4630      	mov	r0, r6
 801271a:	4639      	mov	r1, r7
 801271c:	f7ee fb44 	bl	8000da8 <__aeabi_d2lz>
 8012720:	f7ed ff64 	bl	80005ec <__aeabi_l2d>
 8012724:	4602      	mov	r2, r0
 8012726:	460b      	mov	r3, r1
 8012728:	4630      	mov	r0, r6
 801272a:	4639      	mov	r1, r7
 801272c:	f7ed fdd4 	bl	80002d8 <__aeabi_dsub>
 8012730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012732:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012736:	ea43 0308 	orr.w	r3, r3, r8
 801273a:	4313      	orrs	r3, r2
 801273c:	4606      	mov	r6, r0
 801273e:	460f      	mov	r7, r1
 8012740:	d054      	beq.n	80127ec <_strtod_l+0xb6c>
 8012742:	a339      	add	r3, pc, #228	; (adr r3, 8012828 <_strtod_l+0xba8>)
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	f7ee f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801274c:	2800      	cmp	r0, #0
 801274e:	f47f ace5 	bne.w	801211c <_strtod_l+0x49c>
 8012752:	a337      	add	r3, pc, #220	; (adr r3, 8012830 <_strtod_l+0xbb0>)
 8012754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012758:	4630      	mov	r0, r6
 801275a:	4639      	mov	r1, r7
 801275c:	f7ee fa04 	bl	8000b68 <__aeabi_dcmpgt>
 8012760:	2800      	cmp	r0, #0
 8012762:	d095      	beq.n	8012690 <_strtod_l+0xa10>
 8012764:	e4da      	b.n	801211c <_strtod_l+0x49c>
 8012766:	9b04      	ldr	r3, [sp, #16]
 8012768:	b333      	cbz	r3, 80127b8 <_strtod_l+0xb38>
 801276a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801276c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012770:	d822      	bhi.n	80127b8 <_strtod_l+0xb38>
 8012772:	a331      	add	r3, pc, #196	; (adr r3, 8012838 <_strtod_l+0xbb8>)
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ee f9e0 	bl	8000b40 <__aeabi_dcmple>
 8012780:	b1a0      	cbz	r0, 80127ac <_strtod_l+0xb2c>
 8012782:	4639      	mov	r1, r7
 8012784:	4630      	mov	r0, r6
 8012786:	f7ee fa37 	bl	8000bf8 <__aeabi_d2uiz>
 801278a:	2801      	cmp	r0, #1
 801278c:	bf38      	it	cc
 801278e:	2001      	movcc	r0, #1
 8012790:	f7ed fee0 	bl	8000554 <__aeabi_ui2d>
 8012794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012796:	4606      	mov	r6, r0
 8012798:	460f      	mov	r7, r1
 801279a:	bb23      	cbnz	r3, 80127e6 <_strtod_l+0xb66>
 801279c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127a0:	9010      	str	r0, [sp, #64]	; 0x40
 80127a2:	9311      	str	r3, [sp, #68]	; 0x44
 80127a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80127a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80127ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80127b4:	1a9b      	subs	r3, r3, r2
 80127b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80127b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80127bc:	eeb0 0a48 	vmov.f32	s0, s16
 80127c0:	eef0 0a68 	vmov.f32	s1, s17
 80127c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80127c8:	f7ff f8fc 	bl	80119c4 <__ulp>
 80127cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80127d0:	ec53 2b10 	vmov	r2, r3, d0
 80127d4:	f7ed ff38 	bl	8000648 <__aeabi_dmul>
 80127d8:	ec53 2b18 	vmov	r2, r3, d8
 80127dc:	f7ed fd7e 	bl	80002dc <__adddf3>
 80127e0:	4680      	mov	r8, r0
 80127e2:	4689      	mov	r9, r1
 80127e4:	e78d      	b.n	8012702 <_strtod_l+0xa82>
 80127e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80127ea:	e7db      	b.n	80127a4 <_strtod_l+0xb24>
 80127ec:	a314      	add	r3, pc, #80	; (adr r3, 8012840 <_strtod_l+0xbc0>)
 80127ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f2:	f7ee f99b 	bl	8000b2c <__aeabi_dcmplt>
 80127f6:	e7b3      	b.n	8012760 <_strtod_l+0xae0>
 80127f8:	2300      	movs	r3, #0
 80127fa:	930a      	str	r3, [sp, #40]	; 0x28
 80127fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80127fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012800:	6013      	str	r3, [r2, #0]
 8012802:	f7ff ba7c 	b.w	8011cfe <_strtod_l+0x7e>
 8012806:	2a65      	cmp	r2, #101	; 0x65
 8012808:	f43f ab75 	beq.w	8011ef6 <_strtod_l+0x276>
 801280c:	2a45      	cmp	r2, #69	; 0x45
 801280e:	f43f ab72 	beq.w	8011ef6 <_strtod_l+0x276>
 8012812:	2301      	movs	r3, #1
 8012814:	f7ff bbaa 	b.w	8011f6c <_strtod_l+0x2ec>
 8012818:	00000000 	.word	0x00000000
 801281c:	bff00000 	.word	0xbff00000
 8012820:	00000000 	.word	0x00000000
 8012824:	3ff00000 	.word	0x3ff00000
 8012828:	94a03595 	.word	0x94a03595
 801282c:	3fdfffff 	.word	0x3fdfffff
 8012830:	35afe535 	.word	0x35afe535
 8012834:	3fe00000 	.word	0x3fe00000
 8012838:	ffc00000 	.word	0xffc00000
 801283c:	41dfffff 	.word	0x41dfffff
 8012840:	94a03595 	.word	0x94a03595
 8012844:	3fcfffff 	.word	0x3fcfffff
 8012848:	3ff00000 	.word	0x3ff00000
 801284c:	3fe00000 	.word	0x3fe00000
 8012850:	7ff00000 	.word	0x7ff00000
 8012854:	7fe00000 	.word	0x7fe00000
 8012858:	7c9fffff 	.word	0x7c9fffff
 801285c:	7fefffff 	.word	0x7fefffff

08012860 <_strtod_r>:
 8012860:	4b01      	ldr	r3, [pc, #4]	; (8012868 <_strtod_r+0x8>)
 8012862:	f7ff ba0d 	b.w	8011c80 <_strtod_l>
 8012866:	bf00      	nop
 8012868:	20000074 	.word	0x20000074

0801286c <_strtol_l.constprop.0>:
 801286c:	2b01      	cmp	r3, #1
 801286e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012872:	d001      	beq.n	8012878 <_strtol_l.constprop.0+0xc>
 8012874:	2b24      	cmp	r3, #36	; 0x24
 8012876:	d906      	bls.n	8012886 <_strtol_l.constprop.0+0x1a>
 8012878:	f7fd fd7c 	bl	8010374 <__errno>
 801287c:	2316      	movs	r3, #22
 801287e:	6003      	str	r3, [r0, #0]
 8012880:	2000      	movs	r0, #0
 8012882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012886:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801296c <_strtol_l.constprop.0+0x100>
 801288a:	460d      	mov	r5, r1
 801288c:	462e      	mov	r6, r5
 801288e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012892:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012896:	f017 0708 	ands.w	r7, r7, #8
 801289a:	d1f7      	bne.n	801288c <_strtol_l.constprop.0+0x20>
 801289c:	2c2d      	cmp	r4, #45	; 0x2d
 801289e:	d132      	bne.n	8012906 <_strtol_l.constprop.0+0x9a>
 80128a0:	782c      	ldrb	r4, [r5, #0]
 80128a2:	2701      	movs	r7, #1
 80128a4:	1cb5      	adds	r5, r6, #2
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d05b      	beq.n	8012962 <_strtol_l.constprop.0+0xf6>
 80128aa:	2b10      	cmp	r3, #16
 80128ac:	d109      	bne.n	80128c2 <_strtol_l.constprop.0+0x56>
 80128ae:	2c30      	cmp	r4, #48	; 0x30
 80128b0:	d107      	bne.n	80128c2 <_strtol_l.constprop.0+0x56>
 80128b2:	782c      	ldrb	r4, [r5, #0]
 80128b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80128b8:	2c58      	cmp	r4, #88	; 0x58
 80128ba:	d14d      	bne.n	8012958 <_strtol_l.constprop.0+0xec>
 80128bc:	786c      	ldrb	r4, [r5, #1]
 80128be:	2310      	movs	r3, #16
 80128c0:	3502      	adds	r5, #2
 80128c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80128c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80128ca:	f04f 0e00 	mov.w	lr, #0
 80128ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80128d2:	4676      	mov	r6, lr
 80128d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80128d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80128dc:	f1bc 0f09 	cmp.w	ip, #9
 80128e0:	d816      	bhi.n	8012910 <_strtol_l.constprop.0+0xa4>
 80128e2:	4664      	mov	r4, ip
 80128e4:	42a3      	cmp	r3, r4
 80128e6:	dd24      	ble.n	8012932 <_strtol_l.constprop.0+0xc6>
 80128e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80128ec:	d008      	beq.n	8012900 <_strtol_l.constprop.0+0x94>
 80128ee:	45b1      	cmp	r9, r6
 80128f0:	d31c      	bcc.n	801292c <_strtol_l.constprop.0+0xc0>
 80128f2:	d101      	bne.n	80128f8 <_strtol_l.constprop.0+0x8c>
 80128f4:	45a2      	cmp	sl, r4
 80128f6:	db19      	blt.n	801292c <_strtol_l.constprop.0+0xc0>
 80128f8:	fb06 4603 	mla	r6, r6, r3, r4
 80128fc:	f04f 0e01 	mov.w	lr, #1
 8012900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012904:	e7e8      	b.n	80128d8 <_strtol_l.constprop.0+0x6c>
 8012906:	2c2b      	cmp	r4, #43	; 0x2b
 8012908:	bf04      	itt	eq
 801290a:	782c      	ldrbeq	r4, [r5, #0]
 801290c:	1cb5      	addeq	r5, r6, #2
 801290e:	e7ca      	b.n	80128a6 <_strtol_l.constprop.0+0x3a>
 8012910:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012914:	f1bc 0f19 	cmp.w	ip, #25
 8012918:	d801      	bhi.n	801291e <_strtol_l.constprop.0+0xb2>
 801291a:	3c37      	subs	r4, #55	; 0x37
 801291c:	e7e2      	b.n	80128e4 <_strtol_l.constprop.0+0x78>
 801291e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012922:	f1bc 0f19 	cmp.w	ip, #25
 8012926:	d804      	bhi.n	8012932 <_strtol_l.constprop.0+0xc6>
 8012928:	3c57      	subs	r4, #87	; 0x57
 801292a:	e7db      	b.n	80128e4 <_strtol_l.constprop.0+0x78>
 801292c:	f04f 3eff 	mov.w	lr, #4294967295
 8012930:	e7e6      	b.n	8012900 <_strtol_l.constprop.0+0x94>
 8012932:	f1be 3fff 	cmp.w	lr, #4294967295
 8012936:	d105      	bne.n	8012944 <_strtol_l.constprop.0+0xd8>
 8012938:	2322      	movs	r3, #34	; 0x22
 801293a:	6003      	str	r3, [r0, #0]
 801293c:	4646      	mov	r6, r8
 801293e:	b942      	cbnz	r2, 8012952 <_strtol_l.constprop.0+0xe6>
 8012940:	4630      	mov	r0, r6
 8012942:	e79e      	b.n	8012882 <_strtol_l.constprop.0+0x16>
 8012944:	b107      	cbz	r7, 8012948 <_strtol_l.constprop.0+0xdc>
 8012946:	4276      	negs	r6, r6
 8012948:	2a00      	cmp	r2, #0
 801294a:	d0f9      	beq.n	8012940 <_strtol_l.constprop.0+0xd4>
 801294c:	f1be 0f00 	cmp.w	lr, #0
 8012950:	d000      	beq.n	8012954 <_strtol_l.constprop.0+0xe8>
 8012952:	1e69      	subs	r1, r5, #1
 8012954:	6011      	str	r1, [r2, #0]
 8012956:	e7f3      	b.n	8012940 <_strtol_l.constprop.0+0xd4>
 8012958:	2430      	movs	r4, #48	; 0x30
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1b1      	bne.n	80128c2 <_strtol_l.constprop.0+0x56>
 801295e:	2308      	movs	r3, #8
 8012960:	e7af      	b.n	80128c2 <_strtol_l.constprop.0+0x56>
 8012962:	2c30      	cmp	r4, #48	; 0x30
 8012964:	d0a5      	beq.n	80128b2 <_strtol_l.constprop.0+0x46>
 8012966:	230a      	movs	r3, #10
 8012968:	e7ab      	b.n	80128c2 <_strtol_l.constprop.0+0x56>
 801296a:	bf00      	nop
 801296c:	08015be1 	.word	0x08015be1

08012970 <_strtol_r>:
 8012970:	f7ff bf7c 	b.w	801286c <_strtol_l.constprop.0>

08012974 <__ssputs_r>:
 8012974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012978:	688e      	ldr	r6, [r1, #8]
 801297a:	461f      	mov	r7, r3
 801297c:	42be      	cmp	r6, r7
 801297e:	680b      	ldr	r3, [r1, #0]
 8012980:	4682      	mov	sl, r0
 8012982:	460c      	mov	r4, r1
 8012984:	4690      	mov	r8, r2
 8012986:	d82c      	bhi.n	80129e2 <__ssputs_r+0x6e>
 8012988:	898a      	ldrh	r2, [r1, #12]
 801298a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801298e:	d026      	beq.n	80129de <__ssputs_r+0x6a>
 8012990:	6965      	ldr	r5, [r4, #20]
 8012992:	6909      	ldr	r1, [r1, #16]
 8012994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012998:	eba3 0901 	sub.w	r9, r3, r1
 801299c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80129a0:	1c7b      	adds	r3, r7, #1
 80129a2:	444b      	add	r3, r9
 80129a4:	106d      	asrs	r5, r5, #1
 80129a6:	429d      	cmp	r5, r3
 80129a8:	bf38      	it	cc
 80129aa:	461d      	movcc	r5, r3
 80129ac:	0553      	lsls	r3, r2, #21
 80129ae:	d527      	bpl.n	8012a00 <__ssputs_r+0x8c>
 80129b0:	4629      	mov	r1, r5
 80129b2:	f7fe fc0f 	bl	80111d4 <_malloc_r>
 80129b6:	4606      	mov	r6, r0
 80129b8:	b360      	cbz	r0, 8012a14 <__ssputs_r+0xa0>
 80129ba:	6921      	ldr	r1, [r4, #16]
 80129bc:	464a      	mov	r2, r9
 80129be:	f7fd fd06 	bl	80103ce <memcpy>
 80129c2:	89a3      	ldrh	r3, [r4, #12]
 80129c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129cc:	81a3      	strh	r3, [r4, #12]
 80129ce:	6126      	str	r6, [r4, #16]
 80129d0:	6165      	str	r5, [r4, #20]
 80129d2:	444e      	add	r6, r9
 80129d4:	eba5 0509 	sub.w	r5, r5, r9
 80129d8:	6026      	str	r6, [r4, #0]
 80129da:	60a5      	str	r5, [r4, #8]
 80129dc:	463e      	mov	r6, r7
 80129de:	42be      	cmp	r6, r7
 80129e0:	d900      	bls.n	80129e4 <__ssputs_r+0x70>
 80129e2:	463e      	mov	r6, r7
 80129e4:	6820      	ldr	r0, [r4, #0]
 80129e6:	4632      	mov	r2, r6
 80129e8:	4641      	mov	r1, r8
 80129ea:	f000 fd5c 	bl	80134a6 <memmove>
 80129ee:	68a3      	ldr	r3, [r4, #8]
 80129f0:	1b9b      	subs	r3, r3, r6
 80129f2:	60a3      	str	r3, [r4, #8]
 80129f4:	6823      	ldr	r3, [r4, #0]
 80129f6:	4433      	add	r3, r6
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	2000      	movs	r0, #0
 80129fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a00:	462a      	mov	r2, r5
 8012a02:	f001 f922 	bl	8013c4a <_realloc_r>
 8012a06:	4606      	mov	r6, r0
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d1e0      	bne.n	80129ce <__ssputs_r+0x5a>
 8012a0c:	6921      	ldr	r1, [r4, #16]
 8012a0e:	4650      	mov	r0, sl
 8012a10:	f7fe fb6c 	bl	80110ec <_free_r>
 8012a14:	230c      	movs	r3, #12
 8012a16:	f8ca 3000 	str.w	r3, [sl]
 8012a1a:	89a3      	ldrh	r3, [r4, #12]
 8012a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a20:	81a3      	strh	r3, [r4, #12]
 8012a22:	f04f 30ff 	mov.w	r0, #4294967295
 8012a26:	e7e9      	b.n	80129fc <__ssputs_r+0x88>

08012a28 <_svfiprintf_r>:
 8012a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2c:	4698      	mov	r8, r3
 8012a2e:	898b      	ldrh	r3, [r1, #12]
 8012a30:	061b      	lsls	r3, r3, #24
 8012a32:	b09d      	sub	sp, #116	; 0x74
 8012a34:	4607      	mov	r7, r0
 8012a36:	460d      	mov	r5, r1
 8012a38:	4614      	mov	r4, r2
 8012a3a:	d50e      	bpl.n	8012a5a <_svfiprintf_r+0x32>
 8012a3c:	690b      	ldr	r3, [r1, #16]
 8012a3e:	b963      	cbnz	r3, 8012a5a <_svfiprintf_r+0x32>
 8012a40:	2140      	movs	r1, #64	; 0x40
 8012a42:	f7fe fbc7 	bl	80111d4 <_malloc_r>
 8012a46:	6028      	str	r0, [r5, #0]
 8012a48:	6128      	str	r0, [r5, #16]
 8012a4a:	b920      	cbnz	r0, 8012a56 <_svfiprintf_r+0x2e>
 8012a4c:	230c      	movs	r3, #12
 8012a4e:	603b      	str	r3, [r7, #0]
 8012a50:	f04f 30ff 	mov.w	r0, #4294967295
 8012a54:	e0d0      	b.n	8012bf8 <_svfiprintf_r+0x1d0>
 8012a56:	2340      	movs	r3, #64	; 0x40
 8012a58:	616b      	str	r3, [r5, #20]
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a5e:	2320      	movs	r3, #32
 8012a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a68:	2330      	movs	r3, #48	; 0x30
 8012a6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012c10 <_svfiprintf_r+0x1e8>
 8012a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a72:	f04f 0901 	mov.w	r9, #1
 8012a76:	4623      	mov	r3, r4
 8012a78:	469a      	mov	sl, r3
 8012a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a7e:	b10a      	cbz	r2, 8012a84 <_svfiprintf_r+0x5c>
 8012a80:	2a25      	cmp	r2, #37	; 0x25
 8012a82:	d1f9      	bne.n	8012a78 <_svfiprintf_r+0x50>
 8012a84:	ebba 0b04 	subs.w	fp, sl, r4
 8012a88:	d00b      	beq.n	8012aa2 <_svfiprintf_r+0x7a>
 8012a8a:	465b      	mov	r3, fp
 8012a8c:	4622      	mov	r2, r4
 8012a8e:	4629      	mov	r1, r5
 8012a90:	4638      	mov	r0, r7
 8012a92:	f7ff ff6f 	bl	8012974 <__ssputs_r>
 8012a96:	3001      	adds	r0, #1
 8012a98:	f000 80a9 	beq.w	8012bee <_svfiprintf_r+0x1c6>
 8012a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a9e:	445a      	add	r2, fp
 8012aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8012aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f000 80a1 	beq.w	8012bee <_svfiprintf_r+0x1c6>
 8012aac:	2300      	movs	r3, #0
 8012aae:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ab6:	f10a 0a01 	add.w	sl, sl, #1
 8012aba:	9304      	str	r3, [sp, #16]
 8012abc:	9307      	str	r3, [sp, #28]
 8012abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8012ac4:	4654      	mov	r4, sl
 8012ac6:	2205      	movs	r2, #5
 8012ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012acc:	4850      	ldr	r0, [pc, #320]	; (8012c10 <_svfiprintf_r+0x1e8>)
 8012ace:	f7ed fba7 	bl	8000220 <memchr>
 8012ad2:	9a04      	ldr	r2, [sp, #16]
 8012ad4:	b9d8      	cbnz	r0, 8012b0e <_svfiprintf_r+0xe6>
 8012ad6:	06d0      	lsls	r0, r2, #27
 8012ad8:	bf44      	itt	mi
 8012ada:	2320      	movmi	r3, #32
 8012adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ae0:	0711      	lsls	r1, r2, #28
 8012ae2:	bf44      	itt	mi
 8012ae4:	232b      	movmi	r3, #43	; 0x2b
 8012ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aea:	f89a 3000 	ldrb.w	r3, [sl]
 8012aee:	2b2a      	cmp	r3, #42	; 0x2a
 8012af0:	d015      	beq.n	8012b1e <_svfiprintf_r+0xf6>
 8012af2:	9a07      	ldr	r2, [sp, #28]
 8012af4:	4654      	mov	r4, sl
 8012af6:	2000      	movs	r0, #0
 8012af8:	f04f 0c0a 	mov.w	ip, #10
 8012afc:	4621      	mov	r1, r4
 8012afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b02:	3b30      	subs	r3, #48	; 0x30
 8012b04:	2b09      	cmp	r3, #9
 8012b06:	d94d      	bls.n	8012ba4 <_svfiprintf_r+0x17c>
 8012b08:	b1b0      	cbz	r0, 8012b38 <_svfiprintf_r+0x110>
 8012b0a:	9207      	str	r2, [sp, #28]
 8012b0c:	e014      	b.n	8012b38 <_svfiprintf_r+0x110>
 8012b0e:	eba0 0308 	sub.w	r3, r0, r8
 8012b12:	fa09 f303 	lsl.w	r3, r9, r3
 8012b16:	4313      	orrs	r3, r2
 8012b18:	9304      	str	r3, [sp, #16]
 8012b1a:	46a2      	mov	sl, r4
 8012b1c:	e7d2      	b.n	8012ac4 <_svfiprintf_r+0x9c>
 8012b1e:	9b03      	ldr	r3, [sp, #12]
 8012b20:	1d19      	adds	r1, r3, #4
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	9103      	str	r1, [sp, #12]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	bfbb      	ittet	lt
 8012b2a:	425b      	neglt	r3, r3
 8012b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8012b30:	9307      	strge	r3, [sp, #28]
 8012b32:	9307      	strlt	r3, [sp, #28]
 8012b34:	bfb8      	it	lt
 8012b36:	9204      	strlt	r2, [sp, #16]
 8012b38:	7823      	ldrb	r3, [r4, #0]
 8012b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8012b3c:	d10c      	bne.n	8012b58 <_svfiprintf_r+0x130>
 8012b3e:	7863      	ldrb	r3, [r4, #1]
 8012b40:	2b2a      	cmp	r3, #42	; 0x2a
 8012b42:	d134      	bne.n	8012bae <_svfiprintf_r+0x186>
 8012b44:	9b03      	ldr	r3, [sp, #12]
 8012b46:	1d1a      	adds	r2, r3, #4
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	9203      	str	r2, [sp, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bfb8      	it	lt
 8012b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b54:	3402      	adds	r4, #2
 8012b56:	9305      	str	r3, [sp, #20]
 8012b58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012c20 <_svfiprintf_r+0x1f8>
 8012b5c:	7821      	ldrb	r1, [r4, #0]
 8012b5e:	2203      	movs	r2, #3
 8012b60:	4650      	mov	r0, sl
 8012b62:	f7ed fb5d 	bl	8000220 <memchr>
 8012b66:	b138      	cbz	r0, 8012b78 <_svfiprintf_r+0x150>
 8012b68:	9b04      	ldr	r3, [sp, #16]
 8012b6a:	eba0 000a 	sub.w	r0, r0, sl
 8012b6e:	2240      	movs	r2, #64	; 0x40
 8012b70:	4082      	lsls	r2, r0
 8012b72:	4313      	orrs	r3, r2
 8012b74:	3401      	adds	r4, #1
 8012b76:	9304      	str	r3, [sp, #16]
 8012b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b7c:	4825      	ldr	r0, [pc, #148]	; (8012c14 <_svfiprintf_r+0x1ec>)
 8012b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b82:	2206      	movs	r2, #6
 8012b84:	f7ed fb4c 	bl	8000220 <memchr>
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d038      	beq.n	8012bfe <_svfiprintf_r+0x1d6>
 8012b8c:	4b22      	ldr	r3, [pc, #136]	; (8012c18 <_svfiprintf_r+0x1f0>)
 8012b8e:	bb1b      	cbnz	r3, 8012bd8 <_svfiprintf_r+0x1b0>
 8012b90:	9b03      	ldr	r3, [sp, #12]
 8012b92:	3307      	adds	r3, #7
 8012b94:	f023 0307 	bic.w	r3, r3, #7
 8012b98:	3308      	adds	r3, #8
 8012b9a:	9303      	str	r3, [sp, #12]
 8012b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b9e:	4433      	add	r3, r6
 8012ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ba2:	e768      	b.n	8012a76 <_svfiprintf_r+0x4e>
 8012ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ba8:	460c      	mov	r4, r1
 8012baa:	2001      	movs	r0, #1
 8012bac:	e7a6      	b.n	8012afc <_svfiprintf_r+0xd4>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	3401      	adds	r4, #1
 8012bb2:	9305      	str	r3, [sp, #20]
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	f04f 0c0a 	mov.w	ip, #10
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bc0:	3a30      	subs	r2, #48	; 0x30
 8012bc2:	2a09      	cmp	r2, #9
 8012bc4:	d903      	bls.n	8012bce <_svfiprintf_r+0x1a6>
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d0c6      	beq.n	8012b58 <_svfiprintf_r+0x130>
 8012bca:	9105      	str	r1, [sp, #20]
 8012bcc:	e7c4      	b.n	8012b58 <_svfiprintf_r+0x130>
 8012bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e7f0      	b.n	8012bba <_svfiprintf_r+0x192>
 8012bd8:	ab03      	add	r3, sp, #12
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	462a      	mov	r2, r5
 8012bde:	4b0f      	ldr	r3, [pc, #60]	; (8012c1c <_svfiprintf_r+0x1f4>)
 8012be0:	a904      	add	r1, sp, #16
 8012be2:	4638      	mov	r0, r7
 8012be4:	f7fc fbe2 	bl	800f3ac <_printf_float>
 8012be8:	1c42      	adds	r2, r0, #1
 8012bea:	4606      	mov	r6, r0
 8012bec:	d1d6      	bne.n	8012b9c <_svfiprintf_r+0x174>
 8012bee:	89ab      	ldrh	r3, [r5, #12]
 8012bf0:	065b      	lsls	r3, r3, #25
 8012bf2:	f53f af2d 	bmi.w	8012a50 <_svfiprintf_r+0x28>
 8012bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bf8:	b01d      	add	sp, #116	; 0x74
 8012bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfe:	ab03      	add	r3, sp, #12
 8012c00:	9300      	str	r3, [sp, #0]
 8012c02:	462a      	mov	r2, r5
 8012c04:	4b05      	ldr	r3, [pc, #20]	; (8012c1c <_svfiprintf_r+0x1f4>)
 8012c06:	a904      	add	r1, sp, #16
 8012c08:	4638      	mov	r0, r7
 8012c0a:	f7fc fe73 	bl	800f8f4 <_printf_i>
 8012c0e:	e7eb      	b.n	8012be8 <_svfiprintf_r+0x1c0>
 8012c10:	08015ce1 	.word	0x08015ce1
 8012c14:	08015ceb 	.word	0x08015ceb
 8012c18:	0800f3ad 	.word	0x0800f3ad
 8012c1c:	08012975 	.word	0x08012975
 8012c20:	08015ce7 	.word	0x08015ce7

08012c24 <_sungetc_r>:
 8012c24:	b538      	push	{r3, r4, r5, lr}
 8012c26:	1c4b      	adds	r3, r1, #1
 8012c28:	4614      	mov	r4, r2
 8012c2a:	d103      	bne.n	8012c34 <_sungetc_r+0x10>
 8012c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8012c30:	4628      	mov	r0, r5
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
 8012c34:	8993      	ldrh	r3, [r2, #12]
 8012c36:	f023 0320 	bic.w	r3, r3, #32
 8012c3a:	8193      	strh	r3, [r2, #12]
 8012c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c3e:	6852      	ldr	r2, [r2, #4]
 8012c40:	b2cd      	uxtb	r5, r1
 8012c42:	b18b      	cbz	r3, 8012c68 <_sungetc_r+0x44>
 8012c44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012c46:	4293      	cmp	r3, r2
 8012c48:	dd08      	ble.n	8012c5c <_sungetc_r+0x38>
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	1e5a      	subs	r2, r3, #1
 8012c4e:	6022      	str	r2, [r4, #0]
 8012c50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012c54:	6863      	ldr	r3, [r4, #4]
 8012c56:	3301      	adds	r3, #1
 8012c58:	6063      	str	r3, [r4, #4]
 8012c5a:	e7e9      	b.n	8012c30 <_sungetc_r+0xc>
 8012c5c:	4621      	mov	r1, r4
 8012c5e:	f000 fbe8 	bl	8013432 <__submore>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d0f1      	beq.n	8012c4a <_sungetc_r+0x26>
 8012c66:	e7e1      	b.n	8012c2c <_sungetc_r+0x8>
 8012c68:	6921      	ldr	r1, [r4, #16]
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	b151      	cbz	r1, 8012c84 <_sungetc_r+0x60>
 8012c6e:	4299      	cmp	r1, r3
 8012c70:	d208      	bcs.n	8012c84 <_sungetc_r+0x60>
 8012c72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012c76:	42a9      	cmp	r1, r5
 8012c78:	d104      	bne.n	8012c84 <_sungetc_r+0x60>
 8012c7a:	3b01      	subs	r3, #1
 8012c7c:	3201      	adds	r2, #1
 8012c7e:	6023      	str	r3, [r4, #0]
 8012c80:	6062      	str	r2, [r4, #4]
 8012c82:	e7d5      	b.n	8012c30 <_sungetc_r+0xc>
 8012c84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8012c8e:	2303      	movs	r3, #3
 8012c90:	63a3      	str	r3, [r4, #56]	; 0x38
 8012c92:	4623      	mov	r3, r4
 8012c94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012c98:	6023      	str	r3, [r4, #0]
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e7dc      	b.n	8012c58 <_sungetc_r+0x34>

08012c9e <__ssrefill_r>:
 8012c9e:	b510      	push	{r4, lr}
 8012ca0:	460c      	mov	r4, r1
 8012ca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012ca4:	b169      	cbz	r1, 8012cc2 <__ssrefill_r+0x24>
 8012ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012caa:	4299      	cmp	r1, r3
 8012cac:	d001      	beq.n	8012cb2 <__ssrefill_r+0x14>
 8012cae:	f7fe fa1d 	bl	80110ec <_free_r>
 8012cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cb4:	6063      	str	r3, [r4, #4]
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8012cba:	b113      	cbz	r3, 8012cc2 <__ssrefill_r+0x24>
 8012cbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012cbe:	6023      	str	r3, [r4, #0]
 8012cc0:	bd10      	pop	{r4, pc}
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	6063      	str	r3, [r4, #4]
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	f043 0320 	orr.w	r3, r3, #32
 8012cd0:	81a3      	strh	r3, [r4, #12]
 8012cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd6:	e7f3      	b.n	8012cc0 <__ssrefill_r+0x22>

08012cd8 <__ssvfiscanf_r>:
 8012cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cdc:	460c      	mov	r4, r1
 8012cde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012ce8:	49a6      	ldr	r1, [pc, #664]	; (8012f84 <__ssvfiscanf_r+0x2ac>)
 8012cea:	91a0      	str	r1, [sp, #640]	; 0x280
 8012cec:	f10d 0804 	add.w	r8, sp, #4
 8012cf0:	49a5      	ldr	r1, [pc, #660]	; (8012f88 <__ssvfiscanf_r+0x2b0>)
 8012cf2:	4fa6      	ldr	r7, [pc, #664]	; (8012f8c <__ssvfiscanf_r+0x2b4>)
 8012cf4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012f90 <__ssvfiscanf_r+0x2b8>
 8012cf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	91a1      	str	r1, [sp, #644]	; 0x284
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	7813      	ldrb	r3, [r2, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f000 815a 	beq.w	8012fbe <__ssvfiscanf_r+0x2e6>
 8012d0a:	5cf9      	ldrb	r1, [r7, r3]
 8012d0c:	f011 0108 	ands.w	r1, r1, #8
 8012d10:	f102 0501 	add.w	r5, r2, #1
 8012d14:	d019      	beq.n	8012d4a <__ssvfiscanf_r+0x72>
 8012d16:	6863      	ldr	r3, [r4, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dd0f      	ble.n	8012d3c <__ssvfiscanf_r+0x64>
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	781a      	ldrb	r2, [r3, #0]
 8012d20:	5cba      	ldrb	r2, [r7, r2]
 8012d22:	0712      	lsls	r2, r2, #28
 8012d24:	d401      	bmi.n	8012d2a <__ssvfiscanf_r+0x52>
 8012d26:	462a      	mov	r2, r5
 8012d28:	e7eb      	b.n	8012d02 <__ssvfiscanf_r+0x2a>
 8012d2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012d2c:	3201      	adds	r2, #1
 8012d2e:	9245      	str	r2, [sp, #276]	; 0x114
 8012d30:	6862      	ldr	r2, [r4, #4]
 8012d32:	3301      	adds	r3, #1
 8012d34:	3a01      	subs	r2, #1
 8012d36:	6062      	str	r2, [r4, #4]
 8012d38:	6023      	str	r3, [r4, #0]
 8012d3a:	e7ec      	b.n	8012d16 <__ssvfiscanf_r+0x3e>
 8012d3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d3e:	4621      	mov	r1, r4
 8012d40:	4630      	mov	r0, r6
 8012d42:	4798      	blx	r3
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d0e9      	beq.n	8012d1c <__ssvfiscanf_r+0x44>
 8012d48:	e7ed      	b.n	8012d26 <__ssvfiscanf_r+0x4e>
 8012d4a:	2b25      	cmp	r3, #37	; 0x25
 8012d4c:	d012      	beq.n	8012d74 <__ssvfiscanf_r+0x9c>
 8012d4e:	469a      	mov	sl, r3
 8012d50:	6863      	ldr	r3, [r4, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f340 8091 	ble.w	8012e7a <__ssvfiscanf_r+0x1a2>
 8012d58:	6822      	ldr	r2, [r4, #0]
 8012d5a:	7813      	ldrb	r3, [r2, #0]
 8012d5c:	4553      	cmp	r3, sl
 8012d5e:	f040 812e 	bne.w	8012fbe <__ssvfiscanf_r+0x2e6>
 8012d62:	6863      	ldr	r3, [r4, #4]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	6063      	str	r3, [r4, #4]
 8012d68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012d6a:	3201      	adds	r2, #1
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	6022      	str	r2, [r4, #0]
 8012d70:	9345      	str	r3, [sp, #276]	; 0x114
 8012d72:	e7d8      	b.n	8012d26 <__ssvfiscanf_r+0x4e>
 8012d74:	9141      	str	r1, [sp, #260]	; 0x104
 8012d76:	9143      	str	r1, [sp, #268]	; 0x10c
 8012d78:	7853      	ldrb	r3, [r2, #1]
 8012d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d7c:	bf02      	ittt	eq
 8012d7e:	2310      	moveq	r3, #16
 8012d80:	1c95      	addeq	r5, r2, #2
 8012d82:	9341      	streq	r3, [sp, #260]	; 0x104
 8012d84:	220a      	movs	r2, #10
 8012d86:	46aa      	mov	sl, r5
 8012d88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012d8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012d90:	2b09      	cmp	r3, #9
 8012d92:	d91c      	bls.n	8012dce <__ssvfiscanf_r+0xf6>
 8012d94:	487e      	ldr	r0, [pc, #504]	; (8012f90 <__ssvfiscanf_r+0x2b8>)
 8012d96:	2203      	movs	r2, #3
 8012d98:	f7ed fa42 	bl	8000220 <memchr>
 8012d9c:	b138      	cbz	r0, 8012dae <__ssvfiscanf_r+0xd6>
 8012d9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012da0:	eba0 0009 	sub.w	r0, r0, r9
 8012da4:	2301      	movs	r3, #1
 8012da6:	4083      	lsls	r3, r0
 8012da8:	4313      	orrs	r3, r2
 8012daa:	9341      	str	r3, [sp, #260]	; 0x104
 8012dac:	4655      	mov	r5, sl
 8012dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012db2:	2b78      	cmp	r3, #120	; 0x78
 8012db4:	d806      	bhi.n	8012dc4 <__ssvfiscanf_r+0xec>
 8012db6:	2b57      	cmp	r3, #87	; 0x57
 8012db8:	d810      	bhi.n	8012ddc <__ssvfiscanf_r+0x104>
 8012dba:	2b25      	cmp	r3, #37	; 0x25
 8012dbc:	d0c7      	beq.n	8012d4e <__ssvfiscanf_r+0x76>
 8012dbe:	d857      	bhi.n	8012e70 <__ssvfiscanf_r+0x198>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d065      	beq.n	8012e90 <__ssvfiscanf_r+0x1b8>
 8012dc4:	2303      	movs	r3, #3
 8012dc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8012dc8:	230a      	movs	r3, #10
 8012dca:	9342      	str	r3, [sp, #264]	; 0x108
 8012dcc:	e076      	b.n	8012ebc <__ssvfiscanf_r+0x1e4>
 8012dce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012dd0:	fb02 1103 	mla	r1, r2, r3, r1
 8012dd4:	3930      	subs	r1, #48	; 0x30
 8012dd6:	9143      	str	r1, [sp, #268]	; 0x10c
 8012dd8:	4655      	mov	r5, sl
 8012dda:	e7d4      	b.n	8012d86 <__ssvfiscanf_r+0xae>
 8012ddc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012de0:	2a20      	cmp	r2, #32
 8012de2:	d8ef      	bhi.n	8012dc4 <__ssvfiscanf_r+0xec>
 8012de4:	a101      	add	r1, pc, #4	; (adr r1, 8012dec <__ssvfiscanf_r+0x114>)
 8012de6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012dea:	bf00      	nop
 8012dec:	08012e9f 	.word	0x08012e9f
 8012df0:	08012dc5 	.word	0x08012dc5
 8012df4:	08012dc5 	.word	0x08012dc5
 8012df8:	08012efd 	.word	0x08012efd
 8012dfc:	08012dc5 	.word	0x08012dc5
 8012e00:	08012dc5 	.word	0x08012dc5
 8012e04:	08012dc5 	.word	0x08012dc5
 8012e08:	08012dc5 	.word	0x08012dc5
 8012e0c:	08012dc5 	.word	0x08012dc5
 8012e10:	08012dc5 	.word	0x08012dc5
 8012e14:	08012dc5 	.word	0x08012dc5
 8012e18:	08012f13 	.word	0x08012f13
 8012e1c:	08012ef9 	.word	0x08012ef9
 8012e20:	08012e77 	.word	0x08012e77
 8012e24:	08012e77 	.word	0x08012e77
 8012e28:	08012e77 	.word	0x08012e77
 8012e2c:	08012dc5 	.word	0x08012dc5
 8012e30:	08012eb5 	.word	0x08012eb5
 8012e34:	08012dc5 	.word	0x08012dc5
 8012e38:	08012dc5 	.word	0x08012dc5
 8012e3c:	08012dc5 	.word	0x08012dc5
 8012e40:	08012dc5 	.word	0x08012dc5
 8012e44:	08012f23 	.word	0x08012f23
 8012e48:	08012ef1 	.word	0x08012ef1
 8012e4c:	08012e97 	.word	0x08012e97
 8012e50:	08012dc5 	.word	0x08012dc5
 8012e54:	08012dc5 	.word	0x08012dc5
 8012e58:	08012f1f 	.word	0x08012f1f
 8012e5c:	08012dc5 	.word	0x08012dc5
 8012e60:	08012ef9 	.word	0x08012ef9
 8012e64:	08012dc5 	.word	0x08012dc5
 8012e68:	08012dc5 	.word	0x08012dc5
 8012e6c:	08012e9f 	.word	0x08012e9f
 8012e70:	3b45      	subs	r3, #69	; 0x45
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d8a6      	bhi.n	8012dc4 <__ssvfiscanf_r+0xec>
 8012e76:	2305      	movs	r3, #5
 8012e78:	e01f      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012e7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	4630      	mov	r0, r6
 8012e80:	4798      	blx	r3
 8012e82:	2800      	cmp	r0, #0
 8012e84:	f43f af68 	beq.w	8012d58 <__ssvfiscanf_r+0x80>
 8012e88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	f040 808d 	bne.w	8012faa <__ssvfiscanf_r+0x2d2>
 8012e90:	f04f 30ff 	mov.w	r0, #4294967295
 8012e94:	e08f      	b.n	8012fb6 <__ssvfiscanf_r+0x2de>
 8012e96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012e98:	f042 0220 	orr.w	r2, r2, #32
 8012e9c:	9241      	str	r2, [sp, #260]	; 0x104
 8012e9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ea4:	9241      	str	r2, [sp, #260]	; 0x104
 8012ea6:	2210      	movs	r2, #16
 8012ea8:	2b6f      	cmp	r3, #111	; 0x6f
 8012eaa:	9242      	str	r2, [sp, #264]	; 0x108
 8012eac:	bf34      	ite	cc
 8012eae:	2303      	movcc	r3, #3
 8012eb0:	2304      	movcs	r3, #4
 8012eb2:	e002      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	9342      	str	r3, [sp, #264]	; 0x108
 8012eb8:	2303      	movs	r3, #3
 8012eba:	9347      	str	r3, [sp, #284]	; 0x11c
 8012ebc:	6863      	ldr	r3, [r4, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	dd3d      	ble.n	8012f3e <__ssvfiscanf_r+0x266>
 8012ec2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ec4:	0659      	lsls	r1, r3, #25
 8012ec6:	d404      	bmi.n	8012ed2 <__ssvfiscanf_r+0x1fa>
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	781a      	ldrb	r2, [r3, #0]
 8012ecc:	5cba      	ldrb	r2, [r7, r2]
 8012ece:	0712      	lsls	r2, r2, #28
 8012ed0:	d43c      	bmi.n	8012f4c <__ssvfiscanf_r+0x274>
 8012ed2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012ed4:	2b02      	cmp	r3, #2
 8012ed6:	dc4b      	bgt.n	8012f70 <__ssvfiscanf_r+0x298>
 8012ed8:	466b      	mov	r3, sp
 8012eda:	4622      	mov	r2, r4
 8012edc:	a941      	add	r1, sp, #260	; 0x104
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f000 f872 	bl	8012fc8 <_scanf_chars>
 8012ee4:	2801      	cmp	r0, #1
 8012ee6:	d06a      	beq.n	8012fbe <__ssvfiscanf_r+0x2e6>
 8012ee8:	2802      	cmp	r0, #2
 8012eea:	f47f af1c 	bne.w	8012d26 <__ssvfiscanf_r+0x4e>
 8012eee:	e7cb      	b.n	8012e88 <__ssvfiscanf_r+0x1b0>
 8012ef0:	2308      	movs	r3, #8
 8012ef2:	9342      	str	r3, [sp, #264]	; 0x108
 8012ef4:	2304      	movs	r3, #4
 8012ef6:	e7e0      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012ef8:	220a      	movs	r2, #10
 8012efa:	e7d5      	b.n	8012ea8 <__ssvfiscanf_r+0x1d0>
 8012efc:	4629      	mov	r1, r5
 8012efe:	4640      	mov	r0, r8
 8012f00:	f000 fa5e 	bl	80133c0 <__sccl>
 8012f04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8012f0c:	4605      	mov	r5, r0
 8012f0e:	2301      	movs	r3, #1
 8012f10:	e7d3      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012f12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f18:	9341      	str	r3, [sp, #260]	; 0x104
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	e7cd      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012f1e:	2302      	movs	r3, #2
 8012f20:	e7cb      	b.n	8012eba <__ssvfiscanf_r+0x1e2>
 8012f22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012f24:	06c3      	lsls	r3, r0, #27
 8012f26:	f53f aefe 	bmi.w	8012d26 <__ssvfiscanf_r+0x4e>
 8012f2a:	9b00      	ldr	r3, [sp, #0]
 8012f2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f2e:	1d19      	adds	r1, r3, #4
 8012f30:	9100      	str	r1, [sp, #0]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	07c0      	lsls	r0, r0, #31
 8012f36:	bf4c      	ite	mi
 8012f38:	801a      	strhmi	r2, [r3, #0]
 8012f3a:	601a      	strpl	r2, [r3, #0]
 8012f3c:	e6f3      	b.n	8012d26 <__ssvfiscanf_r+0x4e>
 8012f3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f40:	4621      	mov	r1, r4
 8012f42:	4630      	mov	r0, r6
 8012f44:	4798      	blx	r3
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d0bb      	beq.n	8012ec2 <__ssvfiscanf_r+0x1ea>
 8012f4a:	e79d      	b.n	8012e88 <__ssvfiscanf_r+0x1b0>
 8012f4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f4e:	3201      	adds	r2, #1
 8012f50:	9245      	str	r2, [sp, #276]	; 0x114
 8012f52:	6862      	ldr	r2, [r4, #4]
 8012f54:	3a01      	subs	r2, #1
 8012f56:	2a00      	cmp	r2, #0
 8012f58:	6062      	str	r2, [r4, #4]
 8012f5a:	dd02      	ble.n	8012f62 <__ssvfiscanf_r+0x28a>
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	6023      	str	r3, [r4, #0]
 8012f60:	e7b2      	b.n	8012ec8 <__ssvfiscanf_r+0x1f0>
 8012f62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f64:	4621      	mov	r1, r4
 8012f66:	4630      	mov	r0, r6
 8012f68:	4798      	blx	r3
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	d0ac      	beq.n	8012ec8 <__ssvfiscanf_r+0x1f0>
 8012f6e:	e78b      	b.n	8012e88 <__ssvfiscanf_r+0x1b0>
 8012f70:	2b04      	cmp	r3, #4
 8012f72:	dc0f      	bgt.n	8012f94 <__ssvfiscanf_r+0x2bc>
 8012f74:	466b      	mov	r3, sp
 8012f76:	4622      	mov	r2, r4
 8012f78:	a941      	add	r1, sp, #260	; 0x104
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f000 f87e 	bl	801307c <_scanf_i>
 8012f80:	e7b0      	b.n	8012ee4 <__ssvfiscanf_r+0x20c>
 8012f82:	bf00      	nop
 8012f84:	08012c25 	.word	0x08012c25
 8012f88:	08012c9f 	.word	0x08012c9f
 8012f8c:	08015be1 	.word	0x08015be1
 8012f90:	08015ce7 	.word	0x08015ce7
 8012f94:	4b0b      	ldr	r3, [pc, #44]	; (8012fc4 <__ssvfiscanf_r+0x2ec>)
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f43f aec5 	beq.w	8012d26 <__ssvfiscanf_r+0x4e>
 8012f9c:	466b      	mov	r3, sp
 8012f9e:	4622      	mov	r2, r4
 8012fa0:	a941      	add	r1, sp, #260	; 0x104
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	f7fc fdc8 	bl	800fb38 <_scanf_float>
 8012fa8:	e79c      	b.n	8012ee4 <__ssvfiscanf_r+0x20c>
 8012faa:	89a3      	ldrh	r3, [r4, #12]
 8012fac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012fb0:	bf18      	it	ne
 8012fb2:	f04f 30ff 	movne.w	r0, #4294967295
 8012fb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fbe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012fc0:	e7f9      	b.n	8012fb6 <__ssvfiscanf_r+0x2de>
 8012fc2:	bf00      	nop
 8012fc4:	0800fb39 	.word	0x0800fb39

08012fc8 <_scanf_chars>:
 8012fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fcc:	4615      	mov	r5, r2
 8012fce:	688a      	ldr	r2, [r1, #8]
 8012fd0:	4680      	mov	r8, r0
 8012fd2:	460c      	mov	r4, r1
 8012fd4:	b932      	cbnz	r2, 8012fe4 <_scanf_chars+0x1c>
 8012fd6:	698a      	ldr	r2, [r1, #24]
 8012fd8:	2a00      	cmp	r2, #0
 8012fda:	bf0c      	ite	eq
 8012fdc:	2201      	moveq	r2, #1
 8012fde:	f04f 32ff 	movne.w	r2, #4294967295
 8012fe2:	608a      	str	r2, [r1, #8]
 8012fe4:	6822      	ldr	r2, [r4, #0]
 8012fe6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013078 <_scanf_chars+0xb0>
 8012fea:	06d1      	lsls	r1, r2, #27
 8012fec:	bf5f      	itttt	pl
 8012fee:	681a      	ldrpl	r2, [r3, #0]
 8012ff0:	1d11      	addpl	r1, r2, #4
 8012ff2:	6019      	strpl	r1, [r3, #0]
 8012ff4:	6816      	ldrpl	r6, [r2, #0]
 8012ff6:	2700      	movs	r7, #0
 8012ff8:	69a0      	ldr	r0, [r4, #24]
 8012ffa:	b188      	cbz	r0, 8013020 <_scanf_chars+0x58>
 8012ffc:	2801      	cmp	r0, #1
 8012ffe:	d107      	bne.n	8013010 <_scanf_chars+0x48>
 8013000:	682a      	ldr	r2, [r5, #0]
 8013002:	7811      	ldrb	r1, [r2, #0]
 8013004:	6962      	ldr	r2, [r4, #20]
 8013006:	5c52      	ldrb	r2, [r2, r1]
 8013008:	b952      	cbnz	r2, 8013020 <_scanf_chars+0x58>
 801300a:	2f00      	cmp	r7, #0
 801300c:	d031      	beq.n	8013072 <_scanf_chars+0xaa>
 801300e:	e022      	b.n	8013056 <_scanf_chars+0x8e>
 8013010:	2802      	cmp	r0, #2
 8013012:	d120      	bne.n	8013056 <_scanf_chars+0x8e>
 8013014:	682b      	ldr	r3, [r5, #0]
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f819 3003 	ldrb.w	r3, [r9, r3]
 801301c:	071b      	lsls	r3, r3, #28
 801301e:	d41a      	bmi.n	8013056 <_scanf_chars+0x8e>
 8013020:	6823      	ldr	r3, [r4, #0]
 8013022:	06da      	lsls	r2, r3, #27
 8013024:	bf5e      	ittt	pl
 8013026:	682b      	ldrpl	r3, [r5, #0]
 8013028:	781b      	ldrbpl	r3, [r3, #0]
 801302a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801302e:	682a      	ldr	r2, [r5, #0]
 8013030:	686b      	ldr	r3, [r5, #4]
 8013032:	3201      	adds	r2, #1
 8013034:	602a      	str	r2, [r5, #0]
 8013036:	68a2      	ldr	r2, [r4, #8]
 8013038:	3b01      	subs	r3, #1
 801303a:	3a01      	subs	r2, #1
 801303c:	606b      	str	r3, [r5, #4]
 801303e:	3701      	adds	r7, #1
 8013040:	60a2      	str	r2, [r4, #8]
 8013042:	b142      	cbz	r2, 8013056 <_scanf_chars+0x8e>
 8013044:	2b00      	cmp	r3, #0
 8013046:	dcd7      	bgt.n	8012ff8 <_scanf_chars+0x30>
 8013048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801304c:	4629      	mov	r1, r5
 801304e:	4640      	mov	r0, r8
 8013050:	4798      	blx	r3
 8013052:	2800      	cmp	r0, #0
 8013054:	d0d0      	beq.n	8012ff8 <_scanf_chars+0x30>
 8013056:	6823      	ldr	r3, [r4, #0]
 8013058:	f013 0310 	ands.w	r3, r3, #16
 801305c:	d105      	bne.n	801306a <_scanf_chars+0xa2>
 801305e:	68e2      	ldr	r2, [r4, #12]
 8013060:	3201      	adds	r2, #1
 8013062:	60e2      	str	r2, [r4, #12]
 8013064:	69a2      	ldr	r2, [r4, #24]
 8013066:	b102      	cbz	r2, 801306a <_scanf_chars+0xa2>
 8013068:	7033      	strb	r3, [r6, #0]
 801306a:	6923      	ldr	r3, [r4, #16]
 801306c:	443b      	add	r3, r7
 801306e:	6123      	str	r3, [r4, #16]
 8013070:	2000      	movs	r0, #0
 8013072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013076:	bf00      	nop
 8013078:	08015be1 	.word	0x08015be1

0801307c <_scanf_i>:
 801307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013080:	4698      	mov	r8, r3
 8013082:	4b74      	ldr	r3, [pc, #464]	; (8013254 <_scanf_i+0x1d8>)
 8013084:	460c      	mov	r4, r1
 8013086:	4682      	mov	sl, r0
 8013088:	4616      	mov	r6, r2
 801308a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801308e:	b087      	sub	sp, #28
 8013090:	ab03      	add	r3, sp, #12
 8013092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013096:	4b70      	ldr	r3, [pc, #448]	; (8013258 <_scanf_i+0x1dc>)
 8013098:	69a1      	ldr	r1, [r4, #24]
 801309a:	4a70      	ldr	r2, [pc, #448]	; (801325c <_scanf_i+0x1e0>)
 801309c:	2903      	cmp	r1, #3
 801309e:	bf18      	it	ne
 80130a0:	461a      	movne	r2, r3
 80130a2:	68a3      	ldr	r3, [r4, #8]
 80130a4:	9201      	str	r2, [sp, #4]
 80130a6:	1e5a      	subs	r2, r3, #1
 80130a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80130ac:	bf88      	it	hi
 80130ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80130b2:	4627      	mov	r7, r4
 80130b4:	bf82      	ittt	hi
 80130b6:	eb03 0905 	addhi.w	r9, r3, r5
 80130ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80130be:	60a3      	strhi	r3, [r4, #8]
 80130c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80130c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80130c8:	bf98      	it	ls
 80130ca:	f04f 0900 	movls.w	r9, #0
 80130ce:	6023      	str	r3, [r4, #0]
 80130d0:	463d      	mov	r5, r7
 80130d2:	f04f 0b00 	mov.w	fp, #0
 80130d6:	6831      	ldr	r1, [r6, #0]
 80130d8:	ab03      	add	r3, sp, #12
 80130da:	7809      	ldrb	r1, [r1, #0]
 80130dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80130e0:	2202      	movs	r2, #2
 80130e2:	f7ed f89d 	bl	8000220 <memchr>
 80130e6:	b328      	cbz	r0, 8013134 <_scanf_i+0xb8>
 80130e8:	f1bb 0f01 	cmp.w	fp, #1
 80130ec:	d159      	bne.n	80131a2 <_scanf_i+0x126>
 80130ee:	6862      	ldr	r2, [r4, #4]
 80130f0:	b92a      	cbnz	r2, 80130fe <_scanf_i+0x82>
 80130f2:	6822      	ldr	r2, [r4, #0]
 80130f4:	2308      	movs	r3, #8
 80130f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130fa:	6063      	str	r3, [r4, #4]
 80130fc:	6022      	str	r2, [r4, #0]
 80130fe:	6822      	ldr	r2, [r4, #0]
 8013100:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013104:	6022      	str	r2, [r4, #0]
 8013106:	68a2      	ldr	r2, [r4, #8]
 8013108:	1e51      	subs	r1, r2, #1
 801310a:	60a1      	str	r1, [r4, #8]
 801310c:	b192      	cbz	r2, 8013134 <_scanf_i+0xb8>
 801310e:	6832      	ldr	r2, [r6, #0]
 8013110:	1c51      	adds	r1, r2, #1
 8013112:	6031      	str	r1, [r6, #0]
 8013114:	7812      	ldrb	r2, [r2, #0]
 8013116:	f805 2b01 	strb.w	r2, [r5], #1
 801311a:	6872      	ldr	r2, [r6, #4]
 801311c:	3a01      	subs	r2, #1
 801311e:	2a00      	cmp	r2, #0
 8013120:	6072      	str	r2, [r6, #4]
 8013122:	dc07      	bgt.n	8013134 <_scanf_i+0xb8>
 8013124:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013128:	4631      	mov	r1, r6
 801312a:	4650      	mov	r0, sl
 801312c:	4790      	blx	r2
 801312e:	2800      	cmp	r0, #0
 8013130:	f040 8085 	bne.w	801323e <_scanf_i+0x1c2>
 8013134:	f10b 0b01 	add.w	fp, fp, #1
 8013138:	f1bb 0f03 	cmp.w	fp, #3
 801313c:	d1cb      	bne.n	80130d6 <_scanf_i+0x5a>
 801313e:	6863      	ldr	r3, [r4, #4]
 8013140:	b90b      	cbnz	r3, 8013146 <_scanf_i+0xca>
 8013142:	230a      	movs	r3, #10
 8013144:	6063      	str	r3, [r4, #4]
 8013146:	6863      	ldr	r3, [r4, #4]
 8013148:	4945      	ldr	r1, [pc, #276]	; (8013260 <_scanf_i+0x1e4>)
 801314a:	6960      	ldr	r0, [r4, #20]
 801314c:	1ac9      	subs	r1, r1, r3
 801314e:	f000 f937 	bl	80133c0 <__sccl>
 8013152:	f04f 0b00 	mov.w	fp, #0
 8013156:	68a3      	ldr	r3, [r4, #8]
 8013158:	6822      	ldr	r2, [r4, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d03d      	beq.n	80131da <_scanf_i+0x15e>
 801315e:	6831      	ldr	r1, [r6, #0]
 8013160:	6960      	ldr	r0, [r4, #20]
 8013162:	f891 c000 	ldrb.w	ip, [r1]
 8013166:	f810 000c 	ldrb.w	r0, [r0, ip]
 801316a:	2800      	cmp	r0, #0
 801316c:	d035      	beq.n	80131da <_scanf_i+0x15e>
 801316e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013172:	d124      	bne.n	80131be <_scanf_i+0x142>
 8013174:	0510      	lsls	r0, r2, #20
 8013176:	d522      	bpl.n	80131be <_scanf_i+0x142>
 8013178:	f10b 0b01 	add.w	fp, fp, #1
 801317c:	f1b9 0f00 	cmp.w	r9, #0
 8013180:	d003      	beq.n	801318a <_scanf_i+0x10e>
 8013182:	3301      	adds	r3, #1
 8013184:	f109 39ff 	add.w	r9, r9, #4294967295
 8013188:	60a3      	str	r3, [r4, #8]
 801318a:	6873      	ldr	r3, [r6, #4]
 801318c:	3b01      	subs	r3, #1
 801318e:	2b00      	cmp	r3, #0
 8013190:	6073      	str	r3, [r6, #4]
 8013192:	dd1b      	ble.n	80131cc <_scanf_i+0x150>
 8013194:	6833      	ldr	r3, [r6, #0]
 8013196:	3301      	adds	r3, #1
 8013198:	6033      	str	r3, [r6, #0]
 801319a:	68a3      	ldr	r3, [r4, #8]
 801319c:	3b01      	subs	r3, #1
 801319e:	60a3      	str	r3, [r4, #8]
 80131a0:	e7d9      	b.n	8013156 <_scanf_i+0xda>
 80131a2:	f1bb 0f02 	cmp.w	fp, #2
 80131a6:	d1ae      	bne.n	8013106 <_scanf_i+0x8a>
 80131a8:	6822      	ldr	r2, [r4, #0]
 80131aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80131ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80131b2:	d1bf      	bne.n	8013134 <_scanf_i+0xb8>
 80131b4:	2310      	movs	r3, #16
 80131b6:	6063      	str	r3, [r4, #4]
 80131b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80131bc:	e7a2      	b.n	8013104 <_scanf_i+0x88>
 80131be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80131c2:	6022      	str	r2, [r4, #0]
 80131c4:	780b      	ldrb	r3, [r1, #0]
 80131c6:	f805 3b01 	strb.w	r3, [r5], #1
 80131ca:	e7de      	b.n	801318a <_scanf_i+0x10e>
 80131cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80131d0:	4631      	mov	r1, r6
 80131d2:	4650      	mov	r0, sl
 80131d4:	4798      	blx	r3
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d0df      	beq.n	801319a <_scanf_i+0x11e>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	05d9      	lsls	r1, r3, #23
 80131de:	d50d      	bpl.n	80131fc <_scanf_i+0x180>
 80131e0:	42bd      	cmp	r5, r7
 80131e2:	d909      	bls.n	80131f8 <_scanf_i+0x17c>
 80131e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80131e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131ec:	4632      	mov	r2, r6
 80131ee:	4650      	mov	r0, sl
 80131f0:	4798      	blx	r3
 80131f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80131f6:	464d      	mov	r5, r9
 80131f8:	42bd      	cmp	r5, r7
 80131fa:	d028      	beq.n	801324e <_scanf_i+0x1d2>
 80131fc:	6822      	ldr	r2, [r4, #0]
 80131fe:	f012 0210 	ands.w	r2, r2, #16
 8013202:	d113      	bne.n	801322c <_scanf_i+0x1b0>
 8013204:	702a      	strb	r2, [r5, #0]
 8013206:	6863      	ldr	r3, [r4, #4]
 8013208:	9e01      	ldr	r6, [sp, #4]
 801320a:	4639      	mov	r1, r7
 801320c:	4650      	mov	r0, sl
 801320e:	47b0      	blx	r6
 8013210:	f8d8 3000 	ldr.w	r3, [r8]
 8013214:	6821      	ldr	r1, [r4, #0]
 8013216:	1d1a      	adds	r2, r3, #4
 8013218:	f8c8 2000 	str.w	r2, [r8]
 801321c:	f011 0f20 	tst.w	r1, #32
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	d00f      	beq.n	8013244 <_scanf_i+0x1c8>
 8013224:	6018      	str	r0, [r3, #0]
 8013226:	68e3      	ldr	r3, [r4, #12]
 8013228:	3301      	adds	r3, #1
 801322a:	60e3      	str	r3, [r4, #12]
 801322c:	6923      	ldr	r3, [r4, #16]
 801322e:	1bed      	subs	r5, r5, r7
 8013230:	445d      	add	r5, fp
 8013232:	442b      	add	r3, r5
 8013234:	6123      	str	r3, [r4, #16]
 8013236:	2000      	movs	r0, #0
 8013238:	b007      	add	sp, #28
 801323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323e:	f04f 0b00 	mov.w	fp, #0
 8013242:	e7ca      	b.n	80131da <_scanf_i+0x15e>
 8013244:	07ca      	lsls	r2, r1, #31
 8013246:	bf4c      	ite	mi
 8013248:	8018      	strhmi	r0, [r3, #0]
 801324a:	6018      	strpl	r0, [r3, #0]
 801324c:	e7eb      	b.n	8013226 <_scanf_i+0x1aa>
 801324e:	2001      	movs	r0, #1
 8013250:	e7f2      	b.n	8013238 <_scanf_i+0x1bc>
 8013252:	bf00      	nop
 8013254:	08015940 	.word	0x08015940
 8013258:	08013d8d 	.word	0x08013d8d
 801325c:	08012971 	.word	0x08012971
 8013260:	08015d02 	.word	0x08015d02

08013264 <__sflush_r>:
 8013264:	898a      	ldrh	r2, [r1, #12]
 8013266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326a:	4605      	mov	r5, r0
 801326c:	0710      	lsls	r0, r2, #28
 801326e:	460c      	mov	r4, r1
 8013270:	d458      	bmi.n	8013324 <__sflush_r+0xc0>
 8013272:	684b      	ldr	r3, [r1, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	dc05      	bgt.n	8013284 <__sflush_r+0x20>
 8013278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801327a:	2b00      	cmp	r3, #0
 801327c:	dc02      	bgt.n	8013284 <__sflush_r+0x20>
 801327e:	2000      	movs	r0, #0
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013286:	2e00      	cmp	r6, #0
 8013288:	d0f9      	beq.n	801327e <__sflush_r+0x1a>
 801328a:	2300      	movs	r3, #0
 801328c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013290:	682f      	ldr	r7, [r5, #0]
 8013292:	6a21      	ldr	r1, [r4, #32]
 8013294:	602b      	str	r3, [r5, #0]
 8013296:	d032      	beq.n	80132fe <__sflush_r+0x9a>
 8013298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	075a      	lsls	r2, r3, #29
 801329e:	d505      	bpl.n	80132ac <__sflush_r+0x48>
 80132a0:	6863      	ldr	r3, [r4, #4]
 80132a2:	1ac0      	subs	r0, r0, r3
 80132a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132a6:	b10b      	cbz	r3, 80132ac <__sflush_r+0x48>
 80132a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132aa:	1ac0      	subs	r0, r0, r3
 80132ac:	2300      	movs	r3, #0
 80132ae:	4602      	mov	r2, r0
 80132b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132b2:	6a21      	ldr	r1, [r4, #32]
 80132b4:	4628      	mov	r0, r5
 80132b6:	47b0      	blx	r6
 80132b8:	1c43      	adds	r3, r0, #1
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	d106      	bne.n	80132cc <__sflush_r+0x68>
 80132be:	6829      	ldr	r1, [r5, #0]
 80132c0:	291d      	cmp	r1, #29
 80132c2:	d82b      	bhi.n	801331c <__sflush_r+0xb8>
 80132c4:	4a29      	ldr	r2, [pc, #164]	; (801336c <__sflush_r+0x108>)
 80132c6:	410a      	asrs	r2, r1
 80132c8:	07d6      	lsls	r6, r2, #31
 80132ca:	d427      	bmi.n	801331c <__sflush_r+0xb8>
 80132cc:	2200      	movs	r2, #0
 80132ce:	6062      	str	r2, [r4, #4]
 80132d0:	04d9      	lsls	r1, r3, #19
 80132d2:	6922      	ldr	r2, [r4, #16]
 80132d4:	6022      	str	r2, [r4, #0]
 80132d6:	d504      	bpl.n	80132e2 <__sflush_r+0x7e>
 80132d8:	1c42      	adds	r2, r0, #1
 80132da:	d101      	bne.n	80132e0 <__sflush_r+0x7c>
 80132dc:	682b      	ldr	r3, [r5, #0]
 80132de:	b903      	cbnz	r3, 80132e2 <__sflush_r+0x7e>
 80132e0:	6560      	str	r0, [r4, #84]	; 0x54
 80132e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132e4:	602f      	str	r7, [r5, #0]
 80132e6:	2900      	cmp	r1, #0
 80132e8:	d0c9      	beq.n	801327e <__sflush_r+0x1a>
 80132ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132ee:	4299      	cmp	r1, r3
 80132f0:	d002      	beq.n	80132f8 <__sflush_r+0x94>
 80132f2:	4628      	mov	r0, r5
 80132f4:	f7fd fefa 	bl	80110ec <_free_r>
 80132f8:	2000      	movs	r0, #0
 80132fa:	6360      	str	r0, [r4, #52]	; 0x34
 80132fc:	e7c0      	b.n	8013280 <__sflush_r+0x1c>
 80132fe:	2301      	movs	r3, #1
 8013300:	4628      	mov	r0, r5
 8013302:	47b0      	blx	r6
 8013304:	1c41      	adds	r1, r0, #1
 8013306:	d1c8      	bne.n	801329a <__sflush_r+0x36>
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0c5      	beq.n	801329a <__sflush_r+0x36>
 801330e:	2b1d      	cmp	r3, #29
 8013310:	d001      	beq.n	8013316 <__sflush_r+0xb2>
 8013312:	2b16      	cmp	r3, #22
 8013314:	d101      	bne.n	801331a <__sflush_r+0xb6>
 8013316:	602f      	str	r7, [r5, #0]
 8013318:	e7b1      	b.n	801327e <__sflush_r+0x1a>
 801331a:	89a3      	ldrh	r3, [r4, #12]
 801331c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013320:	81a3      	strh	r3, [r4, #12]
 8013322:	e7ad      	b.n	8013280 <__sflush_r+0x1c>
 8013324:	690f      	ldr	r7, [r1, #16]
 8013326:	2f00      	cmp	r7, #0
 8013328:	d0a9      	beq.n	801327e <__sflush_r+0x1a>
 801332a:	0793      	lsls	r3, r2, #30
 801332c:	680e      	ldr	r6, [r1, #0]
 801332e:	bf08      	it	eq
 8013330:	694b      	ldreq	r3, [r1, #20]
 8013332:	600f      	str	r7, [r1, #0]
 8013334:	bf18      	it	ne
 8013336:	2300      	movne	r3, #0
 8013338:	eba6 0807 	sub.w	r8, r6, r7
 801333c:	608b      	str	r3, [r1, #8]
 801333e:	f1b8 0f00 	cmp.w	r8, #0
 8013342:	dd9c      	ble.n	801327e <__sflush_r+0x1a>
 8013344:	6a21      	ldr	r1, [r4, #32]
 8013346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013348:	4643      	mov	r3, r8
 801334a:	463a      	mov	r2, r7
 801334c:	4628      	mov	r0, r5
 801334e:	47b0      	blx	r6
 8013350:	2800      	cmp	r0, #0
 8013352:	dc06      	bgt.n	8013362 <__sflush_r+0xfe>
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e78e      	b.n	8013280 <__sflush_r+0x1c>
 8013362:	4407      	add	r7, r0
 8013364:	eba8 0800 	sub.w	r8, r8, r0
 8013368:	e7e9      	b.n	801333e <__sflush_r+0xda>
 801336a:	bf00      	nop
 801336c:	dfbffffe 	.word	0xdfbffffe

08013370 <_fflush_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	690b      	ldr	r3, [r1, #16]
 8013374:	4605      	mov	r5, r0
 8013376:	460c      	mov	r4, r1
 8013378:	b913      	cbnz	r3, 8013380 <_fflush_r+0x10>
 801337a:	2500      	movs	r5, #0
 801337c:	4628      	mov	r0, r5
 801337e:	bd38      	pop	{r3, r4, r5, pc}
 8013380:	b118      	cbz	r0, 801338a <_fflush_r+0x1a>
 8013382:	6a03      	ldr	r3, [r0, #32]
 8013384:	b90b      	cbnz	r3, 801338a <_fflush_r+0x1a>
 8013386:	f7fc fe73 	bl	8010070 <__sinit>
 801338a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d0f3      	beq.n	801337a <_fflush_r+0xa>
 8013392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013394:	07d0      	lsls	r0, r2, #31
 8013396:	d404      	bmi.n	80133a2 <_fflush_r+0x32>
 8013398:	0599      	lsls	r1, r3, #22
 801339a:	d402      	bmi.n	80133a2 <_fflush_r+0x32>
 801339c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801339e:	f7fd f814 	bl	80103ca <__retarget_lock_acquire_recursive>
 80133a2:	4628      	mov	r0, r5
 80133a4:	4621      	mov	r1, r4
 80133a6:	f7ff ff5d 	bl	8013264 <__sflush_r>
 80133aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133ac:	07da      	lsls	r2, r3, #31
 80133ae:	4605      	mov	r5, r0
 80133b0:	d4e4      	bmi.n	801337c <_fflush_r+0xc>
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	059b      	lsls	r3, r3, #22
 80133b6:	d4e1      	bmi.n	801337c <_fflush_r+0xc>
 80133b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133ba:	f7fd f807 	bl	80103cc <__retarget_lock_release_recursive>
 80133be:	e7dd      	b.n	801337c <_fflush_r+0xc>

080133c0 <__sccl>:
 80133c0:	b570      	push	{r4, r5, r6, lr}
 80133c2:	780b      	ldrb	r3, [r1, #0]
 80133c4:	4604      	mov	r4, r0
 80133c6:	2b5e      	cmp	r3, #94	; 0x5e
 80133c8:	bf0b      	itete	eq
 80133ca:	784b      	ldrbeq	r3, [r1, #1]
 80133cc:	1c4a      	addne	r2, r1, #1
 80133ce:	1c8a      	addeq	r2, r1, #2
 80133d0:	2100      	movne	r1, #0
 80133d2:	bf08      	it	eq
 80133d4:	2101      	moveq	r1, #1
 80133d6:	3801      	subs	r0, #1
 80133d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80133dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80133e0:	42a8      	cmp	r0, r5
 80133e2:	d1fb      	bne.n	80133dc <__sccl+0x1c>
 80133e4:	b90b      	cbnz	r3, 80133ea <__sccl+0x2a>
 80133e6:	1e50      	subs	r0, r2, #1
 80133e8:	bd70      	pop	{r4, r5, r6, pc}
 80133ea:	f081 0101 	eor.w	r1, r1, #1
 80133ee:	54e1      	strb	r1, [r4, r3]
 80133f0:	4610      	mov	r0, r2
 80133f2:	4602      	mov	r2, r0
 80133f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80133f8:	2d2d      	cmp	r5, #45	; 0x2d
 80133fa:	d005      	beq.n	8013408 <__sccl+0x48>
 80133fc:	2d5d      	cmp	r5, #93	; 0x5d
 80133fe:	d016      	beq.n	801342e <__sccl+0x6e>
 8013400:	2d00      	cmp	r5, #0
 8013402:	d0f1      	beq.n	80133e8 <__sccl+0x28>
 8013404:	462b      	mov	r3, r5
 8013406:	e7f2      	b.n	80133ee <__sccl+0x2e>
 8013408:	7846      	ldrb	r6, [r0, #1]
 801340a:	2e5d      	cmp	r6, #93	; 0x5d
 801340c:	d0fa      	beq.n	8013404 <__sccl+0x44>
 801340e:	42b3      	cmp	r3, r6
 8013410:	dcf8      	bgt.n	8013404 <__sccl+0x44>
 8013412:	3002      	adds	r0, #2
 8013414:	461a      	mov	r2, r3
 8013416:	3201      	adds	r2, #1
 8013418:	4296      	cmp	r6, r2
 801341a:	54a1      	strb	r1, [r4, r2]
 801341c:	dcfb      	bgt.n	8013416 <__sccl+0x56>
 801341e:	1af2      	subs	r2, r6, r3
 8013420:	3a01      	subs	r2, #1
 8013422:	1c5d      	adds	r5, r3, #1
 8013424:	42b3      	cmp	r3, r6
 8013426:	bfa8      	it	ge
 8013428:	2200      	movge	r2, #0
 801342a:	18ab      	adds	r3, r5, r2
 801342c:	e7e1      	b.n	80133f2 <__sccl+0x32>
 801342e:	4610      	mov	r0, r2
 8013430:	e7da      	b.n	80133e8 <__sccl+0x28>

08013432 <__submore>:
 8013432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013436:	460c      	mov	r4, r1
 8013438:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801343a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801343e:	4299      	cmp	r1, r3
 8013440:	d11d      	bne.n	801347e <__submore+0x4c>
 8013442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013446:	f7fd fec5 	bl	80111d4 <_malloc_r>
 801344a:	b918      	cbnz	r0, 8013454 <__submore+0x22>
 801344c:	f04f 30ff 	mov.w	r0, #4294967295
 8013450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013458:	63a3      	str	r3, [r4, #56]	; 0x38
 801345a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801345e:	6360      	str	r0, [r4, #52]	; 0x34
 8013460:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013464:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013468:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801346c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013470:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013474:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013478:	6020      	str	r0, [r4, #0]
 801347a:	2000      	movs	r0, #0
 801347c:	e7e8      	b.n	8013450 <__submore+0x1e>
 801347e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013480:	0077      	lsls	r7, r6, #1
 8013482:	463a      	mov	r2, r7
 8013484:	f000 fbe1 	bl	8013c4a <_realloc_r>
 8013488:	4605      	mov	r5, r0
 801348a:	2800      	cmp	r0, #0
 801348c:	d0de      	beq.n	801344c <__submore+0x1a>
 801348e:	eb00 0806 	add.w	r8, r0, r6
 8013492:	4601      	mov	r1, r0
 8013494:	4632      	mov	r2, r6
 8013496:	4640      	mov	r0, r8
 8013498:	f7fc ff99 	bl	80103ce <memcpy>
 801349c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80134a0:	f8c4 8000 	str.w	r8, [r4]
 80134a4:	e7e9      	b.n	801347a <__submore+0x48>

080134a6 <memmove>:
 80134a6:	4288      	cmp	r0, r1
 80134a8:	b510      	push	{r4, lr}
 80134aa:	eb01 0402 	add.w	r4, r1, r2
 80134ae:	d902      	bls.n	80134b6 <memmove+0x10>
 80134b0:	4284      	cmp	r4, r0
 80134b2:	4623      	mov	r3, r4
 80134b4:	d807      	bhi.n	80134c6 <memmove+0x20>
 80134b6:	1e43      	subs	r3, r0, #1
 80134b8:	42a1      	cmp	r1, r4
 80134ba:	d008      	beq.n	80134ce <memmove+0x28>
 80134bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134c4:	e7f8      	b.n	80134b8 <memmove+0x12>
 80134c6:	4402      	add	r2, r0
 80134c8:	4601      	mov	r1, r0
 80134ca:	428a      	cmp	r2, r1
 80134cc:	d100      	bne.n	80134d0 <memmove+0x2a>
 80134ce:	bd10      	pop	{r4, pc}
 80134d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134d8:	e7f7      	b.n	80134ca <memmove+0x24>
	...

080134dc <_sbrk_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	4d06      	ldr	r5, [pc, #24]	; (80134f8 <_sbrk_r+0x1c>)
 80134e0:	2300      	movs	r3, #0
 80134e2:	4604      	mov	r4, r0
 80134e4:	4608      	mov	r0, r1
 80134e6:	602b      	str	r3, [r5, #0]
 80134e8:	f7f0 fa72 	bl	80039d0 <_sbrk>
 80134ec:	1c43      	adds	r3, r0, #1
 80134ee:	d102      	bne.n	80134f6 <_sbrk_r+0x1a>
 80134f0:	682b      	ldr	r3, [r5, #0]
 80134f2:	b103      	cbz	r3, 80134f6 <_sbrk_r+0x1a>
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	bd38      	pop	{r3, r4, r5, pc}
 80134f8:	20004ae4 	.word	0x20004ae4
 80134fc:	00000000 	.word	0x00000000

08013500 <nan>:
 8013500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013508 <nan+0x8>
 8013504:	4770      	bx	lr
 8013506:	bf00      	nop
 8013508:	00000000 	.word	0x00000000
 801350c:	7ff80000 	.word	0x7ff80000

08013510 <__assert_func>:
 8013510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013512:	4614      	mov	r4, r2
 8013514:	461a      	mov	r2, r3
 8013516:	4b09      	ldr	r3, [pc, #36]	; (801353c <__assert_func+0x2c>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4605      	mov	r5, r0
 801351c:	68d8      	ldr	r0, [r3, #12]
 801351e:	b14c      	cbz	r4, 8013534 <__assert_func+0x24>
 8013520:	4b07      	ldr	r3, [pc, #28]	; (8013540 <__assert_func+0x30>)
 8013522:	9100      	str	r1, [sp, #0]
 8013524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013528:	4906      	ldr	r1, [pc, #24]	; (8013544 <__assert_func+0x34>)
 801352a:	462b      	mov	r3, r5
 801352c:	f000 fc3e 	bl	8013dac <fiprintf>
 8013530:	f000 fc4e 	bl	8013dd0 <abort>
 8013534:	4b04      	ldr	r3, [pc, #16]	; (8013548 <__assert_func+0x38>)
 8013536:	461c      	mov	r4, r3
 8013538:	e7f3      	b.n	8013522 <__assert_func+0x12>
 801353a:	bf00      	nop
 801353c:	20000070 	.word	0x20000070
 8013540:	08015d15 	.word	0x08015d15
 8013544:	08015d22 	.word	0x08015d22
 8013548:	08015d50 	.word	0x08015d50

0801354c <_calloc_r>:
 801354c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801354e:	fba1 2402 	umull	r2, r4, r1, r2
 8013552:	b94c      	cbnz	r4, 8013568 <_calloc_r+0x1c>
 8013554:	4611      	mov	r1, r2
 8013556:	9201      	str	r2, [sp, #4]
 8013558:	f7fd fe3c 	bl	80111d4 <_malloc_r>
 801355c:	9a01      	ldr	r2, [sp, #4]
 801355e:	4605      	mov	r5, r0
 8013560:	b930      	cbnz	r0, 8013570 <_calloc_r+0x24>
 8013562:	4628      	mov	r0, r5
 8013564:	b003      	add	sp, #12
 8013566:	bd30      	pop	{r4, r5, pc}
 8013568:	220c      	movs	r2, #12
 801356a:	6002      	str	r2, [r0, #0]
 801356c:	2500      	movs	r5, #0
 801356e:	e7f8      	b.n	8013562 <_calloc_r+0x16>
 8013570:	4621      	mov	r1, r4
 8013572:	f7fc fe44 	bl	80101fe <memset>
 8013576:	e7f4      	b.n	8013562 <_calloc_r+0x16>

08013578 <rshift>:
 8013578:	6903      	ldr	r3, [r0, #16]
 801357a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801357e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013582:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013586:	f100 0414 	add.w	r4, r0, #20
 801358a:	dd45      	ble.n	8013618 <rshift+0xa0>
 801358c:	f011 011f 	ands.w	r1, r1, #31
 8013590:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013594:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013598:	d10c      	bne.n	80135b4 <rshift+0x3c>
 801359a:	f100 0710 	add.w	r7, r0, #16
 801359e:	4629      	mov	r1, r5
 80135a0:	42b1      	cmp	r1, r6
 80135a2:	d334      	bcc.n	801360e <rshift+0x96>
 80135a4:	1a9b      	subs	r3, r3, r2
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	1eea      	subs	r2, r5, #3
 80135aa:	4296      	cmp	r6, r2
 80135ac:	bf38      	it	cc
 80135ae:	2300      	movcc	r3, #0
 80135b0:	4423      	add	r3, r4
 80135b2:	e015      	b.n	80135e0 <rshift+0x68>
 80135b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80135b8:	f1c1 0820 	rsb	r8, r1, #32
 80135bc:	40cf      	lsrs	r7, r1
 80135be:	f105 0e04 	add.w	lr, r5, #4
 80135c2:	46a1      	mov	r9, r4
 80135c4:	4576      	cmp	r6, lr
 80135c6:	46f4      	mov	ip, lr
 80135c8:	d815      	bhi.n	80135f6 <rshift+0x7e>
 80135ca:	1a9a      	subs	r2, r3, r2
 80135cc:	0092      	lsls	r2, r2, #2
 80135ce:	3a04      	subs	r2, #4
 80135d0:	3501      	adds	r5, #1
 80135d2:	42ae      	cmp	r6, r5
 80135d4:	bf38      	it	cc
 80135d6:	2200      	movcc	r2, #0
 80135d8:	18a3      	adds	r3, r4, r2
 80135da:	50a7      	str	r7, [r4, r2]
 80135dc:	b107      	cbz	r7, 80135e0 <rshift+0x68>
 80135de:	3304      	adds	r3, #4
 80135e0:	1b1a      	subs	r2, r3, r4
 80135e2:	42a3      	cmp	r3, r4
 80135e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80135e8:	bf08      	it	eq
 80135ea:	2300      	moveq	r3, #0
 80135ec:	6102      	str	r2, [r0, #16]
 80135ee:	bf08      	it	eq
 80135f0:	6143      	streq	r3, [r0, #20]
 80135f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135f6:	f8dc c000 	ldr.w	ip, [ip]
 80135fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80135fe:	ea4c 0707 	orr.w	r7, ip, r7
 8013602:	f849 7b04 	str.w	r7, [r9], #4
 8013606:	f85e 7b04 	ldr.w	r7, [lr], #4
 801360a:	40cf      	lsrs	r7, r1
 801360c:	e7da      	b.n	80135c4 <rshift+0x4c>
 801360e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013612:	f847 cf04 	str.w	ip, [r7, #4]!
 8013616:	e7c3      	b.n	80135a0 <rshift+0x28>
 8013618:	4623      	mov	r3, r4
 801361a:	e7e1      	b.n	80135e0 <rshift+0x68>

0801361c <__hexdig_fun>:
 801361c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013620:	2b09      	cmp	r3, #9
 8013622:	d802      	bhi.n	801362a <__hexdig_fun+0xe>
 8013624:	3820      	subs	r0, #32
 8013626:	b2c0      	uxtb	r0, r0
 8013628:	4770      	bx	lr
 801362a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801362e:	2b05      	cmp	r3, #5
 8013630:	d801      	bhi.n	8013636 <__hexdig_fun+0x1a>
 8013632:	3847      	subs	r0, #71	; 0x47
 8013634:	e7f7      	b.n	8013626 <__hexdig_fun+0xa>
 8013636:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801363a:	2b05      	cmp	r3, #5
 801363c:	d801      	bhi.n	8013642 <__hexdig_fun+0x26>
 801363e:	3827      	subs	r0, #39	; 0x27
 8013640:	e7f1      	b.n	8013626 <__hexdig_fun+0xa>
 8013642:	2000      	movs	r0, #0
 8013644:	4770      	bx	lr
	...

08013648 <__gethex>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	4617      	mov	r7, r2
 801364e:	680a      	ldr	r2, [r1, #0]
 8013650:	b085      	sub	sp, #20
 8013652:	f102 0b02 	add.w	fp, r2, #2
 8013656:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801365a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801365e:	4681      	mov	r9, r0
 8013660:	468a      	mov	sl, r1
 8013662:	9302      	str	r3, [sp, #8]
 8013664:	32fe      	adds	r2, #254	; 0xfe
 8013666:	eb02 030b 	add.w	r3, r2, fp
 801366a:	46d8      	mov	r8, fp
 801366c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	2830      	cmp	r0, #48	; 0x30
 8013674:	d0f7      	beq.n	8013666 <__gethex+0x1e>
 8013676:	f7ff ffd1 	bl	801361c <__hexdig_fun>
 801367a:	4604      	mov	r4, r0
 801367c:	2800      	cmp	r0, #0
 801367e:	d138      	bne.n	80136f2 <__gethex+0xaa>
 8013680:	49a7      	ldr	r1, [pc, #668]	; (8013920 <__gethex+0x2d8>)
 8013682:	2201      	movs	r2, #1
 8013684:	4640      	mov	r0, r8
 8013686:	f7fc fdc2 	bl	801020e <strncmp>
 801368a:	4606      	mov	r6, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	d169      	bne.n	8013764 <__gethex+0x11c>
 8013690:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013694:	465d      	mov	r5, fp
 8013696:	f7ff ffc1 	bl	801361c <__hexdig_fun>
 801369a:	2800      	cmp	r0, #0
 801369c:	d064      	beq.n	8013768 <__gethex+0x120>
 801369e:	465a      	mov	r2, fp
 80136a0:	7810      	ldrb	r0, [r2, #0]
 80136a2:	2830      	cmp	r0, #48	; 0x30
 80136a4:	4690      	mov	r8, r2
 80136a6:	f102 0201 	add.w	r2, r2, #1
 80136aa:	d0f9      	beq.n	80136a0 <__gethex+0x58>
 80136ac:	f7ff ffb6 	bl	801361c <__hexdig_fun>
 80136b0:	2301      	movs	r3, #1
 80136b2:	fab0 f480 	clz	r4, r0
 80136b6:	0964      	lsrs	r4, r4, #5
 80136b8:	465e      	mov	r6, fp
 80136ba:	9301      	str	r3, [sp, #4]
 80136bc:	4642      	mov	r2, r8
 80136be:	4615      	mov	r5, r2
 80136c0:	3201      	adds	r2, #1
 80136c2:	7828      	ldrb	r0, [r5, #0]
 80136c4:	f7ff ffaa 	bl	801361c <__hexdig_fun>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d1f8      	bne.n	80136be <__gethex+0x76>
 80136cc:	4994      	ldr	r1, [pc, #592]	; (8013920 <__gethex+0x2d8>)
 80136ce:	2201      	movs	r2, #1
 80136d0:	4628      	mov	r0, r5
 80136d2:	f7fc fd9c 	bl	801020e <strncmp>
 80136d6:	b978      	cbnz	r0, 80136f8 <__gethex+0xb0>
 80136d8:	b946      	cbnz	r6, 80136ec <__gethex+0xa4>
 80136da:	1c6e      	adds	r6, r5, #1
 80136dc:	4632      	mov	r2, r6
 80136de:	4615      	mov	r5, r2
 80136e0:	3201      	adds	r2, #1
 80136e2:	7828      	ldrb	r0, [r5, #0]
 80136e4:	f7ff ff9a 	bl	801361c <__hexdig_fun>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d1f8      	bne.n	80136de <__gethex+0x96>
 80136ec:	1b73      	subs	r3, r6, r5
 80136ee:	009e      	lsls	r6, r3, #2
 80136f0:	e004      	b.n	80136fc <__gethex+0xb4>
 80136f2:	2400      	movs	r4, #0
 80136f4:	4626      	mov	r6, r4
 80136f6:	e7e1      	b.n	80136bc <__gethex+0x74>
 80136f8:	2e00      	cmp	r6, #0
 80136fa:	d1f7      	bne.n	80136ec <__gethex+0xa4>
 80136fc:	782b      	ldrb	r3, [r5, #0]
 80136fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013702:	2b50      	cmp	r3, #80	; 0x50
 8013704:	d13d      	bne.n	8013782 <__gethex+0x13a>
 8013706:	786b      	ldrb	r3, [r5, #1]
 8013708:	2b2b      	cmp	r3, #43	; 0x2b
 801370a:	d02f      	beq.n	801376c <__gethex+0x124>
 801370c:	2b2d      	cmp	r3, #45	; 0x2d
 801370e:	d031      	beq.n	8013774 <__gethex+0x12c>
 8013710:	1c69      	adds	r1, r5, #1
 8013712:	f04f 0b00 	mov.w	fp, #0
 8013716:	7808      	ldrb	r0, [r1, #0]
 8013718:	f7ff ff80 	bl	801361c <__hexdig_fun>
 801371c:	1e42      	subs	r2, r0, #1
 801371e:	b2d2      	uxtb	r2, r2
 8013720:	2a18      	cmp	r2, #24
 8013722:	d82e      	bhi.n	8013782 <__gethex+0x13a>
 8013724:	f1a0 0210 	sub.w	r2, r0, #16
 8013728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801372c:	f7ff ff76 	bl	801361c <__hexdig_fun>
 8013730:	f100 3cff 	add.w	ip, r0, #4294967295
 8013734:	fa5f fc8c 	uxtb.w	ip, ip
 8013738:	f1bc 0f18 	cmp.w	ip, #24
 801373c:	d91d      	bls.n	801377a <__gethex+0x132>
 801373e:	f1bb 0f00 	cmp.w	fp, #0
 8013742:	d000      	beq.n	8013746 <__gethex+0xfe>
 8013744:	4252      	negs	r2, r2
 8013746:	4416      	add	r6, r2
 8013748:	f8ca 1000 	str.w	r1, [sl]
 801374c:	b1dc      	cbz	r4, 8013786 <__gethex+0x13e>
 801374e:	9b01      	ldr	r3, [sp, #4]
 8013750:	2b00      	cmp	r3, #0
 8013752:	bf14      	ite	ne
 8013754:	f04f 0800 	movne.w	r8, #0
 8013758:	f04f 0806 	moveq.w	r8, #6
 801375c:	4640      	mov	r0, r8
 801375e:	b005      	add	sp, #20
 8013760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013764:	4645      	mov	r5, r8
 8013766:	4626      	mov	r6, r4
 8013768:	2401      	movs	r4, #1
 801376a:	e7c7      	b.n	80136fc <__gethex+0xb4>
 801376c:	f04f 0b00 	mov.w	fp, #0
 8013770:	1ca9      	adds	r1, r5, #2
 8013772:	e7d0      	b.n	8013716 <__gethex+0xce>
 8013774:	f04f 0b01 	mov.w	fp, #1
 8013778:	e7fa      	b.n	8013770 <__gethex+0x128>
 801377a:	230a      	movs	r3, #10
 801377c:	fb03 0002 	mla	r0, r3, r2, r0
 8013780:	e7d0      	b.n	8013724 <__gethex+0xdc>
 8013782:	4629      	mov	r1, r5
 8013784:	e7e0      	b.n	8013748 <__gethex+0x100>
 8013786:	eba5 0308 	sub.w	r3, r5, r8
 801378a:	3b01      	subs	r3, #1
 801378c:	4621      	mov	r1, r4
 801378e:	2b07      	cmp	r3, #7
 8013790:	dc0a      	bgt.n	80137a8 <__gethex+0x160>
 8013792:	4648      	mov	r0, r9
 8013794:	f7fd fdaa 	bl	80112ec <_Balloc>
 8013798:	4604      	mov	r4, r0
 801379a:	b940      	cbnz	r0, 80137ae <__gethex+0x166>
 801379c:	4b61      	ldr	r3, [pc, #388]	; (8013924 <__gethex+0x2dc>)
 801379e:	4602      	mov	r2, r0
 80137a0:	21e4      	movs	r1, #228	; 0xe4
 80137a2:	4861      	ldr	r0, [pc, #388]	; (8013928 <__gethex+0x2e0>)
 80137a4:	f7ff feb4 	bl	8013510 <__assert_func>
 80137a8:	3101      	adds	r1, #1
 80137aa:	105b      	asrs	r3, r3, #1
 80137ac:	e7ef      	b.n	801378e <__gethex+0x146>
 80137ae:	f100 0a14 	add.w	sl, r0, #20
 80137b2:	2300      	movs	r3, #0
 80137b4:	495a      	ldr	r1, [pc, #360]	; (8013920 <__gethex+0x2d8>)
 80137b6:	f8cd a004 	str.w	sl, [sp, #4]
 80137ba:	469b      	mov	fp, r3
 80137bc:	45a8      	cmp	r8, r5
 80137be:	d342      	bcc.n	8013846 <__gethex+0x1fe>
 80137c0:	9801      	ldr	r0, [sp, #4]
 80137c2:	f840 bb04 	str.w	fp, [r0], #4
 80137c6:	eba0 000a 	sub.w	r0, r0, sl
 80137ca:	1080      	asrs	r0, r0, #2
 80137cc:	6120      	str	r0, [r4, #16]
 80137ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80137d2:	4658      	mov	r0, fp
 80137d4:	f7fd fe7c 	bl	80114d0 <__hi0bits>
 80137d8:	683d      	ldr	r5, [r7, #0]
 80137da:	eba8 0000 	sub.w	r0, r8, r0
 80137de:	42a8      	cmp	r0, r5
 80137e0:	dd59      	ble.n	8013896 <__gethex+0x24e>
 80137e2:	eba0 0805 	sub.w	r8, r0, r5
 80137e6:	4641      	mov	r1, r8
 80137e8:	4620      	mov	r0, r4
 80137ea:	f7fe fa0b 	bl	8011c04 <__any_on>
 80137ee:	4683      	mov	fp, r0
 80137f0:	b1b8      	cbz	r0, 8013822 <__gethex+0x1da>
 80137f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80137f6:	1159      	asrs	r1, r3, #5
 80137f8:	f003 021f 	and.w	r2, r3, #31
 80137fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013800:	f04f 0b01 	mov.w	fp, #1
 8013804:	fa0b f202 	lsl.w	r2, fp, r2
 8013808:	420a      	tst	r2, r1
 801380a:	d00a      	beq.n	8013822 <__gethex+0x1da>
 801380c:	455b      	cmp	r3, fp
 801380e:	dd06      	ble.n	801381e <__gethex+0x1d6>
 8013810:	f1a8 0102 	sub.w	r1, r8, #2
 8013814:	4620      	mov	r0, r4
 8013816:	f7fe f9f5 	bl	8011c04 <__any_on>
 801381a:	2800      	cmp	r0, #0
 801381c:	d138      	bne.n	8013890 <__gethex+0x248>
 801381e:	f04f 0b02 	mov.w	fp, #2
 8013822:	4641      	mov	r1, r8
 8013824:	4620      	mov	r0, r4
 8013826:	f7ff fea7 	bl	8013578 <rshift>
 801382a:	4446      	add	r6, r8
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	42b3      	cmp	r3, r6
 8013830:	da41      	bge.n	80138b6 <__gethex+0x26e>
 8013832:	4621      	mov	r1, r4
 8013834:	4648      	mov	r0, r9
 8013836:	f7fd fd99 	bl	801136c <_Bfree>
 801383a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801383c:	2300      	movs	r3, #0
 801383e:	6013      	str	r3, [r2, #0]
 8013840:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013844:	e78a      	b.n	801375c <__gethex+0x114>
 8013846:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801384a:	2a2e      	cmp	r2, #46	; 0x2e
 801384c:	d014      	beq.n	8013878 <__gethex+0x230>
 801384e:	2b20      	cmp	r3, #32
 8013850:	d106      	bne.n	8013860 <__gethex+0x218>
 8013852:	9b01      	ldr	r3, [sp, #4]
 8013854:	f843 bb04 	str.w	fp, [r3], #4
 8013858:	f04f 0b00 	mov.w	fp, #0
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	465b      	mov	r3, fp
 8013860:	7828      	ldrb	r0, [r5, #0]
 8013862:	9303      	str	r3, [sp, #12]
 8013864:	f7ff feda 	bl	801361c <__hexdig_fun>
 8013868:	9b03      	ldr	r3, [sp, #12]
 801386a:	f000 000f 	and.w	r0, r0, #15
 801386e:	4098      	lsls	r0, r3
 8013870:	ea4b 0b00 	orr.w	fp, fp, r0
 8013874:	3304      	adds	r3, #4
 8013876:	e7a1      	b.n	80137bc <__gethex+0x174>
 8013878:	45a8      	cmp	r8, r5
 801387a:	d8e8      	bhi.n	801384e <__gethex+0x206>
 801387c:	2201      	movs	r2, #1
 801387e:	4628      	mov	r0, r5
 8013880:	9303      	str	r3, [sp, #12]
 8013882:	f7fc fcc4 	bl	801020e <strncmp>
 8013886:	4926      	ldr	r1, [pc, #152]	; (8013920 <__gethex+0x2d8>)
 8013888:	9b03      	ldr	r3, [sp, #12]
 801388a:	2800      	cmp	r0, #0
 801388c:	d1df      	bne.n	801384e <__gethex+0x206>
 801388e:	e795      	b.n	80137bc <__gethex+0x174>
 8013890:	f04f 0b03 	mov.w	fp, #3
 8013894:	e7c5      	b.n	8013822 <__gethex+0x1da>
 8013896:	da0b      	bge.n	80138b0 <__gethex+0x268>
 8013898:	eba5 0800 	sub.w	r8, r5, r0
 801389c:	4621      	mov	r1, r4
 801389e:	4642      	mov	r2, r8
 80138a0:	4648      	mov	r0, r9
 80138a2:	f7fd ff7d 	bl	80117a0 <__lshift>
 80138a6:	eba6 0608 	sub.w	r6, r6, r8
 80138aa:	4604      	mov	r4, r0
 80138ac:	f100 0a14 	add.w	sl, r0, #20
 80138b0:	f04f 0b00 	mov.w	fp, #0
 80138b4:	e7ba      	b.n	801382c <__gethex+0x1e4>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	42b3      	cmp	r3, r6
 80138ba:	dd73      	ble.n	80139a4 <__gethex+0x35c>
 80138bc:	1b9e      	subs	r6, r3, r6
 80138be:	42b5      	cmp	r5, r6
 80138c0:	dc34      	bgt.n	801392c <__gethex+0x2e4>
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b02      	cmp	r3, #2
 80138c6:	d023      	beq.n	8013910 <__gethex+0x2c8>
 80138c8:	2b03      	cmp	r3, #3
 80138ca:	d025      	beq.n	8013918 <__gethex+0x2d0>
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	d115      	bne.n	80138fc <__gethex+0x2b4>
 80138d0:	42b5      	cmp	r5, r6
 80138d2:	d113      	bne.n	80138fc <__gethex+0x2b4>
 80138d4:	2d01      	cmp	r5, #1
 80138d6:	d10b      	bne.n	80138f0 <__gethex+0x2a8>
 80138d8:	9a02      	ldr	r2, [sp, #8]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6013      	str	r3, [r2, #0]
 80138de:	2301      	movs	r3, #1
 80138e0:	6123      	str	r3, [r4, #16]
 80138e2:	f8ca 3000 	str.w	r3, [sl]
 80138e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80138ec:	601c      	str	r4, [r3, #0]
 80138ee:	e735      	b.n	801375c <__gethex+0x114>
 80138f0:	1e69      	subs	r1, r5, #1
 80138f2:	4620      	mov	r0, r4
 80138f4:	f7fe f986 	bl	8011c04 <__any_on>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d1ed      	bne.n	80138d8 <__gethex+0x290>
 80138fc:	4621      	mov	r1, r4
 80138fe:	4648      	mov	r0, r9
 8013900:	f7fd fd34 	bl	801136c <_Bfree>
 8013904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013906:	2300      	movs	r3, #0
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801390e:	e725      	b.n	801375c <__gethex+0x114>
 8013910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013912:	2b00      	cmp	r3, #0
 8013914:	d1f2      	bne.n	80138fc <__gethex+0x2b4>
 8013916:	e7df      	b.n	80138d8 <__gethex+0x290>
 8013918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801391a:	2b00      	cmp	r3, #0
 801391c:	d1dc      	bne.n	80138d8 <__gethex+0x290>
 801391e:	e7ed      	b.n	80138fc <__gethex+0x2b4>
 8013920:	08015b8c 	.word	0x08015b8c
 8013924:	08015a1f 	.word	0x08015a1f
 8013928:	08015d51 	.word	0x08015d51
 801392c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013930:	f1bb 0f00 	cmp.w	fp, #0
 8013934:	d133      	bne.n	801399e <__gethex+0x356>
 8013936:	f1b8 0f00 	cmp.w	r8, #0
 801393a:	d004      	beq.n	8013946 <__gethex+0x2fe>
 801393c:	4641      	mov	r1, r8
 801393e:	4620      	mov	r0, r4
 8013940:	f7fe f960 	bl	8011c04 <__any_on>
 8013944:	4683      	mov	fp, r0
 8013946:	ea4f 1268 	mov.w	r2, r8, asr #5
 801394a:	2301      	movs	r3, #1
 801394c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013950:	f008 081f 	and.w	r8, r8, #31
 8013954:	fa03 f308 	lsl.w	r3, r3, r8
 8013958:	4213      	tst	r3, r2
 801395a:	4631      	mov	r1, r6
 801395c:	4620      	mov	r0, r4
 801395e:	bf18      	it	ne
 8013960:	f04b 0b02 	orrne.w	fp, fp, #2
 8013964:	1bad      	subs	r5, r5, r6
 8013966:	f7ff fe07 	bl	8013578 <rshift>
 801396a:	687e      	ldr	r6, [r7, #4]
 801396c:	f04f 0802 	mov.w	r8, #2
 8013970:	f1bb 0f00 	cmp.w	fp, #0
 8013974:	d04a      	beq.n	8013a0c <__gethex+0x3c4>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2b02      	cmp	r3, #2
 801397a:	d016      	beq.n	80139aa <__gethex+0x362>
 801397c:	2b03      	cmp	r3, #3
 801397e:	d018      	beq.n	80139b2 <__gethex+0x36a>
 8013980:	2b01      	cmp	r3, #1
 8013982:	d109      	bne.n	8013998 <__gethex+0x350>
 8013984:	f01b 0f02 	tst.w	fp, #2
 8013988:	d006      	beq.n	8013998 <__gethex+0x350>
 801398a:	f8da 3000 	ldr.w	r3, [sl]
 801398e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013992:	f01b 0f01 	tst.w	fp, #1
 8013996:	d10f      	bne.n	80139b8 <__gethex+0x370>
 8013998:	f048 0810 	orr.w	r8, r8, #16
 801399c:	e036      	b.n	8013a0c <__gethex+0x3c4>
 801399e:	f04f 0b01 	mov.w	fp, #1
 80139a2:	e7d0      	b.n	8013946 <__gethex+0x2fe>
 80139a4:	f04f 0801 	mov.w	r8, #1
 80139a8:	e7e2      	b.n	8013970 <__gethex+0x328>
 80139aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139ac:	f1c3 0301 	rsb	r3, r3, #1
 80139b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80139b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d0ef      	beq.n	8013998 <__gethex+0x350>
 80139b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80139bc:	f104 0214 	add.w	r2, r4, #20
 80139c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80139c4:	9301      	str	r3, [sp, #4]
 80139c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80139ca:	2300      	movs	r3, #0
 80139cc:	4694      	mov	ip, r2
 80139ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80139d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80139d6:	d01e      	beq.n	8013a16 <__gethex+0x3ce>
 80139d8:	3101      	adds	r1, #1
 80139da:	f8cc 1000 	str.w	r1, [ip]
 80139de:	f1b8 0f02 	cmp.w	r8, #2
 80139e2:	f104 0214 	add.w	r2, r4, #20
 80139e6:	d13d      	bne.n	8013a64 <__gethex+0x41c>
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	3b01      	subs	r3, #1
 80139ec:	42ab      	cmp	r3, r5
 80139ee:	d10b      	bne.n	8013a08 <__gethex+0x3c0>
 80139f0:	1169      	asrs	r1, r5, #5
 80139f2:	2301      	movs	r3, #1
 80139f4:	f005 051f 	and.w	r5, r5, #31
 80139f8:	fa03 f505 	lsl.w	r5, r3, r5
 80139fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a00:	421d      	tst	r5, r3
 8013a02:	bf18      	it	ne
 8013a04:	f04f 0801 	movne.w	r8, #1
 8013a08:	f048 0820 	orr.w	r8, r8, #32
 8013a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a0e:	601c      	str	r4, [r3, #0]
 8013a10:	9b02      	ldr	r3, [sp, #8]
 8013a12:	601e      	str	r6, [r3, #0]
 8013a14:	e6a2      	b.n	801375c <__gethex+0x114>
 8013a16:	4290      	cmp	r0, r2
 8013a18:	f842 3c04 	str.w	r3, [r2, #-4]
 8013a1c:	d8d6      	bhi.n	80139cc <__gethex+0x384>
 8013a1e:	68a2      	ldr	r2, [r4, #8]
 8013a20:	4593      	cmp	fp, r2
 8013a22:	db17      	blt.n	8013a54 <__gethex+0x40c>
 8013a24:	6861      	ldr	r1, [r4, #4]
 8013a26:	4648      	mov	r0, r9
 8013a28:	3101      	adds	r1, #1
 8013a2a:	f7fd fc5f 	bl	80112ec <_Balloc>
 8013a2e:	4682      	mov	sl, r0
 8013a30:	b918      	cbnz	r0, 8013a3a <__gethex+0x3f2>
 8013a32:	4b1b      	ldr	r3, [pc, #108]	; (8013aa0 <__gethex+0x458>)
 8013a34:	4602      	mov	r2, r0
 8013a36:	2184      	movs	r1, #132	; 0x84
 8013a38:	e6b3      	b.n	80137a2 <__gethex+0x15a>
 8013a3a:	6922      	ldr	r2, [r4, #16]
 8013a3c:	3202      	adds	r2, #2
 8013a3e:	f104 010c 	add.w	r1, r4, #12
 8013a42:	0092      	lsls	r2, r2, #2
 8013a44:	300c      	adds	r0, #12
 8013a46:	f7fc fcc2 	bl	80103ce <memcpy>
 8013a4a:	4621      	mov	r1, r4
 8013a4c:	4648      	mov	r0, r9
 8013a4e:	f7fd fc8d 	bl	801136c <_Bfree>
 8013a52:	4654      	mov	r4, sl
 8013a54:	6922      	ldr	r2, [r4, #16]
 8013a56:	1c51      	adds	r1, r2, #1
 8013a58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013a5c:	6121      	str	r1, [r4, #16]
 8013a5e:	2101      	movs	r1, #1
 8013a60:	6151      	str	r1, [r2, #20]
 8013a62:	e7bc      	b.n	80139de <__gethex+0x396>
 8013a64:	6921      	ldr	r1, [r4, #16]
 8013a66:	4559      	cmp	r1, fp
 8013a68:	dd0b      	ble.n	8013a82 <__gethex+0x43a>
 8013a6a:	2101      	movs	r1, #1
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f7ff fd83 	bl	8013578 <rshift>
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	3601      	adds	r6, #1
 8013a76:	42b3      	cmp	r3, r6
 8013a78:	f6ff aedb 	blt.w	8013832 <__gethex+0x1ea>
 8013a7c:	f04f 0801 	mov.w	r8, #1
 8013a80:	e7c2      	b.n	8013a08 <__gethex+0x3c0>
 8013a82:	f015 051f 	ands.w	r5, r5, #31
 8013a86:	d0f9      	beq.n	8013a7c <__gethex+0x434>
 8013a88:	9b01      	ldr	r3, [sp, #4]
 8013a8a:	441a      	add	r2, r3
 8013a8c:	f1c5 0520 	rsb	r5, r5, #32
 8013a90:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013a94:	f7fd fd1c 	bl	80114d0 <__hi0bits>
 8013a98:	42a8      	cmp	r0, r5
 8013a9a:	dbe6      	blt.n	8013a6a <__gethex+0x422>
 8013a9c:	e7ee      	b.n	8013a7c <__gethex+0x434>
 8013a9e:	bf00      	nop
 8013aa0:	08015a1f 	.word	0x08015a1f

08013aa4 <L_shift>:
 8013aa4:	f1c2 0208 	rsb	r2, r2, #8
 8013aa8:	0092      	lsls	r2, r2, #2
 8013aaa:	b570      	push	{r4, r5, r6, lr}
 8013aac:	f1c2 0620 	rsb	r6, r2, #32
 8013ab0:	6843      	ldr	r3, [r0, #4]
 8013ab2:	6804      	ldr	r4, [r0, #0]
 8013ab4:	fa03 f506 	lsl.w	r5, r3, r6
 8013ab8:	432c      	orrs	r4, r5
 8013aba:	40d3      	lsrs	r3, r2
 8013abc:	6004      	str	r4, [r0, #0]
 8013abe:	f840 3f04 	str.w	r3, [r0, #4]!
 8013ac2:	4288      	cmp	r0, r1
 8013ac4:	d3f4      	bcc.n	8013ab0 <L_shift+0xc>
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}

08013ac8 <__match>:
 8013ac8:	b530      	push	{r4, r5, lr}
 8013aca:	6803      	ldr	r3, [r0, #0]
 8013acc:	3301      	adds	r3, #1
 8013ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ad2:	b914      	cbnz	r4, 8013ada <__match+0x12>
 8013ad4:	6003      	str	r3, [r0, #0]
 8013ad6:	2001      	movs	r0, #1
 8013ad8:	bd30      	pop	{r4, r5, pc}
 8013ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ade:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013ae2:	2d19      	cmp	r5, #25
 8013ae4:	bf98      	it	ls
 8013ae6:	3220      	addls	r2, #32
 8013ae8:	42a2      	cmp	r2, r4
 8013aea:	d0f0      	beq.n	8013ace <__match+0x6>
 8013aec:	2000      	movs	r0, #0
 8013aee:	e7f3      	b.n	8013ad8 <__match+0x10>

08013af0 <__hexnan>:
 8013af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af4:	680b      	ldr	r3, [r1, #0]
 8013af6:	6801      	ldr	r1, [r0, #0]
 8013af8:	115e      	asrs	r6, r3, #5
 8013afa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013afe:	f013 031f 	ands.w	r3, r3, #31
 8013b02:	b087      	sub	sp, #28
 8013b04:	bf18      	it	ne
 8013b06:	3604      	addne	r6, #4
 8013b08:	2500      	movs	r5, #0
 8013b0a:	1f37      	subs	r7, r6, #4
 8013b0c:	4682      	mov	sl, r0
 8013b0e:	4690      	mov	r8, r2
 8013b10:	9301      	str	r3, [sp, #4]
 8013b12:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b16:	46b9      	mov	r9, r7
 8013b18:	463c      	mov	r4, r7
 8013b1a:	9502      	str	r5, [sp, #8]
 8013b1c:	46ab      	mov	fp, r5
 8013b1e:	784a      	ldrb	r2, [r1, #1]
 8013b20:	1c4b      	adds	r3, r1, #1
 8013b22:	9303      	str	r3, [sp, #12]
 8013b24:	b342      	cbz	r2, 8013b78 <__hexnan+0x88>
 8013b26:	4610      	mov	r0, r2
 8013b28:	9105      	str	r1, [sp, #20]
 8013b2a:	9204      	str	r2, [sp, #16]
 8013b2c:	f7ff fd76 	bl	801361c <__hexdig_fun>
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d14f      	bne.n	8013bd4 <__hexnan+0xe4>
 8013b34:	9a04      	ldr	r2, [sp, #16]
 8013b36:	9905      	ldr	r1, [sp, #20]
 8013b38:	2a20      	cmp	r2, #32
 8013b3a:	d818      	bhi.n	8013b6e <__hexnan+0x7e>
 8013b3c:	9b02      	ldr	r3, [sp, #8]
 8013b3e:	459b      	cmp	fp, r3
 8013b40:	dd13      	ble.n	8013b6a <__hexnan+0x7a>
 8013b42:	454c      	cmp	r4, r9
 8013b44:	d206      	bcs.n	8013b54 <__hexnan+0x64>
 8013b46:	2d07      	cmp	r5, #7
 8013b48:	dc04      	bgt.n	8013b54 <__hexnan+0x64>
 8013b4a:	462a      	mov	r2, r5
 8013b4c:	4649      	mov	r1, r9
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f7ff ffa8 	bl	8013aa4 <L_shift>
 8013b54:	4544      	cmp	r4, r8
 8013b56:	d950      	bls.n	8013bfa <__hexnan+0x10a>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f1a4 0904 	sub.w	r9, r4, #4
 8013b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b62:	f8cd b008 	str.w	fp, [sp, #8]
 8013b66:	464c      	mov	r4, r9
 8013b68:	461d      	mov	r5, r3
 8013b6a:	9903      	ldr	r1, [sp, #12]
 8013b6c:	e7d7      	b.n	8013b1e <__hexnan+0x2e>
 8013b6e:	2a29      	cmp	r2, #41	; 0x29
 8013b70:	d155      	bne.n	8013c1e <__hexnan+0x12e>
 8013b72:	3102      	adds	r1, #2
 8013b74:	f8ca 1000 	str.w	r1, [sl]
 8013b78:	f1bb 0f00 	cmp.w	fp, #0
 8013b7c:	d04f      	beq.n	8013c1e <__hexnan+0x12e>
 8013b7e:	454c      	cmp	r4, r9
 8013b80:	d206      	bcs.n	8013b90 <__hexnan+0xa0>
 8013b82:	2d07      	cmp	r5, #7
 8013b84:	dc04      	bgt.n	8013b90 <__hexnan+0xa0>
 8013b86:	462a      	mov	r2, r5
 8013b88:	4649      	mov	r1, r9
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f7ff ff8a 	bl	8013aa4 <L_shift>
 8013b90:	4544      	cmp	r4, r8
 8013b92:	d934      	bls.n	8013bfe <__hexnan+0x10e>
 8013b94:	f1a8 0204 	sub.w	r2, r8, #4
 8013b98:	4623      	mov	r3, r4
 8013b9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013b9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013ba2:	429f      	cmp	r7, r3
 8013ba4:	d2f9      	bcs.n	8013b9a <__hexnan+0xaa>
 8013ba6:	1b3b      	subs	r3, r7, r4
 8013ba8:	f023 0303 	bic.w	r3, r3, #3
 8013bac:	3304      	adds	r3, #4
 8013bae:	3e03      	subs	r6, #3
 8013bb0:	3401      	adds	r4, #1
 8013bb2:	42a6      	cmp	r6, r4
 8013bb4:	bf38      	it	cc
 8013bb6:	2304      	movcc	r3, #4
 8013bb8:	4443      	add	r3, r8
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f843 2b04 	str.w	r2, [r3], #4
 8013bc0:	429f      	cmp	r7, r3
 8013bc2:	d2fb      	bcs.n	8013bbc <__hexnan+0xcc>
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	b91b      	cbnz	r3, 8013bd0 <__hexnan+0xe0>
 8013bc8:	4547      	cmp	r7, r8
 8013bca:	d126      	bne.n	8013c1a <__hexnan+0x12a>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	603b      	str	r3, [r7, #0]
 8013bd0:	2005      	movs	r0, #5
 8013bd2:	e025      	b.n	8013c20 <__hexnan+0x130>
 8013bd4:	3501      	adds	r5, #1
 8013bd6:	2d08      	cmp	r5, #8
 8013bd8:	f10b 0b01 	add.w	fp, fp, #1
 8013bdc:	dd06      	ble.n	8013bec <__hexnan+0xfc>
 8013bde:	4544      	cmp	r4, r8
 8013be0:	d9c3      	bls.n	8013b6a <__hexnan+0x7a>
 8013be2:	2300      	movs	r3, #0
 8013be4:	f844 3c04 	str.w	r3, [r4, #-4]
 8013be8:	2501      	movs	r5, #1
 8013bea:	3c04      	subs	r4, #4
 8013bec:	6822      	ldr	r2, [r4, #0]
 8013bee:	f000 000f 	and.w	r0, r0, #15
 8013bf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013bf6:	6020      	str	r0, [r4, #0]
 8013bf8:	e7b7      	b.n	8013b6a <__hexnan+0x7a>
 8013bfa:	2508      	movs	r5, #8
 8013bfc:	e7b5      	b.n	8013b6a <__hexnan+0x7a>
 8013bfe:	9b01      	ldr	r3, [sp, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d0df      	beq.n	8013bc4 <__hexnan+0xd4>
 8013c04:	f1c3 0320 	rsb	r3, r3, #32
 8013c08:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0c:	40da      	lsrs	r2, r3
 8013c0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013c12:	4013      	ands	r3, r2
 8013c14:	f846 3c04 	str.w	r3, [r6, #-4]
 8013c18:	e7d4      	b.n	8013bc4 <__hexnan+0xd4>
 8013c1a:	3f04      	subs	r7, #4
 8013c1c:	e7d2      	b.n	8013bc4 <__hexnan+0xd4>
 8013c1e:	2004      	movs	r0, #4
 8013c20:	b007      	add	sp, #28
 8013c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c26 <__ascii_mbtowc>:
 8013c26:	b082      	sub	sp, #8
 8013c28:	b901      	cbnz	r1, 8013c2c <__ascii_mbtowc+0x6>
 8013c2a:	a901      	add	r1, sp, #4
 8013c2c:	b142      	cbz	r2, 8013c40 <__ascii_mbtowc+0x1a>
 8013c2e:	b14b      	cbz	r3, 8013c44 <__ascii_mbtowc+0x1e>
 8013c30:	7813      	ldrb	r3, [r2, #0]
 8013c32:	600b      	str	r3, [r1, #0]
 8013c34:	7812      	ldrb	r2, [r2, #0]
 8013c36:	1e10      	subs	r0, r2, #0
 8013c38:	bf18      	it	ne
 8013c3a:	2001      	movne	r0, #1
 8013c3c:	b002      	add	sp, #8
 8013c3e:	4770      	bx	lr
 8013c40:	4610      	mov	r0, r2
 8013c42:	e7fb      	b.n	8013c3c <__ascii_mbtowc+0x16>
 8013c44:	f06f 0001 	mvn.w	r0, #1
 8013c48:	e7f8      	b.n	8013c3c <__ascii_mbtowc+0x16>

08013c4a <_realloc_r>:
 8013c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4e:	4680      	mov	r8, r0
 8013c50:	4614      	mov	r4, r2
 8013c52:	460e      	mov	r6, r1
 8013c54:	b921      	cbnz	r1, 8013c60 <_realloc_r+0x16>
 8013c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	f7fd baba 	b.w	80111d4 <_malloc_r>
 8013c60:	b92a      	cbnz	r2, 8013c6e <_realloc_r+0x24>
 8013c62:	f7fd fa43 	bl	80110ec <_free_r>
 8013c66:	4625      	mov	r5, r4
 8013c68:	4628      	mov	r0, r5
 8013c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c6e:	f000 f8b6 	bl	8013dde <_malloc_usable_size_r>
 8013c72:	4284      	cmp	r4, r0
 8013c74:	4607      	mov	r7, r0
 8013c76:	d802      	bhi.n	8013c7e <_realloc_r+0x34>
 8013c78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c7c:	d812      	bhi.n	8013ca4 <_realloc_r+0x5a>
 8013c7e:	4621      	mov	r1, r4
 8013c80:	4640      	mov	r0, r8
 8013c82:	f7fd faa7 	bl	80111d4 <_malloc_r>
 8013c86:	4605      	mov	r5, r0
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d0ed      	beq.n	8013c68 <_realloc_r+0x1e>
 8013c8c:	42bc      	cmp	r4, r7
 8013c8e:	4622      	mov	r2, r4
 8013c90:	4631      	mov	r1, r6
 8013c92:	bf28      	it	cs
 8013c94:	463a      	movcs	r2, r7
 8013c96:	f7fc fb9a 	bl	80103ce <memcpy>
 8013c9a:	4631      	mov	r1, r6
 8013c9c:	4640      	mov	r0, r8
 8013c9e:	f7fd fa25 	bl	80110ec <_free_r>
 8013ca2:	e7e1      	b.n	8013c68 <_realloc_r+0x1e>
 8013ca4:	4635      	mov	r5, r6
 8013ca6:	e7df      	b.n	8013c68 <_realloc_r+0x1e>

08013ca8 <_strtoul_l.constprop.0>:
 8013ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cac:	4f36      	ldr	r7, [pc, #216]	; (8013d88 <_strtoul_l.constprop.0+0xe0>)
 8013cae:	4686      	mov	lr, r0
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013cb8:	5d3e      	ldrb	r6, [r7, r4]
 8013cba:	f016 0608 	ands.w	r6, r6, #8
 8013cbe:	d1f8      	bne.n	8013cb2 <_strtoul_l.constprop.0+0xa>
 8013cc0:	2c2d      	cmp	r4, #45	; 0x2d
 8013cc2:	d130      	bne.n	8013d26 <_strtoul_l.constprop.0+0x7e>
 8013cc4:	782c      	ldrb	r4, [r5, #0]
 8013cc6:	2601      	movs	r6, #1
 8013cc8:	1c85      	adds	r5, r0, #2
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d057      	beq.n	8013d7e <_strtoul_l.constprop.0+0xd6>
 8013cce:	2b10      	cmp	r3, #16
 8013cd0:	d109      	bne.n	8013ce6 <_strtoul_l.constprop.0+0x3e>
 8013cd2:	2c30      	cmp	r4, #48	; 0x30
 8013cd4:	d107      	bne.n	8013ce6 <_strtoul_l.constprop.0+0x3e>
 8013cd6:	7828      	ldrb	r0, [r5, #0]
 8013cd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013cdc:	2858      	cmp	r0, #88	; 0x58
 8013cde:	d149      	bne.n	8013d74 <_strtoul_l.constprop.0+0xcc>
 8013ce0:	786c      	ldrb	r4, [r5, #1]
 8013ce2:	2310      	movs	r3, #16
 8013ce4:	3502      	adds	r5, #2
 8013ce6:	f04f 38ff 	mov.w	r8, #4294967295
 8013cea:	2700      	movs	r7, #0
 8013cec:	fbb8 f8f3 	udiv	r8, r8, r3
 8013cf0:	fb03 f908 	mul.w	r9, r3, r8
 8013cf4:	ea6f 0909 	mvn.w	r9, r9
 8013cf8:	4638      	mov	r0, r7
 8013cfa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013cfe:	f1bc 0f09 	cmp.w	ip, #9
 8013d02:	d815      	bhi.n	8013d30 <_strtoul_l.constprop.0+0x88>
 8013d04:	4664      	mov	r4, ip
 8013d06:	42a3      	cmp	r3, r4
 8013d08:	dd23      	ble.n	8013d52 <_strtoul_l.constprop.0+0xaa>
 8013d0a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013d0e:	d007      	beq.n	8013d20 <_strtoul_l.constprop.0+0x78>
 8013d10:	4580      	cmp	r8, r0
 8013d12:	d31b      	bcc.n	8013d4c <_strtoul_l.constprop.0+0xa4>
 8013d14:	d101      	bne.n	8013d1a <_strtoul_l.constprop.0+0x72>
 8013d16:	45a1      	cmp	r9, r4
 8013d18:	db18      	blt.n	8013d4c <_strtoul_l.constprop.0+0xa4>
 8013d1a:	fb00 4003 	mla	r0, r0, r3, r4
 8013d1e:	2701      	movs	r7, #1
 8013d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d24:	e7e9      	b.n	8013cfa <_strtoul_l.constprop.0+0x52>
 8013d26:	2c2b      	cmp	r4, #43	; 0x2b
 8013d28:	bf04      	itt	eq
 8013d2a:	782c      	ldrbeq	r4, [r5, #0]
 8013d2c:	1c85      	addeq	r5, r0, #2
 8013d2e:	e7cc      	b.n	8013cca <_strtoul_l.constprop.0+0x22>
 8013d30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013d34:	f1bc 0f19 	cmp.w	ip, #25
 8013d38:	d801      	bhi.n	8013d3e <_strtoul_l.constprop.0+0x96>
 8013d3a:	3c37      	subs	r4, #55	; 0x37
 8013d3c:	e7e3      	b.n	8013d06 <_strtoul_l.constprop.0+0x5e>
 8013d3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013d42:	f1bc 0f19 	cmp.w	ip, #25
 8013d46:	d804      	bhi.n	8013d52 <_strtoul_l.constprop.0+0xaa>
 8013d48:	3c57      	subs	r4, #87	; 0x57
 8013d4a:	e7dc      	b.n	8013d06 <_strtoul_l.constprop.0+0x5e>
 8013d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8013d50:	e7e6      	b.n	8013d20 <_strtoul_l.constprop.0+0x78>
 8013d52:	1c7b      	adds	r3, r7, #1
 8013d54:	d106      	bne.n	8013d64 <_strtoul_l.constprop.0+0xbc>
 8013d56:	2322      	movs	r3, #34	; 0x22
 8013d58:	f8ce 3000 	str.w	r3, [lr]
 8013d5c:	4638      	mov	r0, r7
 8013d5e:	b932      	cbnz	r2, 8013d6e <_strtoul_l.constprop.0+0xc6>
 8013d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d64:	b106      	cbz	r6, 8013d68 <_strtoul_l.constprop.0+0xc0>
 8013d66:	4240      	negs	r0, r0
 8013d68:	2a00      	cmp	r2, #0
 8013d6a:	d0f9      	beq.n	8013d60 <_strtoul_l.constprop.0+0xb8>
 8013d6c:	b107      	cbz	r7, 8013d70 <_strtoul_l.constprop.0+0xc8>
 8013d6e:	1e69      	subs	r1, r5, #1
 8013d70:	6011      	str	r1, [r2, #0]
 8013d72:	e7f5      	b.n	8013d60 <_strtoul_l.constprop.0+0xb8>
 8013d74:	2430      	movs	r4, #48	; 0x30
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d1b5      	bne.n	8013ce6 <_strtoul_l.constprop.0+0x3e>
 8013d7a:	2308      	movs	r3, #8
 8013d7c:	e7b3      	b.n	8013ce6 <_strtoul_l.constprop.0+0x3e>
 8013d7e:	2c30      	cmp	r4, #48	; 0x30
 8013d80:	d0a9      	beq.n	8013cd6 <_strtoul_l.constprop.0+0x2e>
 8013d82:	230a      	movs	r3, #10
 8013d84:	e7af      	b.n	8013ce6 <_strtoul_l.constprop.0+0x3e>
 8013d86:	bf00      	nop
 8013d88:	08015be1 	.word	0x08015be1

08013d8c <_strtoul_r>:
 8013d8c:	f7ff bf8c 	b.w	8013ca8 <_strtoul_l.constprop.0>

08013d90 <__ascii_wctomb>:
 8013d90:	b149      	cbz	r1, 8013da6 <__ascii_wctomb+0x16>
 8013d92:	2aff      	cmp	r2, #255	; 0xff
 8013d94:	bf85      	ittet	hi
 8013d96:	238a      	movhi	r3, #138	; 0x8a
 8013d98:	6003      	strhi	r3, [r0, #0]
 8013d9a:	700a      	strbls	r2, [r1, #0]
 8013d9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013da0:	bf98      	it	ls
 8013da2:	2001      	movls	r0, #1
 8013da4:	4770      	bx	lr
 8013da6:	4608      	mov	r0, r1
 8013da8:	4770      	bx	lr
	...

08013dac <fiprintf>:
 8013dac:	b40e      	push	{r1, r2, r3}
 8013dae:	b503      	push	{r0, r1, lr}
 8013db0:	4601      	mov	r1, r0
 8013db2:	ab03      	add	r3, sp, #12
 8013db4:	4805      	ldr	r0, [pc, #20]	; (8013dcc <fiprintf+0x20>)
 8013db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dba:	6800      	ldr	r0, [r0, #0]
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	f000 f83f 	bl	8013e40 <_vfiprintf_r>
 8013dc2:	b002      	add	sp, #8
 8013dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dc8:	b003      	add	sp, #12
 8013dca:	4770      	bx	lr
 8013dcc:	20000070 	.word	0x20000070

08013dd0 <abort>:
 8013dd0:	b508      	push	{r3, lr}
 8013dd2:	2006      	movs	r0, #6
 8013dd4:	f000 fa0c 	bl	80141f0 <raise>
 8013dd8:	2001      	movs	r0, #1
 8013dda:	f7ef fd81 	bl	80038e0 <_exit>

08013dde <_malloc_usable_size_r>:
 8013dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013de2:	1f18      	subs	r0, r3, #4
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	bfbc      	itt	lt
 8013de8:	580b      	ldrlt	r3, [r1, r0]
 8013dea:	18c0      	addlt	r0, r0, r3
 8013dec:	4770      	bx	lr

08013dee <__sfputc_r>:
 8013dee:	6893      	ldr	r3, [r2, #8]
 8013df0:	3b01      	subs	r3, #1
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	b410      	push	{r4}
 8013df6:	6093      	str	r3, [r2, #8]
 8013df8:	da08      	bge.n	8013e0c <__sfputc_r+0x1e>
 8013dfa:	6994      	ldr	r4, [r2, #24]
 8013dfc:	42a3      	cmp	r3, r4
 8013dfe:	db01      	blt.n	8013e04 <__sfputc_r+0x16>
 8013e00:	290a      	cmp	r1, #10
 8013e02:	d103      	bne.n	8013e0c <__sfputc_r+0x1e>
 8013e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e08:	f000 b934 	b.w	8014074 <__swbuf_r>
 8013e0c:	6813      	ldr	r3, [r2, #0]
 8013e0e:	1c58      	adds	r0, r3, #1
 8013e10:	6010      	str	r0, [r2, #0]
 8013e12:	7019      	strb	r1, [r3, #0]
 8013e14:	4608      	mov	r0, r1
 8013e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <__sfputs_r>:
 8013e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	4614      	mov	r4, r2
 8013e24:	18d5      	adds	r5, r2, r3
 8013e26:	42ac      	cmp	r4, r5
 8013e28:	d101      	bne.n	8013e2e <__sfputs_r+0x12>
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	e007      	b.n	8013e3e <__sfputs_r+0x22>
 8013e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e32:	463a      	mov	r2, r7
 8013e34:	4630      	mov	r0, r6
 8013e36:	f7ff ffda 	bl	8013dee <__sfputc_r>
 8013e3a:	1c43      	adds	r3, r0, #1
 8013e3c:	d1f3      	bne.n	8013e26 <__sfputs_r+0xa>
 8013e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e40 <_vfiprintf_r>:
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	460d      	mov	r5, r1
 8013e46:	b09d      	sub	sp, #116	; 0x74
 8013e48:	4614      	mov	r4, r2
 8013e4a:	4698      	mov	r8, r3
 8013e4c:	4606      	mov	r6, r0
 8013e4e:	b118      	cbz	r0, 8013e58 <_vfiprintf_r+0x18>
 8013e50:	6a03      	ldr	r3, [r0, #32]
 8013e52:	b90b      	cbnz	r3, 8013e58 <_vfiprintf_r+0x18>
 8013e54:	f7fc f90c 	bl	8010070 <__sinit>
 8013e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e5a:	07d9      	lsls	r1, r3, #31
 8013e5c:	d405      	bmi.n	8013e6a <_vfiprintf_r+0x2a>
 8013e5e:	89ab      	ldrh	r3, [r5, #12]
 8013e60:	059a      	lsls	r2, r3, #22
 8013e62:	d402      	bmi.n	8013e6a <_vfiprintf_r+0x2a>
 8013e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e66:	f7fc fab0 	bl	80103ca <__retarget_lock_acquire_recursive>
 8013e6a:	89ab      	ldrh	r3, [r5, #12]
 8013e6c:	071b      	lsls	r3, r3, #28
 8013e6e:	d501      	bpl.n	8013e74 <_vfiprintf_r+0x34>
 8013e70:	692b      	ldr	r3, [r5, #16]
 8013e72:	b99b      	cbnz	r3, 8013e9c <_vfiprintf_r+0x5c>
 8013e74:	4629      	mov	r1, r5
 8013e76:	4630      	mov	r0, r6
 8013e78:	f000 f93a 	bl	80140f0 <__swsetup_r>
 8013e7c:	b170      	cbz	r0, 8013e9c <_vfiprintf_r+0x5c>
 8013e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e80:	07dc      	lsls	r4, r3, #31
 8013e82:	d504      	bpl.n	8013e8e <_vfiprintf_r+0x4e>
 8013e84:	f04f 30ff 	mov.w	r0, #4294967295
 8013e88:	b01d      	add	sp, #116	; 0x74
 8013e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8e:	89ab      	ldrh	r3, [r5, #12]
 8013e90:	0598      	lsls	r0, r3, #22
 8013e92:	d4f7      	bmi.n	8013e84 <_vfiprintf_r+0x44>
 8013e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e96:	f7fc fa99 	bl	80103cc <__retarget_lock_release_recursive>
 8013e9a:	e7f3      	b.n	8013e84 <_vfiprintf_r+0x44>
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013ea0:	2320      	movs	r3, #32
 8013ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013eaa:	2330      	movs	r3, #48	; 0x30
 8013eac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014060 <_vfiprintf_r+0x220>
 8013eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013eb4:	f04f 0901 	mov.w	r9, #1
 8013eb8:	4623      	mov	r3, r4
 8013eba:	469a      	mov	sl, r3
 8013ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ec0:	b10a      	cbz	r2, 8013ec6 <_vfiprintf_r+0x86>
 8013ec2:	2a25      	cmp	r2, #37	; 0x25
 8013ec4:	d1f9      	bne.n	8013eba <_vfiprintf_r+0x7a>
 8013ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8013eca:	d00b      	beq.n	8013ee4 <_vfiprintf_r+0xa4>
 8013ecc:	465b      	mov	r3, fp
 8013ece:	4622      	mov	r2, r4
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	f7ff ffa2 	bl	8013e1c <__sfputs_r>
 8013ed8:	3001      	adds	r0, #1
 8013eda:	f000 80a9 	beq.w	8014030 <_vfiprintf_r+0x1f0>
 8013ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ee0:	445a      	add	r2, fp
 8013ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 80a1 	beq.w	8014030 <_vfiprintf_r+0x1f0>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ef8:	f10a 0a01 	add.w	sl, sl, #1
 8013efc:	9304      	str	r3, [sp, #16]
 8013efe:	9307      	str	r3, [sp, #28]
 8013f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f04:	931a      	str	r3, [sp, #104]	; 0x68
 8013f06:	4654      	mov	r4, sl
 8013f08:	2205      	movs	r2, #5
 8013f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f0e:	4854      	ldr	r0, [pc, #336]	; (8014060 <_vfiprintf_r+0x220>)
 8013f10:	f7ec f986 	bl	8000220 <memchr>
 8013f14:	9a04      	ldr	r2, [sp, #16]
 8013f16:	b9d8      	cbnz	r0, 8013f50 <_vfiprintf_r+0x110>
 8013f18:	06d1      	lsls	r1, r2, #27
 8013f1a:	bf44      	itt	mi
 8013f1c:	2320      	movmi	r3, #32
 8013f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f22:	0713      	lsls	r3, r2, #28
 8013f24:	bf44      	itt	mi
 8013f26:	232b      	movmi	r3, #43	; 0x2b
 8013f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8013f30:	2b2a      	cmp	r3, #42	; 0x2a
 8013f32:	d015      	beq.n	8013f60 <_vfiprintf_r+0x120>
 8013f34:	9a07      	ldr	r2, [sp, #28]
 8013f36:	4654      	mov	r4, sl
 8013f38:	2000      	movs	r0, #0
 8013f3a:	f04f 0c0a 	mov.w	ip, #10
 8013f3e:	4621      	mov	r1, r4
 8013f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f44:	3b30      	subs	r3, #48	; 0x30
 8013f46:	2b09      	cmp	r3, #9
 8013f48:	d94d      	bls.n	8013fe6 <_vfiprintf_r+0x1a6>
 8013f4a:	b1b0      	cbz	r0, 8013f7a <_vfiprintf_r+0x13a>
 8013f4c:	9207      	str	r2, [sp, #28]
 8013f4e:	e014      	b.n	8013f7a <_vfiprintf_r+0x13a>
 8013f50:	eba0 0308 	sub.w	r3, r0, r8
 8013f54:	fa09 f303 	lsl.w	r3, r9, r3
 8013f58:	4313      	orrs	r3, r2
 8013f5a:	9304      	str	r3, [sp, #16]
 8013f5c:	46a2      	mov	sl, r4
 8013f5e:	e7d2      	b.n	8013f06 <_vfiprintf_r+0xc6>
 8013f60:	9b03      	ldr	r3, [sp, #12]
 8013f62:	1d19      	adds	r1, r3, #4
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	9103      	str	r1, [sp, #12]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	bfbb      	ittet	lt
 8013f6c:	425b      	neglt	r3, r3
 8013f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f72:	9307      	strge	r3, [sp, #28]
 8013f74:	9307      	strlt	r3, [sp, #28]
 8013f76:	bfb8      	it	lt
 8013f78:	9204      	strlt	r2, [sp, #16]
 8013f7a:	7823      	ldrb	r3, [r4, #0]
 8013f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f7e:	d10c      	bne.n	8013f9a <_vfiprintf_r+0x15a>
 8013f80:	7863      	ldrb	r3, [r4, #1]
 8013f82:	2b2a      	cmp	r3, #42	; 0x2a
 8013f84:	d134      	bne.n	8013ff0 <_vfiprintf_r+0x1b0>
 8013f86:	9b03      	ldr	r3, [sp, #12]
 8013f88:	1d1a      	adds	r2, r3, #4
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	9203      	str	r2, [sp, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	bfb8      	it	lt
 8013f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f96:	3402      	adds	r4, #2
 8013f98:	9305      	str	r3, [sp, #20]
 8013f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014070 <_vfiprintf_r+0x230>
 8013f9e:	7821      	ldrb	r1, [r4, #0]
 8013fa0:	2203      	movs	r2, #3
 8013fa2:	4650      	mov	r0, sl
 8013fa4:	f7ec f93c 	bl	8000220 <memchr>
 8013fa8:	b138      	cbz	r0, 8013fba <_vfiprintf_r+0x17a>
 8013faa:	9b04      	ldr	r3, [sp, #16]
 8013fac:	eba0 000a 	sub.w	r0, r0, sl
 8013fb0:	2240      	movs	r2, #64	; 0x40
 8013fb2:	4082      	lsls	r2, r0
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	3401      	adds	r4, #1
 8013fb8:	9304      	str	r3, [sp, #16]
 8013fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fbe:	4829      	ldr	r0, [pc, #164]	; (8014064 <_vfiprintf_r+0x224>)
 8013fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fc4:	2206      	movs	r2, #6
 8013fc6:	f7ec f92b 	bl	8000220 <memchr>
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	d03f      	beq.n	801404e <_vfiprintf_r+0x20e>
 8013fce:	4b26      	ldr	r3, [pc, #152]	; (8014068 <_vfiprintf_r+0x228>)
 8013fd0:	bb1b      	cbnz	r3, 801401a <_vfiprintf_r+0x1da>
 8013fd2:	9b03      	ldr	r3, [sp, #12]
 8013fd4:	3307      	adds	r3, #7
 8013fd6:	f023 0307 	bic.w	r3, r3, #7
 8013fda:	3308      	adds	r3, #8
 8013fdc:	9303      	str	r3, [sp, #12]
 8013fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe0:	443b      	add	r3, r7
 8013fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe4:	e768      	b.n	8013eb8 <_vfiprintf_r+0x78>
 8013fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fea:	460c      	mov	r4, r1
 8013fec:	2001      	movs	r0, #1
 8013fee:	e7a6      	b.n	8013f3e <_vfiprintf_r+0xfe>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	3401      	adds	r4, #1
 8013ff4:	9305      	str	r3, [sp, #20]
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	f04f 0c0a 	mov.w	ip, #10
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014002:	3a30      	subs	r2, #48	; 0x30
 8014004:	2a09      	cmp	r2, #9
 8014006:	d903      	bls.n	8014010 <_vfiprintf_r+0x1d0>
 8014008:	2b00      	cmp	r3, #0
 801400a:	d0c6      	beq.n	8013f9a <_vfiprintf_r+0x15a>
 801400c:	9105      	str	r1, [sp, #20]
 801400e:	e7c4      	b.n	8013f9a <_vfiprintf_r+0x15a>
 8014010:	fb0c 2101 	mla	r1, ip, r1, r2
 8014014:	4604      	mov	r4, r0
 8014016:	2301      	movs	r3, #1
 8014018:	e7f0      	b.n	8013ffc <_vfiprintf_r+0x1bc>
 801401a:	ab03      	add	r3, sp, #12
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	462a      	mov	r2, r5
 8014020:	4b12      	ldr	r3, [pc, #72]	; (801406c <_vfiprintf_r+0x22c>)
 8014022:	a904      	add	r1, sp, #16
 8014024:	4630      	mov	r0, r6
 8014026:	f7fb f9c1 	bl	800f3ac <_printf_float>
 801402a:	4607      	mov	r7, r0
 801402c:	1c78      	adds	r0, r7, #1
 801402e:	d1d6      	bne.n	8013fde <_vfiprintf_r+0x19e>
 8014030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014032:	07d9      	lsls	r1, r3, #31
 8014034:	d405      	bmi.n	8014042 <_vfiprintf_r+0x202>
 8014036:	89ab      	ldrh	r3, [r5, #12]
 8014038:	059a      	lsls	r2, r3, #22
 801403a:	d402      	bmi.n	8014042 <_vfiprintf_r+0x202>
 801403c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801403e:	f7fc f9c5 	bl	80103cc <__retarget_lock_release_recursive>
 8014042:	89ab      	ldrh	r3, [r5, #12]
 8014044:	065b      	lsls	r3, r3, #25
 8014046:	f53f af1d 	bmi.w	8013e84 <_vfiprintf_r+0x44>
 801404a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801404c:	e71c      	b.n	8013e88 <_vfiprintf_r+0x48>
 801404e:	ab03      	add	r3, sp, #12
 8014050:	9300      	str	r3, [sp, #0]
 8014052:	462a      	mov	r2, r5
 8014054:	4b05      	ldr	r3, [pc, #20]	; (801406c <_vfiprintf_r+0x22c>)
 8014056:	a904      	add	r1, sp, #16
 8014058:	4630      	mov	r0, r6
 801405a:	f7fb fc4b 	bl	800f8f4 <_printf_i>
 801405e:	e7e4      	b.n	801402a <_vfiprintf_r+0x1ea>
 8014060:	08015ce1 	.word	0x08015ce1
 8014064:	08015ceb 	.word	0x08015ceb
 8014068:	0800f3ad 	.word	0x0800f3ad
 801406c:	08013e1d 	.word	0x08013e1d
 8014070:	08015ce7 	.word	0x08015ce7

08014074 <__swbuf_r>:
 8014074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014076:	460e      	mov	r6, r1
 8014078:	4614      	mov	r4, r2
 801407a:	4605      	mov	r5, r0
 801407c:	b118      	cbz	r0, 8014086 <__swbuf_r+0x12>
 801407e:	6a03      	ldr	r3, [r0, #32]
 8014080:	b90b      	cbnz	r3, 8014086 <__swbuf_r+0x12>
 8014082:	f7fb fff5 	bl	8010070 <__sinit>
 8014086:	69a3      	ldr	r3, [r4, #24]
 8014088:	60a3      	str	r3, [r4, #8]
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	071a      	lsls	r2, r3, #28
 801408e:	d525      	bpl.n	80140dc <__swbuf_r+0x68>
 8014090:	6923      	ldr	r3, [r4, #16]
 8014092:	b31b      	cbz	r3, 80140dc <__swbuf_r+0x68>
 8014094:	6823      	ldr	r3, [r4, #0]
 8014096:	6922      	ldr	r2, [r4, #16]
 8014098:	1a98      	subs	r0, r3, r2
 801409a:	6963      	ldr	r3, [r4, #20]
 801409c:	b2f6      	uxtb	r6, r6
 801409e:	4283      	cmp	r3, r0
 80140a0:	4637      	mov	r7, r6
 80140a2:	dc04      	bgt.n	80140ae <__swbuf_r+0x3a>
 80140a4:	4621      	mov	r1, r4
 80140a6:	4628      	mov	r0, r5
 80140a8:	f7ff f962 	bl	8013370 <_fflush_r>
 80140ac:	b9e0      	cbnz	r0, 80140e8 <__swbuf_r+0x74>
 80140ae:	68a3      	ldr	r3, [r4, #8]
 80140b0:	3b01      	subs	r3, #1
 80140b2:	60a3      	str	r3, [r4, #8]
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	1c5a      	adds	r2, r3, #1
 80140b8:	6022      	str	r2, [r4, #0]
 80140ba:	701e      	strb	r6, [r3, #0]
 80140bc:	6962      	ldr	r2, [r4, #20]
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d004      	beq.n	80140ce <__swbuf_r+0x5a>
 80140c4:	89a3      	ldrh	r3, [r4, #12]
 80140c6:	07db      	lsls	r3, r3, #31
 80140c8:	d506      	bpl.n	80140d8 <__swbuf_r+0x64>
 80140ca:	2e0a      	cmp	r6, #10
 80140cc:	d104      	bne.n	80140d8 <__swbuf_r+0x64>
 80140ce:	4621      	mov	r1, r4
 80140d0:	4628      	mov	r0, r5
 80140d2:	f7ff f94d 	bl	8013370 <_fflush_r>
 80140d6:	b938      	cbnz	r0, 80140e8 <__swbuf_r+0x74>
 80140d8:	4638      	mov	r0, r7
 80140da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140dc:	4621      	mov	r1, r4
 80140de:	4628      	mov	r0, r5
 80140e0:	f000 f806 	bl	80140f0 <__swsetup_r>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	d0d5      	beq.n	8014094 <__swbuf_r+0x20>
 80140e8:	f04f 37ff 	mov.w	r7, #4294967295
 80140ec:	e7f4      	b.n	80140d8 <__swbuf_r+0x64>
	...

080140f0 <__swsetup_r>:
 80140f0:	b538      	push	{r3, r4, r5, lr}
 80140f2:	4b2a      	ldr	r3, [pc, #168]	; (801419c <__swsetup_r+0xac>)
 80140f4:	4605      	mov	r5, r0
 80140f6:	6818      	ldr	r0, [r3, #0]
 80140f8:	460c      	mov	r4, r1
 80140fa:	b118      	cbz	r0, 8014104 <__swsetup_r+0x14>
 80140fc:	6a03      	ldr	r3, [r0, #32]
 80140fe:	b90b      	cbnz	r3, 8014104 <__swsetup_r+0x14>
 8014100:	f7fb ffb6 	bl	8010070 <__sinit>
 8014104:	89a3      	ldrh	r3, [r4, #12]
 8014106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801410a:	0718      	lsls	r0, r3, #28
 801410c:	d422      	bmi.n	8014154 <__swsetup_r+0x64>
 801410e:	06d9      	lsls	r1, r3, #27
 8014110:	d407      	bmi.n	8014122 <__swsetup_r+0x32>
 8014112:	2309      	movs	r3, #9
 8014114:	602b      	str	r3, [r5, #0]
 8014116:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801411a:	81a3      	strh	r3, [r4, #12]
 801411c:	f04f 30ff 	mov.w	r0, #4294967295
 8014120:	e034      	b.n	801418c <__swsetup_r+0x9c>
 8014122:	0758      	lsls	r0, r3, #29
 8014124:	d512      	bpl.n	801414c <__swsetup_r+0x5c>
 8014126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014128:	b141      	cbz	r1, 801413c <__swsetup_r+0x4c>
 801412a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801412e:	4299      	cmp	r1, r3
 8014130:	d002      	beq.n	8014138 <__swsetup_r+0x48>
 8014132:	4628      	mov	r0, r5
 8014134:	f7fc ffda 	bl	80110ec <_free_r>
 8014138:	2300      	movs	r3, #0
 801413a:	6363      	str	r3, [r4, #52]	; 0x34
 801413c:	89a3      	ldrh	r3, [r4, #12]
 801413e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014142:	81a3      	strh	r3, [r4, #12]
 8014144:	2300      	movs	r3, #0
 8014146:	6063      	str	r3, [r4, #4]
 8014148:	6923      	ldr	r3, [r4, #16]
 801414a:	6023      	str	r3, [r4, #0]
 801414c:	89a3      	ldrh	r3, [r4, #12]
 801414e:	f043 0308 	orr.w	r3, r3, #8
 8014152:	81a3      	strh	r3, [r4, #12]
 8014154:	6923      	ldr	r3, [r4, #16]
 8014156:	b94b      	cbnz	r3, 801416c <__swsetup_r+0x7c>
 8014158:	89a3      	ldrh	r3, [r4, #12]
 801415a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014162:	d003      	beq.n	801416c <__swsetup_r+0x7c>
 8014164:	4621      	mov	r1, r4
 8014166:	4628      	mov	r0, r5
 8014168:	f000 f884 	bl	8014274 <__smakebuf_r>
 801416c:	89a0      	ldrh	r0, [r4, #12]
 801416e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014172:	f010 0301 	ands.w	r3, r0, #1
 8014176:	d00a      	beq.n	801418e <__swsetup_r+0x9e>
 8014178:	2300      	movs	r3, #0
 801417a:	60a3      	str	r3, [r4, #8]
 801417c:	6963      	ldr	r3, [r4, #20]
 801417e:	425b      	negs	r3, r3
 8014180:	61a3      	str	r3, [r4, #24]
 8014182:	6923      	ldr	r3, [r4, #16]
 8014184:	b943      	cbnz	r3, 8014198 <__swsetup_r+0xa8>
 8014186:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801418a:	d1c4      	bne.n	8014116 <__swsetup_r+0x26>
 801418c:	bd38      	pop	{r3, r4, r5, pc}
 801418e:	0781      	lsls	r1, r0, #30
 8014190:	bf58      	it	pl
 8014192:	6963      	ldrpl	r3, [r4, #20]
 8014194:	60a3      	str	r3, [r4, #8]
 8014196:	e7f4      	b.n	8014182 <__swsetup_r+0x92>
 8014198:	2000      	movs	r0, #0
 801419a:	e7f7      	b.n	801418c <__swsetup_r+0x9c>
 801419c:	20000070 	.word	0x20000070

080141a0 <_raise_r>:
 80141a0:	291f      	cmp	r1, #31
 80141a2:	b538      	push	{r3, r4, r5, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	460d      	mov	r5, r1
 80141a8:	d904      	bls.n	80141b4 <_raise_r+0x14>
 80141aa:	2316      	movs	r3, #22
 80141ac:	6003      	str	r3, [r0, #0]
 80141ae:	f04f 30ff 	mov.w	r0, #4294967295
 80141b2:	bd38      	pop	{r3, r4, r5, pc}
 80141b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80141b6:	b112      	cbz	r2, 80141be <_raise_r+0x1e>
 80141b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141bc:	b94b      	cbnz	r3, 80141d2 <_raise_r+0x32>
 80141be:	4620      	mov	r0, r4
 80141c0:	f000 f830 	bl	8014224 <_getpid_r>
 80141c4:	462a      	mov	r2, r5
 80141c6:	4601      	mov	r1, r0
 80141c8:	4620      	mov	r0, r4
 80141ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141ce:	f000 b817 	b.w	8014200 <_kill_r>
 80141d2:	2b01      	cmp	r3, #1
 80141d4:	d00a      	beq.n	80141ec <_raise_r+0x4c>
 80141d6:	1c59      	adds	r1, r3, #1
 80141d8:	d103      	bne.n	80141e2 <_raise_r+0x42>
 80141da:	2316      	movs	r3, #22
 80141dc:	6003      	str	r3, [r0, #0]
 80141de:	2001      	movs	r0, #1
 80141e0:	e7e7      	b.n	80141b2 <_raise_r+0x12>
 80141e2:	2400      	movs	r4, #0
 80141e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80141e8:	4628      	mov	r0, r5
 80141ea:	4798      	blx	r3
 80141ec:	2000      	movs	r0, #0
 80141ee:	e7e0      	b.n	80141b2 <_raise_r+0x12>

080141f0 <raise>:
 80141f0:	4b02      	ldr	r3, [pc, #8]	; (80141fc <raise+0xc>)
 80141f2:	4601      	mov	r1, r0
 80141f4:	6818      	ldr	r0, [r3, #0]
 80141f6:	f7ff bfd3 	b.w	80141a0 <_raise_r>
 80141fa:	bf00      	nop
 80141fc:	20000070 	.word	0x20000070

08014200 <_kill_r>:
 8014200:	b538      	push	{r3, r4, r5, lr}
 8014202:	4d07      	ldr	r5, [pc, #28]	; (8014220 <_kill_r+0x20>)
 8014204:	2300      	movs	r3, #0
 8014206:	4604      	mov	r4, r0
 8014208:	4608      	mov	r0, r1
 801420a:	4611      	mov	r1, r2
 801420c:	602b      	str	r3, [r5, #0]
 801420e:	f7ef fb57 	bl	80038c0 <_kill>
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	d102      	bne.n	801421c <_kill_r+0x1c>
 8014216:	682b      	ldr	r3, [r5, #0]
 8014218:	b103      	cbz	r3, 801421c <_kill_r+0x1c>
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	bd38      	pop	{r3, r4, r5, pc}
 801421e:	bf00      	nop
 8014220:	20004ae4 	.word	0x20004ae4

08014224 <_getpid_r>:
 8014224:	f7ef bb44 	b.w	80038b0 <_getpid>

08014228 <__swhatbuf_r>:
 8014228:	b570      	push	{r4, r5, r6, lr}
 801422a:	460c      	mov	r4, r1
 801422c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014230:	2900      	cmp	r1, #0
 8014232:	b096      	sub	sp, #88	; 0x58
 8014234:	4615      	mov	r5, r2
 8014236:	461e      	mov	r6, r3
 8014238:	da0d      	bge.n	8014256 <__swhatbuf_r+0x2e>
 801423a:	89a3      	ldrh	r3, [r4, #12]
 801423c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014240:	f04f 0100 	mov.w	r1, #0
 8014244:	bf0c      	ite	eq
 8014246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801424a:	2340      	movne	r3, #64	; 0x40
 801424c:	2000      	movs	r0, #0
 801424e:	6031      	str	r1, [r6, #0]
 8014250:	602b      	str	r3, [r5, #0]
 8014252:	b016      	add	sp, #88	; 0x58
 8014254:	bd70      	pop	{r4, r5, r6, pc}
 8014256:	466a      	mov	r2, sp
 8014258:	f000 f848 	bl	80142ec <_fstat_r>
 801425c:	2800      	cmp	r0, #0
 801425e:	dbec      	blt.n	801423a <__swhatbuf_r+0x12>
 8014260:	9901      	ldr	r1, [sp, #4]
 8014262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801426a:	4259      	negs	r1, r3
 801426c:	4159      	adcs	r1, r3
 801426e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014272:	e7eb      	b.n	801424c <__swhatbuf_r+0x24>

08014274 <__smakebuf_r>:
 8014274:	898b      	ldrh	r3, [r1, #12]
 8014276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014278:	079d      	lsls	r5, r3, #30
 801427a:	4606      	mov	r6, r0
 801427c:	460c      	mov	r4, r1
 801427e:	d507      	bpl.n	8014290 <__smakebuf_r+0x1c>
 8014280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014284:	6023      	str	r3, [r4, #0]
 8014286:	6123      	str	r3, [r4, #16]
 8014288:	2301      	movs	r3, #1
 801428a:	6163      	str	r3, [r4, #20]
 801428c:	b002      	add	sp, #8
 801428e:	bd70      	pop	{r4, r5, r6, pc}
 8014290:	ab01      	add	r3, sp, #4
 8014292:	466a      	mov	r2, sp
 8014294:	f7ff ffc8 	bl	8014228 <__swhatbuf_r>
 8014298:	9900      	ldr	r1, [sp, #0]
 801429a:	4605      	mov	r5, r0
 801429c:	4630      	mov	r0, r6
 801429e:	f7fc ff99 	bl	80111d4 <_malloc_r>
 80142a2:	b948      	cbnz	r0, 80142b8 <__smakebuf_r+0x44>
 80142a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142a8:	059a      	lsls	r2, r3, #22
 80142aa:	d4ef      	bmi.n	801428c <__smakebuf_r+0x18>
 80142ac:	f023 0303 	bic.w	r3, r3, #3
 80142b0:	f043 0302 	orr.w	r3, r3, #2
 80142b4:	81a3      	strh	r3, [r4, #12]
 80142b6:	e7e3      	b.n	8014280 <__smakebuf_r+0xc>
 80142b8:	89a3      	ldrh	r3, [r4, #12]
 80142ba:	6020      	str	r0, [r4, #0]
 80142bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142c0:	81a3      	strh	r3, [r4, #12]
 80142c2:	9b00      	ldr	r3, [sp, #0]
 80142c4:	6163      	str	r3, [r4, #20]
 80142c6:	9b01      	ldr	r3, [sp, #4]
 80142c8:	6120      	str	r0, [r4, #16]
 80142ca:	b15b      	cbz	r3, 80142e4 <__smakebuf_r+0x70>
 80142cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142d0:	4630      	mov	r0, r6
 80142d2:	f000 f81d 	bl	8014310 <_isatty_r>
 80142d6:	b128      	cbz	r0, 80142e4 <__smakebuf_r+0x70>
 80142d8:	89a3      	ldrh	r3, [r4, #12]
 80142da:	f023 0303 	bic.w	r3, r3, #3
 80142de:	f043 0301 	orr.w	r3, r3, #1
 80142e2:	81a3      	strh	r3, [r4, #12]
 80142e4:	89a3      	ldrh	r3, [r4, #12]
 80142e6:	431d      	orrs	r5, r3
 80142e8:	81a5      	strh	r5, [r4, #12]
 80142ea:	e7cf      	b.n	801428c <__smakebuf_r+0x18>

080142ec <_fstat_r>:
 80142ec:	b538      	push	{r3, r4, r5, lr}
 80142ee:	4d07      	ldr	r5, [pc, #28]	; (801430c <_fstat_r+0x20>)
 80142f0:	2300      	movs	r3, #0
 80142f2:	4604      	mov	r4, r0
 80142f4:	4608      	mov	r0, r1
 80142f6:	4611      	mov	r1, r2
 80142f8:	602b      	str	r3, [r5, #0]
 80142fa:	f7ef fb40 	bl	800397e <_fstat>
 80142fe:	1c43      	adds	r3, r0, #1
 8014300:	d102      	bne.n	8014308 <_fstat_r+0x1c>
 8014302:	682b      	ldr	r3, [r5, #0]
 8014304:	b103      	cbz	r3, 8014308 <_fstat_r+0x1c>
 8014306:	6023      	str	r3, [r4, #0]
 8014308:	bd38      	pop	{r3, r4, r5, pc}
 801430a:	bf00      	nop
 801430c:	20004ae4 	.word	0x20004ae4

08014310 <_isatty_r>:
 8014310:	b538      	push	{r3, r4, r5, lr}
 8014312:	4d06      	ldr	r5, [pc, #24]	; (801432c <_isatty_r+0x1c>)
 8014314:	2300      	movs	r3, #0
 8014316:	4604      	mov	r4, r0
 8014318:	4608      	mov	r0, r1
 801431a:	602b      	str	r3, [r5, #0]
 801431c:	f7ef fb3f 	bl	800399e <_isatty>
 8014320:	1c43      	adds	r3, r0, #1
 8014322:	d102      	bne.n	801432a <_isatty_r+0x1a>
 8014324:	682b      	ldr	r3, [r5, #0]
 8014326:	b103      	cbz	r3, 801432a <_isatty_r+0x1a>
 8014328:	6023      	str	r3, [r4, #0]
 801432a:	bd38      	pop	{r3, r4, r5, pc}
 801432c:	20004ae4 	.word	0x20004ae4

08014330 <pow>:
 8014330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014332:	ed2d 8b02 	vpush	{d8}
 8014336:	eeb0 8a40 	vmov.f32	s16, s0
 801433a:	eef0 8a60 	vmov.f32	s17, s1
 801433e:	ec55 4b11 	vmov	r4, r5, d1
 8014342:	f000 f979 	bl	8014638 <__ieee754_pow>
 8014346:	4622      	mov	r2, r4
 8014348:	462b      	mov	r3, r5
 801434a:	4620      	mov	r0, r4
 801434c:	4629      	mov	r1, r5
 801434e:	ec57 6b10 	vmov	r6, r7, d0
 8014352:	f7ec fc13 	bl	8000b7c <__aeabi_dcmpun>
 8014356:	2800      	cmp	r0, #0
 8014358:	d13b      	bne.n	80143d2 <pow+0xa2>
 801435a:	ec51 0b18 	vmov	r0, r1, d8
 801435e:	2200      	movs	r2, #0
 8014360:	2300      	movs	r3, #0
 8014362:	f7ec fbd9 	bl	8000b18 <__aeabi_dcmpeq>
 8014366:	b1b8      	cbz	r0, 8014398 <pow+0x68>
 8014368:	2200      	movs	r2, #0
 801436a:	2300      	movs	r3, #0
 801436c:	4620      	mov	r0, r4
 801436e:	4629      	mov	r1, r5
 8014370:	f7ec fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 8014374:	2800      	cmp	r0, #0
 8014376:	d146      	bne.n	8014406 <pow+0xd6>
 8014378:	ec45 4b10 	vmov	d0, r4, r5
 801437c:	f000 f876 	bl	801446c <finite>
 8014380:	b338      	cbz	r0, 80143d2 <pow+0xa2>
 8014382:	2200      	movs	r2, #0
 8014384:	2300      	movs	r3, #0
 8014386:	4620      	mov	r0, r4
 8014388:	4629      	mov	r1, r5
 801438a:	f7ec fbcf 	bl	8000b2c <__aeabi_dcmplt>
 801438e:	b300      	cbz	r0, 80143d2 <pow+0xa2>
 8014390:	f7fb fff0 	bl	8010374 <__errno>
 8014394:	2322      	movs	r3, #34	; 0x22
 8014396:	e01b      	b.n	80143d0 <pow+0xa0>
 8014398:	ec47 6b10 	vmov	d0, r6, r7
 801439c:	f000 f866 	bl	801446c <finite>
 80143a0:	b9e0      	cbnz	r0, 80143dc <pow+0xac>
 80143a2:	eeb0 0a48 	vmov.f32	s0, s16
 80143a6:	eef0 0a68 	vmov.f32	s1, s17
 80143aa:	f000 f85f 	bl	801446c <finite>
 80143ae:	b1a8      	cbz	r0, 80143dc <pow+0xac>
 80143b0:	ec45 4b10 	vmov	d0, r4, r5
 80143b4:	f000 f85a 	bl	801446c <finite>
 80143b8:	b180      	cbz	r0, 80143dc <pow+0xac>
 80143ba:	4632      	mov	r2, r6
 80143bc:	463b      	mov	r3, r7
 80143be:	4630      	mov	r0, r6
 80143c0:	4639      	mov	r1, r7
 80143c2:	f7ec fbdb 	bl	8000b7c <__aeabi_dcmpun>
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d0e2      	beq.n	8014390 <pow+0x60>
 80143ca:	f7fb ffd3 	bl	8010374 <__errno>
 80143ce:	2321      	movs	r3, #33	; 0x21
 80143d0:	6003      	str	r3, [r0, #0]
 80143d2:	ecbd 8b02 	vpop	{d8}
 80143d6:	ec47 6b10 	vmov	d0, r6, r7
 80143da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143dc:	2200      	movs	r2, #0
 80143de:	2300      	movs	r3, #0
 80143e0:	4630      	mov	r0, r6
 80143e2:	4639      	mov	r1, r7
 80143e4:	f7ec fb98 	bl	8000b18 <__aeabi_dcmpeq>
 80143e8:	2800      	cmp	r0, #0
 80143ea:	d0f2      	beq.n	80143d2 <pow+0xa2>
 80143ec:	eeb0 0a48 	vmov.f32	s0, s16
 80143f0:	eef0 0a68 	vmov.f32	s1, s17
 80143f4:	f000 f83a 	bl	801446c <finite>
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d0ea      	beq.n	80143d2 <pow+0xa2>
 80143fc:	ec45 4b10 	vmov	d0, r4, r5
 8014400:	f000 f834 	bl	801446c <finite>
 8014404:	e7c3      	b.n	801438e <pow+0x5e>
 8014406:	4f01      	ldr	r7, [pc, #4]	; (801440c <pow+0xdc>)
 8014408:	2600      	movs	r6, #0
 801440a:	e7e2      	b.n	80143d2 <pow+0xa2>
 801440c:	3ff00000 	.word	0x3ff00000

08014410 <sqrt>:
 8014410:	b538      	push	{r3, r4, r5, lr}
 8014412:	ed2d 8b02 	vpush	{d8}
 8014416:	ec55 4b10 	vmov	r4, r5, d0
 801441a:	f000 f833 	bl	8014484 <__ieee754_sqrt>
 801441e:	4622      	mov	r2, r4
 8014420:	462b      	mov	r3, r5
 8014422:	4620      	mov	r0, r4
 8014424:	4629      	mov	r1, r5
 8014426:	eeb0 8a40 	vmov.f32	s16, s0
 801442a:	eef0 8a60 	vmov.f32	s17, s1
 801442e:	f7ec fba5 	bl	8000b7c <__aeabi_dcmpun>
 8014432:	b990      	cbnz	r0, 801445a <sqrt+0x4a>
 8014434:	2200      	movs	r2, #0
 8014436:	2300      	movs	r3, #0
 8014438:	4620      	mov	r0, r4
 801443a:	4629      	mov	r1, r5
 801443c:	f7ec fb76 	bl	8000b2c <__aeabi_dcmplt>
 8014440:	b158      	cbz	r0, 801445a <sqrt+0x4a>
 8014442:	f7fb ff97 	bl	8010374 <__errno>
 8014446:	2321      	movs	r3, #33	; 0x21
 8014448:	6003      	str	r3, [r0, #0]
 801444a:	2200      	movs	r2, #0
 801444c:	2300      	movs	r3, #0
 801444e:	4610      	mov	r0, r2
 8014450:	4619      	mov	r1, r3
 8014452:	f7ec fa23 	bl	800089c <__aeabi_ddiv>
 8014456:	ec41 0b18 	vmov	d8, r0, r1
 801445a:	eeb0 0a48 	vmov.f32	s0, s16
 801445e:	eef0 0a68 	vmov.f32	s1, s17
 8014462:	ecbd 8b02 	vpop	{d8}
 8014466:	bd38      	pop	{r3, r4, r5, pc}

08014468 <atan2f>:
 8014468:	f000 be1a 	b.w	80150a0 <__ieee754_atan2f>

0801446c <finite>:
 801446c:	b082      	sub	sp, #8
 801446e:	ed8d 0b00 	vstr	d0, [sp]
 8014472:	9801      	ldr	r0, [sp, #4]
 8014474:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014478:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801447c:	0fc0      	lsrs	r0, r0, #31
 801447e:	b002      	add	sp, #8
 8014480:	4770      	bx	lr
	...

08014484 <__ieee754_sqrt>:
 8014484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014488:	ec55 4b10 	vmov	r4, r5, d0
 801448c:	4e67      	ldr	r6, [pc, #412]	; (801462c <__ieee754_sqrt+0x1a8>)
 801448e:	43ae      	bics	r6, r5
 8014490:	ee10 0a10 	vmov	r0, s0
 8014494:	ee10 2a10 	vmov	r2, s0
 8014498:	4629      	mov	r1, r5
 801449a:	462b      	mov	r3, r5
 801449c:	d10d      	bne.n	80144ba <__ieee754_sqrt+0x36>
 801449e:	f7ec f8d3 	bl	8000648 <__aeabi_dmul>
 80144a2:	4602      	mov	r2, r0
 80144a4:	460b      	mov	r3, r1
 80144a6:	4620      	mov	r0, r4
 80144a8:	4629      	mov	r1, r5
 80144aa:	f7eb ff17 	bl	80002dc <__adddf3>
 80144ae:	4604      	mov	r4, r0
 80144b0:	460d      	mov	r5, r1
 80144b2:	ec45 4b10 	vmov	d0, r4, r5
 80144b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ba:	2d00      	cmp	r5, #0
 80144bc:	dc0b      	bgt.n	80144d6 <__ieee754_sqrt+0x52>
 80144be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80144c2:	4326      	orrs	r6, r4
 80144c4:	d0f5      	beq.n	80144b2 <__ieee754_sqrt+0x2e>
 80144c6:	b135      	cbz	r5, 80144d6 <__ieee754_sqrt+0x52>
 80144c8:	f7eb ff06 	bl	80002d8 <__aeabi_dsub>
 80144cc:	4602      	mov	r2, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	f7ec f9e4 	bl	800089c <__aeabi_ddiv>
 80144d4:	e7eb      	b.n	80144ae <__ieee754_sqrt+0x2a>
 80144d6:	1509      	asrs	r1, r1, #20
 80144d8:	f000 808d 	beq.w	80145f6 <__ieee754_sqrt+0x172>
 80144dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80144e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80144e8:	07c9      	lsls	r1, r1, #31
 80144ea:	bf5c      	itt	pl
 80144ec:	005b      	lslpl	r3, r3, #1
 80144ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80144f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80144f6:	bf58      	it	pl
 80144f8:	0052      	lslpl	r2, r2, #1
 80144fa:	2500      	movs	r5, #0
 80144fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014500:	1076      	asrs	r6, r6, #1
 8014502:	0052      	lsls	r2, r2, #1
 8014504:	f04f 0e16 	mov.w	lr, #22
 8014508:	46ac      	mov	ip, r5
 801450a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801450e:	eb0c 0001 	add.w	r0, ip, r1
 8014512:	4298      	cmp	r0, r3
 8014514:	bfde      	ittt	le
 8014516:	1a1b      	suble	r3, r3, r0
 8014518:	eb00 0c01 	addle.w	ip, r0, r1
 801451c:	186d      	addle	r5, r5, r1
 801451e:	005b      	lsls	r3, r3, #1
 8014520:	f1be 0e01 	subs.w	lr, lr, #1
 8014524:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014528:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801452c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014530:	d1ed      	bne.n	801450e <__ieee754_sqrt+0x8a>
 8014532:	4674      	mov	r4, lr
 8014534:	2720      	movs	r7, #32
 8014536:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801453a:	4563      	cmp	r3, ip
 801453c:	eb01 000e 	add.w	r0, r1, lr
 8014540:	dc02      	bgt.n	8014548 <__ieee754_sqrt+0xc4>
 8014542:	d113      	bne.n	801456c <__ieee754_sqrt+0xe8>
 8014544:	4290      	cmp	r0, r2
 8014546:	d811      	bhi.n	801456c <__ieee754_sqrt+0xe8>
 8014548:	2800      	cmp	r0, #0
 801454a:	eb00 0e01 	add.w	lr, r0, r1
 801454e:	da57      	bge.n	8014600 <__ieee754_sqrt+0x17c>
 8014550:	f1be 0f00 	cmp.w	lr, #0
 8014554:	db54      	blt.n	8014600 <__ieee754_sqrt+0x17c>
 8014556:	f10c 0801 	add.w	r8, ip, #1
 801455a:	eba3 030c 	sub.w	r3, r3, ip
 801455e:	4290      	cmp	r0, r2
 8014560:	bf88      	it	hi
 8014562:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014566:	1a12      	subs	r2, r2, r0
 8014568:	440c      	add	r4, r1
 801456a:	46c4      	mov	ip, r8
 801456c:	005b      	lsls	r3, r3, #1
 801456e:	3f01      	subs	r7, #1
 8014570:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014574:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014578:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801457c:	d1dd      	bne.n	801453a <__ieee754_sqrt+0xb6>
 801457e:	4313      	orrs	r3, r2
 8014580:	d01b      	beq.n	80145ba <__ieee754_sqrt+0x136>
 8014582:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014630 <__ieee754_sqrt+0x1ac>
 8014586:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014634 <__ieee754_sqrt+0x1b0>
 801458a:	e9da 0100 	ldrd	r0, r1, [sl]
 801458e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014592:	f7eb fea1 	bl	80002d8 <__aeabi_dsub>
 8014596:	e9da 8900 	ldrd	r8, r9, [sl]
 801459a:	4602      	mov	r2, r0
 801459c:	460b      	mov	r3, r1
 801459e:	4640      	mov	r0, r8
 80145a0:	4649      	mov	r1, r9
 80145a2:	f7ec facd 	bl	8000b40 <__aeabi_dcmple>
 80145a6:	b140      	cbz	r0, 80145ba <__ieee754_sqrt+0x136>
 80145a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80145ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80145b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80145b4:	d126      	bne.n	8014604 <__ieee754_sqrt+0x180>
 80145b6:	3501      	adds	r5, #1
 80145b8:	463c      	mov	r4, r7
 80145ba:	106a      	asrs	r2, r5, #1
 80145bc:	0863      	lsrs	r3, r4, #1
 80145be:	07e9      	lsls	r1, r5, #31
 80145c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80145c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80145c8:	bf48      	it	mi
 80145ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80145ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80145d2:	461c      	mov	r4, r3
 80145d4:	e76d      	b.n	80144b2 <__ieee754_sqrt+0x2e>
 80145d6:	0ad3      	lsrs	r3, r2, #11
 80145d8:	3815      	subs	r0, #21
 80145da:	0552      	lsls	r2, r2, #21
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d0fa      	beq.n	80145d6 <__ieee754_sqrt+0x152>
 80145e0:	02dc      	lsls	r4, r3, #11
 80145e2:	d50a      	bpl.n	80145fa <__ieee754_sqrt+0x176>
 80145e4:	f1c1 0420 	rsb	r4, r1, #32
 80145e8:	fa22 f404 	lsr.w	r4, r2, r4
 80145ec:	1e4d      	subs	r5, r1, #1
 80145ee:	408a      	lsls	r2, r1
 80145f0:	4323      	orrs	r3, r4
 80145f2:	1b41      	subs	r1, r0, r5
 80145f4:	e772      	b.n	80144dc <__ieee754_sqrt+0x58>
 80145f6:	4608      	mov	r0, r1
 80145f8:	e7f0      	b.n	80145dc <__ieee754_sqrt+0x158>
 80145fa:	005b      	lsls	r3, r3, #1
 80145fc:	3101      	adds	r1, #1
 80145fe:	e7ef      	b.n	80145e0 <__ieee754_sqrt+0x15c>
 8014600:	46e0      	mov	r8, ip
 8014602:	e7aa      	b.n	801455a <__ieee754_sqrt+0xd6>
 8014604:	f7eb fe6a 	bl	80002dc <__adddf3>
 8014608:	e9da 8900 	ldrd	r8, r9, [sl]
 801460c:	4602      	mov	r2, r0
 801460e:	460b      	mov	r3, r1
 8014610:	4640      	mov	r0, r8
 8014612:	4649      	mov	r1, r9
 8014614:	f7ec fa8a 	bl	8000b2c <__aeabi_dcmplt>
 8014618:	b120      	cbz	r0, 8014624 <__ieee754_sqrt+0x1a0>
 801461a:	1ca0      	adds	r0, r4, #2
 801461c:	bf08      	it	eq
 801461e:	3501      	addeq	r5, #1
 8014620:	3402      	adds	r4, #2
 8014622:	e7ca      	b.n	80145ba <__ieee754_sqrt+0x136>
 8014624:	3401      	adds	r4, #1
 8014626:	f024 0401 	bic.w	r4, r4, #1
 801462a:	e7c6      	b.n	80145ba <__ieee754_sqrt+0x136>
 801462c:	7ff00000 	.word	0x7ff00000
 8014630:	200001e0 	.word	0x200001e0
 8014634:	200001e8 	.word	0x200001e8

08014638 <__ieee754_pow>:
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	ed2d 8b06 	vpush	{d8-d10}
 8014640:	b089      	sub	sp, #36	; 0x24
 8014642:	ed8d 1b00 	vstr	d1, [sp]
 8014646:	e9dd 2900 	ldrd	r2, r9, [sp]
 801464a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801464e:	ea58 0102 	orrs.w	r1, r8, r2
 8014652:	ec57 6b10 	vmov	r6, r7, d0
 8014656:	d115      	bne.n	8014684 <__ieee754_pow+0x4c>
 8014658:	19b3      	adds	r3, r6, r6
 801465a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801465e:	4152      	adcs	r2, r2
 8014660:	4299      	cmp	r1, r3
 8014662:	4b89      	ldr	r3, [pc, #548]	; (8014888 <__ieee754_pow+0x250>)
 8014664:	4193      	sbcs	r3, r2
 8014666:	f080 84d1 	bcs.w	801500c <__ieee754_pow+0x9d4>
 801466a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801466e:	4630      	mov	r0, r6
 8014670:	4639      	mov	r1, r7
 8014672:	f7eb fe33 	bl	80002dc <__adddf3>
 8014676:	ec41 0b10 	vmov	d0, r0, r1
 801467a:	b009      	add	sp, #36	; 0x24
 801467c:	ecbd 8b06 	vpop	{d8-d10}
 8014680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014684:	4b81      	ldr	r3, [pc, #516]	; (801488c <__ieee754_pow+0x254>)
 8014686:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801468a:	429c      	cmp	r4, r3
 801468c:	ee10 aa10 	vmov	sl, s0
 8014690:	463d      	mov	r5, r7
 8014692:	dc06      	bgt.n	80146a2 <__ieee754_pow+0x6a>
 8014694:	d101      	bne.n	801469a <__ieee754_pow+0x62>
 8014696:	2e00      	cmp	r6, #0
 8014698:	d1e7      	bne.n	801466a <__ieee754_pow+0x32>
 801469a:	4598      	cmp	r8, r3
 801469c:	dc01      	bgt.n	80146a2 <__ieee754_pow+0x6a>
 801469e:	d10f      	bne.n	80146c0 <__ieee754_pow+0x88>
 80146a0:	b172      	cbz	r2, 80146c0 <__ieee754_pow+0x88>
 80146a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80146a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80146aa:	ea55 050a 	orrs.w	r5, r5, sl
 80146ae:	d1dc      	bne.n	801466a <__ieee754_pow+0x32>
 80146b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80146b4:	18db      	adds	r3, r3, r3
 80146b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80146ba:	4152      	adcs	r2, r2
 80146bc:	429d      	cmp	r5, r3
 80146be:	e7d0      	b.n	8014662 <__ieee754_pow+0x2a>
 80146c0:	2d00      	cmp	r5, #0
 80146c2:	da3b      	bge.n	801473c <__ieee754_pow+0x104>
 80146c4:	4b72      	ldr	r3, [pc, #456]	; (8014890 <__ieee754_pow+0x258>)
 80146c6:	4598      	cmp	r8, r3
 80146c8:	dc51      	bgt.n	801476e <__ieee754_pow+0x136>
 80146ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80146ce:	4598      	cmp	r8, r3
 80146d0:	f340 84ab 	ble.w	801502a <__ieee754_pow+0x9f2>
 80146d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80146dc:	2b14      	cmp	r3, #20
 80146de:	dd0f      	ble.n	8014700 <__ieee754_pow+0xc8>
 80146e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80146e4:	fa22 f103 	lsr.w	r1, r2, r3
 80146e8:	fa01 f303 	lsl.w	r3, r1, r3
 80146ec:	4293      	cmp	r3, r2
 80146ee:	f040 849c 	bne.w	801502a <__ieee754_pow+0x9f2>
 80146f2:	f001 0101 	and.w	r1, r1, #1
 80146f6:	f1c1 0302 	rsb	r3, r1, #2
 80146fa:	9304      	str	r3, [sp, #16]
 80146fc:	b182      	cbz	r2, 8014720 <__ieee754_pow+0xe8>
 80146fe:	e05f      	b.n	80147c0 <__ieee754_pow+0x188>
 8014700:	2a00      	cmp	r2, #0
 8014702:	d15b      	bne.n	80147bc <__ieee754_pow+0x184>
 8014704:	f1c3 0314 	rsb	r3, r3, #20
 8014708:	fa48 f103 	asr.w	r1, r8, r3
 801470c:	fa01 f303 	lsl.w	r3, r1, r3
 8014710:	4543      	cmp	r3, r8
 8014712:	f040 8487 	bne.w	8015024 <__ieee754_pow+0x9ec>
 8014716:	f001 0101 	and.w	r1, r1, #1
 801471a:	f1c1 0302 	rsb	r3, r1, #2
 801471e:	9304      	str	r3, [sp, #16]
 8014720:	4b5c      	ldr	r3, [pc, #368]	; (8014894 <__ieee754_pow+0x25c>)
 8014722:	4598      	cmp	r8, r3
 8014724:	d132      	bne.n	801478c <__ieee754_pow+0x154>
 8014726:	f1b9 0f00 	cmp.w	r9, #0
 801472a:	f280 8477 	bge.w	801501c <__ieee754_pow+0x9e4>
 801472e:	4959      	ldr	r1, [pc, #356]	; (8014894 <__ieee754_pow+0x25c>)
 8014730:	4632      	mov	r2, r6
 8014732:	463b      	mov	r3, r7
 8014734:	2000      	movs	r0, #0
 8014736:	f7ec f8b1 	bl	800089c <__aeabi_ddiv>
 801473a:	e79c      	b.n	8014676 <__ieee754_pow+0x3e>
 801473c:	2300      	movs	r3, #0
 801473e:	9304      	str	r3, [sp, #16]
 8014740:	2a00      	cmp	r2, #0
 8014742:	d13d      	bne.n	80147c0 <__ieee754_pow+0x188>
 8014744:	4b51      	ldr	r3, [pc, #324]	; (801488c <__ieee754_pow+0x254>)
 8014746:	4598      	cmp	r8, r3
 8014748:	d1ea      	bne.n	8014720 <__ieee754_pow+0xe8>
 801474a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801474e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014752:	ea53 030a 	orrs.w	r3, r3, sl
 8014756:	f000 8459 	beq.w	801500c <__ieee754_pow+0x9d4>
 801475a:	4b4f      	ldr	r3, [pc, #316]	; (8014898 <__ieee754_pow+0x260>)
 801475c:	429c      	cmp	r4, r3
 801475e:	dd08      	ble.n	8014772 <__ieee754_pow+0x13a>
 8014760:	f1b9 0f00 	cmp.w	r9, #0
 8014764:	f2c0 8456 	blt.w	8015014 <__ieee754_pow+0x9dc>
 8014768:	e9dd 0100 	ldrd	r0, r1, [sp]
 801476c:	e783      	b.n	8014676 <__ieee754_pow+0x3e>
 801476e:	2302      	movs	r3, #2
 8014770:	e7e5      	b.n	801473e <__ieee754_pow+0x106>
 8014772:	f1b9 0f00 	cmp.w	r9, #0
 8014776:	f04f 0000 	mov.w	r0, #0
 801477a:	f04f 0100 	mov.w	r1, #0
 801477e:	f6bf af7a 	bge.w	8014676 <__ieee754_pow+0x3e>
 8014782:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801478a:	e774      	b.n	8014676 <__ieee754_pow+0x3e>
 801478c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014790:	d106      	bne.n	80147a0 <__ieee754_pow+0x168>
 8014792:	4632      	mov	r2, r6
 8014794:	463b      	mov	r3, r7
 8014796:	4630      	mov	r0, r6
 8014798:	4639      	mov	r1, r7
 801479a:	f7eb ff55 	bl	8000648 <__aeabi_dmul>
 801479e:	e76a      	b.n	8014676 <__ieee754_pow+0x3e>
 80147a0:	4b3e      	ldr	r3, [pc, #248]	; (801489c <__ieee754_pow+0x264>)
 80147a2:	4599      	cmp	r9, r3
 80147a4:	d10c      	bne.n	80147c0 <__ieee754_pow+0x188>
 80147a6:	2d00      	cmp	r5, #0
 80147a8:	db0a      	blt.n	80147c0 <__ieee754_pow+0x188>
 80147aa:	ec47 6b10 	vmov	d0, r6, r7
 80147ae:	b009      	add	sp, #36	; 0x24
 80147b0:	ecbd 8b06 	vpop	{d8-d10}
 80147b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b8:	f7ff be64 	b.w	8014484 <__ieee754_sqrt>
 80147bc:	2300      	movs	r3, #0
 80147be:	9304      	str	r3, [sp, #16]
 80147c0:	ec47 6b10 	vmov	d0, r6, r7
 80147c4:	f000 fc62 	bl	801508c <fabs>
 80147c8:	ec51 0b10 	vmov	r0, r1, d0
 80147cc:	f1ba 0f00 	cmp.w	sl, #0
 80147d0:	d129      	bne.n	8014826 <__ieee754_pow+0x1ee>
 80147d2:	b124      	cbz	r4, 80147de <__ieee754_pow+0x1a6>
 80147d4:	4b2f      	ldr	r3, [pc, #188]	; (8014894 <__ieee754_pow+0x25c>)
 80147d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80147da:	429a      	cmp	r2, r3
 80147dc:	d123      	bne.n	8014826 <__ieee754_pow+0x1ee>
 80147de:	f1b9 0f00 	cmp.w	r9, #0
 80147e2:	da05      	bge.n	80147f0 <__ieee754_pow+0x1b8>
 80147e4:	4602      	mov	r2, r0
 80147e6:	460b      	mov	r3, r1
 80147e8:	2000      	movs	r0, #0
 80147ea:	492a      	ldr	r1, [pc, #168]	; (8014894 <__ieee754_pow+0x25c>)
 80147ec:	f7ec f856 	bl	800089c <__aeabi_ddiv>
 80147f0:	2d00      	cmp	r5, #0
 80147f2:	f6bf af40 	bge.w	8014676 <__ieee754_pow+0x3e>
 80147f6:	9b04      	ldr	r3, [sp, #16]
 80147f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80147fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014800:	431c      	orrs	r4, r3
 8014802:	d108      	bne.n	8014816 <__ieee754_pow+0x1de>
 8014804:	4602      	mov	r2, r0
 8014806:	460b      	mov	r3, r1
 8014808:	4610      	mov	r0, r2
 801480a:	4619      	mov	r1, r3
 801480c:	f7eb fd64 	bl	80002d8 <__aeabi_dsub>
 8014810:	4602      	mov	r2, r0
 8014812:	460b      	mov	r3, r1
 8014814:	e78f      	b.n	8014736 <__ieee754_pow+0xfe>
 8014816:	9b04      	ldr	r3, [sp, #16]
 8014818:	2b01      	cmp	r3, #1
 801481a:	f47f af2c 	bne.w	8014676 <__ieee754_pow+0x3e>
 801481e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014822:	4619      	mov	r1, r3
 8014824:	e727      	b.n	8014676 <__ieee754_pow+0x3e>
 8014826:	0feb      	lsrs	r3, r5, #31
 8014828:	3b01      	subs	r3, #1
 801482a:	9306      	str	r3, [sp, #24]
 801482c:	9a06      	ldr	r2, [sp, #24]
 801482e:	9b04      	ldr	r3, [sp, #16]
 8014830:	4313      	orrs	r3, r2
 8014832:	d102      	bne.n	801483a <__ieee754_pow+0x202>
 8014834:	4632      	mov	r2, r6
 8014836:	463b      	mov	r3, r7
 8014838:	e7e6      	b.n	8014808 <__ieee754_pow+0x1d0>
 801483a:	4b19      	ldr	r3, [pc, #100]	; (80148a0 <__ieee754_pow+0x268>)
 801483c:	4598      	cmp	r8, r3
 801483e:	f340 80fb 	ble.w	8014a38 <__ieee754_pow+0x400>
 8014842:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014846:	4598      	cmp	r8, r3
 8014848:	4b13      	ldr	r3, [pc, #76]	; (8014898 <__ieee754_pow+0x260>)
 801484a:	dd0c      	ble.n	8014866 <__ieee754_pow+0x22e>
 801484c:	429c      	cmp	r4, r3
 801484e:	dc0f      	bgt.n	8014870 <__ieee754_pow+0x238>
 8014850:	f1b9 0f00 	cmp.w	r9, #0
 8014854:	da0f      	bge.n	8014876 <__ieee754_pow+0x23e>
 8014856:	2000      	movs	r0, #0
 8014858:	b009      	add	sp, #36	; 0x24
 801485a:	ecbd 8b06 	vpop	{d8-d10}
 801485e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014862:	f000 be3e 	b.w	80154e2 <__math_oflow>
 8014866:	429c      	cmp	r4, r3
 8014868:	dbf2      	blt.n	8014850 <__ieee754_pow+0x218>
 801486a:	4b0a      	ldr	r3, [pc, #40]	; (8014894 <__ieee754_pow+0x25c>)
 801486c:	429c      	cmp	r4, r3
 801486e:	dd19      	ble.n	80148a4 <__ieee754_pow+0x26c>
 8014870:	f1b9 0f00 	cmp.w	r9, #0
 8014874:	dcef      	bgt.n	8014856 <__ieee754_pow+0x21e>
 8014876:	2000      	movs	r0, #0
 8014878:	b009      	add	sp, #36	; 0x24
 801487a:	ecbd 8b06 	vpop	{d8-d10}
 801487e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014882:	f000 be25 	b.w	80154d0 <__math_uflow>
 8014886:	bf00      	nop
 8014888:	fff00000 	.word	0xfff00000
 801488c:	7ff00000 	.word	0x7ff00000
 8014890:	433fffff 	.word	0x433fffff
 8014894:	3ff00000 	.word	0x3ff00000
 8014898:	3fefffff 	.word	0x3fefffff
 801489c:	3fe00000 	.word	0x3fe00000
 80148a0:	41e00000 	.word	0x41e00000
 80148a4:	4b60      	ldr	r3, [pc, #384]	; (8014a28 <__ieee754_pow+0x3f0>)
 80148a6:	2200      	movs	r2, #0
 80148a8:	f7eb fd16 	bl	80002d8 <__aeabi_dsub>
 80148ac:	a354      	add	r3, pc, #336	; (adr r3, 8014a00 <__ieee754_pow+0x3c8>)
 80148ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b2:	4604      	mov	r4, r0
 80148b4:	460d      	mov	r5, r1
 80148b6:	f7eb fec7 	bl	8000648 <__aeabi_dmul>
 80148ba:	a353      	add	r3, pc, #332	; (adr r3, 8014a08 <__ieee754_pow+0x3d0>)
 80148bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c0:	4606      	mov	r6, r0
 80148c2:	460f      	mov	r7, r1
 80148c4:	4620      	mov	r0, r4
 80148c6:	4629      	mov	r1, r5
 80148c8:	f7eb febe 	bl	8000648 <__aeabi_dmul>
 80148cc:	4b57      	ldr	r3, [pc, #348]	; (8014a2c <__ieee754_pow+0x3f4>)
 80148ce:	4682      	mov	sl, r0
 80148d0:	468b      	mov	fp, r1
 80148d2:	2200      	movs	r2, #0
 80148d4:	4620      	mov	r0, r4
 80148d6:	4629      	mov	r1, r5
 80148d8:	f7eb feb6 	bl	8000648 <__aeabi_dmul>
 80148dc:	4602      	mov	r2, r0
 80148de:	460b      	mov	r3, r1
 80148e0:	a14b      	add	r1, pc, #300	; (adr r1, 8014a10 <__ieee754_pow+0x3d8>)
 80148e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148e6:	f7eb fcf7 	bl	80002d8 <__aeabi_dsub>
 80148ea:	4622      	mov	r2, r4
 80148ec:	462b      	mov	r3, r5
 80148ee:	f7eb feab 	bl	8000648 <__aeabi_dmul>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	2000      	movs	r0, #0
 80148f8:	494d      	ldr	r1, [pc, #308]	; (8014a30 <__ieee754_pow+0x3f8>)
 80148fa:	f7eb fced 	bl	80002d8 <__aeabi_dsub>
 80148fe:	4622      	mov	r2, r4
 8014900:	4680      	mov	r8, r0
 8014902:	4689      	mov	r9, r1
 8014904:	462b      	mov	r3, r5
 8014906:	4620      	mov	r0, r4
 8014908:	4629      	mov	r1, r5
 801490a:	f7eb fe9d 	bl	8000648 <__aeabi_dmul>
 801490e:	4602      	mov	r2, r0
 8014910:	460b      	mov	r3, r1
 8014912:	4640      	mov	r0, r8
 8014914:	4649      	mov	r1, r9
 8014916:	f7eb fe97 	bl	8000648 <__aeabi_dmul>
 801491a:	a33f      	add	r3, pc, #252	; (adr r3, 8014a18 <__ieee754_pow+0x3e0>)
 801491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014920:	f7eb fe92 	bl	8000648 <__aeabi_dmul>
 8014924:	4602      	mov	r2, r0
 8014926:	460b      	mov	r3, r1
 8014928:	4650      	mov	r0, sl
 801492a:	4659      	mov	r1, fp
 801492c:	f7eb fcd4 	bl	80002d8 <__aeabi_dsub>
 8014930:	4602      	mov	r2, r0
 8014932:	460b      	mov	r3, r1
 8014934:	4680      	mov	r8, r0
 8014936:	4689      	mov	r9, r1
 8014938:	4630      	mov	r0, r6
 801493a:	4639      	mov	r1, r7
 801493c:	f7eb fcce 	bl	80002dc <__adddf3>
 8014940:	2000      	movs	r0, #0
 8014942:	4632      	mov	r2, r6
 8014944:	463b      	mov	r3, r7
 8014946:	4604      	mov	r4, r0
 8014948:	460d      	mov	r5, r1
 801494a:	f7eb fcc5 	bl	80002d8 <__aeabi_dsub>
 801494e:	4602      	mov	r2, r0
 8014950:	460b      	mov	r3, r1
 8014952:	4640      	mov	r0, r8
 8014954:	4649      	mov	r1, r9
 8014956:	f7eb fcbf 	bl	80002d8 <__aeabi_dsub>
 801495a:	9b04      	ldr	r3, [sp, #16]
 801495c:	9a06      	ldr	r2, [sp, #24]
 801495e:	3b01      	subs	r3, #1
 8014960:	4313      	orrs	r3, r2
 8014962:	4682      	mov	sl, r0
 8014964:	468b      	mov	fp, r1
 8014966:	f040 81e7 	bne.w	8014d38 <__ieee754_pow+0x700>
 801496a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014a20 <__ieee754_pow+0x3e8>
 801496e:	eeb0 8a47 	vmov.f32	s16, s14
 8014972:	eef0 8a67 	vmov.f32	s17, s15
 8014976:	e9dd 6700 	ldrd	r6, r7, [sp]
 801497a:	2600      	movs	r6, #0
 801497c:	4632      	mov	r2, r6
 801497e:	463b      	mov	r3, r7
 8014980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014984:	f7eb fca8 	bl	80002d8 <__aeabi_dsub>
 8014988:	4622      	mov	r2, r4
 801498a:	462b      	mov	r3, r5
 801498c:	f7eb fe5c 	bl	8000648 <__aeabi_dmul>
 8014990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014994:	4680      	mov	r8, r0
 8014996:	4689      	mov	r9, r1
 8014998:	4650      	mov	r0, sl
 801499a:	4659      	mov	r1, fp
 801499c:	f7eb fe54 	bl	8000648 <__aeabi_dmul>
 80149a0:	4602      	mov	r2, r0
 80149a2:	460b      	mov	r3, r1
 80149a4:	4640      	mov	r0, r8
 80149a6:	4649      	mov	r1, r9
 80149a8:	f7eb fc98 	bl	80002dc <__adddf3>
 80149ac:	4632      	mov	r2, r6
 80149ae:	463b      	mov	r3, r7
 80149b0:	4680      	mov	r8, r0
 80149b2:	4689      	mov	r9, r1
 80149b4:	4620      	mov	r0, r4
 80149b6:	4629      	mov	r1, r5
 80149b8:	f7eb fe46 	bl	8000648 <__aeabi_dmul>
 80149bc:	460b      	mov	r3, r1
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	4602      	mov	r2, r0
 80149c4:	4649      	mov	r1, r9
 80149c6:	4640      	mov	r0, r8
 80149c8:	f7eb fc88 	bl	80002dc <__adddf3>
 80149cc:	4b19      	ldr	r3, [pc, #100]	; (8014a34 <__ieee754_pow+0x3fc>)
 80149ce:	4299      	cmp	r1, r3
 80149d0:	ec45 4b19 	vmov	d9, r4, r5
 80149d4:	4606      	mov	r6, r0
 80149d6:	460f      	mov	r7, r1
 80149d8:	468b      	mov	fp, r1
 80149da:	f340 82f0 	ble.w	8014fbe <__ieee754_pow+0x986>
 80149de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80149e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80149e6:	4303      	orrs	r3, r0
 80149e8:	f000 81e4 	beq.w	8014db4 <__ieee754_pow+0x77c>
 80149ec:	ec51 0b18 	vmov	r0, r1, d8
 80149f0:	2200      	movs	r2, #0
 80149f2:	2300      	movs	r3, #0
 80149f4:	f7ec f89a 	bl	8000b2c <__aeabi_dcmplt>
 80149f8:	3800      	subs	r0, #0
 80149fa:	bf18      	it	ne
 80149fc:	2001      	movne	r0, #1
 80149fe:	e72b      	b.n	8014858 <__ieee754_pow+0x220>
 8014a00:	60000000 	.word	0x60000000
 8014a04:	3ff71547 	.word	0x3ff71547
 8014a08:	f85ddf44 	.word	0xf85ddf44
 8014a0c:	3e54ae0b 	.word	0x3e54ae0b
 8014a10:	55555555 	.word	0x55555555
 8014a14:	3fd55555 	.word	0x3fd55555
 8014a18:	652b82fe 	.word	0x652b82fe
 8014a1c:	3ff71547 	.word	0x3ff71547
 8014a20:	00000000 	.word	0x00000000
 8014a24:	bff00000 	.word	0xbff00000
 8014a28:	3ff00000 	.word	0x3ff00000
 8014a2c:	3fd00000 	.word	0x3fd00000
 8014a30:	3fe00000 	.word	0x3fe00000
 8014a34:	408fffff 	.word	0x408fffff
 8014a38:	4bd5      	ldr	r3, [pc, #852]	; (8014d90 <__ieee754_pow+0x758>)
 8014a3a:	402b      	ands	r3, r5
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	b92b      	cbnz	r3, 8014a4c <__ieee754_pow+0x414>
 8014a40:	4bd4      	ldr	r3, [pc, #848]	; (8014d94 <__ieee754_pow+0x75c>)
 8014a42:	f7eb fe01 	bl	8000648 <__aeabi_dmul>
 8014a46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014a4a:	460c      	mov	r4, r1
 8014a4c:	1523      	asrs	r3, r4, #20
 8014a4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014a52:	4413      	add	r3, r2
 8014a54:	9305      	str	r3, [sp, #20]
 8014a56:	4bd0      	ldr	r3, [pc, #832]	; (8014d98 <__ieee754_pow+0x760>)
 8014a58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014a5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014a60:	429c      	cmp	r4, r3
 8014a62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014a66:	dd08      	ble.n	8014a7a <__ieee754_pow+0x442>
 8014a68:	4bcc      	ldr	r3, [pc, #816]	; (8014d9c <__ieee754_pow+0x764>)
 8014a6a:	429c      	cmp	r4, r3
 8014a6c:	f340 8162 	ble.w	8014d34 <__ieee754_pow+0x6fc>
 8014a70:	9b05      	ldr	r3, [sp, #20]
 8014a72:	3301      	adds	r3, #1
 8014a74:	9305      	str	r3, [sp, #20]
 8014a76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014a7a:	2400      	movs	r4, #0
 8014a7c:	00e3      	lsls	r3, r4, #3
 8014a7e:	9307      	str	r3, [sp, #28]
 8014a80:	4bc7      	ldr	r3, [pc, #796]	; (8014da0 <__ieee754_pow+0x768>)
 8014a82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014a86:	ed93 7b00 	vldr	d7, [r3]
 8014a8a:	4629      	mov	r1, r5
 8014a8c:	ec53 2b17 	vmov	r2, r3, d7
 8014a90:	eeb0 9a47 	vmov.f32	s18, s14
 8014a94:	eef0 9a67 	vmov.f32	s19, s15
 8014a98:	4682      	mov	sl, r0
 8014a9a:	f7eb fc1d 	bl	80002d8 <__aeabi_dsub>
 8014a9e:	4652      	mov	r2, sl
 8014aa0:	4606      	mov	r6, r0
 8014aa2:	460f      	mov	r7, r1
 8014aa4:	462b      	mov	r3, r5
 8014aa6:	ec51 0b19 	vmov	r0, r1, d9
 8014aaa:	f7eb fc17 	bl	80002dc <__adddf3>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	49bb      	ldr	r1, [pc, #748]	; (8014da4 <__ieee754_pow+0x76c>)
 8014ab6:	f7eb fef1 	bl	800089c <__aeabi_ddiv>
 8014aba:	ec41 0b1a 	vmov	d10, r0, r1
 8014abe:	4602      	mov	r2, r0
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	4639      	mov	r1, r7
 8014ac6:	f7eb fdbf 	bl	8000648 <__aeabi_dmul>
 8014aca:	2300      	movs	r3, #0
 8014acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ad0:	9302      	str	r3, [sp, #8]
 8014ad2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014ad6:	46ab      	mov	fp, r5
 8014ad8:	106d      	asrs	r5, r5, #1
 8014ada:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014ade:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014ae2:	ec41 0b18 	vmov	d8, r0, r1
 8014ae6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014aea:	2200      	movs	r2, #0
 8014aec:	4640      	mov	r0, r8
 8014aee:	4649      	mov	r1, r9
 8014af0:	4614      	mov	r4, r2
 8014af2:	461d      	mov	r5, r3
 8014af4:	f7eb fda8 	bl	8000648 <__aeabi_dmul>
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	4630      	mov	r0, r6
 8014afe:	4639      	mov	r1, r7
 8014b00:	f7eb fbea 	bl	80002d8 <__aeabi_dsub>
 8014b04:	ec53 2b19 	vmov	r2, r3, d9
 8014b08:	4606      	mov	r6, r0
 8014b0a:	460f      	mov	r7, r1
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	4629      	mov	r1, r5
 8014b10:	f7eb fbe2 	bl	80002d8 <__aeabi_dsub>
 8014b14:	4602      	mov	r2, r0
 8014b16:	460b      	mov	r3, r1
 8014b18:	4650      	mov	r0, sl
 8014b1a:	4659      	mov	r1, fp
 8014b1c:	f7eb fbdc 	bl	80002d8 <__aeabi_dsub>
 8014b20:	4642      	mov	r2, r8
 8014b22:	464b      	mov	r3, r9
 8014b24:	f7eb fd90 	bl	8000648 <__aeabi_dmul>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	4639      	mov	r1, r7
 8014b30:	f7eb fbd2 	bl	80002d8 <__aeabi_dsub>
 8014b34:	ec53 2b1a 	vmov	r2, r3, d10
 8014b38:	f7eb fd86 	bl	8000648 <__aeabi_dmul>
 8014b3c:	ec53 2b18 	vmov	r2, r3, d8
 8014b40:	ec41 0b19 	vmov	d9, r0, r1
 8014b44:	ec51 0b18 	vmov	r0, r1, d8
 8014b48:	f7eb fd7e 	bl	8000648 <__aeabi_dmul>
 8014b4c:	a37c      	add	r3, pc, #496	; (adr r3, 8014d40 <__ieee754_pow+0x708>)
 8014b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b52:	4604      	mov	r4, r0
 8014b54:	460d      	mov	r5, r1
 8014b56:	f7eb fd77 	bl	8000648 <__aeabi_dmul>
 8014b5a:	a37b      	add	r3, pc, #492	; (adr r3, 8014d48 <__ieee754_pow+0x710>)
 8014b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b60:	f7eb fbbc 	bl	80002dc <__adddf3>
 8014b64:	4622      	mov	r2, r4
 8014b66:	462b      	mov	r3, r5
 8014b68:	f7eb fd6e 	bl	8000648 <__aeabi_dmul>
 8014b6c:	a378      	add	r3, pc, #480	; (adr r3, 8014d50 <__ieee754_pow+0x718>)
 8014b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b72:	f7eb fbb3 	bl	80002dc <__adddf3>
 8014b76:	4622      	mov	r2, r4
 8014b78:	462b      	mov	r3, r5
 8014b7a:	f7eb fd65 	bl	8000648 <__aeabi_dmul>
 8014b7e:	a376      	add	r3, pc, #472	; (adr r3, 8014d58 <__ieee754_pow+0x720>)
 8014b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b84:	f7eb fbaa 	bl	80002dc <__adddf3>
 8014b88:	4622      	mov	r2, r4
 8014b8a:	462b      	mov	r3, r5
 8014b8c:	f7eb fd5c 	bl	8000648 <__aeabi_dmul>
 8014b90:	a373      	add	r3, pc, #460	; (adr r3, 8014d60 <__ieee754_pow+0x728>)
 8014b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b96:	f7eb fba1 	bl	80002dc <__adddf3>
 8014b9a:	4622      	mov	r2, r4
 8014b9c:	462b      	mov	r3, r5
 8014b9e:	f7eb fd53 	bl	8000648 <__aeabi_dmul>
 8014ba2:	a371      	add	r3, pc, #452	; (adr r3, 8014d68 <__ieee754_pow+0x730>)
 8014ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba8:	f7eb fb98 	bl	80002dc <__adddf3>
 8014bac:	4622      	mov	r2, r4
 8014bae:	4606      	mov	r6, r0
 8014bb0:	460f      	mov	r7, r1
 8014bb2:	462b      	mov	r3, r5
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	f7eb fd46 	bl	8000648 <__aeabi_dmul>
 8014bbc:	4602      	mov	r2, r0
 8014bbe:	460b      	mov	r3, r1
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	4639      	mov	r1, r7
 8014bc4:	f7eb fd40 	bl	8000648 <__aeabi_dmul>
 8014bc8:	4642      	mov	r2, r8
 8014bca:	4604      	mov	r4, r0
 8014bcc:	460d      	mov	r5, r1
 8014bce:	464b      	mov	r3, r9
 8014bd0:	ec51 0b18 	vmov	r0, r1, d8
 8014bd4:	f7eb fb82 	bl	80002dc <__adddf3>
 8014bd8:	ec53 2b19 	vmov	r2, r3, d9
 8014bdc:	f7eb fd34 	bl	8000648 <__aeabi_dmul>
 8014be0:	4622      	mov	r2, r4
 8014be2:	462b      	mov	r3, r5
 8014be4:	f7eb fb7a 	bl	80002dc <__adddf3>
 8014be8:	4642      	mov	r2, r8
 8014bea:	4682      	mov	sl, r0
 8014bec:	468b      	mov	fp, r1
 8014bee:	464b      	mov	r3, r9
 8014bf0:	4640      	mov	r0, r8
 8014bf2:	4649      	mov	r1, r9
 8014bf4:	f7eb fd28 	bl	8000648 <__aeabi_dmul>
 8014bf8:	4b6b      	ldr	r3, [pc, #428]	; (8014da8 <__ieee754_pow+0x770>)
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	4606      	mov	r6, r0
 8014bfe:	460f      	mov	r7, r1
 8014c00:	f7eb fb6c 	bl	80002dc <__adddf3>
 8014c04:	4652      	mov	r2, sl
 8014c06:	465b      	mov	r3, fp
 8014c08:	f7eb fb68 	bl	80002dc <__adddf3>
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	4604      	mov	r4, r0
 8014c10:	460d      	mov	r5, r1
 8014c12:	4602      	mov	r2, r0
 8014c14:	460b      	mov	r3, r1
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb fd15 	bl	8000648 <__aeabi_dmul>
 8014c1e:	4b62      	ldr	r3, [pc, #392]	; (8014da8 <__ieee754_pow+0x770>)
 8014c20:	4680      	mov	r8, r0
 8014c22:	4689      	mov	r9, r1
 8014c24:	2200      	movs	r2, #0
 8014c26:	4620      	mov	r0, r4
 8014c28:	4629      	mov	r1, r5
 8014c2a:	f7eb fb55 	bl	80002d8 <__aeabi_dsub>
 8014c2e:	4632      	mov	r2, r6
 8014c30:	463b      	mov	r3, r7
 8014c32:	f7eb fb51 	bl	80002d8 <__aeabi_dsub>
 8014c36:	4602      	mov	r2, r0
 8014c38:	460b      	mov	r3, r1
 8014c3a:	4650      	mov	r0, sl
 8014c3c:	4659      	mov	r1, fp
 8014c3e:	f7eb fb4b 	bl	80002d8 <__aeabi_dsub>
 8014c42:	ec53 2b18 	vmov	r2, r3, d8
 8014c46:	f7eb fcff 	bl	8000648 <__aeabi_dmul>
 8014c4a:	4622      	mov	r2, r4
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	460f      	mov	r7, r1
 8014c50:	462b      	mov	r3, r5
 8014c52:	ec51 0b19 	vmov	r0, r1, d9
 8014c56:	f7eb fcf7 	bl	8000648 <__aeabi_dmul>
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	4630      	mov	r0, r6
 8014c60:	4639      	mov	r1, r7
 8014c62:	f7eb fb3b 	bl	80002dc <__adddf3>
 8014c66:	4606      	mov	r6, r0
 8014c68:	460f      	mov	r7, r1
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	4640      	mov	r0, r8
 8014c70:	4649      	mov	r1, r9
 8014c72:	f7eb fb33 	bl	80002dc <__adddf3>
 8014c76:	a33e      	add	r3, pc, #248	; (adr r3, 8014d70 <__ieee754_pow+0x738>)
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	2000      	movs	r0, #0
 8014c7e:	4604      	mov	r4, r0
 8014c80:	460d      	mov	r5, r1
 8014c82:	f7eb fce1 	bl	8000648 <__aeabi_dmul>
 8014c86:	4642      	mov	r2, r8
 8014c88:	ec41 0b18 	vmov	d8, r0, r1
 8014c8c:	464b      	mov	r3, r9
 8014c8e:	4620      	mov	r0, r4
 8014c90:	4629      	mov	r1, r5
 8014c92:	f7eb fb21 	bl	80002d8 <__aeabi_dsub>
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	f7eb fb1b 	bl	80002d8 <__aeabi_dsub>
 8014ca2:	a335      	add	r3, pc, #212	; (adr r3, 8014d78 <__ieee754_pow+0x740>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	f7eb fcce 	bl	8000648 <__aeabi_dmul>
 8014cac:	a334      	add	r3, pc, #208	; (adr r3, 8014d80 <__ieee754_pow+0x748>)
 8014cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb2:	4606      	mov	r6, r0
 8014cb4:	460f      	mov	r7, r1
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	4629      	mov	r1, r5
 8014cba:	f7eb fcc5 	bl	8000648 <__aeabi_dmul>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	460b      	mov	r3, r1
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	4639      	mov	r1, r7
 8014cc6:	f7eb fb09 	bl	80002dc <__adddf3>
 8014cca:	9a07      	ldr	r2, [sp, #28]
 8014ccc:	4b37      	ldr	r3, [pc, #220]	; (8014dac <__ieee754_pow+0x774>)
 8014cce:	4413      	add	r3, r2
 8014cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd4:	f7eb fb02 	bl	80002dc <__adddf3>
 8014cd8:	4682      	mov	sl, r0
 8014cda:	9805      	ldr	r0, [sp, #20]
 8014cdc:	468b      	mov	fp, r1
 8014cde:	f7eb fc49 	bl	8000574 <__aeabi_i2d>
 8014ce2:	9a07      	ldr	r2, [sp, #28]
 8014ce4:	4b32      	ldr	r3, [pc, #200]	; (8014db0 <__ieee754_pow+0x778>)
 8014ce6:	4413      	add	r3, r2
 8014ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014cec:	4606      	mov	r6, r0
 8014cee:	460f      	mov	r7, r1
 8014cf0:	4652      	mov	r2, sl
 8014cf2:	465b      	mov	r3, fp
 8014cf4:	ec51 0b18 	vmov	r0, r1, d8
 8014cf8:	f7eb faf0 	bl	80002dc <__adddf3>
 8014cfc:	4642      	mov	r2, r8
 8014cfe:	464b      	mov	r3, r9
 8014d00:	f7eb faec 	bl	80002dc <__adddf3>
 8014d04:	4632      	mov	r2, r6
 8014d06:	463b      	mov	r3, r7
 8014d08:	f7eb fae8 	bl	80002dc <__adddf3>
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	4632      	mov	r2, r6
 8014d10:	463b      	mov	r3, r7
 8014d12:	4604      	mov	r4, r0
 8014d14:	460d      	mov	r5, r1
 8014d16:	f7eb fadf 	bl	80002d8 <__aeabi_dsub>
 8014d1a:	4642      	mov	r2, r8
 8014d1c:	464b      	mov	r3, r9
 8014d1e:	f7eb fadb 	bl	80002d8 <__aeabi_dsub>
 8014d22:	ec53 2b18 	vmov	r2, r3, d8
 8014d26:	f7eb fad7 	bl	80002d8 <__aeabi_dsub>
 8014d2a:	4602      	mov	r2, r0
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	4650      	mov	r0, sl
 8014d30:	4659      	mov	r1, fp
 8014d32:	e610      	b.n	8014956 <__ieee754_pow+0x31e>
 8014d34:	2401      	movs	r4, #1
 8014d36:	e6a1      	b.n	8014a7c <__ieee754_pow+0x444>
 8014d38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014d88 <__ieee754_pow+0x750>
 8014d3c:	e617      	b.n	801496e <__ieee754_pow+0x336>
 8014d3e:	bf00      	nop
 8014d40:	4a454eef 	.word	0x4a454eef
 8014d44:	3fca7e28 	.word	0x3fca7e28
 8014d48:	93c9db65 	.word	0x93c9db65
 8014d4c:	3fcd864a 	.word	0x3fcd864a
 8014d50:	a91d4101 	.word	0xa91d4101
 8014d54:	3fd17460 	.word	0x3fd17460
 8014d58:	518f264d 	.word	0x518f264d
 8014d5c:	3fd55555 	.word	0x3fd55555
 8014d60:	db6fabff 	.word	0xdb6fabff
 8014d64:	3fdb6db6 	.word	0x3fdb6db6
 8014d68:	33333303 	.word	0x33333303
 8014d6c:	3fe33333 	.word	0x3fe33333
 8014d70:	e0000000 	.word	0xe0000000
 8014d74:	3feec709 	.word	0x3feec709
 8014d78:	dc3a03fd 	.word	0xdc3a03fd
 8014d7c:	3feec709 	.word	0x3feec709
 8014d80:	145b01f5 	.word	0x145b01f5
 8014d84:	be3e2fe0 	.word	0xbe3e2fe0
 8014d88:	00000000 	.word	0x00000000
 8014d8c:	3ff00000 	.word	0x3ff00000
 8014d90:	7ff00000 	.word	0x7ff00000
 8014d94:	43400000 	.word	0x43400000
 8014d98:	0003988e 	.word	0x0003988e
 8014d9c:	000bb679 	.word	0x000bb679
 8014da0:	08015db8 	.word	0x08015db8
 8014da4:	3ff00000 	.word	0x3ff00000
 8014da8:	40080000 	.word	0x40080000
 8014dac:	08015dd8 	.word	0x08015dd8
 8014db0:	08015dc8 	.word	0x08015dc8
 8014db4:	a3b3      	add	r3, pc, #716	; (adr r3, 8015084 <__ieee754_pow+0xa4c>)
 8014db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	f7eb fa8d 	bl	80002dc <__adddf3>
 8014dc2:	4622      	mov	r2, r4
 8014dc4:	ec41 0b1a 	vmov	d10, r0, r1
 8014dc8:	462b      	mov	r3, r5
 8014dca:	4630      	mov	r0, r6
 8014dcc:	4639      	mov	r1, r7
 8014dce:	f7eb fa83 	bl	80002d8 <__aeabi_dsub>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	ec51 0b1a 	vmov	r0, r1, d10
 8014dda:	f7eb fec5 	bl	8000b68 <__aeabi_dcmpgt>
 8014dde:	2800      	cmp	r0, #0
 8014de0:	f47f ae04 	bne.w	80149ec <__ieee754_pow+0x3b4>
 8014de4:	4aa2      	ldr	r2, [pc, #648]	; (8015070 <__ieee754_pow+0xa38>)
 8014de6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014dea:	4293      	cmp	r3, r2
 8014dec:	f340 8107 	ble.w	8014ffe <__ieee754_pow+0x9c6>
 8014df0:	151b      	asrs	r3, r3, #20
 8014df2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014df6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014dfa:	fa4a fa03 	asr.w	sl, sl, r3
 8014dfe:	44da      	add	sl, fp
 8014e00:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014e04:	489b      	ldr	r0, [pc, #620]	; (8015074 <__ieee754_pow+0xa3c>)
 8014e06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014e0a:	4108      	asrs	r0, r1
 8014e0c:	ea00 030a 	and.w	r3, r0, sl
 8014e10:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014e14:	f1c1 0114 	rsb	r1, r1, #20
 8014e18:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014e1c:	fa4a fa01 	asr.w	sl, sl, r1
 8014e20:	f1bb 0f00 	cmp.w	fp, #0
 8014e24:	f04f 0200 	mov.w	r2, #0
 8014e28:	4620      	mov	r0, r4
 8014e2a:	4629      	mov	r1, r5
 8014e2c:	bfb8      	it	lt
 8014e2e:	f1ca 0a00 	rsblt	sl, sl, #0
 8014e32:	f7eb fa51 	bl	80002d8 <__aeabi_dsub>
 8014e36:	ec41 0b19 	vmov	d9, r0, r1
 8014e3a:	4642      	mov	r2, r8
 8014e3c:	464b      	mov	r3, r9
 8014e3e:	ec51 0b19 	vmov	r0, r1, d9
 8014e42:	f7eb fa4b 	bl	80002dc <__adddf3>
 8014e46:	a37a      	add	r3, pc, #488	; (adr r3, 8015030 <__ieee754_pow+0x9f8>)
 8014e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	4604      	mov	r4, r0
 8014e50:	460d      	mov	r5, r1
 8014e52:	f7eb fbf9 	bl	8000648 <__aeabi_dmul>
 8014e56:	ec53 2b19 	vmov	r2, r3, d9
 8014e5a:	4606      	mov	r6, r0
 8014e5c:	460f      	mov	r7, r1
 8014e5e:	4620      	mov	r0, r4
 8014e60:	4629      	mov	r1, r5
 8014e62:	f7eb fa39 	bl	80002d8 <__aeabi_dsub>
 8014e66:	4602      	mov	r2, r0
 8014e68:	460b      	mov	r3, r1
 8014e6a:	4640      	mov	r0, r8
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	f7eb fa33 	bl	80002d8 <__aeabi_dsub>
 8014e72:	a371      	add	r3, pc, #452	; (adr r3, 8015038 <__ieee754_pow+0xa00>)
 8014e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e78:	f7eb fbe6 	bl	8000648 <__aeabi_dmul>
 8014e7c:	a370      	add	r3, pc, #448	; (adr r3, 8015040 <__ieee754_pow+0xa08>)
 8014e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e82:	4680      	mov	r8, r0
 8014e84:	4689      	mov	r9, r1
 8014e86:	4620      	mov	r0, r4
 8014e88:	4629      	mov	r1, r5
 8014e8a:	f7eb fbdd 	bl	8000648 <__aeabi_dmul>
 8014e8e:	4602      	mov	r2, r0
 8014e90:	460b      	mov	r3, r1
 8014e92:	4640      	mov	r0, r8
 8014e94:	4649      	mov	r1, r9
 8014e96:	f7eb fa21 	bl	80002dc <__adddf3>
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	460d      	mov	r5, r1
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	4639      	mov	r1, r7
 8014ea6:	f7eb fa19 	bl	80002dc <__adddf3>
 8014eaa:	4632      	mov	r2, r6
 8014eac:	463b      	mov	r3, r7
 8014eae:	4680      	mov	r8, r0
 8014eb0:	4689      	mov	r9, r1
 8014eb2:	f7eb fa11 	bl	80002d8 <__aeabi_dsub>
 8014eb6:	4602      	mov	r2, r0
 8014eb8:	460b      	mov	r3, r1
 8014eba:	4620      	mov	r0, r4
 8014ebc:	4629      	mov	r1, r5
 8014ebe:	f7eb fa0b 	bl	80002d8 <__aeabi_dsub>
 8014ec2:	4642      	mov	r2, r8
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	460f      	mov	r7, r1
 8014ec8:	464b      	mov	r3, r9
 8014eca:	4640      	mov	r0, r8
 8014ecc:	4649      	mov	r1, r9
 8014ece:	f7eb fbbb 	bl	8000648 <__aeabi_dmul>
 8014ed2:	a35d      	add	r3, pc, #372	; (adr r3, 8015048 <__ieee754_pow+0xa10>)
 8014ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed8:	4604      	mov	r4, r0
 8014eda:	460d      	mov	r5, r1
 8014edc:	f7eb fbb4 	bl	8000648 <__aeabi_dmul>
 8014ee0:	a35b      	add	r3, pc, #364	; (adr r3, 8015050 <__ieee754_pow+0xa18>)
 8014ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee6:	f7eb f9f7 	bl	80002d8 <__aeabi_dsub>
 8014eea:	4622      	mov	r2, r4
 8014eec:	462b      	mov	r3, r5
 8014eee:	f7eb fbab 	bl	8000648 <__aeabi_dmul>
 8014ef2:	a359      	add	r3, pc, #356	; (adr r3, 8015058 <__ieee754_pow+0xa20>)
 8014ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef8:	f7eb f9f0 	bl	80002dc <__adddf3>
 8014efc:	4622      	mov	r2, r4
 8014efe:	462b      	mov	r3, r5
 8014f00:	f7eb fba2 	bl	8000648 <__aeabi_dmul>
 8014f04:	a356      	add	r3, pc, #344	; (adr r3, 8015060 <__ieee754_pow+0xa28>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	f7eb f9e5 	bl	80002d8 <__aeabi_dsub>
 8014f0e:	4622      	mov	r2, r4
 8014f10:	462b      	mov	r3, r5
 8014f12:	f7eb fb99 	bl	8000648 <__aeabi_dmul>
 8014f16:	a354      	add	r3, pc, #336	; (adr r3, 8015068 <__ieee754_pow+0xa30>)
 8014f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1c:	f7eb f9de 	bl	80002dc <__adddf3>
 8014f20:	4622      	mov	r2, r4
 8014f22:	462b      	mov	r3, r5
 8014f24:	f7eb fb90 	bl	8000648 <__aeabi_dmul>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4640      	mov	r0, r8
 8014f2e:	4649      	mov	r1, r9
 8014f30:	f7eb f9d2 	bl	80002d8 <__aeabi_dsub>
 8014f34:	4604      	mov	r4, r0
 8014f36:	460d      	mov	r5, r1
 8014f38:	4602      	mov	r2, r0
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	4640      	mov	r0, r8
 8014f3e:	4649      	mov	r1, r9
 8014f40:	f7eb fb82 	bl	8000648 <__aeabi_dmul>
 8014f44:	2200      	movs	r2, #0
 8014f46:	ec41 0b19 	vmov	d9, r0, r1
 8014f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014f4e:	4620      	mov	r0, r4
 8014f50:	4629      	mov	r1, r5
 8014f52:	f7eb f9c1 	bl	80002d8 <__aeabi_dsub>
 8014f56:	4602      	mov	r2, r0
 8014f58:	460b      	mov	r3, r1
 8014f5a:	ec51 0b19 	vmov	r0, r1, d9
 8014f5e:	f7eb fc9d 	bl	800089c <__aeabi_ddiv>
 8014f62:	4632      	mov	r2, r6
 8014f64:	4604      	mov	r4, r0
 8014f66:	460d      	mov	r5, r1
 8014f68:	463b      	mov	r3, r7
 8014f6a:	4640      	mov	r0, r8
 8014f6c:	4649      	mov	r1, r9
 8014f6e:	f7eb fb6b 	bl	8000648 <__aeabi_dmul>
 8014f72:	4632      	mov	r2, r6
 8014f74:	463b      	mov	r3, r7
 8014f76:	f7eb f9b1 	bl	80002dc <__adddf3>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	4620      	mov	r0, r4
 8014f80:	4629      	mov	r1, r5
 8014f82:	f7eb f9a9 	bl	80002d8 <__aeabi_dsub>
 8014f86:	4642      	mov	r2, r8
 8014f88:	464b      	mov	r3, r9
 8014f8a:	f7eb f9a5 	bl	80002d8 <__aeabi_dsub>
 8014f8e:	460b      	mov	r3, r1
 8014f90:	4602      	mov	r2, r0
 8014f92:	4939      	ldr	r1, [pc, #228]	; (8015078 <__ieee754_pow+0xa40>)
 8014f94:	2000      	movs	r0, #0
 8014f96:	f7eb f99f 	bl	80002d8 <__aeabi_dsub>
 8014f9a:	ec41 0b10 	vmov	d0, r0, r1
 8014f9e:	ee10 3a90 	vmov	r3, s1
 8014fa2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014faa:	da2b      	bge.n	8015004 <__ieee754_pow+0x9cc>
 8014fac:	4650      	mov	r0, sl
 8014fae:	f000 f9f3 	bl	8015398 <scalbn>
 8014fb2:	ec51 0b10 	vmov	r0, r1, d0
 8014fb6:	ec53 2b18 	vmov	r2, r3, d8
 8014fba:	f7ff bbee 	b.w	801479a <__ieee754_pow+0x162>
 8014fbe:	4b2f      	ldr	r3, [pc, #188]	; (801507c <__ieee754_pow+0xa44>)
 8014fc0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014fc4:	429e      	cmp	r6, r3
 8014fc6:	f77f af0d 	ble.w	8014de4 <__ieee754_pow+0x7ac>
 8014fca:	4b2d      	ldr	r3, [pc, #180]	; (8015080 <__ieee754_pow+0xa48>)
 8014fcc:	440b      	add	r3, r1
 8014fce:	4303      	orrs	r3, r0
 8014fd0:	d009      	beq.n	8014fe6 <__ieee754_pow+0x9ae>
 8014fd2:	ec51 0b18 	vmov	r0, r1, d8
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	2300      	movs	r3, #0
 8014fda:	f7eb fda7 	bl	8000b2c <__aeabi_dcmplt>
 8014fde:	3800      	subs	r0, #0
 8014fe0:	bf18      	it	ne
 8014fe2:	2001      	movne	r0, #1
 8014fe4:	e448      	b.n	8014878 <__ieee754_pow+0x240>
 8014fe6:	4622      	mov	r2, r4
 8014fe8:	462b      	mov	r3, r5
 8014fea:	f7eb f975 	bl	80002d8 <__aeabi_dsub>
 8014fee:	4642      	mov	r2, r8
 8014ff0:	464b      	mov	r3, r9
 8014ff2:	f7eb fdaf 	bl	8000b54 <__aeabi_dcmpge>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	f43f aef4 	beq.w	8014de4 <__ieee754_pow+0x7ac>
 8014ffc:	e7e9      	b.n	8014fd2 <__ieee754_pow+0x99a>
 8014ffe:	f04f 0a00 	mov.w	sl, #0
 8015002:	e71a      	b.n	8014e3a <__ieee754_pow+0x802>
 8015004:	ec51 0b10 	vmov	r0, r1, d0
 8015008:	4619      	mov	r1, r3
 801500a:	e7d4      	b.n	8014fb6 <__ieee754_pow+0x97e>
 801500c:	491a      	ldr	r1, [pc, #104]	; (8015078 <__ieee754_pow+0xa40>)
 801500e:	2000      	movs	r0, #0
 8015010:	f7ff bb31 	b.w	8014676 <__ieee754_pow+0x3e>
 8015014:	2000      	movs	r0, #0
 8015016:	2100      	movs	r1, #0
 8015018:	f7ff bb2d 	b.w	8014676 <__ieee754_pow+0x3e>
 801501c:	4630      	mov	r0, r6
 801501e:	4639      	mov	r1, r7
 8015020:	f7ff bb29 	b.w	8014676 <__ieee754_pow+0x3e>
 8015024:	9204      	str	r2, [sp, #16]
 8015026:	f7ff bb7b 	b.w	8014720 <__ieee754_pow+0xe8>
 801502a:	2300      	movs	r3, #0
 801502c:	f7ff bb65 	b.w	80146fa <__ieee754_pow+0xc2>
 8015030:	00000000 	.word	0x00000000
 8015034:	3fe62e43 	.word	0x3fe62e43
 8015038:	fefa39ef 	.word	0xfefa39ef
 801503c:	3fe62e42 	.word	0x3fe62e42
 8015040:	0ca86c39 	.word	0x0ca86c39
 8015044:	be205c61 	.word	0xbe205c61
 8015048:	72bea4d0 	.word	0x72bea4d0
 801504c:	3e663769 	.word	0x3e663769
 8015050:	c5d26bf1 	.word	0xc5d26bf1
 8015054:	3ebbbd41 	.word	0x3ebbbd41
 8015058:	af25de2c 	.word	0xaf25de2c
 801505c:	3f11566a 	.word	0x3f11566a
 8015060:	16bebd93 	.word	0x16bebd93
 8015064:	3f66c16c 	.word	0x3f66c16c
 8015068:	5555553e 	.word	0x5555553e
 801506c:	3fc55555 	.word	0x3fc55555
 8015070:	3fe00000 	.word	0x3fe00000
 8015074:	fff00000 	.word	0xfff00000
 8015078:	3ff00000 	.word	0x3ff00000
 801507c:	4090cbff 	.word	0x4090cbff
 8015080:	3f6f3400 	.word	0x3f6f3400
 8015084:	652b82fe 	.word	0x652b82fe
 8015088:	3c971547 	.word	0x3c971547

0801508c <fabs>:
 801508c:	ec51 0b10 	vmov	r0, r1, d0
 8015090:	ee10 2a10 	vmov	r2, s0
 8015094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015098:	ec43 2b10 	vmov	d0, r2, r3
 801509c:	4770      	bx	lr
	...

080150a0 <__ieee754_atan2f>:
 80150a0:	ee10 2a90 	vmov	r2, s1
 80150a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80150a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80150ac:	b510      	push	{r4, lr}
 80150ae:	eef0 7a40 	vmov.f32	s15, s0
 80150b2:	dc06      	bgt.n	80150c2 <__ieee754_atan2f+0x22>
 80150b4:	ee10 0a10 	vmov	r0, s0
 80150b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80150bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80150c0:	dd04      	ble.n	80150cc <__ieee754_atan2f+0x2c>
 80150c2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80150c6:	eeb0 0a67 	vmov.f32	s0, s15
 80150ca:	bd10      	pop	{r4, pc}
 80150cc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80150d0:	d103      	bne.n	80150da <__ieee754_atan2f+0x3a>
 80150d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150d6:	f000 b883 	b.w	80151e0 <atanf>
 80150da:	1794      	asrs	r4, r2, #30
 80150dc:	f004 0402 	and.w	r4, r4, #2
 80150e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80150e4:	b943      	cbnz	r3, 80150f8 <__ieee754_atan2f+0x58>
 80150e6:	2c02      	cmp	r4, #2
 80150e8:	d05e      	beq.n	80151a8 <__ieee754_atan2f+0x108>
 80150ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80151bc <__ieee754_atan2f+0x11c>
 80150ee:	2c03      	cmp	r4, #3
 80150f0:	bf08      	it	eq
 80150f2:	eef0 7a47 	vmoveq.f32	s15, s14
 80150f6:	e7e6      	b.n	80150c6 <__ieee754_atan2f+0x26>
 80150f8:	b941      	cbnz	r1, 801510c <__ieee754_atan2f+0x6c>
 80150fa:	eddf 7a31 	vldr	s15, [pc, #196]	; 80151c0 <__ieee754_atan2f+0x120>
 80150fe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80151c4 <__ieee754_atan2f+0x124>
 8015102:	2800      	cmp	r0, #0
 8015104:	bfb8      	it	lt
 8015106:	eef0 7a47 	vmovlt.f32	s15, s14
 801510a:	e7dc      	b.n	80150c6 <__ieee754_atan2f+0x26>
 801510c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015110:	d110      	bne.n	8015134 <__ieee754_atan2f+0x94>
 8015112:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015116:	f104 34ff 	add.w	r4, r4, #4294967295
 801511a:	d107      	bne.n	801512c <__ieee754_atan2f+0x8c>
 801511c:	2c02      	cmp	r4, #2
 801511e:	d846      	bhi.n	80151ae <__ieee754_atan2f+0x10e>
 8015120:	4b29      	ldr	r3, [pc, #164]	; (80151c8 <__ieee754_atan2f+0x128>)
 8015122:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015126:	edd3 7a00 	vldr	s15, [r3]
 801512a:	e7cc      	b.n	80150c6 <__ieee754_atan2f+0x26>
 801512c:	2c02      	cmp	r4, #2
 801512e:	d841      	bhi.n	80151b4 <__ieee754_atan2f+0x114>
 8015130:	4b26      	ldr	r3, [pc, #152]	; (80151cc <__ieee754_atan2f+0x12c>)
 8015132:	e7f6      	b.n	8015122 <__ieee754_atan2f+0x82>
 8015134:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015138:	d0df      	beq.n	80150fa <__ieee754_atan2f+0x5a>
 801513a:	1a5b      	subs	r3, r3, r1
 801513c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8015140:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015144:	da1a      	bge.n	801517c <__ieee754_atan2f+0xdc>
 8015146:	2a00      	cmp	r2, #0
 8015148:	da01      	bge.n	801514e <__ieee754_atan2f+0xae>
 801514a:	313c      	adds	r1, #60	; 0x3c
 801514c:	db19      	blt.n	8015182 <__ieee754_atan2f+0xe2>
 801514e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8015152:	f000 f919 	bl	8015388 <fabsf>
 8015156:	f000 f843 	bl	80151e0 <atanf>
 801515a:	eef0 7a40 	vmov.f32	s15, s0
 801515e:	2c01      	cmp	r4, #1
 8015160:	d012      	beq.n	8015188 <__ieee754_atan2f+0xe8>
 8015162:	2c02      	cmp	r4, #2
 8015164:	d017      	beq.n	8015196 <__ieee754_atan2f+0xf6>
 8015166:	2c00      	cmp	r4, #0
 8015168:	d0ad      	beq.n	80150c6 <__ieee754_atan2f+0x26>
 801516a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80151d0 <__ieee754_atan2f+0x130>
 801516e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015172:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80151d4 <__ieee754_atan2f+0x134>
 8015176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801517a:	e7a4      	b.n	80150c6 <__ieee754_atan2f+0x26>
 801517c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80151c0 <__ieee754_atan2f+0x120>
 8015180:	e7ed      	b.n	801515e <__ieee754_atan2f+0xbe>
 8015182:	eddf 7a15 	vldr	s15, [pc, #84]	; 80151d8 <__ieee754_atan2f+0x138>
 8015186:	e7ea      	b.n	801515e <__ieee754_atan2f+0xbe>
 8015188:	ee17 3a90 	vmov	r3, s15
 801518c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015190:	ee07 3a90 	vmov	s15, r3
 8015194:	e797      	b.n	80150c6 <__ieee754_atan2f+0x26>
 8015196:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80151d0 <__ieee754_atan2f+0x130>
 801519a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801519e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80151d4 <__ieee754_atan2f+0x134>
 80151a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151a6:	e78e      	b.n	80150c6 <__ieee754_atan2f+0x26>
 80151a8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80151d4 <__ieee754_atan2f+0x134>
 80151ac:	e78b      	b.n	80150c6 <__ieee754_atan2f+0x26>
 80151ae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80151dc <__ieee754_atan2f+0x13c>
 80151b2:	e788      	b.n	80150c6 <__ieee754_atan2f+0x26>
 80151b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80151d8 <__ieee754_atan2f+0x138>
 80151b8:	e785      	b.n	80150c6 <__ieee754_atan2f+0x26>
 80151ba:	bf00      	nop
 80151bc:	c0490fdb 	.word	0xc0490fdb
 80151c0:	3fc90fdb 	.word	0x3fc90fdb
 80151c4:	bfc90fdb 	.word	0xbfc90fdb
 80151c8:	08015de8 	.word	0x08015de8
 80151cc:	08015df4 	.word	0x08015df4
 80151d0:	33bbbd2e 	.word	0x33bbbd2e
 80151d4:	40490fdb 	.word	0x40490fdb
 80151d8:	00000000 	.word	0x00000000
 80151dc:	3f490fdb 	.word	0x3f490fdb

080151e0 <atanf>:
 80151e0:	b538      	push	{r3, r4, r5, lr}
 80151e2:	ee10 5a10 	vmov	r5, s0
 80151e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80151ea:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80151ee:	eef0 7a40 	vmov.f32	s15, s0
 80151f2:	db10      	blt.n	8015216 <atanf+0x36>
 80151f4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80151f8:	dd04      	ble.n	8015204 <atanf+0x24>
 80151fa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80151fe:	eeb0 0a67 	vmov.f32	s0, s15
 8015202:	bd38      	pop	{r3, r4, r5, pc}
 8015204:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801533c <atanf+0x15c>
 8015208:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015340 <atanf+0x160>
 801520c:	2d00      	cmp	r5, #0
 801520e:	bfd8      	it	le
 8015210:	eef0 7a47 	vmovle.f32	s15, s14
 8015214:	e7f3      	b.n	80151fe <atanf+0x1e>
 8015216:	4b4b      	ldr	r3, [pc, #300]	; (8015344 <atanf+0x164>)
 8015218:	429c      	cmp	r4, r3
 801521a:	dc10      	bgt.n	801523e <atanf+0x5e>
 801521c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015220:	da0a      	bge.n	8015238 <atanf+0x58>
 8015222:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015348 <atanf+0x168>
 8015226:	ee30 7a07 	vadd.f32	s14, s0, s14
 801522a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801522e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015236:	dce2      	bgt.n	80151fe <atanf+0x1e>
 8015238:	f04f 33ff 	mov.w	r3, #4294967295
 801523c:	e013      	b.n	8015266 <atanf+0x86>
 801523e:	f000 f8a3 	bl	8015388 <fabsf>
 8015242:	4b42      	ldr	r3, [pc, #264]	; (801534c <atanf+0x16c>)
 8015244:	429c      	cmp	r4, r3
 8015246:	dc4f      	bgt.n	80152e8 <atanf+0x108>
 8015248:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801524c:	429c      	cmp	r4, r3
 801524e:	dc41      	bgt.n	80152d4 <atanf+0xf4>
 8015250:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015254:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015258:	eea0 7a27 	vfma.f32	s14, s0, s15
 801525c:	2300      	movs	r3, #0
 801525e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015262:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015266:	1c5a      	adds	r2, r3, #1
 8015268:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801526c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015350 <atanf+0x170>
 8015270:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015354 <atanf+0x174>
 8015274:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015358 <atanf+0x178>
 8015278:	ee66 6a06 	vmul.f32	s13, s12, s12
 801527c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015280:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801535c <atanf+0x17c>
 8015284:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015288:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015360 <atanf+0x180>
 801528c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015290:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015364 <atanf+0x184>
 8015294:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015298:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015368 <atanf+0x188>
 801529c:	eee7 5a26 	vfma.f32	s11, s14, s13
 80152a0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801536c <atanf+0x18c>
 80152a4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80152a8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015370 <atanf+0x190>
 80152ac:	eea5 7a26 	vfma.f32	s14, s10, s13
 80152b0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015374 <atanf+0x194>
 80152b4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80152b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015378 <atanf+0x198>
 80152bc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80152c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80152c4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80152c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80152cc:	d121      	bne.n	8015312 <atanf+0x132>
 80152ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152d2:	e794      	b.n	80151fe <atanf+0x1e>
 80152d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80152d8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80152dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80152e0:	2301      	movs	r3, #1
 80152e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152e6:	e7be      	b.n	8015266 <atanf+0x86>
 80152e8:	4b24      	ldr	r3, [pc, #144]	; (801537c <atanf+0x19c>)
 80152ea:	429c      	cmp	r4, r3
 80152ec:	dc0b      	bgt.n	8015306 <atanf+0x126>
 80152ee:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80152f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152f6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80152fa:	2302      	movs	r3, #2
 80152fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015304:	e7af      	b.n	8015266 <atanf+0x86>
 8015306:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801530a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801530e:	2303      	movs	r3, #3
 8015310:	e7a9      	b.n	8015266 <atanf+0x86>
 8015312:	4a1b      	ldr	r2, [pc, #108]	; (8015380 <atanf+0x1a0>)
 8015314:	491b      	ldr	r1, [pc, #108]	; (8015384 <atanf+0x1a4>)
 8015316:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801531a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801531e:	edd3 6a00 	vldr	s13, [r3]
 8015322:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015326:	2d00      	cmp	r5, #0
 8015328:	ee37 7a67 	vsub.f32	s14, s14, s15
 801532c:	edd2 7a00 	vldr	s15, [r2]
 8015330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015334:	bfb8      	it	lt
 8015336:	eef1 7a67 	vneglt.f32	s15, s15
 801533a:	e760      	b.n	80151fe <atanf+0x1e>
 801533c:	3fc90fdb 	.word	0x3fc90fdb
 8015340:	bfc90fdb 	.word	0xbfc90fdb
 8015344:	3edfffff 	.word	0x3edfffff
 8015348:	7149f2ca 	.word	0x7149f2ca
 801534c:	3f97ffff 	.word	0x3f97ffff
 8015350:	3c8569d7 	.word	0x3c8569d7
 8015354:	3d4bda59 	.word	0x3d4bda59
 8015358:	bd6ef16b 	.word	0xbd6ef16b
 801535c:	3d886b35 	.word	0x3d886b35
 8015360:	3dba2e6e 	.word	0x3dba2e6e
 8015364:	3e124925 	.word	0x3e124925
 8015368:	3eaaaaab 	.word	0x3eaaaaab
 801536c:	bd15a221 	.word	0xbd15a221
 8015370:	bd9d8795 	.word	0xbd9d8795
 8015374:	bde38e38 	.word	0xbde38e38
 8015378:	be4ccccd 	.word	0xbe4ccccd
 801537c:	401bffff 	.word	0x401bffff
 8015380:	08015e00 	.word	0x08015e00
 8015384:	08015e10 	.word	0x08015e10

08015388 <fabsf>:
 8015388:	ee10 3a10 	vmov	r3, s0
 801538c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015390:	ee00 3a10 	vmov	s0, r3
 8015394:	4770      	bx	lr
	...

08015398 <scalbn>:
 8015398:	b570      	push	{r4, r5, r6, lr}
 801539a:	ec55 4b10 	vmov	r4, r5, d0
 801539e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80153a2:	4606      	mov	r6, r0
 80153a4:	462b      	mov	r3, r5
 80153a6:	b999      	cbnz	r1, 80153d0 <scalbn+0x38>
 80153a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153ac:	4323      	orrs	r3, r4
 80153ae:	d03f      	beq.n	8015430 <scalbn+0x98>
 80153b0:	4b35      	ldr	r3, [pc, #212]	; (8015488 <scalbn+0xf0>)
 80153b2:	4629      	mov	r1, r5
 80153b4:	ee10 0a10 	vmov	r0, s0
 80153b8:	2200      	movs	r2, #0
 80153ba:	f7eb f945 	bl	8000648 <__aeabi_dmul>
 80153be:	4b33      	ldr	r3, [pc, #204]	; (801548c <scalbn+0xf4>)
 80153c0:	429e      	cmp	r6, r3
 80153c2:	4604      	mov	r4, r0
 80153c4:	460d      	mov	r5, r1
 80153c6:	da10      	bge.n	80153ea <scalbn+0x52>
 80153c8:	a327      	add	r3, pc, #156	; (adr r3, 8015468 <scalbn+0xd0>)
 80153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ce:	e01f      	b.n	8015410 <scalbn+0x78>
 80153d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80153d4:	4291      	cmp	r1, r2
 80153d6:	d10c      	bne.n	80153f2 <scalbn+0x5a>
 80153d8:	ee10 2a10 	vmov	r2, s0
 80153dc:	4620      	mov	r0, r4
 80153de:	4629      	mov	r1, r5
 80153e0:	f7ea ff7c 	bl	80002dc <__adddf3>
 80153e4:	4604      	mov	r4, r0
 80153e6:	460d      	mov	r5, r1
 80153e8:	e022      	b.n	8015430 <scalbn+0x98>
 80153ea:	460b      	mov	r3, r1
 80153ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80153f0:	3936      	subs	r1, #54	; 0x36
 80153f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80153f6:	4296      	cmp	r6, r2
 80153f8:	dd0d      	ble.n	8015416 <scalbn+0x7e>
 80153fa:	2d00      	cmp	r5, #0
 80153fc:	a11c      	add	r1, pc, #112	; (adr r1, 8015470 <scalbn+0xd8>)
 80153fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015402:	da02      	bge.n	801540a <scalbn+0x72>
 8015404:	a11c      	add	r1, pc, #112	; (adr r1, 8015478 <scalbn+0xe0>)
 8015406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801540a:	a319      	add	r3, pc, #100	; (adr r3, 8015470 <scalbn+0xd8>)
 801540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015410:	f7eb f91a 	bl	8000648 <__aeabi_dmul>
 8015414:	e7e6      	b.n	80153e4 <scalbn+0x4c>
 8015416:	1872      	adds	r2, r6, r1
 8015418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801541c:	428a      	cmp	r2, r1
 801541e:	dcec      	bgt.n	80153fa <scalbn+0x62>
 8015420:	2a00      	cmp	r2, #0
 8015422:	dd08      	ble.n	8015436 <scalbn+0x9e>
 8015424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801542c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015430:	ec45 4b10 	vmov	d0, r4, r5
 8015434:	bd70      	pop	{r4, r5, r6, pc}
 8015436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801543a:	da08      	bge.n	801544e <scalbn+0xb6>
 801543c:	2d00      	cmp	r5, #0
 801543e:	a10a      	add	r1, pc, #40	; (adr r1, 8015468 <scalbn+0xd0>)
 8015440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015444:	dac0      	bge.n	80153c8 <scalbn+0x30>
 8015446:	a10e      	add	r1, pc, #56	; (adr r1, 8015480 <scalbn+0xe8>)
 8015448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801544c:	e7bc      	b.n	80153c8 <scalbn+0x30>
 801544e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015452:	3236      	adds	r2, #54	; 0x36
 8015454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015458:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801545c:	4620      	mov	r0, r4
 801545e:	4b0c      	ldr	r3, [pc, #48]	; (8015490 <scalbn+0xf8>)
 8015460:	2200      	movs	r2, #0
 8015462:	e7d5      	b.n	8015410 <scalbn+0x78>
 8015464:	f3af 8000 	nop.w
 8015468:	c2f8f359 	.word	0xc2f8f359
 801546c:	01a56e1f 	.word	0x01a56e1f
 8015470:	8800759c 	.word	0x8800759c
 8015474:	7e37e43c 	.word	0x7e37e43c
 8015478:	8800759c 	.word	0x8800759c
 801547c:	fe37e43c 	.word	0xfe37e43c
 8015480:	c2f8f359 	.word	0xc2f8f359
 8015484:	81a56e1f 	.word	0x81a56e1f
 8015488:	43500000 	.word	0x43500000
 801548c:	ffff3cb0 	.word	0xffff3cb0
 8015490:	3c900000 	.word	0x3c900000

08015494 <with_errno>:
 8015494:	b570      	push	{r4, r5, r6, lr}
 8015496:	4604      	mov	r4, r0
 8015498:	460d      	mov	r5, r1
 801549a:	4616      	mov	r6, r2
 801549c:	f7fa ff6a 	bl	8010374 <__errno>
 80154a0:	4629      	mov	r1, r5
 80154a2:	6006      	str	r6, [r0, #0]
 80154a4:	4620      	mov	r0, r4
 80154a6:	bd70      	pop	{r4, r5, r6, pc}

080154a8 <xflow>:
 80154a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154aa:	4614      	mov	r4, r2
 80154ac:	461d      	mov	r5, r3
 80154ae:	b108      	cbz	r0, 80154b4 <xflow+0xc>
 80154b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80154b4:	e9cd 2300 	strd	r2, r3, [sp]
 80154b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154bc:	4620      	mov	r0, r4
 80154be:	4629      	mov	r1, r5
 80154c0:	f7eb f8c2 	bl	8000648 <__aeabi_dmul>
 80154c4:	2222      	movs	r2, #34	; 0x22
 80154c6:	b003      	add	sp, #12
 80154c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154cc:	f7ff bfe2 	b.w	8015494 <with_errno>

080154d0 <__math_uflow>:
 80154d0:	b508      	push	{r3, lr}
 80154d2:	2200      	movs	r2, #0
 80154d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80154d8:	f7ff ffe6 	bl	80154a8 <xflow>
 80154dc:	ec41 0b10 	vmov	d0, r0, r1
 80154e0:	bd08      	pop	{r3, pc}

080154e2 <__math_oflow>:
 80154e2:	b508      	push	{r3, lr}
 80154e4:	2200      	movs	r2, #0
 80154e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80154ea:	f7ff ffdd 	bl	80154a8 <xflow>
 80154ee:	ec41 0b10 	vmov	d0, r0, r1
 80154f2:	bd08      	pop	{r3, pc}

080154f4 <_init>:
 80154f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f6:	bf00      	nop
 80154f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154fa:	bc08      	pop	{r3}
 80154fc:	469e      	mov	lr, r3
 80154fe:	4770      	bx	lr

08015500 <_fini>:
 8015500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015502:	bf00      	nop
 8015504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015506:	bc08      	pop	{r3}
 8015508:	469e      	mov	lr, r3
 801550a:	4770      	bx	lr
