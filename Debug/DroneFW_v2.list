
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08018030  08018030  00028030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a30  08018a30  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018a30  08018a30  00028a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a38  08018a38  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a38  08018a38  00028a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a3c  08018a3c  00028a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018a40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e5c  200001f0  08018c30  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000904c  08018c30  0003904c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a5ad  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e3e  00000000  00000000  0005a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  00060650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001711  00000000  00000000  00062440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab79  00000000  00000000  00063b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bdc2  00000000  00000000  0008e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee22e  00000000  00000000  000ba48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095d4  00000000  00000000  001a86bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b1c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018014 	.word	0x08018014

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08018014 	.word	0x08018014

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Update>:
	// Reset lastTick
	pid->lastTick = 0;
}

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010ec:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 80010f6:	f00f fcd1 	bl	8010a9c <xTaskGetTickCount>
 80010fa:	4603      	mov	r3, r0
 80010fc:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <PIDController_Update+0x34>
	{
		run = true;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a3a      	ldr	r2, [r7, #32]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	e01a      	b.n	800114a <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80012d4 <PIDController_Update+0x1f4>
 800112e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	db03      	blt.n	8001144 <PIDController_Update+0x64>
		run = true;
 800113c:	2301      	movs	r3, #1
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001142:	e002      	b.n	800114a <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a3a      	ldr	r2, [r7, #32]
 800114e:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 8001150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80b7 	beq.w	80012c8 <PIDController_Update+0x1e8>
	{
		//Error signal
		float error = reference - measurement;
 800115a:	ed97 7a02 	vldr	s14, [r7, #8]
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001166:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional_result = pid->Kp * error;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ed97 7a07 	vldr	s14, [r7, #28]
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d019      	beq.n	80011c0 <PIDController_Update+0xe0>
		{
			pid->integrator = pid->integrator + error * pid->T;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	edd3 6a03 	vldr	s13, [r3, #12]
 8001198:	edd7 7a07 	vldr	s15, [r7, #28]
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->integrator_result = pid->Ki * pid->integrator;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->differentiator = -(measurement - pid->prev_measurement) / pid->T;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ce:	eef1 6a67 	vneg.f32	s13, s15
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80011d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->differentiator_result = pid->Kd * pid->differentiator;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->prev_measurement = measurement;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
		// Store previous measurement for later use
		//pid->prev_measurement = measurement;


		// Compute output
		pid->out = proportional_result + pid->integrator_result + pid->differentiator_result;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001204:	edd7 7a06 	vldr	s15, [r7, #24]
 8001208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float pre_saturation_output = pid->out;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edd3 7a08 	vldr	s15, [r3, #32]
 800122e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dd04      	ble.n	8001242 <PIDController_Update+0x162>
			pid->out = pid->limMax;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
 8001240:	e00e      	b.n	8001260 <PIDController_Update+0x180>
		else if (pid->out < pid->limMin)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d503      	bpl.n	8001260 <PIDController_Update+0x180>
			pid->out = pid->limMin;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (pre_saturation_output != pid->out
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001266:	ed97 7a05 	vldr	s14, [r7, #20]
 800126a:	eeb4 7a67 	vcmp.f32	s14, s15
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d020      	beq.n	80012b6 <PIDController_Update+0x1d6>
				// ...and if the integrator is trying to make saturation worse
				&& ((pre_saturation_output > 0 && error > 0) || (pre_saturation_output < 0 && error < 0)))
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	dd06      	ble.n	8001290 <PIDController_Update+0x1b0>
 8001282:	edd7 7a07 	vldr	s15, [r7, #28]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dc0d      	bgt.n	80012ac <PIDController_Update+0x1cc>
 8001290:	edd7 7a05 	vldr	s15, [r7, #20]
 8001294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	d50b      	bpl.n	80012b6 <PIDController_Update+0x1d6>
 800129e:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d504      	bpl.n	80012b6 <PIDController_Update+0x1d6>
			pid->antiWindup = true;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80012b4:	e003      	b.n	80012be <PIDController_Update+0x1de>
		else
			pid->antiWindup = false;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	e7ff      	b.n	80012c8 <PIDController_Update+0x1e8>
	}
}
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	447a0000 	.word	0x447a0000

080012d8 <DoublePIDController_Init>:

void DoublePIDController_Init(DoublePIDController *pid)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->outer.antiWindup = false;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pid->inner.antiWindup = false;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->outer.integrator = 0.0f;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	66da      	str	r2, [r3, #108]	; 0x6c
	pid->inner.integrator = 0.0f;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
	pid->outer.differentiator  = 0.0f;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	679a      	str	r2, [r3, #120]	; 0x78
	pid->inner.differentiator  = 0.0f;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34

	pid->outer.prev_measurement = 0.0f;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->inner.prev_measurement = 0.0f;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->outer.out = 0.0f;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pid->inner.out = 0.0f;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
	// Calculate low-pass filter parameters
	//pid->tau = 5 * pid->T;
	//pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );

	// Reset lastTick
	pid->outer.lastTick = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
	pid->inner.lastTick = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <DoublePIDController_Update>:

float DoublePIDController_Update(DoublePIDController *pid, float outer_reference, float outer_measurement, float inner_measurement)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	ed87 0a02 	vstr	s0, [r7, #8]
 8001358:	edc7 0a01 	vstr	s1, [r7, #4]
 800135c:	ed87 1a00 	vstr	s2, [r7]
	// Check if enough time has passed for the T sample time
	// I use the outer PID's properties for that
	bool run = false;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentTick = xTaskGetTickCount();
 8001366:	f00f fb99 	bl	8010a9c <xTaskGetTickCount>
 800136a:	4603      	mov	r3, r0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
	// First run after initialization
	if (pid->outer.lastTick == 0)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <DoublePIDController_Update+0x38>
	{
		run = true;
 8001376:	2301      	movs	r3, #1
 8001378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pid->outer.lastTick = currentTick;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
 8001382:	e01a      	b.n	80013ba <DoublePIDController_Update+0x6e>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->outer.lastTick >= (pid->outer.T * 1000))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800139a:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001694 <DoublePIDController_Update+0x348>
 800139e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	db03      	blt.n	80013b4 <DoublePIDController_Update+0x68>
		run = true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013b2:	e002      	b.n	80013ba <DoublePIDController_Update+0x6e>
	// If it is too early
	else
		run = false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	pid->outer.lastTick = currentTick;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013be:	655a      	str	r2, [r3, #84]	; 0x54

	// PID algorithm
	if (run)
 80013c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8160 	beq.w	800168a <DoublePIDController_Update+0x33e>
	{
		// Outer PID Controller
		//Error signal
		float outer_error = outer_reference - outer_measurement;
 80013ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Proportional
		float outer_proportional_result = pid->outer.Kp * outer_error;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a08 	vstr	s15, [r7, #32]

		// Integral with Anti-windup
		if (!pid->outer.antiWindup)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d019      	beq.n	8001430 <DoublePIDController_Update+0xe4>
		{
			pid->outer.integrator = pid->outer.integrator + outer_error * pid->outer.T;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001408:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800140c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			pid->outer.integrator_result = pid->outer.Ki * pid->outer.integrator;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		}

		// Derivative
		pid->outer.differentiator = -inner_measurement;
 8001430:	edd7 7a00 	vldr	s15, [r7]
 8001434:	eef1 7a67 	vneg.f32	s15, s15
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		// Derivative with low-pass filter
		//pid->outer.differentiator = 0.4f * pid->outer.differentiator + 0.6f * (-inner_measurement);
		//pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;

		// Compute output
		pid->outer.out = outer_proportional_result + pid->outer.integrator_result + pid->outer.differentiator_result;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800145a:	edd7 7a08 	vldr	s15, [r7, #32]
 800145e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		float outer_pre_saturation_output = pid->outer.out;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001478:	61fb      	str	r3, [r7, #28]

		// Saturating (clamping) the output
		if (pid->outer.out > pid->outer.limMax)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd05      	ble.n	800149c <DoublePIDController_Update+0x150>
			pid->outer.out = pid->outer.limMax;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800149a:	e00f      	b.n	80014bc <DoublePIDController_Update+0x170>
		else if (pid->outer.out < pid->outer.limMin)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80014a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d504      	bpl.n	80014bc <DoublePIDController_Update+0x170>
			pid->outer.out = pid->outer.limMin;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Anti-windup check
		// If clamping had an effect...
		if (outer_pre_saturation_output != pid->outer.out
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80014c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d020      	beq.n	8001512 <DoublePIDController_Update+0x1c6>
				// ...and if the integrator is trying to make saturation worse
				&& ((outer_pre_saturation_output > 0 && outer_error > 0) || (outer_pre_saturation_output < 0 && outer_error < 0)))
 80014d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dd06      	ble.n	80014ec <DoublePIDController_Update+0x1a0>
 80014de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	dc0d      	bgt.n	8001508 <DoublePIDController_Update+0x1bc>
 80014ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d50b      	bpl.n	8001512 <DoublePIDController_Update+0x1c6>
 80014fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	d504      	bpl.n	8001512 <DoublePIDController_Update+0x1c6>
			pid->outer.antiWindup = true;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001510:	e003      	b.n	800151a <DoublePIDController_Update+0x1ce>
		else
			pid->outer.antiWindup = false;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



		// Inner PID Controller
		//Error signal
		float inner_error = pid->outer.out - inner_measurement;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001520:	edd7 7a00 	vldr	s15, [r7]
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	edc7 7a06 	vstr	s15, [r7, #24]

		// Proportional
		float inner_proportional_result = pid->inner.Kp * inner_error;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a06 	vldr	s14, [r7, #24]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a05 	vstr	s15, [r7, #20]

		// Integral with Anti-windup
		if (!pid->inner.antiWindup)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <DoublePIDController_Update+0x236>
		{
			pid->inner.integrator = pid->inner.integrator + inner_error * pid->inner.T;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	edd3 6a03 	vldr	s13, [r3, #12]
 800155a:	edd7 7a06 	vldr	s15, [r7, #24]
 800155e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->inner.integrator_result = pid->inner.Ki * pid->inner.integrator;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->inner.differentiator =-(inner_measurement - pid->inner.prev_measurement) / pid->inner.T;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001588:	ed97 7a00 	vldr	s14, [r7]
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	eef1 6a67 	vneg.f32	s13, s15
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7a03 	vldr	s14, [r3, #12]
 800159a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->inner.prev_measurement = inner_measurement;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
		//pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
		// Store previous measurement for later use
		//pid->inner.prev_measurement = inner_measurement;

		// Compute output
		pid->inner.out = inner_proportional_result + pid->inner.integrator_result + pid->inner.differentiator_result;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float inner_pre_saturation_output = pid->inner.out;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	613b      	str	r3, [r7, #16]

		// Saturating (clamping) the output
		if (pid->inner.out > pid->inner.limMax)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd04      	ble.n	8001604 <DoublePIDController_Update+0x2b8>
			pid->inner.out = pid->inner.limMax;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
 8001602:	e00e      	b.n	8001622 <DoublePIDController_Update+0x2d6>
		else if (pid->inner.out < pid->inner.limMin)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d503      	bpl.n	8001622 <DoublePIDController_Update+0x2d6>
			pid->inner.out = pid->inner.limMin;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (inner_pre_saturation_output != pid->inner.out
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001628:	ed97 7a04 	vldr	s14, [r7, #16]
 800162c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d020      	beq.n	8001678 <DoublePIDController_Update+0x32c>
				// ...and if the integrator is trying to make saturation worse
				&& ((inner_pre_saturation_output > 0 && inner_error > 0) || (inner_pre_saturation_output < 0 && inner_error < 0)))
 8001636:	edd7 7a04 	vldr	s15, [r7, #16]
 800163a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	dd06      	ble.n	8001652 <DoublePIDController_Update+0x306>
 8001644:	edd7 7a06 	vldr	s15, [r7, #24]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	dc0d      	bgt.n	800166e <DoublePIDController_Update+0x322>
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d50b      	bpl.n	8001678 <DoublePIDController_Update+0x32c>
 8001660:	edd7 7a06 	vldr	s15, [r7, #24]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	d504      	bpl.n	8001678 <DoublePIDController_Update+0x32c>
			pid->inner.antiWindup = true;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001676:	e003      	b.n	8001680 <DoublePIDController_Update+0x334>
		else
			pid->inner.antiWindup = false;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	e7ff      	b.n	800168a <DoublePIDController_Update+0x33e>
	}
}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	447a0000 	.word	0x447a0000

08001698 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09c      	sub	sp, #112	; 0x70
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <Log+0x44>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d014      	beq.n	80016d2 <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	490c      	ldr	r1, [pc, #48]	; (80016e0 <Log+0x48>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f011 faa3 	bl	8012bfc <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe00 	bl	80002c0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 010c 	add.w	r1, r7, #12
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <Log+0x4c>)
 80016ce:	f00c f919 	bl	800d904 <HAL_UART_Transmit>
	}
}
 80016d2:	bf00      	nop
 80016d4:	3770      	adds	r7, #112	; 0x70
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	08018030 	.word	0x08018030
 80016e4:	20000c34 	.word	0x20000c34

080016e8 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	b292      	uxth	r2, r2
 800174a:	801a      	strh	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	b292      	uxth	r2, r2
 8001770:	801a      	strh	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LPF_Init>:
#include "LPF.h"

void LPF_Init(LPF *lpf)
{
 800177e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	lpf->prevU = 0.0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	lpf->prevY = 0.0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	605a      	str	r2, [r3, #4]

	lpf->tau = 1.0 / lpf->f_cutoff;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	ed93 7a03 	vldr	s14, [r3, #12]
 800179e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edc3 7a04 	vstr	s15, [r3, #16]

	lpf->alpha = lpf->T / (2.0 * lpf->tau + lpf->T);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fef1 	bl	8000598 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feea 	bl	8000598 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	f7fe fd88 	bl	80002dc <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4690      	mov	r8, r2
 80017d2:	4699      	mov	r9, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fedd 	bl	8000598 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe fd79 	bl	80002dc <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7ff f853 	bl	800089c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fa1b 	bl	8000c38 <__aeabi_d2f>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	615a      	str	r2, [r3, #20]
	lpf->beta = (2.0 * lpf->tau - lpf->T) / (2.0 * lpf->tau + lpf->T);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fec3 	bl	8000598 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	f7fe fd61 	bl	80002dc <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe feb6 	bl	8000598 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fd50 	bl	80002d8 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fea7 	bl	8000598 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	f7fe fd45 	bl	80002dc <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4690      	mov	r8, r2
 8001858:	4699      	mov	r9, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe9a 	bl	8000598 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4640      	mov	r0, r8
 800186a:	4649      	mov	r1, r9
 800186c:	f7fe fd36 	bl	80002dc <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7ff f810 	bl	800089c <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f9d8 	bl	8000c38 <__aeabi_d2f>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001898 <LPF_Calculate>:

float LPF_Calculate(LPF *lpf, float U)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
	float Y = lpf->alpha * (U + lpf->prevU) + lpf->beta * lpf->prevY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edd3 6a00 	vldr	s13, [r3]
 80018b0:	edd7 7a00 	vldr	s15, [r7]
 80018b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 6a06 	vldr	s13, [r3, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	edc7 7a03 	vstr	s15, [r7, #12]

	lpf->prevU = U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	601a      	str	r2, [r3, #0]
	lpf->prevY = Y;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]

	return Y;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	ee07 3a90 	vmov	s15, r3
}
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 80018fc:	23c8      	movs	r3, #200	; 0xc8
 80018fe:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	613b      	str	r3, [r7, #16]
//	PID_Pitch_AngVel.limMax = 500; // Motor control unit
//	PIDController_Init(&PID_Pitch_AngVel);

	// Roll
	// Outer
	DPID_Roll.outer.Kp = 10;
 800190c:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <TaskController+0x224>)
 800190e:	4a83      	ldr	r2, [pc, #524]	; (8001b1c <TaskController+0x228>)
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Roll.outer.Ki = 0;
 8001912:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <TaskController+0x224>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Roll.outer.Kd = 0.5;
 800191a:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <TaskController+0x224>)
 800191c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Roll.outer.T = 0.005;
 8001922:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <TaskController+0x224>)
 8001924:	4a7e      	ldr	r2, [pc, #504]	; (8001b20 <TaskController+0x22c>)
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
	DPID_Roll.outer.limMin = -50;
 8001928:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <TaskController+0x224>)
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <TaskController+0x230>)
 800192c:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Roll.outer.limMax = 50;
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <TaskController+0x224>)
 8001930:	4a7d      	ldr	r2, [pc, #500]	; (8001b28 <TaskController+0x234>)
 8001932:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Roll.inner.Kp = 1.5;
 8001934:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <TaskController+0x224>)
 8001936:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800193a:	601a      	str	r2, [r3, #0]
	DPID_Roll.inner.Ki = 0;
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <TaskController+0x224>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
	DPID_Roll.inner.Kd = 0.05;
 8001944:	4b74      	ldr	r3, [pc, #464]	; (8001b18 <TaskController+0x224>)
 8001946:	4a79      	ldr	r2, [pc, #484]	; (8001b2c <TaskController+0x238>)
 8001948:	609a      	str	r2, [r3, #8]
	DPID_Roll.inner.T = 0.005;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <TaskController+0x224>)
 800194c:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <TaskController+0x22c>)
 800194e:	60da      	str	r2, [r3, #12]
	DPID_Roll.inner.limMin = -500;
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <TaskController+0x224>)
 8001952:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <TaskController+0x23c>)
 8001954:	61da      	str	r2, [r3, #28]
	DPID_Roll.inner.limMax = 500;
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <TaskController+0x224>)
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <TaskController+0x240>)
 800195a:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Roll);
 800195c:	486e      	ldr	r0, [pc, #440]	; (8001b18 <TaskController+0x224>)
 800195e:	f7ff fcbb 	bl	80012d8 <DoublePIDController_Init>

	// Pitch
	// Outer
	DPID_Pitch.outer.Kp = 0;
 8001962:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <TaskController+0x244>)
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Pitch.outer.Ki = 0;
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <TaskController+0x244>)
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Pitch.outer.Kd = 0;
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <TaskController+0x244>)
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Pitch.outer.T = 0.005;
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <TaskController+0x244>)
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <TaskController+0x22c>)
 800197e:	651a      	str	r2, [r3, #80]	; 0x50
	DPID_Pitch.outer.limMin = -50;
 8001980:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <TaskController+0x244>)
 8001982:	4a68      	ldr	r2, [pc, #416]	; (8001b24 <TaskController+0x230>)
 8001984:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Pitch.outer.limMax = 50;
 8001986:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <TaskController+0x244>)
 8001988:	4a67      	ldr	r2, [pc, #412]	; (8001b28 <TaskController+0x234>)
 800198a:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Pitch.inner.Kp = 0;
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <TaskController+0x244>)
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
	DPID_Pitch.inner.Ki = 0;
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <TaskController+0x244>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
	DPID_Pitch.inner.Kd = 0;
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <TaskController+0x244>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	DPID_Pitch.inner.T = 0.005;
 80019a4:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <TaskController+0x244>)
 80019a6:	4a5e      	ldr	r2, [pc, #376]	; (8001b20 <TaskController+0x22c>)
 80019a8:	60da      	str	r2, [r3, #12]
	DPID_Pitch.inner.limMin = -500;
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <TaskController+0x244>)
 80019ac:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <TaskController+0x23c>)
 80019ae:	61da      	str	r2, [r3, #28]
	DPID_Pitch.inner.limMax = 500;
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <TaskController+0x244>)
 80019b2:	4a60      	ldr	r2, [pc, #384]	; (8001b34 <TaskController+0x240>)
 80019b4:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Pitch);
 80019b6:	4860      	ldr	r0, [pc, #384]	; (8001b38 <TaskController+0x244>)
 80019b8:	f7ff fc8e 	bl	80012d8 <DoublePIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 80019bc:	f00f f86e 	bl	8010a9c <xTaskGetTickCount>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00e fe92 	bl	80106f4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80019d0:	f00f f864 	bl	8010a9c <xTaskGetTickCount>
 80019d4:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 80019d6:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <TaskController+0x248>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f04f 31ff 	mov.w	r1, #4294967295
 80019de:	4618      	mov	r0, r3
 80019e0:	f00d fcc4 	bl	800f36c <osMutexWait>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 8130 	bne.w	8001c4c <TaskController+0x358>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 80019ec:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <TaskController+0x24c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00d fcb9 	bl	800f36c <osMutexWait>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 8125 	bne.w	8001c4c <TaskController+0x358>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001a02:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <TaskController+0x250>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d fcae 	bl	800f36c <osMutexWait>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 811a 	bne.w	8001c4c <TaskController+0x358>
		{
			if (SWC > 490)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <TaskController+0x254>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001a20:	d90f      	bls.n	8001a42 <TaskController+0x14e>
//				PID_Roll_Attitude.integrator = 0;
//				PID_Roll_AngVel.integrator = 0;
//				PID_Pitch_Attitude.integrator = 0;
//				PID_Pitch_AngVel.integrator = 0;

				DPID_Roll.outer.integrator = 0.0;
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <TaskController+0x224>)
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Roll.inner.integrator = 0.0;
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <TaskController+0x224>)
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Pitch.outer.integrator = 0.0;
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <TaskController+0x244>)
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Pitch.inner.integrator = 0.0;
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <TaskController+0x244>)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if (Tune_single_true_double_false)
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <TaskController+0x258>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8094 	beq.w	8001b74 <TaskController+0x280>
			{
				DPID_Roll.outer.Kd = VRA / 200.0;
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <TaskController+0x25c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd8f 	bl	8000574 <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <TaskController+0x260>)
 8001a5c:	f7fe ff1e 	bl	800089c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8e6 	bl	8000c38 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <TaskController+0x224>)
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0;
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <TaskController+0x264>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd7c 	bl	8000574 <__aeabi_i2d>
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <TaskController+0x268>)
 8001a82:	f7fe ff0b 	bl	800089c <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8d3 	bl	8000c38 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <TaskController+0x224>)
 8001a96:	6093      	str	r3, [r2, #8]

				// Roll
				PIDController_Update(&DPID_Roll.inner, (Roll_in / 10.0f), GyroData[0]);
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <TaskController+0x26c>)
 8001a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001aaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <TaskController+0x270>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eef0 0a67 	vmov.f32	s1, s15
 8001ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8001abc:	4816      	ldr	r0, [pc, #88]	; (8001b18 <TaskController+0x224>)
 8001abe:	f7ff fb0f 	bl	80010e0 <PIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <TaskController+0x224>)
 8001ac4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001acc:	ee17 3a90 	vmov	r3, s15
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <TaskController+0x274>)
 8001ad4:	801a      	strh	r2, [r3, #0]

				// Pitch
				PIDController_Update(&DPID_Pitch.inner, (Pitch_in / 10.0f), GyroData[1]);
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <TaskController+0x278>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ae8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <TaskController+0x270>)
 8001aee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af2:	eef0 0a67 	vmov.f32	s1, s15
 8001af6:	eeb0 0a47 	vmov.f32	s0, s14
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <TaskController+0x244>)
 8001afc:	f7ff faf0 	bl	80010e0 <PIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <TaskController+0x244>)
 8001b02:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <TaskController+0x27c>)
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	e09a      	b.n	8001c4c <TaskController+0x358>
 8001b16:	bf00      	nop
 8001b18:	20000218 	.word	0x20000218
 8001b1c:	41200000 	.word	0x41200000
 8001b20:	3ba3d70a 	.word	0x3ba3d70a
 8001b24:	c2480000 	.word	0xc2480000
 8001b28:	42480000 	.word	0x42480000
 8001b2c:	3d4ccccd 	.word	0x3d4ccccd
 8001b30:	c3fa0000 	.word	0xc3fa0000
 8001b34:	43fa0000 	.word	0x43fa0000
 8001b38:	200002a0 	.word	0x200002a0
 8001b3c:	20000d50 	.word	0x20000d50
 8001b40:	20000d3c 	.word	0x20000d3c
 8001b44:	20000d40 	.word	0x20000d40
 8001b48:	20000338 	.word	0x20000338
 8001b4c:	2000020d 	.word	0x2000020d
 8001b50:	2000033c 	.word	0x2000033c
 8001b54:	40690000 	.word	0x40690000
 8001b58:	2000033e 	.word	0x2000033e
 8001b5c:	408f4000 	.word	0x408f4000
 8001b60:	2000032a 	.word	0x2000032a
 8001b64:	200003c4 	.word	0x200003c4
 8001b68:	2000032c 	.word	0x2000032c
 8001b6c:	2000032e 	.word	0x2000032e
 8001b70:	20000330 	.word	0x20000330
			}
			else
			{
				DPID_Roll.outer.Kd = VRA / 200.0;
 8001b74:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <TaskController+0x378>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcfb 	bl	8000574 <__aeabi_i2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <TaskController+0x37c>)
 8001b84:	f7fe fe8a 	bl	800089c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f852 	bl	8000c38 <__aeabi_d2f>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a37      	ldr	r2, [pc, #220]	; (8001c74 <TaskController+0x380>)
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <TaskController+0x384>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fce8 	bl	8000574 <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <TaskController+0x388>)
 8001baa:	f7fe fe77 	bl	800089c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f83f 	bl	8000c38 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <TaskController+0x380>)
 8001bbe:	6093      	str	r3, [r2, #8]

				// Roll
				//DoublePIDController_Update(&DPID_Roll, (Roll_in / 25.0f), Roll_measured, GyroData[0]);
				DoublePIDController_Update(&DPID_Roll, (SWD / 70.0f), Roll_measured, GyroData[0]);
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <TaskController+0x38c>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001c84 <TaskController+0x390>
 8001bd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <TaskController+0x394>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <TaskController+0x398>)
 8001bdc:	edd3 6a00 	vldr	s13, [r3]
 8001be0:	eeb0 1a66 	vmov.f32	s2, s13
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bec:	4821      	ldr	r0, [pc, #132]	; (8001c74 <TaskController+0x380>)
 8001bee:	f7ff fbad 	bl	800134c <DoublePIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <TaskController+0x380>)
 8001bf4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <TaskController+0x39c>)
 8001c04:	801a      	strh	r2, [r3, #0]

				// Pitch
				//DoublePIDController_Update(&DPID_Pitch, (Pitch_in / 25.0f), Pitch_measured, GyroData[1]);
				DoublePIDController_Update(&DPID_Pitch, (SWD / 50.0f), Pitch_measured, GyroData[1]);
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <TaskController+0x38c>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c94 <TaskController+0x3a0>
 8001c16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <TaskController+0x3a4>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <TaskController+0x398>)
 8001c22:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c26:	eeb0 1a66 	vmov.f32	s2, s13
 8001c2a:	eef0 0a67 	vmov.f32	s1, s15
 8001c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c32:	481a      	ldr	r0, [pc, #104]	; (8001c9c <TaskController+0x3a8>)
 8001c34:	f7ff fb8a 	bl	800134c <DoublePIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <TaskController+0x3a8>)
 8001c3a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <TaskController+0x3ac>)
 8001c4a:	801a      	strh	r2, [r3, #0]
//			//sprintf(str, "%1.2f\r\n", PID_Roll_AngVel.out);
//			//sprintf(str, "%d\r\n", Roll_controlled);
//			sprintf(str, "%1.2f, %d\r\n", PID_Roll_AngVel.out, Roll_controlled);
//			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
		osMutexRelease(ControllerMutexHandle);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <TaskController+0x3b0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00d fbd9 	bl	800f408 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <TaskController+0x3b4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00d fbd4 	bl	800f408 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <TaskController+0x3b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00d fbcf 	bl	800f408 <osMutexRelease>
	{
 8001c6a:	e6ab      	b.n	80019c4 <TaskController+0xd0>
 8001c6c:	2000033c 	.word	0x2000033c
 8001c70:	40690000 	.word	0x40690000
 8001c74:	20000218 	.word	0x20000218
 8001c78:	2000033e 	.word	0x2000033e
 8001c7c:	408f4000 	.word	0x408f4000
 8001c80:	2000033a 	.word	0x2000033a
 8001c84:	428c0000 	.word	0x428c0000
 8001c88:	200003d0 	.word	0x200003d0
 8001c8c:	200003c4 	.word	0x200003c4
 8001c90:	2000032c 	.word	0x2000032c
 8001c94:	42480000 	.word	0x42480000
 8001c98:	200003d4 	.word	0x200003d4
 8001c9c:	200002a0 	.word	0x200002a0
 8001ca0:	20000330 	.word	0x20000330
 8001ca4:	20000d50 	.word	0x20000d50
 8001ca8:	20000d3c 	.word	0x20000d3c
 8001cac:	20000d40 	.word	0x20000d40

08001cb0 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001cb8:	af14      	add	r7, sp, #80	; 0x50
 8001cba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cbe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001cc2:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001cda:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cde:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ce2:	2269      	movs	r2, #105	; 0x69
 8001ce4:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001ce6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001cee:	2266      	movs	r2, #102	; 0x66
 8001cf0:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 8001cf2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001cf6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001cfa:	2267      	movs	r2, #103	; 0x67
 8001cfc:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001cfe:	f00e fecd 	bl	8010a9c <xTaskGetTickCount>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001d08:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001d0c:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00e fcef 	bl	80106f4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001d16:	f00e fec1 	bl	8010a9c <xTaskGetTickCount>
 8001d1a:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001d1e:	4bc3      	ldr	r3, [pc, #780]	; (800202c <TaskDiagnostics+0x37c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f04f 31ff 	mov.w	r1, #4294967295
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00d fb20 	bl	800f36c <osMutexWait>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 811d 	bne.w	8001f6e <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 8001d34:	4bbe      	ldr	r3, [pc, #760]	; (8002030 <TaskDiagnostics+0x380>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d44:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001d48:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 8001d4a:	4bb9      	ldr	r3, [pc, #740]	; (8002030 <TaskDiagnostics+0x380>)
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d5a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001d5e:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001d60:	4bb3      	ldr	r3, [pc, #716]	; (8002030 <TaskDiagnostics+0x380>)
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d70:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001d74:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 8001d76:	4bae      	ldr	r3, [pc, #696]	; (8002030 <TaskDiagnostics+0x380>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d86:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001d8a:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001d8c:	4ba9      	ldr	r3, [pc, #676]	; (8002034 <TaskDiagnostics+0x384>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	461c      	mov	r4, r3
 8001d92:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001d96:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001da2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001dae:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001dba:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	9101      	str	r1, [sp, #4]
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	462b      	mov	r3, r5
 8001dcc:	4622      	mov	r2, r4
 8001dce:	499a      	ldr	r1, [pc, #616]	; (8002038 <TaskDiagnostics+0x388>)
 8001dd0:	f003 fe04 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 8001dd4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4895      	ldr	r0, [pc, #596]	; (8002034 <TaskDiagnostics+0x384>)
 8001dde:	f7ff fca8 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 8001de2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001de6:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001dea:	2203      	movs	r2, #3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fca0 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 8001df2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fc98 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 8001e02:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e06:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fc90 	bl	8001732 <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 8001e12:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1a:	2209      	movs	r2, #9
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fc88 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8001e22:	4b86      	ldr	r3, [pc, #536]	; (800203c <TaskDiagnostics+0x38c>)
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e30:	4983      	ldr	r1, [pc, #524]	; (8002040 <TaskDiagnostics+0x390>)
 8001e32:	f003 fdd3 	bl	80059dc <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 8001e36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e3a:	220b      	movs	r2, #11
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	487f      	ldr	r0, [pc, #508]	; (800203c <TaskDiagnostics+0x38c>)
 8001e40:	f7ff fc8a 	bl	8001758 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <TaskDiagnostics+0x394>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	4a7f      	ldr	r2, [pc, #508]	; (8002048 <TaskDiagnostics+0x398>)
 8001e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e50:	1092      	asrs	r2, r2, #2
 8001e52:	17db      	asrs	r3, r3, #31
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e5c:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001e60:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8001e62:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e66:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e76:	4975      	ldr	r1, [pc, #468]	; (800204c <TaskDiagnostics+0x39c>)
 8001e78:	f003 fdb0 	bl	80059dc <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 8001e7c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e80:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001e84:	220d      	movs	r2, #13
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fc66 	bl	8001758 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <TaskDiagnostics+0x3a0>)
 8001e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e92:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e9a:	496e      	ldr	r1, [pc, #440]	; (8002054 <TaskDiagnostics+0x3a4>)
 8001e9c:	f003 fd9e 	bl	80059dc <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 8001ea0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4869      	ldr	r0, [pc, #420]	; (8002050 <TaskDiagnostics+0x3a0>)
 8001eaa:	f7ff fc55 	bl	8001758 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <TaskDiagnostics+0x3a8>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001eb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001eba:	4968      	ldr	r1, [pc, #416]	; (800205c <TaskDiagnostics+0x3ac>)
 8001ebc:	f003 fd8e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8001ec0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ec4:	2211      	movs	r2, #17
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4863      	ldr	r0, [pc, #396]	; (8002058 <TaskDiagnostics+0x3a8>)
 8001eca:	f7ff fc32 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001ece:	4b64      	ldr	r3, [pc, #400]	; (8002060 <TaskDiagnostics+0x3b0>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ed6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001eda:	4962      	ldr	r1, [pc, #392]	; (8002064 <TaskDiagnostics+0x3b4>)
 8001edc:	f003 fd7e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8001ee0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ee4:	2213      	movs	r2, #19
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	485d      	ldr	r0, [pc, #372]	; (8002060 <TaskDiagnostics+0x3b0>)
 8001eea:	f7ff fc22 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <TaskDiagnostics+0x3b8>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001ef6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001efa:	495c      	ldr	r1, [pc, #368]	; (800206c <TaskDiagnostics+0x3bc>)
 8001efc:	f003 fd6e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8001f00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f04:	2215      	movs	r2, #21
 8001f06:	4619      	mov	r1, r3
 8001f08:	4857      	ldr	r0, [pc, #348]	; (8002068 <TaskDiagnostics+0x3b8>)
 8001f0a:	f7ff fc12 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <TaskDiagnostics+0x3c0>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f1a:	4956      	ldr	r1, [pc, #344]	; (8002074 <TaskDiagnostics+0x3c4>)
 8001f1c:	f003 fd5e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8001f20:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f24:	2217      	movs	r2, #23
 8001f26:	4619      	mov	r1, r3
 8001f28:	4851      	ldr	r0, [pc, #324]	; (8002070 <TaskDiagnostics+0x3c0>)
 8001f2a:	f7ff fc02 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001f2e:	4b52      	ldr	r3, [pc, #328]	; (8002078 <TaskDiagnostics+0x3c8>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f3a:	4950      	ldr	r1, [pc, #320]	; (800207c <TaskDiagnostics+0x3cc>)
 8001f3c:	f003 fd4e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 8001f40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f44:	2219      	movs	r2, #25
 8001f46:	4619      	mov	r1, r3
 8001f48:	484b      	ldr	r0, [pc, #300]	; (8002078 <TaskDiagnostics+0x3c8>)
 8001f4a:	f7ff fbf2 	bl	8001732 <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <TaskDiagnostics+0x3d0>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001f56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f5a:	494a      	ldr	r1, [pc, #296]	; (8002084 <TaskDiagnostics+0x3d4>)
 8001f5c:	f003 fd3e 	bl	80059dc <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 8001f60:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f64:	221b      	movs	r2, #27
 8001f66:	4619      	mov	r1, r3
 8001f68:	4845      	ldr	r0, [pc, #276]	; (8002080 <TaskDiagnostics+0x3d0>)
 8001f6a:	f7ff fbe2 	bl	8001732 <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <TaskDiagnostics+0x37c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00d fa48 	bl	800f408 <osMutexRelease>

		if (IsImuAvailable)
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <TaskDiagnostics+0x3d8>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8127 	beq.w	80021d0 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <TaskDiagnostics+0x3dc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00d f9ee 	bl	800f36c <osMutexWait>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8117 	bne.w	80021c6 <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <TaskDiagnostics+0x3e0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fafb 	bl	8000598 <__aeabi_f2d>
 8001fa2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faf4 	bl	8000598 <__aeabi_f2d>
 8001fb0:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe faed 	bl	8000598 <__aeabi_f2d>
 8001fbe:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <TaskDiagnostics+0x3e4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fae6 	bl	8000598 <__aeabi_f2d>
 8001fcc:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fadf 	bl	8000598 <__aeabi_f2d>
 8001fda:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fad8 	bl	8000598 <__aeabi_f2d>
 8001fe8:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <TaskDiagnostics+0x3e8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fad1 	bl	8000598 <__aeabi_f2d>
 8001ff6:	4682      	mov	sl, r0
 8001ff8:	468b      	mov	fp, r1
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <TaskDiagnostics+0x3ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe faca 	bl	8000598 <__aeabi_f2d>
 8002004:	4680      	mov	r8, r0
 8002006:	4689      	mov	r9, r1
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <TaskDiagnostics+0x3f0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fac3 	bl	8000598 <__aeabi_f2d>
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <TaskDiagnostics+0x3f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fabc 	bl	8000598 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002028:	e03e      	b.n	80020a8 <TaskDiagnostics+0x3f8>
 800202a:	bf00      	nop
 800202c:	20000d3c 	.word	0x20000d3c
 8002030:	40010000 	.word	0x40010000
 8002034:	20000328 	.word	0x20000328
 8002038:	08018040 	.word	0x08018040
 800203c:	2000032e 	.word	0x2000032e
 8002040:	08018060 	.word	0x08018060
 8002044:	2000032a 	.word	0x2000032a
 8002048:	66666667 	.word	0x66666667
 800204c:	08018070 	.word	0x08018070
 8002050:	20000332 	.word	0x20000332
 8002054:	08018080 	.word	0x08018080
 8002058:	20000334 	.word	0x20000334
 800205c:	0801808c 	.word	0x0801808c
 8002060:	20000336 	.word	0x20000336
 8002064:	08018098 	.word	0x08018098
 8002068:	20000338 	.word	0x20000338
 800206c:	080180a4 	.word	0x080180a4
 8002070:	2000033a 	.word	0x2000033a
 8002074:	080180b0 	.word	0x080180b0
 8002078:	2000033c 	.word	0x2000033c
 800207c:	080180bc 	.word	0x080180bc
 8002080:	2000033e 	.word	0x2000033e
 8002084:	080180c8 	.word	0x080180c8
 8002088:	20000214 	.word	0x20000214
 800208c:	20000d40 	.word	0x20000d40
 8002090:	200003c0 	.word	0x200003c0
 8002094:	200003b4 	.word	0x200003b4
 8002098:	200003c4 	.word	0x200003c4
 800209c:	200003d0 	.word	0x200003d0
 80020a0:	200003d4 	.word	0x200003d4
 80020a4:	200003d8 	.word	0x200003d8
 80020a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80020b0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80020b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80020b8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80020bc:	ed97 7b00 	vldr	d7, [r7]
 80020c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80020c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80020c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80020cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80020d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80020d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80020d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020dc:	ed97 7b08 	vldr	d7, [r7, #32]
 80020e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80020e4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020e8:	ed8d 7b00 	vstr	d7, [sp]
 80020ec:	460a      	mov	r2, r1
 80020ee:	496b      	ldr	r1, [pc, #428]	; (800229c <TaskDiagnostics+0x5ec>)
 80020f0:	f003 fc74 	bl	80059dc <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 80020f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020f8:	2201      	movs	r2, #1
 80020fa:	4619      	mov	r1, r3
 80020fc:	4868      	ldr	r0, [pc, #416]	; (80022a0 <TaskDiagnostics+0x5f0>)
 80020fe:	f7ff faf3 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8002102:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002106:	2205      	movs	r2, #5
 8002108:	4619      	mov	r1, r3
 800210a:	4866      	ldr	r0, [pc, #408]	; (80022a4 <TaskDiagnostics+0x5f4>)
 800210c:	f7ff faec 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8002110:	4865      	ldr	r0, [pc, #404]	; (80022a8 <TaskDiagnostics+0x5f8>)
 8002112:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002116:	2209      	movs	r2, #9
 8002118:	4619      	mov	r1, r3
 800211a:	f7ff fae5 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 800211e:	4863      	ldr	r0, [pc, #396]	; (80022ac <TaskDiagnostics+0x5fc>)
 8002120:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002124:	220d      	movs	r2, #13
 8002126:	4619      	mov	r1, r3
 8002128:	f7ff fade 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 800212c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002130:	2211      	movs	r2, #17
 8002132:	4619      	mov	r1, r3
 8002134:	485e      	ldr	r0, [pc, #376]	; (80022b0 <TaskDiagnostics+0x600>)
 8002136:	f7ff fad7 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 800213a:	485e      	ldr	r0, [pc, #376]	; (80022b4 <TaskDiagnostics+0x604>)
 800213c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002140:	2215      	movs	r2, #21
 8002142:	4619      	mov	r1, r3
 8002144:	f7ff fad0 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 8002148:	485b      	ldr	r0, [pc, #364]	; (80022b8 <TaskDiagnostics+0x608>)
 800214a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800214e:	2219      	movs	r2, #25
 8002150:	4619      	mov	r1, r3
 8002152:	f7ff fac9 	bl	80016e8 <FloatToUint8s>

				sprintf(UARTstr,
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <TaskDiagnostics+0x60c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa1c 	bl	8000598 <__aeabi_f2d>
 8002160:	4604      	mov	r4, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <TaskDiagnostics+0x610>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fa15 	bl	8000598 <__aeabi_f2d>
 800216e:	4680      	mov	r8, r0
 8002170:	4689      	mov	r9, r1
 8002172:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <TaskDiagnostics+0x614>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fa0e 	bl	8000598 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002184:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800218c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002190:	e9cd 4500 	strd	r4, r5, [sp]
 8002194:	460a      	mov	r2, r1
 8002196:	494c      	ldr	r1, [pc, #304]	; (80022c8 <TaskDiagnostics+0x618>)
 8002198:	f003 fc20 	bl	80059dc <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 800219c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021a0:	221d      	movs	r2, #29
 80021a2:	4619      	mov	r1, r3
 80021a4:	4845      	ldr	r0, [pc, #276]	; (80022bc <TaskDiagnostics+0x60c>)
 80021a6:	f7ff fa9f 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 80021aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	4619      	mov	r1, r3
 80021b2:	4843      	ldr	r0, [pc, #268]	; (80022c0 <TaskDiagnostics+0x610>)
 80021b4:	f7ff fa98 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 80021b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021bc:	2225      	movs	r2, #37	; 0x25
 80021be:	4619      	mov	r1, r3
 80021c0:	4840      	ldr	r0, [pc, #256]	; (80022c4 <TaskDiagnostics+0x614>)
 80021c2:	f7ff fa91 	bl	80016e8 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <TaskDiagnostics+0x61c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00d f91c 	bl	800f408 <osMutexRelease>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <TaskDiagnostics+0x620>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d026      	beq.n	8002226 <TaskDiagnostics+0x576>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <TaskDiagnostics+0x624>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00d f8c3 	bl	800f36c <osMutexWait>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d117      	bne.n	800221c <TaskDiagnostics+0x56c>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <TaskDiagnostics+0x628>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002202:	e9cd 2300 	strd	r2, r3, [sp]
 8002206:	460a      	mov	r2, r1
 8002208:	4934      	ldr	r1, [pc, #208]	; (80022dc <TaskDiagnostics+0x62c>)
 800220a:	f003 fbe7 	bl	80059dc <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 800220e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002212:	2239      	movs	r2, #57	; 0x39
 8002214:	4619      	mov	r1, r3
 8002216:	4830      	ldr	r0, [pc, #192]	; (80022d8 <TaskDiagnostics+0x628>)
 8002218:	f7ff fa66 	bl	80016e8 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <TaskDiagnostics+0x624>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f00d f8f1 	bl	800f408 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8002226:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800222a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800222e:	492c      	ldr	r1, [pc, #176]	; (80022e0 <TaskDiagnostics+0x630>)
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fbd3 	bl	80059dc <sprintf_>

		// Sending log info
		if (Diag)
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <TaskDiagnostics+0x634>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f43f ad64 	beq.w	8001d08 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8002240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f83b 	bl	80002c0 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	b29a      	uxth	r2, r3
 800224e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	4824      	ldr	r0, [pc, #144]	; (80022e8 <TaskDiagnostics+0x638>)
 8002258:	f00b fb54 	bl	800d904 <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 800225c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	4821      	ldr	r0, [pc, #132]	; (80022ec <TaskDiagnostics+0x63c>)
 8002268:	f008 fe67 	bl	800af3a <HAL_SPI_Transmit>
			osDelay(10);
 800226c:	200a      	movs	r0, #10
 800226e:	f00d f850 	bl	800f312 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8002272:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	481b      	ldr	r0, [pc, #108]	; (80022ec <TaskDiagnostics+0x63c>)
 800227e:	f008 fe5c 	bl	800af3a <HAL_SPI_Transmit>
			osDelay(10);
 8002282:	200a      	movs	r0, #10
 8002284:	f00d f845 	bl	800f312 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8002288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4816      	ldr	r0, [pc, #88]	; (80022ec <TaskDiagnostics+0x63c>)
 8002294:	f008 fe51 	bl	800af3a <HAL_SPI_Transmit>
	{
 8002298:	e536      	b.n	8001d08 <TaskDiagnostics+0x58>
 800229a:	bf00      	nop
 800229c:	080180d4 	.word	0x080180d4
 80022a0:	200003c0 	.word	0x200003c0
 80022a4:	200003b4 	.word	0x200003b4
 80022a8:	200003b8 	.word	0x200003b8
 80022ac:	200003bc 	.word	0x200003bc
 80022b0:	200003c4 	.word	0x200003c4
 80022b4:	200003c8 	.word	0x200003c8
 80022b8:	200003cc 	.word	0x200003cc
 80022bc:	2000040c 	.word	0x2000040c
 80022c0:	20000410 	.word	0x20000410
 80022c4:	20000414 	.word	0x20000414
 80022c8:	08018150 	.word	0x08018150
 80022cc:	20000d40 	.word	0x20000d40
 80022d0:	20000216 	.word	0x20000216
 80022d4:	20000d48 	.word	0x20000d48
 80022d8:	20000478 	.word	0x20000478
 80022dc:	08018184 	.word	0x08018184
 80022e0:	0801819c 	.word	0x0801819c
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000c34 	.word	0x20000c34
 80022ec:	200009c4 	.word	0x200009c4

080022f0 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da02      	bge.n	8002304 <ConvertToPwm+0x14>
		raw = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e006      	b.n	8002312 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800230a:	dd02      	ble.n	8002312 <ConvertToPwm+0x22>
		raw = 1000;
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 800232c:	23c8      	movs	r3, #200	; 0xc8
 800232e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800233c:	2100      	movs	r1, #0
 800233e:	4879      	ldr	r0, [pc, #484]	; (8002524 <TaskMotor+0x200>)
 8002340:	f009 fde2 	bl	800bf08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002344:	2104      	movs	r1, #4
 8002346:	4877      	ldr	r0, [pc, #476]	; (8002524 <TaskMotor+0x200>)
 8002348:	f009 fdde 	bl	800bf08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800234c:	2108      	movs	r1, #8
 800234e:	4875      	ldr	r0, [pc, #468]	; (8002524 <TaskMotor+0x200>)
 8002350:	f009 fdda 	bl	800bf08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002354:	210c      	movs	r1, #12
 8002356:	4873      	ldr	r0, [pc, #460]	; (8002524 <TaskMotor+0x200>)
 8002358:	f009 fdd6 	bl	800bf08 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 800235c:	4b72      	ldr	r3, [pc, #456]	; (8002528 <TaskMotor+0x204>)
 800235e:	2232      	movs	r2, #50	; 0x32
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8002362:	4b71      	ldr	r3, [pc, #452]	; (8002528 <TaskMotor+0x204>)
 8002364:	2232      	movs	r2, #50	; 0x32
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <TaskMotor+0x204>)
 800236a:	2232      	movs	r2, #50	; 0x32
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <TaskMotor+0x204>)
 8002370:	2232      	movs	r2, #50	; 0x32
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8002374:	f00e fb92 	bl	8010a9c <xTaskGetTickCount>
 8002378:	4603      	mov	r3, r0
 800237a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	4618      	mov	r0, r3
 8002384:	f00e f9b6 	bl	80106f4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002388:	f00e fb88 	bl	8010a9c <xTaskGetTickCount>
 800238c:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <TaskMotor+0x208>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 31ff 	mov.w	r1, #4294967295
 8002396:	4618      	mov	r0, r3
 8002398:	f00c ffe8 	bl	800f36c <osMutexWait>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80ba 	bne.w	8002518 <TaskMotor+0x1f4>
		{
			// Hardware safety
			if (SWA < 10)
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <TaskMotor+0x20c>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d806      	bhi.n	80023ba <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b2:	4860      	ldr	r0, [pc, #384]	; (8002534 <TaskMotor+0x210>)
 80023b4:	f006 feb6 	bl	8009124 <HAL_GPIO_WritePin>
 80023b8:	e005      	b.n	80023c6 <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c0:	485c      	ldr	r0, [pc, #368]	; (8002534 <TaskMotor+0x210>)
 80023c2:	f006 feaf 	bl	8009124 <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <TaskMotor+0x214>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b09      	cmp	r3, #9
 80023cc:	d803      	bhi.n	80023d6 <TaskMotor+0xb2>
				Rotors = false;
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <TaskMotor+0x218>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e002      	b.n	80023dc <TaskMotor+0xb8>
			else
				Rotors = true;
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <TaskMotor+0x218>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 80023dc:	4b57      	ldr	r3, [pc, #348]	; (800253c <TaskMotor+0x218>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8081 	beq.w	80024e8 <TaskMotor+0x1c4>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 10)
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <TaskMotor+0x21c>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d95b      	bls.n	80024a6 <TaskMotor+0x182>
				{
					if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <TaskMotor+0x220>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 31ff 	mov.w	r1, #4294967295
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00c ffb8 	bl	800f36c <osMutexWait>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d14b      	bne.n	800249a <TaskMotor+0x176>
					{
						ESC1_Speed = Throttle_in + Roll_controlled  - (Pitch_in/5); //- (Yaw_in/5);
 8002402:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <TaskMotor+0x21c>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <TaskMotor+0x224>)
 800240a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240e:	441a      	add	r2, r3
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <TaskMotor+0x228>)
 8002412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002416:	494e      	ldr	r1, [pc, #312]	; (8002550 <TaskMotor+0x22c>)
 8002418:	fb81 0103 	smull	r0, r1, r1, r3
 800241c:	1049      	asrs	r1, r1, #1
 800241e:	17db      	asrs	r3, r3, #31
 8002420:	1acb      	subs	r3, r1, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
						ESC2_Speed = Throttle_in - Roll_controlled - (Pitch_in/5); //+ (Yaw_in/5);
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <TaskMotor+0x21c>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b46      	ldr	r3, [pc, #280]	; (8002548 <TaskMotor+0x224>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <TaskMotor+0x228>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	4944      	ldr	r1, [pc, #272]	; (8002550 <TaskMotor+0x22c>)
 800243e:	fb81 0103 	smull	r0, r1, r1, r3
 8002442:	1049      	asrs	r1, r1, #1
 8002444:	17db      	asrs	r3, r3, #31
 8002446:	1acb      	subs	r3, r1, r3
 8002448:	b21b      	sxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	623b      	str	r3, [r7, #32]
						ESC3_Speed = Throttle_in - Roll_controlled  + (Pitch_in/5); //- (Yaw_in/5);
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <TaskMotor+0x21c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <TaskMotor+0x224>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <TaskMotor+0x228>)
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	493b      	ldr	r1, [pc, #236]	; (8002550 <TaskMotor+0x22c>)
 8002464:	fb81 0103 	smull	r0, r1, r1, r3
 8002468:	1049      	asrs	r1, r1, #1
 800246a:	17db      	asrs	r3, r3, #31
 800246c:	1acb      	subs	r3, r1, r3
 800246e:	b21b      	sxth	r3, r3
 8002470:	4413      	add	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]
						ESC4_Speed = Throttle_in + Roll_controlled  + (Pitch_in/5); // + (Yaw_in/5);
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <TaskMotor+0x21c>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <TaskMotor+0x224>)
 800247c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002480:	441a      	add	r2, r3
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <TaskMotor+0x228>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	4931      	ldr	r1, [pc, #196]	; (8002550 <TaskMotor+0x22c>)
 800248a:	fb81 0103 	smull	r0, r1, r1, r3
 800248e:	1049      	asrs	r1, r1, #1
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1acb      	subs	r3, r1, r3
 8002494:	b21b      	sxth	r3, r3
 8002496:	4413      	add	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
					}
					osMutexRelease(ControllerMutexHandle);
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <TaskMotor+0x220>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f00c ffb2 	bl	800f408 <osMutexRelease>
 80024a4:	e007      	b.n	80024b6 <TaskMotor+0x192>
				}
				else
				{
					ESC1_Speed = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 80024b6:	4c1c      	ldr	r4, [pc, #112]	; (8002528 <TaskMotor+0x204>)
 80024b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ba:	f7ff ff19 	bl	80022f0 <ConvertToPwm>
 80024be:	4603      	mov	r3, r0
 80024c0:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 80024c2:	4c19      	ldr	r4, [pc, #100]	; (8002528 <TaskMotor+0x204>)
 80024c4:	6a38      	ldr	r0, [r7, #32]
 80024c6:	f7ff ff13 	bl	80022f0 <ConvertToPwm>
 80024ca:	4603      	mov	r3, r0
 80024cc:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 80024ce:	4c16      	ldr	r4, [pc, #88]	; (8002528 <TaskMotor+0x204>)
 80024d0:	69f8      	ldr	r0, [r7, #28]
 80024d2:	f7ff ff0d 	bl	80022f0 <ConvertToPwm>
 80024d6:	4603      	mov	r3, r0
 80024d8:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 80024da:	4c13      	ldr	r4, [pc, #76]	; (8002528 <TaskMotor+0x204>)
 80024dc:	69b8      	ldr	r0, [r7, #24]
 80024de:	f7ff ff07 	bl	80022f0 <ConvertToPwm>
 80024e2:	4603      	mov	r3, r0
 80024e4:	6423      	str	r3, [r4, #64]	; 0x40
 80024e6:	e017      	b.n	8002518 <TaskMotor+0x1f4>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 80024e8:	4c0f      	ldr	r4, [pc, #60]	; (8002528 <TaskMotor+0x204>)
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ff00 	bl	80022f0 <ConvertToPwm>
 80024f0:	4603      	mov	r3, r0
 80024f2:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 80024f4:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <TaskMotor+0x204>)
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff fefa 	bl	80022f0 <ConvertToPwm>
 80024fc:	4603      	mov	r3, r0
 80024fe:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 8002500:	4c09      	ldr	r4, [pc, #36]	; (8002528 <TaskMotor+0x204>)
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff fef4 	bl	80022f0 <ConvertToPwm>
 8002508:	4603      	mov	r3, r0
 800250a:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 800250c:	4c06      	ldr	r4, [pc, #24]	; (8002528 <TaskMotor+0x204>)
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff feee 	bl	80022f0 <ConvertToPwm>
 8002514:	4603      	mov	r3, r0
 8002516:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <TaskMotor+0x208>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f00c ff73 	bl	800f408 <osMutexRelease>
	{
 8002522:	e72b      	b.n	800237c <TaskMotor+0x58>
 8002524:	20000a8c 	.word	0x20000a8c
 8002528:	40010000 	.word	0x40010000
 800252c:	20000d3c 	.word	0x20000d3c
 8002530:	20000334 	.word	0x20000334
 8002534:	40021000 	.word	0x40021000
 8002538:	20000336 	.word	0x20000336
 800253c:	20000002 	.word	0x20000002
 8002540:	20000328 	.word	0x20000328
 8002544:	20000d50 	.word	0x20000d50
 8002548:	2000032c 	.word	0x2000032c
 800254c:	2000032e 	.word	0x2000032e
 8002550:	66666667 	.word	0x66666667

08002554 <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 800255c:	2301      	movs	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 800256c:	f00e fa96 	bl	8010a9c <xTaskGetTickCount>
 8002570:	4603      	mov	r3, r0
 8002572:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	6939      	ldr	r1, [r7, #16]
 800257a:	4618      	mov	r0, r3
 800257c:	f00e f8ba 	bl	80106f4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002580:	f00e fa8c 	bl	8010a9c <xTaskGetTickCount>
 8002584:	60f8      	str	r0, [r7, #12]
	{
 8002586:	e7f5      	b.n	8002574 <TaskPower+0x20>

08002588 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8002590:	2332      	movs	r3, #50	; 0x32
 8002592:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	496b      	ldr	r1, [pc, #428]	; (8002750 <TaskRemote+0x1c8>)
 80025a4:	486b      	ldr	r0, [pc, #428]	; (8002754 <TaskRemote+0x1cc>)
 80025a6:	f00b fa74 	bl	800da92 <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 80025aa:	f00e fa77 	bl	8010a9c <xTaskGetTickCount>
 80025ae:	4603      	mov	r3, r0
 80025b0:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00e f89b 	bl	80106f4 <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 80025be:	f00e fa6d 	bl	8010a9c <xTaskGetTickCount>
 80025c2:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 80025c4:	4b64      	ldr	r3, [pc, #400]	; (8002758 <TaskRemote+0x1d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00c ff83 	bl	800f4d8 <osSemaphoreWait>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ec      	bne.n	80025b2 <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <TaskRemote+0x1d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00c fec3 	bl	800f36c <osMutexWait>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12f      	bne.n	800264c <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 80025ec:	2320      	movs	r3, #32
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e024      	b.n	800263c <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <TaskRemote+0x1d8>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d11a      	bne.n	8002636 <TaskRemote+0xae>
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	4a56      	ldr	r2, [pc, #344]	; (8002760 <TaskRemote+0x1d8>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d113      	bne.n	8002636 <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	e00d      	b.n	8002630 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	4413      	add	r3, r2
 800261a:	4a51      	ldr	r2, [pc, #324]	; (8002760 <TaskRemote+0x1d8>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	b2d9      	uxtb	r1, r3
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <TaskRemote+0x1dc>)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	4413      	add	r3, r2
 8002626:	460a      	mov	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	3301      	adds	r3, #1
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b1f      	cmp	r3, #31
 8002634:	ddee      	ble.n	8002614 <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3b01      	subs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	dad7      	bge.n	80025f2 <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 8002642:	4b46      	ldr	r3, [pc, #280]	; (800275c <TaskRemote+0x1d4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f00c fede 	bl	800f408 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e018      	b.n	8002684 <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	3303      	adds	r3, #3
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <TaskRemote+0x1dc>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	b29b      	uxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b29a      	uxth	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	493e      	ldr	r1, [pc, #248]	; (8002764 <TaskRemote+0x1dc>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	b29b      	uxth	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b299      	uxth	r1, r3
 8002676:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <TaskRemote+0x1e0>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b09      	cmp	r3, #9
 8002688:	dde3      	ble.n	8002652 <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <TaskRemote+0x1e4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 31ff 	mov.w	r1, #4294967295
 8002692:	4618      	mov	r0, r3
 8002694:	f00c fe6a 	bl	800f36c <osMutexWait>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d151      	bne.n	8002742 <TaskRemote+0x1ba>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <TaskRemote+0x1e0>)
 80026a0:	889b      	ldrh	r3, [r3, #4]
 80026a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <TaskRemote+0x1e8>)
 80026aa:	801a      	strh	r2, [r3, #0]
				// Limit input Throttle, so the Controllers can keep the drone stable at high RPM, too
				if (Throttle_in > 800)
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <TaskRemote+0x1e8>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80026b4:	d903      	bls.n	80026be <TaskRemote+0x136>
					Throttle_in = 800;
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <TaskRemote+0x1e8>)
 80026b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026bc:	801a      	strh	r2, [r3, #0]

				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <TaskRemote+0x1e0>)
 80026c0:	885b      	ldrh	r3, [r3, #2]
 80026c2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <TaskRemote+0x1ec>)
 80026cc:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <TaskRemote+0x1e0>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21a      	sxth	r2, r3
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <TaskRemote+0x1f0>)
 80026dc:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <TaskRemote+0x1e0>)
 80026e0:	88db      	ldrh	r3, [r3, #6]
 80026e2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <TaskRemote+0x1f4>)
 80026ec:	801a      	strh	r2, [r3, #0]

				SWA = channelValues[SWA_CHANNEL] - 1000;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <TaskRemote+0x1e0>)
 80026f0:	891b      	ldrh	r3, [r3, #8]
 80026f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <TaskRemote+0x1f8>)
 80026fa:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <TaskRemote+0x1e0>)
 80026fe:	895b      	ldrh	r3, [r3, #10]
 8002700:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <TaskRemote+0x1fc>)
 8002708:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <TaskRemote+0x1e0>)
 800270c:	899b      	ldrh	r3, [r3, #12]
 800270e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <TaskRemote+0x200>)
 8002716:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <TaskRemote+0x1e0>)
 800271a:	89db      	ldrh	r3, [r3, #14]
 800271c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <TaskRemote+0x204>)
 8002724:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <TaskRemote+0x1e0>)
 8002728:	8a1b      	ldrh	r3, [r3, #16]
 800272a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <TaskRemote+0x208>)
 8002732:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <TaskRemote+0x1e0>)
 8002736:	8a5b      	ldrh	r3, [r3, #18]
 8002738:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <TaskRemote+0x20c>)
 8002740:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <TaskRemote+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f00c fe5e 	bl	800f408 <osMutexRelease>
	{
 800274c:	e731      	b.n	80025b2 <TaskRemote+0x2a>
 800274e:	bf00      	nop
 8002750:	2000047c 	.word	0x2000047c
 8002754:	20000bac 	.word	0x20000bac
 8002758:	20000d5c 	.word	0x20000d5c
 800275c:	20000d4c 	.word	0x20000d4c
 8002760:	200004bc 	.word	0x200004bc
 8002764:	200004fc 	.word	0x200004fc
 8002768:	200006bc 	.word	0x200006bc
 800276c:	20000d3c 	.word	0x20000d3c
 8002770:	20000328 	.word	0x20000328
 8002774:	2000032e 	.word	0x2000032e
 8002778:	2000032a 	.word	0x2000032a
 800277c:	20000332 	.word	0x20000332
 8002780:	20000334 	.word	0x20000334
 8002784:	20000336 	.word	0x20000336
 8002788:	20000338 	.word	0x20000338
 800278c:	2000033a 	.word	0x2000033a
 8002790:	2000033c 	.word	0x2000033c
 8002794:	2000033e 	.word	0x2000033e

08002798 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0a0      	sub	sp, #128	; 0x80
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 80027a0:	23c8      	movs	r3, #200	; 0xc8
 80027a2:	67bb      	str	r3, [r7, #120]	; 0x78
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80027a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	677b      	str	r3, [r7, #116]	; 0x74

	bool Recalibrate = false;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


	LPF GyroLPF[3];

	GyroLPF[0].T = 1.0 / xFrequency;
 80027b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027b8:	f7fd fecc 	bl	8000554 <__aeabi_ui2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	f04f 0000 	mov.w	r0, #0
 80027c4:	49ba      	ldr	r1, [pc, #744]	; (8002ab0 <TaskSensorData+0x318>)
 80027c6:	f7fe f869 	bl	800089c <__aeabi_ddiv>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe fa31 	bl	8000c38 <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	623b      	str	r3, [r7, #32]
	GyroLPF[0].f_cutoff = 100;
 80027da:	4bb6      	ldr	r3, [pc, #728]	; (8002ab4 <TaskSensorData+0x31c>)
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
	LPF_Init(&(GyroLPF[0]));
 80027de:	f107 0318 	add.w	r3, r7, #24
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe ffcb 	bl	800177e <LPF_Init>

	GyroLPF[1].T = 1.0 / xFrequency;
 80027e8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027ea:	f7fd feb3 	bl	8000554 <__aeabi_ui2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	49ae      	ldr	r1, [pc, #696]	; (8002ab0 <TaskSensorData+0x318>)
 80027f8:	f7fe f850 	bl	800089c <__aeabi_ddiv>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fa18 	bl	8000c38 <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
	GyroLPF[1].f_cutoff = 100;
 800280c:	4ba9      	ldr	r3, [pc, #676]	; (8002ab4 <TaskSensorData+0x31c>)
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
	LPF_Init(&(GyroLPF[1]));
 8002810:	f107 0318 	add.w	r3, r7, #24
 8002814:	331c      	adds	r3, #28
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe ffb1 	bl	800177e <LPF_Init>

	GyroLPF[2].T = 1.0 / xFrequency;
 800281c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800281e:	f7fd fe99 	bl	8000554 <__aeabi_ui2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	f04f 0000 	mov.w	r0, #0
 800282a:	49a1      	ldr	r1, [pc, #644]	; (8002ab0 <TaskSensorData+0x318>)
 800282c:	f7fe f836 	bl	800089c <__aeabi_ddiv>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f7fe f9fe 	bl	8000c38 <__aeabi_d2f>
 800283c:	4603      	mov	r3, r0
 800283e:	65bb      	str	r3, [r7, #88]	; 0x58
	GyroLPF[2].f_cutoff = 100;
 8002840:	4b9c      	ldr	r3, [pc, #624]	; (8002ab4 <TaskSensorData+0x31c>)
 8002842:	65fb      	str	r3, [r7, #92]	; 0x5c
	LPF_Init(&(GyroLPF[2]));
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	3338      	adds	r3, #56	; 0x38
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe ff97 	bl	800177e <LPF_Init>


	xLastWakeTime = xTaskGetTickCount();
 8002850:	f00e f924 	bl	8010a9c <xTaskGetTickCount>
 8002854:	4603      	mov	r3, r0
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800285c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800285e:	4618      	mov	r0, r3
 8002860:	f00d ff48 	bl	80106f4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8002864:	f00e f91a 	bl	8010a9c <xTaskGetTickCount>
 8002868:	6738      	str	r0, [r7, #112]	; 0x70

		// IMU Data
		if (IsImuAvailable)
 800286a:	4b93      	ldr	r3, [pc, #588]	; (8002ab8 <TaskSensorData+0x320>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80b0 	beq.w	80029d4 <TaskSensorData+0x23c>
		{
			Log("SD-RDM-WS");
 8002874:	4891      	ldr	r0, [pc, #580]	; (8002abc <TaskSensorData+0x324>)
 8002876:	f7fe ff0f 	bl	8001698 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 800287a:	4b91      	ldr	r3, [pc, #580]	; (8002ac0 <TaskSensorData+0x328>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f04f 31ff 	mov.w	r1, #4294967295
 8002882:	4618      	mov	r0, r3
 8002884:	f00c fd72 	bl	800f36c <osMutexWait>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <TaskSensorData+0x10e>
			{
				Log("SD-RDM-WE");
 800288e:	488d      	ldr	r0, [pc, #564]	; (8002ac4 <TaskSensorData+0x32c>)
 8002890:	f7fe ff02 	bl	8001698 <Log>
				if (SWC > 990)
 8002894:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <TaskSensorData+0x330>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	f240 32de 	movw	r2, #990	; 0x3de
 800289c:	4293      	cmp	r3, r2
 800289e:	d902      	bls.n	80028a6 <TaskSensorData+0x10e>
				{
					Recalibrate = true;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			Log("SD-RDM-RS");
 80028a6:	4889      	ldr	r0, [pc, #548]	; (8002acc <TaskSensorData+0x334>)
 80028a8:	f7fe fef6 	bl	8001698 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 80028ac:	4b84      	ldr	r3, [pc, #528]	; (8002ac0 <TaskSensorData+0x328>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00c fda9 	bl	800f408 <osMutexRelease>
			Log("SD-RDM-RE");
 80028b6:	4886      	ldr	r0, [pc, #536]	; (8002ad0 <TaskSensorData+0x338>)
 80028b8:	f7fe feee 	bl	8001698 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_calcAttitude(&hspi2, &MPU9250);
 80028bc:	4985      	ldr	r1, [pc, #532]	; (8002ad4 <TaskSensorData+0x33c>)
 80028be:	4886      	ldr	r0, [pc, #536]	; (8002ad8 <TaskSensorData+0x340>)
 80028c0:	f005 fa3e 	bl	8007d40 <MPU_calcAttitude>

			BMP280_measure(&BMP280);
 80028c4:	4885      	ldr	r0, [pc, #532]	; (8002adc <TaskSensorData+0x344>)
 80028c6:	f004 f9fb 	bl	8006cc0 <BMP280_measure>

			Log("SD-IM-WS");
 80028ca:	4885      	ldr	r0, [pc, #532]	; (8002ae0 <TaskSensorData+0x348>)
 80028cc:	f7fe fee4 	bl	8001698 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80028d0:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <TaskSensorData+0x34c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	4618      	mov	r0, r3
 80028da:	f00c fd47 	bl	800f36c <osMutexWait>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d16c      	bne.n	80029be <TaskSensorData+0x226>
			{
				Log("SD-IM-WE");
 80028e4:	4880      	ldr	r0, [pc, #512]	; (8002ae8 <TaskSensorData+0x350>)
 80028e6:	f7fe fed7 	bl	8001698 <Log>
				if (Recalibrate)
 80028ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00e      	beq.n	8002910 <TaskSensorData+0x178>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	2210      	movs	r2, #16
 80028f8:	497c      	ldr	r1, [pc, #496]	; (8002aec <TaskSensorData+0x354>)
 80028fa:	487d      	ldr	r0, [pc, #500]	; (8002af0 <TaskSensorData+0x358>)
 80028fc:	f00b f802 	bl	800d904 <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 8002900:	2214      	movs	r2, #20
 8002902:	4974      	ldr	r1, [pc, #464]	; (8002ad4 <TaskSensorData+0x33c>)
 8002904:	4874      	ldr	r0, [pc, #464]	; (8002ad8 <TaskSensorData+0x340>)
 8002906:	f004 ff70 	bl	80077ea <MPU_calibrateGyro>

					Recalibrate = false;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}

				AccData[0] = MPU9250.sensorData.ax;
 8002910:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <TaskSensorData+0x33c>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <TaskSensorData+0x35c>)
 8002916:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002918:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <TaskSensorData+0x33c>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a75      	ldr	r2, [pc, #468]	; (8002af4 <TaskSensorData+0x35c>)
 800291e:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 8002920:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <TaskSensorData+0x33c>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a73      	ldr	r2, [pc, #460]	; (8002af4 <TaskSensorData+0x35c>)
 8002926:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <TaskSensorData+0x33c>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <TaskSensorData+0x360>)
 800292e:	6013      	str	r3, [r2, #0]
				//GyroData[0] = MPU9250.sensorData.gx;
				//GyroData[1] = MPU9250.sensorData.gy;
				//GyroData[2] = MPU9250.sensorData.gz;
				GyroData[0] = LPF_Calculate(&(GyroLPF[0]), MPU9250.sensorData.gx);
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <TaskSensorData+0x33c>)
 8002932:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002936:	f107 0318 	add.w	r3, r7, #24
 800293a:	eeb0 0a67 	vmov.f32	s0, s15
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe ffaa 	bl	8001898 <LPF_Calculate>
 8002944:	eef0 7a40 	vmov.f32	s15, s0
 8002948:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <TaskSensorData+0x364>)
 800294a:	edc3 7a00 	vstr	s15, [r3]
				GyroData[1] = LPF_Calculate(&(GyroLPF[1]), MPU9250.sensorData.gy);
 800294e:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <TaskSensorData+0x33c>)
 8002950:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002954:	f107 0318 	add.w	r3, r7, #24
 8002958:	331c      	adds	r3, #28
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff9a 	bl	8001898 <LPF_Calculate>
 8002964:	eef0 7a40 	vmov.f32	s15, s0
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <TaskSensorData+0x364>)
 800296a:	edc3 7a01 	vstr	s15, [r3, #4]
				GyroData[2] = LPF_Calculate(&(GyroLPF[2]), MPU9250.sensorData.gz);
 800296e:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <TaskSensorData+0x33c>)
 8002970:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	3338      	adds	r3, #56	; 0x38
 800297a:	eeb0 0a67 	vmov.f32	s0, s15
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe ff8a 	bl	8001898 <LPF_Calculate>
 8002984:	eef0 7a40 	vmov.f32	s15, s0
 8002988:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <TaskSensorData+0x364>)
 800298a:	edc3 7a02 	vstr	s15, [r3, #8]
				Roll_measured = MPU9250.attitude.roll;
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <TaskSensorData+0x33c>)
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <TaskSensorData+0x368>)
 8002994:	6013      	str	r3, [r2, #0]
				Pitch_measured = MPU9250.attitude.pitch;
 8002996:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <TaskSensorData+0x33c>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	4a5a      	ldr	r2, [pc, #360]	; (8002b04 <TaskSensorData+0x36c>)
 800299c:	6013      	str	r3, [r2, #0]
				Yaw_measured = MPU9250.attitude.yaw;
 800299e:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <TaskSensorData+0x33c>)
 80029a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a2:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <TaskSensorData+0x370>)
 80029a4:	6013      	str	r3, [r2, #0]

				BMP_Temp = BMP280.measurement.temperature;
 80029a6:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <TaskSensorData+0x344>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <TaskSensorData+0x374>)
 80029ac:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 80029ae:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <TaskSensorData+0x344>)
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <TaskSensorData+0x378>)
 80029b4:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <TaskSensorData+0x344>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <TaskSensorData+0x37c>)
 80029bc:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 80029be:	4856      	ldr	r0, [pc, #344]	; (8002b18 <TaskSensorData+0x380>)
 80029c0:	f7fe fe6a 	bl	8001698 <Log>
			osMutexRelease(ImuMutexHandle);
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <TaskSensorData+0x34c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00c fd1d 	bl	800f408 <osMutexRelease>
			Log("SD-IM-RE");
 80029ce:	4853      	ldr	r0, [pc, #332]	; (8002b1c <TaskSensorData+0x384>)
 80029d0:	f7fe fe62 	bl	8001698 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <TaskSensorData+0x388>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8145 	beq.w	8002c68 <TaskSensorData+0x4d0>
		{
			Log("SD-MM-WS");
 80029de:	4851      	ldr	r0, [pc, #324]	; (8002b24 <TaskSensorData+0x38c>)
 80029e0:	f7fe fe5a 	bl	8001698 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <TaskSensorData+0x390>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00c fcbd 	bl	800f36c <osMutexWait>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 812c 	bne.w	8002c52 <TaskSensorData+0x4ba>
			{
				Log("SD-MM-WE");
 80029fa:	484c      	ldr	r0, [pc, #304]	; (8002b2c <TaskSensorData+0x394>)
 80029fc:	f7fe fe4c 	bl	8001698 <Log>

				struct Vector res = HMC5883L_readRaw();
 8002a00:	f003 fe42 	bl	8006688 <HMC5883L_readRaw>
 8002a04:	eef0 6a40 	vmov.f32	s13, s0
 8002a08:	eeb0 7a60 	vmov.f32	s14, s1
 8002a0c:	eef0 7a41 	vmov.f32	s15, s2
 8002a10:	edc7 6a03 	vstr	s13, [r7, #12]
 8002a14:	ed87 7a04 	vstr	s14, [r7, #16]
 8002a18:	edc7 7a05 	vstr	s15, [r7, #20]
				MAG_X_RAW = res.XAxis;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <TaskSensorData+0x398>)
 8002a20:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4a43      	ldr	r2, [pc, #268]	; (8002b34 <TaskSensorData+0x39c>)
 8002a26:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <TaskSensorData+0x3a0>)
 8002a2c:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <TaskSensorData+0x39c>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	f000 80b8 	beq.w	8002bb0 <TaskSensorData+0x418>
				{
					if (MAG_Y_RAW > 0)
 8002a40:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <TaskSensorData+0x39c>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	dd7b      	ble.n	8002b48 <TaskSensorData+0x3b0>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <TaskSensorData+0x398>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <TaskSensorData+0x39c>)
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	eef0 0a47 	vmov.f32	s1, s14
 8002a60:	eeb0 0a67 	vmov.f32	s0, s15
 8002a64:	f014 fa90 	bl	8016f88 <atan2f>
 8002a68:	eef0 7a40 	vmov.f32	s15, s0
 8002a6c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002b3c <TaskSensorData+0x3a4>
 8002a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a74:	ee17 0a90 	vmov	r0, s15
 8002a78:	f7fd fd8e 	bl	8000598 <__aeabi_f2d>
 8002a7c:	a30a      	add	r3, pc, #40	; (adr r3, 8002aa8 <TaskSensorData+0x310>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd ff0b 	bl	800089c <__aeabi_ddiv>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	492c      	ldr	r1, [pc, #176]	; (8002b40 <TaskSensorData+0x3a8>)
 8002a90:	f7fd fc22 	bl	80002d8 <__aeabi_dsub>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f8cc 	bl	8000c38 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <TaskSensorData+0x3ac>)
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e0a3      	b.n	8002bf0 <TaskSensorData+0x458>
 8002aa8:	54442d18 	.word	0x54442d18
 8002aac:	400921fb 	.word	0x400921fb
 8002ab0:	3ff00000 	.word	0x3ff00000
 8002ab4:	42c80000 	.word	0x42c80000
 8002ab8:	20000214 	.word	0x20000214
 8002abc:	080181a4 	.word	0x080181a4
 8002ac0:	20000d3c 	.word	0x20000d3c
 8002ac4:	080181b0 	.word	0x080181b0
 8002ac8:	20000338 	.word	0x20000338
 8002acc:	080181bc 	.word	0x080181bc
 8002ad0:	080181c8 	.word	0x080181c8
 8002ad4:	20000340 	.word	0x20000340
 8002ad8:	20000a28 	.word	0x20000a28
 8002adc:	200003dc 	.word	0x200003dc
 8002ae0:	080181d4 	.word	0x080181d4
 8002ae4:	20000d40 	.word	0x20000d40
 8002ae8:	080181e0 	.word	0x080181e0
 8002aec:	080181ec 	.word	0x080181ec
 8002af0:	20000c34 	.word	0x20000c34
 8002af4:	200003b4 	.word	0x200003b4
 8002af8:	200003c0 	.word	0x200003c0
 8002afc:	200003c4 	.word	0x200003c4
 8002b00:	200003d0 	.word	0x200003d0
 8002b04:	200003d4 	.word	0x200003d4
 8002b08:	200003d8 	.word	0x200003d8
 8002b0c:	2000040c 	.word	0x2000040c
 8002b10:	20000410 	.word	0x20000410
 8002b14:	20000414 	.word	0x20000414
 8002b18:	08018200 	.word	0x08018200
 8002b1c:	0801820c 	.word	0x0801820c
 8002b20:	20000215 	.word	0x20000215
 8002b24:	08018218 	.word	0x08018218
 8002b28:	20000d38 	.word	0x20000d38
 8002b2c:	08018224 	.word	0x08018224
 8002b30:	20000430 	.word	0x20000430
 8002b34:	20000434 	.word	0x20000434
 8002b38:	20000438 	.word	0x20000438
 8002b3c:	43340000 	.word	0x43340000
 8002b40:	40568000 	.word	0x40568000
 8002b44:	2000043c 	.word	0x2000043c
					else if (MAG_Y_RAW < 0)
 8002b48:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <TaskSensorData+0x5e8>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	d54b      	bpl.n	8002bf0 <TaskSensorData+0x458>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002b58:	4b8a      	ldr	r3, [pc, #552]	; (8002d84 <TaskSensorData+0x5ec>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <TaskSensorData+0x5e8>)
 8002b60:	ed93 7a00 	vldr	s14, [r3]
 8002b64:	eef0 0a47 	vmov.f32	s1, s14
 8002b68:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6c:	f014 fa0c 	bl	8016f88 <atan2f>
 8002b70:	eef0 7a40 	vmov.f32	s15, s0
 8002b74:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002d88 <TaskSensorData+0x5f0>
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	ee17 0a90 	vmov	r0, s15
 8002b80:	f7fd fd0a 	bl	8000598 <__aeabi_f2d>
 8002b84:	a37a      	add	r3, pc, #488	; (adr r3, 8002d70 <TaskSensorData+0x5d8>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fe87 	bl	800089c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	a179      	add	r1, pc, #484	; (adr r1, 8002d78 <TaskSensorData+0x5e0>)
 8002b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b98:	f7fd fb9e 	bl	80002d8 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7fe f848 	bl	8000c38 <__aeabi_d2f>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4a78      	ldr	r2, [pc, #480]	; (8002d8c <TaskSensorData+0x5f4>)
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01f      	b.n	8002bf0 <TaskSensorData+0x458>
				}
				else if (MAG_Y_RAW == 0)
 8002bb0:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <TaskSensorData+0x5e8>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d117      	bne.n	8002bf0 <TaskSensorData+0x458>
				{
					if (MAG_X_RAW > 0)
 8002bc0:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <TaskSensorData+0x5ec>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	dd04      	ble.n	8002bda <TaskSensorData+0x442>
						MAG_dir = 0.0f;
 8002bd0:	4b6e      	ldr	r3, [pc, #440]	; (8002d8c <TaskSensorData+0x5f4>)
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e00a      	b.n	8002bf0 <TaskSensorData+0x458>
					else if (MAG_X_RAW < 0)
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <TaskSensorData+0x5ec>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d502      	bpl.n	8002bf0 <TaskSensorData+0x458>
						MAG_dir = 180.0f;
 8002bea:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <TaskSensorData+0x5f4>)
 8002bec:	4a68      	ldr	r2, [pc, #416]	; (8002d90 <TaskSensorData+0x5f8>)
 8002bee:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 8002bf0:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <TaskSensorData+0x5f4>)
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <TaskSensorData+0x5fc>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c02:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d509      	bpl.n	8002c2a <TaskSensorData+0x492>
					MAG_dir += 360.0f;
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002d98 <TaskSensorData+0x600>
 8002c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c26:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002c2a:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002d98 <TaskSensorData+0x600>
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	dd09      	ble.n	8002c52 <TaskSensorData+0x4ba>
					MAG_dir -= 360.0f;
 8002c3e:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002d98 <TaskSensorData+0x600>
 8002c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <TaskSensorData+0x5f4>)
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 8002c52:	4852      	ldr	r0, [pc, #328]	; (8002d9c <TaskSensorData+0x604>)
 8002c54:	f7fe fd20 	bl	8001698 <Log>
			osMutexRelease(MagnMutexHandle);
 8002c58:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <TaskSensorData+0x608>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f00c fbd3 	bl	800f408 <osMutexRelease>
			Log("SD-MM-RE");
 8002c62:	4850      	ldr	r0, [pc, #320]	; (8002da4 <TaskSensorData+0x60c>)
 8002c64:	f7fe fd18 	bl	8001698 <Log>
		}

		// Distance Data
		if (IsDistAvailable)
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <TaskSensorData+0x610>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d046      	beq.n	8002cfe <TaskSensorData+0x566>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 8002c70:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <TaskSensorData+0x614>)
 8002c72:	7d1b      	ldrb	r3, [r3, #20]
 8002c74:	f083 0301 	eor.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <TaskSensorData+0x4f4>
			{
				HCSR04_Trigger(&HCSR04);
 8002c7e:	484b      	ldr	r0, [pc, #300]	; (8002dac <TaskSensorData+0x614>)
 8002c80:	f005 fb24 	bl	80082cc <HCSR04_Trigger>
				HCSR04.Triggered = true;
 8002c84:	4b49      	ldr	r3, [pc, #292]	; (8002dac <TaskSensorData+0x614>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	751a      	strb	r2, [r3, #20]
 8002c8a:	e038      	b.n	8002cfe <TaskSensorData+0x566>
			}
			else if (HCSR04.Triggered)
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <TaskSensorData+0x614>)
 8002c8e:	7d1b      	ldrb	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d034      	beq.n	8002cfe <TaskSensorData+0x566>
			{
				Log("SD-DS-WS");
 8002c94:	4846      	ldr	r0, [pc, #280]	; (8002db0 <TaskSensorData+0x618>)
 8002c96:	f7fe fcff 	bl	8001698 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <TaskSensorData+0x61c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f00c fc19 	bl	800f4d8 <osSemaphoreWait>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d128      	bne.n	8002cfe <TaskSensorData+0x566>
				{
					Log("SD-DS-WE");
 8002cac:	4842      	ldr	r0, [pc, #264]	; (8002db8 <TaskSensorData+0x620>)
 8002cae:	f7fe fcf3 	bl	8001698 <Log>
					Log("SD-DM-WS");
 8002cb2:	4842      	ldr	r0, [pc, #264]	; (8002dbc <TaskSensorData+0x624>)
 8002cb4:	f7fe fcf0 	bl	8001698 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <TaskSensorData+0x628>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f00c fb53 	bl	800f36c <osMutexWait>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <TaskSensorData+0x54a>
					{
						Log("SD-DM-WE");
 8002ccc:	483d      	ldr	r0, [pc, #244]	; (8002dc4 <TaskSensorData+0x62c>)
 8002cce:	f7fe fce3 	bl	8001698 <Log>

						Distance = HCSR04_Read(&HCSR04);
 8002cd2:	4836      	ldr	r0, [pc, #216]	; (8002dac <TaskSensorData+0x614>)
 8002cd4:	f005 fb15 	bl	8008302 <HCSR04_Read>
 8002cd8:	eef0 7a40 	vmov.f32	s15, s0
 8002cdc:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <TaskSensorData+0x630>)
 8002cde:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 8002ce2:	483a      	ldr	r0, [pc, #232]	; (8002dcc <TaskSensorData+0x634>)
 8002ce4:	f7fe fcd8 	bl	8001698 <Log>
					osMutexRelease(DistMutexHandle);
 8002ce8:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <TaskSensorData+0x628>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f00c fb8b 	bl	800f408 <osMutexRelease>
					Log("SD-DM-RE");
 8002cf2:	4837      	ldr	r0, [pc, #220]	; (8002dd0 <TaskSensorData+0x638>)
 8002cf4:	f7fe fcd0 	bl	8001698 <Log>

					HCSR04.Triggered = false;
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <TaskSensorData+0x614>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <TaskSensorData+0x63c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f43f ada8 	beq.w	8002858 <TaskSensorData+0xc0>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 8002d08:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <TaskSensorData+0x640>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00c fbe1 	bl	800f4d8 <osSemaphoreWait>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f ad9d 	bne.w	8002858 <TaskSensorData+0xc0>
			{
				if (ProcessGPSPackageBuffer)
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <TaskSensorData+0x644>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f43f ad97 	beq.w	8002858 <TaskSensorData+0xc0>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <TaskSensorData+0x648>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d32:	4618      	mov	r0, r3
 8002d34:	f00c fb1a 	bl	800f36c <osMutexWait>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <TaskSensorData+0x5c2>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 8002d3e:	4829      	ldr	r0, [pc, #164]	; (8002de4 <TaskSensorData+0x64c>)
 8002d40:	f003 fad2 	bl	80062e8 <GPS_validate>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <TaskSensorData+0x5b8>
							GPS_parse((char*) GPSPackageBuffer);
 8002d4a:	4826      	ldr	r0, [pc, #152]	; (8002de4 <TaskSensorData+0x64c>)
 8002d4c:	f003 fb2e 	bl	80063ac <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	2100      	movs	r1, #0
 8002d54:	4823      	ldr	r0, [pc, #140]	; (8002de4 <TaskSensorData+0x64c>)
 8002d56:	f00f ffe2 	bl	8012d1e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <TaskSensorData+0x648>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f00c fb52 	bl	800f408 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <TaskSensorData+0x644>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
	{
 8002d6a:	e575      	b.n	8002858 <TaskSensorData+0xc0>
 8002d6c:	f3af 8000 	nop.w
 8002d70:	54442d18 	.word	0x54442d18
 8002d74:	400921fb 	.word	0x400921fb
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	4070e000 	.word	0x4070e000
 8002d80:	20000434 	.word	0x20000434
 8002d84:	20000430 	.word	0x20000430
 8002d88:	43340000 	.word	0x43340000
 8002d8c:	2000043c 	.word	0x2000043c
 8002d90:	43340000 	.word	0x43340000
 8002d94:	20000004 	.word	0x20000004
 8002d98:	43b40000 	.word	0x43b40000
 8002d9c:	08018230 	.word	0x08018230
 8002da0:	20000d38 	.word	0x20000d38
 8002da4:	0801823c 	.word	0x0801823c
 8002da8:	20000216 	.word	0x20000216
 8002dac:	20000440 	.word	0x20000440
 8002db0:	08018248 	.word	0x08018248
 8002db4:	20000d54 	.word	0x20000d54
 8002db8:	08018254 	.word	0x08018254
 8002dbc:	08018260 	.word	0x08018260
 8002dc0:	20000d48 	.word	0x20000d48
 8002dc4:	0801826c 	.word	0x0801826c
 8002dc8:	20000478 	.word	0x20000478
 8002dcc:	08018278 	.word	0x08018278
 8002dd0:	08018284 	.word	0x08018284
 8002dd4:	20000217 	.word	0x20000217
 8002dd8:	20000d58 	.word	0x20000d58
 8002ddc:	2000067b 	.word	0x2000067b
 8002de0:	20000d44 	.word	0x20000d44
 8002de4:	2000057c 	.word	0x2000057c

08002de8 <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0ba      	sub	sp, #232	; 0xe8
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8002df0:	2364      	movs	r3, #100	; 0x64
 8002df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 8002e06:	2374      	movs	r3, #116	; 0x74
 8002e08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	SpiTuneData2[0] = (uint8_t)('u');
 8002e0c:	2375      	movs	r3, #117	; 0x75
 8002e0e:	773b      	strb	r3, [r7, #28]


	// PID controllers to be tuned
	PIDController* PID1 = &DPID_Roll.outer;
 8002e10:	4bb4      	ldr	r3, [pc, #720]	; (80030e4 <TaskTune+0x2fc>)
 8002e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int16_t PID1_ref_devided; // Calculated in every cycle
	float PID1_ref_devided_float; // Needed only for single loop tuning
	float* PID1_meas = &Roll_measured;
 8002e16:	4bb4      	ldr	r3, [pc, #720]	; (80030e8 <TaskTune+0x300>)
 8002e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float* PID1_out = &(PID1->out);
 8002e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e20:	3340      	adds	r3, #64	; 0x40
 8002e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	PIDController* PID2 = &DPID_Roll.inner;
 8002e26:	4bb1      	ldr	r3, [pc, #708]	; (80030ec <TaskTune+0x304>)
 8002e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float* PID2_ref = &(PID1->out);
 8002e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float* PID2_meas = GyroData;
 8002e36:	4bae      	ldr	r3, [pc, #696]	; (80030f0 <TaskTune+0x308>)
 8002e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int16_t* PID2_out = &Roll_controlled;
 8002e3c:	4bad      	ldr	r3, [pc, #692]	; (80030f4 <TaskTune+0x30c>)
 8002e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	PIDController* PID3 = &DPID_Pitch.outer;
 8002e42:	4bad      	ldr	r3, [pc, #692]	; (80030f8 <TaskTune+0x310>)
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int16_t PID3_ref_devided; // Calculated in every cycle
	float PID3_ref_devided_float; // Needed only for single loop tuning
	float* PID3_meas = &Pitch_measured;
 8002e48:	4bac      	ldr	r3, [pc, #688]	; (80030fc <TaskTune+0x314>)
 8002e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float* PID3_out = &(PID3->out);
 8002e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e52:	3340      	adds	r3, #64	; 0x40
 8002e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	PIDController* PID4 = &DPID_Pitch.inner;
 8002e58:	4ba9      	ldr	r3, [pc, #676]	; (8003100 <TaskTune+0x318>)
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float* PID4_ref = &(PID3->out);
 8002e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e62:	3340      	adds	r3, #64	; 0x40
 8002e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float* PID4_meas = GyroData+1;
 8002e68:	4ba6      	ldr	r3, [pc, #664]	; (8003104 <TaskTune+0x31c>)
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int16_t* PID4_out = &Pitch_controlled;
 8002e6e:	4ba6      	ldr	r3, [pc, #664]	; (8003108 <TaskTune+0x320>)
 8002e70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0


	xLastWakeTime = xTaskGetTickCount();
 8002e74:	f00d fe12 	bl	8010a9c <xTaskGetTickCount>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8002e7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e82:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002e86:	4618      	mov	r0, r3
 8002e88:	f00d fc34 	bl	80106f4 <vTaskDelayUntil>

		if (Tune)
 8002e8c:	4b9f      	ldr	r3, [pc, #636]	; (800310c <TaskTune+0x324>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8178 	beq.w	8003186 <TaskTune+0x39e>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8002e96:	4b9e      	ldr	r3, [pc, #632]	; (8003110 <TaskTune+0x328>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f00c fa64 	bl	800f36c <osMutexWait>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 815e 	bne.w	8003168 <TaskTune+0x380>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8002eac:	4b99      	ldr	r3, [pc, #612]	; (8003114 <TaskTune+0x32c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00c fa59 	bl	800f36c <osMutexWait>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 8153 	bne.w	8003168 <TaskTune+0x380>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <TaskTune+0x330>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f00c fa4e 	bl	800f36c <osMutexWait>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8148 	bne.w	8003168 <TaskTune+0x380>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID1 data
				//Gains
				FloatToUint8s(&(PID1->Kp), SpiTuneData1, 1);
 8002ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002edc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fc00 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID1->Ki), SpiTuneData1, 5);
 8002ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eec:	3304      	adds	r3, #4
 8002eee:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fbf7 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID1->Kd), SpiTuneData1, 9);
 8002efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002efe:	3308      	adds	r3, #8
 8002f00:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f04:	2209      	movs	r2, #9
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fbee 	bl	80016e8 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				//PID1_ref_devided = Roll_in / 25;
				PID1_ref_devided = SWD / 70;
 8002f0c:	4b83      	ldr	r3, [pc, #524]	; (800311c <TaskTune+0x334>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	4a83      	ldr	r2, [pc, #524]	; (8003120 <TaskTune+0x338>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	837b      	strh	r3, [r7, #26]
				Int16ToUint8s(&PID1_ref_devided, SpiTuneData1, 13);
 8002f20:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f24:	f107 031a 	add.w	r3, r7, #26
 8002f28:	220d      	movs	r2, #13
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fc14 	bl	8001758 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID1_meas, SpiTuneData1, 15);
 8002f30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f34:	220f      	movs	r2, #15
 8002f36:	4619      	mov	r1, r3
 8002f38:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002f3c:	f7fe fbd4 	bl	80016e8 <FloatToUint8s>
				// Output
				FloatToUint8s(PID1_out, SpiTuneData1, 19);
 8002f40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f44:	2213      	movs	r2, #19
 8002f46:	4619      	mov	r1, r3
 8002f48:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002f4c:	f7fe fbcc 	bl	80016e8 <FloatToUint8s>


				// Pack PID2 data
				// Gains
				FloatToUint8s(&(PID2->Kp), SpiTuneData1, 23);
 8002f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f54:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f58:	2217      	movs	r2, #23
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fbc4 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID2->Ki), SpiTuneData1, 27);
 8002f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f64:	3304      	adds	r3, #4
 8002f66:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f6a:	221b      	movs	r2, #27
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fbbb 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID2->Kd), SpiTuneData1, 31);
 8002f72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f76:	3308      	adds	r3, #8
 8002f78:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fbb2 	bl	80016e8 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <TaskTune+0x33c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01b      	beq.n	8002fc4 <TaskTune+0x1dc>
				{
					PID1_ref_devided_float = Roll_in / 10.0;
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <TaskTune+0x340>)
 8002f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd faee 	bl	8000574 <__aeabi_i2d>
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	4b63      	ldr	r3, [pc, #396]	; (800312c <TaskTune+0x344>)
 8002f9e:	f7fd fc7d 	bl	800089c <__aeabi_ddiv>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fe45 	bl	8000c38 <__aeabi_d2f>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	617b      	str	r3, [r7, #20]
					FloatToUint8s(&PID1_ref_devided_float, SpiTuneData1, 35);
 8002fb2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	2223      	movs	r2, #35	; 0x23
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fb93 	bl	80016e8 <FloatToUint8s>
 8002fc2:	e007      	b.n	8002fd4 <TaskTune+0x1ec>
				}
				else
					FloatToUint8s(PID2_ref, SpiTuneData1, 35);
 8002fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fc8:	2223      	movs	r2, #35	; 0x23
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002fd0:	f7fe fb8a 	bl	80016e8 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID2_meas, SpiTuneData1, 39);
 8002fd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fd8:	2227      	movs	r2, #39	; 0x27
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002fe0:	f7fe fb82 	bl	80016e8 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID2_out, SpiTuneData1, 43);
 8002fe4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fe8:	222b      	movs	r2, #43	; 0x2b
 8002fea:	4619      	mov	r1, r3
 8002fec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002ff0:	f7fe fbb2 	bl	8001758 <Int16ToUint8s>


				// Pack PID3 data
				//Gains
				FloatToUint8s(&(PID3->Kp), SpiTuneData2, 1);
 8002ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ff8:	f107 011c 	add.w	r1, r7, #28
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fb72 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID3->Ki), SpiTuneData2, 5);
 8003004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003008:	3304      	adds	r3, #4
 800300a:	f107 011c 	add.w	r1, r7, #28
 800300e:	2205      	movs	r2, #5
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fb69 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID3->Kd), SpiTuneData2, 9);
 8003016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800301a:	3308      	adds	r3, #8
 800301c:	f107 011c 	add.w	r1, r7, #28
 8003020:	2209      	movs	r2, #9
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb60 	bl	80016e8 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID3_ref_devided = Pitch_in / 25;
 8003028:	4b41      	ldr	r3, [pc, #260]	; (8003130 <TaskTune+0x348>)
 800302a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302e:	4a41      	ldr	r2, [pc, #260]	; (8003134 <TaskTune+0x34c>)
 8003030:	fb82 1203 	smull	r1, r2, r2, r3
 8003034:	10d2      	asrs	r2, r2, #3
 8003036:	17db      	asrs	r3, r3, #31
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	b21b      	sxth	r3, r3
 800303c:	827b      	strh	r3, [r7, #18]
				Int16ToUint8s(&PID3_ref_devided, SpiTuneData2, 13);
 800303e:	f107 011c 	add.w	r1, r7, #28
 8003042:	f107 0312 	add.w	r3, r7, #18
 8003046:	220d      	movs	r2, #13
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fb85 	bl	8001758 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID3_meas, SpiTuneData2, 15);
 800304e:	f107 031c 	add.w	r3, r7, #28
 8003052:	220f      	movs	r2, #15
 8003054:	4619      	mov	r1, r3
 8003056:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800305a:	f7fe fb45 	bl	80016e8 <FloatToUint8s>
				// Output
				FloatToUint8s(PID3_out, SpiTuneData2, 19);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	2213      	movs	r2, #19
 8003064:	4619      	mov	r1, r3
 8003066:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800306a:	f7fe fb3d 	bl	80016e8 <FloatToUint8s>


				// Pack PID4 data
				// Gains
				FloatToUint8s(&(PID4->Kp), SpiTuneData2, 23);
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003072:	f107 011c 	add.w	r1, r7, #28
 8003076:	2217      	movs	r2, #23
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fb35 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID4->Ki), SpiTuneData2, 27);
 800307e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003082:	3304      	adds	r3, #4
 8003084:	f107 011c 	add.w	r1, r7, #28
 8003088:	221b      	movs	r2, #27
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb2c 	bl	80016e8 <FloatToUint8s>
				FloatToUint8s(&(PID4->Kd), SpiTuneData2, 31);
 8003090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003094:	3308      	adds	r3, #8
 8003096:	f107 011c 	add.w	r1, r7, #28
 800309a:	221f      	movs	r2, #31
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fb23 	bl	80016e8 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <TaskTune+0x33c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d046      	beq.n	8003138 <TaskTune+0x350>
				{
					PID3_ref_devided_float = Pitch_in / 10.0;
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <TaskTune+0x348>)
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa5f 	bl	8000574 <__aeabi_i2d>
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <TaskTune+0x344>)
 80030bc:	f7fd fbee 	bl	800089c <__aeabi_ddiv>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fdb6 	bl	8000c38 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]
					FloatToUint8s(&PID3_ref_devided_float, SpiTuneData2, 35);
 80030d0:	f107 011c 	add.w	r1, r7, #28
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2223      	movs	r2, #35	; 0x23
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fb04 	bl	80016e8 <FloatToUint8s>
 80030e0:	e032      	b.n	8003148 <TaskTune+0x360>
 80030e2:	bf00      	nop
 80030e4:	2000025c 	.word	0x2000025c
 80030e8:	200003d0 	.word	0x200003d0
 80030ec:	20000218 	.word	0x20000218
 80030f0:	200003c4 	.word	0x200003c4
 80030f4:	2000032c 	.word	0x2000032c
 80030f8:	200002e4 	.word	0x200002e4
 80030fc:	200003d4 	.word	0x200003d4
 8003100:	200002a0 	.word	0x200002a0
 8003104:	200003c8 	.word	0x200003c8
 8003108:	20000330 	.word	0x20000330
 800310c:	20000001 	.word	0x20000001
 8003110:	20000d50 	.word	0x20000d50
 8003114:	20000d40 	.word	0x20000d40
 8003118:	20000d3c 	.word	0x20000d3c
 800311c:	2000033a 	.word	0x2000033a
 8003120:	ea0ea0eb 	.word	0xea0ea0eb
 8003124:	2000020d 	.word	0x2000020d
 8003128:	2000032a 	.word	0x2000032a
 800312c:	40240000 	.word	0x40240000
 8003130:	2000032e 	.word	0x2000032e
 8003134:	51eb851f 	.word	0x51eb851f
				}
				else
					FloatToUint8s(PID4_ref, SpiTuneData2, 35);
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	2223      	movs	r2, #35	; 0x23
 800313e:	4619      	mov	r1, r3
 8003140:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003144:	f7fe fad0 	bl	80016e8 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID4_meas, SpiTuneData2, 39);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	2227      	movs	r2, #39	; 0x27
 800314e:	4619      	mov	r1, r3
 8003150:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003154:	f7fe fac8 	bl	80016e8 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID4_out, SpiTuneData2, 43);
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	222b      	movs	r2, #43	; 0x2b
 800315e:	4619      	mov	r1, r3
 8003160:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003164:	f7fe faf8 	bl	8001758 <Int16ToUint8s>
			}
			osMutexRelease(ControllerMutexHandle);
 8003168:	4b65      	ldr	r3, [pc, #404]	; (8003300 <TaskTune+0x518>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f00c f94b 	bl	800f408 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8003172:	4b64      	ldr	r3, [pc, #400]	; (8003304 <TaskTune+0x51c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f00c f946 	bl	800f408 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 800317c:	4b62      	ldr	r3, [pc, #392]	; (8003308 <TaskTune+0x520>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f00c f941 	bl	800f408 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003186:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	4a5e      	ldr	r2, [pc, #376]	; (800330c <TaskTune+0x524>)
 8003194:	485e      	ldr	r0, [pc, #376]	; (8003310 <TaskTune+0x528>)
 8003196:	f008 f96e 	bl	800b476 <HAL_SPI_TransmitReceive>
		osDelay(5);
 800319a:	2005      	movs	r0, #5
 800319c:	f00c f8b9 	bl	800f312 <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 80031a0:	f107 011c 	add.w	r1, r7, #28
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2340      	movs	r3, #64	; 0x40
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <TaskTune+0x524>)
 80031ae:	4858      	ldr	r0, [pc, #352]	; (8003310 <TaskTune+0x528>)
 80031b0:	f008 f961 	bl	800b476 <HAL_SPI_TransmitReceive>

		// Tune controllers based on the received data
		float float_value = 0;
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
		FloatFromUint8s(Spi1Buffer, 3, &float_value);
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	461a      	mov	r2, r3
 80031c0:	2103      	movs	r1, #3
 80031c2:	4852      	ldr	r0, [pc, #328]	; (800330c <TaskTune+0x524>)
 80031c4:	f7fe faa2 	bl	800170c <FloatFromUint8s>

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <TaskTune+0x518>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295
 80031d0:	4618      	mov	r0, r3
 80031d2:	f00c f8cb 	bl	800f36c <osMutexWait>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 808b 	bne.w	80032f4 <TaskTune+0x50c>
		{
			if (Spi1Buffer[1] == 1) // PID1
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <TaskTune+0x524>)
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d11d      	bne.n	8003224 <TaskTune+0x43c>
			{
				if (Spi1Buffer[2] == 'p')
 80031e8:	4b48      	ldr	r3, [pc, #288]	; (800330c <TaskTune+0x524>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b70      	cmp	r3, #112	; 0x70
 80031f0:	d104      	bne.n	80031fc <TaskTune+0x414>
					PID1->Kp = float_value;
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e07b      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <TaskTune+0x524>)
 80031fe:	789b      	ldrb	r3, [r3, #2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b69      	cmp	r3, #105	; 0x69
 8003204:	d104      	bne.n	8003210 <TaskTune+0x428>
					PID1->Ki = float_value;
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e071      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <TaskTune+0x524>)
 8003212:	789b      	ldrb	r3, [r3, #2]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d16c      	bne.n	80032f4 <TaskTune+0x50c>
					PID1->Kd = float_value;
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	e067      	b.n	80032f4 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 2) // PID2
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <TaskTune+0x524>)
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d11d      	bne.n	800326a <TaskTune+0x482>
			{
				if (Spi1Buffer[2] == 'p')
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <TaskTune+0x524>)
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d104      	bne.n	8003242 <TaskTune+0x45a>
					PID2->Kp = float_value;
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e058      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <TaskTune+0x524>)
 8003244:	789b      	ldrb	r3, [r3, #2]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b69      	cmp	r3, #105	; 0x69
 800324a:	d104      	bne.n	8003256 <TaskTune+0x46e>
					PID2->Ki = float_value;
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	e04e      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <TaskTune+0x524>)
 8003258:	789b      	ldrb	r3, [r3, #2]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d149      	bne.n	80032f4 <TaskTune+0x50c>
					PID2->Kd = float_value;
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e044      	b.n	80032f4 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 3) // PID3
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <TaskTune+0x524>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b03      	cmp	r3, #3
 8003272:	d11d      	bne.n	80032b0 <TaskTune+0x4c8>
			{
				if (Spi1Buffer[2] == 'p')
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <TaskTune+0x524>)
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b70      	cmp	r3, #112	; 0x70
 800327c:	d104      	bne.n	8003288 <TaskTune+0x4a0>
					PID3->Kp = float_value;
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e035      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <TaskTune+0x524>)
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b69      	cmp	r3, #105	; 0x69
 8003290:	d104      	bne.n	800329c <TaskTune+0x4b4>
					PID3->Ki = float_value;
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e02b      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <TaskTune+0x524>)
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d126      	bne.n	80032f4 <TaskTune+0x50c>
					PID3->Kd = float_value;
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	e021      	b.n	80032f4 <TaskTune+0x50c>
			}
			else if (Spi1Buffer[1] == 4) // PID4
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <TaskTune+0x524>)
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d11c      	bne.n	80032f4 <TaskTune+0x50c>
			{
				if (Spi1Buffer[2] == 'p')
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <TaskTune+0x524>)
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b70      	cmp	r3, #112	; 0x70
 80032c2:	d104      	bne.n	80032ce <TaskTune+0x4e6>
					PID4->Kp = float_value;
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e012      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'i')
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <TaskTune+0x524>)
 80032d0:	789b      	ldrb	r3, [r3, #2]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b69      	cmp	r3, #105	; 0x69
 80032d6:	d104      	bne.n	80032e2 <TaskTune+0x4fa>
					PID4->Ki = float_value;
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	e008      	b.n	80032f4 <TaskTune+0x50c>
				else if (Spi1Buffer[2] == 'd')
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <TaskTune+0x524>)
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d103      	bne.n	80032f4 <TaskTune+0x50c>
					PID4->Kd = float_value;
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f2:	609a      	str	r2, [r3, #8]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <TaskTune+0x518>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00c f885 	bl	800f408 <osMutexRelease>
	{
 80032fe:	e5be      	b.n	8002e7e <TaskTune+0x96>
 8003300:	20000d50 	.word	0x20000d50
 8003304:	20000d40 	.word	0x20000d40
 8003308:	20000d3c 	.word	0x20000d3c
 800330c:	2000067c 	.word	0x2000067c
 8003310:	200009c4 	.word	0x200009c4

08003314 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <vApplicationGetIdleTaskMemory+0x2c>)
 8003324:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a06      	ldr	r2, [pc, #24]	; (8003344 <vApplicationGetIdleTaskMemory+0x30>)
 800332a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	200006d0 	.word	0x200006d0
 8003344:	20000770 	.word	0x20000770

08003348 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_UART_RxCpltCallback+0x114>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d130      	bne.n	80033ba <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_UART_RxCpltCallback+0x118>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <HAL_UART_RxCpltCallback+0x118>)
 8003360:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_UART_RxCpltCallback+0x11c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f00b ffff 	bl	800f36c <osMutexWait>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11c      	bne.n	80033ae <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e00c      	b.n	8003394 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <HAL_UART_RxCpltCallback+0x120>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b2d9      	uxtb	r1, r3
 8003384:	4a39      	ldr	r2, [pc, #228]	; (800346c <HAL_UART_RxCpltCallback+0x124>)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	460a      	mov	r2, r1
 800338c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3301      	adds	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b3f      	cmp	r3, #63	; 0x3f
 8003398:	ddef      	ble.n	800337a <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_UART_RxCpltCallback+0x11c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f00c f832 	bl	800f408 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_UART_RxCpltCallback+0x128>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f00c f8e3 	bl	800f574 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	492d      	ldr	r1, [pc, #180]	; (8003468 <HAL_UART_RxCpltCallback+0x120>)
 80033b2:	482a      	ldr	r0, [pc, #168]	; (800345c <HAL_UART_RxCpltCallback+0x114>)
 80033b4:	f00a fb29 	bl	800da0a <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 80033b8:	e04b      	b.n	8003452 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <HAL_UART_RxCpltCallback+0x12c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d147      	bne.n	8003452 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_UART_RxCpltCallback+0x8e>
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_UART_RxCpltCallback+0x134>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b24      	cmp	r3, #36	; 0x24
 80033d4:	d013      	beq.n	80033fe <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 80033d6:	4b28      	ldr	r3, [pc, #160]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d104      	bne.n	80033ea <HAL_UART_RxCpltCallback+0xa2>
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_UART_RxCpltCallback+0x134>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b47      	cmp	r3, #71	; 0x47
 80033e8:	d009      	beq.n	80033fe <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d926      	bls.n	8003442 <HAL_UART_RxCpltCallback+0xfa>
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2bff      	cmp	r3, #255	; 0xff
 80033fc:	d021      	beq.n	8003442 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_UART_RxCpltCallback+0x134>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2d9      	uxtb	r1, r3
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_UART_RxCpltCallback+0x138>)
 800340e:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2bfd      	cmp	r3, #253	; 0xfd
 8003418:	d807      	bhi.n	800342a <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 8003426:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003428:	e00e      	b.n	8003448 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_UART_RxCpltCallback+0x13c>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_UART_RxCpltCallback+0x140>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f00c f89a 	bl	800f574 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8003440:	e002      	b.n	8003448 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_UART_RxCpltCallback+0x130>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8003448:	2201      	movs	r2, #1
 800344a:	490c      	ldr	r1, [pc, #48]	; (800347c <HAL_UART_RxCpltCallback+0x134>)
 800344c:	4809      	ldr	r0, [pc, #36]	; (8003474 <HAL_UART_RxCpltCallback+0x12c>)
 800344e:	f00a fb20 	bl	800da92 <HAL_UART_Receive_DMA>
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000bac 	.word	0x20000bac
 8003460:	20000210 	.word	0x20000210
 8003464:	20000d4c 	.word	0x20000d4c
 8003468:	2000047c 	.word	0x2000047c
 800346c:	200004bc 	.word	0x200004bc
 8003470:	20000d5c 	.word	0x20000d5c
 8003474:	20000b24 	.word	0x20000b24
 8003478:	20000579 	.word	0x20000579
 800347c:	20000578 	.word	0x20000578
 8003480:	2000057c 	.word	0x2000057c
 8003484:	2000067b 	.word	0x2000067b
 8003488:	20000d58 	.word	0x20000d58

0800348c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a23      	ldr	r2, [pc, #140]	; (8003524 <HAL_UART_ErrorCallback+0x98>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d11c      	bne.n	80034d6 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d03a      	beq.n	800351c <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	491d      	ldr	r1, [pc, #116]	; (8003528 <HAL_UART_ErrorCallback+0x9c>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 fa92 	bl	80059dc <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80034b8:	f107 0308 	add.w	r3, r7, #8
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc feff 	bl	80002c0 <strlen>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	f107 0108 	add.w	r1, r7, #8
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	4817      	ldr	r0, [pc, #92]	; (800352c <HAL_UART_ErrorCallback+0xa0>)
 80034d0:	f00a fa18 	bl	800d904 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 80034d4:	e022      	b.n	800351c <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_UART_ErrorCallback+0xa4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d11e      	bne.n	800351c <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d019      	beq.n	800351c <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_UART_ErrorCallback+0xa8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	490f      	ldr	r1, [pc, #60]	; (8003538 <HAL_UART_ErrorCallback+0xac>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fa6e 	bl	80059dc <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8003500:	f107 0308 	add.w	r3, r7, #8
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc fedb 	bl	80002c0 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	b29a      	uxth	r2, r3
 800350e:	f107 0108 	add.w	r1, r7, #8
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <HAL_UART_ErrorCallback+0xa0>)
 8003518:	f00a f9f4 	bl	800d904 <HAL_UART_Transmit>
}
 800351c:	bf00      	nop
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000bac 	.word	0x20000bac
 8003528:	08018290 	.word	0x08018290
 800352c:	20000c34 	.word	0x20000c34
 8003530:	20000b24 	.word	0x20000b24
 8003534:	20000000 	.word	0x20000000
 8003538:	080182ac 	.word	0x080182ac

0800353c <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_TIM_IC_CaptureCallback+0x20>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4804      	ldr	r0, [pc, #16]	; (8003560 <HAL_TIM_IC_CaptureCallback+0x24>)
 8003550:	f004 fd76 	bl	8008040 <HCSR04_TMR_IC_ISR>
	}
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000ad8 	.word	0x20000ad8
 8003560:	20000440 	.word	0x20000440

08003564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b0c6      	sub	sp, #280	; 0x118
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800356a:	f004 ff02 	bl	8008372 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800356e:	f000 f9eb 	bl	8003948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003572:	f000 fce7 	bl	8003f44 <MX_GPIO_Init>
  MX_DMA_Init();
 8003576:	f000 fcc7 	bl	8003f08 <MX_DMA_Init>
  MX_SPI1_Init();
 800357a:	f000 fa91 	bl	8003aa0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800357e:	f000 facd 	bl	8003b1c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003582:	f000 fb09 	bl	8003b98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003586:	f000 fbd7 	bl	8003d38 <MX_TIM3_Init>
  MX_UART4_Init();
 800358a:	f000 fc29 	bl	8003de0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800358e:	f000 fc57 	bl	8003e40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003592:	f000 fa45 	bl	8003a20 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003596:	f000 fc87 	bl	8003ea8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800359a:	4916      	ldr	r1, [pc, #88]	; (80035f4 <main+0x90>)
 800359c:	4816      	ldr	r0, [pc, #88]	; (80035f8 <main+0x94>)
 800359e:	f004 f827 	bl	80075f0 <MPU_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <main+0x5a>
 80035a8:	4914      	ldr	r1, [pc, #80]	; (80035fc <main+0x98>)
 80035aa:	4813      	ldr	r0, [pc, #76]	; (80035f8 <main+0x94>)
 80035ac:	f003 f9d4 	bl	8006958 <BMP280_initialize>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <main+0x5a>
  		IsImuAvailable = true;
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <main+0x9c>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e002      	b.n	80035c4 <main+0x60>
  	else
  		IsImuAvailable = false;
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <main+0x9c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80035c4:	f003 f84a 	bl	800665c <HMC5883L_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <main+0x72>
  		IsMagnAvailable = true;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <main+0xa0>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e002      	b.n	80035dc <main+0x78>
  	else
  		IsMagnAvailable = false;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <main+0xa0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80035dc:	490a      	ldr	r1, [pc, #40]	; (8003608 <main+0xa4>)
 80035de:	480b      	ldr	r0, [pc, #44]	; (800360c <main+0xa8>)
 80035e0:	f004 fce0 	bl	8007fa4 <HCSR04_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d114      	bne.n	8003614 <main+0xb0>
  		IsDistAvailable = false;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <main+0xac>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e013      	b.n	800361a <main+0xb6>
 80035f2:	bf00      	nop
 80035f4:	20000340 	.word	0x20000340
 80035f8:	20000a28 	.word	0x20000a28
 80035fc:	200003dc 	.word	0x200003dc
 8003600:	20000214 	.word	0x20000214
 8003604:	20000215 	.word	0x20000215
 8003608:	20000ad8 	.word	0x20000ad8
 800360c:	20000440 	.word	0x20000440
 8003610:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 8003614:	4bb3      	ldr	r3, [pc, #716]	; (80038e4 <main+0x380>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 8003626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800362a:	4618      	mov	r0, r3
 800362c:	f00b fe85 	bl	800f33a <osMutexCreate>
 8003630:	4603      	mov	r3, r0
 8003632:	4aad      	ldr	r2, [pc, #692]	; (80038e8 <main+0x384>)
 8003634:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 8003642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003646:	4618      	mov	r0, r3
 8003648:	f00b fe77 	bl	800f33a <osMutexCreate>
 800364c:	4603      	mov	r3, r0
 800364e:	4aa7      	ldr	r2, [pc, #668]	; (80038ec <main+0x388>)
 8003650:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 800365e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003662:	4618      	mov	r0, r3
 8003664:	f00b fe69 	bl	800f33a <osMutexCreate>
 8003668:	4603      	mov	r3, r0
 800366a:	4aa1      	ldr	r2, [pc, #644]	; (80038f0 <main+0x38c>)
 800366c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 800367a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800367e:	4618      	mov	r0, r3
 8003680:	f00b fe5b 	bl	800f33a <osMutexCreate>
 8003684:	4603      	mov	r3, r0
 8003686:	4a9b      	ldr	r2, [pc, #620]	; (80038f4 <main+0x390>)
 8003688:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8003696:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800369a:	4618      	mov	r0, r3
 800369c:	f00b fe4d 	bl	800f33a <osMutexCreate>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4a95      	ldr	r2, [pc, #596]	; (80038f8 <main+0x394>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 80036b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f00b fe3f 	bl	800f33a <osMutexCreate>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a8f      	ldr	r2, [pc, #572]	; (80038fc <main+0x398>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 80036ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f00b fe31 	bl	800f33a <osMutexCreate>
 80036d8:	4603      	mov	r3, r0
 80036da:	4a89      	ldr	r2, [pc, #548]	; (8003900 <main+0x39c>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 80036de:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <main+0x384>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00b fe90 	bl	800f408 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 80036e8:	4b80      	ldr	r3, [pc, #512]	; (80038ec <main+0x388>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f00b fe8b 	bl	800f408 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80036f2:	4b7f      	ldr	r3, [pc, #508]	; (80038f0 <main+0x38c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f00b fe86 	bl	800f408 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 80036fc:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <main+0x390>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f00b fe81 	bl	800f408 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 8003706:	4b7d      	ldr	r3, [pc, #500]	; (80038fc <main+0x398>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f00b fe7c 	bl	800f408 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 8003710:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <main+0x39c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f00b fe77 	bl	800f408 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 8003726:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f00b fea1 	bl	800f474 <osSemaphoreCreate>
 8003732:	4603      	mov	r3, r0
 8003734:	4a73      	ldr	r2, [pc, #460]	; (8003904 <main+0x3a0>)
 8003736:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8003744:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f00b fe92 	bl	800f474 <osSemaphoreCreate>
 8003750:	4603      	mov	r3, r0
 8003752:	4a6d      	ldr	r2, [pc, #436]	; (8003908 <main+0x3a4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8003762:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f00b fe83 	bl	800f474 <osSemaphoreCreate>
 800376e:	4603      	mov	r3, r0
 8003770:	4a66      	ldr	r2, [pc, #408]	; (800390c <main+0x3a8>)
 8003772:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8003774:	4b63      	ldr	r3, [pc, #396]	; (8003904 <main+0x3a0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f00b ff31 	bl	800f5e0 <osSemaphoreGetCount>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8003784:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <main+0x3a0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	4618      	mov	r0, r3
 800378e:	f00b fea3 	bl	800f4d8 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8003792:	4b5d      	ldr	r3, [pc, #372]	; (8003908 <main+0x3a4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f00b ff22 	bl	800f5e0 <osSemaphoreGetCount>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d106      	bne.n	80037b0 <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 80037a2:	4b59      	ldr	r3, [pc, #356]	; (8003908 <main+0x3a4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f04f 31ff 	mov.w	r1, #4294967295
 80037aa:	4618      	mov	r0, r3
 80037ac:	f00b fe94 	bl	800f4d8 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <main+0x3a8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f00b ff13 	bl	800f5e0 <osSemaphoreGetCount>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 80037c0:	4b52      	ldr	r3, [pc, #328]	; (800390c <main+0x3a8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	4618      	mov	r0, r3
 80037ca:	f00b fe85 	bl	800f4d8 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <main+0x3ac>)
 80037d0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80037d4:	461d      	mov	r5, r3
 80037d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 80037e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f00b fd46 	bl	800f27a <osThreadCreate>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <main+0x3b0>)
 80037f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <main+0x3b4>)
 80037f6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80037fa:	461d      	mov	r5, r3
 80037fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 8003808:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f00b fd33 	bl	800f27a <osThreadCreate>
 8003814:	4603      	mov	r3, r0
 8003816:	4a41      	ldr	r2, [pc, #260]	; (800391c <main+0x3b8>)
 8003818:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <main+0x3bc>)
 800381c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003820:	461d      	mov	r5, r3
 8003822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800382a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 800382e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f00b fd20 	bl	800f27a <osThreadCreate>
 800383a:	4603      	mov	r3, r0
 800383c:	4a39      	ldr	r2, [pc, #228]	; (8003924 <main+0x3c0>)
 800383e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <main+0x3c4>)
 8003842:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003846:	461d      	mov	r5, r3
 8003848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800384a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800384c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8003854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f00b fd0d 	bl	800f27a <osThreadCreate>
 8003860:	4603      	mov	r3, r0
 8003862:	4a32      	ldr	r2, [pc, #200]	; (800392c <main+0x3c8>)
 8003864:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <main+0x3cc>)
 8003868:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800386c:	461d      	mov	r5, r3
 800386e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 800387a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f00b fcfa 	bl	800f27a <osThreadCreate>
 8003886:	4603      	mov	r3, r0
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <main+0x3d0>)
 800388a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <main+0x3d4>)
 800388e:	f107 0420 	add.w	r4, r7, #32
 8003892:	461d      	mov	r5, r3
 8003894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800389c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 80038a0:	f107 0320 	add.w	r3, r7, #32
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00b fce7 	bl	800f27a <osThreadCreate>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <main+0x3d8>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 80038b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80038b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <main+0x3dc>)
 80038bc:	461c      	mov	r4, r3
 80038be:	4615      	mov	r5, r2
 80038c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f00b fcd2 	bl	800f27a <osThreadCreate>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <main+0x3e0>)
 80038da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80038dc:	f00b fcc6 	bl	800f26c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80038e0:	e7fe      	b.n	80038e0 <main+0x37c>
 80038e2:	bf00      	nop
 80038e4:	20000216 	.word	0x20000216
 80038e8:	20000d38 	.word	0x20000d38
 80038ec:	20000d3c 	.word	0x20000d3c
 80038f0:	20000d40 	.word	0x20000d40
 80038f4:	20000d44 	.word	0x20000d44
 80038f8:	20000d48 	.word	0x20000d48
 80038fc:	20000d4c 	.word	0x20000d4c
 8003900:	20000d50 	.word	0x20000d50
 8003904:	20000d54 	.word	0x20000d54
 8003908:	20000d58 	.word	0x20000d58
 800390c:	20000d5c 	.word	0x20000d5c
 8003910:	080182f4 	.word	0x080182f4
 8003914:	20000d1c 	.word	0x20000d1c
 8003918:	08018320 	.word	0x08018320
 800391c:	20000d20 	.word	0x20000d20
 8003920:	08018348 	.word	0x08018348
 8003924:	20000d24 	.word	0x20000d24
 8003928:	08018370 	.word	0x08018370
 800392c:	20000d28 	.word	0x20000d28
 8003930:	08018398 	.word	0x08018398
 8003934:	20000d2c 	.word	0x20000d2c
 8003938:	080183c4 	.word	0x080183c4
 800393c:	20000d30 	.word	0x20000d30
 8003940:	080183ec 	.word	0x080183ec
 8003944:	20000d34 	.word	0x20000d34

08003948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b094      	sub	sp, #80	; 0x50
 800394c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394e:	f107 0320 	add.w	r3, r7, #32
 8003952:	2230      	movs	r2, #48	; 0x30
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f00f f9e1 	bl	8012d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <SystemClock_Config+0xd0>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <SystemClock_Config+0xd0>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <SystemClock_Config+0xd0>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <SystemClock_Config+0xd4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <SystemClock_Config+0xd4>)
 800398a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <SystemClock_Config+0xd4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800399c:	2302      	movs	r3, #2
 800399e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a0:	2301      	movs	r3, #1
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a4:	2310      	movs	r3, #16
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a8:	2302      	movs	r3, #2
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039b0:	2308      	movs	r3, #8
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80039b4:	23d8      	movs	r3, #216	; 0xd8
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039b8:	2302      	movs	r3, #2
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80039bc:	2302      	movs	r3, #2
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c0:	f107 0320 	add.w	r3, r7, #32
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 fa07 	bl	8009dd8 <HAL_RCC_OscConfig>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80039d0:	f000 fbac 	bl	800412c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80039d4:	f006 f9b0 	bl	8009d38 <HAL_PWREx_EnableOverDrive>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80039de:	f000 fba5 	bl	800412c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039e2:	230f      	movs	r3, #15
 80039e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e6:	2302      	movs	r3, #2
 80039e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	2107      	movs	r1, #7
 8003a00:	4618      	mov	r0, r3
 8003a02:	f006 fc8d 	bl	800a320 <HAL_RCC_ClockConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003a0c:	f000 fb8e 	bl	800412c <Error_Handler>
  }
}
 8003a10:	bf00      	nop
 8003a12:	3750      	adds	r7, #80	; 0x50
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000

08003a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <MX_I2C1_Init+0x78>)
 8003a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <MX_I2C1_Init+0x7c>)
 8003a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a5a:	480e      	ldr	r0, [pc, #56]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a5c:	f005 fb7c 	bl	8009158 <HAL_I2C_Init>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a66:	f000 fb61 	bl	800412c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4809      	ldr	r0, [pc, #36]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a6e:	f006 f8cb 	bl	8009c08 <HAL_I2CEx_ConfigAnalogFilter>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a78:	f000 fb58 	bl	800412c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <MX_I2C1_Init+0x74>)
 8003a80:	f006 f90d 	bl	8009c9e <HAL_I2CEx_ConfigDigitalFilter>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a8a:	f000 fb4f 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000970 	.word	0x20000970
 8003a98:	40005400 	.word	0x40005400
 8003a9c:	a0404e72 	.word	0xa0404e72

08003aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <MX_SPI1_Init+0x78>)
 8003aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003abe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ace:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003ad2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003aee:	2207      	movs	r2, #7
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003afe:	4805      	ldr	r0, [pc, #20]	; (8003b14 <MX_SPI1_Init+0x74>)
 8003b00:	f007 f970 	bl	800ade4 <HAL_SPI_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b0a:	f000 fb0f 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200009c4 	.word	0x200009c4
 8003b18:	40013000 	.word	0x40013000

08003b1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <MX_SPI2_Init+0x78>)
 8003b24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b3a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b52:	2228      	movs	r2, #40	; 0x28
 8003b54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <MX_SPI2_Init+0x74>)
 8003b7c:	f007 f932 	bl	800ade4 <HAL_SPI_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003b86:	f000 fad1 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000a28 	.word	0x20000a28
 8003b94:	40003800 	.word	0x40003800

08003b98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b09a      	sub	sp, #104	; 0x68
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
 8003bc8:	615a      	str	r2, [r3, #20]
 8003bca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	222c      	movs	r2, #44	; 0x2c
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00f f8a3 	bl	8012d1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003bda:	4a56      	ldr	r2, [pc, #344]	; (8003d34 <MX_TIM1_Init+0x19c>)
 8003bdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003be0:	22d7      	movs	r2, #215	; 0xd7
 8003be2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be4:	4b52      	ldr	r3, [pc, #328]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003bec:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003bf0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c04:	484a      	ldr	r0, [pc, #296]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c06:	f008 f84d 	bl	800bca4 <HAL_TIM_Base_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003c10:	f000 fa8c 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c18:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4843      	ldr	r0, [pc, #268]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c22:	f008 fee3 	bl	800c9ec <HAL_TIM_ConfigClockSource>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003c2c:	f000 fa7e 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c30:	483f      	ldr	r0, [pc, #252]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c32:	f008 f907 	bl	800be44 <HAL_TIM_PWM_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003c3c:	f000 fa76 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c50:	4619      	mov	r1, r3
 8003c52:	4837      	ldr	r0, [pc, #220]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c54:	f009 fcde 	bl	800d614 <HAL_TIMEx_MasterConfigSynchronization>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003c5e:	f000 fa65 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c62:	2360      	movs	r3, #96	; 0x60
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003c72:	2304      	movs	r3, #4
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	4619      	mov	r1, r3
 8003c86:	482a      	ldr	r0, [pc, #168]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003c88:	f008 fd9c 	bl	800c7c4 <HAL_TIM_PWM_ConfigChannel>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003c92:	f000 fa4b 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4824      	ldr	r0, [pc, #144]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003ca0:	f008 fd90 	bl	800c7c4 <HAL_TIM_PWM_ConfigChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003caa:	f000 fa3f 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	481e      	ldr	r0, [pc, #120]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003cb8:	f008 fd84 	bl	800c7c4 <HAL_TIM_PWM_ConfigChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003cc2:	f000 fa33 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cca:	220c      	movs	r2, #12
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4818      	ldr	r0, [pc, #96]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003cd0:	f008 fd78 	bl	800c7c4 <HAL_TIM_PWM_ConfigChannel>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003cda:	f000 fa27 	bl	800412c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4807      	ldr	r0, [pc, #28]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003d14:	f009 fd0c 	bl	800d730 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003d1e:	f000 fa05 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d22:	4803      	ldr	r0, [pc, #12]	; (8003d30 <MX_TIM1_Init+0x198>)
 8003d24:	f001 ffe0 	bl	8005ce8 <HAL_TIM_MspPostInit>

}
 8003d28:	bf00      	nop
 8003d2a:	3768      	adds	r7, #104	; 0x68
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000a8c 	.word	0x20000a8c
 8003d34:	40010000 	.word	0x40010000

08003d38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <MX_TIM3_Init+0xa4>)
 8003d5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d5e:	226b      	movs	r2, #107	; 0x6b
 8003d60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003d7c:	4816      	ldr	r0, [pc, #88]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d7e:	f008 f9bd 	bl	800c0fc <HAL_TIM_IC_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003d88:	f000 f9d0 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	480f      	ldr	r0, [pc, #60]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003d9c:	f009 fc3a 	bl	800d614 <HAL_TIMEx_MasterConfigSynchronization>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003da6:	f000 f9c1 	bl	800412c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003dae:	2301      	movs	r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_TIM3_Init+0xa0>)
 8003dc2:	f008 fc62 	bl	800c68a <HAL_TIM_IC_ConfigChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003dcc:	f000 f9ae 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000ad8 	.word	0x20000ad8
 8003ddc:	40000400 	.word	0x40000400

08003de0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <MX_UART4_Init+0x58>)
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <MX_UART4_Init+0x5c>)
 8003de8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_UART4_Init+0x58>)
 8003dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003df0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <MX_UART4_Init+0x58>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_UART4_Init+0x58>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e06:	220c      	movs	r2, #12
 8003e08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003e22:	4805      	ldr	r0, [pc, #20]	; (8003e38 <MX_UART4_Init+0x58>)
 8003e24:	f009 fd20 	bl	800d868 <HAL_UART_Init>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003e2e:	f000 f97d 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000b24 	.word	0x20000b24
 8003e3c:	40004c00 	.word	0x40004c00

08003e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <MX_USART2_UART_Init+0x64>)
 8003e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e66:	2204      	movs	r2, #4
 8003e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e7e:	2210      	movs	r2, #16
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e8a:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_USART2_UART_Init+0x60>)
 8003e8c:	f009 fcec 	bl	800d868 <HAL_UART_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003e96:	f000 f949 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000bac 	.word	0x20000bac
 8003ea4:	40004400 	.word	0x40004400

08003ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <MX_USART3_UART_Init+0x5c>)
 8003eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003eb4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ece:	2208      	movs	r2, #8
 8003ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <MX_USART3_UART_Init+0x58>)
 8003eec:	f009 fcbc 	bl	800d868 <HAL_UART_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003ef6:	f000 f919 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000c34 	.word	0x20000c34
 8003f04:	40004800 	.word	0x40004800

08003f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_DMA_Init+0x38>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <MX_DMA_Init+0x38>)
 8003f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_DMA_Init+0x38>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2108      	movs	r1, #8
 8003f2a:	2010      	movs	r0, #16
 8003f2c:	f004 fb2a 	bl	8008584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003f30:	2010      	movs	r0, #16
 8003f32:	f004 fb43 	bl	80085bc <HAL_NVIC_EnableIRQ>

}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a40      	ldr	r2, [pc, #256]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b38      	ldr	r3, [pc, #224]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	4b35      	ldr	r3, [pc, #212]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a34      	ldr	r2, [pc, #208]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b32      	ldr	r3, [pc, #200]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a28      	ldr	r2, [pc, #160]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <MX_GPIO_Init+0x11c>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd8:	4822      	ldr	r0, [pc, #136]	; (8004064 <MX_GPIO_Init+0x120>)
 8003fda:	f005 f8a3 	bl	8009124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8003fe4:	4820      	ldr	r0, [pc, #128]	; (8004068 <MX_GPIO_Init+0x124>)
 8003fe6:	f005 f89d 	bl	8009124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8003fea:	2304      	movs	r3, #4
 8003fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	481b      	ldr	r0, [pc, #108]	; (800406c <MX_GPIO_Init+0x128>)
 8003ffe:	f004 fef5 	bl	8008dec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004008:	2301      	movs	r3, #1
 800400a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	4619      	mov	r1, r3
 800401a:	4812      	ldr	r0, [pc, #72]	; (8004064 <MX_GPIO_Init+0x120>)
 800401c:	f004 fee6 	bl	8008dec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8004020:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8004024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004026:	2301      	movs	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	480b      	ldr	r0, [pc, #44]	; (8004068 <MX_GPIO_Init+0x124>)
 800403a:	f004 fed7 	bl	8008dec <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 800403e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	4619      	mov	r1, r3
 8004052:	4807      	ldr	r0, [pc, #28]	; (8004070 <MX_GPIO_Init+0x12c>)
 8004054:	f004 feca 	bl	8008dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004058:	bf00      	nop
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	40021000 	.word	0x40021000
 8004068:	40020c00 	.word	0x40020c00
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400

08004074 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fe fb8b 	bl	8002798 <TaskSensorData>
  /* USER CODE END 5 */
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fc2e 	bl	80018f4 <TaskController>
  /* USER CODE END RunTaskController */
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fe fa6d 	bl	8002588 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe f930 	bl	8002324 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe fa3d 	bl	8002554 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd fde0 	bl	8001cb0 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fe fe71 	bl	8002de8 <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d101      	bne.n	8004124 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004120:	f004 f934 	bl	800838c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004130:	b672      	cpsid	i
}
 8004132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004134:	e7fe      	b.n	8004134 <Error_Handler+0x8>

08004136 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4603      	mov	r3, r0
 8004144:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d204      	bcs.n	8004158 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	701a      	strb	r2, [r3, #0]
  }
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e002      	b.n	8004196 <_strnlen_s+0x16>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <_strnlen_s+0x28>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	603a      	str	r2, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f3      	bne.n	8004190 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	1ad3      	subs	r3, r2, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	2b2f      	cmp	r3, #47	; 0x2f
 80041c8:	d904      	bls.n	80041d4 <_is_digit+0x1a>
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b39      	cmp	r3, #57	; 0x39
 80041ce:	d801      	bhi.n	80041d4 <_is_digit+0x1a>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <_is_digit+0x1c>
 80041d4:	2300      	movs	r3, #0
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80041f4:	e00e      	b.n	8004214 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4618      	mov	r0, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6011      	str	r1, [r2, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	4403      	add	r3, r0
 8004210:	3b30      	subs	r3, #48	; 0x30
 8004212:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffcd 	bl	80041ba <_is_digit>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e7      	bne.n	80041f6 <_atoi+0xe>
  }
  return i;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d125      	bne.n	8004298 <_out_rev+0x68>
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d120      	bne.n	8004298 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e00a      	b.n	8004272 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	1c53      	adds	r3, r2, #1
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	68fc      	ldr	r4, [r7, #12]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	2020      	movs	r0, #32
 800426a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3301      	adds	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	429a      	cmp	r2, r3
 8004278:	d3f0      	bcc.n	800425c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800427a:	e00d      	b.n	8004298 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	3b01      	subs	r3, #1
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	4413      	add	r3, r2
 8004288:	7818      	ldrb	r0, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	1c53      	adds	r3, r2, #1
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	68fc      	ldr	r4, [r7, #12]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	47a0      	blx	r4
  while (len) {
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ee      	bne.n	800427c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80042a8:	e007      	b.n	80042ba <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	1c53      	adds	r3, r2, #1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	68fc      	ldr	r4, [r7, #12]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	2020      	movs	r0, #32
 80042b8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d8f1      	bhi.n	80042aa <_out_rev+0x7a>
    }
  }

  return idx;
 80042c6:	687b      	ldr	r3, [r7, #4]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd90      	pop	{r4, r7, pc}

080042d0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af04      	add	r7, sp, #16
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d136      	bne.n	8004356 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <_ntoa_format+0x50>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <_ntoa_format+0x50>
 80042f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <_ntoa_format+0x3a>
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <_ntoa_format+0x50>
      width--;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	3b01      	subs	r3, #1
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004310:	e006      	b.n	8004320 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	61fa      	str	r2, [r7, #28]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	2230      	movs	r2, #48	; 0x30
 800431e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	429a      	cmp	r2, r3
 8004326:	d20a      	bcs.n	800433e <_ntoa_format+0x6e>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b1f      	cmp	r3, #31
 800432c:	d9f1      	bls.n	8004312 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800432e:	e006      	b.n	800433e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	61fa      	str	r2, [r7, #28]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	2230      	movs	r2, #48	; 0x30
 800433c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <_ntoa_format+0x86>
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	429a      	cmp	r2, r3
 800434e:	d202      	bcs.n	8004356 <_ntoa_format+0x86>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b1f      	cmp	r3, #31
 8004354:	d9ec      	bls.n	8004330 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d058      	beq.n	8004412 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <_ntoa_format+0xc8>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <_ntoa_format+0xc8>
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	429a      	cmp	r2, r3
 8004376:	d003      	beq.n	8004380 <_ntoa_format+0xb0>
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d10b      	bne.n	8004398 <_ntoa_format+0xc8>
      len--;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3b01      	subs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <_ntoa_format+0xc8>
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	2b10      	cmp	r3, #16
 8004390:	d102      	bne.n	8004398 <_ntoa_format+0xc8>
        len--;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b01      	subs	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	2b10      	cmp	r3, #16
 800439c:	d10f      	bne.n	80043be <_ntoa_format+0xee>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <_ntoa_format+0xee>
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b1f      	cmp	r3, #31
 80043ac:	d807      	bhi.n	80043be <_ntoa_format+0xee>
      buf[len++] = 'x';
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	61fa      	str	r2, [r7, #28]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4413      	add	r3, r2
 80043b8:	2278      	movs	r2, #120	; 0x78
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e01f      	b.n	80043fe <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d10f      	bne.n	80043e4 <_ntoa_format+0x114>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <_ntoa_format+0x114>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b1f      	cmp	r3, #31
 80043d2:	d807      	bhi.n	80043e4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	61fa      	str	r2, [r7, #28]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	2258      	movs	r2, #88	; 0x58
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e00c      	b.n	80043fe <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d109      	bne.n	80043fe <_ntoa_format+0x12e>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b1f      	cmp	r3, #31
 80043ee:	d806      	bhi.n	80043fe <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	61fa      	str	r2, [r7, #28]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	2262      	movs	r2, #98	; 0x62
 80043fc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b1f      	cmp	r3, #31
 8004402:	d806      	bhi.n	8004412 <_ntoa_format+0x142>
      buf[len++] = '0';
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4413      	add	r3, r2
 800440e:	2230      	movs	r2, #48	; 0x30
 8004410:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b1f      	cmp	r3, #31
 8004416:	d824      	bhi.n	8004462 <_ntoa_format+0x192>
    if (negative) {
 8004418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	61fa      	str	r2, [r7, #28]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4413      	add	r3, r2
 800442a:	222d      	movs	r2, #45	; 0x2d
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e018      	b.n	8004462 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	61fa      	str	r2, [r7, #28]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4413      	add	r3, r2
 8004444:	222b      	movs	r2, #43	; 0x2b
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e00b      	b.n	8004462 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d006      	beq.n	8004462 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	61fa      	str	r2, [r7, #28]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	2220      	movs	r2, #32
 8004460:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fed9 	bl	8004230 <_out_rev>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b096      	sub	sp, #88	; 0x58
 800448c:	af08      	add	r7, sp, #32
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80044a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a2:	f023 0310 	bic.w	r3, r3, #16
 80044a6:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <_ntoa_long+0x30>
 80044b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d032      	beq.n	800451e <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80044b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80044c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044c2:	fb01 f202 	mul.w	r2, r1, r2
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80044cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d804      	bhi.n	80044de <_ntoa_long+0x56>
 80044d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044d8:	3330      	adds	r3, #48	; 0x30
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	e00d      	b.n	80044fa <_ntoa_long+0x72>
 80044de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <_ntoa_long+0x64>
 80044e8:	2241      	movs	r2, #65	; 0x41
 80044ea:	e000      	b.n	80044ee <_ntoa_long+0x66>
 80044ec:	2261      	movs	r2, #97	; 0x61
 80044ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044f2:	4413      	add	r3, r2
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	3b0a      	subs	r3, #10
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	6379      	str	r1, [r7, #52]	; 0x34
 8004500:	3338      	adds	r3, #56	; 0x38
 8004502:	443b      	add	r3, r7
 8004504:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <_ntoa_long+0x96>
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	2b1f      	cmp	r3, #31
 800451c:	d9cc      	bls.n	80044b8 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004520:	9306      	str	r3, [sp, #24]
 8004522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004524:	9305      	str	r3, [sp, #20]
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	9304      	str	r3, [sp, #16]
 800452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	f107 0310 	add.w	r3, r7, #16
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fec3 	bl	80042d0 <_ntoa_format>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3738      	adds	r7, #56	; 0x38
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b096      	sub	sp, #88	; 0x58
 8004558:	af08      	add	r7, sp, #32
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800456a:	4313      	orrs	r3, r2
 800456c:	d103      	bne.n	8004576 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800456e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <_ntoa_long_long+0x34>
 8004580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004584:	4313      	orrs	r3, r2
 8004586:	d037      	beq.n	80045f8 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004588:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800458c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004590:	f7fc fbf2 	bl	8000d78 <__aeabi_uldivmod>
 8004594:	4613      	mov	r3, r2
 8004596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800459a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d804      	bhi.n	80045ac <_ntoa_long_long+0x58>
 80045a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045a6:	3330      	adds	r3, #48	; 0x30
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	e00d      	b.n	80045c8 <_ntoa_long_long+0x74>
 80045ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <_ntoa_long_long+0x66>
 80045b6:	2241      	movs	r2, #65	; 0x41
 80045b8:	e000      	b.n	80045bc <_ntoa_long_long+0x68>
 80045ba:	2261      	movs	r2, #97	; 0x61
 80045bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045c0:	4413      	add	r3, r2
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3b0a      	subs	r3, #10
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	1c59      	adds	r1, r3, #1
 80045cc:	6379      	str	r1, [r7, #52]	; 0x34
 80045ce:	3338      	adds	r3, #56	; 0x38
 80045d0:	443b      	add	r3, r7
 80045d2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80045d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80045de:	f7fc fbcb 	bl	8000d78 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80045ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d002      	beq.n	80045f8 <_ntoa_long_long+0xa4>
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	2b1f      	cmp	r3, #31
 80045f6:	d9c7      	bls.n	8004588 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80045f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045fc:	9206      	str	r2, [sp, #24]
 80045fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004600:	9205      	str	r2, [sp, #20]
 8004602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004604:	9204      	str	r2, [sp, #16]
 8004606:	9303      	str	r3, [sp, #12]
 8004608:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800460c:	9302      	str	r3, [sp, #8]
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fe56 	bl	80042d0 <_ntoa_format>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3738      	adds	r7, #56	; 0x38
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b09d      	sub	sp, #116	; 0x74
 8004634:	af04      	add	r7, sp, #16
 8004636:	6178      	str	r0, [r7, #20]
 8004638:	6139      	str	r1, [r7, #16]
 800463a:	60fa      	str	r2, [r7, #12]
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800465a:	f7fc fa5d 	bl	8000b18 <__aeabi_dcmpeq>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10f      	bne.n	8004684 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	2303      	movs	r3, #3
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	4ba7      	ldr	r3, [pc, #668]	; (8004910 <_ftoa+0x2e0>)
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6939      	ldr	r1, [r7, #16]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff fdd8 	bl	8004230 <_out_rev>
 8004680:	4603      	mov	r3, r0
 8004682:	e222      	b.n	8004aca <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800468c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004690:	f7fc fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	2304      	movs	r3, #4
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	4b9b      	ldr	r3, [pc, #620]	; (8004914 <_ftoa+0x2e4>)
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	6978      	ldr	r0, [r7, #20]
 80046b2:	f7ff fdbd 	bl	8004230 <_out_rev>
 80046b6:	4603      	mov	r3, r0
 80046b8:	e207      	b.n	8004aca <_ftoa+0x49a>
  if (value > DBL_MAX)
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
 80046be:	4b96      	ldr	r3, [pc, #600]	; (8004918 <_ftoa+0x2e8>)
 80046c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c4:	f7fc fa50 	bl	8000b68 <__aeabi_dcmpgt>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80046ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <_ftoa+0xac>
 80046d8:	4b90      	ldr	r3, [pc, #576]	; (800491c <_ftoa+0x2ec>)
 80046da:	e000      	b.n	80046de <_ftoa+0xae>
 80046dc:	4b90      	ldr	r3, [pc, #576]	; (8004920 <_ftoa+0x2f0>)
 80046de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046e0:	f002 0204 	and.w	r2, r2, #4
 80046e4:	2a00      	cmp	r2, #0
 80046e6:	d001      	beq.n	80046ec <_ftoa+0xbc>
 80046e8:	2204      	movs	r2, #4
 80046ea:	e000      	b.n	80046ee <_ftoa+0xbe>
 80046ec:	2203      	movs	r2, #3
 80046ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80046f0:	9103      	str	r1, [sp, #12]
 80046f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80046f4:	9102      	str	r1, [sp, #8]
 80046f6:	9201      	str	r2, [sp, #4]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	6978      	ldr	r0, [r7, #20]
 8004702:	f7ff fd95 	bl	8004230 <_out_rev>
 8004706:	4603      	mov	r3, r0
 8004708:	e1df      	b.n	8004aca <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800470a:	a37d      	add	r3, pc, #500	; (adr r3, 8004900 <_ftoa+0x2d0>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004714:	f7fc fa28 	bl	8000b68 <__aeabi_dcmpgt>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <_ftoa+0x102>
 800471e:	a37a      	add	r3, pc, #488	; (adr r3, 8004908 <_ftoa+0x2d8>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004728:	f7fc fa00 	bl	8000b2c <__aeabi_dcmplt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00f      	beq.n	8004752 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	ed97 0b00 	vldr	d0, [r7]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	6939      	ldr	r1, [r7, #16]
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	f000 f9c9 	bl	8004ae0 <_etoa>
 800474e:	4603      	mov	r3, r0
 8004750:	e1bb      	b.n	8004aca <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004764:	f7fc f9e2 	bl	8000b2c <__aeabi_dcmplt>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <_ftoa+0x15c>
    negative = true;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8004774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	f7fb fdaa 	bl	80002d8 <__aeabi_dsub>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800478c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004796:	2306      	movs	r3, #6
 8004798:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800479a:	e00a      	b.n	80047b2 <_ftoa+0x182>
    buf[len++] = '0';
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047a2:	3360      	adds	r3, #96	; 0x60
 80047a4:	443b      	add	r3, r7
 80047a6:	2230      	movs	r2, #48	; 0x30
 80047a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80047ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ae:	3b01      	subs	r3, #1
 80047b0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	2b1f      	cmp	r3, #31
 80047b6:	d802      	bhi.n	80047be <_ftoa+0x18e>
 80047b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ba:	2b09      	cmp	r3, #9
 80047bc:	d8ee      	bhi.n	800479c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80047be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047c2:	f7fc f9f1 	bl	8000ba8 <__aeabi_d2iz>
 80047c6:	4603      	mov	r3, r0
 80047c8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80047ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80047cc:	f7fb fed2 	bl	8000574 <__aeabi_i2d>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047d8:	f7fb fd7e 	bl	80002d8 <__aeabi_dsub>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	4a4f      	ldr	r2, [pc, #316]	; (8004924 <_ftoa+0x2f4>)
 80047e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb ff2a 	bl	8000648 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80047fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004800:	f7fc f9fa 	bl	8000bf8 <__aeabi_d2uiz>
 8004804:	4603      	mov	r3, r0
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004808:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800480a:	f7fb fea3 	bl	8000554 <__aeabi_ui2d>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004816:	f7fb fd5f 	bl	80002d8 <__aeabi_dsub>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b40      	ldr	r3, [pc, #256]	; (8004928 <_ftoa+0x2f8>)
 8004828:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800482c:	f7fc f99c 	bl	8000b68 <__aeabi_dcmpgt>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <_ftoa+0x234>
    ++frac;
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	3301      	adds	r3, #1
 800483a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800483c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800483e:	f7fb fe89 	bl	8000554 <__aeabi_ui2d>
 8004842:	4a38      	ldr	r2, [pc, #224]	; (8004924 <_ftoa+0x2f4>)
 8004844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fc f981 	bl	8000b54 <__aeabi_dcmpge>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <_ftoa+0x25e>
      frac = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485e:	3301      	adds	r3, #1
 8004860:	657b      	str	r3, [r7, #84]	; 0x54
 8004862:	e014      	b.n	800488e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <_ftoa+0x2f8>)
 800486a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800486e:	f7fc f95d 	bl	8000b2c <__aeabi_dcmplt>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <_ftoa+0x258>
 800487e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	3301      	adds	r3, #1
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800488e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004890:	2b00      	cmp	r3, #0
 8004892:	d14b      	bne.n	800492c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8004894:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004896:	f7fb fe6d 	bl	8000574 <__aeabi_i2d>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a2:	f7fb fd19 	bl	80002d8 <__aeabi_dsub>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80048ae:	2301      	movs	r3, #1
 80048b0:	461c      	mov	r4, r3
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <_ftoa+0x2f8>)
 80048b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80048bc:	f7fc f936 	bl	8000b2c <__aeabi_dcmplt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <_ftoa+0x29a>
 80048c6:	2300      	movs	r3, #0
 80048c8:	461c      	mov	r4, r3
 80048ca:	b2e3      	uxtb	r3, r4
 80048cc:	f083 0301 	eor.w	r3, r3, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <_ftoa+0x2ba>
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <_ftoa+0x2f8>)
 80048dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80048e0:	f7fc f942 	bl	8000b68 <__aeabi_dcmpgt>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d064      	beq.n	80049b4 <_ftoa+0x384>
 80048ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8081 	beq.w	80049f8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80048f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f8:	3301      	adds	r3, #1
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	e07c      	b.n	80049f8 <_ftoa+0x3c8>
 80048fe:	bf00      	nop
 8004900:	00000000 	.word	0x00000000
 8004904:	41cdcd65 	.word	0x41cdcd65
 8004908:	00000000 	.word	0x00000000
 800490c:	c1cdcd65 	.word	0xc1cdcd65
 8004910:	08018408 	.word	0x08018408
 8004914:	0801840c 	.word	0x0801840c
 8004918:	7fefffff 	.word	0x7fefffff
 800491c:	08018414 	.word	0x08018414
 8004920:	0801841c 	.word	0x0801841c
 8004924:	08018510 	.word	0x08018510
 8004928:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800492c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004930:	e01f      	b.n	8004972 <_ftoa+0x342>
      --count;
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	3b01      	subs	r3, #1
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8004938:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800493a:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <_ftoa+0x4a4>)
 800493c:	fba3 2301 	umull	r2, r3, r3, r1
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	1aca      	subs	r2, r1, r3
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004954:	3230      	adds	r2, #48	; 0x30
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	3360      	adds	r3, #96	; 0x60
 800495a:	443b      	add	r3, r7
 800495c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	4a5c      	ldr	r2, [pc, #368]	; (8004ad4 <_ftoa+0x4a4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	653b      	str	r3, [r7, #80]	; 0x50
 800496c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004974:	2b1f      	cmp	r3, #31
 8004976:	d9dc      	bls.n	8004932 <_ftoa+0x302>
 8004978:	e009      	b.n	800498e <_ftoa+0x35e>
        break;
 800497a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800497c:	e007      	b.n	800498e <_ftoa+0x35e>
      buf[len++] = '0';
 800497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004984:	3360      	adds	r3, #96	; 0x60
 8004986:	443b      	add	r3, r7
 8004988:	2230      	movs	r2, #48	; 0x30
 800498a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	2b1f      	cmp	r3, #31
 8004992:	d804      	bhi.n	800499e <_ftoa+0x36e>
 8004994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004996:	1e5a      	subs	r2, r3, #1
 8004998:	64fa      	str	r2, [r7, #76]	; 0x4c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ef      	bne.n	800497e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a0:	2b1f      	cmp	r3, #31
 80049a2:	d829      	bhi.n	80049f8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80049a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049aa:	3360      	adds	r3, #96	; 0x60
 80049ac:	443b      	add	r3, r7
 80049ae:	222e      	movs	r2, #46	; 0x2e
 80049b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80049b4:	e020      	b.n	80049f8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80049b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049b8:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <_ftoa+0x4a8>)
 80049ba:	fb83 1302 	smull	r1, r3, r3, r2
 80049be:	1099      	asrs	r1, r3, #2
 80049c0:	17d3      	asrs	r3, r2, #31
 80049c2:	1ac9      	subs	r1, r1, r3
 80049c4:	460b      	mov	r3, r1
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	1ad1      	subs	r1, r2, r3
 80049ce:	b2ca      	uxtb	r2, r1
 80049d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80049d6:	3230      	adds	r2, #48	; 0x30
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	3360      	adds	r3, #96	; 0x60
 80049dc:	443b      	add	r3, r7
 80049de:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80049e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e4:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <_ftoa+0x4a8>)
 80049e6:	fb82 1203 	smull	r1, r2, r2, r3
 80049ea:	1092      	asrs	r2, r2, #2
 80049ec:	17db      	asrs	r3, r3, #31
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54
 80049f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	2b1f      	cmp	r3, #31
 80049fc:	d9db      	bls.n	80049b6 <_ftoa+0x386>
 80049fe:	e000      	b.n	8004a02 <_ftoa+0x3d2>
      break;
 8004a00:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d123      	bne.n	8004a54 <_ftoa+0x424>
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01e      	beq.n	8004a54 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <_ftoa+0x416>
 8004a1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <_ftoa+0x3fe>
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <_ftoa+0x416>
      width--;
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	3b01      	subs	r3, #1
 8004a32:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004a34:	e007      	b.n	8004a46 <_ftoa+0x416>
      buf[len++] = '0';
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a3c:	3360      	adds	r3, #96	; 0x60
 8004a3e:	443b      	add	r3, r7
 8004a40:	2230      	movs	r2, #48	; 0x30
 8004a42:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004a46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d202      	bcs.n	8004a54 <_ftoa+0x424>
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a50:	2b1f      	cmp	r3, #31
 8004a52:	d9f0      	bls.n	8004a36 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a56:	2b1f      	cmp	r3, #31
 8004a58:	d827      	bhi.n	8004aaa <_ftoa+0x47a>
    if (negative) {
 8004a5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <_ftoa+0x444>
      buf[len++] = '-';
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a68:	3360      	adds	r3, #96	; 0x60
 8004a6a:	443b      	add	r3, r7
 8004a6c:	222d      	movs	r2, #45	; 0x2d
 8004a6e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004a72:	e01a      	b.n	8004aaa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a84:	3360      	adds	r3, #96	; 0x60
 8004a86:	443b      	add	r3, r7
 8004a88:	222b      	movs	r2, #43	; 0x2b
 8004a8a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004a8e:	e00c      	b.n	8004aaa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <_ftoa+0x47a>
      buf[len++] = ' ';
 8004a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004aa0:	3360      	adds	r3, #96	; 0x60
 8004aa2:	443b      	add	r3, r7
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aac:	9303      	str	r3, [sp, #12]
 8004aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	f107 0318 	add.w	r3, r7, #24
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	6939      	ldr	r1, [r7, #16]
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff fbb4 	bl	8004230 <_out_rev>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3764      	adds	r7, #100	; 0x64
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	cccccccd 	.word	0xcccccccd
 8004ad8:	66666667 	.word	0x66666667
 8004adc:	00000000 	.word	0x00000000

08004ae0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	b09f      	sub	sp, #124	; 0x7c
 8004ae6:	af06      	add	r7, sp, #24
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24
 8004aea:	6239      	str	r1, [r7, #32]
 8004aec:	61fa      	str	r2, [r7, #28]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004af8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004afc:	f7fc f80c 	bl	8000b18 <__aeabi_dcmpeq>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d014      	beq.n	8004b30 <_etoa+0x50>
 8004b06:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0a:	4bc1      	ldr	r3, [pc, #772]	; (8004e10 <_etoa+0x330>)
 8004b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b10:	f7fc f82a 	bl	8000b68 <__aeabi_dcmpgt>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <_etoa+0x50>
 8004b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004b22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b26:	f7fc f801 	bl	8000b2c <__aeabi_dcmplt>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	ed97 0b04 	vldr	d0, [r7, #16]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	6a39      	ldr	r1, [r7, #32]
 8004b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b4e:	f7ff fd6f 	bl	8004630 <_ftoa>
 8004b52:	4603      	mov	r3, r0
 8004b54:	e23f      	b.n	8004fd6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8004b56:	2301      	movs	r3, #1
 8004b58:	461e      	mov	r6, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b66:	f7fb ffe1 	bl	8000b2c <__aeabi_dcmplt>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <_etoa+0x94>
 8004b70:	2300      	movs	r3, #0
 8004b72:	461e      	mov	r6, r3
 8004b74:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8004b78:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <_etoa+0xb4>
    value = -value;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	ed97 7b00 	vldr	d7, [r7]
 8004b90:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004ba0:	2306      	movs	r3, #6
 8004ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	0d0a      	lsrs	r2, r1, #20
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bce:	4690      	mov	r8, r2
 8004bd0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8004bd4:	4644      	mov	r4, r8
 8004bd6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8004bda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004bde:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004be2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004be4:	f7fb fcc6 	bl	8000574 <__aeabi_i2d>
 8004be8:	a37d      	add	r3, pc, #500	; (adr r3, 8004de0 <_etoa+0x300>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fd2b 	bl	8000648 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	a37b      	add	r3, pc, #492	; (adr r3, 8004de8 <_etoa+0x308>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fb6c 	bl	80002dc <__adddf3>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	4b7f      	ldr	r3, [pc, #508]	; (8004e14 <_etoa+0x334>)
 8004c16:	f7fb fb5f 	bl	80002d8 <__aeabi_dsub>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	a373      	add	r3, pc, #460	; (adr r3, 8004df0 <_etoa+0x310>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f7fb fd0e 	bl	8000648 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb fb52 	bl	80002dc <__adddf3>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7fb ffb2 	bl	8000ba8 <__aeabi_d2iz>
 8004c44:	4603      	mov	r3, r0
 8004c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004c48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c4a:	f7fb fc93 	bl	8000574 <__aeabi_i2d>
 8004c4e:	a36a      	add	r3, pc, #424	; (adr r3, 8004df8 <_etoa+0x318>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fcf8 	bl	8000648 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	4b6c      	ldr	r3, [pc, #432]	; (8004e18 <_etoa+0x338>)
 8004c66:	f7fb fb39 	bl	80002dc <__adddf3>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	f7fb ff99 	bl	8000ba8 <__aeabi_d2iz>
 8004c76:	4603      	mov	r3, r0
 8004c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004c7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c7c:	f7fb fc7a 	bl	8000574 <__aeabi_i2d>
 8004c80:	a35f      	add	r3, pc, #380	; (adr r3, 8004e00 <_etoa+0x320>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f7fb fcdf 	bl	8000648 <__aeabi_dmul>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4614      	mov	r4, r2
 8004c90:	461d      	mov	r5, r3
 8004c92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c94:	f7fb fc6e 	bl	8000574 <__aeabi_i2d>
 8004c98:	a35b      	add	r3, pc, #364	; (adr r3, 8004e08 <_etoa+0x328>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb fcd3 	bl	8000648 <__aeabi_dmul>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb fb15 	bl	80002d8 <__aeabi_dsub>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004cbe:	f7fb fcc3 	bl	8000648 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ccc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004cd0:	17da      	asrs	r2, r3, #31
 8004cd2:	469a      	mov	sl, r3
 8004cd4:	4693      	mov	fp, r2
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004ce8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004cec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	f7fb faf2 	bl	80002dc <__adddf3>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4690      	mov	r8, r2
 8004cfe:	4699      	mov	r9, r3
 8004d00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d0c:	f7fb fae4 	bl	80002d8 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4692      	mov	sl, r2
 8004d16:	469b      	mov	fp, r3
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <_etoa+0x33c>)
 8004d1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d22:	f7fb fdbb 	bl	800089c <__aeabi_ddiv>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <_etoa+0x340>)
 8004d34:	f7fb fad2 	bl	80002dc <__adddf3>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d40:	f7fb fdac 	bl	800089c <__aeabi_ddiv>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <_etoa+0x344>)
 8004d52:	f7fb fac3 	bl	80002dc <__adddf3>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004d5e:	f7fb fd9d 	bl	800089c <__aeabi_ddiv>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4650      	mov	r0, sl
 8004d68:	4659      	mov	r1, fp
 8004d6a:	f7fb fab7 	bl	80002dc <__adddf3>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb fd91 	bl	800089c <__aeabi_ddiv>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <_etoa+0x348>)
 8004d88:	f7fb faa8 	bl	80002dc <__adddf3>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4620      	mov	r0, r4
 8004d92:	4629      	mov	r1, r5
 8004d94:	f7fb fc58 	bl	8000648 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004da4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004da8:	f7fb fec0 	bl	8000b2c <__aeabi_dcmplt>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <_etoa+0x2ee>
    expval--;
 8004db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db4:	3b01      	subs	r3, #1
 8004db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004db8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <_etoa+0x340>)
 8004dc2:	f7fb fd6b 	bl	800089c <__aeabi_ddiv>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd0:	2b63      	cmp	r3, #99	; 0x63
 8004dd2:	dc2b      	bgt.n	8004e2c <_etoa+0x34c>
 8004dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004dda:	db27      	blt.n	8004e2c <_etoa+0x34c>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	e026      	b.n	8004e2e <_etoa+0x34e>
 8004de0:	509f79fb 	.word	0x509f79fb
 8004de4:	3fd34413 	.word	0x3fd34413
 8004de8:	8b60c8b3 	.word	0x8b60c8b3
 8004dec:	3fc68a28 	.word	0x3fc68a28
 8004df0:	636f4361 	.word	0x636f4361
 8004df4:	3fd287a7 	.word	0x3fd287a7
 8004df8:	0979a371 	.word	0x0979a371
 8004dfc:	400a934f 	.word	0x400a934f
 8004e00:	bbb55516 	.word	0xbbb55516
 8004e04:	40026bb1 	.word	0x40026bb1
 8004e08:	fefa39ef 	.word	0xfefa39ef
 8004e0c:	3fe62e42 	.word	0x3fe62e42
 8004e10:	7fefffff 	.word	0x7fefffff
 8004e14:	3ff80000 	.word	0x3ff80000
 8004e18:	3fe00000 	.word	0x3fe00000
 8004e1c:	402c0000 	.word	0x402c0000
 8004e20:	40240000 	.word	0x40240000
 8004e24:	40180000 	.word	0x40180000
 8004e28:	3ff00000 	.word	0x3ff00000
 8004e2c:	2305      	movs	r3, #5
 8004e2e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03d      	beq.n	8004eb8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004e3c:	a368      	add	r3, pc, #416	; (adr r3, 8004fe0 <_etoa+0x500>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e46:	f7fb fe85 	bl	8000b54 <__aeabi_dcmpge>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d024      	beq.n	8004e9a <_etoa+0x3ba>
 8004e50:	a365      	add	r3, pc, #404	; (adr r3, 8004fe8 <_etoa+0x508>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e5a:	f7fb fe67 	bl	8000b2c <__aeabi_dcmplt>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01a      	beq.n	8004e9a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	da07      	bge.n	8004e7e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8004e6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e7c:	e002      	b.n	8004e84 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e98:	e00e      	b.n	8004eb8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <_etoa+0x3d8>
 8004ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <_etoa+0x3d8>
        --prec;
 8004eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8004ebe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d904      	bls.n	8004ed2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed0:	e001      	b.n	8004ed6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <_etoa+0x40c>
 8004ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8004eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <_etoa+0x426>
    value /= conv.F;
 8004ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004efa:	f7fb fccf 	bl	800089c <__aeabi_ddiv>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004f0a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <_etoa+0x440>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e003      	b.n	8004f28 <_etoa+0x448>
 8004f20:	ed97 7b04 	vldr	d7, [r7, #16]
 8004f24:	ed87 7b02 	vstr	d7, [r7, #8]
 8004f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	6a39      	ldr	r1, [r7, #32]
 8004f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f48:	f7ff fb72 	bl	8004630 <_ftoa>
 8004f4c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8004f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d03f      	beq.n	8004fd4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <_etoa+0x484>
 8004f60:	2045      	movs	r0, #69	; 0x45
 8004f62:	e000      	b.n	8004f66 <_etoa+0x486>
 8004f64:	2065      	movs	r0, #101	; 0x65
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	1c53      	adds	r3, r2, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	425b      	neglt	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	0fdb      	lsrs	r3, r3, #31
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f86:	3a01      	subs	r2, #1
 8004f88:	2105      	movs	r1, #5
 8004f8a:	9105      	str	r1, [sp, #20]
 8004f8c:	9204      	str	r2, [sp, #16]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	9203      	str	r2, [sp, #12]
 8004f92:	220a      	movs	r2, #10
 8004f94:	9202      	str	r2, [sp, #8]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	9000      	str	r0, [sp, #0]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	6a39      	ldr	r1, [r7, #32]
 8004fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa2:	f7ff fa71 	bl	8004488 <_ntoa_long>
 8004fa6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00f      	beq.n	8004fd4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004fb4:	e007      	b.n	8004fc6 <_etoa+0x4e6>
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	1c53      	adds	r3, r2, #1
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6a39      	ldr	r1, [r7, #32]
 8004fc2:	2020      	movs	r0, #32
 8004fc4:	47a0      	blx	r4
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d8f0      	bhi.n	8004fb6 <_etoa+0x4d6>
    }
  }
  return idx;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3764      	adds	r7, #100	; 0x64
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	eb1c432d 	.word	0xeb1c432d
 8004fe4:	3f1a36e2 	.word	0x3f1a36e2
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	412e8480 	.word	0x412e8480

08004ff0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0a3      	sub	sp, #140	; 0x8c
 8004ff6:	af0a      	add	r7, sp, #40	; 0x28
 8004ff8:	6178      	str	r0, [r7, #20]
 8004ffa:	6139      	str	r1, [r7, #16]
 8004ffc:	60fa      	str	r2, [r7, #12]
 8004ffe:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 84cf 	bne.w	80059aa <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 800500c:	4ba8      	ldr	r3, [pc, #672]	; (80052b0 <_vsnprintf+0x2c0>)
 800500e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005010:	f000 bccb 	b.w	80059aa <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b25      	cmp	r3, #37	; 0x25
 800501a:	d00d      	beq.n	8005038 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	7818      	ldrb	r0, [r3, #0]
 8005020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005022:	1c53      	adds	r3, r2, #1
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005026:	697c      	ldr	r4, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	47a0      	blx	r4
      format++;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3301      	adds	r3, #1
 8005032:	60bb      	str	r3, [r7, #8]
      continue;
 8005034:	f000 bcb9 	b.w	80059aa <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	3301      	adds	r3, #1
 800503c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	3b20      	subs	r3, #32
 8005048:	2b10      	cmp	r3, #16
 800504a:	d857      	bhi.n	80050fc <_vsnprintf+0x10c>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <_vsnprintf+0x64>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080050d5 	.word	0x080050d5
 8005058:	080050fd 	.word	0x080050fd
 800505c:	080050fd 	.word	0x080050fd
 8005060:	080050e9 	.word	0x080050e9
 8005064:	080050fd 	.word	0x080050fd
 8005068:	080050fd 	.word	0x080050fd
 800506c:	080050fd 	.word	0x080050fd
 8005070:	080050fd 	.word	0x080050fd
 8005074:	080050fd 	.word	0x080050fd
 8005078:	080050fd 	.word	0x080050fd
 800507c:	080050fd 	.word	0x080050fd
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050fd 	.word	0x080050fd
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050fd 	.word	0x080050fd
 8005090:	080050fd 	.word	0x080050fd
 8005094:	08005099 	.word	0x08005099
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	2301      	movs	r3, #1
 80050a8:	653b      	str	r3, [r7, #80]	; 0x50
 80050aa:	e02a      	b.n	8005102 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80050ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	2301      	movs	r3, #1
 80050bc:	653b      	str	r3, [r7, #80]	; 0x50
 80050be:	e020      	b.n	8005102 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80050c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	2301      	movs	r3, #1
 80050d0:	653b      	str	r3, [r7, #80]	; 0x50
 80050d2:	e016      	b.n	8005102 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80050d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d6:	f043 0308 	orr.w	r3, r3, #8
 80050da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3301      	adds	r3, #1
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	2301      	movs	r3, #1
 80050e4:	653b      	str	r3, [r7, #80]	; 0x50
 80050e6:	e00c      	b.n	8005102 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80050e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ea:	f043 0310 	orr.w	r3, r3, #16
 80050ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	2301      	movs	r3, #1
 80050f8:	653b      	str	r3, [r7, #80]	; 0x50
 80050fa:	e002      	b.n	8005102 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80050fc:	2300      	movs	r3, #0
 80050fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005100:	bf00      	nop
      }
    } while (n);
 8005102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005104:	2b00      	cmp	r3, #0
 8005106:	d19c      	bne.n	8005042 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff f852 	bl	80041ba <_is_digit>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800511c:	f107 0308 	add.w	r3, r7, #8
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff f861 	bl	80041e8 <_atoi>
 8005126:	65b8      	str	r0, [r7, #88]	; 0x58
 8005128:	e01a      	b.n	8005160 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b2a      	cmp	r3, #42	; 0x2a
 8005130:	d116      	bne.n	8005160 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	2b00      	cmp	r3, #0
 8005144:	da07      	bge.n	8005156 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	425b      	negs	r3, r3
 8005152:	65bb      	str	r3, [r7, #88]	; 0x58
 8005154:	e001      	b.n	800515a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3301      	adds	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b2e      	cmp	r3, #46	; 0x2e
 800516a:	d127      	bne.n	80051bc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800516c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005172:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3301      	adds	r3, #1
 8005178:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff f81b 	bl	80041ba <_is_digit>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f82a 	bl	80041e8 <_atoi>
 8005194:	6578      	str	r0, [r7, #84]	; 0x54
 8005196:	e011      	b.n	80051bc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d10d      	bne.n	80051bc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80051a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80051b4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3b68      	subs	r3, #104	; 0x68
 80051c2:	2b12      	cmp	r3, #18
 80051c4:	d866      	bhi.n	8005294 <_vsnprintf+0x2a4>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <_vsnprintf+0x1dc>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	0800523f 	.word	0x0800523f
 80051d0:	08005295 	.word	0x08005295
 80051d4:	08005275 	.word	0x08005275
 80051d8:	08005295 	.word	0x08005295
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005295 	.word	0x08005295
 80051e4:	08005295 	.word	0x08005295
 80051e8:	08005295 	.word	0x08005295
 80051ec:	08005295 	.word	0x08005295
 80051f0:	08005295 	.word	0x08005295
 80051f4:	08005295 	.word	0x08005295
 80051f8:	08005295 	.word	0x08005295
 80051fc:	08005265 	.word	0x08005265
 8005200:	08005295 	.word	0x08005295
 8005204:	08005295 	.word	0x08005295
 8005208:	08005295 	.word	0x08005295
 800520c:	08005295 	.word	0x08005295
 8005210:	08005295 	.word	0x08005295
 8005214:	08005285 	.word	0x08005285
      case 'l' :
        flags |= FLAGS_LONG;
 8005218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	3301      	adds	r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b6c      	cmp	r3, #108	; 0x6c
 800522c:	d134      	bne.n	8005298 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800522e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3301      	adds	r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800523c:	e02c      	b.n	8005298 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800523e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3301      	adds	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b68      	cmp	r3, #104	; 0x68
 8005252:	d123      	bne.n	800529c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8005254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	3301      	adds	r3, #1
 8005260:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005262:	e01b      	b.n	800529c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	3301      	adds	r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
        break;
 8005272:	e014      	b.n	800529e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3301      	adds	r3, #1
 8005280:	60bb      	str	r3, [r7, #8]
        break;
 8005282:	e00c      	b.n	800529e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	3301      	adds	r3, #1
 8005290:	60bb      	str	r3, [r7, #8]
        break;
 8005292:	e004      	b.n	800529e <_vsnprintf+0x2ae>
      default :
        break;
 8005294:	bf00      	nop
 8005296:	e002      	b.n	800529e <_vsnprintf+0x2ae>
        break;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <_vsnprintf+0x2ae>
        break;
 800529c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b67      	cmp	r3, #103	; 0x67
 80052a4:	f300 80b8 	bgt.w	8005418 <_vsnprintf+0x428>
 80052a8:	2b25      	cmp	r3, #37	; 0x25
 80052aa:	da27      	bge.n	80052fc <_vsnprintf+0x30c>
 80052ac:	e370      	b.n	8005990 <_vsnprintf+0x9a0>
 80052ae:	bf00      	nop
 80052b0:	08004165 	.word	0x08004165
 80052b4:	3b69      	subs	r3, #105	; 0x69
 80052b6:	2201      	movs	r2, #1
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	f249 0241 	movw	r2, #36929	; 0x9041
 80052c0:	401a      	ands	r2, r3
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	bf14      	ite	ne
 80052c6:	2201      	movne	r2, #1
 80052c8:	2200      	moveq	r2, #0
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	f040 80aa 	bne.w	8005426 <_vsnprintf+0x436>
 80052d2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	bf14      	ite	ne
 80052da:	2201      	movne	r2, #1
 80052dc:	2200      	moveq	r2, #0
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	f040 82fb 	bne.w	80058dc <_vsnprintf+0x8ec>
 80052e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 828d 	bne.w	8005814 <_vsnprintf+0x824>
 80052fa:	e349      	b.n	8005990 <_vsnprintf+0x9a0>
 80052fc:	3b25      	subs	r3, #37	; 0x25
 80052fe:	2b42      	cmp	r3, #66	; 0x42
 8005300:	f200 8346 	bhi.w	8005990 <_vsnprintf+0x9a0>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <_vsnprintf+0x31c>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005979 	.word	0x08005979
 8005310:	08005991 	.word	0x08005991
 8005314:	08005991 	.word	0x08005991
 8005318:	08005991 	.word	0x08005991
 800531c:	08005991 	.word	0x08005991
 8005320:	08005991 	.word	0x08005991
 8005324:	08005991 	.word	0x08005991
 8005328:	08005991 	.word	0x08005991
 800532c:	08005991 	.word	0x08005991
 8005330:	08005991 	.word	0x08005991
 8005334:	08005991 	.word	0x08005991
 8005338:	08005991 	.word	0x08005991
 800533c:	08005991 	.word	0x08005991
 8005340:	08005991 	.word	0x08005991
 8005344:	08005991 	.word	0x08005991
 8005348:	08005991 	.word	0x08005991
 800534c:	08005991 	.word	0x08005991
 8005350:	08005991 	.word	0x08005991
 8005354:	08005991 	.word	0x08005991
 8005358:	08005991 	.word	0x08005991
 800535c:	08005991 	.word	0x08005991
 8005360:	08005991 	.word	0x08005991
 8005364:	08005991 	.word	0x08005991
 8005368:	08005991 	.word	0x08005991
 800536c:	08005991 	.word	0x08005991
 8005370:	08005991 	.word	0x08005991
 8005374:	08005991 	.word	0x08005991
 8005378:	08005991 	.word	0x08005991
 800537c:	08005991 	.word	0x08005991
 8005380:	08005991 	.word	0x08005991
 8005384:	08005991 	.word	0x08005991
 8005388:	08005991 	.word	0x08005991
 800538c:	0800572d 	.word	0x0800572d
 8005390:	080056dd 	.word	0x080056dd
 8005394:	0800572d 	.word	0x0800572d
 8005398:	08005991 	.word	0x08005991
 800539c:	08005991 	.word	0x08005991
 80053a0:	08005991 	.word	0x08005991
 80053a4:	08005991 	.word	0x08005991
 80053a8:	08005991 	.word	0x08005991
 80053ac:	08005991 	.word	0x08005991
 80053b0:	08005991 	.word	0x08005991
 80053b4:	08005991 	.word	0x08005991
 80053b8:	08005991 	.word	0x08005991
 80053bc:	08005991 	.word	0x08005991
 80053c0:	08005991 	.word	0x08005991
 80053c4:	08005991 	.word	0x08005991
 80053c8:	08005991 	.word	0x08005991
 80053cc:	08005991 	.word	0x08005991
 80053d0:	08005991 	.word	0x08005991
 80053d4:	08005991 	.word	0x08005991
 80053d8:	08005427 	.word	0x08005427
 80053dc:	08005991 	.word	0x08005991
 80053e0:	08005991 	.word	0x08005991
 80053e4:	08005991 	.word	0x08005991
 80053e8:	08005991 	.word	0x08005991
 80053ec:	08005991 	.word	0x08005991
 80053f0:	08005991 	.word	0x08005991
 80053f4:	08005991 	.word	0x08005991
 80053f8:	08005991 	.word	0x08005991
 80053fc:	08005991 	.word	0x08005991
 8005400:	08005427 	.word	0x08005427
 8005404:	0800579d 	.word	0x0800579d
 8005408:	08005427 	.word	0x08005427
 800540c:	0800572d 	.word	0x0800572d
 8005410:	080056dd 	.word	0x080056dd
 8005414:	0800572d 	.word	0x0800572d
 8005418:	2b78      	cmp	r3, #120	; 0x78
 800541a:	f300 82b9 	bgt.w	8005990 <_vsnprintf+0x9a0>
 800541e:	2b69      	cmp	r3, #105	; 0x69
 8005420:	f6bf af48 	bge.w	80052b4 <_vsnprintf+0x2c4>
 8005424:	e2b4      	b.n	8005990 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b78      	cmp	r3, #120	; 0x78
 800542c:	d003      	beq.n	8005436 <_vsnprintf+0x446>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b58      	cmp	r3, #88	; 0x58
 8005434:	d102      	bne.n	800543c <_vsnprintf+0x44c>
          base = 16U;
 8005436:	2310      	movs	r3, #16
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
 800543a:	e013      	b.n	8005464 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b6f      	cmp	r3, #111	; 0x6f
 8005442:	d102      	bne.n	800544a <_vsnprintf+0x45a>
          base =  8U;
 8005444:	2308      	movs	r3, #8
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
 8005448:	e00c      	b.n	8005464 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b62      	cmp	r3, #98	; 0x62
 8005450:	d102      	bne.n	8005458 <_vsnprintf+0x468>
          base =  2U;
 8005452:	2302      	movs	r3, #2
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
 8005456:	e005      	b.n	8005464 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8005458:	230a      	movs	r3, #10
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800545c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b58      	cmp	r3, #88	; 0x58
 800546a:	d103      	bne.n	8005474 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800546c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546e:	f043 0320 	orr.w	r3, r3, #32
 8005472:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b69      	cmp	r3, #105	; 0x69
 800547a:	d007      	beq.n	800548c <_vsnprintf+0x49c>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b64      	cmp	r3, #100	; 0x64
 8005482:	d003      	beq.n	800548c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005486:	f023 030c 	bic.w	r3, r3, #12
 800548a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800548c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8005496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b69      	cmp	r3, #105	; 0x69
 80054a4:	d004      	beq.n	80054b0 <_vsnprintf+0x4c0>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	f040 8098 	bne.w	80055e0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80054b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d031      	beq.n	800551e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80054ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	f103 0208 	add.w	r2, r3, #8
 80054c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80054d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da06      	bge.n	80054ea <_vsnprintf+0x4fa>
 80054dc:	2100      	movs	r1, #0
 80054de:	f1d2 0800 	rsbs	r8, r2, #0
 80054e2:	eb61 0903 	sbc.w	r9, r1, r3
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	69f9      	ldr	r1, [r7, #28]
 80054ec:	0fc9      	lsrs	r1, r1, #31
 80054ee:	b2c9      	uxtb	r1, r1
 80054f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80054f2:	2400      	movs	r4, #0
 80054f4:	4682      	mov	sl, r0
 80054f6:	46a3      	mov	fp, r4
 80054f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80054fa:	9008      	str	r0, [sp, #32]
 80054fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80054fe:	9007      	str	r0, [sp, #28]
 8005500:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005502:	9006      	str	r0, [sp, #24]
 8005504:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005508:	9102      	str	r1, [sp, #8]
 800550a:	e9cd 2300 	strd	r2, r3, [sp]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005512:	6939      	ldr	r1, [r7, #16]
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f7ff f81d 	bl	8004554 <_ntoa_long_long>
 800551a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800551c:	e0da      	b.n	80056d4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800551e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8005528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	bfb8      	it	lt
 800553c:	425b      	neglt	r3, r3
 800553e:	4619      	mov	r1, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	0fdb      	lsrs	r3, r3, #31
 8005544:	b2db      	uxtb	r3, r3
 8005546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005548:	9205      	str	r2, [sp, #20]
 800554a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800554c:	9204      	str	r2, [sp, #16]
 800554e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005550:	9203      	str	r2, [sp, #12]
 8005552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005554:	9202      	str	r2, [sp, #8]
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	9100      	str	r1, [sp, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800555e:	6939      	ldr	r1, [r7, #16]
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7fe ff91 	bl	8004488 <_ntoa_long>
 8005566:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005568:	e0b4      	b.n	80056d4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800556a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <_vsnprintf+0x594>
 8005574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005578:	1d1a      	adds	r2, r3, #4
 800557a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e012      	b.n	80055aa <_vsnprintf+0x5ba>
 8005584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <_vsnprintf+0x5ae>
 800558e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005592:	1d1a      	adds	r2, r3, #4
 8005594:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b21b      	sxth	r3, r3
 800559c:	e005      	b.n	80055aa <_vsnprintf+0x5ba>
 800559e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfb8      	it	lt
 80055b2:	425b      	neglt	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	0fdb      	lsrs	r3, r3, #31
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055be:	9205      	str	r2, [sp, #20]
 80055c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c2:	9204      	str	r2, [sp, #16]
 80055c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055c6:	9203      	str	r2, [sp, #12]
 80055c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ca:	9202      	str	r2, [sp, #8]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	9100      	str	r1, [sp, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d4:	6939      	ldr	r1, [r7, #16]
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7fe ff56 	bl	8004488 <_ntoa_long>
 80055dc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80055de:	e079      	b.n	80056d4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d022      	beq.n	8005630 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80055ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055ee:	3307      	adds	r3, #7
 80055f0:	f023 0307 	bic.w	r3, r3, #7
 80055f4:	f103 0208 	add.w	r2, r3, #8
 80055f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005602:	2000      	movs	r0, #0
 8005604:	460d      	mov	r5, r1
 8005606:	4606      	mov	r6, r0
 8005608:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800560a:	9108      	str	r1, [sp, #32]
 800560c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800560e:	9107      	str	r1, [sp, #28]
 8005610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005612:	9106      	str	r1, [sp, #24]
 8005614:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8005618:	2100      	movs	r1, #0
 800561a:	9102      	str	r1, [sp, #8]
 800561c:	e9cd 2300 	strd	r2, r3, [sp]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005624:	6939      	ldr	r1, [r7, #16]
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7fe ff94 	bl	8004554 <_ntoa_long_long>
 800562c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800562e:	e051      	b.n	80056d4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800563a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005648:	9205      	str	r2, [sp, #20]
 800564a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800564c:	9204      	str	r2, [sp, #16]
 800564e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005650:	9203      	str	r2, [sp, #12]
 8005652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	9201      	str	r2, [sp, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f7fe ff10 	bl	8004488 <_ntoa_long>
 8005668:	64f8      	str	r0, [r7, #76]	; 0x4c
 800566a:	e033      	b.n	80056d4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800566c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <_vsnprintf+0x696>
 8005676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	e012      	b.n	80056ac <_vsnprintf+0x6bc>
 8005686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <_vsnprintf+0x6b0>
 8005690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	e005      	b.n	80056ac <_vsnprintf+0x6bc>
 80056a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80056ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b0:	9305      	str	r3, [sp, #20]
 80056b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	2300      	movs	r3, #0
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7fe fedb 	bl	8004488 <_ntoa_long>
 80056d2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
        break;
 80056da:	e166      	b.n	80059aa <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b46      	cmp	r3, #70	; 0x46
 80056e2:	d103      	bne.n	80056ec <_vsnprintf+0x6fc>
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	f043 0320 	orr.w	r3, r3, #32
 80056ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80056ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f0:	3307      	adds	r3, #7
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	f103 0208 	add.w	r2, r3, #8
 80056fa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80056fe:	ed93 7b00 	vldr	d7, [r3]
 8005702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	eeb0 0a47 	vmov.f32	s0, s14
 8005712:	eef0 0a67 	vmov.f32	s1, s15
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571a:	6939      	ldr	r1, [r7, #16]
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f7fe ff87 	bl	8004630 <_ftoa>
 8005722:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3301      	adds	r3, #1
 8005728:	60bb      	str	r3, [r7, #8]
        break;
 800572a:	e13e      	b.n	80059aa <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b67      	cmp	r3, #103	; 0x67
 8005732:	d003      	beq.n	800573c <_vsnprintf+0x74c>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b47      	cmp	r3, #71	; 0x47
 800573a:	d103      	bne.n	8005744 <_vsnprintf+0x754>
 800573c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005742:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b45      	cmp	r3, #69	; 0x45
 800574a:	d003      	beq.n	8005754 <_vsnprintf+0x764>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b47      	cmp	r3, #71	; 0x47
 8005752:	d103      	bne.n	800575c <_vsnprintf+0x76c>
 8005754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005756:	f043 0320 	orr.w	r3, r3, #32
 800575a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800575c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005760:	3307      	adds	r3, #7
 8005762:	f023 0307 	bic.w	r3, r3, #7
 8005766:	f103 0208 	add.w	r2, r3, #8
 800576a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800576e:	ed93 7b00 	vldr	d7, [r3]
 8005772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	eeb0 0a47 	vmov.f32	s0, s14
 8005782:	eef0 0a67 	vmov.f32	s1, s15
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800578a:	6939      	ldr	r1, [r7, #16]
 800578c:	6978      	ldr	r0, [r7, #20]
 800578e:	f7ff f9a7 	bl	8004ae0 <_etoa>
 8005792:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
        break;
 800579a:	e106      	b.n	80059aa <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80057a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10e      	bne.n	80057c8 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80057aa:	e007      	b.n	80057bc <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80057ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ae:	1c53      	adds	r3, r2, #1
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b2:	697c      	ldr	r4, [r7, #20]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	2020      	movs	r0, #32
 80057ba:	47a0      	blx	r4
          while (l++ < width) {
 80057bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	647a      	str	r2, [r7, #68]	; 0x44
 80057c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d8f1      	bhi.n	80057ac <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80057c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2d8      	uxtb	r0, r3
 80057d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057d8:	1c53      	adds	r3, r2, #1
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	697c      	ldr	r4, [r7, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6939      	ldr	r1, [r7, #16]
 80057e2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80057e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00e      	beq.n	800580c <_vsnprintf+0x81c>
          while (l++ < width) {
 80057ee:	e007      	b.n	8005800 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80057f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f6:	697c      	ldr	r4, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	2020      	movs	r0, #32
 80057fe:	47a0      	blx	r4
          while (l++ < width) {
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	647a      	str	r2, [r7, #68]	; 0x44
 8005806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005808:	429a      	cmp	r2, r3
 800580a:	d8f1      	bhi.n	80057f0 <_vsnprintf+0x800>
          }
        }
        format++;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3301      	adds	r3, #1
 8005810:	60bb      	str	r3, [r7, #8]
        break;
 8005812:	e0ca      	b.n	80059aa <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <_vsnprintf+0x83c>
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	e001      	b.n	8005830 <_vsnprintf+0x840>
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	4619      	mov	r1, r3
 8005832:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005834:	f7fe fca4 	bl	8004180 <_strnlen_s>
 8005838:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8005844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	4293      	cmp	r3, r2
 800584a:	bf28      	it	cs
 800584c:	4613      	movcs	r3, r2
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8005850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11a      	bne.n	8005890 <_vsnprintf+0x8a0>
          while (l++ < width) {
 800585a:	e007      	b.n	800586c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 800585c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585e:	1c53      	adds	r3, r2, #1
 8005860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005862:	697c      	ldr	r4, [r7, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	2020      	movs	r0, #32
 800586a:	47a0      	blx	r4
          while (l++ < width) {
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005874:	429a      	cmp	r2, r3
 8005876:	d8f1      	bhi.n	800585c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005878:	e00a      	b.n	8005890 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 800587a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	643a      	str	r2, [r7, #64]	; 0x40
 8005880:	7818      	ldrb	r0, [r3, #0]
 8005882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005884:	1c53      	adds	r3, r2, #1
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	697c      	ldr	r4, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <_vsnprintf+0x8bc>
 8005898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0eb      	beq.n	800587a <_vsnprintf+0x88a>
 80058a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a4:	1e5a      	subs	r2, r3, #1
 80058a6:	657a      	str	r2, [r7, #84]	; 0x54
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80058ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 80058b6:	e007      	b.n	80058c8 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 80058b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058ba:	1c53      	adds	r3, r2, #1
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058be:	697c      	ldr	r4, [r7, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6939      	ldr	r1, [r7, #16]
 80058c4:	2020      	movs	r0, #32
 80058c6:	47a0      	blx	r4
          while (l++ < width) {
 80058c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d8f1      	bhi.n	80058b8 <_vsnprintf+0x8c8>
          }
        }
        format++;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60bb      	str	r3, [r7, #8]
        break;
 80058da:	e066      	b.n	80059aa <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80058dc:	2308      	movs	r3, #8
 80058de:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80058e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e2:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80058e6:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80058e8:	2300      	movs	r3, #0
 80058ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80058ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d023      	beq.n	800593e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80058f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	603a      	str	r2, [r7, #0]
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800590c:	9308      	str	r3, [sp, #32]
 800590e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005910:	9307      	str	r3, [sp, #28]
 8005912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005914:	9306      	str	r3, [sp, #24]
 8005916:	f04f 0210 	mov.w	r2, #16
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005922:	2300      	movs	r3, #0
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	e9d7 3400 	ldrd	r3, r4, [r7]
 800592a:	e9cd 3400 	strd	r3, r4, [sp]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f7fe fe0d 	bl	8004554 <_ntoa_long_long>
 800593a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800593c:	e018      	b.n	8005970 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800593e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005942:	1d1a      	adds	r2, r3, #4
 8005944:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	2310      	movs	r3, #16
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	2300      	movs	r3, #0
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	9200      	str	r2, [sp, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005966:	6939      	ldr	r1, [r7, #16]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f7fe fd8d 	bl	8004488 <_ntoa_long>
 800596e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	3301      	adds	r3, #1
 8005974:	60bb      	str	r3, [r7, #8]
        break;
 8005976:	e018      	b.n	80059aa <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800597a:	1c53      	adds	r3, r2, #1
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597e:	697c      	ldr	r4, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6939      	ldr	r1, [r7, #16]
 8005984:	2025      	movs	r0, #37	; 0x25
 8005986:	47a0      	blx	r4
        format++;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3301      	adds	r3, #1
 800598c:	60bb      	str	r3, [r7, #8]
        break;
 800598e:	e00c      	b.n	80059aa <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	7818      	ldrb	r0, [r3, #0]
 8005994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005996:	1c53      	adds	r3, r2, #1
 8005998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599a:	697c      	ldr	r4, [r7, #20]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6939      	ldr	r1, [r7, #16]
 80059a0:	47a0      	blx	r4
        format++;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60bb      	str	r3, [r7, #8]
        break;
 80059a8:	bf00      	nop
  while (*format)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f ab30 	bne.w	8005014 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80059b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <_vsnprintf+0x9d2>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	e000      	b.n	80059c4 <_vsnprintf+0x9d4>
 80059c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059c4:	697c      	ldr	r4, [r7, #20]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6939      	ldr	r1, [r7, #16]
 80059ca:	2000      	movs	r0, #0
 80059cc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80059ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3764      	adds	r7, #100	; 0x64
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop

080059dc <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80059dc:	b40e      	push	{r1, r2, r3}
 80059de:	b580      	push	{r7, lr}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af02      	add	r7, sp, #8
 80059e4:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80059e6:	f107 0320 	add.w	r3, r7, #32
 80059ea:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4805      	ldr	r0, [pc, #20]	; (8005a10 <sprintf_+0x34>)
 80059fa:	f7ff faf9 	bl	8004ff0 <_vsnprintf>
 80059fe:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	08004137 	.word	0x08004137

08005a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	; 0x40
 8005a26:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <HAL_MspInit+0x4c>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	210f      	movs	r1, #15
 8005a4e:	f06f 0001 	mvn.w	r0, #1
 8005a52:	f002 fd97 	bl	8008584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800

08005a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b0aa      	sub	sp, #168	; 0xa8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f00d f94a 	bl	8012d1e <memset>
  if(hi2c->Instance==I2C1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_I2C_MspInit+0xb4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d13c      	bne.n	8005b0e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8005a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a9e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005aa0:	f107 0314 	add.w	r3, r7, #20
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fe53 	bl	800a750 <HAL_RCCEx_PeriphCLKConfig>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8005ab0:	f7fe fb3c 	bl	800412c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005aba:	f043 0302 	orr.w	r3, r3, #2
 8005abe:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 8005acc:	23c0      	movs	r3, #192	; 0xc0
 8005ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ad2:	2312      	movs	r3, #18
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005aee:	4619      	mov	r1, r3
 8005af0:	480b      	ldr	r0, [pc, #44]	; (8005b20 <HAL_I2C_MspInit+0xbc>)
 8005af2:	f003 f97b 	bl	8008dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b00:	6413      	str	r3, [r2, #64]	; 0x40
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_I2C_MspInit+0xb8>)
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b0e:	bf00      	nop
 8005b10:	37a8      	adds	r7, #168	; 0xa8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40005400 	.word	0x40005400
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40020400 	.word	0x40020400

08005b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08c      	sub	sp, #48	; 0x30
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	f107 031c 	add.w	r3, r7, #28
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2e      	ldr	r2, [pc, #184]	; (8005bfc <HAL_SPI_MspInit+0xd8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d128      	bne.n	8005b98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	4a2d      	ldr	r2, [pc, #180]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b50:	6453      	str	r3, [r2, #68]	; 0x44
 8005b52:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6a:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8005b76:	23f0      	movs	r3, #240	; 0xf0
 8005b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b82:	2303      	movs	r3, #3
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b86:	2305      	movs	r3, #5
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b8a:	f107 031c 	add.w	r3, r7, #28
 8005b8e:	4619      	mov	r1, r3
 8005b90:	481c      	ldr	r0, [pc, #112]	; (8005c04 <HAL_SPI_MspInit+0xe0>)
 8005b92:	f003 f92b 	bl	8008dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005b96:	e02d      	b.n	8005bf4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <HAL_SPI_MspInit+0xe4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d128      	bne.n	8005bf4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bac:	6413      	str	r3, [r2, #64]	; 0x40
 8005bae:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bba:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_SPI_MspInit+0xdc>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 8005bd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be0:	2303      	movs	r3, #3
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005be4:	2305      	movs	r3, #5
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be8:	f107 031c 	add.w	r3, r7, #28
 8005bec:	4619      	mov	r1, r3
 8005bee:	4807      	ldr	r0, [pc, #28]	; (8005c0c <HAL_SPI_MspInit+0xe8>)
 8005bf0:	f003 f8fc 	bl	8008dec <HAL_GPIO_Init>
}
 8005bf4:	bf00      	nop
 8005bf6:	3730      	adds	r7, #48	; 0x30
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40013000 	.word	0x40013000
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40020000 	.word	0x40020000
 8005c08:	40003800 	.word	0x40003800
 8005c0c:	40020400 	.word	0x40020400

08005c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <HAL_TIM_Base_MspInit+0x38>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10b      	bne.n	8005c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_TIM_Base_MspInit+0x3c>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_TIM_Base_MspInit+0x3c>)
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <HAL_TIM_Base_MspInit+0x3c>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40023800 	.word	0x40023800

08005c50 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_TIM_IC_MspInit+0x8c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d12f      	bne.n	8005cd2 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4a1a      	ldr	r2, [pc, #104]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7e:	4b18      	ldr	r3, [pc, #96]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c90:	f043 0304 	orr.w	r3, r3, #4
 8005c94:	6313      	str	r3, [r2, #48]	; 0x30
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_TIM_IC_MspInit+0x90>)
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8005ca2:	2340      	movs	r3, #64	; 0x40
 8005ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8005cb6:	f107 0314 	add.w	r3, r7, #20
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4809      	ldr	r0, [pc, #36]	; (8005ce4 <HAL_TIM_IC_MspInit+0x94>)
 8005cbe:	f003 f895 	bl	8008dec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2106      	movs	r1, #6
 8005cc6:	201d      	movs	r0, #29
 8005cc8:	f002 fc5c 	bl	8008584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005ccc:	201d      	movs	r0, #29
 8005cce:	f002 fc75 	bl	80085bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005cd2:	bf00      	nop
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40020800 	.word	0x40020800

08005ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <HAL_TIM_MspPostInit+0x64>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d11c      	bne.n	8005d44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_TIM_MspPostInit+0x68>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <HAL_TIM_MspPostInit+0x68>)
 8005d10:	f043 0310 	orr.w	r3, r3, #16
 8005d14:	6313      	str	r3, [r2, #48]	; 0x30
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_TIM_MspPostInit+0x68>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 8005d22:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8005d26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4805      	ldr	r0, [pc, #20]	; (8005d54 <HAL_TIM_MspPostInit+0x6c>)
 8005d40:	f003 f854 	bl	8008dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005d44:	bf00      	nop
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b0ae      	sub	sp, #184	; 0xb8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]
 8005d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00c ffd0 	bl	8012d1e <memset>
  if(huart->Instance==UART4)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a83      	ldr	r2, [pc, #524]	; (8005f90 <HAL_UART_MspInit+0x238>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d144      	bne.n	8005e12 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 fcda 	bl	800a750 <HAL_RCCEx_PeriphCLKConfig>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005da2:	f7fe f9c3 	bl	800412c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005da6:	4b7b      	ldr	r3, [pc, #492]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	4a7a      	ldr	r2, [pc, #488]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005db0:	6413      	str	r3, [r2, #64]	; 0x40
 8005db2:	4b78      	ldr	r3, [pc, #480]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dbe:	4b75      	ldr	r3, [pc, #468]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	4a74      	ldr	r2, [pc, #464]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dca:	4b72      	ldr	r3, [pc, #456]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005de8:	2303      	movs	r3, #3
 8005dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005dee:	2308      	movs	r3, #8
 8005df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4867      	ldr	r0, [pc, #412]	; (8005f98 <HAL_UART_MspInit+0x240>)
 8005dfc:	f002 fff6 	bl	8008dec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8005e00:	2200      	movs	r2, #0
 8005e02:	2106      	movs	r1, #6
 8005e04:	2034      	movs	r0, #52	; 0x34
 8005e06:	f002 fbbd 	bl	8008584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005e0a:	2034      	movs	r0, #52	; 0x34
 8005e0c:	f002 fbd6 	bl	80085bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e10:	e0b9      	b.n	8005f86 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a61      	ldr	r2, [pc, #388]	; (8005f9c <HAL_UART_MspInit+0x244>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d172      	bne.n	8005f02 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8005e20:	2304      	movs	r3, #4
 8005e22:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f004 fc91 	bl	800a750 <HAL_RCCEx_PeriphCLKConfig>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005e34:	f7fe f97a 	bl	800412c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e38:	4b56      	ldr	r3, [pc, #344]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	4a55      	ldr	r2, [pc, #340]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e42:	6413      	str	r3, [r2, #64]	; 0x40
 8005e44:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	4a4f      	ldr	r2, [pc, #316]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	4b4d      	ldr	r3, [pc, #308]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8005e68:	2360      	movs	r3, #96	; 0x60
 8005e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e80:	2307      	movs	r3, #7
 8005e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4844      	ldr	r0, [pc, #272]	; (8005fa0 <HAL_UART_MspInit+0x248>)
 8005e8e:	f002 ffad 	bl	8008dec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005e92:	4b44      	ldr	r3, [pc, #272]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005e94:	4a44      	ldr	r2, [pc, #272]	; (8005fa8 <HAL_UART_MspInit+0x250>)
 8005e96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ea0:	4b40      	ldr	r3, [pc, #256]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005eac:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eba:	4b3a      	ldr	r3, [pc, #232]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005ec0:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ec6:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ec8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005ecc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ece:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ed4:	4833      	ldr	r0, [pc, #204]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ed6:	f002 fb7f 	bl	80085d8 <HAL_DMA_Init>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005ee0:	f7fe f924 	bl	800412c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005ee8:	675a      	str	r2, [r3, #116]	; 0x74
 8005eea:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <HAL_UART_MspInit+0x24c>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2107      	movs	r1, #7
 8005ef4:	2026      	movs	r0, #38	; 0x26
 8005ef6:	f002 fb45 	bl	8008584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005efa:	2026      	movs	r0, #38	; 0x26
 8005efc:	f002 fb5e 	bl	80085bc <HAL_NVIC_EnableIRQ>
}
 8005f00:	e041      	b.n	8005f86 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a29      	ldr	r2, [pc, #164]	; (8005fac <HAL_UART_MspInit+0x254>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d13c      	bne.n	8005f86 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8005f12:	2310      	movs	r3, #16
 8005f14:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f004 fc18 	bl	800a750 <HAL_RCCEx_PeriphCLKConfig>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8005f26:	f7fe f901 	bl	800412c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
 8005f36:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f42:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_UART_MspInit+0x23c>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8005f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f62:	2302      	movs	r3, #2
 8005f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f74:	2307      	movs	r3, #7
 8005f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	480b      	ldr	r0, [pc, #44]	; (8005fb0 <HAL_UART_MspInit+0x258>)
 8005f82:	f002 ff33 	bl	8008dec <HAL_GPIO_Init>
}
 8005f86:	bf00      	nop
 8005f88:	37b8      	adds	r7, #184	; 0xb8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40004c00 	.word	0x40004c00
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40020000 	.word	0x40020000
 8005f9c:	40004400 	.word	0x40004400
 8005fa0:	40020c00 	.word	0x40020c00
 8005fa4:	20000cbc 	.word	0x20000cbc
 8005fa8:	40026088 	.word	0x40026088
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40020800 	.word	0x40020800

08005fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005fc4:	4b34      	ldr	r3, [pc, #208]	; (8006098 <HAL_InitTick+0xe4>)
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	4a33      	ldr	r2, [pc, #204]	; (8006098 <HAL_InitTick+0xe4>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd0:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_InitTick+0xe4>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005fdc:	f107 0210 	add.w	r2, r7, #16
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 fb80 	bl	800a6ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f004 fb51 	bl	800a69c <HAL_RCC_GetPCLK1Freq>
 8005ffa:	6378      	str	r0, [r7, #52]	; 0x34
 8005ffc:	e004      	b.n	8006008 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005ffe:	f004 fb4d 	bl	800a69c <HAL_RCC_GetPCLK1Freq>
 8006002:	4603      	mov	r3, r0
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	4a24      	ldr	r2, [pc, #144]	; (800609c <HAL_InitTick+0xe8>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	0c9b      	lsrs	r3, r3, #18
 8006012:	3b01      	subs	r3, #1
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006016:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <HAL_InitTick+0xec>)
 8006018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800601c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800601e:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <HAL_InitTick+0xec>)
 8006020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006024:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <HAL_InitTick+0xec>)
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <HAL_InitTick+0xec>)
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_InitTick+0xec>)
 8006034:	2200      	movs	r2, #0
 8006036:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_InitTick+0xec>)
 800603a:	2200      	movs	r2, #0
 800603c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800603e:	4818      	ldr	r0, [pc, #96]	; (80060a0 <HAL_InitTick+0xec>)
 8006040:	f005 fe30 	bl	800bca4 <HAL_TIM_Base_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800604a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11b      	bne.n	800608a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006052:	4813      	ldr	r0, [pc, #76]	; (80060a0 <HAL_InitTick+0xec>)
 8006054:	f005 fe7e 	bl	800bd54 <HAL_TIM_Base_Start_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800605e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006062:	2b00      	cmp	r3, #0
 8006064:	d111      	bne.n	800608a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006066:	201c      	movs	r0, #28
 8006068:	f002 faa8 	bl	80085bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d808      	bhi.n	8006084 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006072:	2200      	movs	r2, #0
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	201c      	movs	r0, #28
 8006078:	f002 fa84 	bl	8008584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <HAL_InitTick+0xf0>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e002      	b.n	800608a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800608a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800608e:	4618      	mov	r0, r3
 8006090:	3738      	adds	r7, #56	; 0x38
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40023800 	.word	0x40023800
 800609c:	431bde83 	.word	0x431bde83
 80060a0:	20000d60 	.word	0x20000d60
 80060a4:	2000000c 	.word	0x2000000c

080060a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060ac:	e7fe      	b.n	80060ac <NMI_Handler+0x4>

080060ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060ae:	b480      	push	{r7}
 80060b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060b2:	e7fe      	b.n	80060b2 <HardFault_Handler+0x4>

080060b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060b8:	e7fe      	b.n	80060b8 <MemManage_Handler+0x4>

080060ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060ba:	b480      	push	{r7}
 80060bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060be:	e7fe      	b.n	80060be <BusFault_Handler+0x4>

080060c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060c4:	e7fe      	b.n	80060c4 <UsageFault_Handler+0x4>

080060c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060c6:	b480      	push	{r7}
 80060c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <DMA1_Stream5_IRQHandler+0x10>)
 80060da:	f002 fc1d 	bl	8008918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000cbc 	.word	0x20000cbc

080060e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <TIM2_IRQHandler+0x10>)
 80060ee:	f006 f9ad 	bl	800c44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000d60 	.word	0x20000d60

080060fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006100:	4802      	ldr	r0, [pc, #8]	; (800610c <TIM3_IRQHandler+0x10>)
 8006102:	f006 f9a3 	bl	800c44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000ad8 	.word	0x20000ad8

08006110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <USART2_IRQHandler+0x10>)
 8006116:	f007 fd01 	bl	800db1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000bac 	.word	0x20000bac

08006124 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <UART4_IRQHandler+0x10>)
 800612a:	f007 fcf7 	bl	800db1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000b24 	.word	0x20000b24

08006138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return 1;
 800613c:	2301      	movs	r3, #1
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <_kill>:

int _kill(int pid, int sig)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006152:	f00c fe9f 	bl	8012e94 <__errno>
 8006156:	4603      	mov	r3, r0
 8006158:	2216      	movs	r2, #22
 800615a:	601a      	str	r2, [r3, #0]
  return -1;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <_exit>:

void _exit (int status)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006170:	f04f 31ff 	mov.w	r1, #4294967295
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffe7 	bl	8006148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800617a:	e7fe      	b.n	800617a <_exit+0x12>

0800617c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e00a      	b.n	80061a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800618e:	f3af 8000 	nop.w
 8006192:	4601      	mov	r1, r0
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	60ba      	str	r2, [r7, #8]
 800619a:	b2ca      	uxtb	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3301      	adds	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	dbf0      	blt.n	800618e <_read+0x12>
  }

  return len;
 80061ac:	687b      	ldr	r3, [r7, #4]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e009      	b.n	80061dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	60ba      	str	r2, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	dbf1      	blt.n	80061c8 <_write+0x12>
  }
  return len;
 80061e4:	687b      	ldr	r3, [r7, #4]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <_close>:

int _close(int file)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006216:	605a      	str	r2, [r3, #4]
  return 0;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <_isatty>:

int _isatty(int file)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800622e:	2301      	movs	r3, #1
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006260:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <_sbrk+0x5c>)
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <_sbrk+0x60>)
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800626c:	4b13      	ldr	r3, [pc, #76]	; (80062bc <_sbrk+0x64>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <_sbrk+0x64>)
 8006276:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <_sbrk+0x68>)
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <_sbrk+0x64>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	429a      	cmp	r2, r3
 8006286:	d207      	bcs.n	8006298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006288:	f00c fe04 	bl	8012e94 <__errno>
 800628c:	4603      	mov	r3, r0
 800628e:	220c      	movs	r2, #12
 8006290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e009      	b.n	80062ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <_sbrk+0x64>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <_sbrk+0x64>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	4a05      	ldr	r2, [pc, #20]	; (80062bc <_sbrk+0x64>)
 80062a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062aa:	68fb      	ldr	r3, [r7, #12]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20040000 	.word	0x20040000
 80062b8:	00000400 	.word	0x00000400
 80062bc:	20000dac 	.word	0x20000dac
 80062c0:	20009050 	.word	0x20009050

080062c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <SystemInit+0x20>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	4a05      	ldr	r2, [pc, #20]	; (80062e4 <SystemInit+0x20>)
 80062d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	e000ed00 	.word	0xe000ed00

080062e8 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b24      	cmp	r3, #36	; 0x24
 8006302:	d103      	bne.n	800630c <GPS_validate+0x24>
		i++;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3301      	adds	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 800630a:	e00c      	b.n	8006326 <GPS_validate+0x3e>
		return 0;
 800630c:	2300      	movs	r3, #0
 800630e:	e047      	b.n	80063a0 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4053      	eors	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
		i++;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3301      	adds	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4413      	add	r3, r2
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <GPS_validate+0x5c>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b2a      	cmp	r3, #42	; 0x2a
 800633c:	d002      	beq.n	8006344 <GPS_validate+0x5c>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b4a      	cmp	r3, #74	; 0x4a
 8006342:	dde5      	ble.n	8006310 <GPS_validate+0x28>
	}

	if (i >= 75)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b4a      	cmp	r3, #74	; 0x4a
 8006348:	dd01      	ble.n	800634e <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 800634a:	2300      	movs	r3, #0
 800634c:	e028      	b.n	80063a0 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b2a      	cmp	r3, #42	; 0x2a
 8006358:	d119      	bne.n	800638e <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	3301      	adds	r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	3302      	adds	r3, #2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	490a      	ldr	r1, [pc, #40]	; (80063a8 <GPS_validate+0xc0>)
 800637e:	4618      	mov	r0, r3
 8006380:	f00c fc3c 	bl	8012bfc <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8006384:	7a3a      	ldrb	r2, [r7, #8]
 8006386:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8006388:	429a      	cmp	r2, r3
 800638a:	d108      	bne.n	800639e <GPS_validate+0xb6>
 800638c:	e001      	b.n	8006392 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 800638e:	2300      	movs	r3, #0
 8006390:	e006      	b.n	80063a0 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8006392:	7a7a      	ldrb	r2, [r7, #9]
 8006394:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8006396:	429a      	cmp	r2, r3
 8006398:	d101      	bne.n	800639e <GPS_validate+0xb6>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <GPS_validate+0xb8>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	08018420 	.word	0x08018420

080063ac <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af08      	add	r7, sp, #32
 80063b2:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 80063b4:	2206      	movs	r2, #6
 80063b6:	4964      	ldr	r1, [pc, #400]	; (8006548 <GPS_parse+0x19c>)
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f00c fcb8 	bl	8012d2e <strncmp>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d138      	bne.n	8006436 <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 80063c4:	4b61      	ldr	r3, [pc, #388]	; (800654c <GPS_parse+0x1a0>)
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	4b61      	ldr	r3, [pc, #388]	; (8006550 <GPS_parse+0x1a4>)
 80063ca:	9306      	str	r3, [sp, #24]
 80063cc:	4b61      	ldr	r3, [pc, #388]	; (8006554 <GPS_parse+0x1a8>)
 80063ce:	9305      	str	r3, [sp, #20]
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <GPS_parse+0x1ac>)
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <GPS_parse+0x1b0>)
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	4b61      	ldr	r3, [pc, #388]	; (8006560 <GPS_parse+0x1b4>)
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	4b61      	ldr	r3, [pc, #388]	; (8006564 <GPS_parse+0x1b8>)
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <GPS_parse+0x1bc>)
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4b61      	ldr	r3, [pc, #388]	; (800656c <GPS_parse+0x1c0>)
 80063e6:	4a62      	ldr	r2, [pc, #392]	; (8006570 <GPS_parse+0x1c4>)
 80063e8:	4962      	ldr	r1, [pc, #392]	; (8006574 <GPS_parse+0x1c8>)
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f00c fc26 	bl	8012c3c <siscanf>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f340 80a4 	ble.w	8006540 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80063f8:	4b5f      	ldr	r3, [pc, #380]	; (8006578 <GPS_parse+0x1cc>)
 80063fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80063fe:	4b5e      	ldr	r3, [pc, #376]	; (8006578 <GPS_parse+0x1cc>)
 8006400:	7d1b      	ldrb	r3, [r3, #20]
 8006402:	4618      	mov	r0, r3
 8006404:	eeb0 0a67 	vmov.f32	s0, s15
 8006408:	f000 f8da 	bl	80065c0 <GPS_nmea_to_dec>
 800640c:	eef0 7a40 	vmov.f32	s15, s0
 8006410:	4b59      	ldr	r3, [pc, #356]	; (8006578 <GPS_parse+0x1cc>)
 8006412:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8006416:	4b58      	ldr	r3, [pc, #352]	; (8006578 <GPS_parse+0x1cc>)
 8006418:	edd3 7a06 	vldr	s15, [r3, #24]
 800641c:	4b56      	ldr	r3, [pc, #344]	; (8006578 <GPS_parse+0x1cc>)
 800641e:	7f1b      	ldrb	r3, [r3, #28]
 8006420:	4618      	mov	r0, r3
 8006422:	eeb0 0a67 	vmov.f32	s0, s15
 8006426:	f000 f8cb 	bl	80065c0 <GPS_nmea_to_dec>
 800642a:	eef0 7a40 	vmov.f32	s15, s0
 800642e:	4b52      	ldr	r3, [pc, #328]	; (8006578 <GPS_parse+0x1cc>)
 8006430:	edc3 7a00 	vstr	s15, [r3]
			return;
 8006434:	e084      	b.n	8006540 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8006436:	2206      	movs	r2, #6
 8006438:	4950      	ldr	r1, [pc, #320]	; (800657c <GPS_parse+0x1d0>)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f00c fc77 	bl	8012d2e <strncmp>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d123      	bne.n	800648e <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8006446:	4b4e      	ldr	r3, [pc, #312]	; (8006580 <GPS_parse+0x1d4>)
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	4b4e      	ldr	r3, [pc, #312]	; (8006584 <GPS_parse+0x1d8>)
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	4b4e      	ldr	r3, [pc, #312]	; (8006588 <GPS_parse+0x1dc>)
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	4b43      	ldr	r3, [pc, #268]	; (8006560 <GPS_parse+0x1b4>)
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	4b43      	ldr	r3, [pc, #268]	; (8006564 <GPS_parse+0x1b8>)
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	4b43      	ldr	r3, [pc, #268]	; (8006568 <GPS_parse+0x1bc>)
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	4b43      	ldr	r3, [pc, #268]	; (800656c <GPS_parse+0x1c0>)
 8006460:	4a43      	ldr	r2, [pc, #268]	; (8006570 <GPS_parse+0x1c4>)
 8006462:	494a      	ldr	r1, [pc, #296]	; (800658c <GPS_parse+0x1e0>)
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f00c fbe9 	bl	8012c3c <siscanf>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd67      	ble.n	8006540 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8006470:	4b41      	ldr	r3, [pc, #260]	; (8006578 <GPS_parse+0x1cc>)
 8006472:	7d1b      	ldrb	r3, [r3, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <GPS_parse+0xd2>
				GPS.ns = ' ';
 8006478:	4b3f      	ldr	r3, [pc, #252]	; (8006578 <GPS_parse+0x1cc>)
 800647a:	2220      	movs	r2, #32
 800647c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 800647e:	4b3e      	ldr	r3, [pc, #248]	; (8006578 <GPS_parse+0x1cc>)
 8006480:	7f1b      	ldrb	r3, [r3, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d157      	bne.n	8006536 <GPS_parse+0x18a>
				GPS.ew = ' ';
 8006486:	4b3c      	ldr	r3, [pc, #240]	; (8006578 <GPS_parse+0x1cc>)
 8006488:	2220      	movs	r2, #32
 800648a:	771a      	strb	r2, [r3, #28]
			return;
 800648c:	e053      	b.n	8006536 <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 800648e:	2206      	movs	r2, #6
 8006490:	493f      	ldr	r1, [pc, #252]	; (8006590 <GPS_parse+0x1e4>)
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f00c fc4b 	bl	8012d2e <strncmp>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11f      	bne.n	80064de <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 800649e:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <GPS_parse+0x1e8>)
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	4b33      	ldr	r3, [pc, #204]	; (8006570 <GPS_parse+0x1c4>)
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	4b2e      	ldr	r3, [pc, #184]	; (8006560 <GPS_parse+0x1b4>)
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <GPS_parse+0x1b8>)
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	4b2e      	ldr	r3, [pc, #184]	; (8006568 <GPS_parse+0x1bc>)
 80064b0:	4a2e      	ldr	r2, [pc, #184]	; (800656c <GPS_parse+0x1c0>)
 80064b2:	4939      	ldr	r1, [pc, #228]	; (8006598 <GPS_parse+0x1ec>)
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f00c fbc1 	bl	8012c3c <siscanf>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dd3f      	ble.n	8006540 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <GPS_parse+0x1cc>)
 80064c2:	7d1b      	ldrb	r3, [r3, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <GPS_parse+0x122>
				GPS.ns = '?';
 80064c8:	4b2b      	ldr	r3, [pc, #172]	; (8006578 <GPS_parse+0x1cc>)
 80064ca:	223f      	movs	r2, #63	; 0x3f
 80064cc:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 80064ce:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <GPS_parse+0x1cc>)
 80064d0:	7f1b      	ldrb	r3, [r3, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d131      	bne.n	800653a <GPS_parse+0x18e>
				GPS.ew = '?';
 80064d6:	4b28      	ldr	r3, [pc, #160]	; (8006578 <GPS_parse+0x1cc>)
 80064d8:	223f      	movs	r2, #63	; 0x3f
 80064da:	771a      	strb	r2, [r3, #28]
			return;
 80064dc:	e02d      	b.n	800653a <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 80064de:	2206      	movs	r2, #6
 80064e0:	492e      	ldr	r1, [pc, #184]	; (800659c <GPS_parse+0x1f0>)
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f00c fc23 	bl	8012d2e <strncmp>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d128      	bne.n	8006540 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 80064ee:	4b2c      	ldr	r3, [pc, #176]	; (80065a0 <GPS_parse+0x1f4>)
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	4b2c      	ldr	r3, [pc, #176]	; (80065a4 <GPS_parse+0x1f8>)
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	4b2c      	ldr	r3, [pc, #176]	; (80065a8 <GPS_parse+0x1fc>)
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <GPS_parse+0x1dc>)
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <GPS_parse+0x200>)
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <GPS_parse+0x204>)
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <GPS_parse+0x208>)
 8006508:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <GPS_parse+0x20c>)
 800650a:	492c      	ldr	r1, [pc, #176]	; (80065bc <GPS_parse+0x210>)
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f00c fb95 	bl	8012c3c <siscanf>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd13      	ble.n	8006540 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8006518:	4b17      	ldr	r3, [pc, #92]	; (8006578 <GPS_parse+0x1cc>)
 800651a:	7d1b      	ldrb	r3, [r3, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <GPS_parse+0x17a>
				GPS.ns = '?';
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <GPS_parse+0x1cc>)
 8006522:	223f      	movs	r2, #63	; 0x3f
 8006524:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <GPS_parse+0x1cc>)
 8006528:	7f1b      	ldrb	r3, [r3, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <GPS_parse+0x192>
				GPS.ew = '?';
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <GPS_parse+0x1cc>)
 8006530:	223f      	movs	r2, #63	; 0x3f
 8006532:	771a      	strb	r2, [r3, #28]
			return;
 8006534:	e003      	b.n	800653e <GPS_parse+0x192>
			return;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <GPS_parse+0x194>
			return;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <GPS_parse+0x194>
			return;
 800653e:	bf00      	nop
		}
	}
}
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08018428 	.word	0x08018428
 800654c:	2000054c 	.word	0x2000054c
 8006550:	20000548 	.word	0x20000548
 8006554:	20000544 	.word	0x20000544
 8006558:	20000540 	.word	0x20000540
 800655c:	2000053c 	.word	0x2000053c
 8006560:	20000538 	.word	0x20000538
 8006564:	20000534 	.word	0x20000534
 8006568:	20000530 	.word	0x20000530
 800656c:	2000052c 	.word	0x2000052c
 8006570:	20000528 	.word	0x20000528
 8006574:	08018430 	.word	0x08018430
 8006578:	2000051c 	.word	0x2000051c
 800657c:	08018458 	.word	0x08018458
 8006580:	20000558 	.word	0x20000558
 8006584:	20000554 	.word	0x20000554
 8006588:	20000550 	.word	0x20000550
 800658c:	08018460 	.word	0x08018460
 8006590:	08018480 	.word	0x08018480
 8006594:	2000055c 	.word	0x2000055c
 8006598:	08018488 	.word	0x08018488
 800659c:	080184a4 	.word	0x080184a4
 80065a0:	20000574 	.word	0x20000574
 80065a4:	20000570 	.word	0x20000570
 80065a8:	2000056d 	.word	0x2000056d
 80065ac:	2000056c 	.word	0x2000056c
 80065b0:	20000568 	.word	0x20000568
 80065b4:	20000564 	.word	0x20000564
 80065b8:	20000560 	.word	0x20000560
 80065bc:	080184ac 	.word	0x080184ac

080065c0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80065ca:	4603      	mov	r3, r0
 80065cc:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 80065ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80065d2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006654 <GPS_nmea_to_dec+0x94>
 80065d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065de:	ee17 3a90 	vmov	r3, s15
 80065e2:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2264      	movs	r2, #100	; 0x64
 80065e8:	fb02 f303 	mul.w	r3, r2, r3
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80065f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065fc:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8006600:	ed97 7a03 	vldr	s14, [r7, #12]
 8006604:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006658 <GPS_nmea_to_dec+0x98>
 8006608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800660c:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800661a:	ed97 7a02 	vldr	s14, [r7, #8]
 800661e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006622:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	2b53      	cmp	r3, #83	; 0x53
 800662a:	d002      	beq.n	8006632 <GPS_nmea_to_dec+0x72>
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	2b57      	cmp	r3, #87	; 0x57
 8006630:	d105      	bne.n	800663e <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8006632:	edd7 7a05 	vldr	s15, [r7, #20]
 8006636:	eef1 7a67 	vneg.f32	s15, s15
 800663a:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	ee07 3a90 	vmov	s15, r3
}
 8006644:	eeb0 0a67 	vmov.f32	s0, s15
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	42c80000 	.word	0x42c80000
 8006658:	42700000 	.word	0x42700000

0800665c <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8006660:	2007      	movs	r0, #7
 8006662:	f000 f871 	bl	8006748 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8006666:	2000      	movs	r0, #0
 8006668:	f000 f8c8 	bl	80067fc <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 800666c:	2005      	movs	r0, #5
 800666e:	f000 f8e0 	bl	8006832 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8006672:	2002      	movs	r0, #2
 8006674:	f000 f8fc 	bl	8006870 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8006678:	2100      	movs	r1, #0
 800667a:	2000      	movs	r0, #0
 800667c:	f000 f84e 	bl	800671c <HMC5883L_setOffset>

	return 0;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 800668e:	2003      	movs	r0, #3
 8006690:	f000 f946 	bl	8006920 <HMC5883L_readRegister16>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HMC5883L_readRaw+0x88>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066a6:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <HMC5883L_readRaw+0x8c>)
 80066a8:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 80066ac:	2007      	movs	r0, #7
 80066ae:	f000 f937 	bl	8006920 <HMC5883L_readRegister16>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <HMC5883L_readRaw+0x90>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <HMC5883L_readRaw+0x8c>)
 80066c6:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 80066ca:	2005      	movs	r0, #5
 80066cc:	f000 f928 	bl	8006920 <HMC5883L_readRegister16>
 80066d0:	4603      	mov	r3, r0
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <HMC5883L_readRaw+0x8c>)
 80066dc:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 80066e0:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <HMC5883L_readRaw+0x8c>)
 80066e2:	f107 0314 	add.w	r3, r7, #20
 80066e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80066e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066ec:	6979      	ldr	r1, [r7, #20]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	ee06 1a90 	vmov	s13, r1
 80066f6:	ee07 2a10 	vmov	s14, r2
 80066fa:	ee07 3a90 	vmov	s15, r3
}
 80066fe:	eeb0 0a66 	vmov.f32	s0, s13
 8006702:	eef0 0a47 	vmov.f32	s1, s14
 8006706:	eeb0 1a67 	vmov.f32	s2, s15
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000428 	.word	0x20000428
 8006714:	2000041c 	.word	0x2000041c
 8006718:	2000042c 	.word	0x2000042c

0800671c <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8006726:	4a06      	ldr	r2, [pc, #24]	; (8006740 <HMC5883L_setOffset+0x24>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 800672c:	4a05      	ldr	r2, [pc, #20]	; (8006744 <HMC5883L_setOffset+0x28>)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000428 	.word	0x20000428
 8006744:	2000042c 	.word	0x2000042c

08006748 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b07      	cmp	r3, #7
 8006756:	d833      	bhi.n	80067c0 <HMC5883L_setRange+0x78>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <HMC5883L_setRange+0x18>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006781 	.word	0x08006781
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	080067a1 	.word	0x080067a1
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067b1 	.word	0x080067b1
 800677c:	080067b9 	.word	0x080067b9
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HMC5883L_setRange+0x90>)
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HMC5883L_setRange+0x94>)
 8006784:	601a      	str	r2, [r3, #0]
	    break;
 8006786:	e01c      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <HMC5883L_setRange+0x90>)
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <HMC5883L_setRange+0x98>)
 800678c:	601a      	str	r2, [r3, #0]
	    break;
 800678e:	e018      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HMC5883L_setRange+0x90>)
 8006792:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <HMC5883L_setRange+0x9c>)
 8006794:	601a      	str	r2, [r3, #0]
	    break;
 8006796:	e014      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <HMC5883L_setRange+0x90>)
 800679a:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <HMC5883L_setRange+0xa0>)
 800679c:	601a      	str	r2, [r3, #0]
	    break;
 800679e:	e010      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 80067a0:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <HMC5883L_setRange+0x90>)
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <HMC5883L_setRange+0xa4>)
 80067a4:	601a      	str	r2, [r3, #0]
	    break;
 80067a6:	e00c      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HMC5883L_setRange+0x90>)
 80067aa:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <HMC5883L_setRange+0xa8>)
 80067ac:	601a      	str	r2, [r3, #0]
	    break;
 80067ae:	e008      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <HMC5883L_setRange+0x90>)
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <HMC5883L_setRange+0xac>)
 80067b4:	601a      	str	r2, [r3, #0]
	    break;
 80067b6:	e004      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 80067b8:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <HMC5883L_setRange+0x90>)
 80067ba:	4a0f      	ldr	r2, [pc, #60]	; (80067f8 <HMC5883L_setRange+0xb0>)
 80067bc:	601a      	str	r2, [r3, #0]
	    break;
 80067be:	e000      	b.n	80067c2 <HMC5883L_setRange+0x7a>

	default:
	    break;
 80067c0:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	015b      	lsls	r3, r3, #5
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	2001      	movs	r0, #1
 80067cc:	f000 f870 	bl	80068b0 <HMC5883L_writeRegister8>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000418 	.word	0x20000418
 80067dc:	3d958106 	.word	0x3d958106
 80067e0:	3f6b851f 	.word	0x3f6b851f
 80067e4:	3f9c28f6 	.word	0x3f9c28f6
 80067e8:	3fc28f5c 	.word	0x3fc28f5c
 80067ec:	401147ae 	.word	0x401147ae
 80067f0:	4023d70a 	.word	0x4023d70a
 80067f4:	4041eb85 	.word	0x4041eb85
 80067f8:	408b3333 	.word	0x408b3333

080067fc <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8006806:	2002      	movs	r0, #2
 8006808:	f000 f86e 	bl	80068e8 <HMC5883L_readRegister8>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8006818:	7bfa      	ldrb	r2, [r7, #15]
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	4313      	orrs	r3, r2
 800681e:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4619      	mov	r1, r3
 8006824:	2002      	movs	r0, #2
 8006826:	f000 f843 	bl	80068b0 <HMC5883L_writeRegister8>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	4603      	mov	r3, r0
 800683a:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800683c:	2000      	movs	r0, #0
 800683e:	f000 f853 	bl	80068e8 <HMC5883L_readRegister8>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	f023 031c 	bic.w	r3, r3, #28
 800684c:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	b25a      	sxtb	r2, r3
 8006854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006858:	4313      	orrs	r3, r2
 800685a:	b25b      	sxtb	r3, r3
 800685c:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	4619      	mov	r1, r3
 8006862:	2000      	movs	r0, #0
 8006864:	f000 f824 	bl	80068b0 <HMC5883L_writeRegister8>
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800687a:	2000      	movs	r0, #0
 800687c:	f000 f834 	bl	80068e8 <HMC5883L_readRegister8>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800688a:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	015b      	lsls	r3, r3, #5
 8006890:	b25a      	sxtb	r2, r3
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006896:	4313      	orrs	r3, r2
 8006898:	b25b      	sxtb	r3, r3
 800689a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	4619      	mov	r1, r3
 80068a0:	2000      	movs	r0, #0
 80068a2:	f000 f805 	bl	80068b0 <HMC5883L_writeRegister8>
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	4603      	mov	r3, r0
 80068b8:	460a      	mov	r2, r1
 80068ba:	71fb      	strb	r3, [r7, #7]
 80068bc:	4613      	mov	r3, r2
 80068be:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	2301      	movs	r3, #1
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	1dbb      	adds	r3, r7, #6
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	2301      	movs	r3, #1
 80068d4:	213c      	movs	r1, #60	; 0x3c
 80068d6:	4803      	ldr	r0, [pc, #12]	; (80068e4 <HMC5883L_writeRegister8+0x34>)
 80068d8:	f002 fcce 	bl	8009278 <HAL_I2C_Mem_Write>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000970 	.word	0x20000970

080068e8 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af04      	add	r7, sp, #16
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068fa:	9302      	str	r3, [sp, #8]
 80068fc:	2301      	movs	r3, #1
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	f107 030f 	add.w	r3, r7, #15
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2301      	movs	r3, #1
 8006908:	213c      	movs	r1, #60	; 0x3c
 800690a:	4804      	ldr	r0, [pc, #16]	; (800691c <HMC5883L_readRegister8+0x34>)
 800690c:	f002 fdc8 	bl	80094a0 <HAL_I2C_Mem_Read>
    return value;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000970 	.word	0x20000970

08006920 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af04      	add	r7, sp, #16
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	b29a      	uxth	r2, r3
 800692e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006932:	9302      	str	r3, [sp, #8]
 8006934:	2302      	movs	r3, #2
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	f107 030e 	add.w	r3, r7, #14
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2301      	movs	r3, #1
 8006940:	213c      	movs	r1, #60	; 0x3c
 8006942:	4804      	ldr	r0, [pc, #16]	; (8006954 <HMC5883L_readRegister16+0x34>)
 8006944:	f002 fdac 	bl	80094a0 <HAL_I2C_Mem_Read>
    return value;
 8006948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000970 	.word	0x20000970

08006958 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 8006962:	2201      	movs	r2, #1
 8006964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006968:	481a      	ldr	r0, [pc, #104]	; (80069d4 <BMP280_initialize+0x7c>)
 800696a:	f002 fbdb 	bl	8009124 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f000 f83c 	bl	80069f2 <BMP280_getID>
 800697a:	4603      	mov	r3, r0
 800697c:	2b58      	cmp	r3, #88	; 0x58
 800697e:	d001      	beq.n	8006984 <BMP280_initialize+0x2c>
    {
        return 1;
 8006980:	2301      	movs	r3, #1
 8006982:	e023      	b.n	80069cc <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8006984:	6838      	ldr	r0, [r7, #0]
 8006986:	f000 f827 	bl	80069d8 <BMP280_reset>
    HAL_Delay(500);
 800698a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800698e:	f001 fd1d 	bl	80083cc <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 8006992:	2105      	movs	r1, #5
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f000 f8ef 	bl	8006b78 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 800699a:	2102      	movs	r1, #2
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f000 f90c 	bl	8006bba <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 80069a2:	2103      	movs	r1, #3
 80069a4:	6838      	ldr	r0, [r7, #0]
 80069a6:	f000 f929 	bl	8006bfc <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 80069aa:	2104      	movs	r1, #4
 80069ac:	6838      	ldr	r0, [r7, #0]
 80069ae:	f000 f966 	bl	8006c7e <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 80069b2:	2100      	movs	r1, #0
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f000 f941 	bl	8006c3c <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 80069ba:	6838      	ldr	r0, [r7, #0]
 80069bc:	f000 f826 	bl	8006a0c <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 80069c0:	2232      	movs	r2, #50	; 0x32
 80069c2:	2164      	movs	r1, #100	; 0x64
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f000 f89e 	bl	8006b06 <BMP280_setReferencePressure>

    return 0;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40020c00 	.word	0x40020c00

080069d8 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80069e0:	22b6      	movs	r2, #182	; 0xb6
 80069e2:	21e0      	movs	r1, #224	; 0xe0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa25 	bl	8006e34 <BMP280_writeRegister>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 80069fa:	21d0      	movs	r1, #208	; 0xd0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9fd 	bl	8006dfc <BMP280_readRegister>
 8006a02:	4603      	mov	r3, r0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 8006a14:	f107 0208 	add.w	r2, r7, #8
 8006a18:	2318      	movs	r3, #24
 8006a1a:	2188      	movs	r1, #136	; 0x88
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa28 	bl	8006e72 <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 8006a22:	7a7b      	ldrb	r3, [r7, #9]
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	b21a      	sxth	r2, r3
 8006a28:	7a3b      	ldrb	r3, [r7, #8]
 8006a2a:	b21b      	sxth	r3, r3
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	b21b      	sxth	r3, r3
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	7abb      	ldrb	r3, [r7, #10]
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b21a      	sxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8006a48:	7b7b      	ldrb	r3, [r7, #13]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	b21a      	sxth	r2, r3
 8006a4e:	7b3b      	ldrb	r3, [r7, #12]
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b21a      	sxth	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b21b      	sxth	r3, r3
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 8006a6e:	7c7b      	ldrb	r3, [r7, #17]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	b21a      	sxth	r2, r3
 8006a74:	7c3b      	ldrb	r3, [r7, #16]
 8006a76:	b21b      	sxth	r3, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	b21a      	sxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8006a80:	7cfb      	ldrb	r3, [r7, #19]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b21a      	sxth	r2, r3
 8006a86:	7cbb      	ldrb	r3, [r7, #18]
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b21a      	sxth	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 8006a92:	7d7b      	ldrb	r3, [r7, #21]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	b21a      	sxth	r2, r3
 8006a98:	7d3b      	ldrb	r3, [r7, #20]
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b21a      	sxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	7dbb      	ldrb	r3, [r7, #22]
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b21a      	sxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 8006ab6:	7e7b      	ldrb	r3, [r7, #25]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	b21a      	sxth	r2, r3
 8006abc:	7e3b      	ldrb	r3, [r7, #24]
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b21a      	sxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8006ac8:	7efb      	ldrb	r3, [r7, #27]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	b21a      	sxth	r2, r3
 8006ace:	7ebb      	ldrb	r3, [r7, #26]
 8006ad0:	b21b      	sxth	r3, r3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	b21a      	sxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 8006ada:	7f7b      	ldrb	r3, [r7, #29]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	b21a      	sxth	r2, r3
 8006ae0:	7f3b      	ldrb	r3, [r7, #28]
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b21a      	sxth	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8006aec:	7ffb      	ldrb	r3, [r7, #31]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	b21a      	sxth	r2, r3
 8006af2:	7fbb      	ldrb	r3, [r7, #30]
 8006af4:	b21b      	sxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b21a      	sxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8006afe:	bf00      	nop
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	807b      	strh	r3, [r7, #2]
 8006b12:	4613      	mov	r3, r2
 8006b14:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 8006b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b1a:	f001 fc57 	bl	80083cc <HAL_Delay>
    float sum = 0;
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	e012      	b.n	8006b50 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8c8 	bl	8006cc0 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b36:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3e:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 8006b42:	787b      	ldrb	r3, [r7, #1]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fc41 	bl	80083cc <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	887b      	ldrh	r3, [r7, #2]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dbe8      	blt.n	8006b2a <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8006b58:	887b      	ldrh	r3, [r7, #2]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b62:	edd7 6a03 	vldr	s13, [r7, #12]
 8006b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8006b84:	21f4      	movs	r1, #244	; 0xf4
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f938 	bl	8006dfc <BMP280_readRegister>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8006b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b94:	f023 031c 	bic.w	r3, r3, #28
 8006b98:	b25a      	sxtb	r2, r3
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	21f4      	movs	r1, #244	; 0xf4
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f941 	bl	8006e34 <BMP280_writeRegister>
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8006bc6:	21f4      	movs	r1, #244	; 0xf4
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f917 	bl	8006dfc <BMP280_readRegister>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 8006bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	b25a      	sxtb	r2, r3
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	015b      	lsls	r3, r3, #5
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	461a      	mov	r2, r3
 8006bec:	21f4      	movs	r1, #244	; 0xf4
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f920 	bl	8006e34 <BMP280_writeRegister>
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8006c08:	21f4      	movs	r1, #244	; 0xf4
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8f6 	bl	8006dfc <BMP280_readRegister>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 8006c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	b25a      	sxtb	r2, r3
 8006c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b25b      	sxtb	r3, r3
 8006c26:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	21f4      	movs	r1, #244	; 0xf4
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f900 	bl	8006e34 <BMP280_writeRegister>
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8006c48:	21f5      	movs	r1, #245	; 0xf5
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8d6 	bl	8006dfc <BMP280_readRegister>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8006c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	b25a      	sxtb	r2, r3
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	015b      	lsls	r3, r3, #5
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	4313      	orrs	r3, r2
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	21f5      	movs	r1, #245	; 0xf5
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8df 	bl	8006e34 <BMP280_writeRegister>
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8006c8a:	21f5      	movs	r1, #245	; 0xf5
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8b5 	bl	8006dfc <BMP280_readRegister>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 8006c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c9a:	f023 031c 	bic.w	r3, r3, #28
 8006c9e:	b25a      	sxtb	r2, r3
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b25b      	sxtb	r3, r3
 8006caa:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	21f5      	movs	r1, #245	; 0xf5
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8be 	bl	8006e34 <BMP280_writeRegister>
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8006cc8:	f107 0208 	add.w	r2, r7, #8
 8006ccc:	2306      	movs	r3, #6
 8006cce:	21f7      	movs	r1, #247	; 0xf7
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8ce 	bl	8006e72 <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8006cd6:	7a3b      	ldrb	r3, [r7, #8]
 8006cd8:	031a      	lsls	r2, r3, #12
 8006cda:	7a7b      	ldrb	r3, [r7, #9]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	7aba      	ldrb	r2, [r7, #10]
 8006ce2:	0912      	lsrs	r2, r2, #4
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	031a      	lsls	r2, r3, #12
 8006cee:	7b3b      	ldrb	r3, [r7, #12]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	0912      	lsrs	r2, r2, #4
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 8006cfe:	6939      	ldr	r1, [r7, #16]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f917 	bl	8006f34 <BMP280_compensate_temperature>
 8006d06:	ee07 0a90 	vmov	s15, r0
 8006d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d0e:	ee17 0a90 	vmov	r0, s15
 8006d12:	f7f9 fc41 	bl	8000598 <__aeabi_f2d>
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <BMP280_measure+0x130>)
 8006d1c:	f7f9 fdbe 	bl	800089c <__aeabi_ddiv>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	f7f9 ff86 	bl	8000c38 <__aeabi_d2f>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f953 	bl	8006fe0 <BMP280_compensate_pressure>
 8006d3a:	ee07 0a90 	vmov	s15, r0
 8006d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d42:	ee17 0a90 	vmov	r0, s15
 8006d46:	f7f9 fc27 	bl	8000598 <__aeabi_f2d>
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <BMP280_measure+0x134>)
 8006d50:	f7f9 fda4 	bl	800089c <__aeabi_ddiv>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f7f9 ff6c 	bl	8000c38 <__aeabi_d2f>
 8006d60:	4602      	mov	r2, r0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d74:	dc00      	bgt.n	8006d78 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 8006d76:	e02c      	b.n	8006dd2 <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	ed93 7a04 	vldr	s14, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006d88:	ee16 0a90 	vmov	r0, s13
 8006d8c:	f7f9 fc04 	bl	8000598 <__aeabi_f2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8006de0 <BMP280_measure+0x120>
 8006d98:	ec43 2b10 	vmov	d0, r2, r3
 8006d9c:	f010 f858 	bl	8016e50 <pow>
 8006da0:	ec53 2b10 	vmov	r2, r3, d0
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	4913      	ldr	r1, [pc, #76]	; (8006df8 <BMP280_measure+0x138>)
 8006daa:	f7f9 fa95 	bl	80002d8 <__aeabi_dsub>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4610      	mov	r0, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	a30c      	add	r3, pc, #48	; (adr r3, 8006de8 <BMP280_measure+0x128>)
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f7f9 fc44 	bl	8000648 <__aeabi_dmul>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7f9 ff36 	bl	8000c38 <__aeabi_d2f>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	615a      	str	r2, [r3, #20]
}
 8006dd2:	bf00      	nop
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	f3af 8000 	nop.w
 8006de0:	1a36e2eb 	.word	0x1a36e2eb
 8006de4:	3fc85bc0 	.word	0x3fc85bc0
 8006de8:	00000000 	.word	0x00000000
 8006dec:	4150e92d 	.word	0x4150e92d
 8006df0:	40590000 	.word	0x40590000
 8006df4:	40700000 	.word	0x40700000
 8006df8:	3ff00000 	.word	0x3ff00000

08006dfc <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f883 	bl	8006f14 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f855 	bl	8006ec2 <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f851 	bl	8006ec2 <BMP280_spiReadWrite>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f865 	bl	8006ef4 <BMP280_spiCSNhigh>
    return value;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
 8006e40:	4613      	mov	r3, r2
 8006e42:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f865 	bl	8006f14 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f834 	bl	8006ec2 <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 8006e5a:	78bb      	ldrb	r3, [r7, #2]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f82f 	bl	8006ec2 <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f845 	bl	8006ef4 <BMP280_spiCSNhigh>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 8006e72:	b590      	push	{r4, r7, lr}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	460b      	mov	r3, r1
 8006e80:	72fb      	strb	r3, [r7, #11]
 8006e82:	4613      	mov	r3, r2
 8006e84:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f844 	bl	8006f14 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f816 	bl	8006ec2 <BMP280_spiReadWrite>
    while (length--)
 8006e96:	e008      	b.n	8006eaa <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8006e98:	687c      	ldr	r4, [r7, #4]
 8006e9a:	1c63      	adds	r3, r4, #1
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f80e 	bl	8006ec2 <BMP280_spiReadWrite>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	7023      	strb	r3, [r4, #0]
    while (length--)
 8006eaa:	7abb      	ldrb	r3, [r7, #10]
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	72ba      	strb	r2, [r7, #10]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f1      	bne.n	8006e98 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f81d 	bl	8006ef4 <BMP280_spiCSNhigh>
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}

08006ec2 <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af02      	add	r7, sp, #8
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8006ece:	23ff      	movs	r3, #255	; 0xff
 8006ed0:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	f107 020f 	add.w	r2, r7, #15
 8006eda:	1cf9      	adds	r1, r7, #3
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f004 fac7 	bl	800b476 <HAL_SPI_TransmitReceive>
    return rx_message;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8006efc:	2201      	movs	r2, #1
 8006efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f02:	4803      	ldr	r0, [pc, #12]	; (8006f10 <BMP280_spiCSNhigh+0x1c>)
 8006f04:	f002 f90e 	bl	8009124 <HAL_GPIO_WritePin>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40020c00 	.word	0x40020c00

08006f14 <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f22:	4803      	ldr	r0, [pc, #12]	; (8006f30 <BMP280_spiCSNlow+0x1c>)
 8006f24:	f002 f8fe 	bl	8009124 <HAL_GPIO_WritePin>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40020c00 	.word	0x40020c00

08006f34 <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da00      	bge.n	8006f46 <BMP280_compensate_temperature+0x12>
 8006f44:	3307      	adds	r3, #7
 8006f46:	10db      	asrs	r3, r3, #3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8b1b      	ldrh	r3, [r3, #24]
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	da01      	bge.n	8006f64 <BMP280_compensate_temperature+0x30>
 8006f60:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006f64:	12db      	asrs	r3, r3, #11
 8006f66:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da00      	bge.n	8006f70 <BMP280_compensate_temperature+0x3c>
 8006f6e:	330f      	adds	r3, #15
 8006f70:	111b      	asrs	r3, r3, #4
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8b1b      	ldrh	r3, [r3, #24]
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da00      	bge.n	8006f82 <BMP280_compensate_temperature+0x4e>
 8006f80:	330f      	adds	r3, #15
 8006f82:	111b      	asrs	r3, r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8b1b      	ldrh	r3, [r3, #24]
 8006f8a:	1acb      	subs	r3, r1, r3
 8006f8c:	fb02 f303 	mul.w	r3, r2, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da01      	bge.n	8006f98 <BMP280_compensate_temperature+0x64>
 8006f94:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006f98:	131b      	asrs	r3, r3, #12
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da03      	bge.n	8006fb2 <BMP280_compensate_temperature+0x7e>
 8006faa:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006fae:	441a      	add	r2, r3
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	139b      	asrs	r3, r3, #14
 8006fb4:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	3380      	adds	r3, #128	; 0x80
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da00      	bge.n	8006fd2 <BMP280_compensate_temperature+0x9e>
 8006fd0:	33ff      	adds	r3, #255	; 0xff
 8006fd2:	121b      	asrs	r3, r3, #8
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8006fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe4:	b0d6      	sub	sp, #344	; 0x158
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8006fec:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8006ff0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	17da      	asrs	r2, r3, #31
 8006ff8:	461c      	mov	r4, r3
 8006ffa:	4615      	mov	r5, r2
 8006ffc:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8007000:	f145 3bff 	adc.w	fp, r5, #4294967295
 8007004:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8007008:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800700c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007010:	fb03 f102 	mul.w	r1, r3, r2
 8007014:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8007018:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	18ca      	adds	r2, r1, r3
 8007022:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007026:	fba3 8903 	umull	r8, r9, r3, r3
 800702a:	eb02 0309 	add.w	r3, r2, r9
 800702e:	4699      	mov	r9, r3
 8007030:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007034:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8007038:	b21b      	sxth	r3, r3
 800703a:	17da      	asrs	r2, r3, #31
 800703c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007040:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007044:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007048:	4603      	mov	r3, r0
 800704a:	fb03 f209 	mul.w	r2, r3, r9
 800704e:	460b      	mov	r3, r1
 8007050:	fb08 f303 	mul.w	r3, r8, r3
 8007054:	4413      	add	r3, r2
 8007056:	4602      	mov	r2, r0
 8007058:	fba8 1202 	umull	r1, r2, r8, r2
 800705c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007060:	460a      	mov	r2, r1
 8007062:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8007066:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800706a:	4413      	add	r3, r2
 800706c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007070:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007074:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8007078:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 800707c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007080:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8007084:	b21b      	sxth	r3, r3
 8007086:	17da      	asrs	r2, r3, #31
 8007088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800708c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8007090:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007094:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8007098:	462a      	mov	r2, r5
 800709a:	fb02 f203 	mul.w	r2, r2, r3
 800709e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80070a2:	4621      	mov	r1, r4
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	441a      	add	r2, r3
 80070aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80070ae:	4621      	mov	r1, r4
 80070b0:	fba3 1301 	umull	r1, r3, r3, r1
 80070b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80070b8:	460b      	mov	r3, r1
 80070ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80070be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070c2:	18d3      	adds	r3, r2, r3
 80070c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80070c8:	f04f 0000 	mov.w	r0, #0
 80070cc:	f04f 0100 	mov.w	r1, #0
 80070d0:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80070d4:	462b      	mov	r3, r5
 80070d6:	0459      	lsls	r1, r3, #17
 80070d8:	4623      	mov	r3, r4
 80070da:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80070de:	4623      	mov	r3, r4
 80070e0:	0458      	lsls	r0, r3, #17
 80070e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80070e6:	1814      	adds	r4, r2, r0
 80070e8:	67bc      	str	r4, [r7, #120]	; 0x78
 80070ea:	414b      	adcs	r3, r1
 80070ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070ee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80070f2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 80070f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80070fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80070fe:	b21b      	sxth	r3, r3
 8007100:	17da      	asrs	r2, r3, #31
 8007102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800710a:	f04f 0000 	mov.w	r0, #0
 800710e:	f04f 0100 	mov.w	r1, #0
 8007112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007116:	00d9      	lsls	r1, r3, #3
 8007118:	2000      	movs	r0, #0
 800711a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800711e:	1814      	adds	r4, r2, r0
 8007120:	673c      	str	r4, [r7, #112]	; 0x70
 8007122:	414b      	adcs	r3, r1
 8007124:	677b      	str	r3, [r7, #116]	; 0x74
 8007126:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800712a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 800712e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8007132:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007136:	fb03 f102 	mul.w	r1, r3, r2
 800713a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800713e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	18ca      	adds	r2, r1, r3
 8007148:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800714c:	fba3 1303 	umull	r1, r3, r3, r3
 8007150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007154:	460b      	mov	r3, r1
 8007156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800715a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715e:	18d3      	adds	r3, r2, r3
 8007160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007164:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007168:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800716c:	b21b      	sxth	r3, r3
 800716e:	17da      	asrs	r2, r3, #31
 8007170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007178:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800717c:	462b      	mov	r3, r5
 800717e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007182:	4642      	mov	r2, r8
 8007184:	fb02 f203 	mul.w	r2, r2, r3
 8007188:	464b      	mov	r3, r9
 800718a:	4621      	mov	r1, r4
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	4622      	mov	r2, r4
 8007194:	4641      	mov	r1, r8
 8007196:	fba2 1201 	umull	r1, r2, r2, r1
 800719a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800719e:	460a      	mov	r2, r1
 80071a0:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80071a4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80071a8:	4413      	add	r3, r2
 80071aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da07      	bge.n	80071c6 <BMP280_compensate_pressure+0x1e6>
 80071b6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80071ba:	66b9      	str	r1, [r7, #104]	; 0x68
 80071bc:	f143 0300 	adc.w	r3, r3, #0
 80071c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80071c6:	f04f 0000 	mov.w	r0, #0
 80071ca:	f04f 0100 	mov.w	r1, #0
 80071ce:	0a10      	lsrs	r0, r2, #8
 80071d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80071d4:	1219      	asrs	r1, r3, #8
 80071d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80071da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80071de:	b21b      	sxth	r3, r3
 80071e0:	17da      	asrs	r2, r3, #31
 80071e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071e6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80071ea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80071ee:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80071f2:	464a      	mov	r2, r9
 80071f4:	fb02 f203 	mul.w	r2, r2, r3
 80071f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80071fc:	4644      	mov	r4, r8
 80071fe:	fb04 f303 	mul.w	r3, r4, r3
 8007202:	441a      	add	r2, r3
 8007204:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007208:	4644      	mov	r4, r8
 800720a:	fba3 4304 	umull	r4, r3, r3, r4
 800720e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007212:	4623      	mov	r3, r4
 8007214:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007218:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800721c:	18d3      	adds	r3, r2, r3
 800721e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800722e:	464c      	mov	r4, r9
 8007230:	0323      	lsls	r3, r4, #12
 8007232:	4644      	mov	r4, r8
 8007234:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8007238:	4644      	mov	r4, r8
 800723a:	0322      	lsls	r2, r4, #12
 800723c:	1884      	adds	r4, r0, r2
 800723e:	663c      	str	r4, [r7, #96]	; 0x60
 8007240:	eb41 0303 	adc.w	r3, r1, r3
 8007244:	667b      	str	r3, [r7, #100]	; 0x64
 8007246:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800724a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 800724e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8007252:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8007256:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800725a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800725e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007262:	8bdb      	ldrh	r3, [r3, #30]
 8007264:	b29b      	uxth	r3, r3
 8007266:	2200      	movs	r2, #0
 8007268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800726c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007270:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8007274:	462b      	mov	r3, r5
 8007276:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800727a:	4642      	mov	r2, r8
 800727c:	fb02 f203 	mul.w	r2, r2, r3
 8007280:	464b      	mov	r3, r9
 8007282:	4621      	mov	r1, r4
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	4413      	add	r3, r2
 800728a:	4622      	mov	r2, r4
 800728c:	4641      	mov	r1, r8
 800728e:	fba2 1201 	umull	r1, r2, r2, r1
 8007292:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8007296:	460a      	mov	r2, r1
 8007298:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800729c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80072a0:	4413      	add	r3, r2
 80072a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da06      	bge.n	80072bc <BMP280_compensate_pressure+0x2dc>
 80072ae:	1e51      	subs	r1, r2, #1
 80072b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80072b2:	f143 0301 	adc.w	r3, r3, #1
 80072b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072bc:	f04f 0000 	mov.w	r0, #0
 80072c0:	f04f 0100 	mov.w	r1, #0
 80072c4:	1058      	asrs	r0, r3, #1
 80072c6:	17d9      	asrs	r1, r3, #31
 80072c8:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 80072cc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d101      	bne.n	80072d8 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e182      	b.n	80075de <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 80072d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072dc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80072e0:	17da      	asrs	r2, r3, #31
 80072e2:	653b      	str	r3, [r7, #80]	; 0x50
 80072e4:	657a      	str	r2, [r7, #84]	; 0x54
 80072e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80072ea:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 80072ee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8007300:	07d0      	lsls	r0, r2, #31
 8007302:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8007306:	1a84      	subs	r4, r0, r2
 8007308:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800730c:	eb61 0303 	sbc.w	r3, r1, r3
 8007310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007314:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8007318:	4622      	mov	r2, r4
 800731a:	462b      	mov	r3, r5
 800731c:	1891      	adds	r1, r2, r2
 800731e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007320:	415b      	adcs	r3, r3
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007328:	4621      	mov	r1, r4
 800732a:	1851      	adds	r1, r2, r1
 800732c:	6439      	str	r1, [r7, #64]	; 0x40
 800732e:	4629      	mov	r1, r5
 8007330:	414b      	adcs	r3, r1
 8007332:	647b      	str	r3, [r7, #68]	; 0x44
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007340:	4649      	mov	r1, r9
 8007342:	018b      	lsls	r3, r1, #6
 8007344:	4641      	mov	r1, r8
 8007346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800734a:	4641      	mov	r1, r8
 800734c:	018a      	lsls	r2, r1, #6
 800734e:	4641      	mov	r1, r8
 8007350:	1889      	adds	r1, r1, r2
 8007352:	63b9      	str	r1, [r7, #56]	; 0x38
 8007354:	4649      	mov	r1, r9
 8007356:	eb43 0101 	adc.w	r1, r3, r1
 800735a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007368:	4649      	mov	r1, r9
 800736a:	008b      	lsls	r3, r1, #2
 800736c:	4641      	mov	r1, r8
 800736e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007372:	4641      	mov	r1, r8
 8007374:	008a      	lsls	r2, r1, #2
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	4603      	mov	r3, r0
 800737c:	4622      	mov	r2, r4
 800737e:	189b      	adds	r3, r3, r2
 8007380:	633b      	str	r3, [r7, #48]	; 0x30
 8007382:	460b      	mov	r3, r1
 8007384:	462a      	mov	r2, r5
 8007386:	eb42 0303 	adc.w	r3, r2, r3
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8007398:	4649      	mov	r1, r9
 800739a:	008b      	lsls	r3, r1, #2
 800739c:	4641      	mov	r1, r8
 800739e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073a2:	4641      	mov	r1, r8
 80073a4:	008a      	lsls	r2, r1, #2
 80073a6:	4610      	mov	r0, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	4622      	mov	r2, r4
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073b4:	462b      	mov	r3, r5
 80073b6:	460a      	mov	r2, r1
 80073b8:	eb42 0303 	adc.w	r3, r2, r3
 80073bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073c0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80073c4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80073c8:	f7f9 fc86 	bl	8000cd8 <__aeabi_ldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 80073d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80073d8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80073dc:	b21b      	sxth	r3, r3
 80073de:	17da      	asrs	r2, r3, #31
 80073e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073e8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da08      	bge.n	8007402 <BMP280_compensate_pressure+0x422>
 80073f0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80073f4:	1851      	adds	r1, r2, r1
 80073f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80073f8:	f143 0300 	adc.w	r3, r3, #0
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	0b50      	lsrs	r0, r2, #13
 800740c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8007410:	1359      	asrs	r1, r3, #13
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800741a:	4629      	mov	r1, r5
 800741c:	fb02 f001 	mul.w	r0, r2, r1
 8007420:	4621      	mov	r1, r4
 8007422:	fb01 f103 	mul.w	r1, r1, r3
 8007426:	4401      	add	r1, r0
 8007428:	4620      	mov	r0, r4
 800742a:	fba0 2302 	umull	r2, r3, r0, r2
 800742e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007432:	4613      	mov	r3, r2
 8007434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743c:	18cb      	adds	r3, r1, r3
 800743e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007442:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8007446:	2b00      	cmp	r3, #0
 8007448:	da08      	bge.n	800745c <BMP280_compensate_pressure+0x47c>
 800744a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800744e:	1851      	adds	r1, r2, r1
 8007450:	6239      	str	r1, [r7, #32]
 8007452:	f143 0300 	adc.w	r3, r3, #0
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
 8007458:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800745c:	f04f 0000 	mov.w	r0, #0
 8007460:	f04f 0100 	mov.w	r1, #0
 8007464:	0b50      	lsrs	r0, r2, #13
 8007466:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800746a:	1359      	asrs	r1, r3, #13
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8007474:	4629      	mov	r1, r5
 8007476:	fb02 f001 	mul.w	r0, r2, r1
 800747a:	4621      	mov	r1, r4
 800747c:	fb01 f103 	mul.w	r1, r1, r3
 8007480:	4401      	add	r1, r0
 8007482:	4620      	mov	r0, r4
 8007484:	fba0 2302 	umull	r2, r3, r0, r2
 8007488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800748c:	4613      	mov	r3, r2
 800748e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007496:	18cb      	adds	r3, r1, r3
 8007498:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800749c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da08      	bge.n	80074b6 <BMP280_compensate_pressure+0x4d6>
 80074a4:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 80074a8:	1851      	adds	r1, r2, r1
 80074aa:	61b9      	str	r1, [r7, #24]
 80074ac:	f143 0300 	adc.w	r3, r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b6:	f04f 0000 	mov.w	r0, #0
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	0e50      	lsrs	r0, r2, #25
 80074c0:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 80074c4:	1659      	asrs	r1, r3, #25
 80074c6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 80074ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80074ce:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	17da      	asrs	r2, r3, #31
 80074d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074da:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80074de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80074e2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80074e6:	462a      	mov	r2, r5
 80074e8:	fb02 f203 	mul.w	r2, r2, r3
 80074ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80074f0:	4621      	mov	r1, r4
 80074f2:	fb01 f303 	mul.w	r3, r1, r3
 80074f6:	441a      	add	r2, r3
 80074f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80074fc:	4621      	mov	r1, r4
 80074fe:	fba3 1301 	umull	r1, r3, r3, r1
 8007502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007506:	460b      	mov	r3, r1
 8007508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800750c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007516:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800751a:	2900      	cmp	r1, #0
 800751c:	da07      	bge.n	800752e <BMP280_compensate_pressure+0x54e>
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <BMP280_compensate_pressure+0x60c>)
 8007520:	18c3      	adds	r3, r0, r3
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	f141 0300 	adc.w	r3, r1, #0
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	0cc2      	lsrs	r2, r0, #19
 8007538:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800753c:	14cb      	asrs	r3, r1, #19
 800753e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8007542:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8007546:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800754a:	1884      	adds	r4, r0, r2
 800754c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007550:	eb41 0303 	adc.w	r3, r1, r3
 8007554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007558:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800755c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007560:	4621      	mov	r1, r4
 8007562:	1889      	adds	r1, r1, r2
 8007564:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007568:	4629      	mov	r1, r5
 800756a:	eb43 0101 	adc.w	r1, r3, r1
 800756e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8007572:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007576:	2b00      	cmp	r3, #0
 8007578:	da07      	bge.n	800758a <BMP280_compensate_pressure+0x5aa>
 800757a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	f143 0300 	adc.w	r3, r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800758a:	f04f 0000 	mov.w	r0, #0
 800758e:	f04f 0100 	mov.w	r1, #0
 8007592:	0a10      	lsrs	r0, r2, #8
 8007594:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8007598:	1219      	asrs	r1, r3, #8
 800759a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800759e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	17da      	asrs	r2, r3, #31
 80075a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075aa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80075ba:	464c      	mov	r4, r9
 80075bc:	0123      	lsls	r3, r4, #4
 80075be:	4644      	mov	r4, r8
 80075c0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80075c4:	4644      	mov	r4, r8
 80075c6:	0122      	lsls	r2, r4, #4
 80075c8:	1884      	adds	r4, r0, r2
 80075ca:	603c      	str	r4, [r7, #0]
 80075cc:	eb41 0303 	adc.w	r3, r1, r3
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80075d6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 80075da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 80075de:	4618      	mov	r0, r3
 80075e0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	0007ffff 	.word	0x0007ffff

080075f0 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b09c      	sub	sp, #112	; 0x70
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80075fa:	2201      	movs	r2, #1
 80075fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007600:	482c      	ldr	r0, [pc, #176]	; (80076b4 <MPU_Init+0xc4>)
 8007602:	f001 fd8f 	bl	8009124 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_2000DPS;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2203      	movs	r2, #3
 800760a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_16G;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2203      	movs	r2, #3
 8007612:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800761c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	4a24      	ldr	r2, [pc, #144]	; (80076b4 <MPU_Init+0xc4>)
 8007624:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <MPU_Init+0xc8>)
 800762a:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f843 	bl	80076c8 <MPU_begin>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d023      	beq.n	8007690 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <MPU_Init+0xcc>)
 800764a:	f107 040c 	add.w	r4, r7, #12
 800764e:	461d      	mov	r5, r3
 8007650:	6828      	ldr	r0, [r5, #0]
 8007652:	6869      	ldr	r1, [r5, #4]
 8007654:	68aa      	ldr	r2, [r5, #8]
 8007656:	68eb      	ldr	r3, [r5, #12]
 8007658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800765a:	6928      	ldr	r0, [r5, #16]
 800765c:	6969      	ldr	r1, [r5, #20]
 800765e:	69aa      	ldr	r2, [r5, #24]
 8007660:	c407      	stmia	r4!, {r0, r1, r2}
 8007662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007666:	2248      	movs	r2, #72	; 0x48
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f00b fb57 	bl	8012d1e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8007670:	f107 030c 	add.w	r3, r7, #12
 8007674:	4618      	mov	r0, r3
 8007676:	f7f8 fe23 	bl	80002c0 <strlen>
 800767a:	4603      	mov	r3, r0
 800767c:	b29a      	uxth	r2, r3
 800767e:	f107 010c 	add.w	r1, r7, #12
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	480e      	ldr	r0, [pc, #56]	; (80076c0 <MPU_Init+0xd0>)
 8007688:	f006 f93c 	bl	800d904 <HAL_UART_Transmit>
		return 1;
 800768c:	2301      	movs	r3, #1
 800768e:	e00c      	b.n	80076aa <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	2210      	movs	r2, #16
 8007696:	490b      	ldr	r1, [pc, #44]	; (80076c4 <MPU_Init+0xd4>)
 8007698:	4809      	ldr	r0, [pc, #36]	; (80076c0 <MPU_Init+0xd0>)
 800769a:	f006 f933 	bl	800d904 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 800769e:	2214      	movs	r2, #20
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8a1 	bl	80077ea <MPU_calibrateGyro>

	return 0;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3770      	adds	r7, #112	; 0x70
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bdb0      	pop	{r4, r5, r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40020c00 	.word	0x40020c00
 80076b8:	3f7ae148 	.word	0x3f7ae148
 80076bc:	080184e0 	.word	0x080184e0
 80076c0:	20000c34 	.word	0x20000c34
 80076c4:	080184cc 	.word	0x080184cc

080076c8 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 80076d2:	f107 030f 	add.w	r3, r7, #15
 80076d6:	2201      	movs	r2, #1
 80076d8:	9200      	str	r2, [sp, #0]
 80076da:	2275      	movs	r2, #117	; 0x75
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f90d 	bl	80078fe <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b70      	cmp	r3, #112	; 0x70
 80076e8:	d17a      	bne.n	80077e0 <MPU_begin+0x118>
    {
    	// Reset the sensor
    	addr = PWR_MGMT_1;
 80076ea:	236b      	movs	r3, #107	; 0x6b
 80076ec:	73bb      	strb	r3, [r7, #14]
        val = 0x80;
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	737b      	strb	r3, [r7, #13]
    	MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80076f2:	f107 030d 	add.w	r3, r7, #13
 80076f6:	f107 020e 	add.w	r2, r7, #14
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f8dd 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 8007702:	2032      	movs	r0, #50	; 0x32
 8007704:	f000 fe62 	bl	80083cc <HAL_Delay>

        // Startup & use PLL
        addr = PWR_MGMT_1;
 8007708:	236b      	movs	r3, #107	; 0x6b
 800770a:	73bb      	strb	r3, [r7, #14]
        val = 0x01;
 800770c:	2301      	movs	r3, #1
 800770e:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007710:	f107 030d 	add.w	r3, r7, #13
 8007714:	f107 020e 	add.w	r2, r7, #14
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8ce 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 8007720:	2032      	movs	r0, #50	; 0x32
 8007722:	f000 fe53 	bl	80083cc <HAL_Delay>

        // Enable everything
        addr = PWR_MGMT_2;
 8007726:	236c      	movs	r3, #108	; 0x6c
 8007728:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800772a:	2300      	movs	r3, #0
 800772c:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800772e:	f107 030d 	add.w	r3, r7, #13
 8007732:	f107 020e 	add.w	r2, r7, #14
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f8bf 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800773e:	2032      	movs	r0, #50	; 0x32
 8007740:	f000 fe44 	bl	80083cc <HAL_Delay>

        // Sample rate is 1000 Hz
		addr = SMPLRT_DIV;
 8007744:	2319      	movs	r3, #25
 8007746:	73bb      	strb	r3, [r7, #14]
		val = 0x00;
 8007748:	2300      	movs	r3, #0
 800774a:	737b      	strb	r3, [r7, #13]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800774c:	f107 030d 	add.w	r3, r7, #13
 8007750:	f107 020e 	add.w	r2, r7, #14
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8b0 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 800775c:	2032      	movs	r0, #50	; 0x32
 800775e:	f000 fe35 	bl	80083cc <HAL_Delay>


    	// Gyro
    	// Set 92 Hz LPF for gyro
		uint8_t addr = CONFIG;
 8007762:	231a      	movs	r3, #26
 8007764:	733b      	strb	r3, [r7, #12]
		uint8_t val = 0x02;
 8007766:	2302      	movs	r3, #2
 8007768:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800776a:	f107 030b 	add.w	r3, r7, #11
 800776e:	f107 020c 	add.w	r2, r7, #12
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8a1 	bl	80078bc <MPU_REG_WRITE>
		HAL_Delay(50);
 800777a:	2032      	movs	r0, #50	; 0x32
 800777c:	f000 fe26 	bl	80083cc <HAL_Delay>

		// Set the full scale range for gyro
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007786:	461a      	mov	r2, r3
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f95c 	bl	8007a48 <MPU_writeGyroFullScaleRange>


		// Accel
		// Set the full scale range for accel
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007796:	461a      	mov	r2, r3
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f8ea 	bl	8007974 <MPU_writeAccFullScaleRange>

        // Set 44.8 Hz LPF for accel
		addr = ACCEL_CONFIG_2;
 80077a0:	231d      	movs	r3, #29
 80077a2:	733b      	strb	r3, [r7, #12]
		val = 0x03;
 80077a4:	2303      	movs	r3, #3
 80077a6:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80077a8:	f107 030b 	add.w	r3, r7, #11
 80077ac:	f107 020c 	add.w	r2, r7, #12
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f882 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 80077b8:	2032      	movs	r0, #50	; 0x32
 80077ba:	f000 fe07 	bl	80083cc <HAL_Delay>


        // Disable I2C (SPI only)
        addr = USER_CTRL;
 80077be:	236a      	movs	r3, #106	; 0x6a
 80077c0:	733b      	strb	r3, [r7, #12]
        val = 0x10;
 80077c2:	2310      	movs	r3, #16
 80077c4:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80077c6:	f107 030b 	add.w	r3, r7, #11
 80077ca:	f107 020c 	add.w	r2, r7, #12
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f873 	bl	80078bc <MPU_REG_WRITE>
    	HAL_Delay(50);
 80077d6:	2032      	movs	r0, #50	; 0x32
 80077d8:	f000 fdf8 	bl	80083cc <HAL_Delay>

        return 1;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <MPU_begin+0x11a>
    }
    else
        return 0;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800780e:	2300      	movs	r3, #0
 8007810:	827b      	strh	r3, [r7, #18]
 8007812:	e01e      	b.n	8007852 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 f984 	bl	8007b24 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007822:	461a      	mov	r2, r3
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007830:	461a      	mov	r2, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4413      	add	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	4413      	add	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8007846:	2003      	movs	r0, #3
 8007848:	f000 fdc0 	bl	80083cc <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800784c:	8a7b      	ldrh	r3, [r7, #18]
 800784e:	3301      	adds	r3, #1
 8007850:	827b      	strh	r3, [r7, #18]
 8007852:	8a7a      	ldrh	r2, [r7, #18]
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	429a      	cmp	r2, r3
 8007858:	d3dc      	bcc.n	8007814 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800786e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	ee07 3a90 	vmov	s15, r3
 8007888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800788c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80078b4:	bf00      	nop
 80078b6:	3720      	adds	r7, #32
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 80078ca:	2100      	movs	r1, #0
 80078cc:	68b8      	ldr	r0, [r7, #8]
 80078ce:	f000 f83e 	bl	800794e <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 80078d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078d6:	2201      	movs	r2, #1
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f003 fb2d 	bl	800af3a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 80078e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078e4:	2201      	movs	r2, #1
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f003 fb26 	bl	800af3a <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 80078ee:	2101      	movs	r1, #1
 80078f0:	68b8      	ldr	r0, [r7, #8]
 80078f2:	f000 f82c 	bl	800794e <MPU_CS>
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	603b      	str	r3, [r7, #0]
 800790a:	4613      	mov	r3, r2
 800790c:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800790e:	2100      	movs	r1, #0
 8007910:	68b8      	ldr	r0, [r7, #8]
 8007912:	f000 f81c 	bl	800794e <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800791c:	b2db      	uxtb	r3, r3
 800791e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8007920:	f107 0117 	add.w	r1, r7, #23
 8007924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007928:	2201      	movs	r2, #1
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f003 fb05 	bl	800af3a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8007930:	8c3a      	ldrh	r2, [r7, #32]
 8007932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f003 fc6c 	bl	800b216 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800793e:	2101      	movs	r1, #1
 8007940:	68b8      	ldr	r0, [r7, #8]
 8007942:	f000 f804 	bl	800794e <MPU_CS>
}
 8007946:	bf00      	nop
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	4619      	mov	r1, r3
 8007968:	f001 fbdc 	bl	8009124 <HAL_GPIO_WritePin>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 8007982:	231c      	movs	r3, #28
 8007984:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d847      	bhi.n	8007a1c <MPU_writeAccFullScaleRange+0xa8>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <MPU_writeAccFullScaleRange+0x20>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079ff 	.word	0x080079ff
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80079aa:	615a      	str	r2, [r3, #20]
        val = 0x00;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80079b0:	f107 0316 	add.w	r3, r7, #22
 80079b4:	f107 0217 	add.w	r2, r7, #23
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff7e 	bl	80078bc <MPU_REG_WRITE>
        break;
 80079c0:	e03b      	b.n	8007a3a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80079c8:	615a      	str	r2, [r3, #20]
        val = 0x08;
 80079ca:	2308      	movs	r3, #8
 80079cc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80079ce:	f107 0316 	add.w	r3, r7, #22
 80079d2:	f107 0217 	add.w	r2, r7, #23
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff ff6f 	bl	80078bc <MPU_REG_WRITE>
        break;
 80079de:	e02c      	b.n	8007a3a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80079e6:	615a      	str	r2, [r3, #20]
        val = 0x10;
 80079e8:	2310      	movs	r3, #16
 80079ea:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80079ec:	f107 0316 	add.w	r3, r7, #22
 80079f0:	f107 0217 	add.w	r2, r7, #23
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff ff60 	bl	80078bc <MPU_REG_WRITE>
        break;
 80079fc:	e01d      	b.n	8007a3a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8007a04:	615a      	str	r2, [r3, #20]
        val = 0x18;
 8007a06:	2318      	movs	r3, #24
 8007a08:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007a0a:	f107 0316 	add.w	r3, r7, #22
 8007a0e:	f107 0217 	add.w	r2, r7, #23
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff ff51 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007a1a:	e00e      	b.n	8007a3a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8007a22:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8007a24:	2308      	movs	r3, #8
 8007a26:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007a28:	f107 0316 	add.w	r3, r7, #22
 8007a2c:	f107 0217 	add.w	r2, r7, #23
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff ff42 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007a38:	bf00      	nop
    }
	HAL_Delay(50);
 8007a3a:	2032      	movs	r0, #50	; 0x32
 8007a3c:	f000 fcc6 	bl	80083cc <HAL_Delay>
}
 8007a40:	bf00      	nop
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 8007a56:	231b      	movs	r3, #27
 8007a58:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d843      	bhi.n	8007ae8 <MPU_writeGyroFullScaleRange+0xa0>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <MPU_writeGyroFullScaleRange+0x20>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007acd 	.word	0x08007acd
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4a26      	ldr	r2, [pc, #152]	; (8007b14 <MPU_writeGyroFullScaleRange+0xcc>)
 8007a7c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007a82:	f107 0316 	add.w	r3, r7, #22
 8007a86:	f107 0217 	add.w	r2, r7, #23
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff ff15 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007a92:	e037      	b.n	8007b04 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4a20      	ldr	r2, [pc, #128]	; (8007b18 <MPU_writeGyroFullScaleRange+0xd0>)
 8007a98:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007a9e:	f107 0316 	add.w	r3, r7, #22
 8007aa2:	f107 0217 	add.w	r2, r7, #23
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff ff07 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007aae:	e029      	b.n	8007b04 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4a1a      	ldr	r2, [pc, #104]	; (8007b1c <MPU_writeGyroFullScaleRange+0xd4>)
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007aba:	f107 0316 	add.w	r3, r7, #22
 8007abe:	f107 0217 	add.w	r2, r7, #23
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fef9 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007aca:	e01b      	b.n	8007b04 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <MPU_writeGyroFullScaleRange+0xd8>)
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 8007ad2:	2318      	movs	r3, #24
 8007ad4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007ad6:	f107 0316 	add.w	r3, r7, #22
 8007ada:	f107 0217 	add.w	r2, r7, #23
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff feeb 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007ae6:	e00d      	b.n	8007b04 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4a0b      	ldr	r2, [pc, #44]	; (8007b18 <MPU_writeGyroFullScaleRange+0xd0>)
 8007aec:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 8007aee:	2308      	movs	r3, #8
 8007af0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8007af2:	f107 0316 	add.w	r3, r7, #22
 8007af6:	f107 0217 	add.w	r2, r7, #23
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff fedd 	bl	80078bc <MPU_REG_WRITE>
        break;
 8007b02:	bf00      	nop
    }
	HAL_Delay(50);
 8007b04:	2032      	movs	r0, #50	; 0x32
 8007b06:	f000 fc61 	bl	80083cc <HAL_Delay>
}
 8007b0a:	bf00      	nop
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	43030000 	.word	0x43030000
 8007b18:	42830000 	.word	0x42830000
 8007b1c:	42033333 	.word	0x42033333
 8007b20:	41833333 	.word	0x41833333

08007b24 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	2226      	movs	r2, #38	; 0x26
 8007b34:	9200      	str	r2, [sp, #0]
 8007b36:	223b      	movs	r2, #59	; 0x3b
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fedf 	bl	80078fe <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 8007b40:	7a3b      	ldrb	r3, [r7, #8]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b21a      	sxth	r2, r3
 8007b46:	7a7b      	ldrb	r3, [r7, #9]
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b21a      	sxth	r2, r3
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 8007b52:	7abb      	ldrb	r3, [r7, #10]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	b21a      	sxth	r2, r3
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	b21b      	sxth	r3, r3
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 8007b64:	7b3b      	ldrb	r3, [r7, #12]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b21a      	sxth	r2, r3
 8007b6a:	7b7b      	ldrb	r3, [r7, #13]
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b21a      	sxth	r2, r3
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	b21b      	sxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b21a      	sxth	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 8007b88:	7c3b      	ldrb	r3, [r7, #16]
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	b21a      	sxth	r2, r3
 8007b8e:	7c7b      	ldrb	r3, [r7, #17]
 8007b90:	b21b      	sxth	r3, r3
 8007b92:	4313      	orrs	r3, r2
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	425b      	negs	r3, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	b21a      	sxth	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 8007ba2:	7cbb      	ldrb	r3, [r7, #18]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b21a      	sxth	r2, r3
 8007ba8:	7cfb      	ldrb	r3, [r7, #19]
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	4313      	orrs	r3, r2
 8007bae:	b21b      	sxth	r3, r3
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	425b      	negs	r3, r3
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b21a      	sxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 8007bbc:	7d3b      	ldrb	r3, [r7, #20]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	b21a      	sxth	r2, r3
 8007bc2:	7d7b      	ldrb	r3, [r7, #21]
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b21b      	sxth	r3, r3
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	425b      	negs	r3, r3
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	b21a      	sxth	r2, r3
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 8007bd6:	bf00      	nop
 8007bd8:	3730      	adds	r7, #48	; 0x30
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ff99 	bl	8007b24 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	ed93 7a05 	vldr	s14, [r3, #20]
 8007c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	ed93 7a05 	vldr	s14, [r3, #20]
 8007c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7f8 fc8e 	bl	8000574 <__aeabi_i2d>
 8007c58:	a336      	add	r3, pc, #216	; (adr r3, 8007d34 <MPU_readProcessedData+0x154>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fe1d 	bl	800089c <__aeabi_ddiv>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	4b30      	ldr	r3, [pc, #192]	; (8007d30 <MPU_readProcessedData+0x150>)
 8007c70:	f7f8 fb34 	bl	80002dc <__adddf3>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	f7f8 ffdc 	bl	8000c38 <__aeabi_d2f>
 8007c80:	4602      	mov	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w
 8007d30:	40350000 	.word	0x40350000
 8007d34:	851eb852 	.word	0x851eb852
 8007d38:	4074ddeb 	.word	0x4074ddeb
 8007d3c:	00000000 	.word	0x00000000

08007d40 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8007d40:	b5b0      	push	{r4, r5, r7, lr}
 8007d42:	ed2d 8b02 	vpush	{d8}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff45 	bl	8007be0 <MPU_readProcessedData>

    // Complementary filter
    float accelRoll = atan2f(pMPU9250->sensorData.ay, sqrt(pow(pMPU9250->sensorData.ax,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	ed93 8a07 	vldr	s16, [r3, #28]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7f8 fc19 	bl	8000598 <__aeabi_f2d>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8007f90 <MPU_calcAttitude+0x250>
 8007d6e:	ec43 2b10 	vmov	d0, r2, r3
 8007d72:	f00f f86d 	bl	8016e50 <pow>
 8007d76:	ec55 4b10 	vmov	r4, r5, d0
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fc0a 	bl	8000598 <__aeabi_f2d>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8007f90 <MPU_calcAttitude+0x250>
 8007d8c:	ec43 2b10 	vmov	d0, r2, r3
 8007d90:	f00f f85e 	bl	8016e50 <pow>
 8007d94:	ec53 2b10 	vmov	r2, r3, d0
 8007d98:	4620      	mov	r0, r4
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	f7f8 fa9e 	bl	80002dc <__adddf3>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	ec43 2b17 	vmov	d7, r2, r3
 8007da8:	eeb0 0a47 	vmov.f32	s0, s14
 8007dac:	eef0 0a67 	vmov.f32	s1, s15
 8007db0:	f00f f8be 	bl	8016f30 <sqrt>
 8007db4:	ec53 2b10 	vmov	r2, r3, d0
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f7f8 ff3c 	bl	8000c38 <__aeabi_d2f>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	ee00 3a90 	vmov	s1, r3
 8007dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dca:	f00f f8dd 	bl	8016f88 <atan2f>
 8007dce:	ee10 3a10 	vmov	r3, s0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7f8 fbe0 	bl	8000598 <__aeabi_f2d>
 8007dd8:	a370      	add	r3, pc, #448	; (adr r3, 8007f9c <MPU_calcAttitude+0x25c>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fc33 	bl	8000648 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 ff25 	bl	8000c38 <__aeabi_d2f>
 8007dee:	4603      	mov	r3, r0
 8007df0:	617b      	str	r3, [r7, #20]
    float accelPitch = atan2f(-(pMPU9250->sensorData.ax), sqrt(pow(pMPU9250->sensorData.ay,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007df8:	eeb1 8a67 	vneg.f32	s16, s15
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7f8 fbc9 	bl	8000598 <__aeabi_f2d>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8007f90 <MPU_calcAttitude+0x250>
 8007e0e:	ec43 2b10 	vmov	d0, r2, r3
 8007e12:	f00f f81d 	bl	8016e50 <pow>
 8007e16:	ec55 4b10 	vmov	r4, r5, d0
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7f8 fbba 	bl	8000598 <__aeabi_f2d>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8007f90 <MPU_calcAttitude+0x250>
 8007e2c:	ec43 2b10 	vmov	d0, r2, r3
 8007e30:	f00f f80e 	bl	8016e50 <pow>
 8007e34:	ec53 2b10 	vmov	r2, r3, d0
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa4e 	bl	80002dc <__adddf3>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	ec43 2b17 	vmov	d7, r2, r3
 8007e48:	eeb0 0a47 	vmov.f32	s0, s14
 8007e4c:	eef0 0a67 	vmov.f32	s1, s15
 8007e50:	f00f f86e 	bl	8016f30 <sqrt>
 8007e54:	ec53 2b10 	vmov	r2, r3, d0
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f7f8 feec 	bl	8000c38 <__aeabi_d2f>
 8007e60:	4603      	mov	r3, r0
 8007e62:	ee00 3a90 	vmov	s1, r3
 8007e66:	eeb0 0a48 	vmov.f32	s0, s16
 8007e6a:	f00f f88d 	bl	8016f88 <atan2f>
 8007e6e:	ee10 3a10 	vmov	r3, s0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f8 fb90 	bl	8000598 <__aeabi_f2d>
 8007e78:	a348      	add	r3, pc, #288	; (adr r3, 8007f9c <MPU_calcAttitude+0x25c>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fbe3 	bl	8000648 <__aeabi_dmul>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f7f8 fed5 	bl	8000c38 <__aeabi_d2f>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	613b      	str	r3, [r7, #16]

    // Calculating dt
    uint32_t currentTick = xTaskGetTickCount();
 8007e92:	f008 fe03 	bl	8010a9c <xTaskGetTickCount>
 8007e96:	4603      	mov	r3, r0
 8007e98:	60fb      	str	r3, [r7, #12]
    if (pMPU9250->attitude.lastTick == 0 && pMPU9250->attitude.dt == 0)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <MPU_calcAttitude+0x172>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	d00e      	beq.n	8007ed0 <MPU_calcAttitude+0x190>
    	{}
    else
    	pMPU9250->attitude.dt = (currentTick - pMPU9250->attitude.lastTick) / 1000.0f;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ec2:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007f98 <MPU_calcAttitude+0x258>
 8007ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.lastTick = currentTick;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54

    //pMPU9250->attitude.roll += (pMPU9250->sensorData.gx * pMPU9250->attitude.dt);
    pMPU9250->attitude.roll = pMPU9250->attitude.tau * (pMPU9250->attitude.roll + pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelRoll;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007eee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    //pMPU9250->attitude.pitch += (pMPU9250->sensorData.gy * pMPU9250->attitude.dt);
    pMPU9250->attitude.pitch = pMPU9250->attitude.tau * (pMPU9250->attitude.pitch + pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelPitch;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007f32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    pMPU9250->attitude.yaw += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8007f7e:	bf00      	nop
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	ecbd 8b02 	vpop	{d8}
 8007f88:	bdb0      	pop	{r4, r5, r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	f3af 8000 	nop.w
 8007f90:	00000000 	.word	0x00000000
 8007f94:	40000000 	.word	0x40000000
 8007f98:	447a0000 	.word	0x447a0000
 8007f9c:	1a63cbb0 	.word	0x1a63cbb0
 8007fa0:	404ca5dc 	.word	0x404ca5dc

08007fa4 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a21      	ldr	r2, [pc, #132]	; (8008038 <HCSR04_Init+0x94>)
 8007fb2:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007fba:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	; (800803c <HCSR04_Init+0x98>)
 8007fc0:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	226c      	movs	r2, #108	; 0x6c
 8007fcc:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007fe4:	e019      	b.n	800801a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d104      	bne.n	8007ff8 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007ff6:	e010      	b.n	800801a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d104      	bne.n	800800a <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2204      	movs	r2, #4
 8008004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008008:	e007      	b.n	800801a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	2b0c      	cmp	r3, #12
 8008010:	d103      	bne.n	800801a <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2208      	movs	r2, #8
 8008016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800801a:	6838      	ldr	r0, [r7, #0]
 800801c:	f003 fe9a 	bl	800bd54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	4619      	mov	r1, r3
 8008026:	6838      	ldr	r0, [r7, #0]
 8008028:	f004 f8c0 	bl	800c1ac <HAL_TIM_IC_Start_IT>

	return 0;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40020c00 	.word	0x40020c00
 800803c:	40000400 	.word	0x40000400

08008040 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	f040 812e 	bne.w	80082b8 <HCSR04_TMR_IC_ISR+0x278>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	7f1a      	ldrb	r2, [r3, #28]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008066:	429a      	cmp	r2, r3
 8008068:	f040 8126 	bne.w	80082b8 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7d5b      	ldrb	r3, [r3, #21]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d16d      	bne.n	8008150 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4619      	mov	r1, r3
 800807a:	6838      	ldr	r0, [r7, #0]
 800807c:	f004 fd80 	bl	800cb80 <HAL_TIM_ReadCapturedValue>
 8008080:	4602      	mov	r2, r0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d108      	bne.n	80080a6 <HCSR04_TMR_IC_ISR+0x66>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 020a 	bic.w	r2, r2, #10
 80080a2:	621a      	str	r2, [r3, #32]
 80080a4:	e021      	b.n	80080ea <HCSR04_TMR_IC_ISR+0xaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d108      	bne.n	80080c0 <HCSR04_TMR_IC_ISR+0x80>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080bc:	6213      	str	r3, [r2, #32]
 80080be:	e014      	b.n	80080ea <HCSR04_TMR_IC_ISR+0xaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d108      	bne.n	80080da <HCSR04_TMR_IC_ISR+0x9a>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80080d6:	6213      	str	r3, [r2, #32]
 80080d8:	e007      	b.n	80080ea <HCSR04_TMR_IC_ISR+0xaa>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080e8:	6213      	str	r3, [r2, #32]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d108      	bne.n	8008104 <HCSR04_TMR_IC_ISR+0xc4>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a1a      	ldr	r2, [r3, #32]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0202 	orr.w	r2, r2, #2
 8008100:	621a      	str	r2, [r3, #32]
 8008102:	e021      	b.n	8008148 <HCSR04_TMR_IC_ISR+0x108>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b04      	cmp	r3, #4
 800810a:	d108      	bne.n	800811e <HCSR04_TMR_IC_ISR+0xde>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	f043 0320 	orr.w	r3, r3, #32
 800811a:	6213      	str	r3, [r2, #32]
 800811c:	e014      	b.n	8008148 <HCSR04_TMR_IC_ISR+0x108>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b08      	cmp	r3, #8
 8008124:	d108      	bne.n	8008138 <HCSR04_TMR_IC_ISR+0xf8>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008134:	6213      	str	r3, [r2, #32]
 8008136:	e007      	b.n	8008148 <HCSR04_TMR_IC_ISR+0x108>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008146:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800814e:	e0b3      	b.n	80082b8 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7d5b      	ldrb	r3, [r3, #21]
 8008154:	2b01      	cmp	r3, #1
 8008156:	f040 80af 	bne.w	80082b8 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4619      	mov	r1, r3
 8008172:	6838      	ldr	r0, [r7, #0]
 8008174:	f004 fd04 	bl	800cb80 <HAL_TIM_ReadCapturedValue>
 8008178:	4602      	mov	r2, r0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	429a      	cmp	r2, r3
 8008188:	d207      	bcs.n	800819a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28
 8008198:	e00f      	b.n	80081ba <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d209      	bcs.n	80081ba <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081b4:	4413      	add	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081c6:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80082c0 <HCSR04_TMR_IC_ISR+0x280>
 80081ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80081ce:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80082c4 <HCSR04_TMR_IC_ISR+0x284>
 80081d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80081da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d108      	bne.n	800821c <HCSR04_TMR_IC_ISR+0x1dc>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6a1a      	ldr	r2, [r3, #32]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 020a 	bic.w	r2, r2, #10
 8008218:	621a      	str	r2, [r3, #32]
 800821a:	e021      	b.n	8008260 <HCSR04_TMR_IC_ISR+0x220>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d108      	bne.n	8008236 <HCSR04_TMR_IC_ISR+0x1f6>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008232:	6213      	str	r3, [r2, #32]
 8008234:	e014      	b.n	8008260 <HCSR04_TMR_IC_ISR+0x220>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	2b08      	cmp	r3, #8
 800823c:	d108      	bne.n	8008250 <HCSR04_TMR_IC_ISR+0x210>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800824c:	6213      	str	r3, [r2, #32]
 800824e:	e007      	b.n	8008260 <HCSR04_TMR_IC_ISR+0x220>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800825e:	6213      	str	r3, [r2, #32]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <HCSR04_TMR_IC_ISR+0x236>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a12      	ldr	r2, [r2, #32]
 8008272:	621a      	str	r2, [r3, #32]
 8008274:	e01b      	b.n	80082ae <HCSR04_TMR_IC_ISR+0x26e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d106      	bne.n	800828c <HCSR04_TMR_IC_ISR+0x24c>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	6213      	str	r3, [r2, #32]
 800828a:	e010      	b.n	80082ae <HCSR04_TMR_IC_ISR+0x26e>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d106      	bne.n	80082a2 <HCSR04_TMR_IC_ISR+0x262>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	6213      	str	r3, [r2, #32]
 80082a0:	e005      	b.n	80082ae <HCSR04_TMR_IC_ISR+0x26e>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <HCSR04_TMR_IC_ISR+0x288>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f007 f95e 	bl	800f574 <osSemaphoreRelease>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	447a0000 	.word	0x447a0000
 80082c4:	43aa0000 	.word	0x43aa0000
 80082c8:	20000d54 	.word	0x20000d54

080082cc <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	889b      	ldrh	r3, [r3, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	f000 ff20 	bl	8009124 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80082e4:	2001      	movs	r0, #1
 80082e6:	f000 f871 	bl	80083cc <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	889b      	ldrh	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	4619      	mov	r1, r3
 80082f6:	f000 ff15 	bl	8009124 <HAL_GPIO_WritePin>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	ee07 3a90 	vmov	s15, r3
}
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8008320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008324:	480d      	ldr	r0, [pc, #52]	; (800835c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008326:	490e      	ldr	r1, [pc, #56]	; (8008360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008328:	4a0e      	ldr	r2, [pc, #56]	; (8008364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800832a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800832c:	e002      	b.n	8008334 <LoopCopyDataInit>

0800832e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800832e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008332:	3304      	adds	r3, #4

08008334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008338:	d3f9      	bcc.n	800832e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800833a:	4a0b      	ldr	r2, [pc, #44]	; (8008368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800833c:	4c0b      	ldr	r4, [pc, #44]	; (800836c <LoopFillZerobss+0x26>)
  movs r3, #0
 800833e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008340:	e001      	b.n	8008346 <LoopFillZerobss>

08008342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008344:	3204      	adds	r2, #4

08008346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008348:	d3fb      	bcc.n	8008342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800834a:	f7fd ffbb 	bl	80062c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800834e:	f00a fda7 	bl	8012ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008352:	f7fb f907 	bl	8003564 <main>
  bx  lr    
 8008356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008358:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800835c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008360:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008364:	08018a40 	.word	0x08018a40
  ldr r2, =_sbss
 8008368:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800836c:	2000904c 	.word	0x2000904c

08008370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008370:	e7fe      	b.n	8008370 <ADC_IRQHandler>

08008372 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008376:	2003      	movs	r0, #3
 8008378:	f000 f8f9 	bl	800856e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800837c:	200f      	movs	r0, #15
 800837e:	f7fd fe19 	bl	8005fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008382:	f7fd fb47 	bl	8005a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <HAL_IncTick+0x20>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <HAL_IncTick+0x24>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4413      	add	r3, r2
 800839c:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <HAL_IncTick+0x24>)
 800839e:	6013      	str	r3, [r2, #0]
}
 80083a0:	bf00      	nop
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000010 	.word	0x20000010
 80083b0:	20000db0 	.word	0x20000db0

080083b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return uwTick;
 80083b8:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <HAL_GetTick+0x14>)
 80083ba:	681b      	ldr	r3, [r3, #0]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000db0 	.word	0x20000db0

080083cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083d4:	f7ff ffee 	bl	80083b4 <HAL_GetTick>
 80083d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d005      	beq.n	80083f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083e6:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <HAL_Delay+0x44>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083f2:	bf00      	nop
 80083f4:	f7ff ffde 	bl	80083b4 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d8f7      	bhi.n	80083f4 <HAL_Delay+0x28>
  {
  }
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000010 	.word	0x20000010

08008414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <__NVIC_SetPriorityGrouping+0x40>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008430:	4013      	ands	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <__NVIC_SetPriorityGrouping+0x44>)
 800843e:	4313      	orrs	r3, r2
 8008440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008442:	4a04      	ldr	r2, [pc, #16]	; (8008454 <__NVIC_SetPriorityGrouping+0x40>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	60d3      	str	r3, [r2, #12]
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	e000ed00 	.word	0xe000ed00
 8008458:	05fa0000 	.word	0x05fa0000

0800845c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <__NVIC_GetPriorityGrouping+0x18>)
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	0a1b      	lsrs	r3, r3, #8
 8008466:	f003 0307 	and.w	r3, r3, #7
}
 800846a:	4618      	mov	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	db0b      	blt.n	80084a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	f003 021f 	and.w	r2, r3, #31
 8008490:	4907      	ldr	r1, [pc, #28]	; (80084b0 <__NVIC_EnableIRQ+0x38>)
 8008492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2001      	movs	r0, #1
 800849a:	fa00 f202 	lsl.w	r2, r0, r2
 800849e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	e000e100 	.word	0xe000e100

080084b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	db0a      	blt.n	80084de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	490c      	ldr	r1, [pc, #48]	; (8008500 <__NVIC_SetPriority+0x4c>)
 80084ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084d2:	0112      	lsls	r2, r2, #4
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	440b      	add	r3, r1
 80084d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084dc:	e00a      	b.n	80084f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4908      	ldr	r1, [pc, #32]	; (8008504 <__NVIC_SetPriority+0x50>)
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	3b04      	subs	r3, #4
 80084ec:	0112      	lsls	r2, r2, #4
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	440b      	add	r3, r1
 80084f2:	761a      	strb	r2, [r3, #24]
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	e000e100 	.word	0xe000e100
 8008504:	e000ed00 	.word	0xe000ed00

08008508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008508:	b480      	push	{r7}
 800850a:	b089      	sub	sp, #36	; 0x24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f1c3 0307 	rsb	r3, r3, #7
 8008522:	2b04      	cmp	r3, #4
 8008524:	bf28      	it	cs
 8008526:	2304      	movcs	r3, #4
 8008528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3304      	adds	r3, #4
 800852e:	2b06      	cmp	r3, #6
 8008530:	d902      	bls.n	8008538 <NVIC_EncodePriority+0x30>
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	3b03      	subs	r3, #3
 8008536:	e000      	b.n	800853a <NVIC_EncodePriority+0x32>
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800853c:	f04f 32ff 	mov.w	r2, #4294967295
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43da      	mvns	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	401a      	ands	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008550:	f04f 31ff 	mov.w	r1, #4294967295
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	fa01 f303 	lsl.w	r3, r1, r3
 800855a:	43d9      	mvns	r1, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008560:	4313      	orrs	r3, r2
         );
}
 8008562:	4618      	mov	r0, r3
 8008564:	3724      	adds	r7, #36	; 0x24
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff ff4c 	bl	8008414 <__NVIC_SetPriorityGrouping>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008596:	f7ff ff61 	bl	800845c <__NVIC_GetPriorityGrouping>
 800859a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	6978      	ldr	r0, [r7, #20]
 80085a2:	f7ff ffb1 	bl	8008508 <NVIC_EncodePriority>
 80085a6:	4602      	mov	r2, r0
 80085a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff ff80 	bl	80084b4 <__NVIC_SetPriority>
}
 80085b4:	bf00      	nop
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff ff54 	bl	8008478 <__NVIC_EnableIRQ>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085e4:	f7ff fee6 	bl	80083b4 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e099      	b.n	8008728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008614:	e00f      	b.n	8008636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008616:	f7ff fecd 	bl	80083b4 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b05      	cmp	r3, #5
 8008622:	d908      	bls.n	8008636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2203      	movs	r2, #3
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e078      	b.n	8008728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e8      	bne.n	8008616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4b38      	ldr	r3, [pc, #224]	; (8008730 <HAL_DMA_Init+0x158>)
 8008650:	4013      	ands	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800866e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800867a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b04      	cmp	r3, #4
 800868e:	d107      	bne.n	80086a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	4313      	orrs	r3, r2
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d117      	bne.n	80086fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fb09 	bl	8008cf4 <DMA_CheckFifoParam>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2240      	movs	r2, #64	; 0x40
 80086ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80086f6:	2301      	movs	r3, #1
 80086f8:	e016      	b.n	8008728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fac0 	bl	8008c88 <DMA_CalcBaseAndBitshift>
 8008708:	4603      	mov	r3, r0
 800870a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008710:	223f      	movs	r2, #63	; 0x3f
 8008712:	409a      	lsls	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	e010803f 	.word	0xe010803f

08008734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008752:	2b01      	cmp	r3, #1
 8008754:	d101      	bne.n	800875a <HAL_DMA_Start_IT+0x26>
 8008756:	2302      	movs	r3, #2
 8008758:	e048      	b.n	80087ec <HAL_DMA_Start_IT+0xb8>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b01      	cmp	r3, #1
 800876c:	d137      	bne.n	80087de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2202      	movs	r2, #2
 8008772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 fa52 	bl	8008c2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878c:	223f      	movs	r2, #63	; 0x3f
 800878e:	409a      	lsls	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0216 	orr.w	r2, r2, #22
 80087a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0208 	orr.w	r2, r2, #8
 80087ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	e005      	b.n	80087ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80087e6:	2302      	movs	r3, #2
 80087e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008800:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008802:	f7ff fdd7 	bl	80083b4 <HAL_GetTick>
 8008806:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b02      	cmp	r3, #2
 8008812:	d008      	beq.n	8008826 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2280      	movs	r2, #128	; 0x80
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e052      	b.n	80088cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0216 	bic.w	r2, r2, #22
 8008834:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008844:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <HAL_DMA_Abort+0x62>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0208 	bic.w	r2, r2, #8
 8008864:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0201 	bic.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008876:	e013      	b.n	80088a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008878:	f7ff fd9c 	bl	80083b4 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b05      	cmp	r3, #5
 8008884:	d90c      	bls.n	80088a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2220      	movs	r2, #32
 800888a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2203      	movs	r2, #3
 8008890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e015      	b.n	80088cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e4      	bne.n	8008878 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b2:	223f      	movs	r2, #63	; 0x3f
 80088b4:	409a      	lsls	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d004      	beq.n	80088f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2280      	movs	r2, #128	; 0x80
 80088ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e00c      	b.n	800890c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2205      	movs	r2, #5
 80088f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0201 	bic.w	r2, r2, #1
 8008908:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008924:	4b8e      	ldr	r3, [pc, #568]	; (8008b60 <HAL_DMA_IRQHandler+0x248>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a8e      	ldr	r2, [pc, #568]	; (8008b64 <HAL_DMA_IRQHandler+0x24c>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	0a9b      	lsrs	r3, r3, #10
 8008930:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008936:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008942:	2208      	movs	r2, #8
 8008944:	409a      	lsls	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01a      	beq.n	8008984 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008970:	2208      	movs	r2, #8
 8008972:	409a      	lsls	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008988:	2201      	movs	r2, #1
 800898a:	409a      	lsls	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4013      	ands	r3, r2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d012      	beq.n	80089ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	2201      	movs	r2, #1
 80089a8:	409a      	lsls	r2, r3
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f043 0202 	orr.w	r2, r3, #2
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089be:	2204      	movs	r2, #4
 80089c0:	409a      	lsls	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4013      	ands	r3, r2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d012      	beq.n	80089f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089dc:	2204      	movs	r2, #4
 80089de:	409a      	lsls	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e8:	f043 0204 	orr.w	r2, r3, #4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f4:	2210      	movs	r2, #16
 80089f6:	409a      	lsls	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d043      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d03c      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a12:	2210      	movs	r2, #16
 8008a14:	409a      	lsls	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d018      	beq.n	8008a5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d108      	bne.n	8008a48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d024      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
 8008a46:	e01f      	b.n	8008a88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01b      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
 8008a58:	e016      	b.n	8008a88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d107      	bne.n	8008a78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0208 	bic.w	r2, r2, #8
 8008a76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	409a      	lsls	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4013      	ands	r3, r2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 808f 	beq.w	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8087 	beq.w	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aae:	2220      	movs	r2, #32
 8008ab0:	409a      	lsls	r2, r3
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b05      	cmp	r3, #5
 8008ac0:	d136      	bne.n	8008b30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0216 	bic.w	r2, r2, #22
 8008ad0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ae0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d103      	bne.n	8008af2 <HAL_DMA_IRQHandler+0x1da>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0208 	bic.w	r2, r2, #8
 8008b00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b06:	223f      	movs	r2, #63	; 0x3f
 8008b08:	409a      	lsls	r2, r3
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d07e      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
        }
        return;
 8008b2e:	e079      	b.n	8008c24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01d      	beq.n	8008b7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10d      	bne.n	8008b68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d031      	beq.n	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
 8008b5c:	e02c      	b.n	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
 8008b5e:	bf00      	nop
 8008b60:	20000008 	.word	0x20000008
 8008b64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d023      	beq.n	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
 8008b78:	e01e      	b.n	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10f      	bne.n	8008ba8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0210 	bic.w	r2, r2, #16
 8008b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d032      	beq.n	8008c26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d022      	beq.n	8008c12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2205      	movs	r2, #5
 8008bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60bb      	str	r3, [r7, #8]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d307      	bcc.n	8008c00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f2      	bne.n	8008be4 <HAL_DMA_IRQHandler+0x2cc>
 8008bfe:	e000      	b.n	8008c02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008c00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
 8008c22:	e000      	b.n	8008c26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008c24:	bf00      	nop
    }
  }
}
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d108      	bne.n	8008c6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008c6a:	e007      	b.n	8008c7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]
}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	3b10      	subs	r3, #16
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <DMA_CalcBaseAndBitshift+0x60>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	091b      	lsrs	r3, r3, #4
 8008ca0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ca2:	4a12      	ldr	r2, [pc, #72]	; (8008cec <DMA_CalcBaseAndBitshift+0x64>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d908      	bls.n	8008cc8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <DMA_CalcBaseAndBitshift+0x68>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8008cc6:	e006      	b.n	8008cd6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <DMA_CalcBaseAndBitshift+0x68>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	aaaaaaab 	.word	0xaaaaaaab
 8008cec:	08018578 	.word	0x08018578
 8008cf0:	fffffc00 	.word	0xfffffc00

08008cf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d11f      	bne.n	8008d4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d856      	bhi.n	8008dc2 <DMA_CheckFifoParam+0xce>
 8008d14:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <DMA_CheckFifoParam+0x28>)
 8008d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1a:	bf00      	nop
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d3f 	.word	0x08008d3f
 8008d24:	08008d2d 	.word	0x08008d2d
 8008d28:	08008dc3 	.word	0x08008dc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d046      	beq.n	8008dc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d3c:	e043      	b.n	8008dc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d46:	d140      	bne.n	8008dca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d4c:	e03d      	b.n	8008dca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d56:	d121      	bne.n	8008d9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d837      	bhi.n	8008dce <DMA_CheckFifoParam+0xda>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <DMA_CheckFifoParam+0x70>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008d7b 	.word	0x08008d7b
 8008d6c:	08008d75 	.word	0x08008d75
 8008d70:	08008d8d 	.word	0x08008d8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
      break;
 8008d78:	e030      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d025      	beq.n	8008dd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d8a:	e022      	b.n	8008dd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d94:	d11f      	bne.n	8008dd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d9a:	e01c      	b.n	8008dd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d903      	bls.n	8008daa <DMA_CheckFifoParam+0xb6>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d003      	beq.n	8008db0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008da8:	e018      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	73fb      	strb	r3, [r7, #15]
      break;
 8008dae:	e015      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc0:	e00b      	b.n	8008dda <DMA_CheckFifoParam+0xe6>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e00a      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e008      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e006      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e004      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e002      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;   
 8008dd6:	bf00      	nop
 8008dd8:	e000      	b.n	8008ddc <DMA_CheckFifoParam+0xe8>
      break;
 8008dda:	bf00      	nop
    }
  } 
  
  return status; 
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	e169      	b.n	80090e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	f040 8158 	bne.w	80090da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d005      	beq.n	8008e42 <HAL_GPIO_Init+0x56>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d130      	bne.n	8008ea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e52:	43db      	mvns	r3, r3
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	4013      	ands	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008e78:	2201      	movs	r2, #1
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e80:	43db      	mvns	r3, r3
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	4013      	ands	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	f003 0201 	and.w	r2, r3, #1
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d017      	beq.n	8008ee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	2203      	movs	r2, #3
 8008ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d123      	bne.n	8008f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	08da      	lsrs	r2, r3, #3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3208      	adds	r2, #8
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	220f      	movs	r2, #15
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	08da      	lsrs	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3208      	adds	r2, #8
 8008f2e:	69b9      	ldr	r1, [r7, #24]
 8008f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	2203      	movs	r2, #3
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	43db      	mvns	r3, r3
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0203 	and.w	r2, r3, #3
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80b2 	beq.w	80090da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f76:	4b60      	ldr	r3, [pc, #384]	; (80090f8 <HAL_GPIO_Init+0x30c>)
 8008f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7a:	4a5f      	ldr	r2, [pc, #380]	; (80090f8 <HAL_GPIO_Init+0x30c>)
 8008f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f80:	6453      	str	r3, [r2, #68]	; 0x44
 8008f82:	4b5d      	ldr	r3, [pc, #372]	; (80090f8 <HAL_GPIO_Init+0x30c>)
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008f8e:	4a5b      	ldr	r2, [pc, #364]	; (80090fc <HAL_GPIO_Init+0x310>)
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	089b      	lsrs	r3, r3, #2
 8008f94:	3302      	adds	r3, #2
 8008f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	220f      	movs	r2, #15
 8008fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008faa:	43db      	mvns	r3, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a52      	ldr	r2, [pc, #328]	; (8009100 <HAL_GPIO_Init+0x314>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d02b      	beq.n	8009012 <HAL_GPIO_Init+0x226>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a51      	ldr	r2, [pc, #324]	; (8009104 <HAL_GPIO_Init+0x318>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d025      	beq.n	800900e <HAL_GPIO_Init+0x222>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a50      	ldr	r2, [pc, #320]	; (8009108 <HAL_GPIO_Init+0x31c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d01f      	beq.n	800900a <HAL_GPIO_Init+0x21e>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a4f      	ldr	r2, [pc, #316]	; (800910c <HAL_GPIO_Init+0x320>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d019      	beq.n	8009006 <HAL_GPIO_Init+0x21a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a4e      	ldr	r2, [pc, #312]	; (8009110 <HAL_GPIO_Init+0x324>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d013      	beq.n	8009002 <HAL_GPIO_Init+0x216>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a4d      	ldr	r2, [pc, #308]	; (8009114 <HAL_GPIO_Init+0x328>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00d      	beq.n	8008ffe <HAL_GPIO_Init+0x212>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a4c      	ldr	r2, [pc, #304]	; (8009118 <HAL_GPIO_Init+0x32c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d007      	beq.n	8008ffa <HAL_GPIO_Init+0x20e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a4b      	ldr	r2, [pc, #300]	; (800911c <HAL_GPIO_Init+0x330>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d101      	bne.n	8008ff6 <HAL_GPIO_Init+0x20a>
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	e00e      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	e00c      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	e00a      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8008ffe:	2305      	movs	r3, #5
 8009000:	e008      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8009002:	2304      	movs	r3, #4
 8009004:	e006      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8009006:	2303      	movs	r3, #3
 8009008:	e004      	b.n	8009014 <HAL_GPIO_Init+0x228>
 800900a:	2302      	movs	r3, #2
 800900c:	e002      	b.n	8009014 <HAL_GPIO_Init+0x228>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <HAL_GPIO_Init+0x228>
 8009012:	2300      	movs	r3, #0
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	f002 0203 	and.w	r2, r2, #3
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	4093      	lsls	r3, r2
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	4313      	orrs	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009024:	4935      	ldr	r1, [pc, #212]	; (80090fc <HAL_GPIO_Init+0x310>)
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	089b      	lsrs	r3, r3, #2
 800902a:	3302      	adds	r3, #2
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009032:	4b3b      	ldr	r3, [pc, #236]	; (8009120 <HAL_GPIO_Init+0x334>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	43db      	mvns	r3, r3
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4013      	ands	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009056:	4a32      	ldr	r2, [pc, #200]	; (8009120 <HAL_GPIO_Init+0x334>)
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800905c:	4b30      	ldr	r3, [pc, #192]	; (8009120 <HAL_GPIO_Init+0x334>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	43db      	mvns	r3, r3
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	4013      	ands	r3, r2
 800906a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009080:	4a27      	ldr	r2, [pc, #156]	; (8009120 <HAL_GPIO_Init+0x334>)
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009086:	4b26      	ldr	r3, [pc, #152]	; (8009120 <HAL_GPIO_Init+0x334>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	43db      	mvns	r3, r3
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	4013      	ands	r3, r2
 8009094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80090aa:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <HAL_GPIO_Init+0x334>)
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090b0:	4b1b      	ldr	r3, [pc, #108]	; (8009120 <HAL_GPIO_Init+0x334>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	43db      	mvns	r3, r3
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	4013      	ands	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80090d4:	4a12      	ldr	r2, [pc, #72]	; (8009120 <HAL_GPIO_Init+0x334>)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	f67f ae92 	bls.w	8008e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3724      	adds	r7, #36	; 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40023800 	.word	0x40023800
 80090fc:	40013800 	.word	0x40013800
 8009100:	40020000 	.word	0x40020000
 8009104:	40020400 	.word	0x40020400
 8009108:	40020800 	.word	0x40020800
 800910c:	40020c00 	.word	0x40020c00
 8009110:	40021000 	.word	0x40021000
 8009114:	40021400 	.word	0x40021400
 8009118:	40021800 	.word	0x40021800
 800911c:	40021c00 	.word	0x40021c00
 8009120:	40013c00 	.word	0x40013c00

08009124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	807b      	strh	r3, [r7, #2]
 8009130:	4613      	mov	r3, r2
 8009132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009134:	787b      	ldrb	r3, [r7, #1]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800913a:	887a      	ldrh	r2, [r7, #2]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009140:	e003      	b.n	800914a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009142:	887b      	ldrh	r3, [r7, #2]
 8009144:	041a      	lsls	r2, r3, #16
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	619a      	str	r2, [r3, #24]
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e07f      	b.n	800926a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fc fc70 	bl	8005a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d107      	bne.n	80091d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	e006      	b.n	80091e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d104      	bne.n	80091f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6859      	ldr	r1, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <HAL_I2C_Init+0x11c>)
 80091fe:	430b      	orrs	r3, r1
 8009200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691a      	ldr	r2, [r3, #16]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69d9      	ldr	r1, [r3, #28]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1a      	ldr	r2, [r3, #32]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	02008000 	.word	0x02008000

08009278 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	461a      	mov	r2, r3
 8009286:	4603      	mov	r3, r0
 8009288:	817b      	strh	r3, [r7, #10]
 800928a:	460b      	mov	r3, r1
 800928c:	813b      	strh	r3, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b20      	cmp	r3, #32
 800929c:	f040 80f9 	bne.w	8009492 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <HAL_I2C_Mem_Write+0x34>
 80092a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d105      	bne.n	80092b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0ed      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_I2C_Mem_Write+0x4e>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e0e6      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092ce:	f7ff f871 	bl	80083b4 <HAL_GetTick>
 80092d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2319      	movs	r3, #25
 80092da:	2201      	movs	r2, #1
 80092dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fac3 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0d1      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2221      	movs	r2, #33	; 0x21
 80092f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2240      	movs	r2, #64	; 0x40
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a3a      	ldr	r2, [r7, #32]
 800930a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009318:	88f8      	ldrh	r0, [r7, #6]
 800931a:	893a      	ldrh	r2, [r7, #8]
 800931c:	8979      	ldrh	r1, [r7, #10]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4603      	mov	r3, r0
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f9d3 	bl	80096d4 <I2C_RequestMemoryWrite>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0a9      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009344:	b29b      	uxth	r3, r3
 8009346:	2bff      	cmp	r3, #255	; 0xff
 8009348:	d90e      	bls.n	8009368 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	22ff      	movs	r2, #255	; 0xff
 800934e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009354:	b2da      	uxtb	r2, r3
 8009356:	8979      	ldrh	r1, [r7, #10]
 8009358:	2300      	movs	r3, #0
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fc1f 	bl	8009ba4 <I2C_TransferConfig>
 8009366:	e00f      	b.n	8009388 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009376:	b2da      	uxtb	r2, r3
 8009378:	8979      	ldrh	r1, [r7, #10]
 800937a:	2300      	movs	r3, #0
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 fc0e 	bl	8009ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 faad 	bl	80098ec <I2C_WaitOnTXISFlagUntilTimeout>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e07b      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	781a      	ldrb	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d034      	beq.n	8009440 <HAL_I2C_Mem_Write+0x1c8>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d130      	bne.n	8009440 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	2200      	movs	r2, #0
 80093e6:	2180      	movs	r1, #128	; 0x80
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fa3f 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e04d      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2bff      	cmp	r3, #255	; 0xff
 8009400:	d90e      	bls.n	8009420 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	22ff      	movs	r2, #255	; 0xff
 8009406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	8979      	ldrh	r1, [r7, #10]
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fbc3 	bl	8009ba4 <I2C_TransferConfig>
 800941e:	e00f      	b.n	8009440 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	b2da      	uxtb	r2, r3
 8009430:	8979      	ldrh	r1, [r7, #10]
 8009432:	2300      	movs	r3, #0
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fbb2 	bl	8009ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d19e      	bne.n	8009388 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 fa8c 	bl	800996c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e01a      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2220      	movs	r2, #32
 8009464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6859      	ldr	r1, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <HAL_I2C_Mem_Write+0x224>)
 8009472:	400b      	ands	r3, r1
 8009474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	e000      	b.n	8009494 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009492:	2302      	movs	r3, #2
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	fe00e800 	.word	0xfe00e800

080094a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	461a      	mov	r2, r3
 80094ae:	4603      	mov	r3, r0
 80094b0:	817b      	strh	r3, [r7, #10]
 80094b2:	460b      	mov	r3, r1
 80094b4:	813b      	strh	r3, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	f040 80fd 	bne.w	80096c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_I2C_Mem_Read+0x34>
 80094ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0f1      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_I2C_Mem_Read+0x4e>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e0ea      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094f6:	f7fe ff5d 	bl	80083b4 <HAL_GetTick>
 80094fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	2319      	movs	r3, #25
 8009502:	2201      	movs	r2, #1
 8009504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f9af 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0d5      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2222      	movs	r2, #34	; 0x22
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2240      	movs	r2, #64	; 0x40
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a3a      	ldr	r2, [r7, #32]
 8009532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009540:	88f8      	ldrh	r0, [r7, #6]
 8009542:	893a      	ldrh	r2, [r7, #8]
 8009544:	8979      	ldrh	r1, [r7, #10]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4603      	mov	r3, r0
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f913 	bl	800977c <I2C_RequestMemoryRead>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e0ad      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956c:	b29b      	uxth	r3, r3
 800956e:	2bff      	cmp	r3, #255	; 0xff
 8009570:	d90e      	bls.n	8009590 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957c:	b2da      	uxtb	r2, r3
 800957e:	8979      	ldrh	r1, [r7, #10]
 8009580:	4b52      	ldr	r3, [pc, #328]	; (80096cc <HAL_I2C_Mem_Read+0x22c>)
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fb0b 	bl	8009ba4 <I2C_TransferConfig>
 800958e:	e00f      	b.n	80095b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	8979      	ldrh	r1, [r7, #10]
 80095a2:	4b4a      	ldr	r3, [pc, #296]	; (80096cc <HAL_I2C_Mem_Read+0x22c>)
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fafa 	bl	8009ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	2200      	movs	r2, #0
 80095b8:	2104      	movs	r1, #4
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f956 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e07c      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d034      	beq.n	8009670 <HAL_I2C_Mem_Read+0x1d0>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	d130      	bne.n	8009670 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	2200      	movs	r2, #0
 8009616:	2180      	movs	r1, #128	; 0x80
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f927 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e04d      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962c:	b29b      	uxth	r3, r3
 800962e:	2bff      	cmp	r3, #255	; 0xff
 8009630:	d90e      	bls.n	8009650 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22ff      	movs	r2, #255	; 0xff
 8009636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963c:	b2da      	uxtb	r2, r3
 800963e:	8979      	ldrh	r1, [r7, #10]
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 faab 	bl	8009ba4 <I2C_TransferConfig>
 800964e:	e00f      	b.n	8009670 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009654:	b29a      	uxth	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965e:	b2da      	uxtb	r2, r3
 8009660:	8979      	ldrh	r1, [r7, #10]
 8009662:	2300      	movs	r3, #0
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fa9a 	bl	8009ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d19a      	bne.n	80095b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 f974 	bl	800996c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e01a      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2220      	movs	r2, #32
 8009694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6859      	ldr	r1, [r3, #4]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <HAL_I2C_Mem_Read+0x230>)
 80096a2:	400b      	ands	r3, r1
 80096a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e000      	b.n	80096c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80096c2:	2302      	movs	r3, #2
  }
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	80002400 	.word	0x80002400
 80096d0:	fe00e800 	.word	0xfe00e800

080096d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	461a      	mov	r2, r3
 80096e2:	4603      	mov	r3, r0
 80096e4:	817b      	strh	r3, [r7, #10]
 80096e6:	460b      	mov	r3, r1
 80096e8:	813b      	strh	r3, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	8979      	ldrh	r1, [r7, #10]
 80096f4:	4b20      	ldr	r3, [pc, #128]	; (8009778 <I2C_RequestMemoryWrite+0xa4>)
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 fa51 	bl	8009ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f8f0 	bl	80098ec <I2C_WaitOnTXISFlagUntilTimeout>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e02c      	b.n	8009770 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d105      	bne.n	8009728 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800971c:	893b      	ldrh	r3, [r7, #8]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	629a      	str	r2, [r3, #40]	; 0x28
 8009726:	e015      	b.n	8009754 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009728:	893b      	ldrh	r3, [r7, #8]
 800972a:	0a1b      	lsrs	r3, r3, #8
 800972c:	b29b      	uxth	r3, r3
 800972e:	b2da      	uxtb	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	69b9      	ldr	r1, [r7, #24]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f8d6 	bl	80098ec <I2C_WaitOnTXISFlagUntilTimeout>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e012      	b.n	8009770 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800974a:	893b      	ldrh	r3, [r7, #8]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2200      	movs	r2, #0
 800975c:	2180      	movs	r1, #128	; 0x80
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f884 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	80002000 	.word	0x80002000

0800977c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	461a      	mov	r2, r3
 800978a:	4603      	mov	r3, r0
 800978c:	817b      	strh	r3, [r7, #10]
 800978e:	460b      	mov	r3, r1
 8009790:	813b      	strh	r3, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009796:	88fb      	ldrh	r3, [r7, #6]
 8009798:	b2da      	uxtb	r2, r3
 800979a:	8979      	ldrh	r1, [r7, #10]
 800979c:	4b20      	ldr	r3, [pc, #128]	; (8009820 <I2C_RequestMemoryRead+0xa4>)
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	2300      	movs	r3, #0
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 f9fe 	bl	8009ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f89d 	bl	80098ec <I2C_WaitOnTXISFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e02c      	b.n	8009816 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097bc:	88fb      	ldrh	r3, [r7, #6]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d105      	bne.n	80097ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097c2:	893b      	ldrh	r3, [r7, #8]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	629a      	str	r2, [r3, #40]	; 0x28
 80097cc:	e015      	b.n	80097fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097ce:	893b      	ldrh	r3, [r7, #8]
 80097d0:	0a1b      	lsrs	r3, r3, #8
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097dc:	69fa      	ldr	r2, [r7, #28]
 80097de:	69b9      	ldr	r1, [r7, #24]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f883 	bl	80098ec <I2C_WaitOnTXISFlagUntilTimeout>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e012      	b.n	8009816 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097f0:	893b      	ldrh	r3, [r7, #8]
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2200      	movs	r2, #0
 8009802:	2140      	movs	r1, #64	; 0x40
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f831 	bl	800986c <I2C_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e000      	b.n	8009816 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	80002000 	.word	0x80002000

08009824 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b02      	cmp	r3, #2
 8009838:	d103      	bne.n	8009842 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2200      	movs	r2, #0
 8009840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b01      	cmp	r3, #1
 800984e:	d007      	beq.n	8009860 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	699a      	ldr	r2, [r3, #24]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	619a      	str	r2, [r3, #24]
  }
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	4613      	mov	r3, r2
 800987a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800987c:	e022      	b.n	80098c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d01e      	beq.n	80098c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009886:	f7fe fd95 	bl	80083b4 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d302      	bcc.n	800989c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d113      	bne.n	80098c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	f043 0220 	orr.w	r2, r3, #32
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e00f      	b.n	80098e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4013      	ands	r3, r2
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	bf0c      	ite	eq
 80098d4:	2301      	moveq	r3, #1
 80098d6:	2300      	movne	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d0cd      	beq.n	800987e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098f8:	e02c      	b.n	8009954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f870 	bl	80099e4 <I2C_IsErrorOccurred>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e02a      	b.n	8009964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d01e      	beq.n	8009954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fe fd4d 	bl	80083b4 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d113      	bne.n	8009954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009930:	f043 0220 	orr.w	r2, r3, #32
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e007      	b.n	8009964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b02      	cmp	r3, #2
 8009960:	d1cb      	bne.n	80098fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009978:	e028      	b.n	80099cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f830 	bl	80099e4 <I2C_IsErrorOccurred>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e026      	b.n	80099dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998e:	f7fe fd11 	bl	80083b4 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	d302      	bcc.n	80099a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d113      	bne.n	80099cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a8:	f043 0220 	orr.w	r2, r3, #32
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e007      	b.n	80099dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d1cf      	bne.n	800997a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08a      	sub	sp, #40	; 0x28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d068      	beq.n	8009ae2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2210      	movs	r2, #16
 8009a16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a18:	e049      	b.n	8009aae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d045      	beq.n	8009aae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a22:	f7fe fcc7 	bl	80083b4 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <I2C_IsErrorOccurred+0x54>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d13a      	bne.n	8009aae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5a:	d121      	bne.n	8009aa0 <I2C_IsErrorOccurred+0xbc>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a62:	d01d      	beq.n	8009aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a64:	7cfb      	ldrb	r3, [r7, #19]
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d01a      	beq.n	8009aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a7a:	f7fe fc9b 	bl	80083b4 <HAL_GetTick>
 8009a7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a80:	e00e      	b.n	8009aa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a82:	f7fe fc97 	bl	80083b4 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b19      	cmp	r3, #25
 8009a8e:	d907      	bls.n	8009aa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	f043 0320 	orr.w	r3, r3, #32
 8009a96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009a9e:	e006      	b.n	8009aae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d1e9      	bne.n	8009a82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d003      	beq.n	8009ac4 <I2C_IsErrorOccurred+0xe0>
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0aa      	beq.n	8009a1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	f043 0304 	orr.w	r3, r3, #4
 8009ada:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	f043 0308 	orr.w	r3, r3, #8
 8009b1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	f043 0302 	orr.w	r3, r3, #2
 8009b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01c      	beq.n	8009b92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fe63 	bl	8009824 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6859      	ldr	r1, [r3, #4]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <I2C_IsErrorOccurred+0x1bc>)
 8009b6a:	400b      	ands	r3, r1
 8009b6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	431a      	orrs	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	fe00e800 	.word	0xfe00e800

08009ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	607b      	str	r3, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	817b      	strh	r3, [r7, #10]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bb6:	897b      	ldrh	r3, [r7, #10]
 8009bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bbc:	7a7b      	ldrb	r3, [r7, #9]
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	0d5b      	lsrs	r3, r3, #21
 8009bde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <I2C_TransferConfig+0x60>)
 8009be4:	430b      	orrs	r3, r1
 8009be6:	43db      	mvns	r3, r3
 8009be8:	ea02 0103 	and.w	r1, r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	03ff63ff 	.word	0x03ff63ff

08009c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d138      	bne.n	8009c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e032      	b.n	8009c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2224      	movs	r2, #36	; 0x24
 8009c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 0201 	bic.w	r2, r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6819      	ldr	r1, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e000      	b.n	8009c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b20      	cmp	r3, #32
 8009cb2:	d139      	bne.n	8009d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e033      	b.n	8009d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2224      	movs	r2, #36	; 0x24
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0201 	orr.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e000      	b.n	8009d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
  }
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009d42:	4b23      	ldr	r3, [pc, #140]	; (8009dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	4a22      	ldr	r2, [pc, #136]	; (8009dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8009d4e:	4b20      	ldr	r3, [pc, #128]	; (8009dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009d5a:	4b1e      	ldr	r3, [pc, #120]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d66:	f7fe fb25 	bl	80083b4 <HAL_GetTick>
 8009d6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d6c:	e009      	b.n	8009d82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d6e:	f7fe fb21 	bl	80083b4 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d7c:	d901      	bls.n	8009d82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e022      	b.n	8009dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d82:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8e:	d1ee      	bne.n	8009d6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009d90:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a0f      	ldr	r2, [pc, #60]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d9c:	f7fe fb0a 	bl	80083b4 <HAL_GetTick>
 8009da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009da2:	e009      	b.n	8009db8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009da4:	f7fe fb06 	bl	80083b4 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db2:	d901      	bls.n	8009db8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e007      	b.n	8009dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dc4:	d1ee      	bne.n	8009da4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	40023800 	.word	0x40023800
 8009dd4:	40007000 	.word	0x40007000

08009dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009de0:	2300      	movs	r3, #0
 8009de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e291      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8087 	beq.w	8009f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009dfc:	4b96      	ldr	r3, [pc, #600]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 030c 	and.w	r3, r3, #12
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d00c      	beq.n	8009e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e08:	4b93      	ldr	r3, [pc, #588]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 030c 	and.w	r3, r3, #12
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d112      	bne.n	8009e3a <HAL_RCC_OscConfig+0x62>
 8009e14:	4b90      	ldr	r3, [pc, #576]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e20:	d10b      	bne.n	8009e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e22:	4b8d      	ldr	r3, [pc, #564]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d06c      	beq.n	8009f08 <HAL_RCC_OscConfig+0x130>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d168      	bne.n	8009f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e26b      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e42:	d106      	bne.n	8009e52 <HAL_RCC_OscConfig+0x7a>
 8009e44:	4b84      	ldr	r3, [pc, #528]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a83      	ldr	r2, [pc, #524]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	e02e      	b.n	8009eb0 <HAL_RCC_OscConfig+0xd8>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10c      	bne.n	8009e74 <HAL_RCC_OscConfig+0x9c>
 8009e5a:	4b7f      	ldr	r3, [pc, #508]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a7e      	ldr	r2, [pc, #504]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	4b7c      	ldr	r3, [pc, #496]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a7b      	ldr	r2, [pc, #492]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	e01d      	b.n	8009eb0 <HAL_RCC_OscConfig+0xd8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e7c:	d10c      	bne.n	8009e98 <HAL_RCC_OscConfig+0xc0>
 8009e7e:	4b76      	ldr	r3, [pc, #472]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a75      	ldr	r2, [pc, #468]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	4b73      	ldr	r3, [pc, #460]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a72      	ldr	r2, [pc, #456]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	e00b      	b.n	8009eb0 <HAL_RCC_OscConfig+0xd8>
 8009e98:	4b6f      	ldr	r3, [pc, #444]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a6e      	ldr	r2, [pc, #440]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	4b6c      	ldr	r3, [pc, #432]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a6b      	ldr	r2, [pc, #428]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d013      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb8:	f7fe fa7c 	bl	80083b4 <HAL_GetTick>
 8009ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ec0:	f7fe fa78 	bl	80083b4 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	; 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e21f      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ed2:	4b61      	ldr	r3, [pc, #388]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <HAL_RCC_OscConfig+0xe8>
 8009ede:	e014      	b.n	8009f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fe fa68 	bl	80083b4 <HAL_GetTick>
 8009ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ee8:	f7fe fa64 	bl	80083b4 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b64      	cmp	r3, #100	; 0x64
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e20b      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009efa:	4b57      	ldr	r3, [pc, #348]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1f0      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x110>
 8009f06:	e000      	b.n	8009f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d069      	beq.n	8009fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f16:	4b50      	ldr	r3, [pc, #320]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 030c 	and.w	r3, r3, #12
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f22:	4b4d      	ldr	r3, [pc, #308]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f003 030c 	and.w	r3, r3, #12
 8009f2a:	2b08      	cmp	r3, #8
 8009f2c:	d11c      	bne.n	8009f68 <HAL_RCC_OscConfig+0x190>
 8009f2e:	4b4a      	ldr	r3, [pc, #296]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d116      	bne.n	8009f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f3a:	4b47      	ldr	r3, [pc, #284]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <HAL_RCC_OscConfig+0x17a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d001      	beq.n	8009f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e1df      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f52:	4b41      	ldr	r3, [pc, #260]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	493d      	ldr	r1, [pc, #244]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f66:	e040      	b.n	8009fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d023      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f70:	4b39      	ldr	r3, [pc, #228]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a38      	ldr	r2, [pc, #224]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7fe fa1a 	bl	80083b4 <HAL_GetTick>
 8009f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f84:	f7fe fa16 	bl	80083b4 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e1bd      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f96:	4b30      	ldr	r3, [pc, #192]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0f0      	beq.n	8009f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa2:	4b2d      	ldr	r3, [pc, #180]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4929      	ldr	r1, [pc, #164]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	e018      	b.n	8009fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fb8:	4b27      	ldr	r3, [pc, #156]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a26      	ldr	r2, [pc, #152]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc4:	f7fe f9f6 	bl	80083b4 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fcc:	f7fe f9f2 	bl	80083b4 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e199      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fde:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1f0      	bne.n	8009fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0308 	and.w	r3, r3, #8
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d038      	beq.n	800a068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d019      	beq.n	800a032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ffe:	4b16      	ldr	r3, [pc, #88]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a00a:	f7fe f9d3 	bl	80083b4 <HAL_GetTick>
 800a00e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a010:	e008      	b.n	800a024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a012:	f7fe f9cf 	bl	80083b4 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e176      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 800a026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0f0      	beq.n	800a012 <HAL_RCC_OscConfig+0x23a>
 800a030:	e01a      	b.n	800a068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 800a034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a036:	4a08      	ldr	r2, [pc, #32]	; (800a058 <HAL_RCC_OscConfig+0x280>)
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a03e:	f7fe f9b9 	bl	80083b4 <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a044:	e00a      	b.n	800a05c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a046:	f7fe f9b5 	bl	80083b4 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d903      	bls.n	800a05c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e15c      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
 800a058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a05c:	4b91      	ldr	r3, [pc, #580]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1ee      	bne.n	800a046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 80a4 	beq.w	800a1be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a076:	4b8b      	ldr	r3, [pc, #556]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10d      	bne.n	800a09e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a082:	4b88      	ldr	r3, [pc, #544]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	4a87      	ldr	r2, [pc, #540]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a08c:	6413      	str	r3, [r2, #64]	; 0x40
 800a08e:	4b85      	ldr	r3, [pc, #532]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a096:	60bb      	str	r3, [r7, #8]
 800a098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a09a:	2301      	movs	r3, #1
 800a09c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a09e:	4b82      	ldr	r3, [pc, #520]	; (800a2a8 <HAL_RCC_OscConfig+0x4d0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d118      	bne.n	800a0dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a0aa:	4b7f      	ldr	r3, [pc, #508]	; (800a2a8 <HAL_RCC_OscConfig+0x4d0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a7e      	ldr	r2, [pc, #504]	; (800a2a8 <HAL_RCC_OscConfig+0x4d0>)
 800a0b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0b6:	f7fe f97d 	bl	80083b4 <HAL_GetTick>
 800a0ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0be:	f7fe f979 	bl	80083b4 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b64      	cmp	r3, #100	; 0x64
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e120      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0d0:	4b75      	ldr	r3, [pc, #468]	; (800a2a8 <HAL_RCC_OscConfig+0x4d0>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d106      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x31a>
 800a0e4:	4b6f      	ldr	r3, [pc, #444]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e8:	4a6e      	ldr	r2, [pc, #440]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a0ea:	f043 0301 	orr.w	r3, r3, #1
 800a0ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f0:	e02d      	b.n	800a14e <HAL_RCC_OscConfig+0x376>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10c      	bne.n	800a114 <HAL_RCC_OscConfig+0x33c>
 800a0fa:	4b6a      	ldr	r3, [pc, #424]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fe:	4a69      	ldr	r2, [pc, #420]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a100:	f023 0301 	bic.w	r3, r3, #1
 800a104:	6713      	str	r3, [r2, #112]	; 0x70
 800a106:	4b67      	ldr	r3, [pc, #412]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10a:	4a66      	ldr	r2, [pc, #408]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a10c:	f023 0304 	bic.w	r3, r3, #4
 800a110:	6713      	str	r3, [r2, #112]	; 0x70
 800a112:	e01c      	b.n	800a14e <HAL_RCC_OscConfig+0x376>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	2b05      	cmp	r3, #5
 800a11a:	d10c      	bne.n	800a136 <HAL_RCC_OscConfig+0x35e>
 800a11c:	4b61      	ldr	r3, [pc, #388]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a120:	4a60      	ldr	r2, [pc, #384]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a122:	f043 0304 	orr.w	r3, r3, #4
 800a126:	6713      	str	r3, [r2, #112]	; 0x70
 800a128:	4b5e      	ldr	r3, [pc, #376]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12c:	4a5d      	ldr	r2, [pc, #372]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	6713      	str	r3, [r2, #112]	; 0x70
 800a134:	e00b      	b.n	800a14e <HAL_RCC_OscConfig+0x376>
 800a136:	4b5b      	ldr	r3, [pc, #364]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	4a5a      	ldr	r2, [pc, #360]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a13c:	f023 0301 	bic.w	r3, r3, #1
 800a140:	6713      	str	r3, [r2, #112]	; 0x70
 800a142:	4b58      	ldr	r3, [pc, #352]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a146:	4a57      	ldr	r2, [pc, #348]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a148:	f023 0304 	bic.w	r3, r3, #4
 800a14c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d015      	beq.n	800a182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a156:	f7fe f92d 	bl	80083b4 <HAL_GetTick>
 800a15a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a15c:	e00a      	b.n	800a174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a15e:	f7fe f929 	bl	80083b4 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e0ce      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a174:	4b4b      	ldr	r3, [pc, #300]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0ee      	beq.n	800a15e <HAL_RCC_OscConfig+0x386>
 800a180:	e014      	b.n	800a1ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a182:	f7fe f917 	bl	80083b4 <HAL_GetTick>
 800a186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a188:	e00a      	b.n	800a1a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a18a:	f7fe f913 	bl	80083b4 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	f241 3288 	movw	r2, #5000	; 0x1388
 800a198:	4293      	cmp	r3, r2
 800a19a:	d901      	bls.n	800a1a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e0b8      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1a0:	4b40      	ldr	r3, [pc, #256]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1ee      	bne.n	800a18a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d105      	bne.n	800a1be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1b2:	4b3c      	ldr	r3, [pc, #240]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	4a3b      	ldr	r2, [pc, #236]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80a4 	beq.w	800a310 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1c8:	4b36      	ldr	r3, [pc, #216]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 030c 	and.w	r3, r3, #12
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d06b      	beq.n	800a2ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d149      	bne.n	800a270 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1dc:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a30      	ldr	r2, [pc, #192]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a1e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e8:	f7fe f8e4 	bl	80083b4 <HAL_GetTick>
 800a1ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1ee:	e008      	b.n	800a202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1f0:	f7fe f8e0 	bl	80083b4 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e087      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a202:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1f0      	bne.n	800a1f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	69da      	ldr	r2, [r3, #28]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	019b      	lsls	r3, r3, #6
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	085b      	lsrs	r3, r3, #1
 800a226:	3b01      	subs	r3, #1
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	061b      	lsls	r3, r3, #24
 800a232:	4313      	orrs	r3, r2
 800a234:	4a1b      	ldr	r2, [pc, #108]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a23a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a23c:	4b19      	ldr	r3, [pc, #100]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a248:	f7fe f8b4 	bl	80083b4 <HAL_GetTick>
 800a24c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a250:	f7fe f8b0 	bl	80083b4 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e057      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a262:	4b10      	ldr	r3, [pc, #64]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0x478>
 800a26e:	e04f      	b.n	800a310 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a270:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a27a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fe f89a 	bl	80083b4 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a284:	f7fe f896 	bl	80083b4 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e03d      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a296:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <HAL_RCC_OscConfig+0x4cc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x4ac>
 800a2a2:	e035      	b.n	800a310 <HAL_RCC_OscConfig+0x538>
 800a2a4:	40023800 	.word	0x40023800
 800a2a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a2ac:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <HAL_RCC_OscConfig+0x544>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d028      	beq.n	800a30c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d121      	bne.n	800a30c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d11a      	bne.n	800a30c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2dc:	4013      	ands	r3, r2
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d111      	bne.n	800a30c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f2:	085b      	lsrs	r3, r3, #1
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d107      	bne.n	800a30c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a308:	429a      	cmp	r2, r3
 800a30a:	d001      	beq.n	800a310 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	40023800 	.word	0x40023800

0800a320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e0d0      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a338:	4b6a      	ldr	r3, [pc, #424]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 030f 	and.w	r3, r3, #15
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d910      	bls.n	800a368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a346:	4b67      	ldr	r3, [pc, #412]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f023 020f 	bic.w	r2, r3, #15
 800a34e:	4965      	ldr	r1, [pc, #404]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	4313      	orrs	r3, r2
 800a354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a356:	4b63      	ldr	r3, [pc, #396]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 030f 	and.w	r3, r3, #15
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d001      	beq.n	800a368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e0b8      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d020      	beq.n	800a3b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a380:	4b59      	ldr	r3, [pc, #356]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	4a58      	ldr	r2, [pc, #352]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a38a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0308 	and.w	r3, r3, #8
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a398:	4b53      	ldr	r3, [pc, #332]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	4a52      	ldr	r2, [pc, #328]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a39e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a3a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3a4:	4b50      	ldr	r3, [pc, #320]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	494d      	ldr	r1, [pc, #308]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d040      	beq.n	800a444 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d107      	bne.n	800a3da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3ca:	4b47      	ldr	r3, [pc, #284]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d115      	bne.n	800a402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e07f      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d107      	bne.n	800a3f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3e2:	4b41      	ldr	r3, [pc, #260]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e073      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3f2:	4b3d      	ldr	r3, [pc, #244]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e06b      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a402:	4b39      	ldr	r3, [pc, #228]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f023 0203 	bic.w	r2, r3, #3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4936      	ldr	r1, [pc, #216]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a410:	4313      	orrs	r3, r2
 800a412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a414:	f7fd ffce 	bl	80083b4 <HAL_GetTick>
 800a418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a41a:	e00a      	b.n	800a432 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a41c:	f7fd ffca 	bl	80083b4 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e053      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a432:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 020c 	and.w	r2, r3, #12
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	429a      	cmp	r2, r3
 800a442:	d1eb      	bne.n	800a41c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a444:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 030f 	and.w	r3, r3, #15
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d210      	bcs.n	800a474 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a452:	4b24      	ldr	r3, [pc, #144]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f023 020f 	bic.w	r2, r3, #15
 800a45a:	4922      	ldr	r1, [pc, #136]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	4313      	orrs	r3, r2
 800a460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a462:	4b20      	ldr	r3, [pc, #128]	; (800a4e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d001      	beq.n	800a474 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e032      	b.n	800a4da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d008      	beq.n	800a492 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a480:	4b19      	ldr	r3, [pc, #100]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	4916      	ldr	r1, [pc, #88]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a49e:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	490e      	ldr	r1, [pc, #56]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a4b2:	f000 f821 	bl	800a4f8 <HAL_RCC_GetSysClockFreq>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	490a      	ldr	r1, [pc, #40]	; (800a4ec <HAL_RCC_ClockConfig+0x1cc>)
 800a4c4:	5ccb      	ldrb	r3, [r1, r3]
 800a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ca:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <HAL_RCC_ClockConfig+0x1d0>)
 800a4cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a4ce:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <HAL_RCC_ClockConfig+0x1d4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fb fd6e 	bl	8005fb4 <HAL_InitTick>

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40023c00 	.word	0x40023c00
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	08018560 	.word	0x08018560
 800a4f0:	20000008 	.word	0x20000008
 800a4f4:	2000000c 	.word	0x2000000c

0800a4f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4fc:	b090      	sub	sp, #64	; 0x40
 800a4fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	637b      	str	r3, [r7, #52]	; 0x34
 800a504:	2300      	movs	r3, #0
 800a506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a508:	2300      	movs	r3, #0
 800a50a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a510:	4b59      	ldr	r3, [pc, #356]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f003 030c 	and.w	r3, r3, #12
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d00d      	beq.n	800a538 <HAL_RCC_GetSysClockFreq+0x40>
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	f200 80a1 	bhi.w	800a664 <HAL_RCC_GetSysClockFreq+0x16c>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_RCC_GetSysClockFreq+0x34>
 800a526:	2b04      	cmp	r3, #4
 800a528:	d003      	beq.n	800a532 <HAL_RCC_GetSysClockFreq+0x3a>
 800a52a:	e09b      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a52c:	4b53      	ldr	r3, [pc, #332]	; (800a67c <HAL_RCC_GetSysClockFreq+0x184>)
 800a52e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a530:	e09b      	b.n	800a66a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a532:	4b53      	ldr	r3, [pc, #332]	; (800a680 <HAL_RCC_GetSysClockFreq+0x188>)
 800a534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a536:	e098      	b.n	800a66a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a538:	4b4f      	ldr	r3, [pc, #316]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a542:	4b4d      	ldr	r3, [pc, #308]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d028      	beq.n	800a5a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a54e:	4b4a      	ldr	r3, [pc, #296]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	099b      	lsrs	r3, r3, #6
 800a554:	2200      	movs	r2, #0
 800a556:	623b      	str	r3, [r7, #32]
 800a558:	627a      	str	r2, [r7, #36]	; 0x24
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a560:	2100      	movs	r1, #0
 800a562:	4b47      	ldr	r3, [pc, #284]	; (800a680 <HAL_RCC_GetSysClockFreq+0x188>)
 800a564:	fb03 f201 	mul.w	r2, r3, r1
 800a568:	2300      	movs	r3, #0
 800a56a:	fb00 f303 	mul.w	r3, r0, r3
 800a56e:	4413      	add	r3, r2
 800a570:	4a43      	ldr	r2, [pc, #268]	; (800a680 <HAL_RCC_GetSysClockFreq+0x188>)
 800a572:	fba0 1202 	umull	r1, r2, r0, r2
 800a576:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a578:	460a      	mov	r2, r1
 800a57a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57e:	4413      	add	r3, r2
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a584:	2200      	movs	r2, #0
 800a586:	61bb      	str	r3, [r7, #24]
 800a588:	61fa      	str	r2, [r7, #28]
 800a58a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a58e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a592:	f7f6 fbf1 	bl	8000d78 <__aeabi_uldivmod>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4613      	mov	r3, r2
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a59e:	e053      	b.n	800a648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5a0:	4b35      	ldr	r3, [pc, #212]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	099b      	lsrs	r3, r3, #6
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	617a      	str	r2, [r7, #20]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a5b2:	f04f 0b00 	mov.w	fp, #0
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	465b      	mov	r3, fp
 800a5ba:	f04f 0000 	mov.w	r0, #0
 800a5be:	f04f 0100 	mov.w	r1, #0
 800a5c2:	0159      	lsls	r1, r3, #5
 800a5c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5c8:	0150      	lsls	r0, r2, #5
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	ebb2 080a 	subs.w	r8, r2, sl
 800a5d2:	eb63 090b 	sbc.w	r9, r3, fp
 800a5d6:	f04f 0200 	mov.w	r2, #0
 800a5da:	f04f 0300 	mov.w	r3, #0
 800a5de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a5e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a5e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a5ea:	ebb2 0408 	subs.w	r4, r2, r8
 800a5ee:	eb63 0509 	sbc.w	r5, r3, r9
 800a5f2:	f04f 0200 	mov.w	r2, #0
 800a5f6:	f04f 0300 	mov.w	r3, #0
 800a5fa:	00eb      	lsls	r3, r5, #3
 800a5fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a600:	00e2      	lsls	r2, r4, #3
 800a602:	4614      	mov	r4, r2
 800a604:	461d      	mov	r5, r3
 800a606:	eb14 030a 	adds.w	r3, r4, sl
 800a60a:	603b      	str	r3, [r7, #0]
 800a60c:	eb45 030b 	adc.w	r3, r5, fp
 800a610:	607b      	str	r3, [r7, #4]
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a61e:	4629      	mov	r1, r5
 800a620:	028b      	lsls	r3, r1, #10
 800a622:	4621      	mov	r1, r4
 800a624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a628:	4621      	mov	r1, r4
 800a62a:	028a      	lsls	r2, r1, #10
 800a62c:	4610      	mov	r0, r2
 800a62e:	4619      	mov	r1, r3
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	2200      	movs	r2, #0
 800a634:	60bb      	str	r3, [r7, #8]
 800a636:	60fa      	str	r2, [r7, #12]
 800a638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a63c:	f7f6 fb9c 	bl	8000d78 <__aeabi_uldivmod>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4613      	mov	r3, r2
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <HAL_RCC_GetSysClockFreq+0x180>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	0c1b      	lsrs	r3, r3, #16
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	3301      	adds	r3, #1
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a662:	e002      	b.n	800a66a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <HAL_RCC_GetSysClockFreq+0x184>)
 800a666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3740      	adds	r7, #64	; 0x40
 800a670:	46bd      	mov	sp, r7
 800a672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a676:	bf00      	nop
 800a678:	40023800 	.word	0x40023800
 800a67c:	00f42400 	.word	0x00f42400
 800a680:	017d7840 	.word	0x017d7840

0800a684 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a688:	4b03      	ldr	r3, [pc, #12]	; (800a698 <HAL_RCC_GetHCLKFreq+0x14>)
 800a68a:	681b      	ldr	r3, [r3, #0]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000008 	.word	0x20000008

0800a69c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a6a0:	f7ff fff0 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	0a9b      	lsrs	r3, r3, #10
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	4903      	ldr	r1, [pc, #12]	; (800a6c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6b2:	5ccb      	ldrb	r3, [r1, r3]
 800a6b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	40023800 	.word	0x40023800
 800a6c0:	08018570 	.word	0x08018570

0800a6c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a6c8:	f7ff ffdc 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	0b5b      	lsrs	r3, r3, #13
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	4903      	ldr	r1, [pc, #12]	; (800a6e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6da:	5ccb      	ldrb	r3, [r1, r3]
 800a6dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	40023800 	.word	0x40023800
 800a6e8:	08018570 	.word	0x08018570

0800a6ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	220f      	movs	r2, #15
 800a6fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6fc:	4b12      	ldr	r3, [pc, #72]	; (800a748 <HAL_RCC_GetClockConfig+0x5c>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f003 0203 	and.w	r2, r3, #3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <HAL_RCC_GetClockConfig+0x5c>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a714:	4b0c      	ldr	r3, [pc, #48]	; (800a748 <HAL_RCC_GetClockConfig+0x5c>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a720:	4b09      	ldr	r3, [pc, #36]	; (800a748 <HAL_RCC_GetClockConfig+0x5c>)
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a72e:	4b07      	ldr	r3, [pc, #28]	; (800a74c <HAL_RCC_GetClockConfig+0x60>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 020f 	and.w	r2, r3, #15
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	601a      	str	r2, [r3, #0]
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	40023800 	.word	0x40023800
 800a74c:	40023c00 	.word	0x40023c00

0800a750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d012      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a774:	4b65      	ldr	r3, [pc, #404]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	4a64      	ldr	r2, [pc, #400]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a77a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a77e:	6093      	str	r3, [r2, #8]
 800a780:	4b62      	ldr	r3, [pc, #392]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a788:	4960      	ldr	r1, [pc, #384]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800a796:	2301      	movs	r3, #1
 800a798:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d017      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7a6:	4b59      	ldr	r3, [pc, #356]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	4955      	ldr	r1, [pc, #340]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7c4:	d101      	bne.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d017      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7e2:	4b4a      	ldr	r3, [pc, #296]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	4946      	ldr	r1, [pc, #280]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a800:	d101      	bne.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800a80e:	2301      	movs	r3, #1
 800a810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 808b 	beq.w	800a936 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a820:	4b3a      	ldr	r3, [pc, #232]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a824:	4a39      	ldr	r2, [pc, #228]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a82a:	6413      	str	r3, [r2, #64]	; 0x40
 800a82c:	4b37      	ldr	r3, [pc, #220]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a838:	4b35      	ldr	r3, [pc, #212]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a34      	ldr	r2, [pc, #208]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a83e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a844:	f7fd fdb6 	bl	80083b4 <HAL_GetTick>
 800a848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a84a:	e008      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a84c:	f7fd fdb2 	bl	80083b4 <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b64      	cmp	r3, #100	; 0x64
 800a858:	d901      	bls.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e2bc      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a85e:	4b2c      	ldr	r3, [pc, #176]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0f0      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a86a:	4b28      	ldr	r3, [pc, #160]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d035      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d02e      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a888:	4b20      	ldr	r3, [pc, #128]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a892:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	4a1d      	ldr	r2, [pc, #116]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a89e:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a2:	4a1a      	ldr	r2, [pc, #104]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a8aa:	4a18      	ldr	r2, [pc, #96]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a8b0:	4b16      	ldr	r3, [pc, #88]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d114      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8bc:	f7fd fd7a 	bl	80083b4 <HAL_GetTick>
 800a8c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c2:	e00a      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8c4:	f7fd fd76 	bl	80083b4 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d901      	bls.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e27e      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ee      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8f2:	d111      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800a8f4:	4b05      	ldr	r3, [pc, #20]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a900:	4b04      	ldr	r3, [pc, #16]	; (800a914 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a902:	400b      	ands	r3, r1
 800a904:	4901      	ldr	r1, [pc, #4]	; (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a906:	4313      	orrs	r3, r2
 800a908:	608b      	str	r3, [r1, #8]
 800a90a:	e00b      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a90c:	40023800 	.word	0x40023800
 800a910:	40007000 	.word	0x40007000
 800a914:	0ffffcff 	.word	0x0ffffcff
 800a918:	4ba4      	ldr	r3, [pc, #656]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	4aa3      	ldr	r2, [pc, #652]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a91e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a922:	6093      	str	r3, [r2, #8]
 800a924:	4ba1      	ldr	r3, [pc, #644]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a930:	499e      	ldr	r1, [pc, #632]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a932:	4313      	orrs	r3, r2
 800a934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d010      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a942:	4b9a      	ldr	r3, [pc, #616]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a948:	4a98      	ldr	r2, [pc, #608]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a94a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a94e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a952:	4b96      	ldr	r3, [pc, #600]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	4993      	ldr	r1, [pc, #588]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a970:	4b8e      	ldr	r3, [pc, #568]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a97e:	498b      	ldr	r1, [pc, #556]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a980:	4313      	orrs	r3, r2
 800a982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a992:	4b86      	ldr	r3, [pc, #536]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a0:	4982      	ldr	r1, [pc, #520]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9b4:	4b7d      	ldr	r3, [pc, #500]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c2:	497a      	ldr	r1, [pc, #488]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a9d6:	4b75      	ldr	r3, [pc, #468]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9dc:	f023 0203 	bic.w	r2, r3, #3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e4:	4971      	ldr	r1, [pc, #452]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a9f8:	4b6c      	ldr	r3, [pc, #432]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9fe:	f023 020c 	bic.w	r2, r3, #12
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	4969      	ldr	r1, [pc, #420]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aa1a:	4b64      	ldr	r3, [pc, #400]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa28:	4960      	ldr	r1, [pc, #384]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aa3c:	4b5b      	ldr	r3, [pc, #364]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa4a:	4958      	ldr	r1, [pc, #352]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aa5e:	4b53      	ldr	r3, [pc, #332]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6c:	494f      	ldr	r1, [pc, #316]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aa80:	4b4a      	ldr	r3, [pc, #296]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8e:	4947      	ldr	r1, [pc, #284]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800aaa2:	4b42      	ldr	r3, [pc, #264]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab0:	493e      	ldr	r1, [pc, #248]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00a      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aac4:	4b39      	ldr	r3, [pc, #228]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad2:	4936      	ldr	r1, [pc, #216]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d011      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aae6:	4b31      	ldr	r3, [pc, #196]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf4:	492d      	ldr	r1, [pc, #180]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab04:	d101      	bne.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800ab06:	2301      	movs	r3, #1
 800ab08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab16:	4b25      	ldr	r3, [pc, #148]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab24:	4921      	ldr	r1, [pc, #132]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00a      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ab38:	4b1c      	ldr	r3, [pc, #112]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab46:	4919      	ldr	r1, [pc, #100]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ab5a:	4b14      	ldr	r3, [pc, #80]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab68:	4910      	ldr	r1, [pc, #64]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d006      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 809d 	beq.w	800acbe <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ab84:	4b09      	ldr	r3, [pc, #36]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a08      	ldr	r2, [pc, #32]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800ab8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab90:	f7fd fc10 	bl	80083b4 <HAL_GetTick>
 800ab94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ab96:	e00b      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ab98:	f7fd fc0c 	bl	80083b4 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b64      	cmp	r3, #100	; 0x64
 800aba4:	d904      	bls.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e116      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800abaa:	bf00      	nop
 800abac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800abb0:	4b8b      	ldr	r3, [pc, #556]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1ed      	bne.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d017      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d113      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800abd0:	4b83      	ldr	r3, [pc, #524]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800abd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abd6:	0e1b      	lsrs	r3, r3, #24
 800abd8:	f003 030f 	and.w	r3, r3, #15
 800abdc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	019a      	lsls	r2, r3, #6
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	061b      	lsls	r3, r3, #24
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	071b      	lsls	r3, r3, #28
 800abf0:	497b      	ldr	r1, [pc, #492]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac0c:	d00a      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d024      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac22:	d11f      	bne.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ac24:	4b6e      	ldr	r3, [pc, #440]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	f003 0307 	and.w	r3, r3, #7
 800ac30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	019a      	lsls	r2, r3, #6
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	061b      	lsls	r3, r3, #24
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	071b      	lsls	r3, r3, #28
 800ac44:	4966      	ldr	r1, [pc, #408]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ac4c:	4b64      	ldr	r3, [pc, #400]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac52:	f023 021f 	bic.w	r2, r3, #31
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	4960      	ldr	r1, [pc, #384]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00d      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	019a      	lsls	r2, r3, #6
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	061b      	lsls	r3, r3, #24
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	071b      	lsls	r3, r3, #28
 800ac84:	4956      	ldr	r1, [pc, #344]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ac8c:	4b54      	ldr	r3, [pc, #336]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a53      	ldr	r2, [pc, #332]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ac92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac98:	f7fd fb8c 	bl	80083b4 <HAL_GetTick>
 800ac9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aca0:	f7fd fb88 	bl	80083b4 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b64      	cmp	r3, #100	; 0x64
 800acac:	d901      	bls.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e092      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800acb2:	4b4b      	ldr	r3, [pc, #300]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0f0      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	f040 8088 	bne.w	800add6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800acc6:	4b46      	ldr	r3, [pc, #280]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a45      	ldr	r2, [pc, #276]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800accc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acd2:	f7fd fb6f 	bl	80083b4 <HAL_GetTick>
 800acd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800acd8:	e008      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800acda:	f7fd fb6b 	bl	80083b4 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b64      	cmp	r3, #100	; 0x64
 800ace6:	d901      	bls.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e075      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800acec:	4b3c      	ldr	r3, [pc, #240]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf8:	d0ef      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d024      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d120      	bne.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ad22:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad28:	0c1b      	lsrs	r3, r3, #16
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	019a      	lsls	r2, r3, #6
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	041b      	lsls	r3, r3, #16
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	061b      	lsls	r3, r3, #24
 800ad42:	4927      	ldr	r1, [pc, #156]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad44:	4313      	orrs	r3, r2
 800ad46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ad4a:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	021b      	lsls	r3, r3, #8
 800ad5c:	4920      	ldr	r1, [pc, #128]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d018      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad78:	d113      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ad7a:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad80:	0e1b      	lsrs	r3, r3, #24
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	019a      	lsls	r2, r3, #6
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	041b      	lsls	r3, r3, #16
 800ad94:	431a      	orrs	r2, r3
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	061b      	lsls	r3, r3, #24
 800ad9a:	4911      	ldr	r1, [pc, #68]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a0e      	ldr	r2, [pc, #56]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800ada8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adae:	f7fd fb01 	bl	80083b4 <HAL_GetTick>
 800adb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800adb4:	e008      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800adb6:	f7fd fafd 	bl	80083b4 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b64      	cmp	r3, #100	; 0x64
 800adc2:	d901      	bls.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e007      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800add0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add4:	d1ef      	bne.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	40023800 	.word	0x40023800

0800ade4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e09d      	b.n	800af32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d108      	bne.n	800ae10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae06:	d009      	beq.n	800ae1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	61da      	str	r2, [r3, #28]
 800ae0e:	e005      	b.n	800ae1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fa fe74 	bl	8005b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae5c:	d902      	bls.n	800ae64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e002      	b.n	800ae6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ae72:	d007      	beq.n	800ae84 <HAL_SPI_Init+0xa0>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae7c:	d002      	beq.n	800ae84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ae94:	431a      	orrs	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	f003 0302 	and.w	r3, r3, #2
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aebc:	431a      	orrs	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec6:	ea42 0103 	orr.w	r1, r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aece:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	f003 0204 	and.w	r2, r3, #4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	431a      	orrs	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef2:	f003 0308 	and.w	r3, r3, #8
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800af00:	ea42 0103 	orr.w	r1, r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	69da      	ldr	r2, [r3, #28]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b088      	sub	sp, #32
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	603b      	str	r3, [r7, #0]
 800af46:	4613      	mov	r3, r2
 800af48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_SPI_Transmit+0x22>
 800af58:	2302      	movs	r3, #2
 800af5a:	e158      	b.n	800b20e <HAL_SPI_Transmit+0x2d4>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af64:	f7fd fa26 	bl	80083b4 <HAL_GetTick>
 800af68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af6a:	88fb      	ldrh	r3, [r7, #6]
 800af6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b01      	cmp	r3, #1
 800af78:	d002      	beq.n	800af80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800af7a:	2302      	movs	r3, #2
 800af7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af7e:	e13d      	b.n	800b1fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d002      	beq.n	800af8c <HAL_SPI_Transmit+0x52>
 800af86:	88fb      	ldrh	r3, [r7, #6]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af90:	e134      	b.n	800b1fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2203      	movs	r2, #3
 800af96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	88fa      	ldrh	r2, [r7, #6]
 800afb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afdc:	d10f      	bne.n	800affe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800affc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b40      	cmp	r3, #64	; 0x40
 800b00a:	d007      	beq.n	800b01c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b01a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b024:	d94b      	bls.n	800b0be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <HAL_SPI_Transmit+0xfa>
 800b02e:	8afb      	ldrh	r3, [r7, #22]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d13e      	bne.n	800b0b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	881a      	ldrh	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b044:	1c9a      	adds	r2, r3, #2
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b04e:	b29b      	uxth	r3, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	b29a      	uxth	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b058:	e02b      	b.n	800b0b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b02      	cmp	r3, #2
 800b066:	d112      	bne.n	800b08e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06c:	881a      	ldrh	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b078:	1c9a      	adds	r2, r3, #2
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b082:	b29b      	uxth	r3, r3
 800b084:	3b01      	subs	r3, #1
 800b086:	b29a      	uxth	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b08c:	e011      	b.n	800b0b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b08e:	f7fd f991 	bl	80083b4 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d803      	bhi.n	800b0a6 <HAL_SPI_Transmit+0x16c>
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a4:	d102      	bne.n	800b0ac <HAL_SPI_Transmit+0x172>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b0b0:	e0a4      	b.n	800b1fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1ce      	bne.n	800b05a <HAL_SPI_Transmit+0x120>
 800b0bc:	e07c      	b.n	800b1b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <HAL_SPI_Transmit+0x192>
 800b0c6:	8afb      	ldrh	r3, [r7, #22]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d170      	bne.n	800b1ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d912      	bls.n	800b0fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	1c9a      	adds	r2, r3, #2
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	3b02      	subs	r3, #2
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0fa:	e058      	b.n	800b1ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b122:	e044      	b.n	800b1ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d12b      	bne.n	800b18a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b136:	b29b      	uxth	r3, r3
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d912      	bls.n	800b162 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b140:	881a      	ldrh	r2, [r3, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	1c9a      	adds	r2, r3, #2
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b156:	b29b      	uxth	r3, r3
 800b158:	3b02      	subs	r3, #2
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b160:	e025      	b.n	800b1ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	330c      	adds	r3, #12
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b188:	e011      	b.n	800b1ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b18a:	f7fd f913 	bl	80083b4 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d803      	bhi.n	800b1a2 <HAL_SPI_Transmit+0x268>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d102      	bne.n	800b1a8 <HAL_SPI_Transmit+0x26e>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b1ac:	e026      	b.n	800b1fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1b5      	bne.n	800b124 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fd07 	bl	800bbd0 <SPI_EndRxTxTransaction>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	613b      	str	r3, [r7, #16]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	613b      	str	r3, [r7, #16]
 800b1ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	77fb      	strb	r3, [r7, #31]
 800b1f8:	e000      	b.n	800b1fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b1fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b20c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3720      	adds	r7, #32
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b088      	sub	sp, #32
 800b21a:	af02      	add	r7, sp, #8
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b232:	d112      	bne.n	800b25a <HAL_SPI_Receive+0x44>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10e      	bne.n	800b25a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2204      	movs	r2, #4
 800b240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	4613      	mov	r3, r2
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f910 	bl	800b476 <HAL_SPI_TransmitReceive>
 800b256:	4603      	mov	r3, r0
 800b258:	e109      	b.n	800b46e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_SPI_Receive+0x52>
 800b264:	2302      	movs	r3, #2
 800b266:	e102      	b.n	800b46e <HAL_SPI_Receive+0x258>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b270:	f7fd f8a0 	bl	80083b4 <HAL_GetTick>
 800b274:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d002      	beq.n	800b288 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b282:	2302      	movs	r3, #2
 800b284:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b286:	e0e9      	b.n	800b45c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <HAL_SPI_Receive+0x7e>
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b298:	e0e0      	b.n	800b45c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2204      	movs	r2, #4
 800b29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	88fa      	ldrh	r2, [r7, #6]
 800b2b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	88fa      	ldrh	r2, [r7, #6]
 800b2ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2e4:	d908      	bls.n	800b2f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2f4:	605a      	str	r2, [r3, #4]
 800b2f6:	e007      	b.n	800b308 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b306:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b310:	d10f      	bne.n	800b332 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b330:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d007      	beq.n	800b350 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b34e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b358:	d867      	bhi.n	800b42a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b35a:	e030      	b.n	800b3be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b01      	cmp	r3, #1
 800b368:	d117      	bne.n	800b39a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f103 020c 	add.w	r2, r3, #12
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b376:	7812      	ldrb	r2, [r2, #0]
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	3b01      	subs	r3, #1
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b398:	e011      	b.n	800b3be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39a:	f7fd f80b 	bl	80083b4 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d803      	bhi.n	800b3b2 <HAL_SPI_Receive+0x19c>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d102      	bne.n	800b3b8 <HAL_SPI_Receive+0x1a2>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b3bc:	e04e      	b.n	800b45c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1c8      	bne.n	800b35c <HAL_SPI_Receive+0x146>
 800b3ca:	e034      	b.n	800b436 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d115      	bne.n	800b406 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68da      	ldr	r2, [r3, #12]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	b292      	uxth	r2, r2
 800b3e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	1c9a      	adds	r2, r3, #2
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b404:	e011      	b.n	800b42a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b406:	f7fc ffd5 	bl	80083b4 <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	429a      	cmp	r2, r3
 800b414:	d803      	bhi.n	800b41e <HAL_SPI_Receive+0x208>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41c:	d102      	bne.n	800b424 <HAL_SPI_Receive+0x20e>
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b428:	e018      	b.n	800b45c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b430:	b29b      	uxth	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1ca      	bne.n	800b3cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fb4c 	bl	800bad8 <SPI_EndRxTransaction>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2220      	movs	r2, #32
 800b44a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	75fb      	strb	r3, [r7, #23]
 800b458:	e000      	b.n	800b45c <HAL_SPI_Receive+0x246>
  }

error :
 800b45a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b08a      	sub	sp, #40	; 0x28
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	607a      	str	r2, [r7, #4]
 800b482:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b484:	2301      	movs	r3, #1
 800b486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_SPI_TransmitReceive+0x26>
 800b498:	2302      	movs	r3, #2
 800b49a:	e1fb      	b.n	800b894 <HAL_SPI_TransmitReceive+0x41e>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4a4:	f7fc ff86 	bl	80083b4 <HAL_GetTick>
 800b4a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b4b8:	887b      	ldrh	r3, [r7, #2]
 800b4ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b4bc:	887b      	ldrh	r3, [r7, #2]
 800b4be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4c0:	7efb      	ldrb	r3, [r7, #27]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d00e      	beq.n	800b4e4 <HAL_SPI_TransmitReceive+0x6e>
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4cc:	d106      	bne.n	800b4dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <HAL_SPI_TransmitReceive+0x66>
 800b4d6:	7efb      	ldrb	r3, [r7, #27]
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d003      	beq.n	800b4e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b4e2:	e1cd      	b.n	800b880 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <HAL_SPI_TransmitReceive+0x80>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <HAL_SPI_TransmitReceive+0x80>
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d103      	bne.n	800b4fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b4fc:	e1c0      	b.n	800b880 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b04      	cmp	r3, #4
 800b508:	d003      	beq.n	800b512 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2205      	movs	r2, #5
 800b50e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	887a      	ldrh	r2, [r7, #2]
 800b522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	887a      	ldrh	r2, [r7, #2]
 800b52a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	887a      	ldrh	r2, [r7, #2]
 800b538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	887a      	ldrh	r2, [r7, #2]
 800b53e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b554:	d802      	bhi.n	800b55c <HAL_SPI_TransmitReceive+0xe6>
 800b556:	8a3b      	ldrh	r3, [r7, #16]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d908      	bls.n	800b56e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b56a:	605a      	str	r2, [r3, #4]
 800b56c:	e007      	b.n	800b57e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b57c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b588:	2b40      	cmp	r3, #64	; 0x40
 800b58a:	d007      	beq.n	800b59c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b59a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5a4:	d97c      	bls.n	800b6a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <HAL_SPI_TransmitReceive+0x13e>
 800b5ae:	8a7b      	ldrh	r3, [r7, #18]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d169      	bne.n	800b688 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	881a      	ldrh	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	1c9a      	adds	r2, r3, #2
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5d8:	e056      	b.n	800b688 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d11b      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x1aa>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d016      	beq.n	800b620 <HAL_SPI_TransmitReceive+0x1aa>
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d113      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	881a      	ldrh	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	1c9a      	adds	r2, r3, #2
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b612:	b29b      	uxth	r3, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d11c      	bne.n	800b668 <HAL_SPI_TransmitReceive+0x1f2>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b634:	b29b      	uxth	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d016      	beq.n	800b668 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	b292      	uxth	r2, r2
 800b646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64c:	1c9a      	adds	r2, r3, #2
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b664:	2301      	movs	r3, #1
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b668:	f7fc fea4 	bl	80083b4 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b674:	429a      	cmp	r2, r3
 800b676:	d807      	bhi.n	800b688 <HAL_SPI_TransmitReceive+0x212>
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67e:	d003      	beq.n	800b688 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b686:	e0fb      	b.n	800b880 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1a3      	bne.n	800b5da <HAL_SPI_TransmitReceive+0x164>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b698:	b29b      	uxth	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d19d      	bne.n	800b5da <HAL_SPI_TransmitReceive+0x164>
 800b69e:	e0df      	b.n	800b860 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_SPI_TransmitReceive+0x23a>
 800b6a8:	8a7b      	ldrh	r3, [r7, #18]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	f040 80cb 	bne.w	800b846 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d912      	bls.n	800b6e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6be:	881a      	ldrh	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	1c9a      	adds	r2, r3, #2
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	3b02      	subs	r3, #2
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6de:	e0b2      	b.n	800b846 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	7812      	ldrb	r2, [r2, #0]
 800b6ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	b29a      	uxth	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b706:	e09e      	b.n	800b846 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f003 0302 	and.w	r3, r3, #2
 800b712:	2b02      	cmp	r3, #2
 800b714:	d134      	bne.n	800b780 <HAL_SPI_TransmitReceive+0x30a>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d02f      	beq.n	800b780 <HAL_SPI_TransmitReceive+0x30a>
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	2b01      	cmp	r3, #1
 800b724:	d12c      	bne.n	800b780 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d912      	bls.n	800b756 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	881a      	ldrh	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	1c9a      	adds	r2, r3, #2
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b02      	subs	r3, #2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b754:	e012      	b.n	800b77c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	330c      	adds	r3, #12
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b772:	b29b      	uxth	r3, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b77c:	2300      	movs	r3, #0
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d148      	bne.n	800b820 <HAL_SPI_TransmitReceive+0x3aa>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b794:	b29b      	uxth	r3, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d042      	beq.n	800b820 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d923      	bls.n	800b7ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b0:	b292      	uxth	r2, r2
 800b7b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b8:	1c9a      	adds	r2, r3, #2
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	3b02      	subs	r3, #2
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d81f      	bhi.n	800b81c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7ea:	605a      	str	r2, [r3, #4]
 800b7ec:	e016      	b.n	800b81c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f103 020c 	add.w	r2, r3, #12
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fa:	7812      	ldrb	r2, [r2, #0]
 800b7fc:	b2d2      	uxtb	r2, r2
 800b7fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b810:	b29b      	uxth	r3, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b81c:	2301      	movs	r3, #1
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b820:	f7fc fdc8 	bl	80083b4 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d803      	bhi.n	800b838 <HAL_SPI_TransmitReceive+0x3c2>
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d102      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x3c8>
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d103      	bne.n	800b846 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b844:	e01c      	b.n	800b880 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f47f af5b 	bne.w	800b708 <HAL_SPI_TransmitReceive+0x292>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f47f af54 	bne.w	800b708 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b860:	69fa      	ldr	r2, [r7, #28]
 800b862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f9b3 	bl	800bbd0 <SPI_EndRxTxTransaction>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d006      	beq.n	800b87e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2220      	movs	r2, #32
 800b87a:	661a      	str	r2, [r3, #96]	; 0x60
 800b87c:	e000      	b.n	800b880 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b87e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b894:	4618      	mov	r0, r3
 800b896:	3728      	adds	r7, #40	; 0x28
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b8ac:	f7fc fd82 	bl	80083b4 <HAL_GetTick>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b8bc:	f7fc fd7a 	bl	80083b4 <HAL_GetTick>
 800b8c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b8c2:	4b39      	ldr	r3, [pc, #228]	; (800b9a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	015b      	lsls	r3, r3, #5
 800b8c8:	0d1b      	lsrs	r3, r3, #20
 800b8ca:	69fa      	ldr	r2, [r7, #28]
 800b8cc:	fb02 f303 	mul.w	r3, r2, r3
 800b8d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8d2:	e054      	b.n	800b97e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d050      	beq.n	800b97e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8dc:	f7fc fd6a 	bl	80083b4 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	69fa      	ldr	r2, [r7, #28]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d902      	bls.n	800b8f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d13d      	bne.n	800b96e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b90a:	d111      	bne.n	800b930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b914:	d004      	beq.n	800b920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b91e:	d107      	bne.n	800b930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b92e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b938:	d10f      	bne.n	800b95a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e017      	b.n	800b99e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	4013      	ands	r3, r2
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	bf0c      	ite	eq
 800b98e:	2301      	moveq	r3, #1
 800b990:	2300      	movne	r3, #0
 800b992:	b2db      	uxtb	r3, r3
 800b994:	461a      	mov	r2, r3
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d19b      	bne.n	800b8d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3720      	adds	r7, #32
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000008 	.word	0x20000008

0800b9ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	; 0x28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b9be:	f7fc fcf9 	bl	80083b4 <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	1a9b      	subs	r3, r3, r2
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b9ce:	f7fc fcf1 	bl	80083b4 <HAL_GetTick>
 800b9d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b9dc:	4b3d      	ldr	r3, [pc, #244]	; (800bad4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	00da      	lsls	r2, r3, #3
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	0d1b      	lsrs	r3, r3, #20
 800b9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ee:	fb02 f303 	mul.w	r3, r2, r3
 800b9f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b9f4:	e060      	b.n	800bab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b9fc:	d107      	bne.n	800ba0e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba14:	d050      	beq.n	800bab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba16:	f7fc fccd 	bl	80083b4 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d902      	bls.n	800ba2c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d13d      	bne.n	800baa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba44:	d111      	bne.n	800ba6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba4e:	d004      	beq.n	800ba5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba58:	d107      	bne.n	800ba6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba72:	d10f      	bne.n	800ba94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	e010      	b.n	800baca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4013      	ands	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d196      	bne.n	800b9f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3728      	adds	r7, #40	; 0x28
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000008 	.word	0x20000008

0800bad8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baec:	d111      	bne.n	800bb12 <SPI_EndRxTransaction+0x3a>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baf6:	d004      	beq.n	800bb02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb00:	d107      	bne.n	800bb12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb1a:	d112      	bne.n	800bb42 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	2180      	movs	r1, #128	; 0x80
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff feb8 	bl	800b89c <SPI_WaitFlagStateUntilTimeout>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d021      	beq.n	800bb76 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb36:	f043 0220 	orr.w	r2, r3, #32
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e03d      	b.n	800bbbe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bb42:	4b21      	ldr	r3, [pc, #132]	; (800bbc8 <SPI_EndRxTransaction+0xf0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a21      	ldr	r2, [pc, #132]	; (800bbcc <SPI_EndRxTransaction+0xf4>)
 800bb48:	fba2 2303 	umull	r2, r3, r2, r3
 800bb4c:	0d5b      	lsrs	r3, r3, #21
 800bb4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb52:	fb02 f303 	mul.w	r3, r2, r3
 800bb56:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6e:	2b80      	cmp	r3, #128	; 0x80
 800bb70:	d0f2      	beq.n	800bb58 <SPI_EndRxTransaction+0x80>
 800bb72:	e000      	b.n	800bb76 <SPI_EndRxTransaction+0x9e>
        break;
 800bb74:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb7e:	d11d      	bne.n	800bbbc <SPI_EndRxTransaction+0xe4>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb88:	d004      	beq.n	800bb94 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb92:	d113      	bne.n	800bbbc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f7ff ff03 	bl	800b9ac <SPI_WaitFifoStateUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d007      	beq.n	800bbbc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbb0:	f043 0220 	orr.w	r2, r3, #32
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e000      	b.n	800bbbe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000008 	.word	0x20000008
 800bbcc:	165e9f81 	.word	0x165e9f81

0800bbd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff fedf 	bl	800b9ac <SPI_WaitFifoStateUntilTimeout>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d007      	beq.n	800bc04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf8:	f043 0220 	orr.w	r2, r3, #32
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e046      	b.n	800bc92 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bc04:	4b25      	ldr	r3, [pc, #148]	; (800bc9c <SPI_EndRxTxTransaction+0xcc>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a25      	ldr	r2, [pc, #148]	; (800bca0 <SPI_EndRxTxTransaction+0xd0>)
 800bc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0e:	0d5b      	lsrs	r3, r3, #21
 800bc10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc14:	fb02 f303 	mul.w	r3, r2, r3
 800bc18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc22:	d112      	bne.n	800bc4a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2180      	movs	r1, #128	; 0x80
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fe34 	bl	800b89c <SPI_WaitFlagStateUntilTimeout>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d016      	beq.n	800bc68 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc3e:	f043 0220 	orr.w	r2, r3, #32
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e023      	b.n	800bc92 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc60:	2b80      	cmp	r3, #128	; 0x80
 800bc62:	d0f2      	beq.n	800bc4a <SPI_EndRxTxTransaction+0x7a>
 800bc64:	e000      	b.n	800bc68 <SPI_EndRxTxTransaction+0x98>
        break;
 800bc66:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7ff fe99 	bl	800b9ac <SPI_WaitFifoStateUntilTimeout>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc84:	f043 0220 	orr.w	r2, r3, #32
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e000      	b.n	800bc92 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20000008 	.word	0x20000008
 800bca0:	165e9f81 	.word	0x165e9f81

0800bca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e049      	b.n	800bd4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7f9 ffa0 	bl	8005c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3304      	adds	r3, #4
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f000 ffae 	bl	800cc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d001      	beq.n	800bd6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e054      	b.n	800be16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a26      	ldr	r2, [pc, #152]	; (800be24 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d022      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd96:	d01d      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a22      	ldr	r2, [pc, #136]	; (800be28 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d018      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a21      	ldr	r2, [pc, #132]	; (800be2c <HAL_TIM_Base_Start_IT+0xd8>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d013      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a1f      	ldr	r2, [pc, #124]	; (800be30 <HAL_TIM_Base_Start_IT+0xdc>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d00e      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <HAL_TIM_Base_Start_IT+0xe0>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d009      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a1c      	ldr	r2, [pc, #112]	; (800be38 <HAL_TIM_Base_Start_IT+0xe4>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d004      	beq.n	800bdd4 <HAL_TIM_Base_Start_IT+0x80>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a1b      	ldr	r2, [pc, #108]	; (800be3c <HAL_TIM_Base_Start_IT+0xe8>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d115      	bne.n	800be00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	4b19      	ldr	r3, [pc, #100]	; (800be40 <HAL_TIM_Base_Start_IT+0xec>)
 800bddc:	4013      	ands	r3, r2
 800bdde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b06      	cmp	r3, #6
 800bde4:	d015      	beq.n	800be12 <HAL_TIM_Base_Start_IT+0xbe>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdec:	d011      	beq.n	800be12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f042 0201 	orr.w	r2, r2, #1
 800bdfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdfe:	e008      	b.n	800be12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f042 0201 	orr.w	r2, r2, #1
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	e000      	b.n	800be14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	40010000 	.word	0x40010000
 800be28:	40000400 	.word	0x40000400
 800be2c:	40000800 	.word	0x40000800
 800be30:	40000c00 	.word	0x40000c00
 800be34:	40010400 	.word	0x40010400
 800be38:	40014000 	.word	0x40014000
 800be3c:	40001800 	.word	0x40001800
 800be40:	00010007 	.word	0x00010007

0800be44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e049      	b.n	800beea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f841 	bl	800bef2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3304      	adds	r3, #4
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f000 fede 	bl	800cc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bef2:	b480      	push	{r7}
 800bef4:	b083      	sub	sp, #12
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d109      	bne.n	800bf2c <HAL_TIM_PWM_Start+0x24>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	bf14      	ite	ne
 800bf24:	2301      	movne	r3, #1
 800bf26:	2300      	moveq	r3, #0
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	e03c      	b.n	800bfa6 <HAL_TIM_PWM_Start+0x9e>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d109      	bne.n	800bf46 <HAL_TIM_PWM_Start+0x3e>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	bf14      	ite	ne
 800bf3e:	2301      	movne	r3, #1
 800bf40:	2300      	moveq	r3, #0
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	e02f      	b.n	800bfa6 <HAL_TIM_PWM_Start+0x9e>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b08      	cmp	r3, #8
 800bf4a:	d109      	bne.n	800bf60 <HAL_TIM_PWM_Start+0x58>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	bf14      	ite	ne
 800bf58:	2301      	movne	r3, #1
 800bf5a:	2300      	moveq	r3, #0
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	e022      	b.n	800bfa6 <HAL_TIM_PWM_Start+0x9e>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2b0c      	cmp	r3, #12
 800bf64:	d109      	bne.n	800bf7a <HAL_TIM_PWM_Start+0x72>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	bf14      	ite	ne
 800bf72:	2301      	movne	r3, #1
 800bf74:	2300      	moveq	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	e015      	b.n	800bfa6 <HAL_TIM_PWM_Start+0x9e>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b10      	cmp	r3, #16
 800bf7e:	d109      	bne.n	800bf94 <HAL_TIM_PWM_Start+0x8c>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	bf14      	ite	ne
 800bf8c:	2301      	movne	r3, #1
 800bf8e:	2300      	moveq	r3, #0
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	e008      	b.n	800bfa6 <HAL_TIM_PWM_Start+0x9e>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	bf14      	ite	ne
 800bfa0:	2301      	movne	r3, #1
 800bfa2:	2300      	moveq	r3, #0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e092      	b.n	800c0d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d104      	bne.n	800bfbe <HAL_TIM_PWM_Start+0xb6>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfbc:	e023      	b.n	800c006 <HAL_TIM_PWM_Start+0xfe>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d104      	bne.n	800bfce <HAL_TIM_PWM_Start+0xc6>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfcc:	e01b      	b.n	800c006 <HAL_TIM_PWM_Start+0xfe>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2b08      	cmp	r3, #8
 800bfd2:	d104      	bne.n	800bfde <HAL_TIM_PWM_Start+0xd6>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfdc:	e013      	b.n	800c006 <HAL_TIM_PWM_Start+0xfe>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b0c      	cmp	r3, #12
 800bfe2:	d104      	bne.n	800bfee <HAL_TIM_PWM_Start+0xe6>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfec:	e00b      	b.n	800c006 <HAL_TIM_PWM_Start+0xfe>
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b10      	cmp	r3, #16
 800bff2:	d104      	bne.n	800bffe <HAL_TIM_PWM_Start+0xf6>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2202      	movs	r2, #2
 800bff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bffc:	e003      	b.n	800c006 <HAL_TIM_PWM_Start+0xfe>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2202      	movs	r2, #2
 800c002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2201      	movs	r2, #1
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 fada 	bl	800d5c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a30      	ldr	r2, [pc, #192]	; (800c0dc <HAL_TIM_PWM_Start+0x1d4>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d004      	beq.n	800c028 <HAL_TIM_PWM_Start+0x120>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a2f      	ldr	r2, [pc, #188]	; (800c0e0 <HAL_TIM_PWM_Start+0x1d8>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d101      	bne.n	800c02c <HAL_TIM_PWM_Start+0x124>
 800c028:	2301      	movs	r3, #1
 800c02a:	e000      	b.n	800c02e <HAL_TIM_PWM_Start+0x126>
 800c02c:	2300      	movs	r3, #0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a25      	ldr	r2, [pc, #148]	; (800c0dc <HAL_TIM_PWM_Start+0x1d4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d022      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c054:	d01d      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a22      	ldr	r2, [pc, #136]	; (800c0e4 <HAL_TIM_PWM_Start+0x1dc>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d018      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a20      	ldr	r2, [pc, #128]	; (800c0e8 <HAL_TIM_PWM_Start+0x1e0>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d013      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a1f      	ldr	r2, [pc, #124]	; (800c0ec <HAL_TIM_PWM_Start+0x1e4>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d00e      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a19      	ldr	r2, [pc, #100]	; (800c0e0 <HAL_TIM_PWM_Start+0x1d8>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d009      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <HAL_TIM_PWM_Start+0x1e8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d004      	beq.n	800c092 <HAL_TIM_PWM_Start+0x18a>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a19      	ldr	r2, [pc, #100]	; (800c0f4 <HAL_TIM_PWM_Start+0x1ec>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d115      	bne.n	800c0be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	4b17      	ldr	r3, [pc, #92]	; (800c0f8 <HAL_TIM_PWM_Start+0x1f0>)
 800c09a:	4013      	ands	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b06      	cmp	r3, #6
 800c0a2:	d015      	beq.n	800c0d0 <HAL_TIM_PWM_Start+0x1c8>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0aa:	d011      	beq.n	800c0d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f042 0201 	orr.w	r2, r2, #1
 800c0ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0bc:	e008      	b.n	800c0d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f042 0201 	orr.w	r2, r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	e000      	b.n	800c0d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40010400 	.word	0x40010400
 800c0e4:	40000400 	.word	0x40000400
 800c0e8:	40000800 	.word	0x40000800
 800c0ec:	40000c00 	.word	0x40000c00
 800c0f0:	40014000 	.word	0x40014000
 800c0f4:	40001800 	.word	0x40001800
 800c0f8:	00010007 	.word	0x00010007

0800c0fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e049      	b.n	800c1a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7f9 fd94 	bl	8005c50 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f000 fd82 	bl	800cc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
	...

0800c1ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d104      	bne.n	800c1ca <HAL_TIM_IC_Start_IT+0x1e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	e023      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x66>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b04      	cmp	r3, #4
 800c1ce:	d104      	bne.n	800c1da <HAL_TIM_IC_Start_IT+0x2e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	e01b      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x66>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b08      	cmp	r3, #8
 800c1de:	d104      	bne.n	800c1ea <HAL_TIM_IC_Start_IT+0x3e>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	e013      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x66>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b0c      	cmp	r3, #12
 800c1ee:	d104      	bne.n	800c1fa <HAL_TIM_IC_Start_IT+0x4e>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	e00b      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x66>
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b10      	cmp	r3, #16
 800c1fe:	d104      	bne.n	800c20a <HAL_TIM_IC_Start_IT+0x5e>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c206:	b2db      	uxtb	r3, r3
 800c208:	e003      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x66>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c210:	b2db      	uxtb	r3, r3
 800c212:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d104      	bne.n	800c224 <HAL_TIM_IC_Start_IT+0x78>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c220:	b2db      	uxtb	r3, r3
 800c222:	e013      	b.n	800c24c <HAL_TIM_IC_Start_IT+0xa0>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b04      	cmp	r3, #4
 800c228:	d104      	bne.n	800c234 <HAL_TIM_IC_Start_IT+0x88>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c230:	b2db      	uxtb	r3, r3
 800c232:	e00b      	b.n	800c24c <HAL_TIM_IC_Start_IT+0xa0>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b08      	cmp	r3, #8
 800c238:	d104      	bne.n	800c244 <HAL_TIM_IC_Start_IT+0x98>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c240:	b2db      	uxtb	r3, r3
 800c242:	e003      	b.n	800c24c <HAL_TIM_IC_Start_IT+0xa0>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c24e:	7bbb      	ldrb	r3, [r7, #14]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d102      	bne.n	800c25a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c254:	7b7b      	ldrb	r3, [r7, #13]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d001      	beq.n	800c25e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e0e2      	b.n	800c424 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <HAL_TIM_IC_Start_IT+0xc2>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c26c:	e023      	b.n	800c2b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b04      	cmp	r3, #4
 800c272:	d104      	bne.n	800c27e <HAL_TIM_IC_Start_IT+0xd2>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c27c:	e01b      	b.n	800c2b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b08      	cmp	r3, #8
 800c282:	d104      	bne.n	800c28e <HAL_TIM_IC_Start_IT+0xe2>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c28c:	e013      	b.n	800c2b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b0c      	cmp	r3, #12
 800c292:	d104      	bne.n	800c29e <HAL_TIM_IC_Start_IT+0xf2>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c29c:	e00b      	b.n	800c2b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b10      	cmp	r3, #16
 800c2a2:	d104      	bne.n	800c2ae <HAL_TIM_IC_Start_IT+0x102>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2ac:	e003      	b.n	800c2b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d104      	bne.n	800c2c6 <HAL_TIM_IC_Start_IT+0x11a>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2c4:	e013      	b.n	800c2ee <HAL_TIM_IC_Start_IT+0x142>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	d104      	bne.n	800c2d6 <HAL_TIM_IC_Start_IT+0x12a>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2d4:	e00b      	b.n	800c2ee <HAL_TIM_IC_Start_IT+0x142>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d104      	bne.n	800c2e6 <HAL_TIM_IC_Start_IT+0x13a>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2e4:	e003      	b.n	800c2ee <HAL_TIM_IC_Start_IT+0x142>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b0c      	cmp	r3, #12
 800c2f2:	d841      	bhi.n	800c378 <HAL_TIM_IC_Start_IT+0x1cc>
 800c2f4:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <HAL_TIM_IC_Start_IT+0x150>)
 800c2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fa:	bf00      	nop
 800c2fc:	0800c331 	.word	0x0800c331
 800c300:	0800c379 	.word	0x0800c379
 800c304:	0800c379 	.word	0x0800c379
 800c308:	0800c379 	.word	0x0800c379
 800c30c:	0800c343 	.word	0x0800c343
 800c310:	0800c379 	.word	0x0800c379
 800c314:	0800c379 	.word	0x0800c379
 800c318:	0800c379 	.word	0x0800c379
 800c31c:	0800c355 	.word	0x0800c355
 800c320:	0800c379 	.word	0x0800c379
 800c324:	0800c379 	.word	0x0800c379
 800c328:	0800c379 	.word	0x0800c379
 800c32c:	0800c367 	.word	0x0800c367
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68da      	ldr	r2, [r3, #12]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 0202 	orr.w	r2, r2, #2
 800c33e:	60da      	str	r2, [r3, #12]
      break;
 800c340:	e01d      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0204 	orr.w	r2, r2, #4
 800c350:	60da      	str	r2, [r3, #12]
      break;
 800c352:	e014      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0208 	orr.w	r2, r2, #8
 800c362:	60da      	str	r2, [r3, #12]
      break;
 800c364:	e00b      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f042 0210 	orr.w	r2, r2, #16
 800c374:	60da      	str	r2, [r3, #12]
      break;
 800c376:	e002      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	73fb      	strb	r3, [r7, #15]
      break;
 800c37c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d14e      	bne.n	800c422 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2201      	movs	r2, #1
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 f91b 	bl	800d5c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a25      	ldr	r2, [pc, #148]	; (800c42c <HAL_TIM_IC_Start_IT+0x280>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d022      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a4:	d01d      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a21      	ldr	r2, [pc, #132]	; (800c430 <HAL_TIM_IC_Start_IT+0x284>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d018      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a1f      	ldr	r2, [pc, #124]	; (800c434 <HAL_TIM_IC_Start_IT+0x288>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d013      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <HAL_TIM_IC_Start_IT+0x28c>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00e      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a1c      	ldr	r2, [pc, #112]	; (800c43c <HAL_TIM_IC_Start_IT+0x290>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d009      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a1b      	ldr	r2, [pc, #108]	; (800c440 <HAL_TIM_IC_Start_IT+0x294>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d004      	beq.n	800c3e2 <HAL_TIM_IC_Start_IT+0x236>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a19      	ldr	r2, [pc, #100]	; (800c444 <HAL_TIM_IC_Start_IT+0x298>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d115      	bne.n	800c40e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <HAL_TIM_IC_Start_IT+0x29c>)
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	2b06      	cmp	r3, #6
 800c3f2:	d015      	beq.n	800c420 <HAL_TIM_IC_Start_IT+0x274>
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fa:	d011      	beq.n	800c420 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0201 	orr.w	r2, r2, #1
 800c40a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40c:	e008      	b.n	800c420 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f042 0201 	orr.w	r2, r2, #1
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	e000      	b.n	800c422 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c420:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	40010000 	.word	0x40010000
 800c430:	40000400 	.word	0x40000400
 800c434:	40000800 	.word	0x40000800
 800c438:	40000c00 	.word	0x40000c00
 800c43c:	40010400 	.word	0x40010400
 800c440:	40014000 	.word	0x40014000
 800c444:	40001800 	.word	0x40001800
 800c448:	00010007 	.word	0x00010007

0800c44c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d122      	bne.n	800c4a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d11b      	bne.n	800c4a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f06f 0202 	mvn.w	r2, #2
 800c478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7f7 f854 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 800c494:	e005      	b.n	800c4a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fbb6 	bl	800cc08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fbbd 	bl	800cc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	f003 0304 	and.w	r3, r3, #4
 800c4b2:	2b04      	cmp	r3, #4
 800c4b4:	d122      	bne.n	800c4fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f003 0304 	and.w	r3, r3, #4
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d11b      	bne.n	800c4fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f06f 0204 	mvn.w	r2, #4
 800c4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f7 f82a 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 800c4e8:	e005      	b.n	800c4f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fb8c 	bl	800cc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fb93 	bl	800cc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 0308 	and.w	r3, r3, #8
 800c506:	2b08      	cmp	r3, #8
 800c508:	d122      	bne.n	800c550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	2b08      	cmp	r3, #8
 800c516:	d11b      	bne.n	800c550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f06f 0208 	mvn.w	r2, #8
 800c520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2204      	movs	r2, #4
 800c526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7f7 f800 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 800c53c:	e005      	b.n	800c54a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fb62 	bl	800cc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fb69 	bl	800cc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	f003 0310 	and.w	r3, r3, #16
 800c55a:	2b10      	cmp	r3, #16
 800c55c:	d122      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f003 0310 	and.w	r3, r3, #16
 800c568:	2b10      	cmp	r3, #16
 800c56a:	d11b      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f06f 0210 	mvn.w	r2, #16
 800c574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2208      	movs	r2, #8
 800c57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	69db      	ldr	r3, [r3, #28]
 800c582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7f6 ffd6 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 800c590:	e005      	b.n	800c59e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fb38 	bl	800cc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fb3f 	bl	800cc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d10e      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d107      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f06f 0201 	mvn.w	r2, #1
 800c5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7f7 fd9f 	bl	800410e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5da:	2b80      	cmp	r3, #128	; 0x80
 800c5dc:	d10e      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e8:	2b80      	cmp	r3, #128	; 0x80
 800c5ea:	d107      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 f922 	bl	800d840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c60a:	d10e      	bne.n	800c62a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c616:	2b80      	cmp	r3, #128	; 0x80
 800c618:	d107      	bne.n	800c62a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f001 f915 	bl	800d854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c634:	2b40      	cmp	r3, #64	; 0x40
 800c636:	d10e      	bne.n	800c656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c642:	2b40      	cmp	r3, #64	; 0x40
 800c644:	d107      	bne.n	800c656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 faed 	bl	800cc30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	f003 0320 	and.w	r3, r3, #32
 800c660:	2b20      	cmp	r3, #32
 800c662:	d10e      	bne.n	800c682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	f003 0320 	and.w	r3, r3, #32
 800c66e:	2b20      	cmp	r3, #32
 800c670:	d107      	bne.n	800c682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f06f 0220 	mvn.w	r2, #32
 800c67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f001 f8d5 	bl	800d82c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c682:	bf00      	nop
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b086      	sub	sp, #24
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e088      	b.n	800c7ba <HAL_TIM_IC_ConfigChannel+0x130>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d11b      	bne.n	800c6ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c6c6:	f000 fdbb 	bl	800d240 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	699a      	ldr	r2, [r3, #24]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f022 020c 	bic.w	r2, r2, #12
 800c6d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6999      	ldr	r1, [r3, #24]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	619a      	str	r2, [r3, #24]
 800c6ec:	e060      	b.n	800c7b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d11c      	bne.n	800c72e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c704:	f000 fe3f 	bl	800d386 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	699a      	ldr	r2, [r3, #24]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c716:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6999      	ldr	r1, [r3, #24]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	021a      	lsls	r2, r3, #8
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	619a      	str	r2, [r3, #24]
 800c72c:	e040      	b.n	800c7b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b08      	cmp	r3, #8
 800c732:	d11b      	bne.n	800c76c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c744:	f000 fe8c 	bl	800d460 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	69da      	ldr	r2, [r3, #28]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f022 020c 	bic.w	r2, r2, #12
 800c756:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	69d9      	ldr	r1, [r3, #28]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	689a      	ldr	r2, [r3, #8]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	61da      	str	r2, [r3, #28]
 800c76a:	e021      	b.n	800c7b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b0c      	cmp	r3, #12
 800c770:	d11c      	bne.n	800c7ac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c782:	f000 fea9 	bl	800d4d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	69da      	ldr	r2, [r3, #28]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c794:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	69d9      	ldr	r1, [r3, #28]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	021a      	lsls	r2, r3, #8
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	61da      	str	r2, [r3, #28]
 800c7aa:	e001      	b.n	800c7b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d101      	bne.n	800c7e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	e0ff      	b.n	800c9e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b14      	cmp	r3, #20
 800c7ee:	f200 80f0 	bhi.w	800c9d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c84d 	.word	0x0800c84d
 800c7fc:	0800c9d3 	.word	0x0800c9d3
 800c800:	0800c9d3 	.word	0x0800c9d3
 800c804:	0800c9d3 	.word	0x0800c9d3
 800c808:	0800c88d 	.word	0x0800c88d
 800c80c:	0800c9d3 	.word	0x0800c9d3
 800c810:	0800c9d3 	.word	0x0800c9d3
 800c814:	0800c9d3 	.word	0x0800c9d3
 800c818:	0800c8cf 	.word	0x0800c8cf
 800c81c:	0800c9d3 	.word	0x0800c9d3
 800c820:	0800c9d3 	.word	0x0800c9d3
 800c824:	0800c9d3 	.word	0x0800c9d3
 800c828:	0800c90f 	.word	0x0800c90f
 800c82c:	0800c9d3 	.word	0x0800c9d3
 800c830:	0800c9d3 	.word	0x0800c9d3
 800c834:	0800c9d3 	.word	0x0800c9d3
 800c838:	0800c951 	.word	0x0800c951
 800c83c:	0800c9d3 	.word	0x0800c9d3
 800c840:	0800c9d3 	.word	0x0800c9d3
 800c844:	0800c9d3 	.word	0x0800c9d3
 800c848:	0800c991 	.word	0x0800c991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fa96 	bl	800cd84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	699a      	ldr	r2, [r3, #24]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f042 0208 	orr.w	r2, r2, #8
 800c866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	699a      	ldr	r2, [r3, #24]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0204 	bic.w	r2, r2, #4
 800c876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6999      	ldr	r1, [r3, #24]
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	691a      	ldr	r2, [r3, #16]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	619a      	str	r2, [r3, #24]
      break;
 800c88a:	e0a5      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fae8 	bl	800ce68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	699a      	ldr	r2, [r3, #24]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	699a      	ldr	r2, [r3, #24]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6999      	ldr	r1, [r3, #24]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	021a      	lsls	r2, r3, #8
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	619a      	str	r2, [r3, #24]
      break;
 800c8cc:	e084      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 fb3f 	bl	800cf58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69da      	ldr	r2, [r3, #28]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f042 0208 	orr.w	r2, r2, #8
 800c8e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	69da      	ldr	r2, [r3, #28]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f022 0204 	bic.w	r2, r2, #4
 800c8f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	69d9      	ldr	r1, [r3, #28]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	691a      	ldr	r2, [r3, #16]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	430a      	orrs	r2, r1
 800c90a:	61da      	str	r2, [r3, #28]
      break;
 800c90c:	e064      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	4618      	mov	r0, r3
 800c916:	f000 fb95 	bl	800d044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	69da      	ldr	r2, [r3, #28]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	69da      	ldr	r2, [r3, #28]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69d9      	ldr	r1, [r3, #28]
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	021a      	lsls	r2, r3, #8
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	61da      	str	r2, [r3, #28]
      break;
 800c94e:	e043      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68b9      	ldr	r1, [r7, #8]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fbcc 	bl	800d0f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f042 0208 	orr.w	r2, r2, #8
 800c96a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f022 0204 	bic.w	r2, r2, #4
 800c97a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c98e:	e023      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 fbfe 	bl	800d198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	021a      	lsls	r2, r3, #8
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c9d0:	e002      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c9d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop

0800c9ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_TIM_ConfigClockSource+0x1c>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e0b4      	b.n	800cb72 <HAL_TIM_ConfigClockSource+0x186>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	4b56      	ldr	r3, [pc, #344]	; (800cb7c <HAL_TIM_ConfigClockSource+0x190>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca40:	d03e      	beq.n	800cac0 <HAL_TIM_ConfigClockSource+0xd4>
 800ca42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca46:	f200 8087 	bhi.w	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca4e:	f000 8086 	beq.w	800cb5e <HAL_TIM_ConfigClockSource+0x172>
 800ca52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca56:	d87f      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca58:	2b70      	cmp	r3, #112	; 0x70
 800ca5a:	d01a      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0xa6>
 800ca5c:	2b70      	cmp	r3, #112	; 0x70
 800ca5e:	d87b      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca60:	2b60      	cmp	r3, #96	; 0x60
 800ca62:	d050      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x11a>
 800ca64:	2b60      	cmp	r3, #96	; 0x60
 800ca66:	d877      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca68:	2b50      	cmp	r3, #80	; 0x50
 800ca6a:	d03c      	beq.n	800cae6 <HAL_TIM_ConfigClockSource+0xfa>
 800ca6c:	2b50      	cmp	r3, #80	; 0x50
 800ca6e:	d873      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca70:	2b40      	cmp	r3, #64	; 0x40
 800ca72:	d058      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x13a>
 800ca74:	2b40      	cmp	r3, #64	; 0x40
 800ca76:	d86f      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca78:	2b30      	cmp	r3, #48	; 0x30
 800ca7a:	d064      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x15a>
 800ca7c:	2b30      	cmp	r3, #48	; 0x30
 800ca7e:	d86b      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d060      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x15a>
 800ca84:	2b20      	cmp	r3, #32
 800ca86:	d867      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d05c      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x15a>
 800ca8c:	2b10      	cmp	r3, #16
 800ca8e:	d05a      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x15a>
 800ca90:	e062      	b.n	800cb58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800caa2:	f000 fd71 	bl	800d588 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	609a      	str	r2, [r3, #8]
      break;
 800cabe:	e04f      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cad0:	f000 fd5a 	bl	800d588 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689a      	ldr	r2, [r3, #8]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cae2:	609a      	str	r2, [r3, #8]
      break;
 800cae4:	e03c      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800caf2:	461a      	mov	r2, r3
 800caf4:	f000 fc18 	bl	800d328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2150      	movs	r1, #80	; 0x50
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fd27 	bl	800d552 <TIM_ITRx_SetConfig>
      break;
 800cb04:	e02c      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb12:	461a      	mov	r2, r3
 800cb14:	f000 fc74 	bl	800d400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2160      	movs	r1, #96	; 0x60
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fd17 	bl	800d552 <TIM_ITRx_SetConfig>
      break;
 800cb24:	e01c      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb32:	461a      	mov	r2, r3
 800cb34:	f000 fbf8 	bl	800d328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2140      	movs	r1, #64	; 0x40
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 fd07 	bl	800d552 <TIM_ITRx_SetConfig>
      break;
 800cb44:	e00c      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4610      	mov	r0, r2
 800cb52:	f000 fcfe 	bl	800d552 <TIM_ITRx_SetConfig>
      break;
 800cb56:	e003      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5c:	e000      	b.n	800cb60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cb5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	fffeff88 	.word	0xfffeff88

0800cb80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b0c      	cmp	r3, #12
 800cb92:	d831      	bhi.n	800cbf8 <HAL_TIM_ReadCapturedValue+0x78>
 800cb94:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <HAL_TIM_ReadCapturedValue+0x1c>)
 800cb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9a:	bf00      	nop
 800cb9c:	0800cbd1 	.word	0x0800cbd1
 800cba0:	0800cbf9 	.word	0x0800cbf9
 800cba4:	0800cbf9 	.word	0x0800cbf9
 800cba8:	0800cbf9 	.word	0x0800cbf9
 800cbac:	0800cbdb 	.word	0x0800cbdb
 800cbb0:	0800cbf9 	.word	0x0800cbf9
 800cbb4:	0800cbf9 	.word	0x0800cbf9
 800cbb8:	0800cbf9 	.word	0x0800cbf9
 800cbbc:	0800cbe5 	.word	0x0800cbe5
 800cbc0:	0800cbf9 	.word	0x0800cbf9
 800cbc4:	0800cbf9 	.word	0x0800cbf9
 800cbc8:	0800cbf9 	.word	0x0800cbf9
 800cbcc:	0800cbef 	.word	0x0800cbef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd6:	60fb      	str	r3, [r7, #12]

      break;
 800cbd8:	e00f      	b.n	800cbfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe0:	60fb      	str	r3, [r7, #12]

      break;
 800cbe2:	e00a      	b.n	800cbfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	60fb      	str	r3, [r7, #12]

      break;
 800cbec:	e005      	b.n	800cbfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	60fb      	str	r3, [r7, #12]

      break;
 800cbf6:	e000      	b.n	800cbfa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cbf8:	bf00      	nop
  }

  return tmpreg;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a40      	ldr	r2, [pc, #256]	; (800cd58 <TIM_Base_SetConfig+0x114>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d013      	beq.n	800cc84 <TIM_Base_SetConfig+0x40>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc62:	d00f      	beq.n	800cc84 <TIM_Base_SetConfig+0x40>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a3d      	ldr	r2, [pc, #244]	; (800cd5c <TIM_Base_SetConfig+0x118>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d00b      	beq.n	800cc84 <TIM_Base_SetConfig+0x40>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a3c      	ldr	r2, [pc, #240]	; (800cd60 <TIM_Base_SetConfig+0x11c>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d007      	beq.n	800cc84 <TIM_Base_SetConfig+0x40>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a3b      	ldr	r2, [pc, #236]	; (800cd64 <TIM_Base_SetConfig+0x120>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d003      	beq.n	800cc84 <TIM_Base_SetConfig+0x40>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a3a      	ldr	r2, [pc, #232]	; (800cd68 <TIM_Base_SetConfig+0x124>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d108      	bne.n	800cc96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a2f      	ldr	r2, [pc, #188]	; (800cd58 <TIM_Base_SetConfig+0x114>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d02b      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca4:	d027      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a2c      	ldr	r2, [pc, #176]	; (800cd5c <TIM_Base_SetConfig+0x118>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d023      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4a2b      	ldr	r2, [pc, #172]	; (800cd60 <TIM_Base_SetConfig+0x11c>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d01f      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a2a      	ldr	r2, [pc, #168]	; (800cd64 <TIM_Base_SetConfig+0x120>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d01b      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a29      	ldr	r2, [pc, #164]	; (800cd68 <TIM_Base_SetConfig+0x124>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d017      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a28      	ldr	r2, [pc, #160]	; (800cd6c <TIM_Base_SetConfig+0x128>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d013      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a27      	ldr	r2, [pc, #156]	; (800cd70 <TIM_Base_SetConfig+0x12c>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d00f      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a26      	ldr	r2, [pc, #152]	; (800cd74 <TIM_Base_SetConfig+0x130>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d00b      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a25      	ldr	r2, [pc, #148]	; (800cd78 <TIM_Base_SetConfig+0x134>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d007      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a24      	ldr	r2, [pc, #144]	; (800cd7c <TIM_Base_SetConfig+0x138>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d003      	beq.n	800ccf6 <TIM_Base_SetConfig+0xb2>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a23      	ldr	r2, [pc, #140]	; (800cd80 <TIM_Base_SetConfig+0x13c>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d108      	bne.n	800cd08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a0a      	ldr	r2, [pc, #40]	; (800cd58 <TIM_Base_SetConfig+0x114>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d003      	beq.n	800cd3c <TIM_Base_SetConfig+0xf8>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a0c      	ldr	r2, [pc, #48]	; (800cd68 <TIM_Base_SetConfig+0x124>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d103      	bne.n	800cd44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	691a      	ldr	r2, [r3, #16]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	615a      	str	r2, [r3, #20]
}
 800cd4a:	bf00      	nop
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	40010000 	.word	0x40010000
 800cd5c:	40000400 	.word	0x40000400
 800cd60:	40000800 	.word	0x40000800
 800cd64:	40000c00 	.word	0x40000c00
 800cd68:	40010400 	.word	0x40010400
 800cd6c:	40014000 	.word	0x40014000
 800cd70:	40014400 	.word	0x40014400
 800cd74:	40014800 	.word	0x40014800
 800cd78:	40001800 	.word	0x40001800
 800cd7c:	40001c00 	.word	0x40001c00
 800cd80:	40002000 	.word	0x40002000

0800cd84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	f023 0201 	bic.w	r2, r3, #1
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4b2b      	ldr	r3, [pc, #172]	; (800ce5c <TIM_OC1_SetConfig+0xd8>)
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f023 0303 	bic.w	r3, r3, #3
 800cdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f023 0302 	bic.w	r3, r3, #2
 800cdcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a21      	ldr	r2, [pc, #132]	; (800ce60 <TIM_OC1_SetConfig+0xdc>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d003      	beq.n	800cde8 <TIM_OC1_SetConfig+0x64>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a20      	ldr	r2, [pc, #128]	; (800ce64 <TIM_OC1_SetConfig+0xe0>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d10c      	bne.n	800ce02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	f023 0308 	bic.w	r3, r3, #8
 800cdee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f023 0304 	bic.w	r3, r3, #4
 800ce00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a16      	ldr	r2, [pc, #88]	; (800ce60 <TIM_OC1_SetConfig+0xdc>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d003      	beq.n	800ce12 <TIM_OC1_SetConfig+0x8e>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a15      	ldr	r2, [pc, #84]	; (800ce64 <TIM_OC1_SetConfig+0xe0>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d111      	bne.n	800ce36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	695b      	ldr	r3, [r3, #20]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	621a      	str	r2, [r3, #32]
}
 800ce50:	bf00      	nop
 800ce52:	371c      	adds	r7, #28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	fffeff8f 	.word	0xfffeff8f
 800ce60:	40010000 	.word	0x40010000
 800ce64:	40010400 	.word	0x40010400

0800ce68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	f023 0210 	bic.w	r2, r3, #16
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	4b2e      	ldr	r3, [pc, #184]	; (800cf4c <TIM_OC2_SetConfig+0xe4>)
 800ce94:	4013      	ands	r3, r2
 800ce96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	021b      	lsls	r3, r3, #8
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f023 0320 	bic.w	r3, r3, #32
 800ceb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a23      	ldr	r2, [pc, #140]	; (800cf50 <TIM_OC2_SetConfig+0xe8>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d003      	beq.n	800ced0 <TIM_OC2_SetConfig+0x68>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a22      	ldr	r2, [pc, #136]	; (800cf54 <TIM_OC2_SetConfig+0xec>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d10d      	bne.n	800ceec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ced6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a18      	ldr	r2, [pc, #96]	; (800cf50 <TIM_OC2_SetConfig+0xe8>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d003      	beq.n	800cefc <TIM_OC2_SetConfig+0x94>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a17      	ldr	r2, [pc, #92]	; (800cf54 <TIM_OC2_SetConfig+0xec>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d113      	bne.n	800cf24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	695b      	ldr	r3, [r3, #20]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	693a      	ldr	r2, [r7, #16]
 800cf28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	685a      	ldr	r2, [r3, #4]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	621a      	str	r2, [r3, #32]
}
 800cf3e:	bf00      	nop
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	feff8fff 	.word	0xfeff8fff
 800cf50:	40010000 	.word	0x40010000
 800cf54:	40010400 	.word	0x40010400

0800cf58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b087      	sub	sp, #28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a1b      	ldr	r3, [r3, #32]
 800cf66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	69db      	ldr	r3, [r3, #28]
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	4b2d      	ldr	r3, [pc, #180]	; (800d038 <TIM_OC3_SetConfig+0xe0>)
 800cf84:	4013      	ands	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a22      	ldr	r2, [pc, #136]	; (800d03c <TIM_OC3_SetConfig+0xe4>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d003      	beq.n	800cfbe <TIM_OC3_SetConfig+0x66>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a21      	ldr	r2, [pc, #132]	; (800d040 <TIM_OC3_SetConfig+0xe8>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d10d      	bne.n	800cfda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	697a      	ldr	r2, [r7, #20]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a17      	ldr	r2, [pc, #92]	; (800d03c <TIM_OC3_SetConfig+0xe4>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d003      	beq.n	800cfea <TIM_OC3_SetConfig+0x92>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a16      	ldr	r2, [pc, #88]	; (800d040 <TIM_OC3_SetConfig+0xe8>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d113      	bne.n	800d012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	4313      	orrs	r3, r2
 800d004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	4313      	orrs	r3, r2
 800d010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	685a      	ldr	r2, [r3, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	621a      	str	r2, [r3, #32]
}
 800d02c:	bf00      	nop
 800d02e:	371c      	adds	r7, #28
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	fffeff8f 	.word	0xfffeff8f
 800d03c:	40010000 	.word	0x40010000
 800d040:	40010400 	.word	0x40010400

0800d044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4b1e      	ldr	r3, [pc, #120]	; (800d0e8 <TIM_OC4_SetConfig+0xa4>)
 800d070:	4013      	ands	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d07a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	021b      	lsls	r3, r3, #8
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d08e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	031b      	lsls	r3, r3, #12
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	4313      	orrs	r3, r2
 800d09a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a13      	ldr	r2, [pc, #76]	; (800d0ec <TIM_OC4_SetConfig+0xa8>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d003      	beq.n	800d0ac <TIM_OC4_SetConfig+0x68>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <TIM_OC4_SetConfig+0xac>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d109      	bne.n	800d0c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	019b      	lsls	r3, r3, #6
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685a      	ldr	r2, [r3, #4]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	621a      	str	r2, [r3, #32]
}
 800d0da:	bf00      	nop
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	feff8fff 	.word	0xfeff8fff
 800d0ec:	40010000 	.word	0x40010000
 800d0f0:	40010400 	.word	0x40010400

0800d0f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a1b      	ldr	r3, [r3, #32]
 800d102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4b1b      	ldr	r3, [pc, #108]	; (800d18c <TIM_OC5_SetConfig+0x98>)
 800d120:	4013      	ands	r3, r2
 800d122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	041b      	lsls	r3, r3, #16
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	4313      	orrs	r3, r2
 800d140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a12      	ldr	r2, [pc, #72]	; (800d190 <TIM_OC5_SetConfig+0x9c>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d003      	beq.n	800d152 <TIM_OC5_SetConfig+0x5e>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a11      	ldr	r2, [pc, #68]	; (800d194 <TIM_OC5_SetConfig+0xa0>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d109      	bne.n	800d166 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	021b      	lsls	r3, r3, #8
 800d160:	697a      	ldr	r2, [r7, #20]
 800d162:	4313      	orrs	r3, r2
 800d164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	621a      	str	r2, [r3, #32]
}
 800d180:	bf00      	nop
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	fffeff8f 	.word	0xfffeff8f
 800d190:	40010000 	.word	0x40010000
 800d194:	40010400 	.word	0x40010400

0800d198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d198:	b480      	push	{r7}
 800d19a:	b087      	sub	sp, #28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <TIM_OC6_SetConfig+0x9c>)
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	021b      	lsls	r3, r3, #8
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	051b      	lsls	r3, r3, #20
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a13      	ldr	r2, [pc, #76]	; (800d238 <TIM_OC6_SetConfig+0xa0>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <TIM_OC6_SetConfig+0x60>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a12      	ldr	r2, [pc, #72]	; (800d23c <TIM_OC6_SetConfig+0xa4>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d109      	bne.n	800d20c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	029b      	lsls	r3, r3, #10
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4313      	orrs	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	693a      	ldr	r2, [r7, #16]
 800d224:	621a      	str	r2, [r3, #32]
}
 800d226:	bf00      	nop
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	feff8fff 	.word	0xfeff8fff
 800d238:	40010000 	.word	0x40010000
 800d23c:	40010400 	.word	0x40010400

0800d240 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	f023 0201 	bic.w	r2, r3, #1
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a1b      	ldr	r3, [r3, #32]
 800d264:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	4a28      	ldr	r2, [pc, #160]	; (800d30c <TIM_TI1_SetConfig+0xcc>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d01b      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d274:	d017      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4a25      	ldr	r2, [pc, #148]	; (800d310 <TIM_TI1_SetConfig+0xd0>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d013      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	4a24      	ldr	r2, [pc, #144]	; (800d314 <TIM_TI1_SetConfig+0xd4>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00f      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	4a23      	ldr	r2, [pc, #140]	; (800d318 <TIM_TI1_SetConfig+0xd8>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d00b      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4a22      	ldr	r2, [pc, #136]	; (800d31c <TIM_TI1_SetConfig+0xdc>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d007      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4a21      	ldr	r2, [pc, #132]	; (800d320 <TIM_TI1_SetConfig+0xe0>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d003      	beq.n	800d2a6 <TIM_TI1_SetConfig+0x66>
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4a20      	ldr	r2, [pc, #128]	; (800d324 <TIM_TI1_SetConfig+0xe4>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d101      	bne.n	800d2aa <TIM_TI1_SetConfig+0x6a>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <TIM_TI1_SetConfig+0x6c>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d008      	beq.n	800d2c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	617b      	str	r3, [r7, #20]
 800d2c0:	e003      	b.n	800d2ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f043 0301 	orr.w	r3, r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f023 030a 	bic.w	r3, r3, #10
 800d2e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f003 030a 	and.w	r3, r3, #10
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	621a      	str	r2, [r3, #32]
}
 800d2fe:	bf00      	nop
 800d300:	371c      	adds	r7, #28
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	40010000 	.word	0x40010000
 800d310:	40000400 	.word	0x40000400
 800d314:	40000800 	.word	0x40000800
 800d318:	40000c00 	.word	0x40000c00
 800d31c:	40010400 	.word	0x40010400
 800d320:	40014000 	.word	0x40014000
 800d324:	40001800 	.word	0x40001800

0800d328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d328:	b480      	push	{r7}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	f023 0201 	bic.w	r2, r3, #1
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f023 030a 	bic.w	r3, r3, #10
 800d364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	621a      	str	r2, [r3, #32]
}
 800d37a:	bf00      	nop
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d386:	b480      	push	{r7}
 800d388:	b087      	sub	sp, #28
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	60f8      	str	r0, [r7, #12]
 800d38e:	60b9      	str	r1, [r7, #8]
 800d390:	607a      	str	r2, [r7, #4]
 800d392:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6a1b      	ldr	r3, [r3, #32]
 800d398:	f023 0210 	bic.w	r2, r3, #16
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	699b      	ldr	r3, [r3, #24]
 800d3a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	031b      	lsls	r3, r3, #12
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	621a      	str	r2, [r3, #32]
}
 800d3f4:	bf00      	nop
 800d3f6:	371c      	adds	r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	f023 0210 	bic.w	r2, r3, #16
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d42a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	031b      	lsls	r3, r3, #12
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	4313      	orrs	r3, r2
 800d434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d43c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	693a      	ldr	r2, [r7, #16]
 800d444:	4313      	orrs	r3, r2
 800d446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	693a      	ldr	r2, [r7, #16]
 800d452:	621a      	str	r2, [r3, #32]
}
 800d454:	bf00      	nop
 800d456:	371c      	adds	r7, #28
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d460:	b480      	push	{r7}
 800d462:	b087      	sub	sp, #28
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	69db      	ldr	r3, [r3, #28]
 800d47e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a1b      	ldr	r3, [r3, #32]
 800d484:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f023 0303 	bic.w	r3, r3, #3
 800d48c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4313      	orrs	r3, r2
 800d494:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d49c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	697a      	ldr	r2, [r7, #20]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d4b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	621a      	str	r2, [r3, #32]
}
 800d4cc:	bf00      	nop
 800d4ce:	371c      	adds	r7, #28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	021b      	lsls	r3, r3, #8
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d516:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	031b      	lsls	r3, r3, #12
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	4313      	orrs	r3, r2
 800d522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d52a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	031b      	lsls	r3, r3, #12
 800d530:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	621a      	str	r2, [r3, #32]
}
 800d546:	bf00      	nop
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d552:	b480      	push	{r7}
 800d554:	b085      	sub	sp, #20
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	4313      	orrs	r3, r2
 800d570:	f043 0307 	orr.w	r3, r3, #7
 800d574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	609a      	str	r2, [r3, #8]
}
 800d57c:	bf00      	nop
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d588:	b480      	push	{r7}
 800d58a:	b087      	sub	sp, #28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	021a      	lsls	r2, r3, #8
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	609a      	str	r2, [r3, #8]
}
 800d5bc:	bf00      	nop
 800d5be:	371c      	adds	r7, #28
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f003 031f 	and.w	r3, r3, #31
 800d5da:	2201      	movs	r2, #1
 800d5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6a1a      	ldr	r2, [r3, #32]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	43db      	mvns	r3, r3
 800d5ea:	401a      	ands	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6a1a      	ldr	r2, [r3, #32]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f003 031f 	and.w	r3, r3, #31
 800d5fa:	6879      	ldr	r1, [r7, #4]
 800d5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d600:	431a      	orrs	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	621a      	str	r2, [r3, #32]
}
 800d606:	bf00      	nop
 800d608:	371c      	adds	r7, #28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
	...

0800d614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d624:	2b01      	cmp	r3, #1
 800d626:	d101      	bne.n	800d62c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d628:	2302      	movs	r3, #2
 800d62a:	e06d      	b.n	800d708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a30      	ldr	r2, [pc, #192]	; (800d714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d004      	beq.n	800d660 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a2f      	ldr	r2, [pc, #188]	; (800d718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d108      	bne.n	800d672 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d666:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	4313      	orrs	r3, r2
 800d670:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	4313      	orrs	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a20      	ldr	r2, [pc, #128]	; (800d714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d022      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d69e:	d01d      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a1d      	ldr	r2, [pc, #116]	; (800d71c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d018      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a1c      	ldr	r2, [pc, #112]	; (800d720 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d013      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a1a      	ldr	r2, [pc, #104]	; (800d724 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00e      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a15      	ldr	r2, [pc, #84]	; (800d718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d009      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a16      	ldr	r2, [pc, #88]	; (800d728 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d004      	beq.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a15      	ldr	r2, [pc, #84]	; (800d72c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d10c      	bne.n	800d6f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	40010000 	.word	0x40010000
 800d718:	40010400 	.word	0x40010400
 800d71c:	40000400 	.word	0x40000400
 800d720:	40000800 	.word	0x40000800
 800d724:	40000c00 	.word	0x40000c00
 800d728:	40014000 	.word	0x40014000
 800d72c:	40001800 	.word	0x40001800

0800d730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d744:	2b01      	cmp	r3, #1
 800d746:	d101      	bne.n	800d74c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d748:	2302      	movs	r3, #2
 800d74a:	e065      	b.n	800d818 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4313      	orrs	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	041b      	lsls	r3, r3, #16
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a16      	ldr	r2, [pc, #88]	; (800d824 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d004      	beq.n	800d7da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a14      	ldr	r2, [pc, #80]	; (800d828 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d115      	bne.n	800d806 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e4:	051b      	lsls	r3, r3, #20
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	69db      	ldr	r3, [r3, #28]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	4313      	orrs	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3714      	adds	r7, #20
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	40010000 	.word	0x40010000
 800d828:	40010400 	.word	0x40010400

0800d82c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d834:	bf00      	nop
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d848:	bf00      	nop
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e040      	b.n	800d8fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7f8 fa64 	bl	8005d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2224      	movs	r2, #36	; 0x24
 800d894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0201 	bic.w	r2, r2, #1
 800d8a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fc2a 	bl	800e100 <UART_SetConfig>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d101      	bne.n	800d8b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e022      	b.n	800d8fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fe82 	bl	800e5c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d8d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	689a      	ldr	r2, [r3, #8]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d8e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f042 0201 	orr.w	r2, r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 ff09 	bl	800e70c <UART_CheckIdleState>
 800d8fa:	4603      	mov	r3, r0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08a      	sub	sp, #40	; 0x28
 800d908:	af02      	add	r7, sp, #8
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	603b      	str	r3, [r7, #0]
 800d910:	4613      	mov	r3, r2
 800d912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d918:	2b20      	cmp	r3, #32
 800d91a:	d171      	bne.n	800da00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <HAL_UART_Transmit+0x24>
 800d922:	88fb      	ldrh	r3, [r7, #6]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e06a      	b.n	800da02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2221      	movs	r2, #33	; 0x21
 800d938:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d93a:	f7fa fd3b 	bl	80083b4 <HAL_GetTick>
 800d93e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	88fa      	ldrh	r2, [r7, #6]
 800d944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	88fa      	ldrh	r2, [r7, #6]
 800d94c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d958:	d108      	bne.n	800d96c <HAL_UART_Transmit+0x68>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d104      	bne.n	800d96c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d962:	2300      	movs	r3, #0
 800d964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	61bb      	str	r3, [r7, #24]
 800d96a:	e003      	b.n	800d974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d970:	2300      	movs	r3, #0
 800d972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d974:	e02c      	b.n	800d9d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2200      	movs	r2, #0
 800d97e:	2180      	movs	r1, #128	; 0x80
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 fefa 	bl	800e77a <UART_WaitOnFlagUntilTimeout>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e038      	b.n	800da02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10b      	bne.n	800d9ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d9a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	3302      	adds	r3, #2
 800d9aa:	61bb      	str	r3, [r7, #24]
 800d9ac:	e007      	b.n	800d9be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	781a      	ldrb	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1cc      	bne.n	800d976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2140      	movs	r1, #64	; 0x40
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fec7 	bl	800e77a <UART_WaitOnFlagUntilTimeout>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e005      	b.n	800da02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e000      	b.n	800da02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800da00:	2302      	movs	r3, #2
  }
}
 800da02:	4618      	mov	r0, r3
 800da04:	3720      	adds	r7, #32
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b08a      	sub	sp, #40	; 0x28
 800da0e:	af00      	add	r7, sp, #0
 800da10:	60f8      	str	r0, [r7, #12]
 800da12:	60b9      	str	r1, [r7, #8]
 800da14:	4613      	mov	r3, r2
 800da16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d132      	bne.n	800da88 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <HAL_UART_Receive_IT+0x24>
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	e02b      	b.n	800da8a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da42:	2b00      	cmp	r3, #0
 800da44:	d018      	beq.n	800da78 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	e853 3f00 	ldrex	r3, [r3]
 800da52:	613b      	str	r3, [r7, #16]
   return(result);
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da5a:	627b      	str	r3, [r7, #36]	; 0x24
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da64:	623b      	str	r3, [r7, #32]
 800da66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da68:	69f9      	ldr	r1, [r7, #28]
 800da6a:	6a3a      	ldr	r2, [r7, #32]
 800da6c:	e841 2300 	strex	r3, r2, [r1]
 800da70:	61bb      	str	r3, [r7, #24]
   return(result);
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e6      	bne.n	800da46 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800da78:	88fb      	ldrh	r3, [r7, #6]
 800da7a:	461a      	mov	r2, r3
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 ff42 	bl	800e908 <UART_Start_Receive_IT>
 800da84:	4603      	mov	r3, r0
 800da86:	e000      	b.n	800da8a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800da88:	2302      	movs	r3, #2
  }
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3728      	adds	r7, #40	; 0x28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b08a      	sub	sp, #40	; 0x28
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	4613      	mov	r3, r2
 800da9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	d132      	bne.n	800db10 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <HAL_UART_Receive_DMA+0x24>
 800dab0:	88fb      	ldrh	r3, [r7, #6]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e02b      	b.n	800db12 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d018      	beq.n	800db00 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	e853 3f00 	ldrex	r3, [r3]
 800dada:	613b      	str	r3, [r7, #16]
   return(result);
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dae2:	627b      	str	r3, [r7, #36]	; 0x24
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	623b      	str	r3, [r7, #32]
 800daee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	69f9      	ldr	r1, [r7, #28]
 800daf2:	6a3a      	ldr	r2, [r7, #32]
 800daf4:	e841 2300 	strex	r3, r2, [r1]
 800daf8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e6      	bne.n	800dace <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	461a      	mov	r2, r3
 800db04:	68b9      	ldr	r1, [r7, #8]
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f000 ffc4 	bl	800ea94 <UART_Start_Receive_DMA>
 800db0c:	4603      	mov	r3, r0
 800db0e:	e000      	b.n	800db12 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800db10:	2302      	movs	r3, #2
  }
}
 800db12:	4618      	mov	r0, r3
 800db14:	3728      	adds	r7, #40	; 0x28
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b0ba      	sub	sp, #232	; 0xe8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800db42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800db46:	f640 030f 	movw	r3, #2063	; 0x80f
 800db4a:	4013      	ands	r3, r2
 800db4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800db50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db54:	2b00      	cmp	r3, #0
 800db56:	d115      	bne.n	800db84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800db58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db5c:	f003 0320 	and.w	r3, r3, #32
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00f      	beq.n	800db84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800db64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db68:	f003 0320 	and.w	r3, r3, #32
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d009      	beq.n	800db84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 8297 	beq.w	800e0a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	4798      	blx	r3
      }
      return;
 800db82:	e291      	b.n	800e0a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800db84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 8117 	beq.w	800ddbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800db8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800db9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800db9e:	4b85      	ldr	r3, [pc, #532]	; (800ddb4 <HAL_UART_IRQHandler+0x298>)
 800dba0:	4013      	ands	r3, r2
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 810a 	beq.w	800ddbc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d011      	beq.n	800dbd8 <HAL_UART_IRQHandler+0xbc>
 800dbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00b      	beq.n	800dbd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbce:	f043 0201 	orr.w	r2, r3, #1
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d011      	beq.n	800dc08 <HAL_UART_IRQHandler+0xec>
 800dbe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbe8:	f003 0301 	and.w	r3, r3, #1
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00b      	beq.n	800dc08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbfe:	f043 0204 	orr.w	r2, r3, #4
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc0c:	f003 0304 	and.w	r3, r3, #4
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d011      	beq.n	800dc38 <HAL_UART_IRQHandler+0x11c>
 800dc14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00b      	beq.n	800dc38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2204      	movs	r2, #4
 800dc26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc2e:	f043 0202 	orr.w	r2, r3, #2
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d017      	beq.n	800dc74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc48:	f003 0320 	and.w	r3, r3, #32
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d105      	bne.n	800dc5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dc50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00b      	beq.n	800dc74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2208      	movs	r2, #8
 800dc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc6a:	f043 0208 	orr.w	r2, r3, #8
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d012      	beq.n	800dca6 <HAL_UART_IRQHandler+0x18a>
 800dc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00c      	beq.n	800dca6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc9c:	f043 0220 	orr.w	r2, r3, #32
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 81fd 	beq.w	800e0ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00d      	beq.n	800dcda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dcbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcc2:	f003 0320 	and.w	r3, r3, #32
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d007      	beq.n	800dcda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcee:	2b40      	cmp	r3, #64	; 0x40
 800dcf0:	d005      	beq.n	800dcfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dcf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dcf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d04f      	beq.n	800dd9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 ff8e 	bl	800ec20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d141      	bne.n	800dd96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	3308      	adds	r3, #8
 800dd18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd20:	e853 3f00 	ldrex	r3, [r3]
 800dd24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dd28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dd3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dd42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dd4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dd4e:	e841 2300 	strex	r3, r2, [r1]
 800dd52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dd56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1d9      	bne.n	800dd12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d013      	beq.n	800dd8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd6a:	4a13      	ldr	r2, [pc, #76]	; (800ddb8 <HAL_UART_IRQHandler+0x29c>)
 800dd6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fa fdae 	bl	80088d4 <HAL_DMA_Abort_IT>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d017      	beq.n	800ddae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dd88:	4610      	mov	r0, r2
 800dd8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd8c:	e00f      	b.n	800ddae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7f5 fb7c 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd94:	e00b      	b.n	800ddae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7f5 fb78 	bl	800348c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd9c:	e007      	b.n	800ddae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7f5 fb74 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ddac:	e17e      	b.n	800e0ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddae:	bf00      	nop
    return;
 800ddb0:	e17c      	b.n	800e0ac <HAL_UART_IRQHandler+0x590>
 800ddb2:	bf00      	nop
 800ddb4:	04000120 	.word	0x04000120
 800ddb8:	0800eecd 	.word	0x0800eecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	f040 814c 	bne.w	800e05e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ddc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddca:	f003 0310 	and.w	r3, r3, #16
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8145 	beq.w	800e05e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ddd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddd8:	f003 0310 	and.w	r3, r3, #16
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 813e 	beq.w	800e05e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2210      	movs	r2, #16
 800dde8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf4:	2b40      	cmp	r3, #64	; 0x40
 800ddf6:	f040 80b6 	bne.w	800df66 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 8150 	beq.w	800e0b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de1a:	429a      	cmp	r2, r3
 800de1c:	f080 8148 	bcs.w	800e0b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de2e:	69db      	ldr	r3, [r3, #28]
 800de30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de34:	f000 8086 	beq.w	800df44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de44:	e853 3f00 	ldrex	r3, [r3]
 800de48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800de4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800de6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de72:	e841 2300 	strex	r3, r2, [r1]
 800de76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800de7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1da      	bne.n	800de38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3308      	adds	r3, #8
 800de88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de8c:	e853 3f00 	ldrex	r3, [r3]
 800de90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800de92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de94:	f023 0301 	bic.w	r3, r3, #1
 800de98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3308      	adds	r3, #8
 800dea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dea6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800deaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800deae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800deb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e1      	bne.n	800de82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3308      	adds	r3, #8
 800dec4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dec8:	e853 3f00 	ldrex	r3, [r3]
 800decc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ded0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ded4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3308      	adds	r3, #8
 800dede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800deea:	e841 2300 	strex	r3, r2, [r1]
 800deee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800def0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1e3      	bne.n	800debe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2220      	movs	r2, #32
 800defa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0c:	e853 3f00 	ldrex	r3, [r3]
 800df10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df14:	f023 0310 	bic.w	r3, r3, #16
 800df18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	461a      	mov	r2, r3
 800df22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df26:	65bb      	str	r3, [r7, #88]	; 0x58
 800df28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e4      	bne.n	800df04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fa fc58 	bl	80087f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2202      	movs	r2, #2
 800df48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df56:	b29b      	uxth	r3, r3
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	4619      	mov	r1, r3
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f8c2 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df64:	e0a4      	b.n	800e0b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df72:	b29b      	uxth	r3, r3
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800df80:	b29b      	uxth	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	f000 8096 	beq.w	800e0b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800df88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f000 8091 	beq.w	800e0b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	e853 3f00 	ldrex	r3, [r3]
 800df9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dfb4:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfbc:	e841 2300 	strex	r3, r2, [r1]
 800dfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1e4      	bne.n	800df92 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	e853 3f00 	ldrex	r3, [r3]
 800dfd6:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	f023 0301 	bic.w	r3, r3, #1
 800dfde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dfec:	633a      	str	r2, [r7, #48]	; 0x30
 800dfee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff4:	e841 2300 	strex	r3, r2, [r1]
 800dff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1e3      	bne.n	800dfc8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2220      	movs	r2, #32
 800e004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	e853 3f00 	ldrex	r3, [r3]
 800e020:	60fb      	str	r3, [r7, #12]
   return(result);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f023 0310 	bic.w	r3, r3, #16
 800e028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	69b9      	ldr	r1, [r7, #24]
 800e03c:	69fa      	ldr	r2, [r7, #28]
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	617b      	str	r3, [r7, #20]
   return(result);
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e4      	bne.n	800e014 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2202      	movs	r2, #2
 800e04e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e054:	4619      	mov	r1, r3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f846 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e05c:	e02a      	b.n	800e0b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00e      	beq.n	800e088 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e072:	2b00      	cmp	r3, #0
 800e074:	d008      	beq.n	800e088 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d01c      	beq.n	800e0b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	4798      	blx	r3
    }
    return;
 800e086:	e017      	b.n	800e0b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e090:	2b00      	cmp	r3, #0
 800e092:	d012      	beq.n	800e0ba <HAL_UART_IRQHandler+0x59e>
 800e094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00c      	beq.n	800e0ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 ff29 	bl	800eef8 <UART_EndTransmit_IT>
    return;
 800e0a6:	e008      	b.n	800e0ba <HAL_UART_IRQHandler+0x59e>
      return;
 800e0a8:	bf00      	nop
 800e0aa:	e006      	b.n	800e0ba <HAL_UART_IRQHandler+0x59e>
    return;
 800e0ac:	bf00      	nop
 800e0ae:	e004      	b.n	800e0ba <HAL_UART_IRQHandler+0x59e>
      return;
 800e0b0:	bf00      	nop
 800e0b2:	e002      	b.n	800e0ba <HAL_UART_IRQHandler+0x59e>
      return;
 800e0b4:	bf00      	nop
 800e0b6:	e000      	b.n	800e0ba <HAL_UART_IRQHandler+0x59e>
    return;
 800e0b8:	bf00      	nop
  }

}
 800e0ba:	37e8      	adds	r7, #232	; 0xe8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	431a      	orrs	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	431a      	orrs	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	4313      	orrs	r3, r2
 800e122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	4ba6      	ldr	r3, [pc, #664]	; (800e3c4 <UART_SetConfig+0x2c4>)
 800e12c:	4013      	ands	r3, r2
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	6812      	ldr	r2, [r2, #0]
 800e132:	6979      	ldr	r1, [r7, #20]
 800e134:	430b      	orrs	r3, r1
 800e136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	430a      	orrs	r2, r1
 800e14c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	430a      	orrs	r2, r1
 800e170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a94      	ldr	r2, [pc, #592]	; (800e3c8 <UART_SetConfig+0x2c8>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d120      	bne.n	800e1be <UART_SetConfig+0xbe>
 800e17c:	4b93      	ldr	r3, [pc, #588]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	2b03      	cmp	r3, #3
 800e188:	d816      	bhi.n	800e1b8 <UART_SetConfig+0xb8>
 800e18a:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <UART_SetConfig+0x90>)
 800e18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e190:	0800e1a1 	.word	0x0800e1a1
 800e194:	0800e1ad 	.word	0x0800e1ad
 800e198:	0800e1a7 	.word	0x0800e1a7
 800e19c:	0800e1b3 	.word	0x0800e1b3
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	77fb      	strb	r3, [r7, #31]
 800e1a4:	e150      	b.n	800e448 <UART_SetConfig+0x348>
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	77fb      	strb	r3, [r7, #31]
 800e1aa:	e14d      	b.n	800e448 <UART_SetConfig+0x348>
 800e1ac:	2304      	movs	r3, #4
 800e1ae:	77fb      	strb	r3, [r7, #31]
 800e1b0:	e14a      	b.n	800e448 <UART_SetConfig+0x348>
 800e1b2:	2308      	movs	r3, #8
 800e1b4:	77fb      	strb	r3, [r7, #31]
 800e1b6:	e147      	b.n	800e448 <UART_SetConfig+0x348>
 800e1b8:	2310      	movs	r3, #16
 800e1ba:	77fb      	strb	r3, [r7, #31]
 800e1bc:	e144      	b.n	800e448 <UART_SetConfig+0x348>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a83      	ldr	r2, [pc, #524]	; (800e3d0 <UART_SetConfig+0x2d0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d132      	bne.n	800e22e <UART_SetConfig+0x12e>
 800e1c8:	4b80      	ldr	r3, [pc, #512]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ce:	f003 030c 	and.w	r3, r3, #12
 800e1d2:	2b0c      	cmp	r3, #12
 800e1d4:	d828      	bhi.n	800e228 <UART_SetConfig+0x128>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <UART_SetConfig+0xdc>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e211 	.word	0x0800e211
 800e1e0:	0800e229 	.word	0x0800e229
 800e1e4:	0800e229 	.word	0x0800e229
 800e1e8:	0800e229 	.word	0x0800e229
 800e1ec:	0800e21d 	.word	0x0800e21d
 800e1f0:	0800e229 	.word	0x0800e229
 800e1f4:	0800e229 	.word	0x0800e229
 800e1f8:	0800e229 	.word	0x0800e229
 800e1fc:	0800e217 	.word	0x0800e217
 800e200:	0800e229 	.word	0x0800e229
 800e204:	0800e229 	.word	0x0800e229
 800e208:	0800e229 	.word	0x0800e229
 800e20c:	0800e223 	.word	0x0800e223
 800e210:	2300      	movs	r3, #0
 800e212:	77fb      	strb	r3, [r7, #31]
 800e214:	e118      	b.n	800e448 <UART_SetConfig+0x348>
 800e216:	2302      	movs	r3, #2
 800e218:	77fb      	strb	r3, [r7, #31]
 800e21a:	e115      	b.n	800e448 <UART_SetConfig+0x348>
 800e21c:	2304      	movs	r3, #4
 800e21e:	77fb      	strb	r3, [r7, #31]
 800e220:	e112      	b.n	800e448 <UART_SetConfig+0x348>
 800e222:	2308      	movs	r3, #8
 800e224:	77fb      	strb	r3, [r7, #31]
 800e226:	e10f      	b.n	800e448 <UART_SetConfig+0x348>
 800e228:	2310      	movs	r3, #16
 800e22a:	77fb      	strb	r3, [r7, #31]
 800e22c:	e10c      	b.n	800e448 <UART_SetConfig+0x348>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a68      	ldr	r2, [pc, #416]	; (800e3d4 <UART_SetConfig+0x2d4>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d120      	bne.n	800e27a <UART_SetConfig+0x17a>
 800e238:	4b64      	ldr	r3, [pc, #400]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e23e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e242:	2b30      	cmp	r3, #48	; 0x30
 800e244:	d013      	beq.n	800e26e <UART_SetConfig+0x16e>
 800e246:	2b30      	cmp	r3, #48	; 0x30
 800e248:	d814      	bhi.n	800e274 <UART_SetConfig+0x174>
 800e24a:	2b20      	cmp	r3, #32
 800e24c:	d009      	beq.n	800e262 <UART_SetConfig+0x162>
 800e24e:	2b20      	cmp	r3, #32
 800e250:	d810      	bhi.n	800e274 <UART_SetConfig+0x174>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <UART_SetConfig+0x15c>
 800e256:	2b10      	cmp	r3, #16
 800e258:	d006      	beq.n	800e268 <UART_SetConfig+0x168>
 800e25a:	e00b      	b.n	800e274 <UART_SetConfig+0x174>
 800e25c:	2300      	movs	r3, #0
 800e25e:	77fb      	strb	r3, [r7, #31]
 800e260:	e0f2      	b.n	800e448 <UART_SetConfig+0x348>
 800e262:	2302      	movs	r3, #2
 800e264:	77fb      	strb	r3, [r7, #31]
 800e266:	e0ef      	b.n	800e448 <UART_SetConfig+0x348>
 800e268:	2304      	movs	r3, #4
 800e26a:	77fb      	strb	r3, [r7, #31]
 800e26c:	e0ec      	b.n	800e448 <UART_SetConfig+0x348>
 800e26e:	2308      	movs	r3, #8
 800e270:	77fb      	strb	r3, [r7, #31]
 800e272:	e0e9      	b.n	800e448 <UART_SetConfig+0x348>
 800e274:	2310      	movs	r3, #16
 800e276:	77fb      	strb	r3, [r7, #31]
 800e278:	e0e6      	b.n	800e448 <UART_SetConfig+0x348>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a56      	ldr	r2, [pc, #344]	; (800e3d8 <UART_SetConfig+0x2d8>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d120      	bne.n	800e2c6 <UART_SetConfig+0x1c6>
 800e284:	4b51      	ldr	r3, [pc, #324]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e28a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e28e:	2bc0      	cmp	r3, #192	; 0xc0
 800e290:	d013      	beq.n	800e2ba <UART_SetConfig+0x1ba>
 800e292:	2bc0      	cmp	r3, #192	; 0xc0
 800e294:	d814      	bhi.n	800e2c0 <UART_SetConfig+0x1c0>
 800e296:	2b80      	cmp	r3, #128	; 0x80
 800e298:	d009      	beq.n	800e2ae <UART_SetConfig+0x1ae>
 800e29a:	2b80      	cmp	r3, #128	; 0x80
 800e29c:	d810      	bhi.n	800e2c0 <UART_SetConfig+0x1c0>
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <UART_SetConfig+0x1a8>
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d006      	beq.n	800e2b4 <UART_SetConfig+0x1b4>
 800e2a6:	e00b      	b.n	800e2c0 <UART_SetConfig+0x1c0>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	77fb      	strb	r3, [r7, #31]
 800e2ac:	e0cc      	b.n	800e448 <UART_SetConfig+0x348>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	77fb      	strb	r3, [r7, #31]
 800e2b2:	e0c9      	b.n	800e448 <UART_SetConfig+0x348>
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	77fb      	strb	r3, [r7, #31]
 800e2b8:	e0c6      	b.n	800e448 <UART_SetConfig+0x348>
 800e2ba:	2308      	movs	r3, #8
 800e2bc:	77fb      	strb	r3, [r7, #31]
 800e2be:	e0c3      	b.n	800e448 <UART_SetConfig+0x348>
 800e2c0:	2310      	movs	r3, #16
 800e2c2:	77fb      	strb	r3, [r7, #31]
 800e2c4:	e0c0      	b.n	800e448 <UART_SetConfig+0x348>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a44      	ldr	r2, [pc, #272]	; (800e3dc <UART_SetConfig+0x2dc>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d125      	bne.n	800e31c <UART_SetConfig+0x21c>
 800e2d0:	4b3e      	ldr	r3, [pc, #248]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2de:	d017      	beq.n	800e310 <UART_SetConfig+0x210>
 800e2e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e4:	d817      	bhi.n	800e316 <UART_SetConfig+0x216>
 800e2e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ea:	d00b      	beq.n	800e304 <UART_SetConfig+0x204>
 800e2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f0:	d811      	bhi.n	800e316 <UART_SetConfig+0x216>
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d003      	beq.n	800e2fe <UART_SetConfig+0x1fe>
 800e2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2fa:	d006      	beq.n	800e30a <UART_SetConfig+0x20a>
 800e2fc:	e00b      	b.n	800e316 <UART_SetConfig+0x216>
 800e2fe:	2300      	movs	r3, #0
 800e300:	77fb      	strb	r3, [r7, #31]
 800e302:	e0a1      	b.n	800e448 <UART_SetConfig+0x348>
 800e304:	2302      	movs	r3, #2
 800e306:	77fb      	strb	r3, [r7, #31]
 800e308:	e09e      	b.n	800e448 <UART_SetConfig+0x348>
 800e30a:	2304      	movs	r3, #4
 800e30c:	77fb      	strb	r3, [r7, #31]
 800e30e:	e09b      	b.n	800e448 <UART_SetConfig+0x348>
 800e310:	2308      	movs	r3, #8
 800e312:	77fb      	strb	r3, [r7, #31]
 800e314:	e098      	b.n	800e448 <UART_SetConfig+0x348>
 800e316:	2310      	movs	r3, #16
 800e318:	77fb      	strb	r3, [r7, #31]
 800e31a:	e095      	b.n	800e448 <UART_SetConfig+0x348>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a2f      	ldr	r2, [pc, #188]	; (800e3e0 <UART_SetConfig+0x2e0>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d125      	bne.n	800e372 <UART_SetConfig+0x272>
 800e326:	4b29      	ldr	r3, [pc, #164]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e334:	d017      	beq.n	800e366 <UART_SetConfig+0x266>
 800e336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e33a:	d817      	bhi.n	800e36c <UART_SetConfig+0x26c>
 800e33c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e340:	d00b      	beq.n	800e35a <UART_SetConfig+0x25a>
 800e342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e346:	d811      	bhi.n	800e36c <UART_SetConfig+0x26c>
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d003      	beq.n	800e354 <UART_SetConfig+0x254>
 800e34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e350:	d006      	beq.n	800e360 <UART_SetConfig+0x260>
 800e352:	e00b      	b.n	800e36c <UART_SetConfig+0x26c>
 800e354:	2301      	movs	r3, #1
 800e356:	77fb      	strb	r3, [r7, #31]
 800e358:	e076      	b.n	800e448 <UART_SetConfig+0x348>
 800e35a:	2302      	movs	r3, #2
 800e35c:	77fb      	strb	r3, [r7, #31]
 800e35e:	e073      	b.n	800e448 <UART_SetConfig+0x348>
 800e360:	2304      	movs	r3, #4
 800e362:	77fb      	strb	r3, [r7, #31]
 800e364:	e070      	b.n	800e448 <UART_SetConfig+0x348>
 800e366:	2308      	movs	r3, #8
 800e368:	77fb      	strb	r3, [r7, #31]
 800e36a:	e06d      	b.n	800e448 <UART_SetConfig+0x348>
 800e36c:	2310      	movs	r3, #16
 800e36e:	77fb      	strb	r3, [r7, #31]
 800e370:	e06a      	b.n	800e448 <UART_SetConfig+0x348>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a1b      	ldr	r2, [pc, #108]	; (800e3e4 <UART_SetConfig+0x2e4>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d138      	bne.n	800e3ee <UART_SetConfig+0x2ee>
 800e37c:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <UART_SetConfig+0x2cc>)
 800e37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e382:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e38a:	d017      	beq.n	800e3bc <UART_SetConfig+0x2bc>
 800e38c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e390:	d82a      	bhi.n	800e3e8 <UART_SetConfig+0x2e8>
 800e392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e396:	d00b      	beq.n	800e3b0 <UART_SetConfig+0x2b0>
 800e398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e39c:	d824      	bhi.n	800e3e8 <UART_SetConfig+0x2e8>
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <UART_SetConfig+0x2aa>
 800e3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a6:	d006      	beq.n	800e3b6 <UART_SetConfig+0x2b6>
 800e3a8:	e01e      	b.n	800e3e8 <UART_SetConfig+0x2e8>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	77fb      	strb	r3, [r7, #31]
 800e3ae:	e04b      	b.n	800e448 <UART_SetConfig+0x348>
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	77fb      	strb	r3, [r7, #31]
 800e3b4:	e048      	b.n	800e448 <UART_SetConfig+0x348>
 800e3b6:	2304      	movs	r3, #4
 800e3b8:	77fb      	strb	r3, [r7, #31]
 800e3ba:	e045      	b.n	800e448 <UART_SetConfig+0x348>
 800e3bc:	2308      	movs	r3, #8
 800e3be:	77fb      	strb	r3, [r7, #31]
 800e3c0:	e042      	b.n	800e448 <UART_SetConfig+0x348>
 800e3c2:	bf00      	nop
 800e3c4:	efff69f3 	.word	0xefff69f3
 800e3c8:	40011000 	.word	0x40011000
 800e3cc:	40023800 	.word	0x40023800
 800e3d0:	40004400 	.word	0x40004400
 800e3d4:	40004800 	.word	0x40004800
 800e3d8:	40004c00 	.word	0x40004c00
 800e3dc:	40005000 	.word	0x40005000
 800e3e0:	40011400 	.word	0x40011400
 800e3e4:	40007800 	.word	0x40007800
 800e3e8:	2310      	movs	r3, #16
 800e3ea:	77fb      	strb	r3, [r7, #31]
 800e3ec:	e02c      	b.n	800e448 <UART_SetConfig+0x348>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a72      	ldr	r2, [pc, #456]	; (800e5bc <UART_SetConfig+0x4bc>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d125      	bne.n	800e444 <UART_SetConfig+0x344>
 800e3f8:	4b71      	ldr	r3, [pc, #452]	; (800e5c0 <UART_SetConfig+0x4c0>)
 800e3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e402:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e406:	d017      	beq.n	800e438 <UART_SetConfig+0x338>
 800e408:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e40c:	d817      	bhi.n	800e43e <UART_SetConfig+0x33e>
 800e40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e412:	d00b      	beq.n	800e42c <UART_SetConfig+0x32c>
 800e414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e418:	d811      	bhi.n	800e43e <UART_SetConfig+0x33e>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <UART_SetConfig+0x326>
 800e41e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e422:	d006      	beq.n	800e432 <UART_SetConfig+0x332>
 800e424:	e00b      	b.n	800e43e <UART_SetConfig+0x33e>
 800e426:	2300      	movs	r3, #0
 800e428:	77fb      	strb	r3, [r7, #31]
 800e42a:	e00d      	b.n	800e448 <UART_SetConfig+0x348>
 800e42c:	2302      	movs	r3, #2
 800e42e:	77fb      	strb	r3, [r7, #31]
 800e430:	e00a      	b.n	800e448 <UART_SetConfig+0x348>
 800e432:	2304      	movs	r3, #4
 800e434:	77fb      	strb	r3, [r7, #31]
 800e436:	e007      	b.n	800e448 <UART_SetConfig+0x348>
 800e438:	2308      	movs	r3, #8
 800e43a:	77fb      	strb	r3, [r7, #31]
 800e43c:	e004      	b.n	800e448 <UART_SetConfig+0x348>
 800e43e:	2310      	movs	r3, #16
 800e440:	77fb      	strb	r3, [r7, #31]
 800e442:	e001      	b.n	800e448 <UART_SetConfig+0x348>
 800e444:	2310      	movs	r3, #16
 800e446:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	69db      	ldr	r3, [r3, #28]
 800e44c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e450:	d15b      	bne.n	800e50a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e452:	7ffb      	ldrb	r3, [r7, #31]
 800e454:	2b08      	cmp	r3, #8
 800e456:	d828      	bhi.n	800e4aa <UART_SetConfig+0x3aa>
 800e458:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <UART_SetConfig+0x360>)
 800e45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45e:	bf00      	nop
 800e460:	0800e485 	.word	0x0800e485
 800e464:	0800e48d 	.word	0x0800e48d
 800e468:	0800e495 	.word	0x0800e495
 800e46c:	0800e4ab 	.word	0x0800e4ab
 800e470:	0800e49b 	.word	0x0800e49b
 800e474:	0800e4ab 	.word	0x0800e4ab
 800e478:	0800e4ab 	.word	0x0800e4ab
 800e47c:	0800e4ab 	.word	0x0800e4ab
 800e480:	0800e4a3 	.word	0x0800e4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e484:	f7fc f90a 	bl	800a69c <HAL_RCC_GetPCLK1Freq>
 800e488:	61b8      	str	r0, [r7, #24]
        break;
 800e48a:	e013      	b.n	800e4b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e48c:	f7fc f91a 	bl	800a6c4 <HAL_RCC_GetPCLK2Freq>
 800e490:	61b8      	str	r0, [r7, #24]
        break;
 800e492:	e00f      	b.n	800e4b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e494:	4b4b      	ldr	r3, [pc, #300]	; (800e5c4 <UART_SetConfig+0x4c4>)
 800e496:	61bb      	str	r3, [r7, #24]
        break;
 800e498:	e00c      	b.n	800e4b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e49a:	f7fc f82d 	bl	800a4f8 <HAL_RCC_GetSysClockFreq>
 800e49e:	61b8      	str	r0, [r7, #24]
        break;
 800e4a0:	e008      	b.n	800e4b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4a6:	61bb      	str	r3, [r7, #24]
        break;
 800e4a8:	e004      	b.n	800e4b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	77bb      	strb	r3, [r7, #30]
        break;
 800e4b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d074      	beq.n	800e5a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	005a      	lsls	r2, r3, #1
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	085b      	lsrs	r3, r3, #1
 800e4c4:	441a      	add	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	2b0f      	cmp	r3, #15
 800e4d4:	d916      	bls.n	800e504 <UART_SetConfig+0x404>
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4dc:	d212      	bcs.n	800e504 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	f023 030f 	bic.w	r3, r3, #15
 800e4e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	085b      	lsrs	r3, r3, #1
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	f003 0307 	and.w	r3, r3, #7
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	89fa      	ldrh	r2, [r7, #14]
 800e500:	60da      	str	r2, [r3, #12]
 800e502:	e04f      	b.n	800e5a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	77bb      	strb	r3, [r7, #30]
 800e508:	e04c      	b.n	800e5a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e50a:	7ffb      	ldrb	r3, [r7, #31]
 800e50c:	2b08      	cmp	r3, #8
 800e50e:	d828      	bhi.n	800e562 <UART_SetConfig+0x462>
 800e510:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <UART_SetConfig+0x418>)
 800e512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e516:	bf00      	nop
 800e518:	0800e53d 	.word	0x0800e53d
 800e51c:	0800e545 	.word	0x0800e545
 800e520:	0800e54d 	.word	0x0800e54d
 800e524:	0800e563 	.word	0x0800e563
 800e528:	0800e553 	.word	0x0800e553
 800e52c:	0800e563 	.word	0x0800e563
 800e530:	0800e563 	.word	0x0800e563
 800e534:	0800e563 	.word	0x0800e563
 800e538:	0800e55b 	.word	0x0800e55b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e53c:	f7fc f8ae 	bl	800a69c <HAL_RCC_GetPCLK1Freq>
 800e540:	61b8      	str	r0, [r7, #24]
        break;
 800e542:	e013      	b.n	800e56c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e544:	f7fc f8be 	bl	800a6c4 <HAL_RCC_GetPCLK2Freq>
 800e548:	61b8      	str	r0, [r7, #24]
        break;
 800e54a:	e00f      	b.n	800e56c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e54c:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <UART_SetConfig+0x4c4>)
 800e54e:	61bb      	str	r3, [r7, #24]
        break;
 800e550:	e00c      	b.n	800e56c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e552:	f7fb ffd1 	bl	800a4f8 <HAL_RCC_GetSysClockFreq>
 800e556:	61b8      	str	r0, [r7, #24]
        break;
 800e558:	e008      	b.n	800e56c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e55e:	61bb      	str	r3, [r7, #24]
        break;
 800e560:	e004      	b.n	800e56c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e562:	2300      	movs	r3, #0
 800e564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e566:	2301      	movs	r3, #1
 800e568:	77bb      	strb	r3, [r7, #30]
        break;
 800e56a:	bf00      	nop
    }

    if (pclk != 0U)
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d018      	beq.n	800e5a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	085a      	lsrs	r2, r3, #1
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	441a      	add	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	fbb2 f3f3 	udiv	r3, r2, r3
 800e584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b0f      	cmp	r3, #15
 800e58a:	d909      	bls.n	800e5a0 <UART_SetConfig+0x4a0>
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e592:	d205      	bcs.n	800e5a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	b29a      	uxth	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60da      	str	r2, [r3, #12]
 800e59e:	e001      	b.n	800e5a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e5b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3720      	adds	r7, #32
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	40007c00 	.word	0x40007c00
 800e5c0:	40023800 	.word	0x40023800
 800e5c4:	00f42400 	.word	0x00f42400

0800e5c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00a      	beq.n	800e5f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f6:	f003 0302 	and.w	r3, r3, #2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00a      	beq.n	800e614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	430a      	orrs	r2, r1
 800e612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	f003 0304 	and.w	r3, r3, #4
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00a      	beq.n	800e636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	430a      	orrs	r2, r1
 800e634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63a:	f003 0308 	and.w	r3, r3, #8
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00a      	beq.n	800e658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	430a      	orrs	r2, r1
 800e656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	f003 0310 	and.w	r3, r3, #16
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00a      	beq.n	800e67a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	689b      	ldr	r3, [r3, #8]
 800e66a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	430a      	orrs	r2, r1
 800e678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	f003 0320 	and.w	r3, r3, #32
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00a      	beq.n	800e69c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	430a      	orrs	r2, r1
 800e69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01a      	beq.n	800e6de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	430a      	orrs	r2, r1
 800e6bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6c6:	d10a      	bne.n	800e6de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	430a      	orrs	r2, r1
 800e6fe:	605a      	str	r2, [r3, #4]
  }
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af02      	add	r7, sp, #8
 800e712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2200      	movs	r2, #0
 800e718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e71c:	f7f9 fe4a 	bl	80083b4 <HAL_GetTick>
 800e720:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f003 0308 	and.w	r3, r3, #8
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d10e      	bne.n	800e74e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f81b 	bl	800e77a <UART_WaitOnFlagUntilTimeout>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e011      	b.n	800e772 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2220      	movs	r2, #32
 800e752:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2220      	movs	r2, #32
 800e758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b09c      	sub	sp, #112	; 0x70
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	603b      	str	r3, [r7, #0]
 800e786:	4613      	mov	r3, r2
 800e788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e78a:	e0a7      	b.n	800e8dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e78c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e792:	f000 80a3 	beq.w	800e8dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e796:	f7f9 fe0d 	bl	80083b4 <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d302      	bcc.n	800e7ac <UART_WaitOnFlagUntilTimeout+0x32>
 800e7a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d13f      	bne.n	800e82c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e7c0:	667b      	str	r3, [r7, #100]	; 0x64
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7d2:	e841 2300 	strex	r3, r2, [r1]
 800e7d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e7d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1e6      	bne.n	800e7ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e8:	e853 3f00 	ldrex	r3, [r3]
 800e7ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	f023 0301 	bic.w	r3, r3, #1
 800e7f4:	663b      	str	r3, [r7, #96]	; 0x60
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800e800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e806:	e841 2300 	strex	r3, r2, [r1]
 800e80a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1e5      	bne.n	800e7de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2220      	movs	r2, #32
 800e816:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2220      	movs	r2, #32
 800e81c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e828:	2303      	movs	r3, #3
 800e82a:	e068      	b.n	800e8fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f003 0304 	and.w	r3, r3, #4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d050      	beq.n	800e8dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	69db      	ldr	r3, [r3, #28]
 800e840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e848:	d148      	bne.n	800e8dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e852:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	e853 3f00 	ldrex	r3, [r3]
 800e860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	461a      	mov	r2, r3
 800e870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e872:	637b      	str	r3, [r7, #52]	; 0x34
 800e874:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e87a:	e841 2300 	strex	r3, r2, [r1]
 800e87e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1e6      	bne.n	800e854 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3308      	adds	r3, #8
 800e88c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	e853 3f00 	ldrex	r3, [r3]
 800e894:	613b      	str	r3, [r7, #16]
   return(result);
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	f023 0301 	bic.w	r3, r3, #1
 800e89c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8a6:	623a      	str	r2, [r7, #32]
 800e8a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8aa:	69f9      	ldr	r1, [r7, #28]
 800e8ac:	6a3a      	ldr	r2, [r7, #32]
 800e8ae:	e841 2300 	strex	r3, r2, [r1]
 800e8b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1e5      	bne.n	800e886 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2220      	movs	r2, #32
 800e8be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2220      	movs	r2, #32
 800e8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e8d8:	2303      	movs	r3, #3
 800e8da:	e010      	b.n	800e8fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	69da      	ldr	r2, [r3, #28]
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	bf0c      	ite	eq
 800e8ec:	2301      	moveq	r3, #1
 800e8ee:	2300      	movne	r3, #0
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	f43f af48 	beq.w	800e78c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3770      	adds	r7, #112	; 0x70
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
	...

0800e908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e908:	b480      	push	{r7}
 800e90a:	b097      	sub	sp, #92	; 0x5c
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	4613      	mov	r3, r2
 800e914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	88fa      	ldrh	r2, [r7, #6]
 800e920:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	88fa      	ldrh	r2, [r7, #6]
 800e928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e93a:	d10e      	bne.n	800e95a <UART_Start_Receive_IT+0x52>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d105      	bne.n	800e950 <UART_Start_Receive_IT+0x48>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e94a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e94e:	e02d      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	22ff      	movs	r2, #255	; 0xff
 800e954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e958:	e028      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10d      	bne.n	800e97e <UART_Start_Receive_IT+0x76>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d104      	bne.n	800e974 <UART_Start_Receive_IT+0x6c>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	22ff      	movs	r2, #255	; 0xff
 800e96e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e972:	e01b      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	227f      	movs	r2, #127	; 0x7f
 800e978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e97c:	e016      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e986:	d10d      	bne.n	800e9a4 <UART_Start_Receive_IT+0x9c>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d104      	bne.n	800e99a <UART_Start_Receive_IT+0x92>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	227f      	movs	r2, #127	; 0x7f
 800e994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e998:	e008      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	223f      	movs	r2, #63	; 0x3f
 800e99e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e9a2:	e003      	b.n	800e9ac <UART_Start_Receive_IT+0xa4>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2222      	movs	r2, #34	; 0x22
 800e9b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c6:	e853 3f00 	ldrex	r3, [r3]
 800e9ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	f043 0301 	orr.w	r3, r3, #1
 800e9d2:	657b      	str	r3, [r7, #84]	; 0x54
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3308      	adds	r3, #8
 800e9da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9dc:	64ba      	str	r2, [r7, #72]	; 0x48
 800e9de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9e4:	e841 2300 	strex	r3, r2, [r1]
 800e9e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1e5      	bne.n	800e9bc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9f8:	d107      	bne.n	800ea0a <UART_Start_Receive_IT+0x102>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d103      	bne.n	800ea0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	4a21      	ldr	r2, [pc, #132]	; (800ea8c <UART_Start_Receive_IT+0x184>)
 800ea06:	669a      	str	r2, [r3, #104]	; 0x68
 800ea08:	e002      	b.n	800ea10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	4a20      	ldr	r2, [pc, #128]	; (800ea90 <UART_Start_Receive_IT+0x188>)
 800ea0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d019      	beq.n	800ea4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	e853 3f00 	ldrex	r3, [r3]
 800ea24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ea2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	461a      	mov	r2, r3
 800ea34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea36:	637b      	str	r3, [r7, #52]	; 0x34
 800ea38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea3e:	e841 2300 	strex	r3, r2, [r1]
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1e6      	bne.n	800ea18 <UART_Start_Receive_IT+0x110>
 800ea4a:	e018      	b.n	800ea7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	e853 3f00 	ldrex	r3, [r3]
 800ea58:	613b      	str	r3, [r7, #16]
   return(result);
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	f043 0320 	orr.w	r3, r3, #32
 800ea60:	653b      	str	r3, [r7, #80]	; 0x50
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea6a:	623b      	str	r3, [r7, #32]
 800ea6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6e:	69f9      	ldr	r1, [r7, #28]
 800ea70:	6a3a      	ldr	r2, [r7, #32]
 800ea72:	e841 2300 	strex	r3, r2, [r1]
 800ea76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1e6      	bne.n	800ea4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	375c      	adds	r7, #92	; 0x5c
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	0800f0b3 	.word	0x0800f0b3
 800ea90:	0800ef4d 	.word	0x0800ef4d

0800ea94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b096      	sub	sp, #88	; 0x58
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	88fa      	ldrh	r2, [r7, #6]
 800eaac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2222      	movs	r2, #34	; 0x22
 800eabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d028      	beq.n	800eb1a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eacc:	4a3e      	ldr	r2, [pc, #248]	; (800ebc8 <UART_Start_Receive_DMA+0x134>)
 800eace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ead4:	4a3d      	ldr	r2, [pc, #244]	; (800ebcc <UART_Start_Receive_DMA+0x138>)
 800ead6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eadc:	4a3c      	ldr	r2, [pc, #240]	; (800ebd0 <UART_Start_Receive_DMA+0x13c>)
 800eade:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae4:	2200      	movs	r2, #0
 800eae6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	3324      	adds	r3, #36	; 0x24
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf8:	461a      	mov	r2, r3
 800eafa:	88fb      	ldrh	r3, [r7, #6]
 800eafc:	f7f9 fe1a 	bl	8008734 <HAL_DMA_Start_IT>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d009      	beq.n	800eb1a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2210      	movs	r2, #16
 800eb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2220      	movs	r2, #32
 800eb12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e051      	b.n	800ebbe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d018      	beq.n	800eb54 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2a:	e853 3f00 	ldrex	r3, [r3]
 800eb2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb36:	657b      	str	r3, [r7, #84]	; 0x54
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb40:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb48:	e841 2300 	strex	r3, r2, [r1]
 800eb4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1e6      	bne.n	800eb22 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	3308      	adds	r3, #8
 800eb5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	f043 0301 	orr.w	r3, r3, #1
 800eb6a:	653b      	str	r3, [r7, #80]	; 0x50
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3308      	adds	r3, #8
 800eb72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb74:	637a      	str	r2, [r7, #52]	; 0x34
 800eb76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e5      	bne.n	800eb54 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	e853 3f00 	ldrex	r3, [r3]
 800eb96:	613b      	str	r3, [r7, #16]
   return(result);
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	3308      	adds	r3, #8
 800eba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eba8:	623a      	str	r2, [r7, #32]
 800ebaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebac:	69f9      	ldr	r1, [r7, #28]
 800ebae:	6a3a      	ldr	r2, [r7, #32]
 800ebb0:	e841 2300 	strex	r3, r2, [r1]
 800ebb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1e5      	bne.n	800eb88 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3758      	adds	r7, #88	; 0x58
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	0800ece9 	.word	0x0800ece9
 800ebcc:	0800ee11 	.word	0x0800ee11
 800ebd0:	0800ee4f 	.word	0x0800ee4f

0800ebd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b089      	sub	sp, #36	; 0x24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	e853 3f00 	ldrex	r3, [r3]
 800ebe8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ebf0:	61fb      	str	r3, [r7, #28]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	61bb      	str	r3, [r7, #24]
 800ebfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfe:	6979      	ldr	r1, [r7, #20]
 800ec00:	69ba      	ldr	r2, [r7, #24]
 800ec02:	e841 2300 	strex	r3, r2, [r1]
 800ec06:	613b      	str	r3, [r7, #16]
   return(result);
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1e6      	bne.n	800ebdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2220      	movs	r2, #32
 800ec12:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ec14:	bf00      	nop
 800ec16:	3724      	adds	r7, #36	; 0x24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b095      	sub	sp, #84	; 0x54
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	e853 3f00 	ldrex	r3, [r3]
 800ec34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec46:	643b      	str	r3, [r7, #64]	; 0x40
 800ec48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec4e:	e841 2300 	strex	r3, r2, [r1]
 800ec52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d1e6      	bne.n	800ec28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	3308      	adds	r3, #8
 800ec60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	e853 3f00 	ldrex	r3, [r3]
 800ec68:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	f023 0301 	bic.w	r3, r3, #1
 800ec70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	3308      	adds	r3, #8
 800ec78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec82:	e841 2300 	strex	r3, r2, [r1]
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e5      	bne.n	800ec5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d118      	bne.n	800ecc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	60bb      	str	r3, [r7, #8]
   return(result);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f023 0310 	bic.w	r3, r3, #16
 800ecaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecb4:	61bb      	str	r3, [r7, #24]
 800ecb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb8:	6979      	ldr	r1, [r7, #20]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	e841 2300 	strex	r3, r2, [r1]
 800ecc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e6      	bne.n	800ec96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ecdc:	bf00      	nop
 800ecde:	3754      	adds	r7, #84	; 0x54
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b09c      	sub	sp, #112	; 0x70
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	69db      	ldr	r3, [r3, #28]
 800ecfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecfe:	d071      	beq.n	800ede4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed02:	2200      	movs	r2, #0
 800ed04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed10:	e853 3f00 	ldrex	r3, [r3]
 800ed14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	461a      	mov	r2, r3
 800ed24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed26:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed2e:	e841 2300 	strex	r3, r2, [r1]
 800ed32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1e6      	bne.n	800ed08 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	3308      	adds	r3, #8
 800ed40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed44:	e853 3f00 	ldrex	r3, [r3]
 800ed48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4c:	f023 0301 	bic.w	r3, r3, #1
 800ed50:	667b      	str	r3, [r7, #100]	; 0x64
 800ed52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	3308      	adds	r3, #8
 800ed58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed5a:	647a      	str	r2, [r7, #68]	; 0x44
 800ed5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed62:	e841 2300 	strex	r3, r2, [r1]
 800ed66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e5      	bne.n	800ed3a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3308      	adds	r3, #8
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	e853 3f00 	ldrex	r3, [r3]
 800ed7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed84:	663b      	str	r3, [r7, #96]	; 0x60
 800ed86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed8e:	633a      	str	r2, [r7, #48]	; 0x30
 800ed90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e5      	bne.n	800ed6e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda4:	2220      	movs	r2, #32
 800eda6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d118      	bne.n	800ede4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	e853 3f00 	ldrex	r3, [r3]
 800edbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f023 0310 	bic.w	r3, r3, #16
 800edc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	461a      	mov	r2, r3
 800edce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd4:	69b9      	ldr	r1, [r7, #24]
 800edd6:	69fa      	ldr	r2, [r7, #28]
 800edd8:	e841 2300 	strex	r3, r2, [r1]
 800eddc:	617b      	str	r3, [r7, #20]
   return(result);
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1e6      	bne.n	800edb2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ede4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede6:	2200      	movs	r2, #0
 800ede8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d107      	bne.n	800ee02 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800edf8:	4619      	mov	r1, r3
 800edfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800edfc:	f7ff f974 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee00:	e002      	b.n	800ee08 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ee02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee04:	f7f4 faa0 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 800ee08:	bf00      	nop
 800ee0a:	3770      	adds	r7, #112	; 0x70
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2201      	movs	r2, #1
 800ee22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d109      	bne.n	800ee40 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ee32:	085b      	lsrs	r3, r3, #1
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f7ff f955 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee3e:	e002      	b.n	800ee46 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f7ff f947 	bl	800e0d4 <HAL_UART_RxHalfCpltCallback>
}
 800ee46:	bf00      	nop
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b086      	sub	sp, #24
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee74:	2b80      	cmp	r3, #128	; 0x80
 800ee76:	d109      	bne.n	800ee8c <UART_DMAError+0x3e>
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b21      	cmp	r3, #33	; 0x21
 800ee7c:	d106      	bne.n	800ee8c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ee86:	6978      	ldr	r0, [r7, #20]
 800ee88:	f7ff fea4 	bl	800ebd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee96:	2b40      	cmp	r3, #64	; 0x40
 800ee98:	d109      	bne.n	800eeae <UART_DMAError+0x60>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2b22      	cmp	r3, #34	; 0x22
 800ee9e:	d106      	bne.n	800eeae <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800eea8:	6978      	ldr	r0, [r7, #20]
 800eeaa:	f7ff feb9 	bl	800ec20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb4:	f043 0210 	orr.w	r2, r3, #16
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eebe:	6978      	ldr	r0, [r7, #20]
 800eec0:	f7f4 fae4 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eec4:	bf00      	nop
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7f4 face 	bl	800348c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eef0:	bf00      	nop
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b088      	sub	sp, #32
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	e853 3f00 	ldrex	r3, [r3]
 800ef0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef14:	61fb      	str	r3, [r7, #28]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	61bb      	str	r3, [r7, #24]
 800ef20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef22:	6979      	ldr	r1, [r7, #20]
 800ef24:	69ba      	ldr	r2, [r7, #24]
 800ef26:	e841 2300 	strex	r3, r2, [r1]
 800ef2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1e6      	bne.n	800ef00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2220      	movs	r2, #32
 800ef36:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff f8be 	bl	800e0c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef44:	bf00      	nop
 800ef46:	3720      	adds	r7, #32
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b096      	sub	sp, #88	; 0x58
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef64:	2b22      	cmp	r3, #34	; 0x22
 800ef66:	f040 8098 	bne.w	800f09a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef70:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ef78:	b2d9      	uxtb	r1, r3
 800ef7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef84:	400a      	ands	r2, r1
 800ef86:	b2d2      	uxtb	r2, r2
 800ef88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8e:	1c5a      	adds	r2, r3, #1
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800efac:	b29b      	uxth	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d17b      	bne.n	800f0aa <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	e853 3f00 	ldrex	r3, [r3]
 800efbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efc6:	653b      	str	r3, [r7, #80]	; 0x50
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	461a      	mov	r2, r3
 800efce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd0:	647b      	str	r3, [r7, #68]	; 0x44
 800efd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd8:	e841 2300 	strex	r3, r2, [r1]
 800efdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1e6      	bne.n	800efb2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3308      	adds	r3, #8
 800efea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	e853 3f00 	ldrex	r3, [r3]
 800eff2:	623b      	str	r3, [r7, #32]
   return(result);
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	f023 0301 	bic.w	r3, r3, #1
 800effa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	3308      	adds	r3, #8
 800f002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f004:	633a      	str	r2, [r7, #48]	; 0x30
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f00c:	e841 2300 	strex	r3, r2, [r1]
 800f010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1e5      	bne.n	800efe4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2220      	movs	r2, #32
 800f01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f030:	2b01      	cmp	r3, #1
 800f032:	d12e      	bne.n	800f092 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	e853 3f00 	ldrex	r3, [r3]
 800f046:	60fb      	str	r3, [r7, #12]
   return(result);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f023 0310 	bic.w	r3, r3, #16
 800f04e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	461a      	mov	r2, r3
 800f056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f058:	61fb      	str	r3, [r7, #28]
 800f05a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05c:	69b9      	ldr	r1, [r7, #24]
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	e841 2300 	strex	r3, r2, [r1]
 800f064:	617b      	str	r3, [r7, #20]
   return(result);
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1e6      	bne.n	800f03a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	69db      	ldr	r3, [r3, #28]
 800f072:	f003 0310 	and.w	r3, r3, #16
 800f076:	2b10      	cmp	r3, #16
 800f078:	d103      	bne.n	800f082 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2210      	movs	r2, #16
 800f080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f088:	4619      	mov	r1, r3
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff f82c 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f090:	e00b      	b.n	800f0aa <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7f4 f958 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 800f098:	e007      	b.n	800f0aa <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	699a      	ldr	r2, [r3, #24]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f042 0208 	orr.w	r2, r2, #8
 800f0a8:	619a      	str	r2, [r3, #24]
}
 800f0aa:	bf00      	nop
 800f0ac:	3758      	adds	r7, #88	; 0x58
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b096      	sub	sp, #88	; 0x58
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ca:	2b22      	cmp	r3, #34	; 0x22
 800f0cc:	f040 8098 	bne.w	800f200 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f0e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f0e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f4:	1c9a      	adds	r2, r3, #2
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f100:	b29b      	uxth	r3, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	b29a      	uxth	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f112:	b29b      	uxth	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d17b      	bne.n	800f210 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f120:	e853 3f00 	ldrex	r3, [r3]
 800f124:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f12c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f136:	643b      	str	r3, [r7, #64]	; 0x40
 800f138:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f13c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f13e:	e841 2300 	strex	r3, r2, [r1]
 800f142:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1e6      	bne.n	800f118 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3308      	adds	r3, #8
 800f150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	e853 3f00 	ldrex	r3, [r3]
 800f158:	61fb      	str	r3, [r7, #28]
   return(result);
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	f023 0301 	bic.w	r3, r3, #1
 800f160:	64bb      	str	r3, [r7, #72]	; 0x48
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	3308      	adds	r3, #8
 800f168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f16a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f16c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f172:	e841 2300 	strex	r3, r2, [r1]
 800f176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d1e5      	bne.n	800f14a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2220      	movs	r2, #32
 800f182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f196:	2b01      	cmp	r3, #1
 800f198:	d12e      	bne.n	800f1f8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2200      	movs	r2, #0
 800f19e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	e853 3f00 	ldrex	r3, [r3]
 800f1ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	f023 0310 	bic.w	r3, r3, #16
 800f1b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1be:	61bb      	str	r3, [r7, #24]
 800f1c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c2:	6979      	ldr	r1, [r7, #20]
 800f1c4:	69ba      	ldr	r2, [r7, #24]
 800f1c6:	e841 2300 	strex	r3, r2, [r1]
 800f1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1e6      	bne.n	800f1a0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	69db      	ldr	r3, [r3, #28]
 800f1d8:	f003 0310 	and.w	r3, r3, #16
 800f1dc:	2b10      	cmp	r3, #16
 800f1de:	d103      	bne.n	800f1e8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2210      	movs	r2, #16
 800f1e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7fe ff79 	bl	800e0e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1f6:	e00b      	b.n	800f210 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7f4 f8a5 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 800f1fe:	e007      	b.n	800f210 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	699a      	ldr	r2, [r3, #24]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f042 0208 	orr.w	r2, r2, #8
 800f20e:	619a      	str	r2, [r3, #24]
}
 800f210:	bf00      	nop
 800f212:	3758      	adds	r7, #88	; 0x58
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f222:	2300      	movs	r3, #0
 800f224:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f22a:	2b84      	cmp	r3, #132	; 0x84
 800f22c:	d005      	beq.n	800f23a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f22e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4413      	add	r3, r2
 800f236:	3303      	adds	r3, #3
 800f238:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f23a:	68fb      	ldr	r3, [r7, #12]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3714      	adds	r7, #20
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f24e:	f3ef 8305 	mrs	r3, IPSR
 800f252:	607b      	str	r3, [r7, #4]
  return(result);
 800f254:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f256:	2b00      	cmp	r3, #0
 800f258:	bf14      	ite	ne
 800f25a:	2301      	movne	r3, #1
 800f25c:	2300      	moveq	r3, #0
 800f25e:	b2db      	uxtb	r3, r3
}
 800f260:	4618      	mov	r0, r3
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f270:	f001 fafa 	bl	8010868 <vTaskStartScheduler>
  
  return osOK;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	bd80      	pop	{r7, pc}

0800f27a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f27a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27c:	b089      	sub	sp, #36	; 0x24
 800f27e:	af04      	add	r7, sp, #16
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d020      	beq.n	800f2ce <osThreadCreate+0x54>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d01c      	beq.n	800f2ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685c      	ldr	r4, [r3, #4]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	691e      	ldr	r6, [r3, #16]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7ff ffb6 	bl	800f218 <makeFreeRtosPriority>
 800f2ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2b6:	9202      	str	r2, [sp, #8]
 800f2b8:	9301      	str	r3, [sp, #4]
 800f2ba:	9100      	str	r1, [sp, #0]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	4632      	mov	r2, r6
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f001 f864 	bl	8010390 <xTaskCreateStatic>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	e01c      	b.n	800f308 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685c      	ldr	r4, [r3, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ff98 	bl	800f218 <makeFreeRtosPriority>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	f107 030c 	add.w	r3, r7, #12
 800f2ee:	9301      	str	r3, [sp, #4]
 800f2f0:	9200      	str	r2, [sp, #0]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f001 f8ac 	bl	8010456 <xTaskCreate>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b01      	cmp	r3, #1
 800f302:	d001      	beq.n	800f308 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f304:	2300      	movs	r3, #0
 800f306:	e000      	b.n	800f30a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f308:	68fb      	ldr	r3, [r7, #12]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f312 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d001      	beq.n	800f328 <osDelay+0x16>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	e000      	b.n	800f32a <osDelay+0x18>
 800f328:	2301      	movs	r3, #1
 800f32a:	4618      	mov	r0, r3
 800f32c:	f001 fa66 	bl	80107fc <vTaskDelay>
  
  return osOK;
 800f330:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d007      	beq.n	800f35a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	4619      	mov	r1, r3
 800f350:	2001      	movs	r0, #1
 800f352:	f000 fb84 	bl	800fa5e <xQueueCreateMutexStatic>
 800f356:	4603      	mov	r3, r0
 800f358:	e003      	b.n	800f362 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f35a:	2001      	movs	r0, #1
 800f35c:	f000 fb67 	bl	800fa2e <xQueueCreateMutex>
 800f360:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f362:	4618      	mov	r0, r3
 800f364:	3708      	adds	r7, #8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
	...

0800f36c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f376:	2300      	movs	r3, #0
 800f378:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <osMutexWait+0x18>
    return osErrorParameter;
 800f380:	2380      	movs	r3, #128	; 0x80
 800f382:	e03a      	b.n	800f3fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38e:	d103      	bne.n	800f398 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f390:	f04f 33ff 	mov.w	r3, #4294967295
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	e009      	b.n	800f3ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d006      	beq.n	800f3ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d101      	bne.n	800f3ac <osMutexWait+0x40>
      ticks = 1;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f3ac:	f7ff ff4c 	bl	800f248 <inHandlerMode>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d017      	beq.n	800f3e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f3b6:	f107 0308 	add.w	r3, r7, #8
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fe18 	bl	800fff4 <xQueueReceiveFromISR>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d001      	beq.n	800f3ce <osMutexWait+0x62>
      return osErrorOS;
 800f3ca:	23ff      	movs	r3, #255	; 0xff
 800f3cc:	e015      	b.n	800f3fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d011      	beq.n	800f3f8 <osMutexWait+0x8c>
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <osMutexWait+0x98>)
 800f3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	f3bf 8f6f 	isb	sy
 800f3e4:	e008      	b.n	800f3f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f3e6:	68f9      	ldr	r1, [r7, #12]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fcef 	bl	800fdcc <xQueueSemaphoreTake>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d001      	beq.n	800f3f8 <osMutexWait+0x8c>
    return osErrorOS;
 800f3f4:	23ff      	movs	r3, #255	; 0xff
 800f3f6:	e000      	b.n	800f3fa <osMutexWait+0x8e>
  }
  
  return osOK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	e000ed04 	.word	0xe000ed04

0800f408 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f410:	2300      	movs	r3, #0
 800f412:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f414:	2300      	movs	r3, #0
 800f416:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f418:	f7ff ff16 	bl	800f248 <inHandlerMode>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d016      	beq.n	800f450 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f422:	f107 0308 	add.w	r3, r7, #8
 800f426:	4619      	mov	r1, r3
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fc39 	bl	800fca0 <xQueueGiveFromISR>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b01      	cmp	r3, #1
 800f432:	d001      	beq.n	800f438 <osMutexRelease+0x30>
      return osErrorOS;
 800f434:	23ff      	movs	r3, #255	; 0xff
 800f436:	e017      	b.n	800f468 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d013      	beq.n	800f466 <osMutexRelease+0x5e>
 800f43e:	4b0c      	ldr	r3, [pc, #48]	; (800f470 <osMutexRelease+0x68>)
 800f440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f444:	601a      	str	r2, [r3, #0]
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	e00a      	b.n	800f466 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f450:	2300      	movs	r3, #0
 800f452:	2200      	movs	r2, #0
 800f454:	2100      	movs	r1, #0
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fb1c 	bl	800fa94 <xQueueGenericSend>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d001      	beq.n	800f466 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f462:	23ff      	movs	r3, #255	; 0xff
 800f464:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f466:	68fb      	ldr	r3, [r7, #12]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	e000ed04 	.word	0xe000ed04

0800f474 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af02      	add	r7, sp, #8
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d00f      	beq.n	800f4a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d10a      	bne.n	800f4a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	2203      	movs	r2, #3
 800f492:	9200      	str	r2, [sp, #0]
 800f494:	2200      	movs	r2, #0
 800f496:	2100      	movs	r1, #0
 800f498:	2001      	movs	r0, #1
 800f49a:	f000 f9cb 	bl	800f834 <xQueueGenericCreateStatic>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	e016      	b.n	800f4d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e014      	b.n	800f4d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d110      	bne.n	800f4ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f4ac:	2203      	movs	r2, #3
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	2001      	movs	r0, #1
 800f4b2:	f000 fa41 	bl	800f938 <xQueueGenericCreate>
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <osSemaphoreCreate+0x56>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 fae5 	bl	800fa94 <xQueueGenericSend>
      return sema;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	e000      	b.n	800f4d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f4ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d101      	bne.n	800f4f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f4ec:	2380      	movs	r3, #128	; 0x80
 800f4ee:	e03a      	b.n	800f566 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fa:	d103      	bne.n	800f504 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	e009      	b.n	800f518 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d006      	beq.n	800f518 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <osSemaphoreWait+0x40>
      ticks = 1;
 800f514:	2301      	movs	r3, #1
 800f516:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f518:	f7ff fe96 	bl	800f248 <inHandlerMode>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d017      	beq.n	800f552 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	461a      	mov	r2, r3
 800f528:	2100      	movs	r1, #0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fd62 	bl	800fff4 <xQueueReceiveFromISR>
 800f530:	4603      	mov	r3, r0
 800f532:	2b01      	cmp	r3, #1
 800f534:	d001      	beq.n	800f53a <osSemaphoreWait+0x62>
      return osErrorOS;
 800f536:	23ff      	movs	r3, #255	; 0xff
 800f538:	e015      	b.n	800f566 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d011      	beq.n	800f564 <osSemaphoreWait+0x8c>
 800f540:	4b0b      	ldr	r3, [pc, #44]	; (800f570 <osSemaphoreWait+0x98>)
 800f542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f546:	601a      	str	r2, [r3, #0]
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	e008      	b.n	800f564 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f552:	68f9      	ldr	r1, [r7, #12]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 fc39 	bl	800fdcc <xQueueSemaphoreTake>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d001      	beq.n	800f564 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f560:	23ff      	movs	r3, #255	; 0xff
 800f562:	e000      	b.n	800f566 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	e000ed04 	.word	0xe000ed04

0800f574 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f580:	2300      	movs	r3, #0
 800f582:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f584:	f7ff fe60 	bl	800f248 <inHandlerMode>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d016      	beq.n	800f5bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f58e:	f107 0308 	add.w	r3, r7, #8
 800f592:	4619      	mov	r1, r3
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 fb83 	bl	800fca0 <xQueueGiveFromISR>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d001      	beq.n	800f5a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f5a0:	23ff      	movs	r3, #255	; 0xff
 800f5a2:	e017      	b.n	800f5d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d013      	beq.n	800f5d2 <osSemaphoreRelease+0x5e>
 800f5aa:	4b0c      	ldr	r3, [pc, #48]	; (800f5dc <osSemaphoreRelease+0x68>)
 800f5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	e00a      	b.n	800f5d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f5bc:	2300      	movs	r3, #0
 800f5be:	2200      	movs	r2, #0
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa66 	bl	800fa94 <xQueueGenericSend>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d001      	beq.n	800f5d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f5ce:	23ff      	movs	r3, #255	; 0xff
 800f5d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	e000ed04 	.word	0xe000ed04

0800f5e0 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fd89 	bl	8010100 <uxQueueMessagesWaiting>
 800f5ee:	4603      	mov	r3, r0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f103 0208 	add.w	r2, r3, #8
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f04f 32ff 	mov.w	r2, #4294967295
 800f610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f103 0208 	add.w	r2, r3, #8
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f103 0208 	add.w	r2, r3, #8
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f62c:	bf00      	nop
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f646:	bf00      	nop
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr

0800f652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f652:	b480      	push	{r7}
 800f654:	b085      	sub	sp, #20
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
 800f65a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	689a      	ldr	r2, [r3, #8]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	683a      	ldr	r2, [r7, #0]
 800f676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	601a      	str	r2, [r3, #0]
}
 800f68e:	bf00      	nop
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr

0800f69a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f69a:	b480      	push	{r7}
 800f69c:	b085      	sub	sp, #20
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b0:	d103      	bne.n	800f6ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	e00c      	b.n	800f6d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	3308      	adds	r3, #8
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	e002      	b.n	800f6c8 <vListInsert+0x2e>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	60fb      	str	r3, [r7, #12]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d2f6      	bcs.n	800f6c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	685a      	ldr	r2, [r3, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	1c5a      	adds	r2, r3, #1
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	601a      	str	r2, [r3, #0]
}
 800f700:	bf00      	nop
 800f702:	3714      	adds	r7, #20
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	691b      	ldr	r3, [r3, #16]
 800f718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	6892      	ldr	r2, [r2, #8]
 800f722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	6852      	ldr	r2, [r2, #4]
 800f72c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	429a      	cmp	r2, r3
 800f736:	d103      	bne.n	800f740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	689a      	ldr	r2, [r3, #8]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	1e5a      	subs	r2, r3, #1
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3714      	adds	r7, #20
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10c      	bne.n	800f78e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f778:	b672      	cpsid	i
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	b662      	cpsie	i
 800f788:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f78a:	bf00      	nop
 800f78c:	e7fe      	b.n	800f78c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f78e:	f001 ffed 	bl	801176c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f79a:	68f9      	ldr	r1, [r7, #12]
 800f79c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f79e:	fb01 f303 	mul.w	r3, r1, r3
 800f7a2:	441a      	add	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	68f9      	ldr	r1, [r7, #12]
 800f7c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7c4:	fb01 f303 	mul.w	r3, r1, r3
 800f7c8:	441a      	add	r2, r3
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	22ff      	movs	r2, #255	; 0xff
 800f7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	22ff      	movs	r2, #255	; 0xff
 800f7da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d114      	bne.n	800f80e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01a      	beq.n	800f822 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	3310      	adds	r3, #16
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f001 faa7 	bl	8010d44 <xTaskRemoveFromEventList>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d012      	beq.n	800f822 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7fc:	4b0c      	ldr	r3, [pc, #48]	; (800f830 <xQueueGenericReset+0xd0>)
 800f7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f802:	601a      	str	r2, [r3, #0]
 800f804:	f3bf 8f4f 	dsb	sy
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	e009      	b.n	800f822 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3310      	adds	r3, #16
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff fef0 	bl	800f5f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3324      	adds	r3, #36	; 0x24
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff feeb 	bl	800f5f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f822:	f001 ffd7 	bl	80117d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f826:	2301      	movs	r3, #1
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	e000ed04 	.word	0xe000ed04

0800f834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f834:	b580      	push	{r7, lr}
 800f836:	b08e      	sub	sp, #56	; 0x38
 800f838:	af02      	add	r7, sp, #8
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10c      	bne.n	800f862 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84c:	b672      	cpsid	i
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	b662      	cpsie	i
 800f85c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f85e:	bf00      	nop
 800f860:	e7fe      	b.n	800f860 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d10c      	bne.n	800f882 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86c:	b672      	cpsid	i
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	b662      	cpsie	i
 800f87c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f87e:	bf00      	nop
 800f880:	e7fe      	b.n	800f880 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <xQueueGenericCreateStatic+0x5a>
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <xQueueGenericCreateStatic+0x5e>
 800f88e:	2301      	movs	r3, #1
 800f890:	e000      	b.n	800f894 <xQueueGenericCreateStatic+0x60>
 800f892:	2300      	movs	r3, #0
 800f894:	2b00      	cmp	r3, #0
 800f896:	d10c      	bne.n	800f8b2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89c:	b672      	cpsid	i
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	b662      	cpsie	i
 800f8ac:	623b      	str	r3, [r7, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	e7fe      	b.n	800f8b0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d102      	bne.n	800f8be <xQueueGenericCreateStatic+0x8a>
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <xQueueGenericCreateStatic+0x8e>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e000      	b.n	800f8c4 <xQueueGenericCreateStatic+0x90>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10c      	bne.n	800f8e2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8cc:	b672      	cpsid	i
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	b662      	cpsie	i
 800f8dc:	61fb      	str	r3, [r7, #28]
}
 800f8de:	bf00      	nop
 800f8e0:	e7fe      	b.n	800f8e0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8e2:	2348      	movs	r3, #72	; 0x48
 800f8e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b48      	cmp	r3, #72	; 0x48
 800f8ea:	d00c      	beq.n	800f906 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f0:	b672      	cpsid	i
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	b662      	cpsie	i
 800f900:	61bb      	str	r3, [r7, #24]
}
 800f902:	bf00      	nop
 800f904:	e7fe      	b.n	800f904 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f906:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00d      	beq.n	800f92e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	2201      	movs	r2, #1
 800f916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f91a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	4613      	mov	r3, r2
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	68b9      	ldr	r1, [r7, #8]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f000 f847 	bl	800f9bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f930:	4618      	mov	r0, r3
 800f932:	3730      	adds	r7, #48	; 0x30
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b08a      	sub	sp, #40	; 0x28
 800f93c:	af02      	add	r7, sp, #8
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	4613      	mov	r3, r2
 800f944:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10c      	bne.n	800f966 <xQueueGenericCreate+0x2e>
	__asm volatile
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	b672      	cpsid	i
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	b662      	cpsie	i
 800f960:	613b      	str	r3, [r7, #16]
}
 800f962:	bf00      	nop
 800f964:	e7fe      	b.n	800f964 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d102      	bne.n	800f972 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	61fb      	str	r3, [r7, #28]
 800f970:	e004      	b.n	800f97c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	fb02 f303 	mul.w	r3, r2, r3
 800f97a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	3348      	adds	r3, #72	; 0x48
 800f980:	4618      	mov	r0, r3
 800f982:	f002 f81f 	bl	80119c4 <pvPortMalloc>
 800f986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d011      	beq.n	800f9b2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	3348      	adds	r3, #72	; 0x48
 800f996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f9a0:	79fa      	ldrb	r2, [r7, #7]
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	697a      	ldr	r2, [r7, #20]
 800f9aa:	68b9      	ldr	r1, [r7, #8]
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f000 f805 	bl	800f9bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9b2:	69bb      	ldr	r3, [r7, #24]
	}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3720      	adds	r7, #32
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d103      	bne.n	800f9d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	69ba      	ldr	r2, [r7, #24]
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	e002      	b.n	800f9de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	69b8      	ldr	r0, [r7, #24]
 800f9ee:	f7ff feb7 	bl	800f760 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9f2:	bf00      	nop
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d00e      	beq.n	800fa26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	2100      	movs	r1, #0
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f837 	bl	800fa94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fa26:	bf00      	nop
 800fa28:	3708      	adds	r7, #8
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b086      	sub	sp, #24
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	4603      	mov	r3, r0
 800fa36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	461a      	mov	r2, r3
 800fa44:	6939      	ldr	r1, [r7, #16]
 800fa46:	6978      	ldr	r0, [r7, #20]
 800fa48:	f7ff ff76 	bl	800f938 <xQueueGenericCreate>
 800fa4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7ff ffd3 	bl	800f9fa <prvInitialiseMutex>

		return xNewQueue;
 800fa54:	68fb      	ldr	r3, [r7, #12]
	}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3718      	adds	r7, #24
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b088      	sub	sp, #32
 800fa62:	af02      	add	r7, sp, #8
 800fa64:	4603      	mov	r3, r0
 800fa66:	6039      	str	r1, [r7, #0]
 800fa68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa72:	79fb      	ldrb	r3, [r7, #7]
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	6939      	ldr	r1, [r7, #16]
 800fa7c:	6978      	ldr	r0, [r7, #20]
 800fa7e:	f7ff fed9 	bl	800f834 <xQueueGenericCreateStatic>
 800fa82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f7ff ffb8 	bl	800f9fa <prvInitialiseMutex>

		return xNewQueue;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
	}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08e      	sub	sp, #56	; 0x38
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800faa2:	2300      	movs	r3, #0
 800faa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800faaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10c      	bne.n	800faca <xQueueGenericSend+0x36>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab4:	b672      	cpsid	i
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	b662      	cpsie	i
 800fac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	2b00      	cmp	r3, #0
 800face:	d103      	bne.n	800fad8 <xQueueGenericSend+0x44>
 800fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d101      	bne.n	800fadc <xQueueGenericSend+0x48>
 800fad8:	2301      	movs	r3, #1
 800fada:	e000      	b.n	800fade <xQueueGenericSend+0x4a>
 800fadc:	2300      	movs	r3, #0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10c      	bne.n	800fafc <xQueueGenericSend+0x68>
	__asm volatile
 800fae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae6:	b672      	cpsid	i
 800fae8:	f383 8811 	msr	BASEPRI, r3
 800faec:	f3bf 8f6f 	isb	sy
 800faf0:	f3bf 8f4f 	dsb	sy
 800faf4:	b662      	cpsie	i
 800faf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800faf8:	bf00      	nop
 800fafa:	e7fe      	b.n	800fafa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d103      	bne.n	800fb0a <xQueueGenericSend+0x76>
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d101      	bne.n	800fb0e <xQueueGenericSend+0x7a>
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e000      	b.n	800fb10 <xQueueGenericSend+0x7c>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10c      	bne.n	800fb2e <xQueueGenericSend+0x9a>
	__asm volatile
 800fb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb18:	b672      	cpsid	i
 800fb1a:	f383 8811 	msr	BASEPRI, r3
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f3bf 8f4f 	dsb	sy
 800fb26:	b662      	cpsie	i
 800fb28:	623b      	str	r3, [r7, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	e7fe      	b.n	800fb2c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb2e:	f001 fad1 	bl	80110d4 <xTaskGetSchedulerState>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d102      	bne.n	800fb3e <xQueueGenericSend+0xaa>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <xQueueGenericSend+0xae>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <xQueueGenericSend+0xb0>
 800fb42:	2300      	movs	r3, #0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10c      	bne.n	800fb62 <xQueueGenericSend+0xce>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4c:	b672      	cpsid	i
 800fb4e:	f383 8811 	msr	BASEPRI, r3
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	f3bf 8f4f 	dsb	sy
 800fb5a:	b662      	cpsie	i
 800fb5c:	61fb      	str	r3, [r7, #28]
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb62:	f001 fe03 	bl	801176c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d302      	bcc.n	800fb78 <xQueueGenericSend+0xe4>
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	d129      	bne.n	800fbcc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	68b9      	ldr	r1, [r7, #8]
 800fb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb7e:	f000 faf7 	bl	8010170 <prvCopyDataToQueue>
 800fb82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d010      	beq.n	800fbae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8e:	3324      	adds	r3, #36	; 0x24
 800fb90:	4618      	mov	r0, r3
 800fb92:	f001 f8d7 	bl	8010d44 <xTaskRemoveFromEventList>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d013      	beq.n	800fbc4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb9c:	4b3f      	ldr	r3, [pc, #252]	; (800fc9c <xQueueGenericSend+0x208>)
 800fb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	e00a      	b.n	800fbc4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d007      	beq.n	800fbc4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fbb4:	4b39      	ldr	r3, [pc, #228]	; (800fc9c <xQueueGenericSend+0x208>)
 800fbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fbc4:	f001 fe06 	bl	80117d4 <vPortExitCritical>
				return pdPASS;
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e063      	b.n	800fc94 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d103      	bne.n	800fbda <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbd2:	f001 fdff 	bl	80117d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e05c      	b.n	800fc94 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d106      	bne.n	800fbee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f001 f911 	bl	8010e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbea:	2301      	movs	r3, #1
 800fbec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbee:	f001 fdf1 	bl	80117d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbf2:	f000 fea7 	bl	8010944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbf6:	f001 fdb9 	bl	801176c <vPortEnterCritical>
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc00:	b25b      	sxtb	r3, r3
 800fc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc06:	d103      	bne.n	800fc10 <xQueueGenericSend+0x17c>
 800fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc16:	b25b      	sxtb	r3, r3
 800fc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc1c:	d103      	bne.n	800fc26 <xQueueGenericSend+0x192>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc26:	f001 fdd5 	bl	80117d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc2a:	1d3a      	adds	r2, r7, #4
 800fc2c:	f107 0314 	add.w	r3, r7, #20
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f001 f900 	bl	8010e38 <xTaskCheckForTimeOut>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d124      	bne.n	800fc88 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fc3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc40:	f000 fb8e 	bl	8010360 <prvIsQueueFull>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d018      	beq.n	800fc7c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4c:	3310      	adds	r3, #16
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f001 f850 	bl	8010cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc5a:	f000 fb19 	bl	8010290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc5e:	f000 fe7f 	bl	8010960 <xTaskResumeAll>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f47f af7c 	bne.w	800fb62 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fc6a:	4b0c      	ldr	r3, [pc, #48]	; (800fc9c <xQueueGenericSend+0x208>)
 800fc6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	f3bf 8f4f 	dsb	sy
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	e772      	b.n	800fb62 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc7e:	f000 fb07 	bl	8010290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc82:	f000 fe6d 	bl	8010960 <xTaskResumeAll>
 800fc86:	e76c      	b.n	800fb62 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc8a:	f000 fb01 	bl	8010290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc8e:	f000 fe67 	bl	8010960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3738      	adds	r7, #56	; 0x38
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	e000ed04 	.word	0xe000ed04

0800fca0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08e      	sub	sp, #56	; 0x38
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10c      	bne.n	800fcce <xQueueGiveFromISR+0x2e>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	b672      	cpsid	i
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	b662      	cpsie	i
 800fcc8:	623b      	str	r3, [r7, #32]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00c      	beq.n	800fcf0 <xQueueGiveFromISR+0x50>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	b672      	cpsid	i
 800fcdc:	f383 8811 	msr	BASEPRI, r3
 800fce0:	f3bf 8f6f 	isb	sy
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	b662      	cpsie	i
 800fcea:	61fb      	str	r3, [r7, #28]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d103      	bne.n	800fd00 <xQueueGiveFromISR+0x60>
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d101      	bne.n	800fd04 <xQueueGiveFromISR+0x64>
 800fd00:	2301      	movs	r3, #1
 800fd02:	e000      	b.n	800fd06 <xQueueGiveFromISR+0x66>
 800fd04:	2300      	movs	r3, #0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10c      	bne.n	800fd24 <xQueueGiveFromISR+0x84>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0e:	b672      	cpsid	i
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	b662      	cpsie	i
 800fd1e:	61bb      	str	r3, [r7, #24]
}
 800fd20:	bf00      	nop
 800fd22:	e7fe      	b.n	800fd22 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd24:	f001 fe0a 	bl	801193c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fd28:	f3ef 8211 	mrs	r2, BASEPRI
 800fd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd30:	b672      	cpsid	i
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	b662      	cpsie	i
 800fd40:	617a      	str	r2, [r7, #20]
 800fd42:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd44:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd4c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d22b      	bcs.n	800fdb0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd72:	d112      	bne.n	800fd9a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d016      	beq.n	800fdaa <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	3324      	adds	r3, #36	; 0x24
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 ffdf 	bl	8010d44 <xTaskRemoveFromEventList>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00e      	beq.n	800fdaa <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d00b      	beq.n	800fdaa <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	2201      	movs	r2, #1
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	e007      	b.n	800fdaa <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd9e:	3301      	adds	r3, #1
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	b25a      	sxtb	r2, r3
 800fda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	637b      	str	r3, [r7, #52]	; 0x34
 800fdae:	e001      	b.n	800fdb4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fdbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3738      	adds	r7, #56	; 0x38
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
	...

0800fdcc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08e      	sub	sp, #56	; 0x38
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fdde:	2300      	movs	r3, #0
 800fde0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10c      	bne.n	800fe02 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdec:	b672      	cpsid	i
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	b662      	cpsie	i
 800fdfc:	623b      	str	r3, [r7, #32]
}
 800fdfe:	bf00      	nop
 800fe00:	e7fe      	b.n	800fe00 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00c      	beq.n	800fe24 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0e:	b672      	cpsid	i
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	b662      	cpsie	i
 800fe1e:	61fb      	str	r3, [r7, #28]
}
 800fe20:	bf00      	nop
 800fe22:	e7fe      	b.n	800fe22 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe24:	f001 f956 	bl	80110d4 <xTaskGetSchedulerState>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d102      	bne.n	800fe34 <xQueueSemaphoreTake+0x68>
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d101      	bne.n	800fe38 <xQueueSemaphoreTake+0x6c>
 800fe34:	2301      	movs	r3, #1
 800fe36:	e000      	b.n	800fe3a <xQueueSemaphoreTake+0x6e>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d10c      	bne.n	800fe58 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe42:	b672      	cpsid	i
 800fe44:	f383 8811 	msr	BASEPRI, r3
 800fe48:	f3bf 8f6f 	isb	sy
 800fe4c:	f3bf 8f4f 	dsb	sy
 800fe50:	b662      	cpsie	i
 800fe52:	61bb      	str	r3, [r7, #24]
}
 800fe54:	bf00      	nop
 800fe56:	e7fe      	b.n	800fe56 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe58:	f001 fc88 	bl	801176c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d024      	beq.n	800feb2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6a:	1e5a      	subs	r2, r3, #1
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d104      	bne.n	800fe82 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe78:	f001 faf2 	bl	8011460 <pvTaskIncrementMutexHeldCount>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00f      	beq.n	800feaa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	3310      	adds	r3, #16
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f000 ff58 	bl	8010d44 <xTaskRemoveFromEventList>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d007      	beq.n	800feaa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe9a:	4b55      	ldr	r3, [pc, #340]	; (800fff0 <xQueueSemaphoreTake+0x224>)
 800fe9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800feaa:	f001 fc93 	bl	80117d4 <vPortExitCritical>
				return pdPASS;
 800feae:	2301      	movs	r3, #1
 800feb0:	e099      	b.n	800ffe6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d113      	bne.n	800fee0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00c      	beq.n	800fed8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	b672      	cpsid	i
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	b662      	cpsie	i
 800fed2:	617b      	str	r3, [r7, #20]
}
 800fed4:	bf00      	nop
 800fed6:	e7fe      	b.n	800fed6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fed8:	f001 fc7c 	bl	80117d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fedc:	2300      	movs	r3, #0
 800fede:	e082      	b.n	800ffe6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d106      	bne.n	800fef4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fee6:	f107 030c 	add.w	r3, r7, #12
 800feea:	4618      	mov	r0, r3
 800feec:	f000 ff8e 	bl	8010e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fef4:	f001 fc6e 	bl	80117d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fef8:	f000 fd24 	bl	8010944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fefc:	f001 fc36 	bl	801176c <vPortEnterCritical>
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff06:	b25b      	sxtb	r3, r3
 800ff08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0c:	d103      	bne.n	800ff16 <xQueueSemaphoreTake+0x14a>
 800ff0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff1c:	b25b      	sxtb	r3, r3
 800ff1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff22:	d103      	bne.n	800ff2c <xQueueSemaphoreTake+0x160>
 800ff24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff2c:	f001 fc52 	bl	80117d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff30:	463a      	mov	r2, r7
 800ff32:	f107 030c 	add.w	r3, r7, #12
 800ff36:	4611      	mov	r1, r2
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f000 ff7d 	bl	8010e38 <xTaskCheckForTimeOut>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d132      	bne.n	800ffaa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff46:	f000 f9f5 	bl	8010334 <prvIsQueueEmpty>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d026      	beq.n	800ff9e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ff58:	f001 fc08 	bl	801176c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f001 f8d5 	bl	8011110 <xTaskPriorityInherit>
 800ff66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ff68:	f001 fc34 	bl	80117d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6e:	3324      	adds	r3, #36	; 0x24
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f000 febf 	bl	8010cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff7c:	f000 f988 	bl	8010290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff80:	f000 fcee 	bl	8010960 <xTaskResumeAll>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f47f af66 	bne.w	800fe58 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ff8c:	4b18      	ldr	r3, [pc, #96]	; (800fff0 <xQueueSemaphoreTake+0x224>)
 800ff8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff92:	601a      	str	r2, [r3, #0]
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	e75c      	b.n	800fe58 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ff9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffa0:	f000 f976 	bl	8010290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffa4:	f000 fcdc 	bl	8010960 <xTaskResumeAll>
 800ffa8:	e756      	b.n	800fe58 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ffaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffac:	f000 f970 	bl	8010290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffb0:	f000 fcd6 	bl	8010960 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffb6:	f000 f9bd 	bl	8010334 <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f43f af4b 	beq.w	800fe58 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00d      	beq.n	800ffe4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ffc8:	f001 fbd0 	bl	801176c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ffcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffce:	f000 f8b7 	bl	8010140 <prvGetDisinheritPriorityAfterTimeout>
 800ffd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f001 f9a2 	bl	8011324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ffe0:	f001 fbf8 	bl	80117d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ffe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3738      	adds	r7, #56	; 0x38
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	e000ed04 	.word	0xe000ed04

0800fff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b08e      	sub	sp, #56	; 0x38
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	2b00      	cmp	r3, #0
 8010008:	d10c      	bne.n	8010024 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801000a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000e:	b672      	cpsid	i
 8010010:	f383 8811 	msr	BASEPRI, r3
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	b662      	cpsie	i
 801001e:	623b      	str	r3, [r7, #32]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d103      	bne.n	8010032 <xQueueReceiveFromISR+0x3e>
 801002a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <xQueueReceiveFromISR+0x42>
 8010032:	2301      	movs	r3, #1
 8010034:	e000      	b.n	8010038 <xQueueReceiveFromISR+0x44>
 8010036:	2300      	movs	r3, #0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10c      	bne.n	8010056 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010040:	b672      	cpsid	i
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	b662      	cpsie	i
 8010050:	61fb      	str	r3, [r7, #28]
}
 8010052:	bf00      	nop
 8010054:	e7fe      	b.n	8010054 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010056:	f001 fc71 	bl	801193c <vPortValidateInterruptPriority>
	__asm volatile
 801005a:	f3ef 8211 	mrs	r2, BASEPRI
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	b672      	cpsid	i
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	b662      	cpsie	i
 8010072:	61ba      	str	r2, [r7, #24]
 8010074:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010076:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010078:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010082:	2b00      	cmp	r3, #0
 8010084:	d02f      	beq.n	80100e6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801008c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010094:	f000 f8d6 	bl	8010244 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	1e5a      	subs	r2, r3, #1
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80100a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a8:	d112      	bne.n	80100d0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	691b      	ldr	r3, [r3, #16]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d016      	beq.n	80100e0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	3310      	adds	r3, #16
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 fe44 	bl	8010d44 <xTaskRemoveFromEventList>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00e      	beq.n	80100e0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00b      	beq.n	80100e0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2201      	movs	r2, #1
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	e007      	b.n	80100e0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100d4:	3301      	adds	r3, #1
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	b25a      	sxtb	r2, r3
 80100da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80100e0:	2301      	movs	r3, #1
 80100e2:	637b      	str	r3, [r7, #52]	; 0x34
 80100e4:	e001      	b.n	80100ea <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80100e6:	2300      	movs	r3, #0
 80100e8:	637b      	str	r3, [r7, #52]	; 0x34
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	f383 8811 	msr	BASEPRI, r3
}
 80100f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3738      	adds	r7, #56	; 0x38
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10c      	bne.n	8010128 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 801010e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010112:	b672      	cpsid	i
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	b662      	cpsie	i
 8010122:	60bb      	str	r3, [r7, #8]
}
 8010124:	bf00      	nop
 8010126:	e7fe      	b.n	8010126 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8010128:	f001 fb20 	bl	801176c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010130:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010132:	f001 fb4f 	bl	80117d4 <vPortExitCritical>

	return uxReturn;
 8010136:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010138:	4618      	mov	r0, r3
 801013a:	3710      	adds	r7, #16
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010140:	b480      	push	{r7}
 8010142:	b085      	sub	sp, #20
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	2b00      	cmp	r3, #0
 801014e:	d006      	beq.n	801015e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f1c3 0307 	rsb	r3, r3, #7
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	e001      	b.n	8010162 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801015e:	2300      	movs	r3, #0
 8010160:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010162:	68fb      	ldr	r3, [r7, #12]
	}
 8010164:	4618      	mov	r0, r3
 8010166:	3714      	adds	r7, #20
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801017c:	2300      	movs	r3, #0
 801017e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10d      	bne.n	80101aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d14d      	bne.n	8010232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	4618      	mov	r0, r3
 801019c:	f001 f838 	bl	8011210 <xTaskPriorityDisinherit>
 80101a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2200      	movs	r2, #0
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	e043      	b.n	8010232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d119      	bne.n	80101e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6858      	ldr	r0, [r3, #4]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101b8:	461a      	mov	r2, r3
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	f002 fe97 	bl	8012eee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	685a      	ldr	r2, [r3, #4]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101c8:	441a      	add	r2, r3
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	685a      	ldr	r2, [r3, #4]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d32b      	bcc.n	8010232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	605a      	str	r2, [r3, #4]
 80101e2:	e026      	b.n	8010232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68d8      	ldr	r0, [r3, #12]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ec:	461a      	mov	r2, r3
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	f002 fe7d 	bl	8012eee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	68da      	ldr	r2, [r3, #12]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fc:	425b      	negs	r3, r3
 80101fe:	441a      	add	r2, r3
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	68da      	ldr	r2, [r3, #12]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	429a      	cmp	r2, r3
 801020e:	d207      	bcs.n	8010220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689a      	ldr	r2, [r3, #8]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010218:	425b      	negs	r3, r3
 801021a:	441a      	add	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b02      	cmp	r3, #2
 8010224:	d105      	bne.n	8010232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	3b01      	subs	r3, #1
 8010230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801023a:	697b      	ldr	r3, [r7, #20]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3718      	adds	r7, #24
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010252:	2b00      	cmp	r3, #0
 8010254:	d018      	beq.n	8010288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68da      	ldr	r2, [r3, #12]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801025e:	441a      	add	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68da      	ldr	r2, [r3, #12]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	429a      	cmp	r2, r3
 801026e:	d303      	bcc.n	8010278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	68d9      	ldr	r1, [r3, #12]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010280:	461a      	mov	r2, r3
 8010282:	6838      	ldr	r0, [r7, #0]
 8010284:	f002 fe33 	bl	8012eee <memcpy>
	}
}
 8010288:	bf00      	nop
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010298:	f001 fa68 	bl	801176c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80102a4:	e011      	b.n	80102ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d012      	beq.n	80102d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3324      	adds	r3, #36	; 0x24
 80102b2:	4618      	mov	r0, r3
 80102b4:	f000 fd46 	bl	8010d44 <xTaskRemoveFromEventList>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80102be:	f000 fe21 	bl	8010f04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80102ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	dce9      	bgt.n	80102a6 <prvUnlockQueue+0x16>
 80102d2:	e000      	b.n	80102d6 <prvUnlockQueue+0x46>
					break;
 80102d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	22ff      	movs	r2, #255	; 0xff
 80102da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80102de:	f001 fa79 	bl	80117d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80102e2:	f001 fa43 	bl	801176c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80102ee:	e011      	b.n	8010314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d012      	beq.n	801031e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3310      	adds	r3, #16
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 fd21 	bl	8010d44 <xTaskRemoveFromEventList>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010308:	f000 fdfc 	bl	8010f04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801030c:	7bbb      	ldrb	r3, [r7, #14]
 801030e:	3b01      	subs	r3, #1
 8010310:	b2db      	uxtb	r3, r3
 8010312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010318:	2b00      	cmp	r3, #0
 801031a:	dce9      	bgt.n	80102f0 <prvUnlockQueue+0x60>
 801031c:	e000      	b.n	8010320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801031e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	22ff      	movs	r2, #255	; 0xff
 8010324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010328:	f001 fa54 	bl	80117d4 <vPortExitCritical>
}
 801032c:	bf00      	nop
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801033c:	f001 fa16 	bl	801176c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010348:	2301      	movs	r3, #1
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	e001      	b.n	8010352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801034e:	2300      	movs	r3, #0
 8010350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010352:	f001 fa3f 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 8010356:	68fb      	ldr	r3, [r7, #12]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010368:	f001 fa00 	bl	801176c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010374:	429a      	cmp	r2, r3
 8010376:	d102      	bne.n	801037e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010378:	2301      	movs	r3, #1
 801037a:	60fb      	str	r3, [r7, #12]
 801037c:	e001      	b.n	8010382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801037e:	2300      	movs	r3, #0
 8010380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010382:	f001 fa27 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 8010386:	68fb      	ldr	r3, [r7, #12]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010390:	b580      	push	{r7, lr}
 8010392:	b08e      	sub	sp, #56	; 0x38
 8010394:	af04      	add	r7, sp, #16
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
 801039c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10c      	bne.n	80103be <xTaskCreateStatic+0x2e>
	__asm volatile
 80103a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a8:	b672      	cpsid	i
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	b662      	cpsie	i
 80103b8:	623b      	str	r3, [r7, #32]
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80103be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d10c      	bne.n	80103de <xTaskCreateStatic+0x4e>
	__asm volatile
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	b672      	cpsid	i
 80103ca:	f383 8811 	msr	BASEPRI, r3
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	f3bf 8f4f 	dsb	sy
 80103d6:	b662      	cpsie	i
 80103d8:	61fb      	str	r3, [r7, #28]
}
 80103da:	bf00      	nop
 80103dc:	e7fe      	b.n	80103dc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80103de:	23a0      	movs	r3, #160	; 0xa0
 80103e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	2ba0      	cmp	r3, #160	; 0xa0
 80103e6:	d00c      	beq.n	8010402 <xTaskCreateStatic+0x72>
	__asm volatile
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	b672      	cpsid	i
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	b662      	cpsie	i
 80103fc:	61bb      	str	r3, [r7, #24]
}
 80103fe:	bf00      	nop
 8010400:	e7fe      	b.n	8010400 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	2b00      	cmp	r3, #0
 8010408:	d01e      	beq.n	8010448 <xTaskCreateStatic+0xb8>
 801040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040c:	2b00      	cmp	r3, #0
 801040e:	d01b      	beq.n	8010448 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010412:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010418:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	2202      	movs	r2, #2
 801041e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010422:	2300      	movs	r3, #0
 8010424:	9303      	str	r3, [sp, #12]
 8010426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010428:	9302      	str	r3, [sp, #8]
 801042a:	f107 0314 	add.w	r3, r7, #20
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	68b9      	ldr	r1, [r7, #8]
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f000 f850 	bl	80104e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010442:	f000 f8ed 	bl	8010620 <prvAddNewTaskToReadyList>
 8010446:	e001      	b.n	801044c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801044c:	697b      	ldr	r3, [r7, #20]
	}
 801044e:	4618      	mov	r0, r3
 8010450:	3728      	adds	r7, #40	; 0x28
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010456:	b580      	push	{r7, lr}
 8010458:	b08c      	sub	sp, #48	; 0x30
 801045a:	af04      	add	r7, sp, #16
 801045c:	60f8      	str	r0, [r7, #12]
 801045e:	60b9      	str	r1, [r7, #8]
 8010460:	603b      	str	r3, [r7, #0]
 8010462:	4613      	mov	r3, r2
 8010464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010466:	88fb      	ldrh	r3, [r7, #6]
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	4618      	mov	r0, r3
 801046c:	f001 faaa 	bl	80119c4 <pvPortMalloc>
 8010470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d00e      	beq.n	8010496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010478:	20a0      	movs	r0, #160	; 0xa0
 801047a:	f001 faa3 	bl	80119c4 <pvPortMalloc>
 801047e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	631a      	str	r2, [r3, #48]	; 0x30
 801048c:	e005      	b.n	801049a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801048e:	6978      	ldr	r0, [r7, #20]
 8010490:	f001 fb62 	bl	8011b58 <vPortFree>
 8010494:	e001      	b.n	801049a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010496:	2300      	movs	r3, #0
 8010498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d017      	beq.n	80104d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104a8:	88fa      	ldrh	r2, [r7, #6]
 80104aa:	2300      	movs	r3, #0
 80104ac:	9303      	str	r3, [sp, #12]
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	9302      	str	r3, [sp, #8]
 80104b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b4:	9301      	str	r3, [sp, #4]
 80104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	68b9      	ldr	r1, [r7, #8]
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f000 f80e 	bl	80104e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104c4:	69f8      	ldr	r0, [r7, #28]
 80104c6:	f000 f8ab 	bl	8010620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80104ca:	2301      	movs	r3, #1
 80104cc:	61bb      	str	r3, [r7, #24]
 80104ce:	e002      	b.n	80104d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80104d0:	f04f 33ff 	mov.w	r3, #4294967295
 80104d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80104d6:	69bb      	ldr	r3, [r7, #24]
	}
 80104d8:	4618      	mov	r0, r3
 80104da:	3720      	adds	r7, #32
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
 80104ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80104f8:	440b      	add	r3, r1
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	f023 0307 	bic.w	r3, r3, #7
 8010506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	f003 0307 	and.w	r3, r3, #7
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00c      	beq.n	801052c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8010512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010516:	b672      	cpsid	i
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	b662      	cpsie	i
 8010526:	617b      	str	r3, [r7, #20]
}
 8010528:	bf00      	nop
 801052a:	e7fe      	b.n	801052a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d01f      	beq.n	8010572 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010532:	2300      	movs	r3, #0
 8010534:	61fb      	str	r3, [r7, #28]
 8010536:	e012      	b.n	801055e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	4413      	add	r3, r2
 801053e:	7819      	ldrb	r1, [r3, #0]
 8010540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	4413      	add	r3, r2
 8010546:	3334      	adds	r3, #52	; 0x34
 8010548:	460a      	mov	r2, r1
 801054a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	4413      	add	r3, r2
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d006      	beq.n	8010566 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	3301      	adds	r3, #1
 801055c:	61fb      	str	r3, [r7, #28]
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	2b0f      	cmp	r3, #15
 8010562:	d9e9      	bls.n	8010538 <prvInitialiseNewTask+0x58>
 8010564:	e000      	b.n	8010568 <prvInitialiseNewTask+0x88>
			{
				break;
 8010566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	2200      	movs	r2, #0
 801056c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010570:	e003      	b.n	801057a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010574:	2200      	movs	r2, #0
 8010576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057c:	2b06      	cmp	r3, #6
 801057e:	d901      	bls.n	8010584 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010580:	2306      	movs	r3, #6
 8010582:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010588:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801058e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010592:	2200      	movs	r2, #0
 8010594:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010598:	3304      	adds	r3, #4
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff f84c 	bl	800f638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	3318      	adds	r3, #24
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff f847 	bl	800f638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	f1c3 0207 	rsb	r2, r3, #7
 80105b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80105ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80105c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c2:	2200      	movs	r2, #0
 80105c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	2200      	movs	r2, #0
 80105cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	334c      	adds	r3, #76	; 0x4c
 80105d4:	224c      	movs	r2, #76	; 0x4c
 80105d6:	2100      	movs	r1, #0
 80105d8:	4618      	mov	r0, r3
 80105da:	f002 fba0 	bl	8012d1e <memset>
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	4a0c      	ldr	r2, [pc, #48]	; (8010614 <prvInitialiseNewTask+0x134>)
 80105e2:	651a      	str	r2, [r3, #80]	; 0x50
 80105e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e6:	4a0c      	ldr	r2, [pc, #48]	; (8010618 <prvInitialiseNewTask+0x138>)
 80105e8:	655a      	str	r2, [r3, #84]	; 0x54
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	4a0b      	ldr	r2, [pc, #44]	; (801061c <prvInitialiseNewTask+0x13c>)
 80105ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	68f9      	ldr	r1, [r7, #12]
 80105f4:	69b8      	ldr	r0, [r7, #24]
 80105f6:	f000 ffad 	bl	8011554 <pxPortInitialiseStack>
 80105fa:	4602      	mov	r2, r0
 80105fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010602:	2b00      	cmp	r3, #0
 8010604:	d002      	beq.n	801060c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801060a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801060c:	bf00      	nop
 801060e:	3720      	adds	r7, #32
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20008f00 	.word	0x20008f00
 8010618:	20008f68 	.word	0x20008f68
 801061c:	20008fd0 	.word	0x20008fd0

08010620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010628:	f001 f8a0 	bl	801176c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801062c:	4b2a      	ldr	r3, [pc, #168]	; (80106d8 <prvAddNewTaskToReadyList+0xb8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3301      	adds	r3, #1
 8010632:	4a29      	ldr	r2, [pc, #164]	; (80106d8 <prvAddNewTaskToReadyList+0xb8>)
 8010634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010636:	4b29      	ldr	r3, [pc, #164]	; (80106dc <prvAddNewTaskToReadyList+0xbc>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d109      	bne.n	8010652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801063e:	4a27      	ldr	r2, [pc, #156]	; (80106dc <prvAddNewTaskToReadyList+0xbc>)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010644:	4b24      	ldr	r3, [pc, #144]	; (80106d8 <prvAddNewTaskToReadyList+0xb8>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b01      	cmp	r3, #1
 801064a:	d110      	bne.n	801066e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801064c:	f000 fc7e 	bl	8010f4c <prvInitialiseTaskLists>
 8010650:	e00d      	b.n	801066e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010652:	4b23      	ldr	r3, [pc, #140]	; (80106e0 <prvAddNewTaskToReadyList+0xc0>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d109      	bne.n	801066e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801065a:	4b20      	ldr	r3, [pc, #128]	; (80106dc <prvAddNewTaskToReadyList+0xbc>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010664:	429a      	cmp	r2, r3
 8010666:	d802      	bhi.n	801066e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010668:	4a1c      	ldr	r2, [pc, #112]	; (80106dc <prvAddNewTaskToReadyList+0xbc>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801066e:	4b1d      	ldr	r3, [pc, #116]	; (80106e4 <prvAddNewTaskToReadyList+0xc4>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	4a1b      	ldr	r2, [pc, #108]	; (80106e4 <prvAddNewTaskToReadyList+0xc4>)
 8010676:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067c:	2201      	movs	r2, #1
 801067e:	409a      	lsls	r2, r3
 8010680:	4b19      	ldr	r3, [pc, #100]	; (80106e8 <prvAddNewTaskToReadyList+0xc8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4313      	orrs	r3, r2
 8010686:	4a18      	ldr	r2, [pc, #96]	; (80106e8 <prvAddNewTaskToReadyList+0xc8>)
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801068e:	4613      	mov	r3, r2
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4a15      	ldr	r2, [pc, #84]	; (80106ec <prvAddNewTaskToReadyList+0xcc>)
 8010698:	441a      	add	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3304      	adds	r3, #4
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7fe ffd6 	bl	800f652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80106a6:	f001 f895 	bl	80117d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80106aa:	4b0d      	ldr	r3, [pc, #52]	; (80106e0 <prvAddNewTaskToReadyList+0xc0>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00e      	beq.n	80106d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80106b2:	4b0a      	ldr	r3, [pc, #40]	; (80106dc <prvAddNewTaskToReadyList+0xbc>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106bc:	429a      	cmp	r2, r3
 80106be:	d207      	bcs.n	80106d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80106c0:	4b0b      	ldr	r3, [pc, #44]	; (80106f0 <prvAddNewTaskToReadyList+0xd0>)
 80106c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20000eb4 	.word	0x20000eb4
 80106dc:	20000db4 	.word	0x20000db4
 80106e0:	20000ec0 	.word	0x20000ec0
 80106e4:	20000ed0 	.word	0x20000ed0
 80106e8:	20000ebc 	.word	0x20000ebc
 80106ec:	20000db8 	.word	0x20000db8
 80106f0:	e000ed04 	.word	0xe000ed04

080106f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b08a      	sub	sp, #40	; 0x28
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80106fe:	2300      	movs	r3, #0
 8010700:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10c      	bne.n	8010722 <vTaskDelayUntil+0x2e>
	__asm volatile
 8010708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070c:	b672      	cpsid	i
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	b662      	cpsie	i
 801071c:	617b      	str	r3, [r7, #20]
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10c      	bne.n	8010742 <vTaskDelayUntil+0x4e>
	__asm volatile
 8010728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072c:	b672      	cpsid	i
 801072e:	f383 8811 	msr	BASEPRI, r3
 8010732:	f3bf 8f6f 	isb	sy
 8010736:	f3bf 8f4f 	dsb	sy
 801073a:	b662      	cpsie	i
 801073c:	613b      	str	r3, [r7, #16]
}
 801073e:	bf00      	nop
 8010740:	e7fe      	b.n	8010740 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8010742:	4b2b      	ldr	r3, [pc, #172]	; (80107f0 <vTaskDelayUntil+0xfc>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00c      	beq.n	8010764 <vTaskDelayUntil+0x70>
	__asm volatile
 801074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074e:	b672      	cpsid	i
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	b662      	cpsie	i
 801075e:	60fb      	str	r3, [r7, #12]
}
 8010760:	bf00      	nop
 8010762:	e7fe      	b.n	8010762 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8010764:	f000 f8ee 	bl	8010944 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010768:	4b22      	ldr	r3, [pc, #136]	; (80107f4 <vTaskDelayUntil+0x100>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	683a      	ldr	r2, [r7, #0]
 8010774:	4413      	add	r3, r2
 8010776:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	6a3a      	ldr	r2, [r7, #32]
 801077e:	429a      	cmp	r2, r3
 8010780:	d20b      	bcs.n	801079a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	69fa      	ldr	r2, [r7, #28]
 8010788:	429a      	cmp	r2, r3
 801078a:	d211      	bcs.n	80107b0 <vTaskDelayUntil+0xbc>
 801078c:	69fa      	ldr	r2, [r7, #28]
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	429a      	cmp	r2, r3
 8010792:	d90d      	bls.n	80107b0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8010794:	2301      	movs	r3, #1
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
 8010798:	e00a      	b.n	80107b0 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	69fa      	ldr	r2, [r7, #28]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d303      	bcc.n	80107ac <vTaskDelayUntil+0xb8>
 80107a4:	69fa      	ldr	r2, [r7, #28]
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d901      	bls.n	80107b0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80107ac:	2301      	movs	r3, #1
 80107ae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	69fa      	ldr	r2, [r7, #28]
 80107b4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80107b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d006      	beq.n	80107ca <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80107bc:	69fa      	ldr	r2, [r7, #28]
 80107be:	6a3b      	ldr	r3, [r7, #32]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	2100      	movs	r1, #0
 80107c4:	4618      	mov	r0, r3
 80107c6:	f000 fe5f 	bl	8011488 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80107ca:	f000 f8c9 	bl	8010960 <xTaskResumeAll>
 80107ce:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d107      	bne.n	80107e6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80107d6:	4b08      	ldr	r3, [pc, #32]	; (80107f8 <vTaskDelayUntil+0x104>)
 80107d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107dc:	601a      	str	r2, [r3, #0]
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107e6:	bf00      	nop
 80107e8:	3728      	adds	r7, #40	; 0x28
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	20000edc 	.word	0x20000edc
 80107f4:	20000eb8 	.word	0x20000eb8
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d019      	beq.n	8010842 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801080e:	4b14      	ldr	r3, [pc, #80]	; (8010860 <vTaskDelay+0x64>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00c      	beq.n	8010830 <vTaskDelay+0x34>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	60bb      	str	r3, [r7, #8]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010830:	f000 f888 	bl	8010944 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010834:	2100      	movs	r1, #0
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fe26 	bl	8011488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801083c:	f000 f890 	bl	8010960 <xTaskResumeAll>
 8010840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d107      	bne.n	8010858 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010848:	4b06      	ldr	r3, [pc, #24]	; (8010864 <vTaskDelay+0x68>)
 801084a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801084e:	601a      	str	r2, [r3, #0]
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010858:	bf00      	nop
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20000edc 	.word	0x20000edc
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	; 0x28
 801086c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801086e:	2300      	movs	r3, #0
 8010870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010872:	2300      	movs	r3, #0
 8010874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010876:	463a      	mov	r2, r7
 8010878:	1d39      	adds	r1, r7, #4
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	4618      	mov	r0, r3
 8010880:	f7f2 fd48 	bl	8003314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	9202      	str	r2, [sp, #8]
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	2300      	movs	r3, #0
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	2300      	movs	r3, #0
 8010894:	460a      	mov	r2, r1
 8010896:	4923      	ldr	r1, [pc, #140]	; (8010924 <vTaskStartScheduler+0xbc>)
 8010898:	4823      	ldr	r0, [pc, #140]	; (8010928 <vTaskStartScheduler+0xc0>)
 801089a:	f7ff fd79 	bl	8010390 <xTaskCreateStatic>
 801089e:	4603      	mov	r3, r0
 80108a0:	4a22      	ldr	r2, [pc, #136]	; (801092c <vTaskStartScheduler+0xc4>)
 80108a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80108a4:	4b21      	ldr	r3, [pc, #132]	; (801092c <vTaskStartScheduler+0xc4>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80108ac:	2301      	movs	r3, #1
 80108ae:	617b      	str	r3, [r7, #20]
 80108b0:	e001      	b.n	80108b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d11d      	bne.n	80108f8 <vTaskStartScheduler+0x90>
	__asm volatile
 80108bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c0:	b672      	cpsid	i
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	b662      	cpsie	i
 80108d0:	613b      	str	r3, [r7, #16]
}
 80108d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108d4:	4b16      	ldr	r3, [pc, #88]	; (8010930 <vTaskStartScheduler+0xc8>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	334c      	adds	r3, #76	; 0x4c
 80108da:	4a16      	ldr	r2, [pc, #88]	; (8010934 <vTaskStartScheduler+0xcc>)
 80108dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108de:	4b16      	ldr	r3, [pc, #88]	; (8010938 <vTaskStartScheduler+0xd0>)
 80108e0:	f04f 32ff 	mov.w	r2, #4294967295
 80108e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80108e6:	4b15      	ldr	r3, [pc, #84]	; (801093c <vTaskStartScheduler+0xd4>)
 80108e8:	2201      	movs	r2, #1
 80108ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80108ec:	4b14      	ldr	r3, [pc, #80]	; (8010940 <vTaskStartScheduler+0xd8>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80108f2:	f000 febd 	bl	8011670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80108f6:	e010      	b.n	801091a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fe:	d10c      	bne.n	801091a <vTaskStartScheduler+0xb2>
	__asm volatile
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	b672      	cpsid	i
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	b662      	cpsie	i
 8010914:	60fb      	str	r3, [r7, #12]
}
 8010916:	bf00      	nop
 8010918:	e7fe      	b.n	8010918 <vTaskStartScheduler+0xb0>
}
 801091a:	bf00      	nop
 801091c:	3718      	adds	r7, #24
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	080184fc 	.word	0x080184fc
 8010928:	08010f1d 	.word	0x08010f1d
 801092c:	20000ed8 	.word	0x20000ed8
 8010930:	20000db4 	.word	0x20000db4
 8010934:	20000070 	.word	0x20000070
 8010938:	20000ed4 	.word	0x20000ed4
 801093c:	20000ec0 	.word	0x20000ec0
 8010940:	20000eb8 	.word	0x20000eb8

08010944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010944:	b480      	push	{r7}
 8010946:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010948:	4b04      	ldr	r3, [pc, #16]	; (801095c <vTaskSuspendAll+0x18>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	3301      	adds	r3, #1
 801094e:	4a03      	ldr	r2, [pc, #12]	; (801095c <vTaskSuspendAll+0x18>)
 8010950:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010952:	bf00      	nop
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	20000edc 	.word	0x20000edc

08010960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010966:	2300      	movs	r3, #0
 8010968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801096a:	2300      	movs	r3, #0
 801096c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801096e:	4b42      	ldr	r3, [pc, #264]	; (8010a78 <xTaskResumeAll+0x118>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d10c      	bne.n	8010990 <xTaskResumeAll+0x30>
	__asm volatile
 8010976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097a:	b672      	cpsid	i
 801097c:	f383 8811 	msr	BASEPRI, r3
 8010980:	f3bf 8f6f 	isb	sy
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	b662      	cpsie	i
 801098a:	603b      	str	r3, [r7, #0]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010990:	f000 feec 	bl	801176c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010994:	4b38      	ldr	r3, [pc, #224]	; (8010a78 <xTaskResumeAll+0x118>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3b01      	subs	r3, #1
 801099a:	4a37      	ldr	r2, [pc, #220]	; (8010a78 <xTaskResumeAll+0x118>)
 801099c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801099e:	4b36      	ldr	r3, [pc, #216]	; (8010a78 <xTaskResumeAll+0x118>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d161      	bne.n	8010a6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80109a6:	4b35      	ldr	r3, [pc, #212]	; (8010a7c <xTaskResumeAll+0x11c>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d05d      	beq.n	8010a6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80109ae:	e02e      	b.n	8010a0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109b0:	4b33      	ldr	r3, [pc, #204]	; (8010a80 <xTaskResumeAll+0x120>)
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	3318      	adds	r3, #24
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fe fea5 	bl	800f70c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3304      	adds	r3, #4
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fe fea0 	bl	800f70c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d0:	2201      	movs	r2, #1
 80109d2:	409a      	lsls	r2, r3
 80109d4:	4b2b      	ldr	r3, [pc, #172]	; (8010a84 <xTaskResumeAll+0x124>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4313      	orrs	r3, r2
 80109da:	4a2a      	ldr	r2, [pc, #168]	; (8010a84 <xTaskResumeAll+0x124>)
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e2:	4613      	mov	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	4413      	add	r3, r2
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4a27      	ldr	r2, [pc, #156]	; (8010a88 <xTaskResumeAll+0x128>)
 80109ec:	441a      	add	r2, r3
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	3304      	adds	r3, #4
 80109f2:	4619      	mov	r1, r3
 80109f4:	4610      	mov	r0, r2
 80109f6:	f7fe fe2c 	bl	800f652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109fe:	4b23      	ldr	r3, [pc, #140]	; (8010a8c <xTaskResumeAll+0x12c>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d302      	bcc.n	8010a0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010a08:	4b21      	ldr	r3, [pc, #132]	; (8010a90 <xTaskResumeAll+0x130>)
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a0e:	4b1c      	ldr	r3, [pc, #112]	; (8010a80 <xTaskResumeAll+0x120>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1cc      	bne.n	80109b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010a1c:	f000 fb3a 	bl	8011094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010a20:	4b1c      	ldr	r3, [pc, #112]	; (8010a94 <xTaskResumeAll+0x134>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d010      	beq.n	8010a4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010a2c:	f000 f846 	bl	8010abc <xTaskIncrementTick>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d002      	beq.n	8010a3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010a36:	4b16      	ldr	r3, [pc, #88]	; (8010a90 <xTaskResumeAll+0x130>)
 8010a38:	2201      	movs	r2, #1
 8010a3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1f1      	bne.n	8010a2c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010a48:	4b12      	ldr	r3, [pc, #72]	; (8010a94 <xTaskResumeAll+0x134>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010a4e:	4b10      	ldr	r3, [pc, #64]	; (8010a90 <xTaskResumeAll+0x130>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d009      	beq.n	8010a6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010a56:	2301      	movs	r3, #1
 8010a58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010a5a:	4b0f      	ldr	r3, [pc, #60]	; (8010a98 <xTaskResumeAll+0x138>)
 8010a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	f3bf 8f4f 	dsb	sy
 8010a66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a6a:	f000 feb3 	bl	80117d4 <vPortExitCritical>

	return xAlreadyYielded;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	20000edc 	.word	0x20000edc
 8010a7c:	20000eb4 	.word	0x20000eb4
 8010a80:	20000e74 	.word	0x20000e74
 8010a84:	20000ebc 	.word	0x20000ebc
 8010a88:	20000db8 	.word	0x20000db8
 8010a8c:	20000db4 	.word	0x20000db4
 8010a90:	20000ec8 	.word	0x20000ec8
 8010a94:	20000ec4 	.word	0x20000ec4
 8010a98:	e000ed04 	.word	0xe000ed04

08010a9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010aa2:	4b05      	ldr	r3, [pc, #20]	; (8010ab8 <xTaskGetTickCount+0x1c>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010aa8:	687b      	ldr	r3, [r7, #4]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	20000eb8 	.word	0x20000eb8

08010abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ac6:	4b4f      	ldr	r3, [pc, #316]	; (8010c04 <xTaskIncrementTick+0x148>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f040 808a 	bne.w	8010be4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ad0:	4b4d      	ldr	r3, [pc, #308]	; (8010c08 <xTaskIncrementTick+0x14c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010ad8:	4a4b      	ldr	r2, [pc, #300]	; (8010c08 <xTaskIncrementTick+0x14c>)
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d122      	bne.n	8010b2a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ae4:	4b49      	ldr	r3, [pc, #292]	; (8010c0c <xTaskIncrementTick+0x150>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00c      	beq.n	8010b08 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	b672      	cpsid	i
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	b662      	cpsie	i
 8010b02:	603b      	str	r3, [r7, #0]
}
 8010b04:	bf00      	nop
 8010b06:	e7fe      	b.n	8010b06 <xTaskIncrementTick+0x4a>
 8010b08:	4b40      	ldr	r3, [pc, #256]	; (8010c0c <xTaskIncrementTick+0x150>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	4b40      	ldr	r3, [pc, #256]	; (8010c10 <xTaskIncrementTick+0x154>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a3e      	ldr	r2, [pc, #248]	; (8010c0c <xTaskIncrementTick+0x150>)
 8010b14:	6013      	str	r3, [r2, #0]
 8010b16:	4a3e      	ldr	r2, [pc, #248]	; (8010c10 <xTaskIncrementTick+0x154>)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	4b3d      	ldr	r3, [pc, #244]	; (8010c14 <xTaskIncrementTick+0x158>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3301      	adds	r3, #1
 8010b22:	4a3c      	ldr	r2, [pc, #240]	; (8010c14 <xTaskIncrementTick+0x158>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	f000 fab5 	bl	8011094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b2a:	4b3b      	ldr	r3, [pc, #236]	; (8010c18 <xTaskIncrementTick+0x15c>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	693a      	ldr	r2, [r7, #16]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d348      	bcc.n	8010bc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b34:	4b35      	ldr	r3, [pc, #212]	; (8010c0c <xTaskIncrementTick+0x150>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d104      	bne.n	8010b48 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b3e:	4b36      	ldr	r3, [pc, #216]	; (8010c18 <xTaskIncrementTick+0x15c>)
 8010b40:	f04f 32ff 	mov.w	r2, #4294967295
 8010b44:	601a      	str	r2, [r3, #0]
					break;
 8010b46:	e03e      	b.n	8010bc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b48:	4b30      	ldr	r3, [pc, #192]	; (8010c0c <xTaskIncrementTick+0x150>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010b58:	693a      	ldr	r2, [r7, #16]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d203      	bcs.n	8010b68 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010b60:	4a2d      	ldr	r2, [pc, #180]	; (8010c18 <xTaskIncrementTick+0x15c>)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b66:	e02e      	b.n	8010bc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe fdcd 	bl	800f70c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d004      	beq.n	8010b84 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	3318      	adds	r3, #24
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fe fdc4 	bl	800f70c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b88:	2201      	movs	r2, #1
 8010b8a:	409a      	lsls	r2, r3
 8010b8c:	4b23      	ldr	r3, [pc, #140]	; (8010c1c <xTaskIncrementTick+0x160>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	4a22      	ldr	r2, [pc, #136]	; (8010c1c <xTaskIncrementTick+0x160>)
 8010b94:	6013      	str	r3, [r2, #0]
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4413      	add	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4a1f      	ldr	r2, [pc, #124]	; (8010c20 <xTaskIncrementTick+0x164>)
 8010ba4:	441a      	add	r2, r3
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	3304      	adds	r3, #4
 8010baa:	4619      	mov	r1, r3
 8010bac:	4610      	mov	r0, r2
 8010bae:	f7fe fd50 	bl	800f652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bb6:	4b1b      	ldr	r3, [pc, #108]	; (8010c24 <xTaskIncrementTick+0x168>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d3b9      	bcc.n	8010b34 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bc4:	e7b6      	b.n	8010b34 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010bc6:	4b17      	ldr	r3, [pc, #92]	; (8010c24 <xTaskIncrementTick+0x168>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bcc:	4914      	ldr	r1, [pc, #80]	; (8010c20 <xTaskIncrementTick+0x164>)
 8010bce:	4613      	mov	r3, r2
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	4413      	add	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	440b      	add	r3, r1
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d907      	bls.n	8010bee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8010bde:	2301      	movs	r3, #1
 8010be0:	617b      	str	r3, [r7, #20]
 8010be2:	e004      	b.n	8010bee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010be4:	4b10      	ldr	r3, [pc, #64]	; (8010c28 <xTaskIncrementTick+0x16c>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	3301      	adds	r3, #1
 8010bea:	4a0f      	ldr	r2, [pc, #60]	; (8010c28 <xTaskIncrementTick+0x16c>)
 8010bec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010bee:	4b0f      	ldr	r3, [pc, #60]	; (8010c2c <xTaskIncrementTick+0x170>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d001      	beq.n	8010bfa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010bfa:	697b      	ldr	r3, [r7, #20]
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3718      	adds	r7, #24
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	20000edc 	.word	0x20000edc
 8010c08:	20000eb8 	.word	0x20000eb8
 8010c0c:	20000e6c 	.word	0x20000e6c
 8010c10:	20000e70 	.word	0x20000e70
 8010c14:	20000ecc 	.word	0x20000ecc
 8010c18:	20000ed4 	.word	0x20000ed4
 8010c1c:	20000ebc 	.word	0x20000ebc
 8010c20:	20000db8 	.word	0x20000db8
 8010c24:	20000db4 	.word	0x20000db4
 8010c28:	20000ec4 	.word	0x20000ec4
 8010c2c:	20000ec8 	.word	0x20000ec8

08010c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010c36:	4b2a      	ldr	r3, [pc, #168]	; (8010ce0 <vTaskSwitchContext+0xb0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010c3e:	4b29      	ldr	r3, [pc, #164]	; (8010ce4 <vTaskSwitchContext+0xb4>)
 8010c40:	2201      	movs	r2, #1
 8010c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010c44:	e046      	b.n	8010cd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010c46:	4b27      	ldr	r3, [pc, #156]	; (8010ce4 <vTaskSwitchContext+0xb4>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c4c:	4b26      	ldr	r3, [pc, #152]	; (8010ce8 <vTaskSwitchContext+0xb8>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	fab3 f383 	clz	r3, r3
 8010c58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010c5a:	7afb      	ldrb	r3, [r7, #11]
 8010c5c:	f1c3 031f 	rsb	r3, r3, #31
 8010c60:	617b      	str	r3, [r7, #20]
 8010c62:	4922      	ldr	r1, [pc, #136]	; (8010cec <vTaskSwitchContext+0xbc>)
 8010c64:	697a      	ldr	r2, [r7, #20]
 8010c66:	4613      	mov	r3, r2
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	4413      	add	r3, r2
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	440b      	add	r3, r1
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d10c      	bne.n	8010c90 <vTaskSwitchContext+0x60>
	__asm volatile
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	b672      	cpsid	i
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	b662      	cpsie	i
 8010c8a:	607b      	str	r3, [r7, #4]
}
 8010c8c:	bf00      	nop
 8010c8e:	e7fe      	b.n	8010c8e <vTaskSwitchContext+0x5e>
 8010c90:	697a      	ldr	r2, [r7, #20]
 8010c92:	4613      	mov	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4a14      	ldr	r2, [pc, #80]	; (8010cec <vTaskSwitchContext+0xbc>)
 8010c9c:	4413      	add	r3, r2
 8010c9e:	613b      	str	r3, [r7, #16]
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	685a      	ldr	r2, [r3, #4]
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	605a      	str	r2, [r3, #4]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	3308      	adds	r3, #8
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d104      	bne.n	8010cc0 <vTaskSwitchContext+0x90>
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	685a      	ldr	r2, [r3, #4]
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	605a      	str	r2, [r3, #4]
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	4a0a      	ldr	r2, [pc, #40]	; (8010cf0 <vTaskSwitchContext+0xc0>)
 8010cc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010cca:	4b09      	ldr	r3, [pc, #36]	; (8010cf0 <vTaskSwitchContext+0xc0>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	334c      	adds	r3, #76	; 0x4c
 8010cd0:	4a08      	ldr	r2, [pc, #32]	; (8010cf4 <vTaskSwitchContext+0xc4>)
 8010cd2:	6013      	str	r3, [r2, #0]
}
 8010cd4:	bf00      	nop
 8010cd6:	371c      	adds	r7, #28
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr
 8010ce0:	20000edc 	.word	0x20000edc
 8010ce4:	20000ec8 	.word	0x20000ec8
 8010ce8:	20000ebc 	.word	0x20000ebc
 8010cec:	20000db8 	.word	0x20000db8
 8010cf0:	20000db4 	.word	0x20000db4
 8010cf4:	20000070 	.word	0x20000070

08010cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10c      	bne.n	8010d22 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	b672      	cpsid	i
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	b662      	cpsie	i
 8010d1c:	60fb      	str	r3, [r7, #12]
}
 8010d1e:	bf00      	nop
 8010d20:	e7fe      	b.n	8010d20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d22:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <vTaskPlaceOnEventList+0x48>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	3318      	adds	r3, #24
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7fe fcb5 	bl	800f69a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d30:	2101      	movs	r1, #1
 8010d32:	6838      	ldr	r0, [r7, #0]
 8010d34:	f000 fba8 	bl	8011488 <prvAddCurrentTaskToDelayedList>
}
 8010d38:	bf00      	nop
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	20000db4 	.word	0x20000db4

08010d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10c      	bne.n	8010d74 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	b672      	cpsid	i
 8010d60:	f383 8811 	msr	BASEPRI, r3
 8010d64:	f3bf 8f6f 	isb	sy
 8010d68:	f3bf 8f4f 	dsb	sy
 8010d6c:	b662      	cpsie	i
 8010d6e:	60fb      	str	r3, [r7, #12]
}
 8010d70:	bf00      	nop
 8010d72:	e7fe      	b.n	8010d72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	3318      	adds	r3, #24
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe fcc7 	bl	800f70c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d7e:	4b1d      	ldr	r3, [pc, #116]	; (8010df4 <xTaskRemoveFromEventList+0xb0>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d11c      	bne.n	8010dc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	3304      	adds	r3, #4
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fe fcbe 	bl	800f70c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d94:	2201      	movs	r2, #1
 8010d96:	409a      	lsls	r2, r3
 8010d98:	4b17      	ldr	r3, [pc, #92]	; (8010df8 <xTaskRemoveFromEventList+0xb4>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	4a16      	ldr	r2, [pc, #88]	; (8010df8 <xTaskRemoveFromEventList+0xb4>)
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da6:	4613      	mov	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	4a13      	ldr	r2, [pc, #76]	; (8010dfc <xTaskRemoveFromEventList+0xb8>)
 8010db0:	441a      	add	r2, r3
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	3304      	adds	r3, #4
 8010db6:	4619      	mov	r1, r3
 8010db8:	4610      	mov	r0, r2
 8010dba:	f7fe fc4a 	bl	800f652 <vListInsertEnd>
 8010dbe:	e005      	b.n	8010dcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	3318      	adds	r3, #24
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	480e      	ldr	r0, [pc, #56]	; (8010e00 <xTaskRemoveFromEventList+0xbc>)
 8010dc8:	f7fe fc43 	bl	800f652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd0:	4b0c      	ldr	r3, [pc, #48]	; (8010e04 <xTaskRemoveFromEventList+0xc0>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d905      	bls.n	8010de6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010dde:	4b0a      	ldr	r3, [pc, #40]	; (8010e08 <xTaskRemoveFromEventList+0xc4>)
 8010de0:	2201      	movs	r2, #1
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	e001      	b.n	8010dea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010de6:	2300      	movs	r3, #0
 8010de8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010dea:	697b      	ldr	r3, [r7, #20]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	20000edc 	.word	0x20000edc
 8010df8:	20000ebc 	.word	0x20000ebc
 8010dfc:	20000db8 	.word	0x20000db8
 8010e00:	20000e74 	.word	0x20000e74
 8010e04:	20000db4 	.word	0x20000db4
 8010e08:	20000ec8 	.word	0x20000ec8

08010e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e14:	4b06      	ldr	r3, [pc, #24]	; (8010e30 <vTaskInternalSetTimeOutState+0x24>)
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e1c:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <vTaskInternalSetTimeOutState+0x28>)
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	605a      	str	r2, [r3, #4]
}
 8010e24:	bf00      	nop
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	20000ecc 	.word	0x20000ecc
 8010e34:	20000eb8 	.word	0x20000eb8

08010e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10c      	bne.n	8010e62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4c:	b672      	cpsid	i
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	b662      	cpsie	i
 8010e5c:	613b      	str	r3, [r7, #16]
}
 8010e5e:	bf00      	nop
 8010e60:	e7fe      	b.n	8010e60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10c      	bne.n	8010e82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6c:	b672      	cpsid	i
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	b662      	cpsie	i
 8010e7c:	60fb      	str	r3, [r7, #12]
}
 8010e7e:	bf00      	nop
 8010e80:	e7fe      	b.n	8010e80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010e82:	f000 fc73 	bl	801176c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010e86:	4b1d      	ldr	r3, [pc, #116]	; (8010efc <xTaskCheckForTimeOut+0xc4>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	69ba      	ldr	r2, [r7, #24]
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e9e:	d102      	bne.n	8010ea6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	e023      	b.n	8010eee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	4b15      	ldr	r3, [pc, #84]	; (8010f00 <xTaskCheckForTimeOut+0xc8>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d007      	beq.n	8010ec2 <xTaskCheckForTimeOut+0x8a>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	69ba      	ldr	r2, [r7, #24]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d302      	bcc.n	8010ec2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	61fb      	str	r3, [r7, #28]
 8010ec0:	e015      	b.n	8010eee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d20b      	bcs.n	8010ee4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	1ad2      	subs	r2, r2, r3
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7ff ff97 	bl	8010e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	61fb      	str	r3, [r7, #28]
 8010ee2:	e004      	b.n	8010eee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010eea:	2301      	movs	r3, #1
 8010eec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010eee:	f000 fc71 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 8010ef2:	69fb      	ldr	r3, [r7, #28]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	20000eb8 	.word	0x20000eb8
 8010f00:	20000ecc 	.word	0x20000ecc

08010f04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f04:	b480      	push	{r7}
 8010f06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010f08:	4b03      	ldr	r3, [pc, #12]	; (8010f18 <vTaskMissedYield+0x14>)
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	601a      	str	r2, [r3, #0]
}
 8010f0e:	bf00      	nop
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr
 8010f18:	20000ec8 	.word	0x20000ec8

08010f1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010f24:	f000 f852 	bl	8010fcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010f28:	4b06      	ldr	r3, [pc, #24]	; (8010f44 <prvIdleTask+0x28>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d9f9      	bls.n	8010f24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010f30:	4b05      	ldr	r3, [pc, #20]	; (8010f48 <prvIdleTask+0x2c>)
 8010f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010f40:	e7f0      	b.n	8010f24 <prvIdleTask+0x8>
 8010f42:	bf00      	nop
 8010f44:	20000db8 	.word	0x20000db8
 8010f48:	e000ed04 	.word	0xe000ed04

08010f4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f52:	2300      	movs	r3, #0
 8010f54:	607b      	str	r3, [r7, #4]
 8010f56:	e00c      	b.n	8010f72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	4413      	add	r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	4a12      	ldr	r2, [pc, #72]	; (8010fac <prvInitialiseTaskLists+0x60>)
 8010f64:	4413      	add	r3, r2
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe fb46 	bl	800f5f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	607b      	str	r3, [r7, #4]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b06      	cmp	r3, #6
 8010f76:	d9ef      	bls.n	8010f58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010f78:	480d      	ldr	r0, [pc, #52]	; (8010fb0 <prvInitialiseTaskLists+0x64>)
 8010f7a:	f7fe fb3d 	bl	800f5f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010f7e:	480d      	ldr	r0, [pc, #52]	; (8010fb4 <prvInitialiseTaskLists+0x68>)
 8010f80:	f7fe fb3a 	bl	800f5f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010f84:	480c      	ldr	r0, [pc, #48]	; (8010fb8 <prvInitialiseTaskLists+0x6c>)
 8010f86:	f7fe fb37 	bl	800f5f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010f8a:	480c      	ldr	r0, [pc, #48]	; (8010fbc <prvInitialiseTaskLists+0x70>)
 8010f8c:	f7fe fb34 	bl	800f5f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010f90:	480b      	ldr	r0, [pc, #44]	; (8010fc0 <prvInitialiseTaskLists+0x74>)
 8010f92:	f7fe fb31 	bl	800f5f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010f96:	4b0b      	ldr	r3, [pc, #44]	; (8010fc4 <prvInitialiseTaskLists+0x78>)
 8010f98:	4a05      	ldr	r2, [pc, #20]	; (8010fb0 <prvInitialiseTaskLists+0x64>)
 8010f9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010f9c:	4b0a      	ldr	r3, [pc, #40]	; (8010fc8 <prvInitialiseTaskLists+0x7c>)
 8010f9e:	4a05      	ldr	r2, [pc, #20]	; (8010fb4 <prvInitialiseTaskLists+0x68>)
 8010fa0:	601a      	str	r2, [r3, #0]
}
 8010fa2:	bf00      	nop
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	20000db8 	.word	0x20000db8
 8010fb0:	20000e44 	.word	0x20000e44
 8010fb4:	20000e58 	.word	0x20000e58
 8010fb8:	20000e74 	.word	0x20000e74
 8010fbc:	20000e88 	.word	0x20000e88
 8010fc0:	20000ea0 	.word	0x20000ea0
 8010fc4:	20000e6c 	.word	0x20000e6c
 8010fc8:	20000e70 	.word	0x20000e70

08010fcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010fd2:	e019      	b.n	8011008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010fd4:	f000 fbca 	bl	801176c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd8:	4b10      	ldr	r3, [pc, #64]	; (801101c <prvCheckTasksWaitingTermination+0x50>)
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	3304      	adds	r3, #4
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fe fb91 	bl	800f70c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010fea:	4b0d      	ldr	r3, [pc, #52]	; (8011020 <prvCheckTasksWaitingTermination+0x54>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3b01      	subs	r3, #1
 8010ff0:	4a0b      	ldr	r2, [pc, #44]	; (8011020 <prvCheckTasksWaitingTermination+0x54>)
 8010ff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ff4:	4b0b      	ldr	r3, [pc, #44]	; (8011024 <prvCheckTasksWaitingTermination+0x58>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	4a0a      	ldr	r2, [pc, #40]	; (8011024 <prvCheckTasksWaitingTermination+0x58>)
 8010ffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010ffe:	f000 fbe9 	bl	80117d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f810 	bl	8011028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011008:	4b06      	ldr	r3, [pc, #24]	; (8011024 <prvCheckTasksWaitingTermination+0x58>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1e1      	bne.n	8010fd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011010:	bf00      	nop
 8011012:	bf00      	nop
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	20000e88 	.word	0x20000e88
 8011020:	20000eb4 	.word	0x20000eb4
 8011024:	20000e9c 	.word	0x20000e9c

08011028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	334c      	adds	r3, #76	; 0x4c
 8011034:	4618      	mov	r0, r3
 8011036:	f001 fea1 	bl	8012d7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011040:	2b00      	cmp	r3, #0
 8011042:	d108      	bne.n	8011056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011048:	4618      	mov	r0, r3
 801104a:	f000 fd85 	bl	8011b58 <vPortFree>
				vPortFree( pxTCB );
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fd82 	bl	8011b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011054:	e01a      	b.n	801108c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801105c:	2b01      	cmp	r3, #1
 801105e:	d103      	bne.n	8011068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f000 fd79 	bl	8011b58 <vPortFree>
	}
 8011066:	e011      	b.n	801108c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801106e:	2b02      	cmp	r3, #2
 8011070:	d00c      	beq.n	801108c <prvDeleteTCB+0x64>
	__asm volatile
 8011072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011076:	b672      	cpsid	i
 8011078:	f383 8811 	msr	BASEPRI, r3
 801107c:	f3bf 8f6f 	isb	sy
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	b662      	cpsie	i
 8011086:	60fb      	str	r3, [r7, #12]
}
 8011088:	bf00      	nop
 801108a:	e7fe      	b.n	801108a <prvDeleteTCB+0x62>
	}
 801108c:	bf00      	nop
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801109a:	4b0c      	ldr	r3, [pc, #48]	; (80110cc <prvResetNextTaskUnblockTime+0x38>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d104      	bne.n	80110ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80110a4:	4b0a      	ldr	r3, [pc, #40]	; (80110d0 <prvResetNextTaskUnblockTime+0x3c>)
 80110a6:	f04f 32ff 	mov.w	r2, #4294967295
 80110aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80110ac:	e008      	b.n	80110c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110ae:	4b07      	ldr	r3, [pc, #28]	; (80110cc <prvResetNextTaskUnblockTime+0x38>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	4a04      	ldr	r2, [pc, #16]	; (80110d0 <prvResetNextTaskUnblockTime+0x3c>)
 80110be:	6013      	str	r3, [r2, #0]
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr
 80110cc:	20000e6c 	.word	0x20000e6c
 80110d0:	20000ed4 	.word	0x20000ed4

080110d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80110da:	4b0b      	ldr	r3, [pc, #44]	; (8011108 <xTaskGetSchedulerState+0x34>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d102      	bne.n	80110e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80110e2:	2301      	movs	r3, #1
 80110e4:	607b      	str	r3, [r7, #4]
 80110e6:	e008      	b.n	80110fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110e8:	4b08      	ldr	r3, [pc, #32]	; (801110c <xTaskGetSchedulerState+0x38>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80110f0:	2302      	movs	r3, #2
 80110f2:	607b      	str	r3, [r7, #4]
 80110f4:	e001      	b.n	80110fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80110f6:	2300      	movs	r3, #0
 80110f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80110fa:	687b      	ldr	r3, [r7, #4]
	}
 80110fc:	4618      	mov	r0, r3
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	20000ec0 	.word	0x20000ec0
 801110c:	20000edc 	.word	0x20000edc

08011110 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801111c:	2300      	movs	r3, #0
 801111e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d069      	beq.n	80111fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801112a:	4b36      	ldr	r3, [pc, #216]	; (8011204 <xTaskPriorityInherit+0xf4>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	429a      	cmp	r2, r3
 8011132:	d259      	bcs.n	80111e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	2b00      	cmp	r3, #0
 801113a:	db06      	blt.n	801114a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801113c:	4b31      	ldr	r3, [pc, #196]	; (8011204 <xTaskPriorityInherit+0xf4>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011142:	f1c3 0207 	rsb	r2, r3, #7
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	6959      	ldr	r1, [r3, #20]
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011152:	4613      	mov	r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4a2b      	ldr	r2, [pc, #172]	; (8011208 <xTaskPriorityInherit+0xf8>)
 801115c:	4413      	add	r3, r2
 801115e:	4299      	cmp	r1, r3
 8011160:	d13a      	bne.n	80111d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	3304      	adds	r3, #4
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fad0 	bl	800f70c <uxListRemove>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d115      	bne.n	801119e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011176:	4924      	ldr	r1, [pc, #144]	; (8011208 <xTaskPriorityInherit+0xf8>)
 8011178:	4613      	mov	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	4413      	add	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	440b      	add	r3, r1
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10a      	bne.n	801119e <xTaskPriorityInherit+0x8e>
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118c:	2201      	movs	r2, #1
 801118e:	fa02 f303 	lsl.w	r3, r2, r3
 8011192:	43da      	mvns	r2, r3
 8011194:	4b1d      	ldr	r3, [pc, #116]	; (801120c <xTaskPriorityInherit+0xfc>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4013      	ands	r3, r2
 801119a:	4a1c      	ldr	r2, [pc, #112]	; (801120c <xTaskPriorityInherit+0xfc>)
 801119c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801119e:	4b19      	ldr	r3, [pc, #100]	; (8011204 <xTaskPriorityInherit+0xf4>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ac:	2201      	movs	r2, #1
 80111ae:	409a      	lsls	r2, r3
 80111b0:	4b16      	ldr	r3, [pc, #88]	; (801120c <xTaskPriorityInherit+0xfc>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4313      	orrs	r3, r2
 80111b6:	4a15      	ldr	r2, [pc, #84]	; (801120c <xTaskPriorityInherit+0xfc>)
 80111b8:	6013      	str	r3, [r2, #0]
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111be:	4613      	mov	r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4413      	add	r3, r2
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	4a10      	ldr	r2, [pc, #64]	; (8011208 <xTaskPriorityInherit+0xf8>)
 80111c8:	441a      	add	r2, r3
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	3304      	adds	r3, #4
 80111ce:	4619      	mov	r1, r3
 80111d0:	4610      	mov	r0, r2
 80111d2:	f7fe fa3e 	bl	800f652 <vListInsertEnd>
 80111d6:	e004      	b.n	80111e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80111d8:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <xTaskPriorityInherit+0xf4>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80111e2:	2301      	movs	r3, #1
 80111e4:	60fb      	str	r3, [r7, #12]
 80111e6:	e008      	b.n	80111fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111ec:	4b05      	ldr	r3, [pc, #20]	; (8011204 <xTaskPriorityInherit+0xf4>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d201      	bcs.n	80111fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80111f6:	2301      	movs	r3, #1
 80111f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80111fa:	68fb      	ldr	r3, [r7, #12]
	}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	20000db4 	.word	0x20000db4
 8011208:	20000db8 	.word	0x20000db8
 801120c:	20000ebc 	.word	0x20000ebc

08011210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011210:	b580      	push	{r7, lr}
 8011212:	b086      	sub	sp, #24
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801121c:	2300      	movs	r3, #0
 801121e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d072      	beq.n	801130c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011226:	4b3c      	ldr	r3, [pc, #240]	; (8011318 <xTaskPriorityDisinherit+0x108>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	429a      	cmp	r2, r3
 801122e:	d00c      	beq.n	801124a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011234:	b672      	cpsid	i
 8011236:	f383 8811 	msr	BASEPRI, r3
 801123a:	f3bf 8f6f 	isb	sy
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	b662      	cpsie	i
 8011244:	60fb      	str	r3, [r7, #12]
}
 8011246:	bf00      	nop
 8011248:	e7fe      	b.n	8011248 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801124e:	2b00      	cmp	r3, #0
 8011250:	d10c      	bne.n	801126c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	b672      	cpsid	i
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	b662      	cpsie	i
 8011266:	60bb      	str	r3, [r7, #8]
}
 8011268:	bf00      	nop
 801126a:	e7fe      	b.n	801126a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011270:	1e5a      	subs	r2, r3, #1
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801127e:	429a      	cmp	r2, r3
 8011280:	d044      	beq.n	801130c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011286:	2b00      	cmp	r3, #0
 8011288:	d140      	bne.n	801130c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	3304      	adds	r3, #4
 801128e:	4618      	mov	r0, r3
 8011290:	f7fe fa3c 	bl	800f70c <uxListRemove>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d115      	bne.n	80112c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801129e:	491f      	ldr	r1, [pc, #124]	; (801131c <xTaskPriorityDisinherit+0x10c>)
 80112a0:	4613      	mov	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	440b      	add	r3, r1
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10a      	bne.n	80112c6 <xTaskPriorityDisinherit+0xb6>
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b4:	2201      	movs	r2, #1
 80112b6:	fa02 f303 	lsl.w	r3, r2, r3
 80112ba:	43da      	mvns	r2, r3
 80112bc:	4b18      	ldr	r3, [pc, #96]	; (8011320 <xTaskPriorityDisinherit+0x110>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4013      	ands	r3, r2
 80112c2:	4a17      	ldr	r2, [pc, #92]	; (8011320 <xTaskPriorityDisinherit+0x110>)
 80112c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d2:	f1c3 0207 	rsb	r2, r3, #7
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112de:	2201      	movs	r2, #1
 80112e0:	409a      	lsls	r2, r3
 80112e2:	4b0f      	ldr	r3, [pc, #60]	; (8011320 <xTaskPriorityDisinherit+0x110>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	4a0d      	ldr	r2, [pc, #52]	; (8011320 <xTaskPriorityDisinherit+0x110>)
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f0:	4613      	mov	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	4a08      	ldr	r2, [pc, #32]	; (801131c <xTaskPriorityDisinherit+0x10c>)
 80112fa:	441a      	add	r2, r3
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	3304      	adds	r3, #4
 8011300:	4619      	mov	r1, r3
 8011302:	4610      	mov	r0, r2
 8011304:	f7fe f9a5 	bl	800f652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011308:	2301      	movs	r3, #1
 801130a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801130c:	697b      	ldr	r3, [r7, #20]
	}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20000db4 	.word	0x20000db4
 801131c:	20000db8 	.word	0x20000db8
 8011320:	20000ebc 	.word	0x20000ebc

08011324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011332:	2301      	movs	r3, #1
 8011334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	f000 8087 	beq.w	801144c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10c      	bne.n	8011360 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8011346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134a:	b672      	cpsid	i
 801134c:	f383 8811 	msr	BASEPRI, r3
 8011350:	f3bf 8f6f 	isb	sy
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	b662      	cpsie	i
 801135a:	60fb      	str	r3, [r7, #12]
}
 801135c:	bf00      	nop
 801135e:	e7fe      	b.n	801135e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d902      	bls.n	8011370 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	61fb      	str	r3, [r7, #28]
 801136e:	e002      	b.n	8011376 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011374:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801137a:	69fa      	ldr	r2, [r7, #28]
 801137c:	429a      	cmp	r2, r3
 801137e:	d065      	beq.n	801144c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	429a      	cmp	r2, r3
 8011388:	d160      	bne.n	801144c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801138a:	4b32      	ldr	r3, [pc, #200]	; (8011454 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	69ba      	ldr	r2, [r7, #24]
 8011390:	429a      	cmp	r2, r3
 8011392:	d10c      	bne.n	80113ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8011394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011398:	b672      	cpsid	i
 801139a:	f383 8811 	msr	BASEPRI, r3
 801139e:	f3bf 8f6f 	isb	sy
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	b662      	cpsie	i
 80113a8:	60bb      	str	r3, [r7, #8]
}
 80113aa:	bf00      	nop
 80113ac:	e7fe      	b.n	80113ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	69fa      	ldr	r2, [r7, #28]
 80113b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	699b      	ldr	r3, [r3, #24]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	db04      	blt.n	80113cc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	f1c3 0207 	rsb	r2, r3, #7
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	6959      	ldr	r1, [r3, #20]
 80113d0:	693a      	ldr	r2, [r7, #16]
 80113d2:	4613      	mov	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4413      	add	r3, r2
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4a1f      	ldr	r2, [pc, #124]	; (8011458 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80113dc:	4413      	add	r3, r2
 80113de:	4299      	cmp	r1, r3
 80113e0:	d134      	bne.n	801144c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	3304      	adds	r3, #4
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fe f990 	bl	800f70c <uxListRemove>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d115      	bne.n	801141e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f6:	4918      	ldr	r1, [pc, #96]	; (8011458 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80113f8:	4613      	mov	r3, r2
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	440b      	add	r3, r1
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10a      	bne.n	801141e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8011408:	69bb      	ldr	r3, [r7, #24]
 801140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140c:	2201      	movs	r2, #1
 801140e:	fa02 f303 	lsl.w	r3, r2, r3
 8011412:	43da      	mvns	r2, r3
 8011414:	4b11      	ldr	r3, [pc, #68]	; (801145c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4013      	ands	r3, r2
 801141a:	4a10      	ldr	r2, [pc, #64]	; (801145c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801141c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011422:	2201      	movs	r2, #1
 8011424:	409a      	lsls	r2, r3
 8011426:	4b0d      	ldr	r3, [pc, #52]	; (801145c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4313      	orrs	r3, r2
 801142c:	4a0b      	ldr	r2, [pc, #44]	; (801145c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011434:	4613      	mov	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4a06      	ldr	r2, [pc, #24]	; (8011458 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801143e:	441a      	add	r2, r3
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	3304      	adds	r3, #4
 8011444:	4619      	mov	r1, r3
 8011446:	4610      	mov	r0, r2
 8011448:	f7fe f903 	bl	800f652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801144c:	bf00      	nop
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20000db4 	.word	0x20000db4
 8011458:	20000db8 	.word	0x20000db8
 801145c:	20000ebc 	.word	0x20000ebc

08011460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011460:	b480      	push	{r7}
 8011462:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011464:	4b07      	ldr	r3, [pc, #28]	; (8011484 <pvTaskIncrementMutexHeldCount+0x24>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d004      	beq.n	8011476 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801146c:	4b05      	ldr	r3, [pc, #20]	; (8011484 <pvTaskIncrementMutexHeldCount+0x24>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011472:	3201      	adds	r2, #1
 8011474:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011476:	4b03      	ldr	r3, [pc, #12]	; (8011484 <pvTaskIncrementMutexHeldCount+0x24>)
 8011478:	681b      	ldr	r3, [r3, #0]
	}
 801147a:	4618      	mov	r0, r3
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	20000db4 	.word	0x20000db4

08011488 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011492:	4b29      	ldr	r3, [pc, #164]	; (8011538 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011498:	4b28      	ldr	r3, [pc, #160]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	3304      	adds	r3, #4
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fe f934 	bl	800f70c <uxListRemove>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10b      	bne.n	80114c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80114aa:	4b24      	ldr	r3, [pc, #144]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b0:	2201      	movs	r2, #1
 80114b2:	fa02 f303 	lsl.w	r3, r2, r3
 80114b6:	43da      	mvns	r2, r3
 80114b8:	4b21      	ldr	r3, [pc, #132]	; (8011540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4013      	ands	r3, r2
 80114be:	4a20      	ldr	r2, [pc, #128]	; (8011540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80114c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114c8:	d10a      	bne.n	80114e0 <prvAddCurrentTaskToDelayedList+0x58>
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d007      	beq.n	80114e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114d0:	4b1a      	ldr	r3, [pc, #104]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3304      	adds	r3, #4
 80114d6:	4619      	mov	r1, r3
 80114d8:	481a      	ldr	r0, [pc, #104]	; (8011544 <prvAddCurrentTaskToDelayedList+0xbc>)
 80114da:	f7fe f8ba 	bl	800f652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80114de:	e026      	b.n	801152e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4413      	add	r3, r2
 80114e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114e8:	4b14      	ldr	r3, [pc, #80]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d209      	bcs.n	801150c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114f8:	4b13      	ldr	r3, [pc, #76]	; (8011548 <prvAddCurrentTaskToDelayedList+0xc0>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	4b0f      	ldr	r3, [pc, #60]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	3304      	adds	r3, #4
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f7fe f8c8 	bl	800f69a <vListInsert>
}
 801150a:	e010      	b.n	801152e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801150c:	4b0f      	ldr	r3, [pc, #60]	; (801154c <prvAddCurrentTaskToDelayedList+0xc4>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	4b0a      	ldr	r3, [pc, #40]	; (801153c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3304      	adds	r3, #4
 8011516:	4619      	mov	r1, r3
 8011518:	4610      	mov	r0, r2
 801151a:	f7fe f8be 	bl	800f69a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	429a      	cmp	r2, r3
 8011526:	d202      	bcs.n	801152e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011528:	4a09      	ldr	r2, [pc, #36]	; (8011550 <prvAddCurrentTaskToDelayedList+0xc8>)
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	6013      	str	r3, [r2, #0]
}
 801152e:	bf00      	nop
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	20000eb8 	.word	0x20000eb8
 801153c:	20000db4 	.word	0x20000db4
 8011540:	20000ebc 	.word	0x20000ebc
 8011544:	20000ea0 	.word	0x20000ea0
 8011548:	20000e70 	.word	0x20000e70
 801154c:	20000e6c 	.word	0x20000e6c
 8011550:	20000ed4 	.word	0x20000ed4

08011554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011554:	b480      	push	{r7}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3b04      	subs	r3, #4
 8011564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801156c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3b04      	subs	r3, #4
 8011572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	f023 0201 	bic.w	r2, r3, #1
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	3b04      	subs	r3, #4
 8011582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011584:	4a0c      	ldr	r2, [pc, #48]	; (80115b8 <pxPortInitialiseStack+0x64>)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	3b14      	subs	r3, #20
 801158e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	3b04      	subs	r3, #4
 801159a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f06f 0202 	mvn.w	r2, #2
 80115a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	3b20      	subs	r3, #32
 80115a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80115aa:	68fb      	ldr	r3, [r7, #12]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	080115bd 	.word	0x080115bd

080115bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80115c6:	4b14      	ldr	r3, [pc, #80]	; (8011618 <prvTaskExitError+0x5c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ce:	d00c      	beq.n	80115ea <prvTaskExitError+0x2e>
	__asm volatile
 80115d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d4:	b672      	cpsid	i
 80115d6:	f383 8811 	msr	BASEPRI, r3
 80115da:	f3bf 8f6f 	isb	sy
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	b662      	cpsie	i
 80115e4:	60fb      	str	r3, [r7, #12]
}
 80115e6:	bf00      	nop
 80115e8:	e7fe      	b.n	80115e8 <prvTaskExitError+0x2c>
	__asm volatile
 80115ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ee:	b672      	cpsid	i
 80115f0:	f383 8811 	msr	BASEPRI, r3
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	b662      	cpsie	i
 80115fe:	60bb      	str	r3, [r7, #8]
}
 8011600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011602:	bf00      	nop
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d0fc      	beq.n	8011604 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801160a:	bf00      	nop
 801160c:	bf00      	nop
 801160e:	3714      	adds	r7, #20
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr
 8011618:	20000014 	.word	0x20000014
 801161c:	00000000 	.word	0x00000000

08011620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011620:	4b07      	ldr	r3, [pc, #28]	; (8011640 <pxCurrentTCBConst2>)
 8011622:	6819      	ldr	r1, [r3, #0]
 8011624:	6808      	ldr	r0, [r1, #0]
 8011626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162a:	f380 8809 	msr	PSP, r0
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f04f 0000 	mov.w	r0, #0
 8011636:	f380 8811 	msr	BASEPRI, r0
 801163a:	4770      	bx	lr
 801163c:	f3af 8000 	nop.w

08011640 <pxCurrentTCBConst2>:
 8011640:	20000db4 	.word	0x20000db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011644:	bf00      	nop
 8011646:	bf00      	nop

08011648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011648:	4808      	ldr	r0, [pc, #32]	; (801166c <prvPortStartFirstTask+0x24>)
 801164a:	6800      	ldr	r0, [r0, #0]
 801164c:	6800      	ldr	r0, [r0, #0]
 801164e:	f380 8808 	msr	MSP, r0
 8011652:	f04f 0000 	mov.w	r0, #0
 8011656:	f380 8814 	msr	CONTROL, r0
 801165a:	b662      	cpsie	i
 801165c:	b661      	cpsie	f
 801165e:	f3bf 8f4f 	dsb	sy
 8011662:	f3bf 8f6f 	isb	sy
 8011666:	df00      	svc	0
 8011668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801166a:	bf00      	nop
 801166c:	e000ed08 	.word	0xe000ed08

08011670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011676:	4b37      	ldr	r3, [pc, #220]	; (8011754 <xPortStartScheduler+0xe4>)
 8011678:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	b2db      	uxtb	r3, r3
 8011680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	22ff      	movs	r2, #255	; 0xff
 8011686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011690:	78fb      	ldrb	r3, [r7, #3]
 8011692:	b2db      	uxtb	r3, r3
 8011694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011698:	b2da      	uxtb	r2, r3
 801169a:	4b2f      	ldr	r3, [pc, #188]	; (8011758 <xPortStartScheduler+0xe8>)
 801169c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801169e:	4b2f      	ldr	r3, [pc, #188]	; (801175c <xPortStartScheduler+0xec>)
 80116a0:	2207      	movs	r2, #7
 80116a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116a4:	e009      	b.n	80116ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80116a6:	4b2d      	ldr	r3, [pc, #180]	; (801175c <xPortStartScheduler+0xec>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	3b01      	subs	r3, #1
 80116ac:	4a2b      	ldr	r2, [pc, #172]	; (801175c <xPortStartScheduler+0xec>)
 80116ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116b0:	78fb      	ldrb	r3, [r7, #3]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116c2:	2b80      	cmp	r3, #128	; 0x80
 80116c4:	d0ef      	beq.n	80116a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80116c6:	4b25      	ldr	r3, [pc, #148]	; (801175c <xPortStartScheduler+0xec>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f1c3 0307 	rsb	r3, r3, #7
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	d00c      	beq.n	80116ec <xPortStartScheduler+0x7c>
	__asm volatile
 80116d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d6:	b672      	cpsid	i
 80116d8:	f383 8811 	msr	BASEPRI, r3
 80116dc:	f3bf 8f6f 	isb	sy
 80116e0:	f3bf 8f4f 	dsb	sy
 80116e4:	b662      	cpsie	i
 80116e6:	60bb      	str	r3, [r7, #8]
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116ec:	4b1b      	ldr	r3, [pc, #108]	; (801175c <xPortStartScheduler+0xec>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	021b      	lsls	r3, r3, #8
 80116f2:	4a1a      	ldr	r2, [pc, #104]	; (801175c <xPortStartScheduler+0xec>)
 80116f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116f6:	4b19      	ldr	r3, [pc, #100]	; (801175c <xPortStartScheduler+0xec>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116fe:	4a17      	ldr	r2, [pc, #92]	; (801175c <xPortStartScheduler+0xec>)
 8011700:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	b2da      	uxtb	r2, r3
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801170a:	4b15      	ldr	r3, [pc, #84]	; (8011760 <xPortStartScheduler+0xf0>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a14      	ldr	r2, [pc, #80]	; (8011760 <xPortStartScheduler+0xf0>)
 8011710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011714:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011716:	4b12      	ldr	r3, [pc, #72]	; (8011760 <xPortStartScheduler+0xf0>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4a11      	ldr	r2, [pc, #68]	; (8011760 <xPortStartScheduler+0xf0>)
 801171c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011720:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011722:	f000 f8dd 	bl	80118e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011726:	4b0f      	ldr	r3, [pc, #60]	; (8011764 <xPortStartScheduler+0xf4>)
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801172c:	f000 f8fc 	bl	8011928 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011730:	4b0d      	ldr	r3, [pc, #52]	; (8011768 <xPortStartScheduler+0xf8>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4a0c      	ldr	r2, [pc, #48]	; (8011768 <xPortStartScheduler+0xf8>)
 8011736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801173a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801173c:	f7ff ff84 	bl	8011648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011740:	f7ff fa76 	bl	8010c30 <vTaskSwitchContext>
	prvTaskExitError();
 8011744:	f7ff ff3a 	bl	80115bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011748:	2300      	movs	r3, #0
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	e000e400 	.word	0xe000e400
 8011758:	20000ee0 	.word	0x20000ee0
 801175c:	20000ee4 	.word	0x20000ee4
 8011760:	e000ed20 	.word	0xe000ed20
 8011764:	20000014 	.word	0x20000014
 8011768:	e000ef34 	.word	0xe000ef34

0801176c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
	__asm volatile
 8011772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011776:	b672      	cpsid	i
 8011778:	f383 8811 	msr	BASEPRI, r3
 801177c:	f3bf 8f6f 	isb	sy
 8011780:	f3bf 8f4f 	dsb	sy
 8011784:	b662      	cpsie	i
 8011786:	607b      	str	r3, [r7, #4]
}
 8011788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801178a:	4b10      	ldr	r3, [pc, #64]	; (80117cc <vPortEnterCritical+0x60>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3301      	adds	r3, #1
 8011790:	4a0e      	ldr	r2, [pc, #56]	; (80117cc <vPortEnterCritical+0x60>)
 8011792:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011794:	4b0d      	ldr	r3, [pc, #52]	; (80117cc <vPortEnterCritical+0x60>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d111      	bne.n	80117c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801179c:	4b0c      	ldr	r3, [pc, #48]	; (80117d0 <vPortEnterCritical+0x64>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00c      	beq.n	80117c0 <vPortEnterCritical+0x54>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	b672      	cpsid	i
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	b662      	cpsie	i
 80117ba:	603b      	str	r3, [r7, #0]
}
 80117bc:	bf00      	nop
 80117be:	e7fe      	b.n	80117be <vPortEnterCritical+0x52>
	}
}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	20000014 	.word	0x20000014
 80117d0:	e000ed04 	.word	0xe000ed04

080117d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80117da:	4b13      	ldr	r3, [pc, #76]	; (8011828 <vPortExitCritical+0x54>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10c      	bne.n	80117fc <vPortExitCritical+0x28>
	__asm volatile
 80117e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e6:	b672      	cpsid	i
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	b662      	cpsie	i
 80117f6:	607b      	str	r3, [r7, #4]
}
 80117f8:	bf00      	nop
 80117fa:	e7fe      	b.n	80117fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80117fc:	4b0a      	ldr	r3, [pc, #40]	; (8011828 <vPortExitCritical+0x54>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	3b01      	subs	r3, #1
 8011802:	4a09      	ldr	r2, [pc, #36]	; (8011828 <vPortExitCritical+0x54>)
 8011804:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011806:	4b08      	ldr	r3, [pc, #32]	; (8011828 <vPortExitCritical+0x54>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d105      	bne.n	801181a <vPortExitCritical+0x46>
 801180e:	2300      	movs	r3, #0
 8011810:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	f383 8811 	msr	BASEPRI, r3
}
 8011818:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801181a:	bf00      	nop
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop
 8011828:	20000014 	.word	0x20000014
 801182c:	00000000 	.word	0x00000000

08011830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011830:	f3ef 8009 	mrs	r0, PSP
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	4b15      	ldr	r3, [pc, #84]	; (8011890 <pxCurrentTCBConst>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	f01e 0f10 	tst.w	lr, #16
 8011840:	bf08      	it	eq
 8011842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184a:	6010      	str	r0, [r2, #0]
 801184c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011854:	b672      	cpsid	i
 8011856:	f380 8811 	msr	BASEPRI, r0
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	b662      	cpsie	i
 8011864:	f7ff f9e4 	bl	8010c30 <vTaskSwitchContext>
 8011868:	f04f 0000 	mov.w	r0, #0
 801186c:	f380 8811 	msr	BASEPRI, r0
 8011870:	bc09      	pop	{r0, r3}
 8011872:	6819      	ldr	r1, [r3, #0]
 8011874:	6808      	ldr	r0, [r1, #0]
 8011876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f01e 0f10 	tst.w	lr, #16
 801187e:	bf08      	it	eq
 8011880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011884:	f380 8809 	msr	PSP, r0
 8011888:	f3bf 8f6f 	isb	sy
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop

08011890 <pxCurrentTCBConst>:
 8011890:	20000db4 	.word	0x20000db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011894:	bf00      	nop
 8011896:	bf00      	nop

08011898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	b672      	cpsid	i
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	b662      	cpsie	i
 80118b2:	607b      	str	r3, [r7, #4]
}
 80118b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80118b6:	f7ff f901 	bl	8010abc <xTaskIncrementTick>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d003      	beq.n	80118c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80118c0:	4b06      	ldr	r3, [pc, #24]	; (80118dc <SysTick_Handler+0x44>)
 80118c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118c6:	601a      	str	r2, [r3, #0]
 80118c8:	2300      	movs	r3, #0
 80118ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	f383 8811 	msr	BASEPRI, r3
}
 80118d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80118d4:	bf00      	nop
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	e000ed04 	.word	0xe000ed04

080118e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80118e0:	b480      	push	{r7}
 80118e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80118e4:	4b0b      	ldr	r3, [pc, #44]	; (8011914 <vPortSetupTimerInterrupt+0x34>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80118ea:	4b0b      	ldr	r3, [pc, #44]	; (8011918 <vPortSetupTimerInterrupt+0x38>)
 80118ec:	2200      	movs	r2, #0
 80118ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <vPortSetupTimerInterrupt+0x3c>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a0a      	ldr	r2, [pc, #40]	; (8011920 <vPortSetupTimerInterrupt+0x40>)
 80118f6:	fba2 2303 	umull	r2, r3, r2, r3
 80118fa:	099b      	lsrs	r3, r3, #6
 80118fc:	4a09      	ldr	r2, [pc, #36]	; (8011924 <vPortSetupTimerInterrupt+0x44>)
 80118fe:	3b01      	subs	r3, #1
 8011900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011902:	4b04      	ldr	r3, [pc, #16]	; (8011914 <vPortSetupTimerInterrupt+0x34>)
 8011904:	2207      	movs	r2, #7
 8011906:	601a      	str	r2, [r3, #0]
}
 8011908:	bf00      	nop
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	e000e010 	.word	0xe000e010
 8011918:	e000e018 	.word	0xe000e018
 801191c:	20000008 	.word	0x20000008
 8011920:	10624dd3 	.word	0x10624dd3
 8011924:	e000e014 	.word	0xe000e014

08011928 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011928:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011938 <vPortEnableVFP+0x10>
 801192c:	6801      	ldr	r1, [r0, #0]
 801192e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011932:	6001      	str	r1, [r0, #0]
 8011934:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011936:	bf00      	nop
 8011938:	e000ed88 	.word	0xe000ed88

0801193c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011942:	f3ef 8305 	mrs	r3, IPSR
 8011946:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b0f      	cmp	r3, #15
 801194c:	d916      	bls.n	801197c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801194e:	4a19      	ldr	r2, [pc, #100]	; (80119b4 <vPortValidateInterruptPriority+0x78>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	4413      	add	r3, r2
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011958:	4b17      	ldr	r3, [pc, #92]	; (80119b8 <vPortValidateInterruptPriority+0x7c>)
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	7afa      	ldrb	r2, [r7, #11]
 801195e:	429a      	cmp	r2, r3
 8011960:	d20c      	bcs.n	801197c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	b672      	cpsid	i
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	b662      	cpsie	i
 8011976:	607b      	str	r3, [r7, #4]
}
 8011978:	bf00      	nop
 801197a:	e7fe      	b.n	801197a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801197c:	4b0f      	ldr	r3, [pc, #60]	; (80119bc <vPortValidateInterruptPriority+0x80>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011984:	4b0e      	ldr	r3, [pc, #56]	; (80119c0 <vPortValidateInterruptPriority+0x84>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	429a      	cmp	r2, r3
 801198a:	d90c      	bls.n	80119a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011990:	b672      	cpsid	i
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	b662      	cpsie	i
 80119a0:	603b      	str	r3, [r7, #0]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <vPortValidateInterruptPriority+0x68>
	}
 80119a6:	bf00      	nop
 80119a8:	3714      	adds	r7, #20
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop
 80119b4:	e000e3f0 	.word	0xe000e3f0
 80119b8:	20000ee0 	.word	0x20000ee0
 80119bc:	e000ed0c 	.word	0xe000ed0c
 80119c0:	20000ee4 	.word	0x20000ee4

080119c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b08a      	sub	sp, #40	; 0x28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80119cc:	2300      	movs	r3, #0
 80119ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80119d0:	f7fe ffb8 	bl	8010944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80119d4:	4b5b      	ldr	r3, [pc, #364]	; (8011b44 <pvPortMalloc+0x180>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d101      	bne.n	80119e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80119dc:	f000 f91a 	bl	8011c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80119e0:	4b59      	ldr	r3, [pc, #356]	; (8011b48 <pvPortMalloc+0x184>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4013      	ands	r3, r2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f040 8092 	bne.w	8011b12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d01f      	beq.n	8011a34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80119f4:	2208      	movs	r2, #8
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4413      	add	r3, r2
 80119fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f003 0307 	and.w	r3, r3, #7
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d016      	beq.n	8011a34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f023 0307 	bic.w	r3, r3, #7
 8011a0c:	3308      	adds	r3, #8
 8011a0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f003 0307 	and.w	r3, r3, #7
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00c      	beq.n	8011a34 <pvPortMalloc+0x70>
	__asm volatile
 8011a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1e:	b672      	cpsid	i
 8011a20:	f383 8811 	msr	BASEPRI, r3
 8011a24:	f3bf 8f6f 	isb	sy
 8011a28:	f3bf 8f4f 	dsb	sy
 8011a2c:	b662      	cpsie	i
 8011a2e:	617b      	str	r3, [r7, #20]
}
 8011a30:	bf00      	nop
 8011a32:	e7fe      	b.n	8011a32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d06b      	beq.n	8011b12 <pvPortMalloc+0x14e>
 8011a3a:	4b44      	ldr	r3, [pc, #272]	; (8011b4c <pvPortMalloc+0x188>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d866      	bhi.n	8011b12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011a44:	4b42      	ldr	r3, [pc, #264]	; (8011b50 <pvPortMalloc+0x18c>)
 8011a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011a48:	4b41      	ldr	r3, [pc, #260]	; (8011b50 <pvPortMalloc+0x18c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a4e:	e004      	b.n	8011a5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d903      	bls.n	8011a6c <pvPortMalloc+0xa8>
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1f1      	bne.n	8011a50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a6c:	4b35      	ldr	r3, [pc, #212]	; (8011b44 <pvPortMalloc+0x180>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d04d      	beq.n	8011b12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2208      	movs	r2, #8
 8011a7c:	4413      	add	r3, r2
 8011a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	1ad2      	subs	r2, r2, r3
 8011a90:	2308      	movs	r3, #8
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d921      	bls.n	8011adc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	f003 0307 	and.w	r3, r3, #7
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d00c      	beq.n	8011ac4 <pvPortMalloc+0x100>
	__asm volatile
 8011aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aae:	b672      	cpsid	i
 8011ab0:	f383 8811 	msr	BASEPRI, r3
 8011ab4:	f3bf 8f6f 	isb	sy
 8011ab8:	f3bf 8f4f 	dsb	sy
 8011abc:	b662      	cpsie	i
 8011abe:	613b      	str	r3, [r7, #16]
}
 8011ac0:	bf00      	nop
 8011ac2:	e7fe      	b.n	8011ac2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	685a      	ldr	r2, [r3, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	1ad2      	subs	r2, r2, r3
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011ad6:	69b8      	ldr	r0, [r7, #24]
 8011ad8:	f000 f8fe 	bl	8011cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011adc:	4b1b      	ldr	r3, [pc, #108]	; (8011b4c <pvPortMalloc+0x188>)
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	4a19      	ldr	r2, [pc, #100]	; (8011b4c <pvPortMalloc+0x188>)
 8011ae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011aea:	4b18      	ldr	r3, [pc, #96]	; (8011b4c <pvPortMalloc+0x188>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	4b19      	ldr	r3, [pc, #100]	; (8011b54 <pvPortMalloc+0x190>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d203      	bcs.n	8011afe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011af6:	4b15      	ldr	r3, [pc, #84]	; (8011b4c <pvPortMalloc+0x188>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4a16      	ldr	r2, [pc, #88]	; (8011b54 <pvPortMalloc+0x190>)
 8011afc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b00:	685a      	ldr	r2, [r3, #4]
 8011b02:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <pvPortMalloc+0x184>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	431a      	orrs	r2, r3
 8011b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	2200      	movs	r2, #0
 8011b10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b12:	f7fe ff25 	bl	8010960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	f003 0307 	and.w	r3, r3, #7
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00c      	beq.n	8011b3a <pvPortMalloc+0x176>
	__asm volatile
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	b672      	cpsid	i
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	b662      	cpsie	i
 8011b34:	60fb      	str	r3, [r7, #12]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <pvPortMalloc+0x174>
	return pvReturn;
 8011b3a:	69fb      	ldr	r3, [r7, #28]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3728      	adds	r7, #40	; 0x28
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	20008ef0 	.word	0x20008ef0
 8011b48:	20008efc 	.word	0x20008efc
 8011b4c:	20008ef4 	.word	0x20008ef4
 8011b50:	20008ee8 	.word	0x20008ee8
 8011b54:	20008ef8 	.word	0x20008ef8

08011b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b086      	sub	sp, #24
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d04c      	beq.n	8011c04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b6a:	2308      	movs	r3, #8
 8011b6c:	425b      	negs	r3, r3
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	4413      	add	r3, r2
 8011b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	685a      	ldr	r2, [r3, #4]
 8011b7c:	4b23      	ldr	r3, [pc, #140]	; (8011c0c <vPortFree+0xb4>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4013      	ands	r3, r2
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10c      	bne.n	8011ba0 <vPortFree+0x48>
	__asm volatile
 8011b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8a:	b672      	cpsid	i
 8011b8c:	f383 8811 	msr	BASEPRI, r3
 8011b90:	f3bf 8f6f 	isb	sy
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	b662      	cpsie	i
 8011b9a:	60fb      	str	r3, [r7, #12]
}
 8011b9c:	bf00      	nop
 8011b9e:	e7fe      	b.n	8011b9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00c      	beq.n	8011bc2 <vPortFree+0x6a>
	__asm volatile
 8011ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bac:	b672      	cpsid	i
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	b662      	cpsie	i
 8011bbc:	60bb      	str	r3, [r7, #8]
}
 8011bbe:	bf00      	nop
 8011bc0:	e7fe      	b.n	8011bc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	4b11      	ldr	r3, [pc, #68]	; (8011c0c <vPortFree+0xb4>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4013      	ands	r3, r2
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d019      	beq.n	8011c04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d115      	bne.n	8011c04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	685a      	ldr	r2, [r3, #4]
 8011bdc:	4b0b      	ldr	r3, [pc, #44]	; (8011c0c <vPortFree+0xb4>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	43db      	mvns	r3, r3
 8011be2:	401a      	ands	r2, r3
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011be8:	f7fe feac 	bl	8010944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	4b07      	ldr	r3, [pc, #28]	; (8011c10 <vPortFree+0xb8>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	4a06      	ldr	r2, [pc, #24]	; (8011c10 <vPortFree+0xb8>)
 8011bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011bfa:	6938      	ldr	r0, [r7, #16]
 8011bfc:	f000 f86c 	bl	8011cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011c00:	f7fe feae 	bl	8010960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c04:	bf00      	nop
 8011c06:	3718      	adds	r7, #24
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	20008efc 	.word	0x20008efc
 8011c10:	20008ef4 	.word	0x20008ef4

08011c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c14:	b480      	push	{r7}
 8011c16:	b085      	sub	sp, #20
 8011c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011c20:	4b27      	ldr	r3, [pc, #156]	; (8011cc0 <prvHeapInit+0xac>)
 8011c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f003 0307 	and.w	r3, r3, #7
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00c      	beq.n	8011c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3307      	adds	r3, #7
 8011c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f023 0307 	bic.w	r3, r3, #7
 8011c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	4a1f      	ldr	r2, [pc, #124]	; (8011cc0 <prvHeapInit+0xac>)
 8011c44:	4413      	add	r3, r2
 8011c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c4c:	4a1d      	ldr	r2, [pc, #116]	; (8011cc4 <prvHeapInit+0xb0>)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c52:	4b1c      	ldr	r3, [pc, #112]	; (8011cc4 <prvHeapInit+0xb0>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c60:	2208      	movs	r2, #8
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	1a9b      	subs	r3, r3, r2
 8011c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f023 0307 	bic.w	r3, r3, #7
 8011c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	4a15      	ldr	r2, [pc, #84]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c76:	4b14      	ldr	r3, [pc, #80]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c7e:	4b12      	ldr	r3, [pc, #72]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2200      	movs	r2, #0
 8011c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	1ad2      	subs	r2, r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c94:	4b0c      	ldr	r3, [pc, #48]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	4a0a      	ldr	r2, [pc, #40]	; (8011ccc <prvHeapInit+0xb8>)
 8011ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	4a09      	ldr	r2, [pc, #36]	; (8011cd0 <prvHeapInit+0xbc>)
 8011caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011cac:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <prvHeapInit+0xc0>)
 8011cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011cb2:	601a      	str	r2, [r3, #0]
}
 8011cb4:	bf00      	nop
 8011cb6:	3714      	adds	r7, #20
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	20000ee8 	.word	0x20000ee8
 8011cc4:	20008ee8 	.word	0x20008ee8
 8011cc8:	20008ef0 	.word	0x20008ef0
 8011ccc:	20008ef8 	.word	0x20008ef8
 8011cd0:	20008ef4 	.word	0x20008ef4
 8011cd4:	20008efc 	.word	0x20008efc

08011cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ce0:	4b28      	ldr	r3, [pc, #160]	; (8011d84 <prvInsertBlockIntoFreeList+0xac>)
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	e002      	b.n	8011cec <prvInsertBlockIntoFreeList+0x14>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d8f7      	bhi.n	8011ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	4413      	add	r3, r2
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d108      	bne.n	8011d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	441a      	add	r2, r3
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	68ba      	ldr	r2, [r7, #8]
 8011d24:	441a      	add	r2, r3
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d118      	bne.n	8011d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <prvInsertBlockIntoFreeList+0xb0>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d00d      	beq.n	8011d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	441a      	add	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	e008      	b.n	8011d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d56:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <prvInsertBlockIntoFreeList+0xb0>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	601a      	str	r2, [r3, #0]
 8011d5e:	e003      	b.n	8011d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d002      	beq.n	8011d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d76:	bf00      	nop
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20008ee8 	.word	0x20008ee8
 8011d88:	20008ef0 	.word	0x20008ef0

08011d8c <__cvt>:
 8011d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d90:	ec55 4b10 	vmov	r4, r5, d0
 8011d94:	2d00      	cmp	r5, #0
 8011d96:	460e      	mov	r6, r1
 8011d98:	4619      	mov	r1, r3
 8011d9a:	462b      	mov	r3, r5
 8011d9c:	bfbb      	ittet	lt
 8011d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011da2:	461d      	movlt	r5, r3
 8011da4:	2300      	movge	r3, #0
 8011da6:	232d      	movlt	r3, #45	; 0x2d
 8011da8:	700b      	strb	r3, [r1, #0]
 8011daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011db0:	4691      	mov	r9, r2
 8011db2:	f023 0820 	bic.w	r8, r3, #32
 8011db6:	bfbc      	itt	lt
 8011db8:	4622      	movlt	r2, r4
 8011dba:	4614      	movlt	r4, r2
 8011dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011dc0:	d005      	beq.n	8011dce <__cvt+0x42>
 8011dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011dc6:	d100      	bne.n	8011dca <__cvt+0x3e>
 8011dc8:	3601      	adds	r6, #1
 8011dca:	2102      	movs	r1, #2
 8011dcc:	e000      	b.n	8011dd0 <__cvt+0x44>
 8011dce:	2103      	movs	r1, #3
 8011dd0:	ab03      	add	r3, sp, #12
 8011dd2:	9301      	str	r3, [sp, #4]
 8011dd4:	ab02      	add	r3, sp, #8
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	ec45 4b10 	vmov	d0, r4, r5
 8011ddc:	4653      	mov	r3, sl
 8011dde:	4632      	mov	r2, r6
 8011de0:	f001 f922 	bl	8013028 <_dtoa_r>
 8011de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011de8:	4607      	mov	r7, r0
 8011dea:	d102      	bne.n	8011df2 <__cvt+0x66>
 8011dec:	f019 0f01 	tst.w	r9, #1
 8011df0:	d022      	beq.n	8011e38 <__cvt+0xac>
 8011df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011df6:	eb07 0906 	add.w	r9, r7, r6
 8011dfa:	d110      	bne.n	8011e1e <__cvt+0x92>
 8011dfc:	783b      	ldrb	r3, [r7, #0]
 8011dfe:	2b30      	cmp	r3, #48	; 0x30
 8011e00:	d10a      	bne.n	8011e18 <__cvt+0x8c>
 8011e02:	2200      	movs	r2, #0
 8011e04:	2300      	movs	r3, #0
 8011e06:	4620      	mov	r0, r4
 8011e08:	4629      	mov	r1, r5
 8011e0a:	f7ee fe85 	bl	8000b18 <__aeabi_dcmpeq>
 8011e0e:	b918      	cbnz	r0, 8011e18 <__cvt+0x8c>
 8011e10:	f1c6 0601 	rsb	r6, r6, #1
 8011e14:	f8ca 6000 	str.w	r6, [sl]
 8011e18:	f8da 3000 	ldr.w	r3, [sl]
 8011e1c:	4499      	add	r9, r3
 8011e1e:	2200      	movs	r2, #0
 8011e20:	2300      	movs	r3, #0
 8011e22:	4620      	mov	r0, r4
 8011e24:	4629      	mov	r1, r5
 8011e26:	f7ee fe77 	bl	8000b18 <__aeabi_dcmpeq>
 8011e2a:	b108      	cbz	r0, 8011e30 <__cvt+0xa4>
 8011e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e30:	2230      	movs	r2, #48	; 0x30
 8011e32:	9b03      	ldr	r3, [sp, #12]
 8011e34:	454b      	cmp	r3, r9
 8011e36:	d307      	bcc.n	8011e48 <__cvt+0xbc>
 8011e38:	9b03      	ldr	r3, [sp, #12]
 8011e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e3c:	1bdb      	subs	r3, r3, r7
 8011e3e:	4638      	mov	r0, r7
 8011e40:	6013      	str	r3, [r2, #0]
 8011e42:	b004      	add	sp, #16
 8011e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e48:	1c59      	adds	r1, r3, #1
 8011e4a:	9103      	str	r1, [sp, #12]
 8011e4c:	701a      	strb	r2, [r3, #0]
 8011e4e:	e7f0      	b.n	8011e32 <__cvt+0xa6>

08011e50 <__exponent>:
 8011e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e52:	4603      	mov	r3, r0
 8011e54:	2900      	cmp	r1, #0
 8011e56:	bfb8      	it	lt
 8011e58:	4249      	neglt	r1, r1
 8011e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8011e5e:	bfb4      	ite	lt
 8011e60:	222d      	movlt	r2, #45	; 0x2d
 8011e62:	222b      	movge	r2, #43	; 0x2b
 8011e64:	2909      	cmp	r1, #9
 8011e66:	7042      	strb	r2, [r0, #1]
 8011e68:	dd2a      	ble.n	8011ec0 <__exponent+0x70>
 8011e6a:	f10d 0207 	add.w	r2, sp, #7
 8011e6e:	4617      	mov	r7, r2
 8011e70:	260a      	movs	r6, #10
 8011e72:	4694      	mov	ip, r2
 8011e74:	fb91 f5f6 	sdiv	r5, r1, r6
 8011e78:	fb06 1415 	mls	r4, r6, r5, r1
 8011e7c:	3430      	adds	r4, #48	; 0x30
 8011e7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011e82:	460c      	mov	r4, r1
 8011e84:	2c63      	cmp	r4, #99	; 0x63
 8011e86:	f102 32ff 	add.w	r2, r2, #4294967295
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	dcf1      	bgt.n	8011e72 <__exponent+0x22>
 8011e8e:	3130      	adds	r1, #48	; 0x30
 8011e90:	f1ac 0402 	sub.w	r4, ip, #2
 8011e94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011e98:	1c41      	adds	r1, r0, #1
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	42ba      	cmp	r2, r7
 8011e9e:	d30a      	bcc.n	8011eb6 <__exponent+0x66>
 8011ea0:	f10d 0209 	add.w	r2, sp, #9
 8011ea4:	eba2 020c 	sub.w	r2, r2, ip
 8011ea8:	42bc      	cmp	r4, r7
 8011eaa:	bf88      	it	hi
 8011eac:	2200      	movhi	r2, #0
 8011eae:	4413      	add	r3, r2
 8011eb0:	1a18      	subs	r0, r3, r0
 8011eb2:	b003      	add	sp, #12
 8011eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eb6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011eba:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011ebe:	e7ed      	b.n	8011e9c <__exponent+0x4c>
 8011ec0:	2330      	movs	r3, #48	; 0x30
 8011ec2:	3130      	adds	r1, #48	; 0x30
 8011ec4:	7083      	strb	r3, [r0, #2]
 8011ec6:	70c1      	strb	r1, [r0, #3]
 8011ec8:	1d03      	adds	r3, r0, #4
 8011eca:	e7f1      	b.n	8011eb0 <__exponent+0x60>

08011ecc <_printf_float>:
 8011ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed0:	ed2d 8b02 	vpush	{d8}
 8011ed4:	b08d      	sub	sp, #52	; 0x34
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011edc:	4616      	mov	r6, r2
 8011ede:	461f      	mov	r7, r3
 8011ee0:	4605      	mov	r5, r0
 8011ee2:	f000 ff37 	bl	8012d54 <_localeconv_r>
 8011ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8011eea:	4650      	mov	r0, sl
 8011eec:	f7ee f9e8 	bl	80002c0 <strlen>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	9305      	str	r3, [sp, #20]
 8011ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8011efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011f00:	3307      	adds	r3, #7
 8011f02:	f023 0307 	bic.w	r3, r3, #7
 8011f06:	f103 0208 	add.w	r2, r3, #8
 8011f0a:	f8c8 2000 	str.w	r2, [r8]
 8011f0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f16:	9307      	str	r3, [sp, #28]
 8011f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f1c:	ee08 0a10 	vmov	s16, r0
 8011f20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f28:	4b9e      	ldr	r3, [pc, #632]	; (80121a4 <_printf_float+0x2d8>)
 8011f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2e:	f7ee fe25 	bl	8000b7c <__aeabi_dcmpun>
 8011f32:	bb88      	cbnz	r0, 8011f98 <_printf_float+0xcc>
 8011f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f38:	4b9a      	ldr	r3, [pc, #616]	; (80121a4 <_printf_float+0x2d8>)
 8011f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3e:	f7ee fdff 	bl	8000b40 <__aeabi_dcmple>
 8011f42:	bb48      	cbnz	r0, 8011f98 <_printf_float+0xcc>
 8011f44:	2200      	movs	r2, #0
 8011f46:	2300      	movs	r3, #0
 8011f48:	4640      	mov	r0, r8
 8011f4a:	4649      	mov	r1, r9
 8011f4c:	f7ee fdee 	bl	8000b2c <__aeabi_dcmplt>
 8011f50:	b110      	cbz	r0, 8011f58 <_printf_float+0x8c>
 8011f52:	232d      	movs	r3, #45	; 0x2d
 8011f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f58:	4a93      	ldr	r2, [pc, #588]	; (80121a8 <_printf_float+0x2dc>)
 8011f5a:	4b94      	ldr	r3, [pc, #592]	; (80121ac <_printf_float+0x2e0>)
 8011f5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011f60:	bf94      	ite	ls
 8011f62:	4690      	movls	r8, r2
 8011f64:	4698      	movhi	r8, r3
 8011f66:	2303      	movs	r3, #3
 8011f68:	6123      	str	r3, [r4, #16]
 8011f6a:	9b05      	ldr	r3, [sp, #20]
 8011f6c:	f023 0304 	bic.w	r3, r3, #4
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	f04f 0900 	mov.w	r9, #0
 8011f76:	9700      	str	r7, [sp, #0]
 8011f78:	4633      	mov	r3, r6
 8011f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011f7c:	4621      	mov	r1, r4
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f000 f9da 	bl	8012338 <_printf_common>
 8011f84:	3001      	adds	r0, #1
 8011f86:	f040 8090 	bne.w	80120aa <_printf_float+0x1de>
 8011f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8e:	b00d      	add	sp, #52	; 0x34
 8011f90:	ecbd 8b02 	vpop	{d8}
 8011f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f98:	4642      	mov	r2, r8
 8011f9a:	464b      	mov	r3, r9
 8011f9c:	4640      	mov	r0, r8
 8011f9e:	4649      	mov	r1, r9
 8011fa0:	f7ee fdec 	bl	8000b7c <__aeabi_dcmpun>
 8011fa4:	b140      	cbz	r0, 8011fb8 <_printf_float+0xec>
 8011fa6:	464b      	mov	r3, r9
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	bfbc      	itt	lt
 8011fac:	232d      	movlt	r3, #45	; 0x2d
 8011fae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011fb2:	4a7f      	ldr	r2, [pc, #508]	; (80121b0 <_printf_float+0x2e4>)
 8011fb4:	4b7f      	ldr	r3, [pc, #508]	; (80121b4 <_printf_float+0x2e8>)
 8011fb6:	e7d1      	b.n	8011f5c <_printf_float+0x90>
 8011fb8:	6863      	ldr	r3, [r4, #4]
 8011fba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011fbe:	9206      	str	r2, [sp, #24]
 8011fc0:	1c5a      	adds	r2, r3, #1
 8011fc2:	d13f      	bne.n	8012044 <_printf_float+0x178>
 8011fc4:	2306      	movs	r3, #6
 8011fc6:	6063      	str	r3, [r4, #4]
 8011fc8:	9b05      	ldr	r3, [sp, #20]
 8011fca:	6861      	ldr	r1, [r4, #4]
 8011fcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	9303      	str	r3, [sp, #12]
 8011fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8011fd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011fda:	ab09      	add	r3, sp, #36	; 0x24
 8011fdc:	ec49 8b10 	vmov	d0, r8, r9
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	6022      	str	r2, [r4, #0]
 8011fe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7ff fecf 	bl	8011d8c <__cvt>
 8011fee:	9b06      	ldr	r3, [sp, #24]
 8011ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ff2:	2b47      	cmp	r3, #71	; 0x47
 8011ff4:	4680      	mov	r8, r0
 8011ff6:	d108      	bne.n	801200a <_printf_float+0x13e>
 8011ff8:	1cc8      	adds	r0, r1, #3
 8011ffa:	db02      	blt.n	8012002 <_printf_float+0x136>
 8011ffc:	6863      	ldr	r3, [r4, #4]
 8011ffe:	4299      	cmp	r1, r3
 8012000:	dd41      	ble.n	8012086 <_printf_float+0x1ba>
 8012002:	f1ab 0302 	sub.w	r3, fp, #2
 8012006:	fa5f fb83 	uxtb.w	fp, r3
 801200a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801200e:	d820      	bhi.n	8012052 <_printf_float+0x186>
 8012010:	3901      	subs	r1, #1
 8012012:	465a      	mov	r2, fp
 8012014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012018:	9109      	str	r1, [sp, #36]	; 0x24
 801201a:	f7ff ff19 	bl	8011e50 <__exponent>
 801201e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012020:	1813      	adds	r3, r2, r0
 8012022:	2a01      	cmp	r2, #1
 8012024:	4681      	mov	r9, r0
 8012026:	6123      	str	r3, [r4, #16]
 8012028:	dc02      	bgt.n	8012030 <_printf_float+0x164>
 801202a:	6822      	ldr	r2, [r4, #0]
 801202c:	07d2      	lsls	r2, r2, #31
 801202e:	d501      	bpl.n	8012034 <_printf_float+0x168>
 8012030:	3301      	adds	r3, #1
 8012032:	6123      	str	r3, [r4, #16]
 8012034:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012038:	2b00      	cmp	r3, #0
 801203a:	d09c      	beq.n	8011f76 <_printf_float+0xaa>
 801203c:	232d      	movs	r3, #45	; 0x2d
 801203e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012042:	e798      	b.n	8011f76 <_printf_float+0xaa>
 8012044:	9a06      	ldr	r2, [sp, #24]
 8012046:	2a47      	cmp	r2, #71	; 0x47
 8012048:	d1be      	bne.n	8011fc8 <_printf_float+0xfc>
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1bc      	bne.n	8011fc8 <_printf_float+0xfc>
 801204e:	2301      	movs	r3, #1
 8012050:	e7b9      	b.n	8011fc6 <_printf_float+0xfa>
 8012052:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012056:	d118      	bne.n	801208a <_printf_float+0x1be>
 8012058:	2900      	cmp	r1, #0
 801205a:	6863      	ldr	r3, [r4, #4]
 801205c:	dd0b      	ble.n	8012076 <_printf_float+0x1aa>
 801205e:	6121      	str	r1, [r4, #16]
 8012060:	b913      	cbnz	r3, 8012068 <_printf_float+0x19c>
 8012062:	6822      	ldr	r2, [r4, #0]
 8012064:	07d0      	lsls	r0, r2, #31
 8012066:	d502      	bpl.n	801206e <_printf_float+0x1a2>
 8012068:	3301      	adds	r3, #1
 801206a:	440b      	add	r3, r1
 801206c:	6123      	str	r3, [r4, #16]
 801206e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012070:	f04f 0900 	mov.w	r9, #0
 8012074:	e7de      	b.n	8012034 <_printf_float+0x168>
 8012076:	b913      	cbnz	r3, 801207e <_printf_float+0x1b2>
 8012078:	6822      	ldr	r2, [r4, #0]
 801207a:	07d2      	lsls	r2, r2, #31
 801207c:	d501      	bpl.n	8012082 <_printf_float+0x1b6>
 801207e:	3302      	adds	r3, #2
 8012080:	e7f4      	b.n	801206c <_printf_float+0x1a0>
 8012082:	2301      	movs	r3, #1
 8012084:	e7f2      	b.n	801206c <_printf_float+0x1a0>
 8012086:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801208a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801208c:	4299      	cmp	r1, r3
 801208e:	db05      	blt.n	801209c <_printf_float+0x1d0>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	6121      	str	r1, [r4, #16]
 8012094:	07d8      	lsls	r0, r3, #31
 8012096:	d5ea      	bpl.n	801206e <_printf_float+0x1a2>
 8012098:	1c4b      	adds	r3, r1, #1
 801209a:	e7e7      	b.n	801206c <_printf_float+0x1a0>
 801209c:	2900      	cmp	r1, #0
 801209e:	bfd4      	ite	le
 80120a0:	f1c1 0202 	rsble	r2, r1, #2
 80120a4:	2201      	movgt	r2, #1
 80120a6:	4413      	add	r3, r2
 80120a8:	e7e0      	b.n	801206c <_printf_float+0x1a0>
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	055a      	lsls	r2, r3, #21
 80120ae:	d407      	bmi.n	80120c0 <_printf_float+0x1f4>
 80120b0:	6923      	ldr	r3, [r4, #16]
 80120b2:	4642      	mov	r2, r8
 80120b4:	4631      	mov	r1, r6
 80120b6:	4628      	mov	r0, r5
 80120b8:	47b8      	blx	r7
 80120ba:	3001      	adds	r0, #1
 80120bc:	d12c      	bne.n	8012118 <_printf_float+0x24c>
 80120be:	e764      	b.n	8011f8a <_printf_float+0xbe>
 80120c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80120c4:	f240 80e0 	bls.w	8012288 <_printf_float+0x3bc>
 80120c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80120cc:	2200      	movs	r2, #0
 80120ce:	2300      	movs	r3, #0
 80120d0:	f7ee fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d034      	beq.n	8012142 <_printf_float+0x276>
 80120d8:	4a37      	ldr	r2, [pc, #220]	; (80121b8 <_printf_float+0x2ec>)
 80120da:	2301      	movs	r3, #1
 80120dc:	4631      	mov	r1, r6
 80120de:	4628      	mov	r0, r5
 80120e0:	47b8      	blx	r7
 80120e2:	3001      	adds	r0, #1
 80120e4:	f43f af51 	beq.w	8011f8a <_printf_float+0xbe>
 80120e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120ec:	429a      	cmp	r2, r3
 80120ee:	db02      	blt.n	80120f6 <_printf_float+0x22a>
 80120f0:	6823      	ldr	r3, [r4, #0]
 80120f2:	07d8      	lsls	r0, r3, #31
 80120f4:	d510      	bpl.n	8012118 <_printf_float+0x24c>
 80120f6:	ee18 3a10 	vmov	r3, s16
 80120fa:	4652      	mov	r2, sl
 80120fc:	4631      	mov	r1, r6
 80120fe:	4628      	mov	r0, r5
 8012100:	47b8      	blx	r7
 8012102:	3001      	adds	r0, #1
 8012104:	f43f af41 	beq.w	8011f8a <_printf_float+0xbe>
 8012108:	f04f 0800 	mov.w	r8, #0
 801210c:	f104 091a 	add.w	r9, r4, #26
 8012110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012112:	3b01      	subs	r3, #1
 8012114:	4543      	cmp	r3, r8
 8012116:	dc09      	bgt.n	801212c <_printf_float+0x260>
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	079b      	lsls	r3, r3, #30
 801211c:	f100 8107 	bmi.w	801232e <_printf_float+0x462>
 8012120:	68e0      	ldr	r0, [r4, #12]
 8012122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012124:	4298      	cmp	r0, r3
 8012126:	bfb8      	it	lt
 8012128:	4618      	movlt	r0, r3
 801212a:	e730      	b.n	8011f8e <_printf_float+0xc2>
 801212c:	2301      	movs	r3, #1
 801212e:	464a      	mov	r2, r9
 8012130:	4631      	mov	r1, r6
 8012132:	4628      	mov	r0, r5
 8012134:	47b8      	blx	r7
 8012136:	3001      	adds	r0, #1
 8012138:	f43f af27 	beq.w	8011f8a <_printf_float+0xbe>
 801213c:	f108 0801 	add.w	r8, r8, #1
 8012140:	e7e6      	b.n	8012110 <_printf_float+0x244>
 8012142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012144:	2b00      	cmp	r3, #0
 8012146:	dc39      	bgt.n	80121bc <_printf_float+0x2f0>
 8012148:	4a1b      	ldr	r2, [pc, #108]	; (80121b8 <_printf_float+0x2ec>)
 801214a:	2301      	movs	r3, #1
 801214c:	4631      	mov	r1, r6
 801214e:	4628      	mov	r0, r5
 8012150:	47b8      	blx	r7
 8012152:	3001      	adds	r0, #1
 8012154:	f43f af19 	beq.w	8011f8a <_printf_float+0xbe>
 8012158:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801215c:	4313      	orrs	r3, r2
 801215e:	d102      	bne.n	8012166 <_printf_float+0x29a>
 8012160:	6823      	ldr	r3, [r4, #0]
 8012162:	07d9      	lsls	r1, r3, #31
 8012164:	d5d8      	bpl.n	8012118 <_printf_float+0x24c>
 8012166:	ee18 3a10 	vmov	r3, s16
 801216a:	4652      	mov	r2, sl
 801216c:	4631      	mov	r1, r6
 801216e:	4628      	mov	r0, r5
 8012170:	47b8      	blx	r7
 8012172:	3001      	adds	r0, #1
 8012174:	f43f af09 	beq.w	8011f8a <_printf_float+0xbe>
 8012178:	f04f 0900 	mov.w	r9, #0
 801217c:	f104 0a1a 	add.w	sl, r4, #26
 8012180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012182:	425b      	negs	r3, r3
 8012184:	454b      	cmp	r3, r9
 8012186:	dc01      	bgt.n	801218c <_printf_float+0x2c0>
 8012188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801218a:	e792      	b.n	80120b2 <_printf_float+0x1e6>
 801218c:	2301      	movs	r3, #1
 801218e:	4652      	mov	r2, sl
 8012190:	4631      	mov	r1, r6
 8012192:	4628      	mov	r0, r5
 8012194:	47b8      	blx	r7
 8012196:	3001      	adds	r0, #1
 8012198:	f43f aef7 	beq.w	8011f8a <_printf_float+0xbe>
 801219c:	f109 0901 	add.w	r9, r9, #1
 80121a0:	e7ee      	b.n	8012180 <_printf_float+0x2b4>
 80121a2:	bf00      	nop
 80121a4:	7fefffff 	.word	0x7fefffff
 80121a8:	08018580 	.word	0x08018580
 80121ac:	08018584 	.word	0x08018584
 80121b0:	08018588 	.word	0x08018588
 80121b4:	0801858c 	.word	0x0801858c
 80121b8:	08018918 	.word	0x08018918
 80121bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121c0:	429a      	cmp	r2, r3
 80121c2:	bfa8      	it	ge
 80121c4:	461a      	movge	r2, r3
 80121c6:	2a00      	cmp	r2, #0
 80121c8:	4691      	mov	r9, r2
 80121ca:	dc37      	bgt.n	801223c <_printf_float+0x370>
 80121cc:	f04f 0b00 	mov.w	fp, #0
 80121d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121d4:	f104 021a 	add.w	r2, r4, #26
 80121d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121da:	9305      	str	r3, [sp, #20]
 80121dc:	eba3 0309 	sub.w	r3, r3, r9
 80121e0:	455b      	cmp	r3, fp
 80121e2:	dc33      	bgt.n	801224c <_printf_float+0x380>
 80121e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121e8:	429a      	cmp	r2, r3
 80121ea:	db3b      	blt.n	8012264 <_printf_float+0x398>
 80121ec:	6823      	ldr	r3, [r4, #0]
 80121ee:	07da      	lsls	r2, r3, #31
 80121f0:	d438      	bmi.n	8012264 <_printf_float+0x398>
 80121f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80121f6:	eba2 0903 	sub.w	r9, r2, r3
 80121fa:	9b05      	ldr	r3, [sp, #20]
 80121fc:	1ad2      	subs	r2, r2, r3
 80121fe:	4591      	cmp	r9, r2
 8012200:	bfa8      	it	ge
 8012202:	4691      	movge	r9, r2
 8012204:	f1b9 0f00 	cmp.w	r9, #0
 8012208:	dc35      	bgt.n	8012276 <_printf_float+0x3aa>
 801220a:	f04f 0800 	mov.w	r8, #0
 801220e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012212:	f104 0a1a 	add.w	sl, r4, #26
 8012216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801221a:	1a9b      	subs	r3, r3, r2
 801221c:	eba3 0309 	sub.w	r3, r3, r9
 8012220:	4543      	cmp	r3, r8
 8012222:	f77f af79 	ble.w	8012118 <_printf_float+0x24c>
 8012226:	2301      	movs	r3, #1
 8012228:	4652      	mov	r2, sl
 801222a:	4631      	mov	r1, r6
 801222c:	4628      	mov	r0, r5
 801222e:	47b8      	blx	r7
 8012230:	3001      	adds	r0, #1
 8012232:	f43f aeaa 	beq.w	8011f8a <_printf_float+0xbe>
 8012236:	f108 0801 	add.w	r8, r8, #1
 801223a:	e7ec      	b.n	8012216 <_printf_float+0x34a>
 801223c:	4613      	mov	r3, r2
 801223e:	4631      	mov	r1, r6
 8012240:	4642      	mov	r2, r8
 8012242:	4628      	mov	r0, r5
 8012244:	47b8      	blx	r7
 8012246:	3001      	adds	r0, #1
 8012248:	d1c0      	bne.n	80121cc <_printf_float+0x300>
 801224a:	e69e      	b.n	8011f8a <_printf_float+0xbe>
 801224c:	2301      	movs	r3, #1
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	9205      	str	r2, [sp, #20]
 8012254:	47b8      	blx	r7
 8012256:	3001      	adds	r0, #1
 8012258:	f43f ae97 	beq.w	8011f8a <_printf_float+0xbe>
 801225c:	9a05      	ldr	r2, [sp, #20]
 801225e:	f10b 0b01 	add.w	fp, fp, #1
 8012262:	e7b9      	b.n	80121d8 <_printf_float+0x30c>
 8012264:	ee18 3a10 	vmov	r3, s16
 8012268:	4652      	mov	r2, sl
 801226a:	4631      	mov	r1, r6
 801226c:	4628      	mov	r0, r5
 801226e:	47b8      	blx	r7
 8012270:	3001      	adds	r0, #1
 8012272:	d1be      	bne.n	80121f2 <_printf_float+0x326>
 8012274:	e689      	b.n	8011f8a <_printf_float+0xbe>
 8012276:	9a05      	ldr	r2, [sp, #20]
 8012278:	464b      	mov	r3, r9
 801227a:	4442      	add	r2, r8
 801227c:	4631      	mov	r1, r6
 801227e:	4628      	mov	r0, r5
 8012280:	47b8      	blx	r7
 8012282:	3001      	adds	r0, #1
 8012284:	d1c1      	bne.n	801220a <_printf_float+0x33e>
 8012286:	e680      	b.n	8011f8a <_printf_float+0xbe>
 8012288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801228a:	2a01      	cmp	r2, #1
 801228c:	dc01      	bgt.n	8012292 <_printf_float+0x3c6>
 801228e:	07db      	lsls	r3, r3, #31
 8012290:	d53a      	bpl.n	8012308 <_printf_float+0x43c>
 8012292:	2301      	movs	r3, #1
 8012294:	4642      	mov	r2, r8
 8012296:	4631      	mov	r1, r6
 8012298:	4628      	mov	r0, r5
 801229a:	47b8      	blx	r7
 801229c:	3001      	adds	r0, #1
 801229e:	f43f ae74 	beq.w	8011f8a <_printf_float+0xbe>
 80122a2:	ee18 3a10 	vmov	r3, s16
 80122a6:	4652      	mov	r2, sl
 80122a8:	4631      	mov	r1, r6
 80122aa:	4628      	mov	r0, r5
 80122ac:	47b8      	blx	r7
 80122ae:	3001      	adds	r0, #1
 80122b0:	f43f ae6b 	beq.w	8011f8a <_printf_float+0xbe>
 80122b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122b8:	2200      	movs	r2, #0
 80122ba:	2300      	movs	r3, #0
 80122bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80122c0:	f7ee fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 80122c4:	b9d8      	cbnz	r0, 80122fe <_printf_float+0x432>
 80122c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80122ca:	f108 0201 	add.w	r2, r8, #1
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	d10e      	bne.n	80122f6 <_printf_float+0x42a>
 80122d8:	e657      	b.n	8011f8a <_printf_float+0xbe>
 80122da:	2301      	movs	r3, #1
 80122dc:	4652      	mov	r2, sl
 80122de:	4631      	mov	r1, r6
 80122e0:	4628      	mov	r0, r5
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f ae50 	beq.w	8011f8a <_printf_float+0xbe>
 80122ea:	f108 0801 	add.w	r8, r8, #1
 80122ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f0:	3b01      	subs	r3, #1
 80122f2:	4543      	cmp	r3, r8
 80122f4:	dcf1      	bgt.n	80122da <_printf_float+0x40e>
 80122f6:	464b      	mov	r3, r9
 80122f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80122fc:	e6da      	b.n	80120b4 <_printf_float+0x1e8>
 80122fe:	f04f 0800 	mov.w	r8, #0
 8012302:	f104 0a1a 	add.w	sl, r4, #26
 8012306:	e7f2      	b.n	80122ee <_printf_float+0x422>
 8012308:	2301      	movs	r3, #1
 801230a:	4642      	mov	r2, r8
 801230c:	e7df      	b.n	80122ce <_printf_float+0x402>
 801230e:	2301      	movs	r3, #1
 8012310:	464a      	mov	r2, r9
 8012312:	4631      	mov	r1, r6
 8012314:	4628      	mov	r0, r5
 8012316:	47b8      	blx	r7
 8012318:	3001      	adds	r0, #1
 801231a:	f43f ae36 	beq.w	8011f8a <_printf_float+0xbe>
 801231e:	f108 0801 	add.w	r8, r8, #1
 8012322:	68e3      	ldr	r3, [r4, #12]
 8012324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012326:	1a5b      	subs	r3, r3, r1
 8012328:	4543      	cmp	r3, r8
 801232a:	dcf0      	bgt.n	801230e <_printf_float+0x442>
 801232c:	e6f8      	b.n	8012120 <_printf_float+0x254>
 801232e:	f04f 0800 	mov.w	r8, #0
 8012332:	f104 0919 	add.w	r9, r4, #25
 8012336:	e7f4      	b.n	8012322 <_printf_float+0x456>

08012338 <_printf_common>:
 8012338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	4616      	mov	r6, r2
 801233e:	4699      	mov	r9, r3
 8012340:	688a      	ldr	r2, [r1, #8]
 8012342:	690b      	ldr	r3, [r1, #16]
 8012344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012348:	4293      	cmp	r3, r2
 801234a:	bfb8      	it	lt
 801234c:	4613      	movlt	r3, r2
 801234e:	6033      	str	r3, [r6, #0]
 8012350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012354:	4607      	mov	r7, r0
 8012356:	460c      	mov	r4, r1
 8012358:	b10a      	cbz	r2, 801235e <_printf_common+0x26>
 801235a:	3301      	adds	r3, #1
 801235c:	6033      	str	r3, [r6, #0]
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	0699      	lsls	r1, r3, #26
 8012362:	bf42      	ittt	mi
 8012364:	6833      	ldrmi	r3, [r6, #0]
 8012366:	3302      	addmi	r3, #2
 8012368:	6033      	strmi	r3, [r6, #0]
 801236a:	6825      	ldr	r5, [r4, #0]
 801236c:	f015 0506 	ands.w	r5, r5, #6
 8012370:	d106      	bne.n	8012380 <_printf_common+0x48>
 8012372:	f104 0a19 	add.w	sl, r4, #25
 8012376:	68e3      	ldr	r3, [r4, #12]
 8012378:	6832      	ldr	r2, [r6, #0]
 801237a:	1a9b      	subs	r3, r3, r2
 801237c:	42ab      	cmp	r3, r5
 801237e:	dc26      	bgt.n	80123ce <_printf_common+0x96>
 8012380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012384:	1e13      	subs	r3, r2, #0
 8012386:	6822      	ldr	r2, [r4, #0]
 8012388:	bf18      	it	ne
 801238a:	2301      	movne	r3, #1
 801238c:	0692      	lsls	r2, r2, #26
 801238e:	d42b      	bmi.n	80123e8 <_printf_common+0xb0>
 8012390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012394:	4649      	mov	r1, r9
 8012396:	4638      	mov	r0, r7
 8012398:	47c0      	blx	r8
 801239a:	3001      	adds	r0, #1
 801239c:	d01e      	beq.n	80123dc <_printf_common+0xa4>
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	6922      	ldr	r2, [r4, #16]
 80123a2:	f003 0306 	and.w	r3, r3, #6
 80123a6:	2b04      	cmp	r3, #4
 80123a8:	bf02      	ittt	eq
 80123aa:	68e5      	ldreq	r5, [r4, #12]
 80123ac:	6833      	ldreq	r3, [r6, #0]
 80123ae:	1aed      	subeq	r5, r5, r3
 80123b0:	68a3      	ldr	r3, [r4, #8]
 80123b2:	bf0c      	ite	eq
 80123b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123b8:	2500      	movne	r5, #0
 80123ba:	4293      	cmp	r3, r2
 80123bc:	bfc4      	itt	gt
 80123be:	1a9b      	subgt	r3, r3, r2
 80123c0:	18ed      	addgt	r5, r5, r3
 80123c2:	2600      	movs	r6, #0
 80123c4:	341a      	adds	r4, #26
 80123c6:	42b5      	cmp	r5, r6
 80123c8:	d11a      	bne.n	8012400 <_printf_common+0xc8>
 80123ca:	2000      	movs	r0, #0
 80123cc:	e008      	b.n	80123e0 <_printf_common+0xa8>
 80123ce:	2301      	movs	r3, #1
 80123d0:	4652      	mov	r2, sl
 80123d2:	4649      	mov	r1, r9
 80123d4:	4638      	mov	r0, r7
 80123d6:	47c0      	blx	r8
 80123d8:	3001      	adds	r0, #1
 80123da:	d103      	bne.n	80123e4 <_printf_common+0xac>
 80123dc:	f04f 30ff 	mov.w	r0, #4294967295
 80123e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e4:	3501      	adds	r5, #1
 80123e6:	e7c6      	b.n	8012376 <_printf_common+0x3e>
 80123e8:	18e1      	adds	r1, r4, r3
 80123ea:	1c5a      	adds	r2, r3, #1
 80123ec:	2030      	movs	r0, #48	; 0x30
 80123ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123f2:	4422      	add	r2, r4
 80123f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123fc:	3302      	adds	r3, #2
 80123fe:	e7c7      	b.n	8012390 <_printf_common+0x58>
 8012400:	2301      	movs	r3, #1
 8012402:	4622      	mov	r2, r4
 8012404:	4649      	mov	r1, r9
 8012406:	4638      	mov	r0, r7
 8012408:	47c0      	blx	r8
 801240a:	3001      	adds	r0, #1
 801240c:	d0e6      	beq.n	80123dc <_printf_common+0xa4>
 801240e:	3601      	adds	r6, #1
 8012410:	e7d9      	b.n	80123c6 <_printf_common+0x8e>
	...

08012414 <_printf_i>:
 8012414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012418:	7e0f      	ldrb	r7, [r1, #24]
 801241a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801241c:	2f78      	cmp	r7, #120	; 0x78
 801241e:	4691      	mov	r9, r2
 8012420:	4680      	mov	r8, r0
 8012422:	460c      	mov	r4, r1
 8012424:	469a      	mov	sl, r3
 8012426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801242a:	d807      	bhi.n	801243c <_printf_i+0x28>
 801242c:	2f62      	cmp	r7, #98	; 0x62
 801242e:	d80a      	bhi.n	8012446 <_printf_i+0x32>
 8012430:	2f00      	cmp	r7, #0
 8012432:	f000 80d4 	beq.w	80125de <_printf_i+0x1ca>
 8012436:	2f58      	cmp	r7, #88	; 0x58
 8012438:	f000 80c0 	beq.w	80125bc <_printf_i+0x1a8>
 801243c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012444:	e03a      	b.n	80124bc <_printf_i+0xa8>
 8012446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801244a:	2b15      	cmp	r3, #21
 801244c:	d8f6      	bhi.n	801243c <_printf_i+0x28>
 801244e:	a101      	add	r1, pc, #4	; (adr r1, 8012454 <_printf_i+0x40>)
 8012450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012454:	080124ad 	.word	0x080124ad
 8012458:	080124c1 	.word	0x080124c1
 801245c:	0801243d 	.word	0x0801243d
 8012460:	0801243d 	.word	0x0801243d
 8012464:	0801243d 	.word	0x0801243d
 8012468:	0801243d 	.word	0x0801243d
 801246c:	080124c1 	.word	0x080124c1
 8012470:	0801243d 	.word	0x0801243d
 8012474:	0801243d 	.word	0x0801243d
 8012478:	0801243d 	.word	0x0801243d
 801247c:	0801243d 	.word	0x0801243d
 8012480:	080125c5 	.word	0x080125c5
 8012484:	080124ed 	.word	0x080124ed
 8012488:	0801257f 	.word	0x0801257f
 801248c:	0801243d 	.word	0x0801243d
 8012490:	0801243d 	.word	0x0801243d
 8012494:	080125e7 	.word	0x080125e7
 8012498:	0801243d 	.word	0x0801243d
 801249c:	080124ed 	.word	0x080124ed
 80124a0:	0801243d 	.word	0x0801243d
 80124a4:	0801243d 	.word	0x0801243d
 80124a8:	08012587 	.word	0x08012587
 80124ac:	682b      	ldr	r3, [r5, #0]
 80124ae:	1d1a      	adds	r2, r3, #4
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	602a      	str	r2, [r5, #0]
 80124b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124bc:	2301      	movs	r3, #1
 80124be:	e09f      	b.n	8012600 <_printf_i+0x1ec>
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	682b      	ldr	r3, [r5, #0]
 80124c4:	0607      	lsls	r7, r0, #24
 80124c6:	f103 0104 	add.w	r1, r3, #4
 80124ca:	6029      	str	r1, [r5, #0]
 80124cc:	d501      	bpl.n	80124d2 <_printf_i+0xbe>
 80124ce:	681e      	ldr	r6, [r3, #0]
 80124d0:	e003      	b.n	80124da <_printf_i+0xc6>
 80124d2:	0646      	lsls	r6, r0, #25
 80124d4:	d5fb      	bpl.n	80124ce <_printf_i+0xba>
 80124d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80124da:	2e00      	cmp	r6, #0
 80124dc:	da03      	bge.n	80124e6 <_printf_i+0xd2>
 80124de:	232d      	movs	r3, #45	; 0x2d
 80124e0:	4276      	negs	r6, r6
 80124e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124e6:	485a      	ldr	r0, [pc, #360]	; (8012650 <_printf_i+0x23c>)
 80124e8:	230a      	movs	r3, #10
 80124ea:	e012      	b.n	8012512 <_printf_i+0xfe>
 80124ec:	682b      	ldr	r3, [r5, #0]
 80124ee:	6820      	ldr	r0, [r4, #0]
 80124f0:	1d19      	adds	r1, r3, #4
 80124f2:	6029      	str	r1, [r5, #0]
 80124f4:	0605      	lsls	r5, r0, #24
 80124f6:	d501      	bpl.n	80124fc <_printf_i+0xe8>
 80124f8:	681e      	ldr	r6, [r3, #0]
 80124fa:	e002      	b.n	8012502 <_printf_i+0xee>
 80124fc:	0641      	lsls	r1, r0, #25
 80124fe:	d5fb      	bpl.n	80124f8 <_printf_i+0xe4>
 8012500:	881e      	ldrh	r6, [r3, #0]
 8012502:	4853      	ldr	r0, [pc, #332]	; (8012650 <_printf_i+0x23c>)
 8012504:	2f6f      	cmp	r7, #111	; 0x6f
 8012506:	bf0c      	ite	eq
 8012508:	2308      	moveq	r3, #8
 801250a:	230a      	movne	r3, #10
 801250c:	2100      	movs	r1, #0
 801250e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012512:	6865      	ldr	r5, [r4, #4]
 8012514:	60a5      	str	r5, [r4, #8]
 8012516:	2d00      	cmp	r5, #0
 8012518:	bfa2      	ittt	ge
 801251a:	6821      	ldrge	r1, [r4, #0]
 801251c:	f021 0104 	bicge.w	r1, r1, #4
 8012520:	6021      	strge	r1, [r4, #0]
 8012522:	b90e      	cbnz	r6, 8012528 <_printf_i+0x114>
 8012524:	2d00      	cmp	r5, #0
 8012526:	d04b      	beq.n	80125c0 <_printf_i+0x1ac>
 8012528:	4615      	mov	r5, r2
 801252a:	fbb6 f1f3 	udiv	r1, r6, r3
 801252e:	fb03 6711 	mls	r7, r3, r1, r6
 8012532:	5dc7      	ldrb	r7, [r0, r7]
 8012534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012538:	4637      	mov	r7, r6
 801253a:	42bb      	cmp	r3, r7
 801253c:	460e      	mov	r6, r1
 801253e:	d9f4      	bls.n	801252a <_printf_i+0x116>
 8012540:	2b08      	cmp	r3, #8
 8012542:	d10b      	bne.n	801255c <_printf_i+0x148>
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	07de      	lsls	r6, r3, #31
 8012548:	d508      	bpl.n	801255c <_printf_i+0x148>
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	6861      	ldr	r1, [r4, #4]
 801254e:	4299      	cmp	r1, r3
 8012550:	bfde      	ittt	le
 8012552:	2330      	movle	r3, #48	; 0x30
 8012554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012558:	f105 35ff 	addle.w	r5, r5, #4294967295
 801255c:	1b52      	subs	r2, r2, r5
 801255e:	6122      	str	r2, [r4, #16]
 8012560:	f8cd a000 	str.w	sl, [sp]
 8012564:	464b      	mov	r3, r9
 8012566:	aa03      	add	r2, sp, #12
 8012568:	4621      	mov	r1, r4
 801256a:	4640      	mov	r0, r8
 801256c:	f7ff fee4 	bl	8012338 <_printf_common>
 8012570:	3001      	adds	r0, #1
 8012572:	d14a      	bne.n	801260a <_printf_i+0x1f6>
 8012574:	f04f 30ff 	mov.w	r0, #4294967295
 8012578:	b004      	add	sp, #16
 801257a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	f043 0320 	orr.w	r3, r3, #32
 8012584:	6023      	str	r3, [r4, #0]
 8012586:	4833      	ldr	r0, [pc, #204]	; (8012654 <_printf_i+0x240>)
 8012588:	2778      	movs	r7, #120	; 0x78
 801258a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	6829      	ldr	r1, [r5, #0]
 8012592:	061f      	lsls	r7, r3, #24
 8012594:	f851 6b04 	ldr.w	r6, [r1], #4
 8012598:	d402      	bmi.n	80125a0 <_printf_i+0x18c>
 801259a:	065f      	lsls	r7, r3, #25
 801259c:	bf48      	it	mi
 801259e:	b2b6      	uxthmi	r6, r6
 80125a0:	07df      	lsls	r7, r3, #31
 80125a2:	bf48      	it	mi
 80125a4:	f043 0320 	orrmi.w	r3, r3, #32
 80125a8:	6029      	str	r1, [r5, #0]
 80125aa:	bf48      	it	mi
 80125ac:	6023      	strmi	r3, [r4, #0]
 80125ae:	b91e      	cbnz	r6, 80125b8 <_printf_i+0x1a4>
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	f023 0320 	bic.w	r3, r3, #32
 80125b6:	6023      	str	r3, [r4, #0]
 80125b8:	2310      	movs	r3, #16
 80125ba:	e7a7      	b.n	801250c <_printf_i+0xf8>
 80125bc:	4824      	ldr	r0, [pc, #144]	; (8012650 <_printf_i+0x23c>)
 80125be:	e7e4      	b.n	801258a <_printf_i+0x176>
 80125c0:	4615      	mov	r5, r2
 80125c2:	e7bd      	b.n	8012540 <_printf_i+0x12c>
 80125c4:	682b      	ldr	r3, [r5, #0]
 80125c6:	6826      	ldr	r6, [r4, #0]
 80125c8:	6961      	ldr	r1, [r4, #20]
 80125ca:	1d18      	adds	r0, r3, #4
 80125cc:	6028      	str	r0, [r5, #0]
 80125ce:	0635      	lsls	r5, r6, #24
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	d501      	bpl.n	80125d8 <_printf_i+0x1c4>
 80125d4:	6019      	str	r1, [r3, #0]
 80125d6:	e002      	b.n	80125de <_printf_i+0x1ca>
 80125d8:	0670      	lsls	r0, r6, #25
 80125da:	d5fb      	bpl.n	80125d4 <_printf_i+0x1c0>
 80125dc:	8019      	strh	r1, [r3, #0]
 80125de:	2300      	movs	r3, #0
 80125e0:	6123      	str	r3, [r4, #16]
 80125e2:	4615      	mov	r5, r2
 80125e4:	e7bc      	b.n	8012560 <_printf_i+0x14c>
 80125e6:	682b      	ldr	r3, [r5, #0]
 80125e8:	1d1a      	adds	r2, r3, #4
 80125ea:	602a      	str	r2, [r5, #0]
 80125ec:	681d      	ldr	r5, [r3, #0]
 80125ee:	6862      	ldr	r2, [r4, #4]
 80125f0:	2100      	movs	r1, #0
 80125f2:	4628      	mov	r0, r5
 80125f4:	f7ed fe14 	bl	8000220 <memchr>
 80125f8:	b108      	cbz	r0, 80125fe <_printf_i+0x1ea>
 80125fa:	1b40      	subs	r0, r0, r5
 80125fc:	6060      	str	r0, [r4, #4]
 80125fe:	6863      	ldr	r3, [r4, #4]
 8012600:	6123      	str	r3, [r4, #16]
 8012602:	2300      	movs	r3, #0
 8012604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012608:	e7aa      	b.n	8012560 <_printf_i+0x14c>
 801260a:	6923      	ldr	r3, [r4, #16]
 801260c:	462a      	mov	r2, r5
 801260e:	4649      	mov	r1, r9
 8012610:	4640      	mov	r0, r8
 8012612:	47d0      	blx	sl
 8012614:	3001      	adds	r0, #1
 8012616:	d0ad      	beq.n	8012574 <_printf_i+0x160>
 8012618:	6823      	ldr	r3, [r4, #0]
 801261a:	079b      	lsls	r3, r3, #30
 801261c:	d413      	bmi.n	8012646 <_printf_i+0x232>
 801261e:	68e0      	ldr	r0, [r4, #12]
 8012620:	9b03      	ldr	r3, [sp, #12]
 8012622:	4298      	cmp	r0, r3
 8012624:	bfb8      	it	lt
 8012626:	4618      	movlt	r0, r3
 8012628:	e7a6      	b.n	8012578 <_printf_i+0x164>
 801262a:	2301      	movs	r3, #1
 801262c:	4632      	mov	r2, r6
 801262e:	4649      	mov	r1, r9
 8012630:	4640      	mov	r0, r8
 8012632:	47d0      	blx	sl
 8012634:	3001      	adds	r0, #1
 8012636:	d09d      	beq.n	8012574 <_printf_i+0x160>
 8012638:	3501      	adds	r5, #1
 801263a:	68e3      	ldr	r3, [r4, #12]
 801263c:	9903      	ldr	r1, [sp, #12]
 801263e:	1a5b      	subs	r3, r3, r1
 8012640:	42ab      	cmp	r3, r5
 8012642:	dcf2      	bgt.n	801262a <_printf_i+0x216>
 8012644:	e7eb      	b.n	801261e <_printf_i+0x20a>
 8012646:	2500      	movs	r5, #0
 8012648:	f104 0619 	add.w	r6, r4, #25
 801264c:	e7f5      	b.n	801263a <_printf_i+0x226>
 801264e:	bf00      	nop
 8012650:	08018590 	.word	0x08018590
 8012654:	080185a1 	.word	0x080185a1

08012658 <_scanf_float>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	b087      	sub	sp, #28
 801265e:	4617      	mov	r7, r2
 8012660:	9303      	str	r3, [sp, #12]
 8012662:	688b      	ldr	r3, [r1, #8]
 8012664:	1e5a      	subs	r2, r3, #1
 8012666:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801266a:	bf83      	ittte	hi
 801266c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012670:	195b      	addhi	r3, r3, r5
 8012672:	9302      	strhi	r3, [sp, #8]
 8012674:	2300      	movls	r3, #0
 8012676:	bf86      	itte	hi
 8012678:	f240 135d 	movwhi	r3, #349	; 0x15d
 801267c:	608b      	strhi	r3, [r1, #8]
 801267e:	9302      	strls	r3, [sp, #8]
 8012680:	680b      	ldr	r3, [r1, #0]
 8012682:	468b      	mov	fp, r1
 8012684:	2500      	movs	r5, #0
 8012686:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801268a:	f84b 3b1c 	str.w	r3, [fp], #28
 801268e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012692:	4680      	mov	r8, r0
 8012694:	460c      	mov	r4, r1
 8012696:	465e      	mov	r6, fp
 8012698:	46aa      	mov	sl, r5
 801269a:	46a9      	mov	r9, r5
 801269c:	9501      	str	r5, [sp, #4]
 801269e:	68a2      	ldr	r2, [r4, #8]
 80126a0:	b152      	cbz	r2, 80126b8 <_scanf_float+0x60>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	2b4e      	cmp	r3, #78	; 0x4e
 80126a8:	d864      	bhi.n	8012774 <_scanf_float+0x11c>
 80126aa:	2b40      	cmp	r3, #64	; 0x40
 80126ac:	d83c      	bhi.n	8012728 <_scanf_float+0xd0>
 80126ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80126b2:	b2c8      	uxtb	r0, r1
 80126b4:	280e      	cmp	r0, #14
 80126b6:	d93a      	bls.n	801272e <_scanf_float+0xd6>
 80126b8:	f1b9 0f00 	cmp.w	r9, #0
 80126bc:	d003      	beq.n	80126c6 <_scanf_float+0x6e>
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126c4:	6023      	str	r3, [r4, #0]
 80126c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126ca:	f1ba 0f01 	cmp.w	sl, #1
 80126ce:	f200 8113 	bhi.w	80128f8 <_scanf_float+0x2a0>
 80126d2:	455e      	cmp	r6, fp
 80126d4:	f200 8105 	bhi.w	80128e2 <_scanf_float+0x28a>
 80126d8:	2501      	movs	r5, #1
 80126da:	4628      	mov	r0, r5
 80126dc:	b007      	add	sp, #28
 80126de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80126e6:	2a0d      	cmp	r2, #13
 80126e8:	d8e6      	bhi.n	80126b8 <_scanf_float+0x60>
 80126ea:	a101      	add	r1, pc, #4	; (adr r1, 80126f0 <_scanf_float+0x98>)
 80126ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80126f0:	0801282f 	.word	0x0801282f
 80126f4:	080126b9 	.word	0x080126b9
 80126f8:	080126b9 	.word	0x080126b9
 80126fc:	080126b9 	.word	0x080126b9
 8012700:	0801288f 	.word	0x0801288f
 8012704:	08012867 	.word	0x08012867
 8012708:	080126b9 	.word	0x080126b9
 801270c:	080126b9 	.word	0x080126b9
 8012710:	0801283d 	.word	0x0801283d
 8012714:	080126b9 	.word	0x080126b9
 8012718:	080126b9 	.word	0x080126b9
 801271c:	080126b9 	.word	0x080126b9
 8012720:	080126b9 	.word	0x080126b9
 8012724:	080127f5 	.word	0x080127f5
 8012728:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801272c:	e7db      	b.n	80126e6 <_scanf_float+0x8e>
 801272e:	290e      	cmp	r1, #14
 8012730:	d8c2      	bhi.n	80126b8 <_scanf_float+0x60>
 8012732:	a001      	add	r0, pc, #4	; (adr r0, 8012738 <_scanf_float+0xe0>)
 8012734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012738:	080127e7 	.word	0x080127e7
 801273c:	080126b9 	.word	0x080126b9
 8012740:	080127e7 	.word	0x080127e7
 8012744:	0801287b 	.word	0x0801287b
 8012748:	080126b9 	.word	0x080126b9
 801274c:	08012795 	.word	0x08012795
 8012750:	080127d1 	.word	0x080127d1
 8012754:	080127d1 	.word	0x080127d1
 8012758:	080127d1 	.word	0x080127d1
 801275c:	080127d1 	.word	0x080127d1
 8012760:	080127d1 	.word	0x080127d1
 8012764:	080127d1 	.word	0x080127d1
 8012768:	080127d1 	.word	0x080127d1
 801276c:	080127d1 	.word	0x080127d1
 8012770:	080127d1 	.word	0x080127d1
 8012774:	2b6e      	cmp	r3, #110	; 0x6e
 8012776:	d809      	bhi.n	801278c <_scanf_float+0x134>
 8012778:	2b60      	cmp	r3, #96	; 0x60
 801277a:	d8b2      	bhi.n	80126e2 <_scanf_float+0x8a>
 801277c:	2b54      	cmp	r3, #84	; 0x54
 801277e:	d077      	beq.n	8012870 <_scanf_float+0x218>
 8012780:	2b59      	cmp	r3, #89	; 0x59
 8012782:	d199      	bne.n	80126b8 <_scanf_float+0x60>
 8012784:	2d07      	cmp	r5, #7
 8012786:	d197      	bne.n	80126b8 <_scanf_float+0x60>
 8012788:	2508      	movs	r5, #8
 801278a:	e029      	b.n	80127e0 <_scanf_float+0x188>
 801278c:	2b74      	cmp	r3, #116	; 0x74
 801278e:	d06f      	beq.n	8012870 <_scanf_float+0x218>
 8012790:	2b79      	cmp	r3, #121	; 0x79
 8012792:	e7f6      	b.n	8012782 <_scanf_float+0x12a>
 8012794:	6821      	ldr	r1, [r4, #0]
 8012796:	05c8      	lsls	r0, r1, #23
 8012798:	d51a      	bpl.n	80127d0 <_scanf_float+0x178>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80127a0:	6021      	str	r1, [r4, #0]
 80127a2:	f109 0901 	add.w	r9, r9, #1
 80127a6:	b11b      	cbz	r3, 80127b0 <_scanf_float+0x158>
 80127a8:	3b01      	subs	r3, #1
 80127aa:	3201      	adds	r2, #1
 80127ac:	9302      	str	r3, [sp, #8]
 80127ae:	60a2      	str	r2, [r4, #8]
 80127b0:	68a3      	ldr	r3, [r4, #8]
 80127b2:	3b01      	subs	r3, #1
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	3301      	adds	r3, #1
 80127ba:	6123      	str	r3, [r4, #16]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	3b01      	subs	r3, #1
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	607b      	str	r3, [r7, #4]
 80127c4:	f340 8084 	ble.w	80128d0 <_scanf_float+0x278>
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	3301      	adds	r3, #1
 80127cc:	603b      	str	r3, [r7, #0]
 80127ce:	e766      	b.n	801269e <_scanf_float+0x46>
 80127d0:	eb1a 0f05 	cmn.w	sl, r5
 80127d4:	f47f af70 	bne.w	80126b8 <_scanf_float+0x60>
 80127d8:	6822      	ldr	r2, [r4, #0]
 80127da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80127de:	6022      	str	r2, [r4, #0]
 80127e0:	f806 3b01 	strb.w	r3, [r6], #1
 80127e4:	e7e4      	b.n	80127b0 <_scanf_float+0x158>
 80127e6:	6822      	ldr	r2, [r4, #0]
 80127e8:	0610      	lsls	r0, r2, #24
 80127ea:	f57f af65 	bpl.w	80126b8 <_scanf_float+0x60>
 80127ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80127f2:	e7f4      	b.n	80127de <_scanf_float+0x186>
 80127f4:	f1ba 0f00 	cmp.w	sl, #0
 80127f8:	d10e      	bne.n	8012818 <_scanf_float+0x1c0>
 80127fa:	f1b9 0f00 	cmp.w	r9, #0
 80127fe:	d10e      	bne.n	801281e <_scanf_float+0x1c6>
 8012800:	6822      	ldr	r2, [r4, #0]
 8012802:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012806:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801280a:	d108      	bne.n	801281e <_scanf_float+0x1c6>
 801280c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012810:	6022      	str	r2, [r4, #0]
 8012812:	f04f 0a01 	mov.w	sl, #1
 8012816:	e7e3      	b.n	80127e0 <_scanf_float+0x188>
 8012818:	f1ba 0f02 	cmp.w	sl, #2
 801281c:	d055      	beq.n	80128ca <_scanf_float+0x272>
 801281e:	2d01      	cmp	r5, #1
 8012820:	d002      	beq.n	8012828 <_scanf_float+0x1d0>
 8012822:	2d04      	cmp	r5, #4
 8012824:	f47f af48 	bne.w	80126b8 <_scanf_float+0x60>
 8012828:	3501      	adds	r5, #1
 801282a:	b2ed      	uxtb	r5, r5
 801282c:	e7d8      	b.n	80127e0 <_scanf_float+0x188>
 801282e:	f1ba 0f01 	cmp.w	sl, #1
 8012832:	f47f af41 	bne.w	80126b8 <_scanf_float+0x60>
 8012836:	f04f 0a02 	mov.w	sl, #2
 801283a:	e7d1      	b.n	80127e0 <_scanf_float+0x188>
 801283c:	b97d      	cbnz	r5, 801285e <_scanf_float+0x206>
 801283e:	f1b9 0f00 	cmp.w	r9, #0
 8012842:	f47f af3c 	bne.w	80126be <_scanf_float+0x66>
 8012846:	6822      	ldr	r2, [r4, #0]
 8012848:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801284c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012850:	f47f af39 	bne.w	80126c6 <_scanf_float+0x6e>
 8012854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012858:	6022      	str	r2, [r4, #0]
 801285a:	2501      	movs	r5, #1
 801285c:	e7c0      	b.n	80127e0 <_scanf_float+0x188>
 801285e:	2d03      	cmp	r5, #3
 8012860:	d0e2      	beq.n	8012828 <_scanf_float+0x1d0>
 8012862:	2d05      	cmp	r5, #5
 8012864:	e7de      	b.n	8012824 <_scanf_float+0x1cc>
 8012866:	2d02      	cmp	r5, #2
 8012868:	f47f af26 	bne.w	80126b8 <_scanf_float+0x60>
 801286c:	2503      	movs	r5, #3
 801286e:	e7b7      	b.n	80127e0 <_scanf_float+0x188>
 8012870:	2d06      	cmp	r5, #6
 8012872:	f47f af21 	bne.w	80126b8 <_scanf_float+0x60>
 8012876:	2507      	movs	r5, #7
 8012878:	e7b2      	b.n	80127e0 <_scanf_float+0x188>
 801287a:	6822      	ldr	r2, [r4, #0]
 801287c:	0591      	lsls	r1, r2, #22
 801287e:	f57f af1b 	bpl.w	80126b8 <_scanf_float+0x60>
 8012882:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012886:	6022      	str	r2, [r4, #0]
 8012888:	f8cd 9004 	str.w	r9, [sp, #4]
 801288c:	e7a8      	b.n	80127e0 <_scanf_float+0x188>
 801288e:	6822      	ldr	r2, [r4, #0]
 8012890:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012894:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012898:	d006      	beq.n	80128a8 <_scanf_float+0x250>
 801289a:	0550      	lsls	r0, r2, #21
 801289c:	f57f af0c 	bpl.w	80126b8 <_scanf_float+0x60>
 80128a0:	f1b9 0f00 	cmp.w	r9, #0
 80128a4:	f43f af0f 	beq.w	80126c6 <_scanf_float+0x6e>
 80128a8:	0591      	lsls	r1, r2, #22
 80128aa:	bf58      	it	pl
 80128ac:	9901      	ldrpl	r1, [sp, #4]
 80128ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80128b2:	bf58      	it	pl
 80128b4:	eba9 0101 	subpl.w	r1, r9, r1
 80128b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80128bc:	bf58      	it	pl
 80128be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80128c2:	6022      	str	r2, [r4, #0]
 80128c4:	f04f 0900 	mov.w	r9, #0
 80128c8:	e78a      	b.n	80127e0 <_scanf_float+0x188>
 80128ca:	f04f 0a03 	mov.w	sl, #3
 80128ce:	e787      	b.n	80127e0 <_scanf_float+0x188>
 80128d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80128d4:	4639      	mov	r1, r7
 80128d6:	4640      	mov	r0, r8
 80128d8:	4798      	blx	r3
 80128da:	2800      	cmp	r0, #0
 80128dc:	f43f aedf 	beq.w	801269e <_scanf_float+0x46>
 80128e0:	e6ea      	b.n	80126b8 <_scanf_float+0x60>
 80128e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80128ea:	463a      	mov	r2, r7
 80128ec:	4640      	mov	r0, r8
 80128ee:	4798      	blx	r3
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	3b01      	subs	r3, #1
 80128f4:	6123      	str	r3, [r4, #16]
 80128f6:	e6ec      	b.n	80126d2 <_scanf_float+0x7a>
 80128f8:	1e6b      	subs	r3, r5, #1
 80128fa:	2b06      	cmp	r3, #6
 80128fc:	d825      	bhi.n	801294a <_scanf_float+0x2f2>
 80128fe:	2d02      	cmp	r5, #2
 8012900:	d836      	bhi.n	8012970 <_scanf_float+0x318>
 8012902:	455e      	cmp	r6, fp
 8012904:	f67f aee8 	bls.w	80126d8 <_scanf_float+0x80>
 8012908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801290c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012910:	463a      	mov	r2, r7
 8012912:	4640      	mov	r0, r8
 8012914:	4798      	blx	r3
 8012916:	6923      	ldr	r3, [r4, #16]
 8012918:	3b01      	subs	r3, #1
 801291a:	6123      	str	r3, [r4, #16]
 801291c:	e7f1      	b.n	8012902 <_scanf_float+0x2aa>
 801291e:	9802      	ldr	r0, [sp, #8]
 8012920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012924:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012928:	9002      	str	r0, [sp, #8]
 801292a:	463a      	mov	r2, r7
 801292c:	4640      	mov	r0, r8
 801292e:	4798      	blx	r3
 8012930:	6923      	ldr	r3, [r4, #16]
 8012932:	3b01      	subs	r3, #1
 8012934:	6123      	str	r3, [r4, #16]
 8012936:	f10a 3aff 	add.w	sl, sl, #4294967295
 801293a:	fa5f fa8a 	uxtb.w	sl, sl
 801293e:	f1ba 0f02 	cmp.w	sl, #2
 8012942:	d1ec      	bne.n	801291e <_scanf_float+0x2c6>
 8012944:	3d03      	subs	r5, #3
 8012946:	b2ed      	uxtb	r5, r5
 8012948:	1b76      	subs	r6, r6, r5
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	05da      	lsls	r2, r3, #23
 801294e:	d52f      	bpl.n	80129b0 <_scanf_float+0x358>
 8012950:	055b      	lsls	r3, r3, #21
 8012952:	d510      	bpl.n	8012976 <_scanf_float+0x31e>
 8012954:	455e      	cmp	r6, fp
 8012956:	f67f aebf 	bls.w	80126d8 <_scanf_float+0x80>
 801295a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801295e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012962:	463a      	mov	r2, r7
 8012964:	4640      	mov	r0, r8
 8012966:	4798      	blx	r3
 8012968:	6923      	ldr	r3, [r4, #16]
 801296a:	3b01      	subs	r3, #1
 801296c:	6123      	str	r3, [r4, #16]
 801296e:	e7f1      	b.n	8012954 <_scanf_float+0x2fc>
 8012970:	46aa      	mov	sl, r5
 8012972:	9602      	str	r6, [sp, #8]
 8012974:	e7df      	b.n	8012936 <_scanf_float+0x2de>
 8012976:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	2965      	cmp	r1, #101	; 0x65
 801297e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012982:	f106 35ff 	add.w	r5, r6, #4294967295
 8012986:	6123      	str	r3, [r4, #16]
 8012988:	d00c      	beq.n	80129a4 <_scanf_float+0x34c>
 801298a:	2945      	cmp	r1, #69	; 0x45
 801298c:	d00a      	beq.n	80129a4 <_scanf_float+0x34c>
 801298e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012992:	463a      	mov	r2, r7
 8012994:	4640      	mov	r0, r8
 8012996:	4798      	blx	r3
 8012998:	6923      	ldr	r3, [r4, #16]
 801299a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801299e:	3b01      	subs	r3, #1
 80129a0:	1eb5      	subs	r5, r6, #2
 80129a2:	6123      	str	r3, [r4, #16]
 80129a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129a8:	463a      	mov	r2, r7
 80129aa:	4640      	mov	r0, r8
 80129ac:	4798      	blx	r3
 80129ae:	462e      	mov	r6, r5
 80129b0:	6825      	ldr	r5, [r4, #0]
 80129b2:	f015 0510 	ands.w	r5, r5, #16
 80129b6:	d158      	bne.n	8012a6a <_scanf_float+0x412>
 80129b8:	7035      	strb	r5, [r6, #0]
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80129c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80129c4:	d11c      	bne.n	8012a00 <_scanf_float+0x3a8>
 80129c6:	9b01      	ldr	r3, [sp, #4]
 80129c8:	454b      	cmp	r3, r9
 80129ca:	eba3 0209 	sub.w	r2, r3, r9
 80129ce:	d124      	bne.n	8012a1a <_scanf_float+0x3c2>
 80129d0:	2200      	movs	r2, #0
 80129d2:	4659      	mov	r1, fp
 80129d4:	4640      	mov	r0, r8
 80129d6:	f002 fcd3 	bl	8015380 <_strtod_r>
 80129da:	9b03      	ldr	r3, [sp, #12]
 80129dc:	6821      	ldr	r1, [r4, #0]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	f011 0f02 	tst.w	r1, #2
 80129e4:	ec57 6b10 	vmov	r6, r7, d0
 80129e8:	f103 0204 	add.w	r2, r3, #4
 80129ec:	d020      	beq.n	8012a30 <_scanf_float+0x3d8>
 80129ee:	9903      	ldr	r1, [sp, #12]
 80129f0:	600a      	str	r2, [r1, #0]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	e9c3 6700 	strd	r6, r7, [r3]
 80129f8:	68e3      	ldr	r3, [r4, #12]
 80129fa:	3301      	adds	r3, #1
 80129fc:	60e3      	str	r3, [r4, #12]
 80129fe:	e66c      	b.n	80126da <_scanf_float+0x82>
 8012a00:	9b04      	ldr	r3, [sp, #16]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d0e4      	beq.n	80129d0 <_scanf_float+0x378>
 8012a06:	9905      	ldr	r1, [sp, #20]
 8012a08:	230a      	movs	r3, #10
 8012a0a:	462a      	mov	r2, r5
 8012a0c:	3101      	adds	r1, #1
 8012a0e:	4640      	mov	r0, r8
 8012a10:	f002 fd3e 	bl	8015490 <_strtol_r>
 8012a14:	9b04      	ldr	r3, [sp, #16]
 8012a16:	9e05      	ldr	r6, [sp, #20]
 8012a18:	1ac2      	subs	r2, r0, r3
 8012a1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012a1e:	429e      	cmp	r6, r3
 8012a20:	bf28      	it	cs
 8012a22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012a26:	4912      	ldr	r1, [pc, #72]	; (8012a70 <_scanf_float+0x418>)
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f000 f8e7 	bl	8012bfc <siprintf>
 8012a2e:	e7cf      	b.n	80129d0 <_scanf_float+0x378>
 8012a30:	f011 0f04 	tst.w	r1, #4
 8012a34:	9903      	ldr	r1, [sp, #12]
 8012a36:	600a      	str	r2, [r1, #0]
 8012a38:	d1db      	bne.n	80129f2 <_scanf_float+0x39a>
 8012a3a:	f8d3 8000 	ldr.w	r8, [r3]
 8012a3e:	ee10 2a10 	vmov	r2, s0
 8012a42:	ee10 0a10 	vmov	r0, s0
 8012a46:	463b      	mov	r3, r7
 8012a48:	4639      	mov	r1, r7
 8012a4a:	f7ee f897 	bl	8000b7c <__aeabi_dcmpun>
 8012a4e:	b128      	cbz	r0, 8012a5c <_scanf_float+0x404>
 8012a50:	4808      	ldr	r0, [pc, #32]	; (8012a74 <_scanf_float+0x41c>)
 8012a52:	f000 fa5b 	bl	8012f0c <nanf>
 8012a56:	ed88 0a00 	vstr	s0, [r8]
 8012a5a:	e7cd      	b.n	80129f8 <_scanf_float+0x3a0>
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	4639      	mov	r1, r7
 8012a60:	f7ee f8ea 	bl	8000c38 <__aeabi_d2f>
 8012a64:	f8c8 0000 	str.w	r0, [r8]
 8012a68:	e7c6      	b.n	80129f8 <_scanf_float+0x3a0>
 8012a6a:	2500      	movs	r5, #0
 8012a6c:	e635      	b.n	80126da <_scanf_float+0x82>
 8012a6e:	bf00      	nop
 8012a70:	080185b2 	.word	0x080185b2
 8012a74:	08018960 	.word	0x08018960

08012a78 <std>:
 8012a78:	2300      	movs	r3, #0
 8012a7a:	b510      	push	{r4, lr}
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8012a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a86:	6083      	str	r3, [r0, #8]
 8012a88:	8181      	strh	r1, [r0, #12]
 8012a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8012a8c:	81c2      	strh	r2, [r0, #14]
 8012a8e:	6183      	str	r3, [r0, #24]
 8012a90:	4619      	mov	r1, r3
 8012a92:	2208      	movs	r2, #8
 8012a94:	305c      	adds	r0, #92	; 0x5c
 8012a96:	f000 f942 	bl	8012d1e <memset>
 8012a9a:	4b0d      	ldr	r3, [pc, #52]	; (8012ad0 <std+0x58>)
 8012a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8012a9e:	4b0d      	ldr	r3, [pc, #52]	; (8012ad4 <std+0x5c>)
 8012aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012aa2:	4b0d      	ldr	r3, [pc, #52]	; (8012ad8 <std+0x60>)
 8012aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012aa6:	4b0d      	ldr	r3, [pc, #52]	; (8012adc <std+0x64>)
 8012aa8:	6323      	str	r3, [r4, #48]	; 0x30
 8012aaa:	4b0d      	ldr	r3, [pc, #52]	; (8012ae0 <std+0x68>)
 8012aac:	6224      	str	r4, [r4, #32]
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	d006      	beq.n	8012ac0 <std+0x48>
 8012ab2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012ab6:	4294      	cmp	r4, r2
 8012ab8:	d002      	beq.n	8012ac0 <std+0x48>
 8012aba:	33d0      	adds	r3, #208	; 0xd0
 8012abc:	429c      	cmp	r4, r3
 8012abe:	d105      	bne.n	8012acc <std+0x54>
 8012ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac8:	f000 ba0e 	b.w	8012ee8 <__retarget_lock_init_recursive>
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	bf00      	nop
 8012ad0:	08012c95 	.word	0x08012c95
 8012ad4:	08012cbb 	.word	0x08012cbb
 8012ad8:	08012cf3 	.word	0x08012cf3
 8012adc:	08012d17 	.word	0x08012d17
 8012ae0:	20008f00 	.word	0x20008f00

08012ae4 <stdio_exit_handler>:
 8012ae4:	4a02      	ldr	r2, [pc, #8]	; (8012af0 <stdio_exit_handler+0xc>)
 8012ae6:	4903      	ldr	r1, [pc, #12]	; (8012af4 <stdio_exit_handler+0x10>)
 8012ae8:	4803      	ldr	r0, [pc, #12]	; (8012af8 <stdio_exit_handler+0x14>)
 8012aea:	f000 b869 	b.w	8012bc0 <_fwalk_sglue>
 8012aee:	bf00      	nop
 8012af0:	20000018 	.word	0x20000018
 8012af4:	08015e91 	.word	0x08015e91
 8012af8:	20000024 	.word	0x20000024

08012afc <cleanup_stdio>:
 8012afc:	6841      	ldr	r1, [r0, #4]
 8012afe:	4b0c      	ldr	r3, [pc, #48]	; (8012b30 <cleanup_stdio+0x34>)
 8012b00:	4299      	cmp	r1, r3
 8012b02:	b510      	push	{r4, lr}
 8012b04:	4604      	mov	r4, r0
 8012b06:	d001      	beq.n	8012b0c <cleanup_stdio+0x10>
 8012b08:	f003 f9c2 	bl	8015e90 <_fflush_r>
 8012b0c:	68a1      	ldr	r1, [r4, #8]
 8012b0e:	4b09      	ldr	r3, [pc, #36]	; (8012b34 <cleanup_stdio+0x38>)
 8012b10:	4299      	cmp	r1, r3
 8012b12:	d002      	beq.n	8012b1a <cleanup_stdio+0x1e>
 8012b14:	4620      	mov	r0, r4
 8012b16:	f003 f9bb 	bl	8015e90 <_fflush_r>
 8012b1a:	68e1      	ldr	r1, [r4, #12]
 8012b1c:	4b06      	ldr	r3, [pc, #24]	; (8012b38 <cleanup_stdio+0x3c>)
 8012b1e:	4299      	cmp	r1, r3
 8012b20:	d004      	beq.n	8012b2c <cleanup_stdio+0x30>
 8012b22:	4620      	mov	r0, r4
 8012b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b28:	f003 b9b2 	b.w	8015e90 <_fflush_r>
 8012b2c:	bd10      	pop	{r4, pc}
 8012b2e:	bf00      	nop
 8012b30:	20008f00 	.word	0x20008f00
 8012b34:	20008f68 	.word	0x20008f68
 8012b38:	20008fd0 	.word	0x20008fd0

08012b3c <global_stdio_init.part.0>:
 8012b3c:	b510      	push	{r4, lr}
 8012b3e:	4b0b      	ldr	r3, [pc, #44]	; (8012b6c <global_stdio_init.part.0+0x30>)
 8012b40:	4c0b      	ldr	r4, [pc, #44]	; (8012b70 <global_stdio_init.part.0+0x34>)
 8012b42:	4a0c      	ldr	r2, [pc, #48]	; (8012b74 <global_stdio_init.part.0+0x38>)
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	4620      	mov	r0, r4
 8012b48:	2200      	movs	r2, #0
 8012b4a:	2104      	movs	r1, #4
 8012b4c:	f7ff ff94 	bl	8012a78 <std>
 8012b50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012b54:	2201      	movs	r2, #1
 8012b56:	2109      	movs	r1, #9
 8012b58:	f7ff ff8e 	bl	8012a78 <std>
 8012b5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012b60:	2202      	movs	r2, #2
 8012b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b66:	2112      	movs	r1, #18
 8012b68:	f7ff bf86 	b.w	8012a78 <std>
 8012b6c:	20009038 	.word	0x20009038
 8012b70:	20008f00 	.word	0x20008f00
 8012b74:	08012ae5 	.word	0x08012ae5

08012b78 <__sfp_lock_acquire>:
 8012b78:	4801      	ldr	r0, [pc, #4]	; (8012b80 <__sfp_lock_acquire+0x8>)
 8012b7a:	f000 b9b6 	b.w	8012eea <__retarget_lock_acquire_recursive>
 8012b7e:	bf00      	nop
 8012b80:	20009041 	.word	0x20009041

08012b84 <__sfp_lock_release>:
 8012b84:	4801      	ldr	r0, [pc, #4]	; (8012b8c <__sfp_lock_release+0x8>)
 8012b86:	f000 b9b1 	b.w	8012eec <__retarget_lock_release_recursive>
 8012b8a:	bf00      	nop
 8012b8c:	20009041 	.word	0x20009041

08012b90 <__sinit>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	4604      	mov	r4, r0
 8012b94:	f7ff fff0 	bl	8012b78 <__sfp_lock_acquire>
 8012b98:	6a23      	ldr	r3, [r4, #32]
 8012b9a:	b11b      	cbz	r3, 8012ba4 <__sinit+0x14>
 8012b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ba0:	f7ff bff0 	b.w	8012b84 <__sfp_lock_release>
 8012ba4:	4b04      	ldr	r3, [pc, #16]	; (8012bb8 <__sinit+0x28>)
 8012ba6:	6223      	str	r3, [r4, #32]
 8012ba8:	4b04      	ldr	r3, [pc, #16]	; (8012bbc <__sinit+0x2c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f5      	bne.n	8012b9c <__sinit+0xc>
 8012bb0:	f7ff ffc4 	bl	8012b3c <global_stdio_init.part.0>
 8012bb4:	e7f2      	b.n	8012b9c <__sinit+0xc>
 8012bb6:	bf00      	nop
 8012bb8:	08012afd 	.word	0x08012afd
 8012bbc:	20009038 	.word	0x20009038

08012bc0 <_fwalk_sglue>:
 8012bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bc4:	4607      	mov	r7, r0
 8012bc6:	4688      	mov	r8, r1
 8012bc8:	4614      	mov	r4, r2
 8012bca:	2600      	movs	r6, #0
 8012bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8012bd4:	d505      	bpl.n	8012be2 <_fwalk_sglue+0x22>
 8012bd6:	6824      	ldr	r4, [r4, #0]
 8012bd8:	2c00      	cmp	r4, #0
 8012bda:	d1f7      	bne.n	8012bcc <_fwalk_sglue+0xc>
 8012bdc:	4630      	mov	r0, r6
 8012bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be2:	89ab      	ldrh	r3, [r5, #12]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d907      	bls.n	8012bf8 <_fwalk_sglue+0x38>
 8012be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bec:	3301      	adds	r3, #1
 8012bee:	d003      	beq.n	8012bf8 <_fwalk_sglue+0x38>
 8012bf0:	4629      	mov	r1, r5
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	47c0      	blx	r8
 8012bf6:	4306      	orrs	r6, r0
 8012bf8:	3568      	adds	r5, #104	; 0x68
 8012bfa:	e7e9      	b.n	8012bd0 <_fwalk_sglue+0x10>

08012bfc <siprintf>:
 8012bfc:	b40e      	push	{r1, r2, r3}
 8012bfe:	b500      	push	{lr}
 8012c00:	b09c      	sub	sp, #112	; 0x70
 8012c02:	ab1d      	add	r3, sp, #116	; 0x74
 8012c04:	9002      	str	r0, [sp, #8]
 8012c06:	9006      	str	r0, [sp, #24]
 8012c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c0c:	4809      	ldr	r0, [pc, #36]	; (8012c34 <siprintf+0x38>)
 8012c0e:	9107      	str	r1, [sp, #28]
 8012c10:	9104      	str	r1, [sp, #16]
 8012c12:	4909      	ldr	r1, [pc, #36]	; (8012c38 <siprintf+0x3c>)
 8012c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c18:	9105      	str	r1, [sp, #20]
 8012c1a:	6800      	ldr	r0, [r0, #0]
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	a902      	add	r1, sp, #8
 8012c20:	f002 fc92 	bl	8015548 <_svfiprintf_r>
 8012c24:	9b02      	ldr	r3, [sp, #8]
 8012c26:	2200      	movs	r2, #0
 8012c28:	701a      	strb	r2, [r3, #0]
 8012c2a:	b01c      	add	sp, #112	; 0x70
 8012c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c30:	b003      	add	sp, #12
 8012c32:	4770      	bx	lr
 8012c34:	20000070 	.word	0x20000070
 8012c38:	ffff0208 	.word	0xffff0208

08012c3c <siscanf>:
 8012c3c:	b40e      	push	{r1, r2, r3}
 8012c3e:	b510      	push	{r4, lr}
 8012c40:	b09f      	sub	sp, #124	; 0x7c
 8012c42:	ac21      	add	r4, sp, #132	; 0x84
 8012c44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012c48:	f854 2b04 	ldr.w	r2, [r4], #4
 8012c4c:	9201      	str	r2, [sp, #4]
 8012c4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012c52:	9004      	str	r0, [sp, #16]
 8012c54:	9008      	str	r0, [sp, #32]
 8012c56:	f7ed fb33 	bl	80002c0 <strlen>
 8012c5a:	4b0c      	ldr	r3, [pc, #48]	; (8012c8c <siscanf+0x50>)
 8012c5c:	9005      	str	r0, [sp, #20]
 8012c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8012c60:	930d      	str	r3, [sp, #52]	; 0x34
 8012c62:	480b      	ldr	r0, [pc, #44]	; (8012c90 <siscanf+0x54>)
 8012c64:	9a01      	ldr	r2, [sp, #4]
 8012c66:	6800      	ldr	r0, [r0, #0]
 8012c68:	9403      	str	r4, [sp, #12]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	9311      	str	r3, [sp, #68]	; 0x44
 8012c6e:	9316      	str	r3, [sp, #88]	; 0x58
 8012c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012c78:	a904      	add	r1, sp, #16
 8012c7a:	4623      	mov	r3, r4
 8012c7c:	f002 fdbc 	bl	80157f8 <__ssvfiscanf_r>
 8012c80:	b01f      	add	sp, #124	; 0x7c
 8012c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c86:	b003      	add	sp, #12
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	08012cb7 	.word	0x08012cb7
 8012c90:	20000070 	.word	0x20000070

08012c94 <__sread>:
 8012c94:	b510      	push	{r4, lr}
 8012c96:	460c      	mov	r4, r1
 8012c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c9c:	f000 f8d6 	bl	8012e4c <_read_r>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	bfab      	itete	ge
 8012ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ca8:	181b      	addge	r3, r3, r0
 8012caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012cae:	bfac      	ite	ge
 8012cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012cb2:	81a3      	strhlt	r3, [r4, #12]
 8012cb4:	bd10      	pop	{r4, pc}

08012cb6 <__seofread>:
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	4770      	bx	lr

08012cba <__swrite>:
 8012cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cbe:	461f      	mov	r7, r3
 8012cc0:	898b      	ldrh	r3, [r1, #12]
 8012cc2:	05db      	lsls	r3, r3, #23
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	4616      	mov	r6, r2
 8012cca:	d505      	bpl.n	8012cd8 <__swrite+0x1e>
 8012ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f000 f8a8 	bl	8012e28 <_lseek_r>
 8012cd8:	89a3      	ldrh	r3, [r4, #12]
 8012cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ce2:	81a3      	strh	r3, [r4, #12]
 8012ce4:	4632      	mov	r2, r6
 8012ce6:	463b      	mov	r3, r7
 8012ce8:	4628      	mov	r0, r5
 8012cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cee:	f000 b8bf 	b.w	8012e70 <_write_r>

08012cf2 <__sseek>:
 8012cf2:	b510      	push	{r4, lr}
 8012cf4:	460c      	mov	r4, r1
 8012cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cfa:	f000 f895 	bl	8012e28 <_lseek_r>
 8012cfe:	1c43      	adds	r3, r0, #1
 8012d00:	89a3      	ldrh	r3, [r4, #12]
 8012d02:	bf15      	itete	ne
 8012d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d0e:	81a3      	strheq	r3, [r4, #12]
 8012d10:	bf18      	it	ne
 8012d12:	81a3      	strhne	r3, [r4, #12]
 8012d14:	bd10      	pop	{r4, pc}

08012d16 <__sclose>:
 8012d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d1a:	f000 b81f 	b.w	8012d5c <_close_r>

08012d1e <memset>:
 8012d1e:	4402      	add	r2, r0
 8012d20:	4603      	mov	r3, r0
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d100      	bne.n	8012d28 <memset+0xa>
 8012d26:	4770      	bx	lr
 8012d28:	f803 1b01 	strb.w	r1, [r3], #1
 8012d2c:	e7f9      	b.n	8012d22 <memset+0x4>

08012d2e <strncmp>:
 8012d2e:	b510      	push	{r4, lr}
 8012d30:	b16a      	cbz	r2, 8012d4e <strncmp+0x20>
 8012d32:	3901      	subs	r1, #1
 8012d34:	1884      	adds	r4, r0, r2
 8012d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d103      	bne.n	8012d4a <strncmp+0x1c>
 8012d42:	42a0      	cmp	r0, r4
 8012d44:	d001      	beq.n	8012d4a <strncmp+0x1c>
 8012d46:	2a00      	cmp	r2, #0
 8012d48:	d1f5      	bne.n	8012d36 <strncmp+0x8>
 8012d4a:	1ad0      	subs	r0, r2, r3
 8012d4c:	bd10      	pop	{r4, pc}
 8012d4e:	4610      	mov	r0, r2
 8012d50:	e7fc      	b.n	8012d4c <strncmp+0x1e>
	...

08012d54 <_localeconv_r>:
 8012d54:	4800      	ldr	r0, [pc, #0]	; (8012d58 <_localeconv_r+0x4>)
 8012d56:	4770      	bx	lr
 8012d58:	20000164 	.word	0x20000164

08012d5c <_close_r>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	4d06      	ldr	r5, [pc, #24]	; (8012d78 <_close_r+0x1c>)
 8012d60:	2300      	movs	r3, #0
 8012d62:	4604      	mov	r4, r0
 8012d64:	4608      	mov	r0, r1
 8012d66:	602b      	str	r3, [r5, #0]
 8012d68:	f7f3 fa41 	bl	80061ee <_close>
 8012d6c:	1c43      	adds	r3, r0, #1
 8012d6e:	d102      	bne.n	8012d76 <_close_r+0x1a>
 8012d70:	682b      	ldr	r3, [r5, #0]
 8012d72:	b103      	cbz	r3, 8012d76 <_close_r+0x1a>
 8012d74:	6023      	str	r3, [r4, #0]
 8012d76:	bd38      	pop	{r3, r4, r5, pc}
 8012d78:	2000903c 	.word	0x2000903c

08012d7c <_reclaim_reent>:
 8012d7c:	4b29      	ldr	r3, [pc, #164]	; (8012e24 <_reclaim_reent+0xa8>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4283      	cmp	r3, r0
 8012d82:	b570      	push	{r4, r5, r6, lr}
 8012d84:	4604      	mov	r4, r0
 8012d86:	d04b      	beq.n	8012e20 <_reclaim_reent+0xa4>
 8012d88:	69c3      	ldr	r3, [r0, #28]
 8012d8a:	b143      	cbz	r3, 8012d9e <_reclaim_reent+0x22>
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d144      	bne.n	8012e1c <_reclaim_reent+0xa0>
 8012d92:	69e3      	ldr	r3, [r4, #28]
 8012d94:	6819      	ldr	r1, [r3, #0]
 8012d96:	b111      	cbz	r1, 8012d9e <_reclaim_reent+0x22>
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 ff37 	bl	8013c0c <_free_r>
 8012d9e:	6961      	ldr	r1, [r4, #20]
 8012da0:	b111      	cbz	r1, 8012da8 <_reclaim_reent+0x2c>
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 ff32 	bl	8013c0c <_free_r>
 8012da8:	69e1      	ldr	r1, [r4, #28]
 8012daa:	b111      	cbz	r1, 8012db2 <_reclaim_reent+0x36>
 8012dac:	4620      	mov	r0, r4
 8012dae:	f000 ff2d 	bl	8013c0c <_free_r>
 8012db2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012db4:	b111      	cbz	r1, 8012dbc <_reclaim_reent+0x40>
 8012db6:	4620      	mov	r0, r4
 8012db8:	f000 ff28 	bl	8013c0c <_free_r>
 8012dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dbe:	b111      	cbz	r1, 8012dc6 <_reclaim_reent+0x4a>
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f000 ff23 	bl	8013c0c <_free_r>
 8012dc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012dc8:	b111      	cbz	r1, 8012dd0 <_reclaim_reent+0x54>
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f000 ff1e 	bl	8013c0c <_free_r>
 8012dd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012dd2:	b111      	cbz	r1, 8012dda <_reclaim_reent+0x5e>
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f000 ff19 	bl	8013c0c <_free_r>
 8012dda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012ddc:	b111      	cbz	r1, 8012de4 <_reclaim_reent+0x68>
 8012dde:	4620      	mov	r0, r4
 8012de0:	f000 ff14 	bl	8013c0c <_free_r>
 8012de4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012de6:	b111      	cbz	r1, 8012dee <_reclaim_reent+0x72>
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 ff0f 	bl	8013c0c <_free_r>
 8012dee:	6a23      	ldr	r3, [r4, #32]
 8012df0:	b1b3      	cbz	r3, 8012e20 <_reclaim_reent+0xa4>
 8012df2:	4620      	mov	r0, r4
 8012df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012df8:	4718      	bx	r3
 8012dfa:	5949      	ldr	r1, [r1, r5]
 8012dfc:	b941      	cbnz	r1, 8012e10 <_reclaim_reent+0x94>
 8012dfe:	3504      	adds	r5, #4
 8012e00:	69e3      	ldr	r3, [r4, #28]
 8012e02:	2d80      	cmp	r5, #128	; 0x80
 8012e04:	68d9      	ldr	r1, [r3, #12]
 8012e06:	d1f8      	bne.n	8012dfa <_reclaim_reent+0x7e>
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f000 feff 	bl	8013c0c <_free_r>
 8012e0e:	e7c0      	b.n	8012d92 <_reclaim_reent+0x16>
 8012e10:	680e      	ldr	r6, [r1, #0]
 8012e12:	4620      	mov	r0, r4
 8012e14:	f000 fefa 	bl	8013c0c <_free_r>
 8012e18:	4631      	mov	r1, r6
 8012e1a:	e7ef      	b.n	8012dfc <_reclaim_reent+0x80>
 8012e1c:	2500      	movs	r5, #0
 8012e1e:	e7ef      	b.n	8012e00 <_reclaim_reent+0x84>
 8012e20:	bd70      	pop	{r4, r5, r6, pc}
 8012e22:	bf00      	nop
 8012e24:	20000070 	.word	0x20000070

08012e28 <_lseek_r>:
 8012e28:	b538      	push	{r3, r4, r5, lr}
 8012e2a:	4d07      	ldr	r5, [pc, #28]	; (8012e48 <_lseek_r+0x20>)
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	4608      	mov	r0, r1
 8012e30:	4611      	mov	r1, r2
 8012e32:	2200      	movs	r2, #0
 8012e34:	602a      	str	r2, [r5, #0]
 8012e36:	461a      	mov	r2, r3
 8012e38:	f7f3 fa00 	bl	800623c <_lseek>
 8012e3c:	1c43      	adds	r3, r0, #1
 8012e3e:	d102      	bne.n	8012e46 <_lseek_r+0x1e>
 8012e40:	682b      	ldr	r3, [r5, #0]
 8012e42:	b103      	cbz	r3, 8012e46 <_lseek_r+0x1e>
 8012e44:	6023      	str	r3, [r4, #0]
 8012e46:	bd38      	pop	{r3, r4, r5, pc}
 8012e48:	2000903c 	.word	0x2000903c

08012e4c <_read_r>:
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	4d07      	ldr	r5, [pc, #28]	; (8012e6c <_read_r+0x20>)
 8012e50:	4604      	mov	r4, r0
 8012e52:	4608      	mov	r0, r1
 8012e54:	4611      	mov	r1, r2
 8012e56:	2200      	movs	r2, #0
 8012e58:	602a      	str	r2, [r5, #0]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	f7f3 f98e 	bl	800617c <_read>
 8012e60:	1c43      	adds	r3, r0, #1
 8012e62:	d102      	bne.n	8012e6a <_read_r+0x1e>
 8012e64:	682b      	ldr	r3, [r5, #0]
 8012e66:	b103      	cbz	r3, 8012e6a <_read_r+0x1e>
 8012e68:	6023      	str	r3, [r4, #0]
 8012e6a:	bd38      	pop	{r3, r4, r5, pc}
 8012e6c:	2000903c 	.word	0x2000903c

08012e70 <_write_r>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	4d07      	ldr	r5, [pc, #28]	; (8012e90 <_write_r+0x20>)
 8012e74:	4604      	mov	r4, r0
 8012e76:	4608      	mov	r0, r1
 8012e78:	4611      	mov	r1, r2
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	602a      	str	r2, [r5, #0]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	f7f3 f999 	bl	80061b6 <_write>
 8012e84:	1c43      	adds	r3, r0, #1
 8012e86:	d102      	bne.n	8012e8e <_write_r+0x1e>
 8012e88:	682b      	ldr	r3, [r5, #0]
 8012e8a:	b103      	cbz	r3, 8012e8e <_write_r+0x1e>
 8012e8c:	6023      	str	r3, [r4, #0]
 8012e8e:	bd38      	pop	{r3, r4, r5, pc}
 8012e90:	2000903c 	.word	0x2000903c

08012e94 <__errno>:
 8012e94:	4b01      	ldr	r3, [pc, #4]	; (8012e9c <__errno+0x8>)
 8012e96:	6818      	ldr	r0, [r3, #0]
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	20000070 	.word	0x20000070

08012ea0 <__libc_init_array>:
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	4d0d      	ldr	r5, [pc, #52]	; (8012ed8 <__libc_init_array+0x38>)
 8012ea4:	4c0d      	ldr	r4, [pc, #52]	; (8012edc <__libc_init_array+0x3c>)
 8012ea6:	1b64      	subs	r4, r4, r5
 8012ea8:	10a4      	asrs	r4, r4, #2
 8012eaa:	2600      	movs	r6, #0
 8012eac:	42a6      	cmp	r6, r4
 8012eae:	d109      	bne.n	8012ec4 <__libc_init_array+0x24>
 8012eb0:	4d0b      	ldr	r5, [pc, #44]	; (8012ee0 <__libc_init_array+0x40>)
 8012eb2:	4c0c      	ldr	r4, [pc, #48]	; (8012ee4 <__libc_init_array+0x44>)
 8012eb4:	f005 f8ae 	bl	8018014 <_init>
 8012eb8:	1b64      	subs	r4, r4, r5
 8012eba:	10a4      	asrs	r4, r4, #2
 8012ebc:	2600      	movs	r6, #0
 8012ebe:	42a6      	cmp	r6, r4
 8012ec0:	d105      	bne.n	8012ece <__libc_init_array+0x2e>
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}
 8012ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ec8:	4798      	blx	r3
 8012eca:	3601      	adds	r6, #1
 8012ecc:	e7ee      	b.n	8012eac <__libc_init_array+0xc>
 8012ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ed2:	4798      	blx	r3
 8012ed4:	3601      	adds	r6, #1
 8012ed6:	e7f2      	b.n	8012ebe <__libc_init_array+0x1e>
 8012ed8:	08018a38 	.word	0x08018a38
 8012edc:	08018a38 	.word	0x08018a38
 8012ee0:	08018a38 	.word	0x08018a38
 8012ee4:	08018a3c 	.word	0x08018a3c

08012ee8 <__retarget_lock_init_recursive>:
 8012ee8:	4770      	bx	lr

08012eea <__retarget_lock_acquire_recursive>:
 8012eea:	4770      	bx	lr

08012eec <__retarget_lock_release_recursive>:
 8012eec:	4770      	bx	lr

08012eee <memcpy>:
 8012eee:	440a      	add	r2, r1
 8012ef0:	4291      	cmp	r1, r2
 8012ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ef6:	d100      	bne.n	8012efa <memcpy+0xc>
 8012ef8:	4770      	bx	lr
 8012efa:	b510      	push	{r4, lr}
 8012efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f04:	4291      	cmp	r1, r2
 8012f06:	d1f9      	bne.n	8012efc <memcpy+0xe>
 8012f08:	bd10      	pop	{r4, pc}
	...

08012f0c <nanf>:
 8012f0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f14 <nanf+0x8>
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	7fc00000 	.word	0x7fc00000

08012f18 <quorem>:
 8012f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	6903      	ldr	r3, [r0, #16]
 8012f1e:	690c      	ldr	r4, [r1, #16]
 8012f20:	42a3      	cmp	r3, r4
 8012f22:	4607      	mov	r7, r0
 8012f24:	db7e      	blt.n	8013024 <quorem+0x10c>
 8012f26:	3c01      	subs	r4, #1
 8012f28:	f101 0814 	add.w	r8, r1, #20
 8012f2c:	f100 0514 	add.w	r5, r0, #20
 8012f30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	429a      	cmp	r2, r3
 8012f42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012f46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012f4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f4e:	d331      	bcc.n	8012fb4 <quorem+0x9c>
 8012f50:	f04f 0e00 	mov.w	lr, #0
 8012f54:	4640      	mov	r0, r8
 8012f56:	46ac      	mov	ip, r5
 8012f58:	46f2      	mov	sl, lr
 8012f5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f5e:	b293      	uxth	r3, r2
 8012f60:	fb06 e303 	mla	r3, r6, r3, lr
 8012f64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f68:	0c1a      	lsrs	r2, r3, #16
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8012f70:	f8dc a000 	ldr.w	sl, [ip]
 8012f74:	fa13 f38a 	uxtah	r3, r3, sl
 8012f78:	fb06 220e 	mla	r2, r6, lr, r2
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	9b00      	ldr	r3, [sp, #0]
 8012f80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f84:	b292      	uxth	r2, r2
 8012f86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012f8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f92:	4581      	cmp	r9, r0
 8012f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f98:	f84c 3b04 	str.w	r3, [ip], #4
 8012f9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012fa0:	d2db      	bcs.n	8012f5a <quorem+0x42>
 8012fa2:	f855 300b 	ldr.w	r3, [r5, fp]
 8012fa6:	b92b      	cbnz	r3, 8012fb4 <quorem+0x9c>
 8012fa8:	9b01      	ldr	r3, [sp, #4]
 8012faa:	3b04      	subs	r3, #4
 8012fac:	429d      	cmp	r5, r3
 8012fae:	461a      	mov	r2, r3
 8012fb0:	d32c      	bcc.n	801300c <quorem+0xf4>
 8012fb2:	613c      	str	r4, [r7, #16]
 8012fb4:	4638      	mov	r0, r7
 8012fb6:	f001 f9ef 	bl	8014398 <__mcmp>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	db22      	blt.n	8013004 <quorem+0xec>
 8012fbe:	3601      	adds	r6, #1
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8012fc8:	f8d1 c000 	ldr.w	ip, [r1]
 8012fcc:	b293      	uxth	r3, r2
 8012fce:	1ac3      	subs	r3, r0, r3
 8012fd0:	0c12      	lsrs	r2, r2, #16
 8012fd2:	fa13 f38c 	uxtah	r3, r3, ip
 8012fd6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012fda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012fe4:	45c1      	cmp	r9, r8
 8012fe6:	f841 3b04 	str.w	r3, [r1], #4
 8012fea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012fee:	d2e9      	bcs.n	8012fc4 <quorem+0xac>
 8012ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ff8:	b922      	cbnz	r2, 8013004 <quorem+0xec>
 8012ffa:	3b04      	subs	r3, #4
 8012ffc:	429d      	cmp	r5, r3
 8012ffe:	461a      	mov	r2, r3
 8013000:	d30a      	bcc.n	8013018 <quorem+0x100>
 8013002:	613c      	str	r4, [r7, #16]
 8013004:	4630      	mov	r0, r6
 8013006:	b003      	add	sp, #12
 8013008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300c:	6812      	ldr	r2, [r2, #0]
 801300e:	3b04      	subs	r3, #4
 8013010:	2a00      	cmp	r2, #0
 8013012:	d1ce      	bne.n	8012fb2 <quorem+0x9a>
 8013014:	3c01      	subs	r4, #1
 8013016:	e7c9      	b.n	8012fac <quorem+0x94>
 8013018:	6812      	ldr	r2, [r2, #0]
 801301a:	3b04      	subs	r3, #4
 801301c:	2a00      	cmp	r2, #0
 801301e:	d1f0      	bne.n	8013002 <quorem+0xea>
 8013020:	3c01      	subs	r4, #1
 8013022:	e7eb      	b.n	8012ffc <quorem+0xe4>
 8013024:	2000      	movs	r0, #0
 8013026:	e7ee      	b.n	8013006 <quorem+0xee>

08013028 <_dtoa_r>:
 8013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	ed2d 8b04 	vpush	{d8-d9}
 8013030:	69c5      	ldr	r5, [r0, #28]
 8013032:	b093      	sub	sp, #76	; 0x4c
 8013034:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013038:	ec57 6b10 	vmov	r6, r7, d0
 801303c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013040:	9107      	str	r1, [sp, #28]
 8013042:	4604      	mov	r4, r0
 8013044:	920a      	str	r2, [sp, #40]	; 0x28
 8013046:	930d      	str	r3, [sp, #52]	; 0x34
 8013048:	b975      	cbnz	r5, 8013068 <_dtoa_r+0x40>
 801304a:	2010      	movs	r0, #16
 801304c:	f000 fe2a 	bl	8013ca4 <malloc>
 8013050:	4602      	mov	r2, r0
 8013052:	61e0      	str	r0, [r4, #28]
 8013054:	b920      	cbnz	r0, 8013060 <_dtoa_r+0x38>
 8013056:	4bae      	ldr	r3, [pc, #696]	; (8013310 <_dtoa_r+0x2e8>)
 8013058:	21ef      	movs	r1, #239	; 0xef
 801305a:	48ae      	ldr	r0, [pc, #696]	; (8013314 <_dtoa_r+0x2ec>)
 801305c:	f002 ffe8 	bl	8016030 <__assert_func>
 8013060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013064:	6005      	str	r5, [r0, #0]
 8013066:	60c5      	str	r5, [r0, #12]
 8013068:	69e3      	ldr	r3, [r4, #28]
 801306a:	6819      	ldr	r1, [r3, #0]
 801306c:	b151      	cbz	r1, 8013084 <_dtoa_r+0x5c>
 801306e:	685a      	ldr	r2, [r3, #4]
 8013070:	604a      	str	r2, [r1, #4]
 8013072:	2301      	movs	r3, #1
 8013074:	4093      	lsls	r3, r2
 8013076:	608b      	str	r3, [r1, #8]
 8013078:	4620      	mov	r0, r4
 801307a:	f000 ff07 	bl	8013e8c <_Bfree>
 801307e:	69e3      	ldr	r3, [r4, #28]
 8013080:	2200      	movs	r2, #0
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	1e3b      	subs	r3, r7, #0
 8013086:	bfbb      	ittet	lt
 8013088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801308c:	9303      	strlt	r3, [sp, #12]
 801308e:	2300      	movge	r3, #0
 8013090:	2201      	movlt	r2, #1
 8013092:	bfac      	ite	ge
 8013094:	f8c8 3000 	strge.w	r3, [r8]
 8013098:	f8c8 2000 	strlt.w	r2, [r8]
 801309c:	4b9e      	ldr	r3, [pc, #632]	; (8013318 <_dtoa_r+0x2f0>)
 801309e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80130a2:	ea33 0308 	bics.w	r3, r3, r8
 80130a6:	d11b      	bne.n	80130e0 <_dtoa_r+0xb8>
 80130a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80130ae:	6013      	str	r3, [r2, #0]
 80130b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80130b4:	4333      	orrs	r3, r6
 80130b6:	f000 8593 	beq.w	8013be0 <_dtoa_r+0xbb8>
 80130ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130bc:	b963      	cbnz	r3, 80130d8 <_dtoa_r+0xb0>
 80130be:	4b97      	ldr	r3, [pc, #604]	; (801331c <_dtoa_r+0x2f4>)
 80130c0:	e027      	b.n	8013112 <_dtoa_r+0xea>
 80130c2:	4b97      	ldr	r3, [pc, #604]	; (8013320 <_dtoa_r+0x2f8>)
 80130c4:	9300      	str	r3, [sp, #0]
 80130c6:	3308      	adds	r3, #8
 80130c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80130ca:	6013      	str	r3, [r2, #0]
 80130cc:	9800      	ldr	r0, [sp, #0]
 80130ce:	b013      	add	sp, #76	; 0x4c
 80130d0:	ecbd 8b04 	vpop	{d8-d9}
 80130d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d8:	4b90      	ldr	r3, [pc, #576]	; (801331c <_dtoa_r+0x2f4>)
 80130da:	9300      	str	r3, [sp, #0]
 80130dc:	3303      	adds	r3, #3
 80130de:	e7f3      	b.n	80130c8 <_dtoa_r+0xa0>
 80130e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130e4:	2200      	movs	r2, #0
 80130e6:	ec51 0b17 	vmov	r0, r1, d7
 80130ea:	eeb0 8a47 	vmov.f32	s16, s14
 80130ee:	eef0 8a67 	vmov.f32	s17, s15
 80130f2:	2300      	movs	r3, #0
 80130f4:	f7ed fd10 	bl	8000b18 <__aeabi_dcmpeq>
 80130f8:	4681      	mov	r9, r0
 80130fa:	b160      	cbz	r0, 8013116 <_dtoa_r+0xee>
 80130fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130fe:	2301      	movs	r3, #1
 8013100:	6013      	str	r3, [r2, #0]
 8013102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013104:	2b00      	cmp	r3, #0
 8013106:	f000 8568 	beq.w	8013bda <_dtoa_r+0xbb2>
 801310a:	4b86      	ldr	r3, [pc, #536]	; (8013324 <_dtoa_r+0x2fc>)
 801310c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801310e:	6013      	str	r3, [r2, #0]
 8013110:	3b01      	subs	r3, #1
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	e7da      	b.n	80130cc <_dtoa_r+0xa4>
 8013116:	aa10      	add	r2, sp, #64	; 0x40
 8013118:	a911      	add	r1, sp, #68	; 0x44
 801311a:	4620      	mov	r0, r4
 801311c:	eeb0 0a48 	vmov.f32	s0, s16
 8013120:	eef0 0a68 	vmov.f32	s1, s17
 8013124:	f001 fa4e 	bl	80145c4 <__d2b>
 8013128:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801312c:	4682      	mov	sl, r0
 801312e:	2d00      	cmp	r5, #0
 8013130:	d07f      	beq.n	8013232 <_dtoa_r+0x20a>
 8013132:	ee18 3a90 	vmov	r3, s17
 8013136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801313a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801313e:	ec51 0b18 	vmov	r0, r1, d8
 8013142:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801314a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801314e:	4619      	mov	r1, r3
 8013150:	2200      	movs	r2, #0
 8013152:	4b75      	ldr	r3, [pc, #468]	; (8013328 <_dtoa_r+0x300>)
 8013154:	f7ed f8c0 	bl	80002d8 <__aeabi_dsub>
 8013158:	a367      	add	r3, pc, #412	; (adr r3, 80132f8 <_dtoa_r+0x2d0>)
 801315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315e:	f7ed fa73 	bl	8000648 <__aeabi_dmul>
 8013162:	a367      	add	r3, pc, #412	; (adr r3, 8013300 <_dtoa_r+0x2d8>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	f7ed f8b8 	bl	80002dc <__adddf3>
 801316c:	4606      	mov	r6, r0
 801316e:	4628      	mov	r0, r5
 8013170:	460f      	mov	r7, r1
 8013172:	f7ed f9ff 	bl	8000574 <__aeabi_i2d>
 8013176:	a364      	add	r3, pc, #400	; (adr r3, 8013308 <_dtoa_r+0x2e0>)
 8013178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317c:	f7ed fa64 	bl	8000648 <__aeabi_dmul>
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	4630      	mov	r0, r6
 8013186:	4639      	mov	r1, r7
 8013188:	f7ed f8a8 	bl	80002dc <__adddf3>
 801318c:	4606      	mov	r6, r0
 801318e:	460f      	mov	r7, r1
 8013190:	f7ed fd0a 	bl	8000ba8 <__aeabi_d2iz>
 8013194:	2200      	movs	r2, #0
 8013196:	4683      	mov	fp, r0
 8013198:	2300      	movs	r3, #0
 801319a:	4630      	mov	r0, r6
 801319c:	4639      	mov	r1, r7
 801319e:	f7ed fcc5 	bl	8000b2c <__aeabi_dcmplt>
 80131a2:	b148      	cbz	r0, 80131b8 <_dtoa_r+0x190>
 80131a4:	4658      	mov	r0, fp
 80131a6:	f7ed f9e5 	bl	8000574 <__aeabi_i2d>
 80131aa:	4632      	mov	r2, r6
 80131ac:	463b      	mov	r3, r7
 80131ae:	f7ed fcb3 	bl	8000b18 <__aeabi_dcmpeq>
 80131b2:	b908      	cbnz	r0, 80131b8 <_dtoa_r+0x190>
 80131b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131b8:	f1bb 0f16 	cmp.w	fp, #22
 80131bc:	d857      	bhi.n	801326e <_dtoa_r+0x246>
 80131be:	4b5b      	ldr	r3, [pc, #364]	; (801332c <_dtoa_r+0x304>)
 80131c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80131c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c8:	ec51 0b18 	vmov	r0, r1, d8
 80131cc:	f7ed fcae 	bl	8000b2c <__aeabi_dcmplt>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d04e      	beq.n	8013272 <_dtoa_r+0x24a>
 80131d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131d8:	2300      	movs	r3, #0
 80131da:	930c      	str	r3, [sp, #48]	; 0x30
 80131dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80131de:	1b5b      	subs	r3, r3, r5
 80131e0:	1e5a      	subs	r2, r3, #1
 80131e2:	bf45      	ittet	mi
 80131e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80131e8:	9305      	strmi	r3, [sp, #20]
 80131ea:	2300      	movpl	r3, #0
 80131ec:	2300      	movmi	r3, #0
 80131ee:	9206      	str	r2, [sp, #24]
 80131f0:	bf54      	ite	pl
 80131f2:	9305      	strpl	r3, [sp, #20]
 80131f4:	9306      	strmi	r3, [sp, #24]
 80131f6:	f1bb 0f00 	cmp.w	fp, #0
 80131fa:	db3c      	blt.n	8013276 <_dtoa_r+0x24e>
 80131fc:	9b06      	ldr	r3, [sp, #24]
 80131fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013202:	445b      	add	r3, fp
 8013204:	9306      	str	r3, [sp, #24]
 8013206:	2300      	movs	r3, #0
 8013208:	9308      	str	r3, [sp, #32]
 801320a:	9b07      	ldr	r3, [sp, #28]
 801320c:	2b09      	cmp	r3, #9
 801320e:	d868      	bhi.n	80132e2 <_dtoa_r+0x2ba>
 8013210:	2b05      	cmp	r3, #5
 8013212:	bfc4      	itt	gt
 8013214:	3b04      	subgt	r3, #4
 8013216:	9307      	strgt	r3, [sp, #28]
 8013218:	9b07      	ldr	r3, [sp, #28]
 801321a:	f1a3 0302 	sub.w	r3, r3, #2
 801321e:	bfcc      	ite	gt
 8013220:	2500      	movgt	r5, #0
 8013222:	2501      	movle	r5, #1
 8013224:	2b03      	cmp	r3, #3
 8013226:	f200 8085 	bhi.w	8013334 <_dtoa_r+0x30c>
 801322a:	e8df f003 	tbb	[pc, r3]
 801322e:	3b2e      	.short	0x3b2e
 8013230:	5839      	.short	0x5839
 8013232:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013236:	441d      	add	r5, r3
 8013238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801323c:	2b20      	cmp	r3, #32
 801323e:	bfc1      	itttt	gt
 8013240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013244:	fa08 f803 	lslgt.w	r8, r8, r3
 8013248:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801324c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013250:	bfd6      	itet	le
 8013252:	f1c3 0320 	rsble	r3, r3, #32
 8013256:	ea48 0003 	orrgt.w	r0, r8, r3
 801325a:	fa06 f003 	lslle.w	r0, r6, r3
 801325e:	f7ed f979 	bl	8000554 <__aeabi_ui2d>
 8013262:	2201      	movs	r2, #1
 8013264:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013268:	3d01      	subs	r5, #1
 801326a:	920e      	str	r2, [sp, #56]	; 0x38
 801326c:	e76f      	b.n	801314e <_dtoa_r+0x126>
 801326e:	2301      	movs	r3, #1
 8013270:	e7b3      	b.n	80131da <_dtoa_r+0x1b2>
 8013272:	900c      	str	r0, [sp, #48]	; 0x30
 8013274:	e7b2      	b.n	80131dc <_dtoa_r+0x1b4>
 8013276:	9b05      	ldr	r3, [sp, #20]
 8013278:	eba3 030b 	sub.w	r3, r3, fp
 801327c:	9305      	str	r3, [sp, #20]
 801327e:	f1cb 0300 	rsb	r3, fp, #0
 8013282:	9308      	str	r3, [sp, #32]
 8013284:	2300      	movs	r3, #0
 8013286:	930b      	str	r3, [sp, #44]	; 0x2c
 8013288:	e7bf      	b.n	801320a <_dtoa_r+0x1e2>
 801328a:	2300      	movs	r3, #0
 801328c:	9309      	str	r3, [sp, #36]	; 0x24
 801328e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013290:	2b00      	cmp	r3, #0
 8013292:	dc52      	bgt.n	801333a <_dtoa_r+0x312>
 8013294:	2301      	movs	r3, #1
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	461a      	mov	r2, r3
 801329c:	920a      	str	r2, [sp, #40]	; 0x28
 801329e:	e00b      	b.n	80132b8 <_dtoa_r+0x290>
 80132a0:	2301      	movs	r3, #1
 80132a2:	e7f3      	b.n	801328c <_dtoa_r+0x264>
 80132a4:	2300      	movs	r3, #0
 80132a6:	9309      	str	r3, [sp, #36]	; 0x24
 80132a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132aa:	445b      	add	r3, fp
 80132ac:	9301      	str	r3, [sp, #4]
 80132ae:	3301      	adds	r3, #1
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	9304      	str	r3, [sp, #16]
 80132b4:	bfb8      	it	lt
 80132b6:	2301      	movlt	r3, #1
 80132b8:	69e0      	ldr	r0, [r4, #28]
 80132ba:	2100      	movs	r1, #0
 80132bc:	2204      	movs	r2, #4
 80132be:	f102 0614 	add.w	r6, r2, #20
 80132c2:	429e      	cmp	r6, r3
 80132c4:	d93d      	bls.n	8013342 <_dtoa_r+0x31a>
 80132c6:	6041      	str	r1, [r0, #4]
 80132c8:	4620      	mov	r0, r4
 80132ca:	f000 fd9f 	bl	8013e0c <_Balloc>
 80132ce:	9000      	str	r0, [sp, #0]
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d139      	bne.n	8013348 <_dtoa_r+0x320>
 80132d4:	4b16      	ldr	r3, [pc, #88]	; (8013330 <_dtoa_r+0x308>)
 80132d6:	4602      	mov	r2, r0
 80132d8:	f240 11af 	movw	r1, #431	; 0x1af
 80132dc:	e6bd      	b.n	801305a <_dtoa_r+0x32>
 80132de:	2301      	movs	r3, #1
 80132e0:	e7e1      	b.n	80132a6 <_dtoa_r+0x27e>
 80132e2:	2501      	movs	r5, #1
 80132e4:	2300      	movs	r3, #0
 80132e6:	9307      	str	r3, [sp, #28]
 80132e8:	9509      	str	r5, [sp, #36]	; 0x24
 80132ea:	f04f 33ff 	mov.w	r3, #4294967295
 80132ee:	9301      	str	r3, [sp, #4]
 80132f0:	9304      	str	r3, [sp, #16]
 80132f2:	2200      	movs	r2, #0
 80132f4:	2312      	movs	r3, #18
 80132f6:	e7d1      	b.n	801329c <_dtoa_r+0x274>
 80132f8:	636f4361 	.word	0x636f4361
 80132fc:	3fd287a7 	.word	0x3fd287a7
 8013300:	8b60c8b3 	.word	0x8b60c8b3
 8013304:	3fc68a28 	.word	0x3fc68a28
 8013308:	509f79fb 	.word	0x509f79fb
 801330c:	3fd34413 	.word	0x3fd34413
 8013310:	080185c4 	.word	0x080185c4
 8013314:	080185db 	.word	0x080185db
 8013318:	7ff00000 	.word	0x7ff00000
 801331c:	080185c0 	.word	0x080185c0
 8013320:	080185b7 	.word	0x080185b7
 8013324:	08018919 	.word	0x08018919
 8013328:	3ff80000 	.word	0x3ff80000
 801332c:	080186c8 	.word	0x080186c8
 8013330:	08018633 	.word	0x08018633
 8013334:	2301      	movs	r3, #1
 8013336:	9309      	str	r3, [sp, #36]	; 0x24
 8013338:	e7d7      	b.n	80132ea <_dtoa_r+0x2c2>
 801333a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801333c:	9301      	str	r3, [sp, #4]
 801333e:	9304      	str	r3, [sp, #16]
 8013340:	e7ba      	b.n	80132b8 <_dtoa_r+0x290>
 8013342:	3101      	adds	r1, #1
 8013344:	0052      	lsls	r2, r2, #1
 8013346:	e7ba      	b.n	80132be <_dtoa_r+0x296>
 8013348:	69e3      	ldr	r3, [r4, #28]
 801334a:	9a00      	ldr	r2, [sp, #0]
 801334c:	601a      	str	r2, [r3, #0]
 801334e:	9b04      	ldr	r3, [sp, #16]
 8013350:	2b0e      	cmp	r3, #14
 8013352:	f200 80a8 	bhi.w	80134a6 <_dtoa_r+0x47e>
 8013356:	2d00      	cmp	r5, #0
 8013358:	f000 80a5 	beq.w	80134a6 <_dtoa_r+0x47e>
 801335c:	f1bb 0f00 	cmp.w	fp, #0
 8013360:	dd38      	ble.n	80133d4 <_dtoa_r+0x3ac>
 8013362:	4bc0      	ldr	r3, [pc, #768]	; (8013664 <_dtoa_r+0x63c>)
 8013364:	f00b 020f 	and.w	r2, fp, #15
 8013368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801336c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013370:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013374:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013378:	d019      	beq.n	80133ae <_dtoa_r+0x386>
 801337a:	4bbb      	ldr	r3, [pc, #748]	; (8013668 <_dtoa_r+0x640>)
 801337c:	ec51 0b18 	vmov	r0, r1, d8
 8013380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013384:	f7ed fa8a 	bl	800089c <__aeabi_ddiv>
 8013388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801338c:	f008 080f 	and.w	r8, r8, #15
 8013390:	2503      	movs	r5, #3
 8013392:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013668 <_dtoa_r+0x640>
 8013396:	f1b8 0f00 	cmp.w	r8, #0
 801339a:	d10a      	bne.n	80133b2 <_dtoa_r+0x38a>
 801339c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133a0:	4632      	mov	r2, r6
 80133a2:	463b      	mov	r3, r7
 80133a4:	f7ed fa7a 	bl	800089c <__aeabi_ddiv>
 80133a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133ac:	e02b      	b.n	8013406 <_dtoa_r+0x3de>
 80133ae:	2502      	movs	r5, #2
 80133b0:	e7ef      	b.n	8013392 <_dtoa_r+0x36a>
 80133b2:	f018 0f01 	tst.w	r8, #1
 80133b6:	d008      	beq.n	80133ca <_dtoa_r+0x3a2>
 80133b8:	4630      	mov	r0, r6
 80133ba:	4639      	mov	r1, r7
 80133bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80133c0:	f7ed f942 	bl	8000648 <__aeabi_dmul>
 80133c4:	3501      	adds	r5, #1
 80133c6:	4606      	mov	r6, r0
 80133c8:	460f      	mov	r7, r1
 80133ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80133ce:	f109 0908 	add.w	r9, r9, #8
 80133d2:	e7e0      	b.n	8013396 <_dtoa_r+0x36e>
 80133d4:	f000 809f 	beq.w	8013516 <_dtoa_r+0x4ee>
 80133d8:	f1cb 0600 	rsb	r6, fp, #0
 80133dc:	4ba1      	ldr	r3, [pc, #644]	; (8013664 <_dtoa_r+0x63c>)
 80133de:	4fa2      	ldr	r7, [pc, #648]	; (8013668 <_dtoa_r+0x640>)
 80133e0:	f006 020f 	and.w	r2, r6, #15
 80133e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80133e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ec:	ec51 0b18 	vmov	r0, r1, d8
 80133f0:	f7ed f92a 	bl	8000648 <__aeabi_dmul>
 80133f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133f8:	1136      	asrs	r6, r6, #4
 80133fa:	2300      	movs	r3, #0
 80133fc:	2502      	movs	r5, #2
 80133fe:	2e00      	cmp	r6, #0
 8013400:	d17e      	bne.n	8013500 <_dtoa_r+0x4d8>
 8013402:	2b00      	cmp	r3, #0
 8013404:	d1d0      	bne.n	80133a8 <_dtoa_r+0x380>
 8013406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013408:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	f000 8084 	beq.w	801351a <_dtoa_r+0x4f2>
 8013412:	4b96      	ldr	r3, [pc, #600]	; (801366c <_dtoa_r+0x644>)
 8013414:	2200      	movs	r2, #0
 8013416:	4640      	mov	r0, r8
 8013418:	4649      	mov	r1, r9
 801341a:	f7ed fb87 	bl	8000b2c <__aeabi_dcmplt>
 801341e:	2800      	cmp	r0, #0
 8013420:	d07b      	beq.n	801351a <_dtoa_r+0x4f2>
 8013422:	9b04      	ldr	r3, [sp, #16]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d078      	beq.n	801351a <_dtoa_r+0x4f2>
 8013428:	9b01      	ldr	r3, [sp, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	dd39      	ble.n	80134a2 <_dtoa_r+0x47a>
 801342e:	4b90      	ldr	r3, [pc, #576]	; (8013670 <_dtoa_r+0x648>)
 8013430:	2200      	movs	r2, #0
 8013432:	4640      	mov	r0, r8
 8013434:	4649      	mov	r1, r9
 8013436:	f7ed f907 	bl	8000648 <__aeabi_dmul>
 801343a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801343e:	9e01      	ldr	r6, [sp, #4]
 8013440:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013444:	3501      	adds	r5, #1
 8013446:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801344a:	4628      	mov	r0, r5
 801344c:	f7ed f892 	bl	8000574 <__aeabi_i2d>
 8013450:	4642      	mov	r2, r8
 8013452:	464b      	mov	r3, r9
 8013454:	f7ed f8f8 	bl	8000648 <__aeabi_dmul>
 8013458:	4b86      	ldr	r3, [pc, #536]	; (8013674 <_dtoa_r+0x64c>)
 801345a:	2200      	movs	r2, #0
 801345c:	f7ec ff3e 	bl	80002dc <__adddf3>
 8013460:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013468:	9303      	str	r3, [sp, #12]
 801346a:	2e00      	cmp	r6, #0
 801346c:	d158      	bne.n	8013520 <_dtoa_r+0x4f8>
 801346e:	4b82      	ldr	r3, [pc, #520]	; (8013678 <_dtoa_r+0x650>)
 8013470:	2200      	movs	r2, #0
 8013472:	4640      	mov	r0, r8
 8013474:	4649      	mov	r1, r9
 8013476:	f7ec ff2f 	bl	80002d8 <__aeabi_dsub>
 801347a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801347e:	4680      	mov	r8, r0
 8013480:	4689      	mov	r9, r1
 8013482:	f7ed fb71 	bl	8000b68 <__aeabi_dcmpgt>
 8013486:	2800      	cmp	r0, #0
 8013488:	f040 8296 	bne.w	80139b8 <_dtoa_r+0x990>
 801348c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013490:	4640      	mov	r0, r8
 8013492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013496:	4649      	mov	r1, r9
 8013498:	f7ed fb48 	bl	8000b2c <__aeabi_dcmplt>
 801349c:	2800      	cmp	r0, #0
 801349e:	f040 8289 	bne.w	80139b4 <_dtoa_r+0x98c>
 80134a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80134a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f2c0 814e 	blt.w	801374a <_dtoa_r+0x722>
 80134ae:	f1bb 0f0e 	cmp.w	fp, #14
 80134b2:	f300 814a 	bgt.w	801374a <_dtoa_r+0x722>
 80134b6:	4b6b      	ldr	r3, [pc, #428]	; (8013664 <_dtoa_r+0x63c>)
 80134b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80134bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f280 80dc 	bge.w	8013680 <_dtoa_r+0x658>
 80134c8:	9b04      	ldr	r3, [sp, #16]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f300 80d8 	bgt.w	8013680 <_dtoa_r+0x658>
 80134d0:	f040 826f 	bne.w	80139b2 <_dtoa_r+0x98a>
 80134d4:	4b68      	ldr	r3, [pc, #416]	; (8013678 <_dtoa_r+0x650>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	4640      	mov	r0, r8
 80134da:	4649      	mov	r1, r9
 80134dc:	f7ed f8b4 	bl	8000648 <__aeabi_dmul>
 80134e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134e4:	f7ed fb36 	bl	8000b54 <__aeabi_dcmpge>
 80134e8:	9e04      	ldr	r6, [sp, #16]
 80134ea:	4637      	mov	r7, r6
 80134ec:	2800      	cmp	r0, #0
 80134ee:	f040 8245 	bne.w	801397c <_dtoa_r+0x954>
 80134f2:	9d00      	ldr	r5, [sp, #0]
 80134f4:	2331      	movs	r3, #49	; 0x31
 80134f6:	f805 3b01 	strb.w	r3, [r5], #1
 80134fa:	f10b 0b01 	add.w	fp, fp, #1
 80134fe:	e241      	b.n	8013984 <_dtoa_r+0x95c>
 8013500:	07f2      	lsls	r2, r6, #31
 8013502:	d505      	bpl.n	8013510 <_dtoa_r+0x4e8>
 8013504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013508:	f7ed f89e 	bl	8000648 <__aeabi_dmul>
 801350c:	3501      	adds	r5, #1
 801350e:	2301      	movs	r3, #1
 8013510:	1076      	asrs	r6, r6, #1
 8013512:	3708      	adds	r7, #8
 8013514:	e773      	b.n	80133fe <_dtoa_r+0x3d6>
 8013516:	2502      	movs	r5, #2
 8013518:	e775      	b.n	8013406 <_dtoa_r+0x3de>
 801351a:	9e04      	ldr	r6, [sp, #16]
 801351c:	465f      	mov	r7, fp
 801351e:	e792      	b.n	8013446 <_dtoa_r+0x41e>
 8013520:	9900      	ldr	r1, [sp, #0]
 8013522:	4b50      	ldr	r3, [pc, #320]	; (8013664 <_dtoa_r+0x63c>)
 8013524:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013528:	4431      	add	r1, r6
 801352a:	9102      	str	r1, [sp, #8]
 801352c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801352e:	eeb0 9a47 	vmov.f32	s18, s14
 8013532:	eef0 9a67 	vmov.f32	s19, s15
 8013536:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801353a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801353e:	2900      	cmp	r1, #0
 8013540:	d044      	beq.n	80135cc <_dtoa_r+0x5a4>
 8013542:	494e      	ldr	r1, [pc, #312]	; (801367c <_dtoa_r+0x654>)
 8013544:	2000      	movs	r0, #0
 8013546:	f7ed f9a9 	bl	800089c <__aeabi_ddiv>
 801354a:	ec53 2b19 	vmov	r2, r3, d9
 801354e:	f7ec fec3 	bl	80002d8 <__aeabi_dsub>
 8013552:	9d00      	ldr	r5, [sp, #0]
 8013554:	ec41 0b19 	vmov	d9, r0, r1
 8013558:	4649      	mov	r1, r9
 801355a:	4640      	mov	r0, r8
 801355c:	f7ed fb24 	bl	8000ba8 <__aeabi_d2iz>
 8013560:	4606      	mov	r6, r0
 8013562:	f7ed f807 	bl	8000574 <__aeabi_i2d>
 8013566:	4602      	mov	r2, r0
 8013568:	460b      	mov	r3, r1
 801356a:	4640      	mov	r0, r8
 801356c:	4649      	mov	r1, r9
 801356e:	f7ec feb3 	bl	80002d8 <__aeabi_dsub>
 8013572:	3630      	adds	r6, #48	; 0x30
 8013574:	f805 6b01 	strb.w	r6, [r5], #1
 8013578:	ec53 2b19 	vmov	r2, r3, d9
 801357c:	4680      	mov	r8, r0
 801357e:	4689      	mov	r9, r1
 8013580:	f7ed fad4 	bl	8000b2c <__aeabi_dcmplt>
 8013584:	2800      	cmp	r0, #0
 8013586:	d164      	bne.n	8013652 <_dtoa_r+0x62a>
 8013588:	4642      	mov	r2, r8
 801358a:	464b      	mov	r3, r9
 801358c:	4937      	ldr	r1, [pc, #220]	; (801366c <_dtoa_r+0x644>)
 801358e:	2000      	movs	r0, #0
 8013590:	f7ec fea2 	bl	80002d8 <__aeabi_dsub>
 8013594:	ec53 2b19 	vmov	r2, r3, d9
 8013598:	f7ed fac8 	bl	8000b2c <__aeabi_dcmplt>
 801359c:	2800      	cmp	r0, #0
 801359e:	f040 80b6 	bne.w	801370e <_dtoa_r+0x6e6>
 80135a2:	9b02      	ldr	r3, [sp, #8]
 80135a4:	429d      	cmp	r5, r3
 80135a6:	f43f af7c 	beq.w	80134a2 <_dtoa_r+0x47a>
 80135aa:	4b31      	ldr	r3, [pc, #196]	; (8013670 <_dtoa_r+0x648>)
 80135ac:	ec51 0b19 	vmov	r0, r1, d9
 80135b0:	2200      	movs	r2, #0
 80135b2:	f7ed f849 	bl	8000648 <__aeabi_dmul>
 80135b6:	4b2e      	ldr	r3, [pc, #184]	; (8013670 <_dtoa_r+0x648>)
 80135b8:	ec41 0b19 	vmov	d9, r0, r1
 80135bc:	2200      	movs	r2, #0
 80135be:	4640      	mov	r0, r8
 80135c0:	4649      	mov	r1, r9
 80135c2:	f7ed f841 	bl	8000648 <__aeabi_dmul>
 80135c6:	4680      	mov	r8, r0
 80135c8:	4689      	mov	r9, r1
 80135ca:	e7c5      	b.n	8013558 <_dtoa_r+0x530>
 80135cc:	ec51 0b17 	vmov	r0, r1, d7
 80135d0:	f7ed f83a 	bl	8000648 <__aeabi_dmul>
 80135d4:	9b02      	ldr	r3, [sp, #8]
 80135d6:	9d00      	ldr	r5, [sp, #0]
 80135d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80135da:	ec41 0b19 	vmov	d9, r0, r1
 80135de:	4649      	mov	r1, r9
 80135e0:	4640      	mov	r0, r8
 80135e2:	f7ed fae1 	bl	8000ba8 <__aeabi_d2iz>
 80135e6:	4606      	mov	r6, r0
 80135e8:	f7ec ffc4 	bl	8000574 <__aeabi_i2d>
 80135ec:	3630      	adds	r6, #48	; 0x30
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	4640      	mov	r0, r8
 80135f4:	4649      	mov	r1, r9
 80135f6:	f7ec fe6f 	bl	80002d8 <__aeabi_dsub>
 80135fa:	f805 6b01 	strb.w	r6, [r5], #1
 80135fe:	9b02      	ldr	r3, [sp, #8]
 8013600:	429d      	cmp	r5, r3
 8013602:	4680      	mov	r8, r0
 8013604:	4689      	mov	r9, r1
 8013606:	f04f 0200 	mov.w	r2, #0
 801360a:	d124      	bne.n	8013656 <_dtoa_r+0x62e>
 801360c:	4b1b      	ldr	r3, [pc, #108]	; (801367c <_dtoa_r+0x654>)
 801360e:	ec51 0b19 	vmov	r0, r1, d9
 8013612:	f7ec fe63 	bl	80002dc <__adddf3>
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4640      	mov	r0, r8
 801361c:	4649      	mov	r1, r9
 801361e:	f7ed faa3 	bl	8000b68 <__aeabi_dcmpgt>
 8013622:	2800      	cmp	r0, #0
 8013624:	d173      	bne.n	801370e <_dtoa_r+0x6e6>
 8013626:	ec53 2b19 	vmov	r2, r3, d9
 801362a:	4914      	ldr	r1, [pc, #80]	; (801367c <_dtoa_r+0x654>)
 801362c:	2000      	movs	r0, #0
 801362e:	f7ec fe53 	bl	80002d8 <__aeabi_dsub>
 8013632:	4602      	mov	r2, r0
 8013634:	460b      	mov	r3, r1
 8013636:	4640      	mov	r0, r8
 8013638:	4649      	mov	r1, r9
 801363a:	f7ed fa77 	bl	8000b2c <__aeabi_dcmplt>
 801363e:	2800      	cmp	r0, #0
 8013640:	f43f af2f 	beq.w	80134a2 <_dtoa_r+0x47a>
 8013644:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013646:	1e6b      	subs	r3, r5, #1
 8013648:	930f      	str	r3, [sp, #60]	; 0x3c
 801364a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801364e:	2b30      	cmp	r3, #48	; 0x30
 8013650:	d0f8      	beq.n	8013644 <_dtoa_r+0x61c>
 8013652:	46bb      	mov	fp, r7
 8013654:	e04a      	b.n	80136ec <_dtoa_r+0x6c4>
 8013656:	4b06      	ldr	r3, [pc, #24]	; (8013670 <_dtoa_r+0x648>)
 8013658:	f7ec fff6 	bl	8000648 <__aeabi_dmul>
 801365c:	4680      	mov	r8, r0
 801365e:	4689      	mov	r9, r1
 8013660:	e7bd      	b.n	80135de <_dtoa_r+0x5b6>
 8013662:	bf00      	nop
 8013664:	080186c8 	.word	0x080186c8
 8013668:	080186a0 	.word	0x080186a0
 801366c:	3ff00000 	.word	0x3ff00000
 8013670:	40240000 	.word	0x40240000
 8013674:	401c0000 	.word	0x401c0000
 8013678:	40140000 	.word	0x40140000
 801367c:	3fe00000 	.word	0x3fe00000
 8013680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013684:	9d00      	ldr	r5, [sp, #0]
 8013686:	4642      	mov	r2, r8
 8013688:	464b      	mov	r3, r9
 801368a:	4630      	mov	r0, r6
 801368c:	4639      	mov	r1, r7
 801368e:	f7ed f905 	bl	800089c <__aeabi_ddiv>
 8013692:	f7ed fa89 	bl	8000ba8 <__aeabi_d2iz>
 8013696:	9001      	str	r0, [sp, #4]
 8013698:	f7ec ff6c 	bl	8000574 <__aeabi_i2d>
 801369c:	4642      	mov	r2, r8
 801369e:	464b      	mov	r3, r9
 80136a0:	f7ec ffd2 	bl	8000648 <__aeabi_dmul>
 80136a4:	4602      	mov	r2, r0
 80136a6:	460b      	mov	r3, r1
 80136a8:	4630      	mov	r0, r6
 80136aa:	4639      	mov	r1, r7
 80136ac:	f7ec fe14 	bl	80002d8 <__aeabi_dsub>
 80136b0:	9e01      	ldr	r6, [sp, #4]
 80136b2:	9f04      	ldr	r7, [sp, #16]
 80136b4:	3630      	adds	r6, #48	; 0x30
 80136b6:	f805 6b01 	strb.w	r6, [r5], #1
 80136ba:	9e00      	ldr	r6, [sp, #0]
 80136bc:	1bae      	subs	r6, r5, r6
 80136be:	42b7      	cmp	r7, r6
 80136c0:	4602      	mov	r2, r0
 80136c2:	460b      	mov	r3, r1
 80136c4:	d134      	bne.n	8013730 <_dtoa_r+0x708>
 80136c6:	f7ec fe09 	bl	80002dc <__adddf3>
 80136ca:	4642      	mov	r2, r8
 80136cc:	464b      	mov	r3, r9
 80136ce:	4606      	mov	r6, r0
 80136d0:	460f      	mov	r7, r1
 80136d2:	f7ed fa49 	bl	8000b68 <__aeabi_dcmpgt>
 80136d6:	b9c8      	cbnz	r0, 801370c <_dtoa_r+0x6e4>
 80136d8:	4642      	mov	r2, r8
 80136da:	464b      	mov	r3, r9
 80136dc:	4630      	mov	r0, r6
 80136de:	4639      	mov	r1, r7
 80136e0:	f7ed fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 80136e4:	b110      	cbz	r0, 80136ec <_dtoa_r+0x6c4>
 80136e6:	9b01      	ldr	r3, [sp, #4]
 80136e8:	07db      	lsls	r3, r3, #31
 80136ea:	d40f      	bmi.n	801370c <_dtoa_r+0x6e4>
 80136ec:	4651      	mov	r1, sl
 80136ee:	4620      	mov	r0, r4
 80136f0:	f000 fbcc 	bl	8013e8c <_Bfree>
 80136f4:	2300      	movs	r3, #0
 80136f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136f8:	702b      	strb	r3, [r5, #0]
 80136fa:	f10b 0301 	add.w	r3, fp, #1
 80136fe:	6013      	str	r3, [r2, #0]
 8013700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013702:	2b00      	cmp	r3, #0
 8013704:	f43f ace2 	beq.w	80130cc <_dtoa_r+0xa4>
 8013708:	601d      	str	r5, [r3, #0]
 801370a:	e4df      	b.n	80130cc <_dtoa_r+0xa4>
 801370c:	465f      	mov	r7, fp
 801370e:	462b      	mov	r3, r5
 8013710:	461d      	mov	r5, r3
 8013712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013716:	2a39      	cmp	r2, #57	; 0x39
 8013718:	d106      	bne.n	8013728 <_dtoa_r+0x700>
 801371a:	9a00      	ldr	r2, [sp, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	d1f7      	bne.n	8013710 <_dtoa_r+0x6e8>
 8013720:	9900      	ldr	r1, [sp, #0]
 8013722:	2230      	movs	r2, #48	; 0x30
 8013724:	3701      	adds	r7, #1
 8013726:	700a      	strb	r2, [r1, #0]
 8013728:	781a      	ldrb	r2, [r3, #0]
 801372a:	3201      	adds	r2, #1
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	e790      	b.n	8013652 <_dtoa_r+0x62a>
 8013730:	4ba3      	ldr	r3, [pc, #652]	; (80139c0 <_dtoa_r+0x998>)
 8013732:	2200      	movs	r2, #0
 8013734:	f7ec ff88 	bl	8000648 <__aeabi_dmul>
 8013738:	2200      	movs	r2, #0
 801373a:	2300      	movs	r3, #0
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	f7ed f9ea 	bl	8000b18 <__aeabi_dcmpeq>
 8013744:	2800      	cmp	r0, #0
 8013746:	d09e      	beq.n	8013686 <_dtoa_r+0x65e>
 8013748:	e7d0      	b.n	80136ec <_dtoa_r+0x6c4>
 801374a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801374c:	2a00      	cmp	r2, #0
 801374e:	f000 80ca 	beq.w	80138e6 <_dtoa_r+0x8be>
 8013752:	9a07      	ldr	r2, [sp, #28]
 8013754:	2a01      	cmp	r2, #1
 8013756:	f300 80ad 	bgt.w	80138b4 <_dtoa_r+0x88c>
 801375a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801375c:	2a00      	cmp	r2, #0
 801375e:	f000 80a5 	beq.w	80138ac <_dtoa_r+0x884>
 8013762:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013766:	9e08      	ldr	r6, [sp, #32]
 8013768:	9d05      	ldr	r5, [sp, #20]
 801376a:	9a05      	ldr	r2, [sp, #20]
 801376c:	441a      	add	r2, r3
 801376e:	9205      	str	r2, [sp, #20]
 8013770:	9a06      	ldr	r2, [sp, #24]
 8013772:	2101      	movs	r1, #1
 8013774:	441a      	add	r2, r3
 8013776:	4620      	mov	r0, r4
 8013778:	9206      	str	r2, [sp, #24]
 801377a:	f000 fc87 	bl	801408c <__i2b>
 801377e:	4607      	mov	r7, r0
 8013780:	b165      	cbz	r5, 801379c <_dtoa_r+0x774>
 8013782:	9b06      	ldr	r3, [sp, #24]
 8013784:	2b00      	cmp	r3, #0
 8013786:	dd09      	ble.n	801379c <_dtoa_r+0x774>
 8013788:	42ab      	cmp	r3, r5
 801378a:	9a05      	ldr	r2, [sp, #20]
 801378c:	bfa8      	it	ge
 801378e:	462b      	movge	r3, r5
 8013790:	1ad2      	subs	r2, r2, r3
 8013792:	9205      	str	r2, [sp, #20]
 8013794:	9a06      	ldr	r2, [sp, #24]
 8013796:	1aed      	subs	r5, r5, r3
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	9306      	str	r3, [sp, #24]
 801379c:	9b08      	ldr	r3, [sp, #32]
 801379e:	b1f3      	cbz	r3, 80137de <_dtoa_r+0x7b6>
 80137a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f000 80a3 	beq.w	80138ee <_dtoa_r+0x8c6>
 80137a8:	2e00      	cmp	r6, #0
 80137aa:	dd10      	ble.n	80137ce <_dtoa_r+0x7a6>
 80137ac:	4639      	mov	r1, r7
 80137ae:	4632      	mov	r2, r6
 80137b0:	4620      	mov	r0, r4
 80137b2:	f000 fd2b 	bl	801420c <__pow5mult>
 80137b6:	4652      	mov	r2, sl
 80137b8:	4601      	mov	r1, r0
 80137ba:	4607      	mov	r7, r0
 80137bc:	4620      	mov	r0, r4
 80137be:	f000 fc7b 	bl	80140b8 <__multiply>
 80137c2:	4651      	mov	r1, sl
 80137c4:	4680      	mov	r8, r0
 80137c6:	4620      	mov	r0, r4
 80137c8:	f000 fb60 	bl	8013e8c <_Bfree>
 80137cc:	46c2      	mov	sl, r8
 80137ce:	9b08      	ldr	r3, [sp, #32]
 80137d0:	1b9a      	subs	r2, r3, r6
 80137d2:	d004      	beq.n	80137de <_dtoa_r+0x7b6>
 80137d4:	4651      	mov	r1, sl
 80137d6:	4620      	mov	r0, r4
 80137d8:	f000 fd18 	bl	801420c <__pow5mult>
 80137dc:	4682      	mov	sl, r0
 80137de:	2101      	movs	r1, #1
 80137e0:	4620      	mov	r0, r4
 80137e2:	f000 fc53 	bl	801408c <__i2b>
 80137e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	4606      	mov	r6, r0
 80137ec:	f340 8081 	ble.w	80138f2 <_dtoa_r+0x8ca>
 80137f0:	461a      	mov	r2, r3
 80137f2:	4601      	mov	r1, r0
 80137f4:	4620      	mov	r0, r4
 80137f6:	f000 fd09 	bl	801420c <__pow5mult>
 80137fa:	9b07      	ldr	r3, [sp, #28]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	4606      	mov	r6, r0
 8013800:	dd7a      	ble.n	80138f8 <_dtoa_r+0x8d0>
 8013802:	f04f 0800 	mov.w	r8, #0
 8013806:	6933      	ldr	r3, [r6, #16]
 8013808:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801380c:	6918      	ldr	r0, [r3, #16]
 801380e:	f000 fbef 	bl	8013ff0 <__hi0bits>
 8013812:	f1c0 0020 	rsb	r0, r0, #32
 8013816:	9b06      	ldr	r3, [sp, #24]
 8013818:	4418      	add	r0, r3
 801381a:	f010 001f 	ands.w	r0, r0, #31
 801381e:	f000 8094 	beq.w	801394a <_dtoa_r+0x922>
 8013822:	f1c0 0320 	rsb	r3, r0, #32
 8013826:	2b04      	cmp	r3, #4
 8013828:	f340 8085 	ble.w	8013936 <_dtoa_r+0x90e>
 801382c:	9b05      	ldr	r3, [sp, #20]
 801382e:	f1c0 001c 	rsb	r0, r0, #28
 8013832:	4403      	add	r3, r0
 8013834:	9305      	str	r3, [sp, #20]
 8013836:	9b06      	ldr	r3, [sp, #24]
 8013838:	4403      	add	r3, r0
 801383a:	4405      	add	r5, r0
 801383c:	9306      	str	r3, [sp, #24]
 801383e:	9b05      	ldr	r3, [sp, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	dd05      	ble.n	8013850 <_dtoa_r+0x828>
 8013844:	4651      	mov	r1, sl
 8013846:	461a      	mov	r2, r3
 8013848:	4620      	mov	r0, r4
 801384a:	f000 fd39 	bl	80142c0 <__lshift>
 801384e:	4682      	mov	sl, r0
 8013850:	9b06      	ldr	r3, [sp, #24]
 8013852:	2b00      	cmp	r3, #0
 8013854:	dd05      	ble.n	8013862 <_dtoa_r+0x83a>
 8013856:	4631      	mov	r1, r6
 8013858:	461a      	mov	r2, r3
 801385a:	4620      	mov	r0, r4
 801385c:	f000 fd30 	bl	80142c0 <__lshift>
 8013860:	4606      	mov	r6, r0
 8013862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013864:	2b00      	cmp	r3, #0
 8013866:	d072      	beq.n	801394e <_dtoa_r+0x926>
 8013868:	4631      	mov	r1, r6
 801386a:	4650      	mov	r0, sl
 801386c:	f000 fd94 	bl	8014398 <__mcmp>
 8013870:	2800      	cmp	r0, #0
 8013872:	da6c      	bge.n	801394e <_dtoa_r+0x926>
 8013874:	2300      	movs	r3, #0
 8013876:	4651      	mov	r1, sl
 8013878:	220a      	movs	r2, #10
 801387a:	4620      	mov	r0, r4
 801387c:	f000 fb28 	bl	8013ed0 <__multadd>
 8013880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013882:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013886:	4682      	mov	sl, r0
 8013888:	2b00      	cmp	r3, #0
 801388a:	f000 81b0 	beq.w	8013bee <_dtoa_r+0xbc6>
 801388e:	2300      	movs	r3, #0
 8013890:	4639      	mov	r1, r7
 8013892:	220a      	movs	r2, #10
 8013894:	4620      	mov	r0, r4
 8013896:	f000 fb1b 	bl	8013ed0 <__multadd>
 801389a:	9b01      	ldr	r3, [sp, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	4607      	mov	r7, r0
 80138a0:	f300 8096 	bgt.w	80139d0 <_dtoa_r+0x9a8>
 80138a4:	9b07      	ldr	r3, [sp, #28]
 80138a6:	2b02      	cmp	r3, #2
 80138a8:	dc59      	bgt.n	801395e <_dtoa_r+0x936>
 80138aa:	e091      	b.n	80139d0 <_dtoa_r+0x9a8>
 80138ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80138b2:	e758      	b.n	8013766 <_dtoa_r+0x73e>
 80138b4:	9b04      	ldr	r3, [sp, #16]
 80138b6:	1e5e      	subs	r6, r3, #1
 80138b8:	9b08      	ldr	r3, [sp, #32]
 80138ba:	42b3      	cmp	r3, r6
 80138bc:	bfbf      	itttt	lt
 80138be:	9b08      	ldrlt	r3, [sp, #32]
 80138c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80138c2:	9608      	strlt	r6, [sp, #32]
 80138c4:	1af3      	sublt	r3, r6, r3
 80138c6:	bfb4      	ite	lt
 80138c8:	18d2      	addlt	r2, r2, r3
 80138ca:	1b9e      	subge	r6, r3, r6
 80138cc:	9b04      	ldr	r3, [sp, #16]
 80138ce:	bfbc      	itt	lt
 80138d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80138d2:	2600      	movlt	r6, #0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	bfb7      	itett	lt
 80138d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80138dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80138e0:	1a9d      	sublt	r5, r3, r2
 80138e2:	2300      	movlt	r3, #0
 80138e4:	e741      	b.n	801376a <_dtoa_r+0x742>
 80138e6:	9e08      	ldr	r6, [sp, #32]
 80138e8:	9d05      	ldr	r5, [sp, #20]
 80138ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80138ec:	e748      	b.n	8013780 <_dtoa_r+0x758>
 80138ee:	9a08      	ldr	r2, [sp, #32]
 80138f0:	e770      	b.n	80137d4 <_dtoa_r+0x7ac>
 80138f2:	9b07      	ldr	r3, [sp, #28]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	dc19      	bgt.n	801392c <_dtoa_r+0x904>
 80138f8:	9b02      	ldr	r3, [sp, #8]
 80138fa:	b9bb      	cbnz	r3, 801392c <_dtoa_r+0x904>
 80138fc:	9b03      	ldr	r3, [sp, #12]
 80138fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013902:	b99b      	cbnz	r3, 801392c <_dtoa_r+0x904>
 8013904:	9b03      	ldr	r3, [sp, #12]
 8013906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801390a:	0d1b      	lsrs	r3, r3, #20
 801390c:	051b      	lsls	r3, r3, #20
 801390e:	b183      	cbz	r3, 8013932 <_dtoa_r+0x90a>
 8013910:	9b05      	ldr	r3, [sp, #20]
 8013912:	3301      	adds	r3, #1
 8013914:	9305      	str	r3, [sp, #20]
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	3301      	adds	r3, #1
 801391a:	9306      	str	r3, [sp, #24]
 801391c:	f04f 0801 	mov.w	r8, #1
 8013920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013922:	2b00      	cmp	r3, #0
 8013924:	f47f af6f 	bne.w	8013806 <_dtoa_r+0x7de>
 8013928:	2001      	movs	r0, #1
 801392a:	e774      	b.n	8013816 <_dtoa_r+0x7ee>
 801392c:	f04f 0800 	mov.w	r8, #0
 8013930:	e7f6      	b.n	8013920 <_dtoa_r+0x8f8>
 8013932:	4698      	mov	r8, r3
 8013934:	e7f4      	b.n	8013920 <_dtoa_r+0x8f8>
 8013936:	d082      	beq.n	801383e <_dtoa_r+0x816>
 8013938:	9a05      	ldr	r2, [sp, #20]
 801393a:	331c      	adds	r3, #28
 801393c:	441a      	add	r2, r3
 801393e:	9205      	str	r2, [sp, #20]
 8013940:	9a06      	ldr	r2, [sp, #24]
 8013942:	441a      	add	r2, r3
 8013944:	441d      	add	r5, r3
 8013946:	9206      	str	r2, [sp, #24]
 8013948:	e779      	b.n	801383e <_dtoa_r+0x816>
 801394a:	4603      	mov	r3, r0
 801394c:	e7f4      	b.n	8013938 <_dtoa_r+0x910>
 801394e:	9b04      	ldr	r3, [sp, #16]
 8013950:	2b00      	cmp	r3, #0
 8013952:	dc37      	bgt.n	80139c4 <_dtoa_r+0x99c>
 8013954:	9b07      	ldr	r3, [sp, #28]
 8013956:	2b02      	cmp	r3, #2
 8013958:	dd34      	ble.n	80139c4 <_dtoa_r+0x99c>
 801395a:	9b04      	ldr	r3, [sp, #16]
 801395c:	9301      	str	r3, [sp, #4]
 801395e:	9b01      	ldr	r3, [sp, #4]
 8013960:	b963      	cbnz	r3, 801397c <_dtoa_r+0x954>
 8013962:	4631      	mov	r1, r6
 8013964:	2205      	movs	r2, #5
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fab2 	bl	8013ed0 <__multadd>
 801396c:	4601      	mov	r1, r0
 801396e:	4606      	mov	r6, r0
 8013970:	4650      	mov	r0, sl
 8013972:	f000 fd11 	bl	8014398 <__mcmp>
 8013976:	2800      	cmp	r0, #0
 8013978:	f73f adbb 	bgt.w	80134f2 <_dtoa_r+0x4ca>
 801397c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801397e:	9d00      	ldr	r5, [sp, #0]
 8013980:	ea6f 0b03 	mvn.w	fp, r3
 8013984:	f04f 0800 	mov.w	r8, #0
 8013988:	4631      	mov	r1, r6
 801398a:	4620      	mov	r0, r4
 801398c:	f000 fa7e 	bl	8013e8c <_Bfree>
 8013990:	2f00      	cmp	r7, #0
 8013992:	f43f aeab 	beq.w	80136ec <_dtoa_r+0x6c4>
 8013996:	f1b8 0f00 	cmp.w	r8, #0
 801399a:	d005      	beq.n	80139a8 <_dtoa_r+0x980>
 801399c:	45b8      	cmp	r8, r7
 801399e:	d003      	beq.n	80139a8 <_dtoa_r+0x980>
 80139a0:	4641      	mov	r1, r8
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 fa72 	bl	8013e8c <_Bfree>
 80139a8:	4639      	mov	r1, r7
 80139aa:	4620      	mov	r0, r4
 80139ac:	f000 fa6e 	bl	8013e8c <_Bfree>
 80139b0:	e69c      	b.n	80136ec <_dtoa_r+0x6c4>
 80139b2:	2600      	movs	r6, #0
 80139b4:	4637      	mov	r7, r6
 80139b6:	e7e1      	b.n	801397c <_dtoa_r+0x954>
 80139b8:	46bb      	mov	fp, r7
 80139ba:	4637      	mov	r7, r6
 80139bc:	e599      	b.n	80134f2 <_dtoa_r+0x4ca>
 80139be:	bf00      	nop
 80139c0:	40240000 	.word	0x40240000
 80139c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	f000 80c8 	beq.w	8013b5c <_dtoa_r+0xb34>
 80139cc:	9b04      	ldr	r3, [sp, #16]
 80139ce:	9301      	str	r3, [sp, #4]
 80139d0:	2d00      	cmp	r5, #0
 80139d2:	dd05      	ble.n	80139e0 <_dtoa_r+0x9b8>
 80139d4:	4639      	mov	r1, r7
 80139d6:	462a      	mov	r2, r5
 80139d8:	4620      	mov	r0, r4
 80139da:	f000 fc71 	bl	80142c0 <__lshift>
 80139de:	4607      	mov	r7, r0
 80139e0:	f1b8 0f00 	cmp.w	r8, #0
 80139e4:	d05b      	beq.n	8013a9e <_dtoa_r+0xa76>
 80139e6:	6879      	ldr	r1, [r7, #4]
 80139e8:	4620      	mov	r0, r4
 80139ea:	f000 fa0f 	bl	8013e0c <_Balloc>
 80139ee:	4605      	mov	r5, r0
 80139f0:	b928      	cbnz	r0, 80139fe <_dtoa_r+0x9d6>
 80139f2:	4b83      	ldr	r3, [pc, #524]	; (8013c00 <_dtoa_r+0xbd8>)
 80139f4:	4602      	mov	r2, r0
 80139f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80139fa:	f7ff bb2e 	b.w	801305a <_dtoa_r+0x32>
 80139fe:	693a      	ldr	r2, [r7, #16]
 8013a00:	3202      	adds	r2, #2
 8013a02:	0092      	lsls	r2, r2, #2
 8013a04:	f107 010c 	add.w	r1, r7, #12
 8013a08:	300c      	adds	r0, #12
 8013a0a:	f7ff fa70 	bl	8012eee <memcpy>
 8013a0e:	2201      	movs	r2, #1
 8013a10:	4629      	mov	r1, r5
 8013a12:	4620      	mov	r0, r4
 8013a14:	f000 fc54 	bl	80142c0 <__lshift>
 8013a18:	9b00      	ldr	r3, [sp, #0]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	9304      	str	r3, [sp, #16]
 8013a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a22:	4413      	add	r3, r2
 8013a24:	9308      	str	r3, [sp, #32]
 8013a26:	9b02      	ldr	r3, [sp, #8]
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	46b8      	mov	r8, r7
 8013a2e:	9306      	str	r3, [sp, #24]
 8013a30:	4607      	mov	r7, r0
 8013a32:	9b04      	ldr	r3, [sp, #16]
 8013a34:	4631      	mov	r1, r6
 8013a36:	3b01      	subs	r3, #1
 8013a38:	4650      	mov	r0, sl
 8013a3a:	9301      	str	r3, [sp, #4]
 8013a3c:	f7ff fa6c 	bl	8012f18 <quorem>
 8013a40:	4641      	mov	r1, r8
 8013a42:	9002      	str	r0, [sp, #8]
 8013a44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013a48:	4650      	mov	r0, sl
 8013a4a:	f000 fca5 	bl	8014398 <__mcmp>
 8013a4e:	463a      	mov	r2, r7
 8013a50:	9005      	str	r0, [sp, #20]
 8013a52:	4631      	mov	r1, r6
 8013a54:	4620      	mov	r0, r4
 8013a56:	f000 fcbb 	bl	80143d0 <__mdiff>
 8013a5a:	68c2      	ldr	r2, [r0, #12]
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	bb02      	cbnz	r2, 8013aa2 <_dtoa_r+0xa7a>
 8013a60:	4601      	mov	r1, r0
 8013a62:	4650      	mov	r0, sl
 8013a64:	f000 fc98 	bl	8014398 <__mcmp>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8013a70:	f000 fa0c 	bl	8013e8c <_Bfree>
 8013a74:	9b07      	ldr	r3, [sp, #28]
 8013a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a78:	9d04      	ldr	r5, [sp, #16]
 8013a7a:	ea43 0102 	orr.w	r1, r3, r2
 8013a7e:	9b06      	ldr	r3, [sp, #24]
 8013a80:	4319      	orrs	r1, r3
 8013a82:	d110      	bne.n	8013aa6 <_dtoa_r+0xa7e>
 8013a84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a88:	d029      	beq.n	8013ade <_dtoa_r+0xab6>
 8013a8a:	9b05      	ldr	r3, [sp, #20]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	dd02      	ble.n	8013a96 <_dtoa_r+0xa6e>
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013a96:	9b01      	ldr	r3, [sp, #4]
 8013a98:	f883 9000 	strb.w	r9, [r3]
 8013a9c:	e774      	b.n	8013988 <_dtoa_r+0x960>
 8013a9e:	4638      	mov	r0, r7
 8013aa0:	e7ba      	b.n	8013a18 <_dtoa_r+0x9f0>
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	e7e1      	b.n	8013a6a <_dtoa_r+0xa42>
 8013aa6:	9b05      	ldr	r3, [sp, #20]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	db04      	blt.n	8013ab6 <_dtoa_r+0xa8e>
 8013aac:	9907      	ldr	r1, [sp, #28]
 8013aae:	430b      	orrs	r3, r1
 8013ab0:	9906      	ldr	r1, [sp, #24]
 8013ab2:	430b      	orrs	r3, r1
 8013ab4:	d120      	bne.n	8013af8 <_dtoa_r+0xad0>
 8013ab6:	2a00      	cmp	r2, #0
 8013ab8:	dded      	ble.n	8013a96 <_dtoa_r+0xa6e>
 8013aba:	4651      	mov	r1, sl
 8013abc:	2201      	movs	r2, #1
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f000 fbfe 	bl	80142c0 <__lshift>
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	4682      	mov	sl, r0
 8013ac8:	f000 fc66 	bl	8014398 <__mcmp>
 8013acc:	2800      	cmp	r0, #0
 8013ace:	dc03      	bgt.n	8013ad8 <_dtoa_r+0xab0>
 8013ad0:	d1e1      	bne.n	8013a96 <_dtoa_r+0xa6e>
 8013ad2:	f019 0f01 	tst.w	r9, #1
 8013ad6:	d0de      	beq.n	8013a96 <_dtoa_r+0xa6e>
 8013ad8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013adc:	d1d8      	bne.n	8013a90 <_dtoa_r+0xa68>
 8013ade:	9a01      	ldr	r2, [sp, #4]
 8013ae0:	2339      	movs	r3, #57	; 0x39
 8013ae2:	7013      	strb	r3, [r2, #0]
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	461d      	mov	r5, r3
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013aee:	2a39      	cmp	r2, #57	; 0x39
 8013af0:	d06c      	beq.n	8013bcc <_dtoa_r+0xba4>
 8013af2:	3201      	adds	r2, #1
 8013af4:	701a      	strb	r2, [r3, #0]
 8013af6:	e747      	b.n	8013988 <_dtoa_r+0x960>
 8013af8:	2a00      	cmp	r2, #0
 8013afa:	dd07      	ble.n	8013b0c <_dtoa_r+0xae4>
 8013afc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013b00:	d0ed      	beq.n	8013ade <_dtoa_r+0xab6>
 8013b02:	9a01      	ldr	r2, [sp, #4]
 8013b04:	f109 0301 	add.w	r3, r9, #1
 8013b08:	7013      	strb	r3, [r2, #0]
 8013b0a:	e73d      	b.n	8013988 <_dtoa_r+0x960>
 8013b0c:	9b04      	ldr	r3, [sp, #16]
 8013b0e:	9a08      	ldr	r2, [sp, #32]
 8013b10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d043      	beq.n	8013ba0 <_dtoa_r+0xb78>
 8013b18:	4651      	mov	r1, sl
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	220a      	movs	r2, #10
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f000 f9d6 	bl	8013ed0 <__multadd>
 8013b24:	45b8      	cmp	r8, r7
 8013b26:	4682      	mov	sl, r0
 8013b28:	f04f 0300 	mov.w	r3, #0
 8013b2c:	f04f 020a 	mov.w	r2, #10
 8013b30:	4641      	mov	r1, r8
 8013b32:	4620      	mov	r0, r4
 8013b34:	d107      	bne.n	8013b46 <_dtoa_r+0xb1e>
 8013b36:	f000 f9cb 	bl	8013ed0 <__multadd>
 8013b3a:	4680      	mov	r8, r0
 8013b3c:	4607      	mov	r7, r0
 8013b3e:	9b04      	ldr	r3, [sp, #16]
 8013b40:	3301      	adds	r3, #1
 8013b42:	9304      	str	r3, [sp, #16]
 8013b44:	e775      	b.n	8013a32 <_dtoa_r+0xa0a>
 8013b46:	f000 f9c3 	bl	8013ed0 <__multadd>
 8013b4a:	4639      	mov	r1, r7
 8013b4c:	4680      	mov	r8, r0
 8013b4e:	2300      	movs	r3, #0
 8013b50:	220a      	movs	r2, #10
 8013b52:	4620      	mov	r0, r4
 8013b54:	f000 f9bc 	bl	8013ed0 <__multadd>
 8013b58:	4607      	mov	r7, r0
 8013b5a:	e7f0      	b.n	8013b3e <_dtoa_r+0xb16>
 8013b5c:	9b04      	ldr	r3, [sp, #16]
 8013b5e:	9301      	str	r3, [sp, #4]
 8013b60:	9d00      	ldr	r5, [sp, #0]
 8013b62:	4631      	mov	r1, r6
 8013b64:	4650      	mov	r0, sl
 8013b66:	f7ff f9d7 	bl	8012f18 <quorem>
 8013b6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013b6e:	9b00      	ldr	r3, [sp, #0]
 8013b70:	f805 9b01 	strb.w	r9, [r5], #1
 8013b74:	1aea      	subs	r2, r5, r3
 8013b76:	9b01      	ldr	r3, [sp, #4]
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	dd07      	ble.n	8013b8c <_dtoa_r+0xb64>
 8013b7c:	4651      	mov	r1, sl
 8013b7e:	2300      	movs	r3, #0
 8013b80:	220a      	movs	r2, #10
 8013b82:	4620      	mov	r0, r4
 8013b84:	f000 f9a4 	bl	8013ed0 <__multadd>
 8013b88:	4682      	mov	sl, r0
 8013b8a:	e7ea      	b.n	8013b62 <_dtoa_r+0xb3a>
 8013b8c:	9b01      	ldr	r3, [sp, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	bfc8      	it	gt
 8013b92:	461d      	movgt	r5, r3
 8013b94:	9b00      	ldr	r3, [sp, #0]
 8013b96:	bfd8      	it	le
 8013b98:	2501      	movle	r5, #1
 8013b9a:	441d      	add	r5, r3
 8013b9c:	f04f 0800 	mov.w	r8, #0
 8013ba0:	4651      	mov	r1, sl
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f000 fb8b 	bl	80142c0 <__lshift>
 8013baa:	4631      	mov	r1, r6
 8013bac:	4682      	mov	sl, r0
 8013bae:	f000 fbf3 	bl	8014398 <__mcmp>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	dc96      	bgt.n	8013ae4 <_dtoa_r+0xabc>
 8013bb6:	d102      	bne.n	8013bbe <_dtoa_r+0xb96>
 8013bb8:	f019 0f01 	tst.w	r9, #1
 8013bbc:	d192      	bne.n	8013ae4 <_dtoa_r+0xabc>
 8013bbe:	462b      	mov	r3, r5
 8013bc0:	461d      	mov	r5, r3
 8013bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013bc6:	2a30      	cmp	r2, #48	; 0x30
 8013bc8:	d0fa      	beq.n	8013bc0 <_dtoa_r+0xb98>
 8013bca:	e6dd      	b.n	8013988 <_dtoa_r+0x960>
 8013bcc:	9a00      	ldr	r2, [sp, #0]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d189      	bne.n	8013ae6 <_dtoa_r+0xabe>
 8013bd2:	f10b 0b01 	add.w	fp, fp, #1
 8013bd6:	2331      	movs	r3, #49	; 0x31
 8013bd8:	e796      	b.n	8013b08 <_dtoa_r+0xae0>
 8013bda:	4b0a      	ldr	r3, [pc, #40]	; (8013c04 <_dtoa_r+0xbdc>)
 8013bdc:	f7ff ba99 	b.w	8013112 <_dtoa_r+0xea>
 8013be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f47f aa6d 	bne.w	80130c2 <_dtoa_r+0x9a>
 8013be8:	4b07      	ldr	r3, [pc, #28]	; (8013c08 <_dtoa_r+0xbe0>)
 8013bea:	f7ff ba92 	b.w	8013112 <_dtoa_r+0xea>
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	dcb5      	bgt.n	8013b60 <_dtoa_r+0xb38>
 8013bf4:	9b07      	ldr	r3, [sp, #28]
 8013bf6:	2b02      	cmp	r3, #2
 8013bf8:	f73f aeb1 	bgt.w	801395e <_dtoa_r+0x936>
 8013bfc:	e7b0      	b.n	8013b60 <_dtoa_r+0xb38>
 8013bfe:	bf00      	nop
 8013c00:	08018633 	.word	0x08018633
 8013c04:	08018918 	.word	0x08018918
 8013c08:	080185b7 	.word	0x080185b7

08013c0c <_free_r>:
 8013c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c0e:	2900      	cmp	r1, #0
 8013c10:	d044      	beq.n	8013c9c <_free_r+0x90>
 8013c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c16:	9001      	str	r0, [sp, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8013c1e:	bfb8      	it	lt
 8013c20:	18e4      	addlt	r4, r4, r3
 8013c22:	f000 f8e7 	bl	8013df4 <__malloc_lock>
 8013c26:	4a1e      	ldr	r2, [pc, #120]	; (8013ca0 <_free_r+0x94>)
 8013c28:	9801      	ldr	r0, [sp, #4]
 8013c2a:	6813      	ldr	r3, [r2, #0]
 8013c2c:	b933      	cbnz	r3, 8013c3c <_free_r+0x30>
 8013c2e:	6063      	str	r3, [r4, #4]
 8013c30:	6014      	str	r4, [r2, #0]
 8013c32:	b003      	add	sp, #12
 8013c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c38:	f000 b8e2 	b.w	8013e00 <__malloc_unlock>
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	d908      	bls.n	8013c52 <_free_r+0x46>
 8013c40:	6825      	ldr	r5, [r4, #0]
 8013c42:	1961      	adds	r1, r4, r5
 8013c44:	428b      	cmp	r3, r1
 8013c46:	bf01      	itttt	eq
 8013c48:	6819      	ldreq	r1, [r3, #0]
 8013c4a:	685b      	ldreq	r3, [r3, #4]
 8013c4c:	1949      	addeq	r1, r1, r5
 8013c4e:	6021      	streq	r1, [r4, #0]
 8013c50:	e7ed      	b.n	8013c2e <_free_r+0x22>
 8013c52:	461a      	mov	r2, r3
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	b10b      	cbz	r3, 8013c5c <_free_r+0x50>
 8013c58:	42a3      	cmp	r3, r4
 8013c5a:	d9fa      	bls.n	8013c52 <_free_r+0x46>
 8013c5c:	6811      	ldr	r1, [r2, #0]
 8013c5e:	1855      	adds	r5, r2, r1
 8013c60:	42a5      	cmp	r5, r4
 8013c62:	d10b      	bne.n	8013c7c <_free_r+0x70>
 8013c64:	6824      	ldr	r4, [r4, #0]
 8013c66:	4421      	add	r1, r4
 8013c68:	1854      	adds	r4, r2, r1
 8013c6a:	42a3      	cmp	r3, r4
 8013c6c:	6011      	str	r1, [r2, #0]
 8013c6e:	d1e0      	bne.n	8013c32 <_free_r+0x26>
 8013c70:	681c      	ldr	r4, [r3, #0]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	6053      	str	r3, [r2, #4]
 8013c76:	440c      	add	r4, r1
 8013c78:	6014      	str	r4, [r2, #0]
 8013c7a:	e7da      	b.n	8013c32 <_free_r+0x26>
 8013c7c:	d902      	bls.n	8013c84 <_free_r+0x78>
 8013c7e:	230c      	movs	r3, #12
 8013c80:	6003      	str	r3, [r0, #0]
 8013c82:	e7d6      	b.n	8013c32 <_free_r+0x26>
 8013c84:	6825      	ldr	r5, [r4, #0]
 8013c86:	1961      	adds	r1, r4, r5
 8013c88:	428b      	cmp	r3, r1
 8013c8a:	bf04      	itt	eq
 8013c8c:	6819      	ldreq	r1, [r3, #0]
 8013c8e:	685b      	ldreq	r3, [r3, #4]
 8013c90:	6063      	str	r3, [r4, #4]
 8013c92:	bf04      	itt	eq
 8013c94:	1949      	addeq	r1, r1, r5
 8013c96:	6021      	streq	r1, [r4, #0]
 8013c98:	6054      	str	r4, [r2, #4]
 8013c9a:	e7ca      	b.n	8013c32 <_free_r+0x26>
 8013c9c:	b003      	add	sp, #12
 8013c9e:	bd30      	pop	{r4, r5, pc}
 8013ca0:	20009044 	.word	0x20009044

08013ca4 <malloc>:
 8013ca4:	4b02      	ldr	r3, [pc, #8]	; (8013cb0 <malloc+0xc>)
 8013ca6:	4601      	mov	r1, r0
 8013ca8:	6818      	ldr	r0, [r3, #0]
 8013caa:	f000 b823 	b.w	8013cf4 <_malloc_r>
 8013cae:	bf00      	nop
 8013cb0:	20000070 	.word	0x20000070

08013cb4 <sbrk_aligned>:
 8013cb4:	b570      	push	{r4, r5, r6, lr}
 8013cb6:	4e0e      	ldr	r6, [pc, #56]	; (8013cf0 <sbrk_aligned+0x3c>)
 8013cb8:	460c      	mov	r4, r1
 8013cba:	6831      	ldr	r1, [r6, #0]
 8013cbc:	4605      	mov	r5, r0
 8013cbe:	b911      	cbnz	r1, 8013cc6 <sbrk_aligned+0x12>
 8013cc0:	f002 f99c 	bl	8015ffc <_sbrk_r>
 8013cc4:	6030      	str	r0, [r6, #0]
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f002 f997 	bl	8015ffc <_sbrk_r>
 8013cce:	1c43      	adds	r3, r0, #1
 8013cd0:	d00a      	beq.n	8013ce8 <sbrk_aligned+0x34>
 8013cd2:	1cc4      	adds	r4, r0, #3
 8013cd4:	f024 0403 	bic.w	r4, r4, #3
 8013cd8:	42a0      	cmp	r0, r4
 8013cda:	d007      	beq.n	8013cec <sbrk_aligned+0x38>
 8013cdc:	1a21      	subs	r1, r4, r0
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f002 f98c 	bl	8015ffc <_sbrk_r>
 8013ce4:	3001      	adds	r0, #1
 8013ce6:	d101      	bne.n	8013cec <sbrk_aligned+0x38>
 8013ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8013cec:	4620      	mov	r0, r4
 8013cee:	bd70      	pop	{r4, r5, r6, pc}
 8013cf0:	20009048 	.word	0x20009048

08013cf4 <_malloc_r>:
 8013cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	1ccd      	adds	r5, r1, #3
 8013cfa:	f025 0503 	bic.w	r5, r5, #3
 8013cfe:	3508      	adds	r5, #8
 8013d00:	2d0c      	cmp	r5, #12
 8013d02:	bf38      	it	cc
 8013d04:	250c      	movcc	r5, #12
 8013d06:	2d00      	cmp	r5, #0
 8013d08:	4607      	mov	r7, r0
 8013d0a:	db01      	blt.n	8013d10 <_malloc_r+0x1c>
 8013d0c:	42a9      	cmp	r1, r5
 8013d0e:	d905      	bls.n	8013d1c <_malloc_r+0x28>
 8013d10:	230c      	movs	r3, #12
 8013d12:	603b      	str	r3, [r7, #0]
 8013d14:	2600      	movs	r6, #0
 8013d16:	4630      	mov	r0, r6
 8013d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013df0 <_malloc_r+0xfc>
 8013d20:	f000 f868 	bl	8013df4 <__malloc_lock>
 8013d24:	f8d8 3000 	ldr.w	r3, [r8]
 8013d28:	461c      	mov	r4, r3
 8013d2a:	bb5c      	cbnz	r4, 8013d84 <_malloc_r+0x90>
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	4638      	mov	r0, r7
 8013d30:	f7ff ffc0 	bl	8013cb4 <sbrk_aligned>
 8013d34:	1c43      	adds	r3, r0, #1
 8013d36:	4604      	mov	r4, r0
 8013d38:	d155      	bne.n	8013de6 <_malloc_r+0xf2>
 8013d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8013d3e:	4626      	mov	r6, r4
 8013d40:	2e00      	cmp	r6, #0
 8013d42:	d145      	bne.n	8013dd0 <_malloc_r+0xdc>
 8013d44:	2c00      	cmp	r4, #0
 8013d46:	d048      	beq.n	8013dda <_malloc_r+0xe6>
 8013d48:	6823      	ldr	r3, [r4, #0]
 8013d4a:	4631      	mov	r1, r6
 8013d4c:	4638      	mov	r0, r7
 8013d4e:	eb04 0903 	add.w	r9, r4, r3
 8013d52:	f002 f953 	bl	8015ffc <_sbrk_r>
 8013d56:	4581      	cmp	r9, r0
 8013d58:	d13f      	bne.n	8013dda <_malloc_r+0xe6>
 8013d5a:	6821      	ldr	r1, [r4, #0]
 8013d5c:	1a6d      	subs	r5, r5, r1
 8013d5e:	4629      	mov	r1, r5
 8013d60:	4638      	mov	r0, r7
 8013d62:	f7ff ffa7 	bl	8013cb4 <sbrk_aligned>
 8013d66:	3001      	adds	r0, #1
 8013d68:	d037      	beq.n	8013dda <_malloc_r+0xe6>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	442b      	add	r3, r5
 8013d6e:	6023      	str	r3, [r4, #0]
 8013d70:	f8d8 3000 	ldr.w	r3, [r8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d038      	beq.n	8013dea <_malloc_r+0xf6>
 8013d78:	685a      	ldr	r2, [r3, #4]
 8013d7a:	42a2      	cmp	r2, r4
 8013d7c:	d12b      	bne.n	8013dd6 <_malloc_r+0xe2>
 8013d7e:	2200      	movs	r2, #0
 8013d80:	605a      	str	r2, [r3, #4]
 8013d82:	e00f      	b.n	8013da4 <_malloc_r+0xb0>
 8013d84:	6822      	ldr	r2, [r4, #0]
 8013d86:	1b52      	subs	r2, r2, r5
 8013d88:	d41f      	bmi.n	8013dca <_malloc_r+0xd6>
 8013d8a:	2a0b      	cmp	r2, #11
 8013d8c:	d917      	bls.n	8013dbe <_malloc_r+0xca>
 8013d8e:	1961      	adds	r1, r4, r5
 8013d90:	42a3      	cmp	r3, r4
 8013d92:	6025      	str	r5, [r4, #0]
 8013d94:	bf18      	it	ne
 8013d96:	6059      	strne	r1, [r3, #4]
 8013d98:	6863      	ldr	r3, [r4, #4]
 8013d9a:	bf08      	it	eq
 8013d9c:	f8c8 1000 	streq.w	r1, [r8]
 8013da0:	5162      	str	r2, [r4, r5]
 8013da2:	604b      	str	r3, [r1, #4]
 8013da4:	4638      	mov	r0, r7
 8013da6:	f104 060b 	add.w	r6, r4, #11
 8013daa:	f000 f829 	bl	8013e00 <__malloc_unlock>
 8013dae:	f026 0607 	bic.w	r6, r6, #7
 8013db2:	1d23      	adds	r3, r4, #4
 8013db4:	1af2      	subs	r2, r6, r3
 8013db6:	d0ae      	beq.n	8013d16 <_malloc_r+0x22>
 8013db8:	1b9b      	subs	r3, r3, r6
 8013dba:	50a3      	str	r3, [r4, r2]
 8013dbc:	e7ab      	b.n	8013d16 <_malloc_r+0x22>
 8013dbe:	42a3      	cmp	r3, r4
 8013dc0:	6862      	ldr	r2, [r4, #4]
 8013dc2:	d1dd      	bne.n	8013d80 <_malloc_r+0x8c>
 8013dc4:	f8c8 2000 	str.w	r2, [r8]
 8013dc8:	e7ec      	b.n	8013da4 <_malloc_r+0xb0>
 8013dca:	4623      	mov	r3, r4
 8013dcc:	6864      	ldr	r4, [r4, #4]
 8013dce:	e7ac      	b.n	8013d2a <_malloc_r+0x36>
 8013dd0:	4634      	mov	r4, r6
 8013dd2:	6876      	ldr	r6, [r6, #4]
 8013dd4:	e7b4      	b.n	8013d40 <_malloc_r+0x4c>
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	e7cc      	b.n	8013d74 <_malloc_r+0x80>
 8013dda:	230c      	movs	r3, #12
 8013ddc:	603b      	str	r3, [r7, #0]
 8013dde:	4638      	mov	r0, r7
 8013de0:	f000 f80e 	bl	8013e00 <__malloc_unlock>
 8013de4:	e797      	b.n	8013d16 <_malloc_r+0x22>
 8013de6:	6025      	str	r5, [r4, #0]
 8013de8:	e7dc      	b.n	8013da4 <_malloc_r+0xb0>
 8013dea:	605b      	str	r3, [r3, #4]
 8013dec:	deff      	udf	#255	; 0xff
 8013dee:	bf00      	nop
 8013df0:	20009044 	.word	0x20009044

08013df4 <__malloc_lock>:
 8013df4:	4801      	ldr	r0, [pc, #4]	; (8013dfc <__malloc_lock+0x8>)
 8013df6:	f7ff b878 	b.w	8012eea <__retarget_lock_acquire_recursive>
 8013dfa:	bf00      	nop
 8013dfc:	20009040 	.word	0x20009040

08013e00 <__malloc_unlock>:
 8013e00:	4801      	ldr	r0, [pc, #4]	; (8013e08 <__malloc_unlock+0x8>)
 8013e02:	f7ff b873 	b.w	8012eec <__retarget_lock_release_recursive>
 8013e06:	bf00      	nop
 8013e08:	20009040 	.word	0x20009040

08013e0c <_Balloc>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	69c6      	ldr	r6, [r0, #28]
 8013e10:	4604      	mov	r4, r0
 8013e12:	460d      	mov	r5, r1
 8013e14:	b976      	cbnz	r6, 8013e34 <_Balloc+0x28>
 8013e16:	2010      	movs	r0, #16
 8013e18:	f7ff ff44 	bl	8013ca4 <malloc>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	61e0      	str	r0, [r4, #28]
 8013e20:	b920      	cbnz	r0, 8013e2c <_Balloc+0x20>
 8013e22:	4b18      	ldr	r3, [pc, #96]	; (8013e84 <_Balloc+0x78>)
 8013e24:	4818      	ldr	r0, [pc, #96]	; (8013e88 <_Balloc+0x7c>)
 8013e26:	216b      	movs	r1, #107	; 0x6b
 8013e28:	f002 f902 	bl	8016030 <__assert_func>
 8013e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e30:	6006      	str	r6, [r0, #0]
 8013e32:	60c6      	str	r6, [r0, #12]
 8013e34:	69e6      	ldr	r6, [r4, #28]
 8013e36:	68f3      	ldr	r3, [r6, #12]
 8013e38:	b183      	cbz	r3, 8013e5c <_Balloc+0x50>
 8013e3a:	69e3      	ldr	r3, [r4, #28]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e42:	b9b8      	cbnz	r0, 8013e74 <_Balloc+0x68>
 8013e44:	2101      	movs	r1, #1
 8013e46:	fa01 f605 	lsl.w	r6, r1, r5
 8013e4a:	1d72      	adds	r2, r6, #5
 8013e4c:	0092      	lsls	r2, r2, #2
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f002 f90c 	bl	801606c <_calloc_r>
 8013e54:	b160      	cbz	r0, 8013e70 <_Balloc+0x64>
 8013e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e5a:	e00e      	b.n	8013e7a <_Balloc+0x6e>
 8013e5c:	2221      	movs	r2, #33	; 0x21
 8013e5e:	2104      	movs	r1, #4
 8013e60:	4620      	mov	r0, r4
 8013e62:	f002 f903 	bl	801606c <_calloc_r>
 8013e66:	69e3      	ldr	r3, [r4, #28]
 8013e68:	60f0      	str	r0, [r6, #12]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d1e4      	bne.n	8013e3a <_Balloc+0x2e>
 8013e70:	2000      	movs	r0, #0
 8013e72:	bd70      	pop	{r4, r5, r6, pc}
 8013e74:	6802      	ldr	r2, [r0, #0]
 8013e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e80:	e7f7      	b.n	8013e72 <_Balloc+0x66>
 8013e82:	bf00      	nop
 8013e84:	080185c4 	.word	0x080185c4
 8013e88:	08018644 	.word	0x08018644

08013e8c <_Bfree>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	69c6      	ldr	r6, [r0, #28]
 8013e90:	4605      	mov	r5, r0
 8013e92:	460c      	mov	r4, r1
 8013e94:	b976      	cbnz	r6, 8013eb4 <_Bfree+0x28>
 8013e96:	2010      	movs	r0, #16
 8013e98:	f7ff ff04 	bl	8013ca4 <malloc>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	61e8      	str	r0, [r5, #28]
 8013ea0:	b920      	cbnz	r0, 8013eac <_Bfree+0x20>
 8013ea2:	4b09      	ldr	r3, [pc, #36]	; (8013ec8 <_Bfree+0x3c>)
 8013ea4:	4809      	ldr	r0, [pc, #36]	; (8013ecc <_Bfree+0x40>)
 8013ea6:	218f      	movs	r1, #143	; 0x8f
 8013ea8:	f002 f8c2 	bl	8016030 <__assert_func>
 8013eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013eb0:	6006      	str	r6, [r0, #0]
 8013eb2:	60c6      	str	r6, [r0, #12]
 8013eb4:	b13c      	cbz	r4, 8013ec6 <_Bfree+0x3a>
 8013eb6:	69eb      	ldr	r3, [r5, #28]
 8013eb8:	6862      	ldr	r2, [r4, #4]
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ec0:	6021      	str	r1, [r4, #0]
 8013ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}
 8013ec8:	080185c4 	.word	0x080185c4
 8013ecc:	08018644 	.word	0x08018644

08013ed0 <__multadd>:
 8013ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed4:	690d      	ldr	r5, [r1, #16]
 8013ed6:	4607      	mov	r7, r0
 8013ed8:	460c      	mov	r4, r1
 8013eda:	461e      	mov	r6, r3
 8013edc:	f101 0c14 	add.w	ip, r1, #20
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ee6:	b299      	uxth	r1, r3
 8013ee8:	fb02 6101 	mla	r1, r2, r1, r6
 8013eec:	0c1e      	lsrs	r6, r3, #16
 8013eee:	0c0b      	lsrs	r3, r1, #16
 8013ef0:	fb02 3306 	mla	r3, r2, r6, r3
 8013ef4:	b289      	uxth	r1, r1
 8013ef6:	3001      	adds	r0, #1
 8013ef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013efc:	4285      	cmp	r5, r0
 8013efe:	f84c 1b04 	str.w	r1, [ip], #4
 8013f02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013f06:	dcec      	bgt.n	8013ee2 <__multadd+0x12>
 8013f08:	b30e      	cbz	r6, 8013f4e <__multadd+0x7e>
 8013f0a:	68a3      	ldr	r3, [r4, #8]
 8013f0c:	42ab      	cmp	r3, r5
 8013f0e:	dc19      	bgt.n	8013f44 <__multadd+0x74>
 8013f10:	6861      	ldr	r1, [r4, #4]
 8013f12:	4638      	mov	r0, r7
 8013f14:	3101      	adds	r1, #1
 8013f16:	f7ff ff79 	bl	8013e0c <_Balloc>
 8013f1a:	4680      	mov	r8, r0
 8013f1c:	b928      	cbnz	r0, 8013f2a <__multadd+0x5a>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	4b0c      	ldr	r3, [pc, #48]	; (8013f54 <__multadd+0x84>)
 8013f22:	480d      	ldr	r0, [pc, #52]	; (8013f58 <__multadd+0x88>)
 8013f24:	21ba      	movs	r1, #186	; 0xba
 8013f26:	f002 f883 	bl	8016030 <__assert_func>
 8013f2a:	6922      	ldr	r2, [r4, #16]
 8013f2c:	3202      	adds	r2, #2
 8013f2e:	f104 010c 	add.w	r1, r4, #12
 8013f32:	0092      	lsls	r2, r2, #2
 8013f34:	300c      	adds	r0, #12
 8013f36:	f7fe ffda 	bl	8012eee <memcpy>
 8013f3a:	4621      	mov	r1, r4
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7ff ffa5 	bl	8013e8c <_Bfree>
 8013f42:	4644      	mov	r4, r8
 8013f44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f48:	3501      	adds	r5, #1
 8013f4a:	615e      	str	r6, [r3, #20]
 8013f4c:	6125      	str	r5, [r4, #16]
 8013f4e:	4620      	mov	r0, r4
 8013f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f54:	08018633 	.word	0x08018633
 8013f58:	08018644 	.word	0x08018644

08013f5c <__s2b>:
 8013f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f60:	460c      	mov	r4, r1
 8013f62:	4615      	mov	r5, r2
 8013f64:	461f      	mov	r7, r3
 8013f66:	2209      	movs	r2, #9
 8013f68:	3308      	adds	r3, #8
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f70:	2100      	movs	r1, #0
 8013f72:	2201      	movs	r2, #1
 8013f74:	429a      	cmp	r2, r3
 8013f76:	db09      	blt.n	8013f8c <__s2b+0x30>
 8013f78:	4630      	mov	r0, r6
 8013f7a:	f7ff ff47 	bl	8013e0c <_Balloc>
 8013f7e:	b940      	cbnz	r0, 8013f92 <__s2b+0x36>
 8013f80:	4602      	mov	r2, r0
 8013f82:	4b19      	ldr	r3, [pc, #100]	; (8013fe8 <__s2b+0x8c>)
 8013f84:	4819      	ldr	r0, [pc, #100]	; (8013fec <__s2b+0x90>)
 8013f86:	21d3      	movs	r1, #211	; 0xd3
 8013f88:	f002 f852 	bl	8016030 <__assert_func>
 8013f8c:	0052      	lsls	r2, r2, #1
 8013f8e:	3101      	adds	r1, #1
 8013f90:	e7f0      	b.n	8013f74 <__s2b+0x18>
 8013f92:	9b08      	ldr	r3, [sp, #32]
 8013f94:	6143      	str	r3, [r0, #20]
 8013f96:	2d09      	cmp	r5, #9
 8013f98:	f04f 0301 	mov.w	r3, #1
 8013f9c:	6103      	str	r3, [r0, #16]
 8013f9e:	dd16      	ble.n	8013fce <__s2b+0x72>
 8013fa0:	f104 0909 	add.w	r9, r4, #9
 8013fa4:	46c8      	mov	r8, r9
 8013fa6:	442c      	add	r4, r5
 8013fa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013fac:	4601      	mov	r1, r0
 8013fae:	3b30      	subs	r3, #48	; 0x30
 8013fb0:	220a      	movs	r2, #10
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7ff ff8c 	bl	8013ed0 <__multadd>
 8013fb8:	45a0      	cmp	r8, r4
 8013fba:	d1f5      	bne.n	8013fa8 <__s2b+0x4c>
 8013fbc:	f1a5 0408 	sub.w	r4, r5, #8
 8013fc0:	444c      	add	r4, r9
 8013fc2:	1b2d      	subs	r5, r5, r4
 8013fc4:	1963      	adds	r3, r4, r5
 8013fc6:	42bb      	cmp	r3, r7
 8013fc8:	db04      	blt.n	8013fd4 <__s2b+0x78>
 8013fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fce:	340a      	adds	r4, #10
 8013fd0:	2509      	movs	r5, #9
 8013fd2:	e7f6      	b.n	8013fc2 <__s2b+0x66>
 8013fd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013fd8:	4601      	mov	r1, r0
 8013fda:	3b30      	subs	r3, #48	; 0x30
 8013fdc:	220a      	movs	r2, #10
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f7ff ff76 	bl	8013ed0 <__multadd>
 8013fe4:	e7ee      	b.n	8013fc4 <__s2b+0x68>
 8013fe6:	bf00      	nop
 8013fe8:	08018633 	.word	0x08018633
 8013fec:	08018644 	.word	0x08018644

08013ff0 <__hi0bits>:
 8013ff0:	0c03      	lsrs	r3, r0, #16
 8013ff2:	041b      	lsls	r3, r3, #16
 8013ff4:	b9d3      	cbnz	r3, 801402c <__hi0bits+0x3c>
 8013ff6:	0400      	lsls	r0, r0, #16
 8013ff8:	2310      	movs	r3, #16
 8013ffa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ffe:	bf04      	itt	eq
 8014000:	0200      	lsleq	r0, r0, #8
 8014002:	3308      	addeq	r3, #8
 8014004:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014008:	bf04      	itt	eq
 801400a:	0100      	lsleq	r0, r0, #4
 801400c:	3304      	addeq	r3, #4
 801400e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014012:	bf04      	itt	eq
 8014014:	0080      	lsleq	r0, r0, #2
 8014016:	3302      	addeq	r3, #2
 8014018:	2800      	cmp	r0, #0
 801401a:	db05      	blt.n	8014028 <__hi0bits+0x38>
 801401c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014020:	f103 0301 	add.w	r3, r3, #1
 8014024:	bf08      	it	eq
 8014026:	2320      	moveq	r3, #32
 8014028:	4618      	mov	r0, r3
 801402a:	4770      	bx	lr
 801402c:	2300      	movs	r3, #0
 801402e:	e7e4      	b.n	8013ffa <__hi0bits+0xa>

08014030 <__lo0bits>:
 8014030:	6803      	ldr	r3, [r0, #0]
 8014032:	f013 0207 	ands.w	r2, r3, #7
 8014036:	d00c      	beq.n	8014052 <__lo0bits+0x22>
 8014038:	07d9      	lsls	r1, r3, #31
 801403a:	d422      	bmi.n	8014082 <__lo0bits+0x52>
 801403c:	079a      	lsls	r2, r3, #30
 801403e:	bf49      	itett	mi
 8014040:	085b      	lsrmi	r3, r3, #1
 8014042:	089b      	lsrpl	r3, r3, #2
 8014044:	6003      	strmi	r3, [r0, #0]
 8014046:	2201      	movmi	r2, #1
 8014048:	bf5c      	itt	pl
 801404a:	6003      	strpl	r3, [r0, #0]
 801404c:	2202      	movpl	r2, #2
 801404e:	4610      	mov	r0, r2
 8014050:	4770      	bx	lr
 8014052:	b299      	uxth	r1, r3
 8014054:	b909      	cbnz	r1, 801405a <__lo0bits+0x2a>
 8014056:	0c1b      	lsrs	r3, r3, #16
 8014058:	2210      	movs	r2, #16
 801405a:	b2d9      	uxtb	r1, r3
 801405c:	b909      	cbnz	r1, 8014062 <__lo0bits+0x32>
 801405e:	3208      	adds	r2, #8
 8014060:	0a1b      	lsrs	r3, r3, #8
 8014062:	0719      	lsls	r1, r3, #28
 8014064:	bf04      	itt	eq
 8014066:	091b      	lsreq	r3, r3, #4
 8014068:	3204      	addeq	r2, #4
 801406a:	0799      	lsls	r1, r3, #30
 801406c:	bf04      	itt	eq
 801406e:	089b      	lsreq	r3, r3, #2
 8014070:	3202      	addeq	r2, #2
 8014072:	07d9      	lsls	r1, r3, #31
 8014074:	d403      	bmi.n	801407e <__lo0bits+0x4e>
 8014076:	085b      	lsrs	r3, r3, #1
 8014078:	f102 0201 	add.w	r2, r2, #1
 801407c:	d003      	beq.n	8014086 <__lo0bits+0x56>
 801407e:	6003      	str	r3, [r0, #0]
 8014080:	e7e5      	b.n	801404e <__lo0bits+0x1e>
 8014082:	2200      	movs	r2, #0
 8014084:	e7e3      	b.n	801404e <__lo0bits+0x1e>
 8014086:	2220      	movs	r2, #32
 8014088:	e7e1      	b.n	801404e <__lo0bits+0x1e>
	...

0801408c <__i2b>:
 801408c:	b510      	push	{r4, lr}
 801408e:	460c      	mov	r4, r1
 8014090:	2101      	movs	r1, #1
 8014092:	f7ff febb 	bl	8013e0c <_Balloc>
 8014096:	4602      	mov	r2, r0
 8014098:	b928      	cbnz	r0, 80140a6 <__i2b+0x1a>
 801409a:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <__i2b+0x24>)
 801409c:	4805      	ldr	r0, [pc, #20]	; (80140b4 <__i2b+0x28>)
 801409e:	f240 1145 	movw	r1, #325	; 0x145
 80140a2:	f001 ffc5 	bl	8016030 <__assert_func>
 80140a6:	2301      	movs	r3, #1
 80140a8:	6144      	str	r4, [r0, #20]
 80140aa:	6103      	str	r3, [r0, #16]
 80140ac:	bd10      	pop	{r4, pc}
 80140ae:	bf00      	nop
 80140b0:	08018633 	.word	0x08018633
 80140b4:	08018644 	.word	0x08018644

080140b8 <__multiply>:
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	4691      	mov	r9, r2
 80140be:	690a      	ldr	r2, [r1, #16]
 80140c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	bfb8      	it	lt
 80140c8:	460b      	movlt	r3, r1
 80140ca:	460c      	mov	r4, r1
 80140cc:	bfbc      	itt	lt
 80140ce:	464c      	movlt	r4, r9
 80140d0:	4699      	movlt	r9, r3
 80140d2:	6927      	ldr	r7, [r4, #16]
 80140d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80140d8:	68a3      	ldr	r3, [r4, #8]
 80140da:	6861      	ldr	r1, [r4, #4]
 80140dc:	eb07 060a 	add.w	r6, r7, sl
 80140e0:	42b3      	cmp	r3, r6
 80140e2:	b085      	sub	sp, #20
 80140e4:	bfb8      	it	lt
 80140e6:	3101      	addlt	r1, #1
 80140e8:	f7ff fe90 	bl	8013e0c <_Balloc>
 80140ec:	b930      	cbnz	r0, 80140fc <__multiply+0x44>
 80140ee:	4602      	mov	r2, r0
 80140f0:	4b44      	ldr	r3, [pc, #272]	; (8014204 <__multiply+0x14c>)
 80140f2:	4845      	ldr	r0, [pc, #276]	; (8014208 <__multiply+0x150>)
 80140f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80140f8:	f001 ff9a 	bl	8016030 <__assert_func>
 80140fc:	f100 0514 	add.w	r5, r0, #20
 8014100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014104:	462b      	mov	r3, r5
 8014106:	2200      	movs	r2, #0
 8014108:	4543      	cmp	r3, r8
 801410a:	d321      	bcc.n	8014150 <__multiply+0x98>
 801410c:	f104 0314 	add.w	r3, r4, #20
 8014110:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014114:	f109 0314 	add.w	r3, r9, #20
 8014118:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801411c:	9202      	str	r2, [sp, #8]
 801411e:	1b3a      	subs	r2, r7, r4
 8014120:	3a15      	subs	r2, #21
 8014122:	f022 0203 	bic.w	r2, r2, #3
 8014126:	3204      	adds	r2, #4
 8014128:	f104 0115 	add.w	r1, r4, #21
 801412c:	428f      	cmp	r7, r1
 801412e:	bf38      	it	cc
 8014130:	2204      	movcc	r2, #4
 8014132:	9201      	str	r2, [sp, #4]
 8014134:	9a02      	ldr	r2, [sp, #8]
 8014136:	9303      	str	r3, [sp, #12]
 8014138:	429a      	cmp	r2, r3
 801413a:	d80c      	bhi.n	8014156 <__multiply+0x9e>
 801413c:	2e00      	cmp	r6, #0
 801413e:	dd03      	ble.n	8014148 <__multiply+0x90>
 8014140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014144:	2b00      	cmp	r3, #0
 8014146:	d05b      	beq.n	8014200 <__multiply+0x148>
 8014148:	6106      	str	r6, [r0, #16]
 801414a:	b005      	add	sp, #20
 801414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014150:	f843 2b04 	str.w	r2, [r3], #4
 8014154:	e7d8      	b.n	8014108 <__multiply+0x50>
 8014156:	f8b3 a000 	ldrh.w	sl, [r3]
 801415a:	f1ba 0f00 	cmp.w	sl, #0
 801415e:	d024      	beq.n	80141aa <__multiply+0xf2>
 8014160:	f104 0e14 	add.w	lr, r4, #20
 8014164:	46a9      	mov	r9, r5
 8014166:	f04f 0c00 	mov.w	ip, #0
 801416a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801416e:	f8d9 1000 	ldr.w	r1, [r9]
 8014172:	fa1f fb82 	uxth.w	fp, r2
 8014176:	b289      	uxth	r1, r1
 8014178:	fb0a 110b 	mla	r1, sl, fp, r1
 801417c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014180:	f8d9 2000 	ldr.w	r2, [r9]
 8014184:	4461      	add	r1, ip
 8014186:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801418a:	fb0a c20b 	mla	r2, sl, fp, ip
 801418e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014192:	b289      	uxth	r1, r1
 8014194:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014198:	4577      	cmp	r7, lr
 801419a:	f849 1b04 	str.w	r1, [r9], #4
 801419e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80141a2:	d8e2      	bhi.n	801416a <__multiply+0xb2>
 80141a4:	9a01      	ldr	r2, [sp, #4]
 80141a6:	f845 c002 	str.w	ip, [r5, r2]
 80141aa:	9a03      	ldr	r2, [sp, #12]
 80141ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80141b0:	3304      	adds	r3, #4
 80141b2:	f1b9 0f00 	cmp.w	r9, #0
 80141b6:	d021      	beq.n	80141fc <__multiply+0x144>
 80141b8:	6829      	ldr	r1, [r5, #0]
 80141ba:	f104 0c14 	add.w	ip, r4, #20
 80141be:	46ae      	mov	lr, r5
 80141c0:	f04f 0a00 	mov.w	sl, #0
 80141c4:	f8bc b000 	ldrh.w	fp, [ip]
 80141c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80141cc:	fb09 220b 	mla	r2, r9, fp, r2
 80141d0:	4452      	add	r2, sl
 80141d2:	b289      	uxth	r1, r1
 80141d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80141d8:	f84e 1b04 	str.w	r1, [lr], #4
 80141dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80141e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80141e4:	f8be 1000 	ldrh.w	r1, [lr]
 80141e8:	fb09 110a 	mla	r1, r9, sl, r1
 80141ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80141f0:	4567      	cmp	r7, ip
 80141f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80141f6:	d8e5      	bhi.n	80141c4 <__multiply+0x10c>
 80141f8:	9a01      	ldr	r2, [sp, #4]
 80141fa:	50a9      	str	r1, [r5, r2]
 80141fc:	3504      	adds	r5, #4
 80141fe:	e799      	b.n	8014134 <__multiply+0x7c>
 8014200:	3e01      	subs	r6, #1
 8014202:	e79b      	b.n	801413c <__multiply+0x84>
 8014204:	08018633 	.word	0x08018633
 8014208:	08018644 	.word	0x08018644

0801420c <__pow5mult>:
 801420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014210:	4615      	mov	r5, r2
 8014212:	f012 0203 	ands.w	r2, r2, #3
 8014216:	4606      	mov	r6, r0
 8014218:	460f      	mov	r7, r1
 801421a:	d007      	beq.n	801422c <__pow5mult+0x20>
 801421c:	4c25      	ldr	r4, [pc, #148]	; (80142b4 <__pow5mult+0xa8>)
 801421e:	3a01      	subs	r2, #1
 8014220:	2300      	movs	r3, #0
 8014222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014226:	f7ff fe53 	bl	8013ed0 <__multadd>
 801422a:	4607      	mov	r7, r0
 801422c:	10ad      	asrs	r5, r5, #2
 801422e:	d03d      	beq.n	80142ac <__pow5mult+0xa0>
 8014230:	69f4      	ldr	r4, [r6, #28]
 8014232:	b97c      	cbnz	r4, 8014254 <__pow5mult+0x48>
 8014234:	2010      	movs	r0, #16
 8014236:	f7ff fd35 	bl	8013ca4 <malloc>
 801423a:	4602      	mov	r2, r0
 801423c:	61f0      	str	r0, [r6, #28]
 801423e:	b928      	cbnz	r0, 801424c <__pow5mult+0x40>
 8014240:	4b1d      	ldr	r3, [pc, #116]	; (80142b8 <__pow5mult+0xac>)
 8014242:	481e      	ldr	r0, [pc, #120]	; (80142bc <__pow5mult+0xb0>)
 8014244:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014248:	f001 fef2 	bl	8016030 <__assert_func>
 801424c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014250:	6004      	str	r4, [r0, #0]
 8014252:	60c4      	str	r4, [r0, #12]
 8014254:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801425c:	b94c      	cbnz	r4, 8014272 <__pow5mult+0x66>
 801425e:	f240 2171 	movw	r1, #625	; 0x271
 8014262:	4630      	mov	r0, r6
 8014264:	f7ff ff12 	bl	801408c <__i2b>
 8014268:	2300      	movs	r3, #0
 801426a:	f8c8 0008 	str.w	r0, [r8, #8]
 801426e:	4604      	mov	r4, r0
 8014270:	6003      	str	r3, [r0, #0]
 8014272:	f04f 0900 	mov.w	r9, #0
 8014276:	07eb      	lsls	r3, r5, #31
 8014278:	d50a      	bpl.n	8014290 <__pow5mult+0x84>
 801427a:	4639      	mov	r1, r7
 801427c:	4622      	mov	r2, r4
 801427e:	4630      	mov	r0, r6
 8014280:	f7ff ff1a 	bl	80140b8 <__multiply>
 8014284:	4639      	mov	r1, r7
 8014286:	4680      	mov	r8, r0
 8014288:	4630      	mov	r0, r6
 801428a:	f7ff fdff 	bl	8013e8c <_Bfree>
 801428e:	4647      	mov	r7, r8
 8014290:	106d      	asrs	r5, r5, #1
 8014292:	d00b      	beq.n	80142ac <__pow5mult+0xa0>
 8014294:	6820      	ldr	r0, [r4, #0]
 8014296:	b938      	cbnz	r0, 80142a8 <__pow5mult+0x9c>
 8014298:	4622      	mov	r2, r4
 801429a:	4621      	mov	r1, r4
 801429c:	4630      	mov	r0, r6
 801429e:	f7ff ff0b 	bl	80140b8 <__multiply>
 80142a2:	6020      	str	r0, [r4, #0]
 80142a4:	f8c0 9000 	str.w	r9, [r0]
 80142a8:	4604      	mov	r4, r0
 80142aa:	e7e4      	b.n	8014276 <__pow5mult+0x6a>
 80142ac:	4638      	mov	r0, r7
 80142ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142b2:	bf00      	nop
 80142b4:	08018790 	.word	0x08018790
 80142b8:	080185c4 	.word	0x080185c4
 80142bc:	08018644 	.word	0x08018644

080142c0 <__lshift>:
 80142c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c4:	460c      	mov	r4, r1
 80142c6:	6849      	ldr	r1, [r1, #4]
 80142c8:	6923      	ldr	r3, [r4, #16]
 80142ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80142ce:	68a3      	ldr	r3, [r4, #8]
 80142d0:	4607      	mov	r7, r0
 80142d2:	4691      	mov	r9, r2
 80142d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80142d8:	f108 0601 	add.w	r6, r8, #1
 80142dc:	42b3      	cmp	r3, r6
 80142de:	db0b      	blt.n	80142f8 <__lshift+0x38>
 80142e0:	4638      	mov	r0, r7
 80142e2:	f7ff fd93 	bl	8013e0c <_Balloc>
 80142e6:	4605      	mov	r5, r0
 80142e8:	b948      	cbnz	r0, 80142fe <__lshift+0x3e>
 80142ea:	4602      	mov	r2, r0
 80142ec:	4b28      	ldr	r3, [pc, #160]	; (8014390 <__lshift+0xd0>)
 80142ee:	4829      	ldr	r0, [pc, #164]	; (8014394 <__lshift+0xd4>)
 80142f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80142f4:	f001 fe9c 	bl	8016030 <__assert_func>
 80142f8:	3101      	adds	r1, #1
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	e7ee      	b.n	80142dc <__lshift+0x1c>
 80142fe:	2300      	movs	r3, #0
 8014300:	f100 0114 	add.w	r1, r0, #20
 8014304:	f100 0210 	add.w	r2, r0, #16
 8014308:	4618      	mov	r0, r3
 801430a:	4553      	cmp	r3, sl
 801430c:	db33      	blt.n	8014376 <__lshift+0xb6>
 801430e:	6920      	ldr	r0, [r4, #16]
 8014310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014314:	f104 0314 	add.w	r3, r4, #20
 8014318:	f019 091f 	ands.w	r9, r9, #31
 801431c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014324:	d02b      	beq.n	801437e <__lshift+0xbe>
 8014326:	f1c9 0e20 	rsb	lr, r9, #32
 801432a:	468a      	mov	sl, r1
 801432c:	2200      	movs	r2, #0
 801432e:	6818      	ldr	r0, [r3, #0]
 8014330:	fa00 f009 	lsl.w	r0, r0, r9
 8014334:	4310      	orrs	r0, r2
 8014336:	f84a 0b04 	str.w	r0, [sl], #4
 801433a:	f853 2b04 	ldr.w	r2, [r3], #4
 801433e:	459c      	cmp	ip, r3
 8014340:	fa22 f20e 	lsr.w	r2, r2, lr
 8014344:	d8f3      	bhi.n	801432e <__lshift+0x6e>
 8014346:	ebac 0304 	sub.w	r3, ip, r4
 801434a:	3b15      	subs	r3, #21
 801434c:	f023 0303 	bic.w	r3, r3, #3
 8014350:	3304      	adds	r3, #4
 8014352:	f104 0015 	add.w	r0, r4, #21
 8014356:	4584      	cmp	ip, r0
 8014358:	bf38      	it	cc
 801435a:	2304      	movcc	r3, #4
 801435c:	50ca      	str	r2, [r1, r3]
 801435e:	b10a      	cbz	r2, 8014364 <__lshift+0xa4>
 8014360:	f108 0602 	add.w	r6, r8, #2
 8014364:	3e01      	subs	r6, #1
 8014366:	4638      	mov	r0, r7
 8014368:	612e      	str	r6, [r5, #16]
 801436a:	4621      	mov	r1, r4
 801436c:	f7ff fd8e 	bl	8013e8c <_Bfree>
 8014370:	4628      	mov	r0, r5
 8014372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014376:	f842 0f04 	str.w	r0, [r2, #4]!
 801437a:	3301      	adds	r3, #1
 801437c:	e7c5      	b.n	801430a <__lshift+0x4a>
 801437e:	3904      	subs	r1, #4
 8014380:	f853 2b04 	ldr.w	r2, [r3], #4
 8014384:	f841 2f04 	str.w	r2, [r1, #4]!
 8014388:	459c      	cmp	ip, r3
 801438a:	d8f9      	bhi.n	8014380 <__lshift+0xc0>
 801438c:	e7ea      	b.n	8014364 <__lshift+0xa4>
 801438e:	bf00      	nop
 8014390:	08018633 	.word	0x08018633
 8014394:	08018644 	.word	0x08018644

08014398 <__mcmp>:
 8014398:	b530      	push	{r4, r5, lr}
 801439a:	6902      	ldr	r2, [r0, #16]
 801439c:	690c      	ldr	r4, [r1, #16]
 801439e:	1b12      	subs	r2, r2, r4
 80143a0:	d10e      	bne.n	80143c0 <__mcmp+0x28>
 80143a2:	f100 0314 	add.w	r3, r0, #20
 80143a6:	3114      	adds	r1, #20
 80143a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80143ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80143b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80143b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80143b8:	42a5      	cmp	r5, r4
 80143ba:	d003      	beq.n	80143c4 <__mcmp+0x2c>
 80143bc:	d305      	bcc.n	80143ca <__mcmp+0x32>
 80143be:	2201      	movs	r2, #1
 80143c0:	4610      	mov	r0, r2
 80143c2:	bd30      	pop	{r4, r5, pc}
 80143c4:	4283      	cmp	r3, r0
 80143c6:	d3f3      	bcc.n	80143b0 <__mcmp+0x18>
 80143c8:	e7fa      	b.n	80143c0 <__mcmp+0x28>
 80143ca:	f04f 32ff 	mov.w	r2, #4294967295
 80143ce:	e7f7      	b.n	80143c0 <__mcmp+0x28>

080143d0 <__mdiff>:
 80143d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d4:	460c      	mov	r4, r1
 80143d6:	4606      	mov	r6, r0
 80143d8:	4611      	mov	r1, r2
 80143da:	4620      	mov	r0, r4
 80143dc:	4690      	mov	r8, r2
 80143de:	f7ff ffdb 	bl	8014398 <__mcmp>
 80143e2:	1e05      	subs	r5, r0, #0
 80143e4:	d110      	bne.n	8014408 <__mdiff+0x38>
 80143e6:	4629      	mov	r1, r5
 80143e8:	4630      	mov	r0, r6
 80143ea:	f7ff fd0f 	bl	8013e0c <_Balloc>
 80143ee:	b930      	cbnz	r0, 80143fe <__mdiff+0x2e>
 80143f0:	4b3a      	ldr	r3, [pc, #232]	; (80144dc <__mdiff+0x10c>)
 80143f2:	4602      	mov	r2, r0
 80143f4:	f240 2137 	movw	r1, #567	; 0x237
 80143f8:	4839      	ldr	r0, [pc, #228]	; (80144e0 <__mdiff+0x110>)
 80143fa:	f001 fe19 	bl	8016030 <__assert_func>
 80143fe:	2301      	movs	r3, #1
 8014400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014408:	bfa4      	itt	ge
 801440a:	4643      	movge	r3, r8
 801440c:	46a0      	movge	r8, r4
 801440e:	4630      	mov	r0, r6
 8014410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014414:	bfa6      	itte	ge
 8014416:	461c      	movge	r4, r3
 8014418:	2500      	movge	r5, #0
 801441a:	2501      	movlt	r5, #1
 801441c:	f7ff fcf6 	bl	8013e0c <_Balloc>
 8014420:	b920      	cbnz	r0, 801442c <__mdiff+0x5c>
 8014422:	4b2e      	ldr	r3, [pc, #184]	; (80144dc <__mdiff+0x10c>)
 8014424:	4602      	mov	r2, r0
 8014426:	f240 2145 	movw	r1, #581	; 0x245
 801442a:	e7e5      	b.n	80143f8 <__mdiff+0x28>
 801442c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014430:	6926      	ldr	r6, [r4, #16]
 8014432:	60c5      	str	r5, [r0, #12]
 8014434:	f104 0914 	add.w	r9, r4, #20
 8014438:	f108 0514 	add.w	r5, r8, #20
 801443c:	f100 0e14 	add.w	lr, r0, #20
 8014440:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014444:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014448:	f108 0210 	add.w	r2, r8, #16
 801444c:	46f2      	mov	sl, lr
 801444e:	2100      	movs	r1, #0
 8014450:	f859 3b04 	ldr.w	r3, [r9], #4
 8014454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014458:	fa11 f88b 	uxtah	r8, r1, fp
 801445c:	b299      	uxth	r1, r3
 801445e:	0c1b      	lsrs	r3, r3, #16
 8014460:	eba8 0801 	sub.w	r8, r8, r1
 8014464:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014468:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801446c:	fa1f f888 	uxth.w	r8, r8
 8014470:	1419      	asrs	r1, r3, #16
 8014472:	454e      	cmp	r6, r9
 8014474:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014478:	f84a 3b04 	str.w	r3, [sl], #4
 801447c:	d8e8      	bhi.n	8014450 <__mdiff+0x80>
 801447e:	1b33      	subs	r3, r6, r4
 8014480:	3b15      	subs	r3, #21
 8014482:	f023 0303 	bic.w	r3, r3, #3
 8014486:	3304      	adds	r3, #4
 8014488:	3415      	adds	r4, #21
 801448a:	42a6      	cmp	r6, r4
 801448c:	bf38      	it	cc
 801448e:	2304      	movcc	r3, #4
 8014490:	441d      	add	r5, r3
 8014492:	4473      	add	r3, lr
 8014494:	469e      	mov	lr, r3
 8014496:	462e      	mov	r6, r5
 8014498:	4566      	cmp	r6, ip
 801449a:	d30e      	bcc.n	80144ba <__mdiff+0xea>
 801449c:	f10c 0203 	add.w	r2, ip, #3
 80144a0:	1b52      	subs	r2, r2, r5
 80144a2:	f022 0203 	bic.w	r2, r2, #3
 80144a6:	3d03      	subs	r5, #3
 80144a8:	45ac      	cmp	ip, r5
 80144aa:	bf38      	it	cc
 80144ac:	2200      	movcc	r2, #0
 80144ae:	4413      	add	r3, r2
 80144b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80144b4:	b17a      	cbz	r2, 80144d6 <__mdiff+0x106>
 80144b6:	6107      	str	r7, [r0, #16]
 80144b8:	e7a4      	b.n	8014404 <__mdiff+0x34>
 80144ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80144be:	fa11 f288 	uxtah	r2, r1, r8
 80144c2:	1414      	asrs	r4, r2, #16
 80144c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80144c8:	b292      	uxth	r2, r2
 80144ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80144ce:	f84e 2b04 	str.w	r2, [lr], #4
 80144d2:	1421      	asrs	r1, r4, #16
 80144d4:	e7e0      	b.n	8014498 <__mdiff+0xc8>
 80144d6:	3f01      	subs	r7, #1
 80144d8:	e7ea      	b.n	80144b0 <__mdiff+0xe0>
 80144da:	bf00      	nop
 80144dc:	08018633 	.word	0x08018633
 80144e0:	08018644 	.word	0x08018644

080144e4 <__ulp>:
 80144e4:	b082      	sub	sp, #8
 80144e6:	ed8d 0b00 	vstr	d0, [sp]
 80144ea:	9a01      	ldr	r2, [sp, #4]
 80144ec:	4b0f      	ldr	r3, [pc, #60]	; (801452c <__ulp+0x48>)
 80144ee:	4013      	ands	r3, r2
 80144f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	dc08      	bgt.n	801450a <__ulp+0x26>
 80144f8:	425b      	negs	r3, r3
 80144fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80144fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014502:	da04      	bge.n	801450e <__ulp+0x2a>
 8014504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014508:	4113      	asrs	r3, r2
 801450a:	2200      	movs	r2, #0
 801450c:	e008      	b.n	8014520 <__ulp+0x3c>
 801450e:	f1a2 0314 	sub.w	r3, r2, #20
 8014512:	2b1e      	cmp	r3, #30
 8014514:	bfda      	itte	le
 8014516:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801451a:	40da      	lsrle	r2, r3
 801451c:	2201      	movgt	r2, #1
 801451e:	2300      	movs	r3, #0
 8014520:	4619      	mov	r1, r3
 8014522:	4610      	mov	r0, r2
 8014524:	ec41 0b10 	vmov	d0, r0, r1
 8014528:	b002      	add	sp, #8
 801452a:	4770      	bx	lr
 801452c:	7ff00000 	.word	0x7ff00000

08014530 <__b2d>:
 8014530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014534:	6906      	ldr	r6, [r0, #16]
 8014536:	f100 0814 	add.w	r8, r0, #20
 801453a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801453e:	1f37      	subs	r7, r6, #4
 8014540:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014544:	4610      	mov	r0, r2
 8014546:	f7ff fd53 	bl	8013ff0 <__hi0bits>
 801454a:	f1c0 0320 	rsb	r3, r0, #32
 801454e:	280a      	cmp	r0, #10
 8014550:	600b      	str	r3, [r1, #0]
 8014552:	491b      	ldr	r1, [pc, #108]	; (80145c0 <__b2d+0x90>)
 8014554:	dc15      	bgt.n	8014582 <__b2d+0x52>
 8014556:	f1c0 0c0b 	rsb	ip, r0, #11
 801455a:	fa22 f30c 	lsr.w	r3, r2, ip
 801455e:	45b8      	cmp	r8, r7
 8014560:	ea43 0501 	orr.w	r5, r3, r1
 8014564:	bf34      	ite	cc
 8014566:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801456a:	2300      	movcs	r3, #0
 801456c:	3015      	adds	r0, #21
 801456e:	fa02 f000 	lsl.w	r0, r2, r0
 8014572:	fa23 f30c 	lsr.w	r3, r3, ip
 8014576:	4303      	orrs	r3, r0
 8014578:	461c      	mov	r4, r3
 801457a:	ec45 4b10 	vmov	d0, r4, r5
 801457e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014582:	45b8      	cmp	r8, r7
 8014584:	bf3a      	itte	cc
 8014586:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801458a:	f1a6 0708 	subcc.w	r7, r6, #8
 801458e:	2300      	movcs	r3, #0
 8014590:	380b      	subs	r0, #11
 8014592:	d012      	beq.n	80145ba <__b2d+0x8a>
 8014594:	f1c0 0120 	rsb	r1, r0, #32
 8014598:	fa23 f401 	lsr.w	r4, r3, r1
 801459c:	4082      	lsls	r2, r0
 801459e:	4322      	orrs	r2, r4
 80145a0:	4547      	cmp	r7, r8
 80145a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80145a6:	bf8c      	ite	hi
 80145a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80145ac:	2200      	movls	r2, #0
 80145ae:	4083      	lsls	r3, r0
 80145b0:	40ca      	lsrs	r2, r1
 80145b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80145b6:	4313      	orrs	r3, r2
 80145b8:	e7de      	b.n	8014578 <__b2d+0x48>
 80145ba:	ea42 0501 	orr.w	r5, r2, r1
 80145be:	e7db      	b.n	8014578 <__b2d+0x48>
 80145c0:	3ff00000 	.word	0x3ff00000

080145c4 <__d2b>:
 80145c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145c8:	460f      	mov	r7, r1
 80145ca:	2101      	movs	r1, #1
 80145cc:	ec59 8b10 	vmov	r8, r9, d0
 80145d0:	4616      	mov	r6, r2
 80145d2:	f7ff fc1b 	bl	8013e0c <_Balloc>
 80145d6:	4604      	mov	r4, r0
 80145d8:	b930      	cbnz	r0, 80145e8 <__d2b+0x24>
 80145da:	4602      	mov	r2, r0
 80145dc:	4b24      	ldr	r3, [pc, #144]	; (8014670 <__d2b+0xac>)
 80145de:	4825      	ldr	r0, [pc, #148]	; (8014674 <__d2b+0xb0>)
 80145e0:	f240 310f 	movw	r1, #783	; 0x30f
 80145e4:	f001 fd24 	bl	8016030 <__assert_func>
 80145e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80145ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80145f0:	bb2d      	cbnz	r5, 801463e <__d2b+0x7a>
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	f1b8 0300 	subs.w	r3, r8, #0
 80145f8:	d026      	beq.n	8014648 <__d2b+0x84>
 80145fa:	4668      	mov	r0, sp
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	f7ff fd17 	bl	8014030 <__lo0bits>
 8014602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014606:	b1e8      	cbz	r0, 8014644 <__d2b+0x80>
 8014608:	f1c0 0320 	rsb	r3, r0, #32
 801460c:	fa02 f303 	lsl.w	r3, r2, r3
 8014610:	430b      	orrs	r3, r1
 8014612:	40c2      	lsrs	r2, r0
 8014614:	6163      	str	r3, [r4, #20]
 8014616:	9201      	str	r2, [sp, #4]
 8014618:	9b01      	ldr	r3, [sp, #4]
 801461a:	61a3      	str	r3, [r4, #24]
 801461c:	2b00      	cmp	r3, #0
 801461e:	bf14      	ite	ne
 8014620:	2202      	movne	r2, #2
 8014622:	2201      	moveq	r2, #1
 8014624:	6122      	str	r2, [r4, #16]
 8014626:	b1bd      	cbz	r5, 8014658 <__d2b+0x94>
 8014628:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801462c:	4405      	add	r5, r0
 801462e:	603d      	str	r5, [r7, #0]
 8014630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014634:	6030      	str	r0, [r6, #0]
 8014636:	4620      	mov	r0, r4
 8014638:	b003      	add	sp, #12
 801463a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801463e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014642:	e7d6      	b.n	80145f2 <__d2b+0x2e>
 8014644:	6161      	str	r1, [r4, #20]
 8014646:	e7e7      	b.n	8014618 <__d2b+0x54>
 8014648:	a801      	add	r0, sp, #4
 801464a:	f7ff fcf1 	bl	8014030 <__lo0bits>
 801464e:	9b01      	ldr	r3, [sp, #4]
 8014650:	6163      	str	r3, [r4, #20]
 8014652:	3020      	adds	r0, #32
 8014654:	2201      	movs	r2, #1
 8014656:	e7e5      	b.n	8014624 <__d2b+0x60>
 8014658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801465c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014660:	6038      	str	r0, [r7, #0]
 8014662:	6918      	ldr	r0, [r3, #16]
 8014664:	f7ff fcc4 	bl	8013ff0 <__hi0bits>
 8014668:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801466c:	e7e2      	b.n	8014634 <__d2b+0x70>
 801466e:	bf00      	nop
 8014670:	08018633 	.word	0x08018633
 8014674:	08018644 	.word	0x08018644

08014678 <__ratio>:
 8014678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	4688      	mov	r8, r1
 801467e:	4669      	mov	r1, sp
 8014680:	4681      	mov	r9, r0
 8014682:	f7ff ff55 	bl	8014530 <__b2d>
 8014686:	a901      	add	r1, sp, #4
 8014688:	4640      	mov	r0, r8
 801468a:	ec55 4b10 	vmov	r4, r5, d0
 801468e:	f7ff ff4f 	bl	8014530 <__b2d>
 8014692:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014696:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801469a:	eba3 0c02 	sub.w	ip, r3, r2
 801469e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80146a2:	1a9b      	subs	r3, r3, r2
 80146a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80146a8:	ec51 0b10 	vmov	r0, r1, d0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	bfd6      	itet	le
 80146b0:	460a      	movle	r2, r1
 80146b2:	462a      	movgt	r2, r5
 80146b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80146b8:	468b      	mov	fp, r1
 80146ba:	462f      	mov	r7, r5
 80146bc:	bfd4      	ite	le
 80146be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80146c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80146c6:	4620      	mov	r0, r4
 80146c8:	ee10 2a10 	vmov	r2, s0
 80146cc:	465b      	mov	r3, fp
 80146ce:	4639      	mov	r1, r7
 80146d0:	f7ec f8e4 	bl	800089c <__aeabi_ddiv>
 80146d4:	ec41 0b10 	vmov	d0, r0, r1
 80146d8:	b003      	add	sp, #12
 80146da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146de <__copybits>:
 80146de:	3901      	subs	r1, #1
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	1149      	asrs	r1, r1, #5
 80146e4:	6914      	ldr	r4, [r2, #16]
 80146e6:	3101      	adds	r1, #1
 80146e8:	f102 0314 	add.w	r3, r2, #20
 80146ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80146f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80146f4:	1f05      	subs	r5, r0, #4
 80146f6:	42a3      	cmp	r3, r4
 80146f8:	d30c      	bcc.n	8014714 <__copybits+0x36>
 80146fa:	1aa3      	subs	r3, r4, r2
 80146fc:	3b11      	subs	r3, #17
 80146fe:	f023 0303 	bic.w	r3, r3, #3
 8014702:	3211      	adds	r2, #17
 8014704:	42a2      	cmp	r2, r4
 8014706:	bf88      	it	hi
 8014708:	2300      	movhi	r3, #0
 801470a:	4418      	add	r0, r3
 801470c:	2300      	movs	r3, #0
 801470e:	4288      	cmp	r0, r1
 8014710:	d305      	bcc.n	801471e <__copybits+0x40>
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	f853 6b04 	ldr.w	r6, [r3], #4
 8014718:	f845 6f04 	str.w	r6, [r5, #4]!
 801471c:	e7eb      	b.n	80146f6 <__copybits+0x18>
 801471e:	f840 3b04 	str.w	r3, [r0], #4
 8014722:	e7f4      	b.n	801470e <__copybits+0x30>

08014724 <__any_on>:
 8014724:	f100 0214 	add.w	r2, r0, #20
 8014728:	6900      	ldr	r0, [r0, #16]
 801472a:	114b      	asrs	r3, r1, #5
 801472c:	4298      	cmp	r0, r3
 801472e:	b510      	push	{r4, lr}
 8014730:	db11      	blt.n	8014756 <__any_on+0x32>
 8014732:	dd0a      	ble.n	801474a <__any_on+0x26>
 8014734:	f011 011f 	ands.w	r1, r1, #31
 8014738:	d007      	beq.n	801474a <__any_on+0x26>
 801473a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801473e:	fa24 f001 	lsr.w	r0, r4, r1
 8014742:	fa00 f101 	lsl.w	r1, r0, r1
 8014746:	428c      	cmp	r4, r1
 8014748:	d10b      	bne.n	8014762 <__any_on+0x3e>
 801474a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801474e:	4293      	cmp	r3, r2
 8014750:	d803      	bhi.n	801475a <__any_on+0x36>
 8014752:	2000      	movs	r0, #0
 8014754:	bd10      	pop	{r4, pc}
 8014756:	4603      	mov	r3, r0
 8014758:	e7f7      	b.n	801474a <__any_on+0x26>
 801475a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801475e:	2900      	cmp	r1, #0
 8014760:	d0f5      	beq.n	801474e <__any_on+0x2a>
 8014762:	2001      	movs	r0, #1
 8014764:	e7f6      	b.n	8014754 <__any_on+0x30>

08014766 <sulp>:
 8014766:	b570      	push	{r4, r5, r6, lr}
 8014768:	4604      	mov	r4, r0
 801476a:	460d      	mov	r5, r1
 801476c:	ec45 4b10 	vmov	d0, r4, r5
 8014770:	4616      	mov	r6, r2
 8014772:	f7ff feb7 	bl	80144e4 <__ulp>
 8014776:	ec51 0b10 	vmov	r0, r1, d0
 801477a:	b17e      	cbz	r6, 801479c <sulp+0x36>
 801477c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014780:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014784:	2b00      	cmp	r3, #0
 8014786:	dd09      	ble.n	801479c <sulp+0x36>
 8014788:	051b      	lsls	r3, r3, #20
 801478a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801478e:	2400      	movs	r4, #0
 8014790:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014794:	4622      	mov	r2, r4
 8014796:	462b      	mov	r3, r5
 8014798:	f7eb ff56 	bl	8000648 <__aeabi_dmul>
 801479c:	bd70      	pop	{r4, r5, r6, pc}
	...

080147a0 <_strtod_l>:
 80147a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a4:	ed2d 8b02 	vpush	{d8}
 80147a8:	b09b      	sub	sp, #108	; 0x6c
 80147aa:	4604      	mov	r4, r0
 80147ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80147ae:	2200      	movs	r2, #0
 80147b0:	9216      	str	r2, [sp, #88]	; 0x58
 80147b2:	460d      	mov	r5, r1
 80147b4:	f04f 0800 	mov.w	r8, #0
 80147b8:	f04f 0900 	mov.w	r9, #0
 80147bc:	460a      	mov	r2, r1
 80147be:	9215      	str	r2, [sp, #84]	; 0x54
 80147c0:	7811      	ldrb	r1, [r2, #0]
 80147c2:	292b      	cmp	r1, #43	; 0x2b
 80147c4:	d04c      	beq.n	8014860 <_strtod_l+0xc0>
 80147c6:	d83a      	bhi.n	801483e <_strtod_l+0x9e>
 80147c8:	290d      	cmp	r1, #13
 80147ca:	d834      	bhi.n	8014836 <_strtod_l+0x96>
 80147cc:	2908      	cmp	r1, #8
 80147ce:	d834      	bhi.n	801483a <_strtod_l+0x9a>
 80147d0:	2900      	cmp	r1, #0
 80147d2:	d03d      	beq.n	8014850 <_strtod_l+0xb0>
 80147d4:	2200      	movs	r2, #0
 80147d6:	920a      	str	r2, [sp, #40]	; 0x28
 80147d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80147da:	7832      	ldrb	r2, [r6, #0]
 80147dc:	2a30      	cmp	r2, #48	; 0x30
 80147de:	f040 80b4 	bne.w	801494a <_strtod_l+0x1aa>
 80147e2:	7872      	ldrb	r2, [r6, #1]
 80147e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80147e8:	2a58      	cmp	r2, #88	; 0x58
 80147ea:	d170      	bne.n	80148ce <_strtod_l+0x12e>
 80147ec:	9302      	str	r3, [sp, #8]
 80147ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147f0:	9301      	str	r3, [sp, #4]
 80147f2:	ab16      	add	r3, sp, #88	; 0x58
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	4a8e      	ldr	r2, [pc, #568]	; (8014a30 <_strtod_l+0x290>)
 80147f8:	ab17      	add	r3, sp, #92	; 0x5c
 80147fa:	a915      	add	r1, sp, #84	; 0x54
 80147fc:	4620      	mov	r0, r4
 80147fe:	f001 fcb3 	bl	8016168 <__gethex>
 8014802:	f010 070f 	ands.w	r7, r0, #15
 8014806:	4605      	mov	r5, r0
 8014808:	d005      	beq.n	8014816 <_strtod_l+0x76>
 801480a:	2f06      	cmp	r7, #6
 801480c:	d12a      	bne.n	8014864 <_strtod_l+0xc4>
 801480e:	3601      	adds	r6, #1
 8014810:	2300      	movs	r3, #0
 8014812:	9615      	str	r6, [sp, #84]	; 0x54
 8014814:	930a      	str	r3, [sp, #40]	; 0x28
 8014816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014818:	2b00      	cmp	r3, #0
 801481a:	f040 857f 	bne.w	801531c <_strtod_l+0xb7c>
 801481e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014820:	b1db      	cbz	r3, 801485a <_strtod_l+0xba>
 8014822:	4642      	mov	r2, r8
 8014824:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014828:	ec43 2b10 	vmov	d0, r2, r3
 801482c:	b01b      	add	sp, #108	; 0x6c
 801482e:	ecbd 8b02 	vpop	{d8}
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014836:	2920      	cmp	r1, #32
 8014838:	d1cc      	bne.n	80147d4 <_strtod_l+0x34>
 801483a:	3201      	adds	r2, #1
 801483c:	e7bf      	b.n	80147be <_strtod_l+0x1e>
 801483e:	292d      	cmp	r1, #45	; 0x2d
 8014840:	d1c8      	bne.n	80147d4 <_strtod_l+0x34>
 8014842:	2101      	movs	r1, #1
 8014844:	910a      	str	r1, [sp, #40]	; 0x28
 8014846:	1c51      	adds	r1, r2, #1
 8014848:	9115      	str	r1, [sp, #84]	; 0x54
 801484a:	7852      	ldrb	r2, [r2, #1]
 801484c:	2a00      	cmp	r2, #0
 801484e:	d1c3      	bne.n	80147d8 <_strtod_l+0x38>
 8014850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014852:	9515      	str	r5, [sp, #84]	; 0x54
 8014854:	2b00      	cmp	r3, #0
 8014856:	f040 855f 	bne.w	8015318 <_strtod_l+0xb78>
 801485a:	4642      	mov	r2, r8
 801485c:	464b      	mov	r3, r9
 801485e:	e7e3      	b.n	8014828 <_strtod_l+0x88>
 8014860:	2100      	movs	r1, #0
 8014862:	e7ef      	b.n	8014844 <_strtod_l+0xa4>
 8014864:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014866:	b13a      	cbz	r2, 8014878 <_strtod_l+0xd8>
 8014868:	2135      	movs	r1, #53	; 0x35
 801486a:	a818      	add	r0, sp, #96	; 0x60
 801486c:	f7ff ff37 	bl	80146de <__copybits>
 8014870:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014872:	4620      	mov	r0, r4
 8014874:	f7ff fb0a 	bl	8013e8c <_Bfree>
 8014878:	3f01      	subs	r7, #1
 801487a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801487c:	2f04      	cmp	r7, #4
 801487e:	d806      	bhi.n	801488e <_strtod_l+0xee>
 8014880:	e8df f007 	tbb	[pc, r7]
 8014884:	201d0314 	.word	0x201d0314
 8014888:	14          	.byte	0x14
 8014889:	00          	.byte	0x00
 801488a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801488e:	05e9      	lsls	r1, r5, #23
 8014890:	bf48      	it	mi
 8014892:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801489a:	0d1b      	lsrs	r3, r3, #20
 801489c:	051b      	lsls	r3, r3, #20
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d1b9      	bne.n	8014816 <_strtod_l+0x76>
 80148a2:	f7fe faf7 	bl	8012e94 <__errno>
 80148a6:	2322      	movs	r3, #34	; 0x22
 80148a8:	6003      	str	r3, [r0, #0]
 80148aa:	e7b4      	b.n	8014816 <_strtod_l+0x76>
 80148ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80148b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80148b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80148b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80148bc:	e7e7      	b.n	801488e <_strtod_l+0xee>
 80148be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014a38 <_strtod_l+0x298>
 80148c2:	e7e4      	b.n	801488e <_strtod_l+0xee>
 80148c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80148c8:	f04f 38ff 	mov.w	r8, #4294967295
 80148cc:	e7df      	b.n	801488e <_strtod_l+0xee>
 80148ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148d0:	1c5a      	adds	r2, r3, #1
 80148d2:	9215      	str	r2, [sp, #84]	; 0x54
 80148d4:	785b      	ldrb	r3, [r3, #1]
 80148d6:	2b30      	cmp	r3, #48	; 0x30
 80148d8:	d0f9      	beq.n	80148ce <_strtod_l+0x12e>
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d09b      	beq.n	8014816 <_strtod_l+0x76>
 80148de:	2301      	movs	r3, #1
 80148e0:	f04f 0a00 	mov.w	sl, #0
 80148e4:	9304      	str	r3, [sp, #16]
 80148e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80148ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80148ee:	46d3      	mov	fp, sl
 80148f0:	220a      	movs	r2, #10
 80148f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80148f4:	7806      	ldrb	r6, [r0, #0]
 80148f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80148fa:	b2d9      	uxtb	r1, r3
 80148fc:	2909      	cmp	r1, #9
 80148fe:	d926      	bls.n	801494e <_strtod_l+0x1ae>
 8014900:	494c      	ldr	r1, [pc, #304]	; (8014a34 <_strtod_l+0x294>)
 8014902:	2201      	movs	r2, #1
 8014904:	f7fe fa13 	bl	8012d2e <strncmp>
 8014908:	2800      	cmp	r0, #0
 801490a:	d030      	beq.n	801496e <_strtod_l+0x1ce>
 801490c:	2000      	movs	r0, #0
 801490e:	4632      	mov	r2, r6
 8014910:	9005      	str	r0, [sp, #20]
 8014912:	465e      	mov	r6, fp
 8014914:	4603      	mov	r3, r0
 8014916:	2a65      	cmp	r2, #101	; 0x65
 8014918:	d001      	beq.n	801491e <_strtod_l+0x17e>
 801491a:	2a45      	cmp	r2, #69	; 0x45
 801491c:	d113      	bne.n	8014946 <_strtod_l+0x1a6>
 801491e:	b91e      	cbnz	r6, 8014928 <_strtod_l+0x188>
 8014920:	9a04      	ldr	r2, [sp, #16]
 8014922:	4302      	orrs	r2, r0
 8014924:	d094      	beq.n	8014850 <_strtod_l+0xb0>
 8014926:	2600      	movs	r6, #0
 8014928:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801492a:	1c6a      	adds	r2, r5, #1
 801492c:	9215      	str	r2, [sp, #84]	; 0x54
 801492e:	786a      	ldrb	r2, [r5, #1]
 8014930:	2a2b      	cmp	r2, #43	; 0x2b
 8014932:	d074      	beq.n	8014a1e <_strtod_l+0x27e>
 8014934:	2a2d      	cmp	r2, #45	; 0x2d
 8014936:	d078      	beq.n	8014a2a <_strtod_l+0x28a>
 8014938:	f04f 0c00 	mov.w	ip, #0
 801493c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014940:	2909      	cmp	r1, #9
 8014942:	d97f      	bls.n	8014a44 <_strtod_l+0x2a4>
 8014944:	9515      	str	r5, [sp, #84]	; 0x54
 8014946:	2700      	movs	r7, #0
 8014948:	e09e      	b.n	8014a88 <_strtod_l+0x2e8>
 801494a:	2300      	movs	r3, #0
 801494c:	e7c8      	b.n	80148e0 <_strtod_l+0x140>
 801494e:	f1bb 0f08 	cmp.w	fp, #8
 8014952:	bfd8      	it	le
 8014954:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014956:	f100 0001 	add.w	r0, r0, #1
 801495a:	bfda      	itte	le
 801495c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014960:	9309      	strle	r3, [sp, #36]	; 0x24
 8014962:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014966:	f10b 0b01 	add.w	fp, fp, #1
 801496a:	9015      	str	r0, [sp, #84]	; 0x54
 801496c:	e7c1      	b.n	80148f2 <_strtod_l+0x152>
 801496e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014970:	1c5a      	adds	r2, r3, #1
 8014972:	9215      	str	r2, [sp, #84]	; 0x54
 8014974:	785a      	ldrb	r2, [r3, #1]
 8014976:	f1bb 0f00 	cmp.w	fp, #0
 801497a:	d037      	beq.n	80149ec <_strtod_l+0x24c>
 801497c:	9005      	str	r0, [sp, #20]
 801497e:	465e      	mov	r6, fp
 8014980:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014984:	2b09      	cmp	r3, #9
 8014986:	d912      	bls.n	80149ae <_strtod_l+0x20e>
 8014988:	2301      	movs	r3, #1
 801498a:	e7c4      	b.n	8014916 <_strtod_l+0x176>
 801498c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801498e:	1c5a      	adds	r2, r3, #1
 8014990:	9215      	str	r2, [sp, #84]	; 0x54
 8014992:	785a      	ldrb	r2, [r3, #1]
 8014994:	3001      	adds	r0, #1
 8014996:	2a30      	cmp	r2, #48	; 0x30
 8014998:	d0f8      	beq.n	801498c <_strtod_l+0x1ec>
 801499a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801499e:	2b08      	cmp	r3, #8
 80149a0:	f200 84c1 	bhi.w	8015326 <_strtod_l+0xb86>
 80149a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149a6:	9005      	str	r0, [sp, #20]
 80149a8:	2000      	movs	r0, #0
 80149aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80149ac:	4606      	mov	r6, r0
 80149ae:	3a30      	subs	r2, #48	; 0x30
 80149b0:	f100 0301 	add.w	r3, r0, #1
 80149b4:	d014      	beq.n	80149e0 <_strtod_l+0x240>
 80149b6:	9905      	ldr	r1, [sp, #20]
 80149b8:	4419      	add	r1, r3
 80149ba:	9105      	str	r1, [sp, #20]
 80149bc:	4633      	mov	r3, r6
 80149be:	eb00 0c06 	add.w	ip, r0, r6
 80149c2:	210a      	movs	r1, #10
 80149c4:	4563      	cmp	r3, ip
 80149c6:	d113      	bne.n	80149f0 <_strtod_l+0x250>
 80149c8:	1833      	adds	r3, r6, r0
 80149ca:	2b08      	cmp	r3, #8
 80149cc:	f106 0601 	add.w	r6, r6, #1
 80149d0:	4406      	add	r6, r0
 80149d2:	dc1a      	bgt.n	8014a0a <_strtod_l+0x26a>
 80149d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149d6:	230a      	movs	r3, #10
 80149d8:	fb03 2301 	mla	r3, r3, r1, r2
 80149dc:	9309      	str	r3, [sp, #36]	; 0x24
 80149de:	2300      	movs	r3, #0
 80149e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149e2:	1c51      	adds	r1, r2, #1
 80149e4:	9115      	str	r1, [sp, #84]	; 0x54
 80149e6:	7852      	ldrb	r2, [r2, #1]
 80149e8:	4618      	mov	r0, r3
 80149ea:	e7c9      	b.n	8014980 <_strtod_l+0x1e0>
 80149ec:	4658      	mov	r0, fp
 80149ee:	e7d2      	b.n	8014996 <_strtod_l+0x1f6>
 80149f0:	2b08      	cmp	r3, #8
 80149f2:	f103 0301 	add.w	r3, r3, #1
 80149f6:	dc03      	bgt.n	8014a00 <_strtod_l+0x260>
 80149f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80149fa:	434f      	muls	r7, r1
 80149fc:	9709      	str	r7, [sp, #36]	; 0x24
 80149fe:	e7e1      	b.n	80149c4 <_strtod_l+0x224>
 8014a00:	2b10      	cmp	r3, #16
 8014a02:	bfd8      	it	le
 8014a04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014a08:	e7dc      	b.n	80149c4 <_strtod_l+0x224>
 8014a0a:	2e10      	cmp	r6, #16
 8014a0c:	bfdc      	itt	le
 8014a0e:	230a      	movle	r3, #10
 8014a10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014a14:	e7e3      	b.n	80149de <_strtod_l+0x23e>
 8014a16:	2300      	movs	r3, #0
 8014a18:	9305      	str	r3, [sp, #20]
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e780      	b.n	8014920 <_strtod_l+0x180>
 8014a1e:	f04f 0c00 	mov.w	ip, #0
 8014a22:	1caa      	adds	r2, r5, #2
 8014a24:	9215      	str	r2, [sp, #84]	; 0x54
 8014a26:	78aa      	ldrb	r2, [r5, #2]
 8014a28:	e788      	b.n	801493c <_strtod_l+0x19c>
 8014a2a:	f04f 0c01 	mov.w	ip, #1
 8014a2e:	e7f8      	b.n	8014a22 <_strtod_l+0x282>
 8014a30:	080187a0 	.word	0x080187a0
 8014a34:	0801879c 	.word	0x0801879c
 8014a38:	7ff00000 	.word	0x7ff00000
 8014a3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a3e:	1c51      	adds	r1, r2, #1
 8014a40:	9115      	str	r1, [sp, #84]	; 0x54
 8014a42:	7852      	ldrb	r2, [r2, #1]
 8014a44:	2a30      	cmp	r2, #48	; 0x30
 8014a46:	d0f9      	beq.n	8014a3c <_strtod_l+0x29c>
 8014a48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014a4c:	2908      	cmp	r1, #8
 8014a4e:	f63f af7a 	bhi.w	8014946 <_strtod_l+0x1a6>
 8014a52:	3a30      	subs	r2, #48	; 0x30
 8014a54:	9208      	str	r2, [sp, #32]
 8014a56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a58:	920c      	str	r2, [sp, #48]	; 0x30
 8014a5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a5c:	1c57      	adds	r7, r2, #1
 8014a5e:	9715      	str	r7, [sp, #84]	; 0x54
 8014a60:	7852      	ldrb	r2, [r2, #1]
 8014a62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014a66:	f1be 0f09 	cmp.w	lr, #9
 8014a6a:	d938      	bls.n	8014ade <_strtod_l+0x33e>
 8014a6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a6e:	1a7f      	subs	r7, r7, r1
 8014a70:	2f08      	cmp	r7, #8
 8014a72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014a76:	dc03      	bgt.n	8014a80 <_strtod_l+0x2e0>
 8014a78:	9908      	ldr	r1, [sp, #32]
 8014a7a:	428f      	cmp	r7, r1
 8014a7c:	bfa8      	it	ge
 8014a7e:	460f      	movge	r7, r1
 8014a80:	f1bc 0f00 	cmp.w	ip, #0
 8014a84:	d000      	beq.n	8014a88 <_strtod_l+0x2e8>
 8014a86:	427f      	negs	r7, r7
 8014a88:	2e00      	cmp	r6, #0
 8014a8a:	d14f      	bne.n	8014b2c <_strtod_l+0x38c>
 8014a8c:	9904      	ldr	r1, [sp, #16]
 8014a8e:	4301      	orrs	r1, r0
 8014a90:	f47f aec1 	bne.w	8014816 <_strtod_l+0x76>
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f47f aedb 	bne.w	8014850 <_strtod_l+0xb0>
 8014a9a:	2a69      	cmp	r2, #105	; 0x69
 8014a9c:	d029      	beq.n	8014af2 <_strtod_l+0x352>
 8014a9e:	dc26      	bgt.n	8014aee <_strtod_l+0x34e>
 8014aa0:	2a49      	cmp	r2, #73	; 0x49
 8014aa2:	d026      	beq.n	8014af2 <_strtod_l+0x352>
 8014aa4:	2a4e      	cmp	r2, #78	; 0x4e
 8014aa6:	f47f aed3 	bne.w	8014850 <_strtod_l+0xb0>
 8014aaa:	499b      	ldr	r1, [pc, #620]	; (8014d18 <_strtod_l+0x578>)
 8014aac:	a815      	add	r0, sp, #84	; 0x54
 8014aae:	f001 fd9b 	bl	80165e8 <__match>
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	f43f aecc 	beq.w	8014850 <_strtod_l+0xb0>
 8014ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2b28      	cmp	r3, #40	; 0x28
 8014abe:	d12f      	bne.n	8014b20 <_strtod_l+0x380>
 8014ac0:	4996      	ldr	r1, [pc, #600]	; (8014d1c <_strtod_l+0x57c>)
 8014ac2:	aa18      	add	r2, sp, #96	; 0x60
 8014ac4:	a815      	add	r0, sp, #84	; 0x54
 8014ac6:	f001 fda3 	bl	8016610 <__hexnan>
 8014aca:	2805      	cmp	r0, #5
 8014acc:	d128      	bne.n	8014b20 <_strtod_l+0x380>
 8014ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014ad0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014ad4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014ad8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014adc:	e69b      	b.n	8014816 <_strtod_l+0x76>
 8014ade:	9f08      	ldr	r7, [sp, #32]
 8014ae0:	210a      	movs	r1, #10
 8014ae2:	fb01 2107 	mla	r1, r1, r7, r2
 8014ae6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014aea:	9208      	str	r2, [sp, #32]
 8014aec:	e7b5      	b.n	8014a5a <_strtod_l+0x2ba>
 8014aee:	2a6e      	cmp	r2, #110	; 0x6e
 8014af0:	e7d9      	b.n	8014aa6 <_strtod_l+0x306>
 8014af2:	498b      	ldr	r1, [pc, #556]	; (8014d20 <_strtod_l+0x580>)
 8014af4:	a815      	add	r0, sp, #84	; 0x54
 8014af6:	f001 fd77 	bl	80165e8 <__match>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	f43f aea8 	beq.w	8014850 <_strtod_l+0xb0>
 8014b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b02:	4988      	ldr	r1, [pc, #544]	; (8014d24 <_strtod_l+0x584>)
 8014b04:	3b01      	subs	r3, #1
 8014b06:	a815      	add	r0, sp, #84	; 0x54
 8014b08:	9315      	str	r3, [sp, #84]	; 0x54
 8014b0a:	f001 fd6d 	bl	80165e8 <__match>
 8014b0e:	b910      	cbnz	r0, 8014b16 <_strtod_l+0x376>
 8014b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b12:	3301      	adds	r3, #1
 8014b14:	9315      	str	r3, [sp, #84]	; 0x54
 8014b16:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014d34 <_strtod_l+0x594>
 8014b1a:	f04f 0800 	mov.w	r8, #0
 8014b1e:	e67a      	b.n	8014816 <_strtod_l+0x76>
 8014b20:	4881      	ldr	r0, [pc, #516]	; (8014d28 <_strtod_l+0x588>)
 8014b22:	f001 fa7d 	bl	8016020 <nan>
 8014b26:	ec59 8b10 	vmov	r8, r9, d0
 8014b2a:	e674      	b.n	8014816 <_strtod_l+0x76>
 8014b2c:	9b05      	ldr	r3, [sp, #20]
 8014b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b30:	1afb      	subs	r3, r7, r3
 8014b32:	f1bb 0f00 	cmp.w	fp, #0
 8014b36:	bf08      	it	eq
 8014b38:	46b3      	moveq	fp, r6
 8014b3a:	2e10      	cmp	r6, #16
 8014b3c:	9308      	str	r3, [sp, #32]
 8014b3e:	4635      	mov	r5, r6
 8014b40:	bfa8      	it	ge
 8014b42:	2510      	movge	r5, #16
 8014b44:	f7eb fd06 	bl	8000554 <__aeabi_ui2d>
 8014b48:	2e09      	cmp	r6, #9
 8014b4a:	4680      	mov	r8, r0
 8014b4c:	4689      	mov	r9, r1
 8014b4e:	dd13      	ble.n	8014b78 <_strtod_l+0x3d8>
 8014b50:	4b76      	ldr	r3, [pc, #472]	; (8014d2c <_strtod_l+0x58c>)
 8014b52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014b56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014b5a:	f7eb fd75 	bl	8000648 <__aeabi_dmul>
 8014b5e:	4680      	mov	r8, r0
 8014b60:	4650      	mov	r0, sl
 8014b62:	4689      	mov	r9, r1
 8014b64:	f7eb fcf6 	bl	8000554 <__aeabi_ui2d>
 8014b68:	4602      	mov	r2, r0
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	4640      	mov	r0, r8
 8014b6e:	4649      	mov	r1, r9
 8014b70:	f7eb fbb4 	bl	80002dc <__adddf3>
 8014b74:	4680      	mov	r8, r0
 8014b76:	4689      	mov	r9, r1
 8014b78:	2e0f      	cmp	r6, #15
 8014b7a:	dc38      	bgt.n	8014bee <_strtod_l+0x44e>
 8014b7c:	9b08      	ldr	r3, [sp, #32]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f43f ae49 	beq.w	8014816 <_strtod_l+0x76>
 8014b84:	dd24      	ble.n	8014bd0 <_strtod_l+0x430>
 8014b86:	2b16      	cmp	r3, #22
 8014b88:	dc0b      	bgt.n	8014ba2 <_strtod_l+0x402>
 8014b8a:	4968      	ldr	r1, [pc, #416]	; (8014d2c <_strtod_l+0x58c>)
 8014b8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b94:	4642      	mov	r2, r8
 8014b96:	464b      	mov	r3, r9
 8014b98:	f7eb fd56 	bl	8000648 <__aeabi_dmul>
 8014b9c:	4680      	mov	r8, r0
 8014b9e:	4689      	mov	r9, r1
 8014ba0:	e639      	b.n	8014816 <_strtod_l+0x76>
 8014ba2:	9a08      	ldr	r2, [sp, #32]
 8014ba4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	db20      	blt.n	8014bee <_strtod_l+0x44e>
 8014bac:	4c5f      	ldr	r4, [pc, #380]	; (8014d2c <_strtod_l+0x58c>)
 8014bae:	f1c6 060f 	rsb	r6, r6, #15
 8014bb2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bbe:	f7eb fd43 	bl	8000648 <__aeabi_dmul>
 8014bc2:	9b08      	ldr	r3, [sp, #32]
 8014bc4:	1b9e      	subs	r6, r3, r6
 8014bc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014bca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014bce:	e7e3      	b.n	8014b98 <_strtod_l+0x3f8>
 8014bd0:	9b08      	ldr	r3, [sp, #32]
 8014bd2:	3316      	adds	r3, #22
 8014bd4:	db0b      	blt.n	8014bee <_strtod_l+0x44e>
 8014bd6:	9b05      	ldr	r3, [sp, #20]
 8014bd8:	1bdf      	subs	r7, r3, r7
 8014bda:	4b54      	ldr	r3, [pc, #336]	; (8014d2c <_strtod_l+0x58c>)
 8014bdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014be4:	4640      	mov	r0, r8
 8014be6:	4649      	mov	r1, r9
 8014be8:	f7eb fe58 	bl	800089c <__aeabi_ddiv>
 8014bec:	e7d6      	b.n	8014b9c <_strtod_l+0x3fc>
 8014bee:	9b08      	ldr	r3, [sp, #32]
 8014bf0:	1b75      	subs	r5, r6, r5
 8014bf2:	441d      	add	r5, r3
 8014bf4:	2d00      	cmp	r5, #0
 8014bf6:	dd70      	ble.n	8014cda <_strtod_l+0x53a>
 8014bf8:	f015 030f 	ands.w	r3, r5, #15
 8014bfc:	d00a      	beq.n	8014c14 <_strtod_l+0x474>
 8014bfe:	494b      	ldr	r1, [pc, #300]	; (8014d2c <_strtod_l+0x58c>)
 8014c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014c04:	4642      	mov	r2, r8
 8014c06:	464b      	mov	r3, r9
 8014c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c0c:	f7eb fd1c 	bl	8000648 <__aeabi_dmul>
 8014c10:	4680      	mov	r8, r0
 8014c12:	4689      	mov	r9, r1
 8014c14:	f035 050f 	bics.w	r5, r5, #15
 8014c18:	d04d      	beq.n	8014cb6 <_strtod_l+0x516>
 8014c1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014c1e:	dd22      	ble.n	8014c66 <_strtod_l+0x4c6>
 8014c20:	2500      	movs	r5, #0
 8014c22:	46ab      	mov	fp, r5
 8014c24:	9509      	str	r5, [sp, #36]	; 0x24
 8014c26:	9505      	str	r5, [sp, #20]
 8014c28:	2322      	movs	r3, #34	; 0x22
 8014c2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014d34 <_strtod_l+0x594>
 8014c2e:	6023      	str	r3, [r4, #0]
 8014c30:	f04f 0800 	mov.w	r8, #0
 8014c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	f43f aded 	beq.w	8014816 <_strtod_l+0x76>
 8014c3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f7ff f924 	bl	8013e8c <_Bfree>
 8014c44:	9905      	ldr	r1, [sp, #20]
 8014c46:	4620      	mov	r0, r4
 8014c48:	f7ff f920 	bl	8013e8c <_Bfree>
 8014c4c:	4659      	mov	r1, fp
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7ff f91c 	bl	8013e8c <_Bfree>
 8014c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c56:	4620      	mov	r0, r4
 8014c58:	f7ff f918 	bl	8013e8c <_Bfree>
 8014c5c:	4629      	mov	r1, r5
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f7ff f914 	bl	8013e8c <_Bfree>
 8014c64:	e5d7      	b.n	8014816 <_strtod_l+0x76>
 8014c66:	4b32      	ldr	r3, [pc, #200]	; (8014d30 <_strtod_l+0x590>)
 8014c68:	9304      	str	r3, [sp, #16]
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	112d      	asrs	r5, r5, #4
 8014c6e:	4640      	mov	r0, r8
 8014c70:	4649      	mov	r1, r9
 8014c72:	469a      	mov	sl, r3
 8014c74:	2d01      	cmp	r5, #1
 8014c76:	dc21      	bgt.n	8014cbc <_strtod_l+0x51c>
 8014c78:	b10b      	cbz	r3, 8014c7e <_strtod_l+0x4de>
 8014c7a:	4680      	mov	r8, r0
 8014c7c:	4689      	mov	r9, r1
 8014c7e:	492c      	ldr	r1, [pc, #176]	; (8014d30 <_strtod_l+0x590>)
 8014c80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014c84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014c88:	4642      	mov	r2, r8
 8014c8a:	464b      	mov	r3, r9
 8014c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c90:	f7eb fcda 	bl	8000648 <__aeabi_dmul>
 8014c94:	4b27      	ldr	r3, [pc, #156]	; (8014d34 <_strtod_l+0x594>)
 8014c96:	460a      	mov	r2, r1
 8014c98:	400b      	ands	r3, r1
 8014c9a:	4927      	ldr	r1, [pc, #156]	; (8014d38 <_strtod_l+0x598>)
 8014c9c:	428b      	cmp	r3, r1
 8014c9e:	4680      	mov	r8, r0
 8014ca0:	d8be      	bhi.n	8014c20 <_strtod_l+0x480>
 8014ca2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014ca6:	428b      	cmp	r3, r1
 8014ca8:	bf86      	itte	hi
 8014caa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014d3c <_strtod_l+0x59c>
 8014cae:	f04f 38ff 	movhi.w	r8, #4294967295
 8014cb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	9304      	str	r3, [sp, #16]
 8014cba:	e07b      	b.n	8014db4 <_strtod_l+0x614>
 8014cbc:	07ea      	lsls	r2, r5, #31
 8014cbe:	d505      	bpl.n	8014ccc <_strtod_l+0x52c>
 8014cc0:	9b04      	ldr	r3, [sp, #16]
 8014cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc6:	f7eb fcbf 	bl	8000648 <__aeabi_dmul>
 8014cca:	2301      	movs	r3, #1
 8014ccc:	9a04      	ldr	r2, [sp, #16]
 8014cce:	3208      	adds	r2, #8
 8014cd0:	f10a 0a01 	add.w	sl, sl, #1
 8014cd4:	106d      	asrs	r5, r5, #1
 8014cd6:	9204      	str	r2, [sp, #16]
 8014cd8:	e7cc      	b.n	8014c74 <_strtod_l+0x4d4>
 8014cda:	d0ec      	beq.n	8014cb6 <_strtod_l+0x516>
 8014cdc:	426d      	negs	r5, r5
 8014cde:	f015 020f 	ands.w	r2, r5, #15
 8014ce2:	d00a      	beq.n	8014cfa <_strtod_l+0x55a>
 8014ce4:	4b11      	ldr	r3, [pc, #68]	; (8014d2c <_strtod_l+0x58c>)
 8014ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cea:	4640      	mov	r0, r8
 8014cec:	4649      	mov	r1, r9
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	f7eb fdd3 	bl	800089c <__aeabi_ddiv>
 8014cf6:	4680      	mov	r8, r0
 8014cf8:	4689      	mov	r9, r1
 8014cfa:	112d      	asrs	r5, r5, #4
 8014cfc:	d0db      	beq.n	8014cb6 <_strtod_l+0x516>
 8014cfe:	2d1f      	cmp	r5, #31
 8014d00:	dd1e      	ble.n	8014d40 <_strtod_l+0x5a0>
 8014d02:	2500      	movs	r5, #0
 8014d04:	46ab      	mov	fp, r5
 8014d06:	9509      	str	r5, [sp, #36]	; 0x24
 8014d08:	9505      	str	r5, [sp, #20]
 8014d0a:	2322      	movs	r3, #34	; 0x22
 8014d0c:	f04f 0800 	mov.w	r8, #0
 8014d10:	f04f 0900 	mov.w	r9, #0
 8014d14:	6023      	str	r3, [r4, #0]
 8014d16:	e78d      	b.n	8014c34 <_strtod_l+0x494>
 8014d18:	0801858d 	.word	0x0801858d
 8014d1c:	080187b4 	.word	0x080187b4
 8014d20:	08018585 	.word	0x08018585
 8014d24:	080185ba 	.word	0x080185ba
 8014d28:	08018960 	.word	0x08018960
 8014d2c:	080186c8 	.word	0x080186c8
 8014d30:	080186a0 	.word	0x080186a0
 8014d34:	7ff00000 	.word	0x7ff00000
 8014d38:	7ca00000 	.word	0x7ca00000
 8014d3c:	7fefffff 	.word	0x7fefffff
 8014d40:	f015 0310 	ands.w	r3, r5, #16
 8014d44:	bf18      	it	ne
 8014d46:	236a      	movne	r3, #106	; 0x6a
 8014d48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80150ec <_strtod_l+0x94c>
 8014d4c:	9304      	str	r3, [sp, #16]
 8014d4e:	4640      	mov	r0, r8
 8014d50:	4649      	mov	r1, r9
 8014d52:	2300      	movs	r3, #0
 8014d54:	07ea      	lsls	r2, r5, #31
 8014d56:	d504      	bpl.n	8014d62 <_strtod_l+0x5c2>
 8014d58:	e9da 2300 	ldrd	r2, r3, [sl]
 8014d5c:	f7eb fc74 	bl	8000648 <__aeabi_dmul>
 8014d60:	2301      	movs	r3, #1
 8014d62:	106d      	asrs	r5, r5, #1
 8014d64:	f10a 0a08 	add.w	sl, sl, #8
 8014d68:	d1f4      	bne.n	8014d54 <_strtod_l+0x5b4>
 8014d6a:	b10b      	cbz	r3, 8014d70 <_strtod_l+0x5d0>
 8014d6c:	4680      	mov	r8, r0
 8014d6e:	4689      	mov	r9, r1
 8014d70:	9b04      	ldr	r3, [sp, #16]
 8014d72:	b1bb      	cbz	r3, 8014da4 <_strtod_l+0x604>
 8014d74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014d78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	4649      	mov	r1, r9
 8014d80:	dd10      	ble.n	8014da4 <_strtod_l+0x604>
 8014d82:	2b1f      	cmp	r3, #31
 8014d84:	f340 811e 	ble.w	8014fc4 <_strtod_l+0x824>
 8014d88:	2b34      	cmp	r3, #52	; 0x34
 8014d8a:	bfde      	ittt	le
 8014d8c:	f04f 33ff 	movle.w	r3, #4294967295
 8014d90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014d94:	4093      	lslle	r3, r2
 8014d96:	f04f 0800 	mov.w	r8, #0
 8014d9a:	bfcc      	ite	gt
 8014d9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014da0:	ea03 0901 	andle.w	r9, r3, r1
 8014da4:	2200      	movs	r2, #0
 8014da6:	2300      	movs	r3, #0
 8014da8:	4640      	mov	r0, r8
 8014daa:	4649      	mov	r1, r9
 8014dac:	f7eb feb4 	bl	8000b18 <__aeabi_dcmpeq>
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d1a6      	bne.n	8014d02 <_strtod_l+0x562>
 8014db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dba:	4633      	mov	r3, r6
 8014dbc:	465a      	mov	r2, fp
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f7ff f8cc 	bl	8013f5c <__s2b>
 8014dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	f43f af2a 	beq.w	8014c20 <_strtod_l+0x480>
 8014dcc:	9a08      	ldr	r2, [sp, #32]
 8014dce:	9b05      	ldr	r3, [sp, #20]
 8014dd0:	2a00      	cmp	r2, #0
 8014dd2:	eba3 0307 	sub.w	r3, r3, r7
 8014dd6:	bfa8      	it	ge
 8014dd8:	2300      	movge	r3, #0
 8014dda:	930c      	str	r3, [sp, #48]	; 0x30
 8014ddc:	2500      	movs	r5, #0
 8014dde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014de2:	9312      	str	r3, [sp, #72]	; 0x48
 8014de4:	46ab      	mov	fp, r5
 8014de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de8:	4620      	mov	r0, r4
 8014dea:	6859      	ldr	r1, [r3, #4]
 8014dec:	f7ff f80e 	bl	8013e0c <_Balloc>
 8014df0:	9005      	str	r0, [sp, #20]
 8014df2:	2800      	cmp	r0, #0
 8014df4:	f43f af18 	beq.w	8014c28 <_strtod_l+0x488>
 8014df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfa:	691a      	ldr	r2, [r3, #16]
 8014dfc:	3202      	adds	r2, #2
 8014dfe:	f103 010c 	add.w	r1, r3, #12
 8014e02:	0092      	lsls	r2, r2, #2
 8014e04:	300c      	adds	r0, #12
 8014e06:	f7fe f872 	bl	8012eee <memcpy>
 8014e0a:	ec49 8b10 	vmov	d0, r8, r9
 8014e0e:	aa18      	add	r2, sp, #96	; 0x60
 8014e10:	a917      	add	r1, sp, #92	; 0x5c
 8014e12:	4620      	mov	r0, r4
 8014e14:	f7ff fbd6 	bl	80145c4 <__d2b>
 8014e18:	ec49 8b18 	vmov	d8, r8, r9
 8014e1c:	9016      	str	r0, [sp, #88]	; 0x58
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	f43f af02 	beq.w	8014c28 <_strtod_l+0x488>
 8014e24:	2101      	movs	r1, #1
 8014e26:	4620      	mov	r0, r4
 8014e28:	f7ff f930 	bl	801408c <__i2b>
 8014e2c:	4683      	mov	fp, r0
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f43f aefa 	beq.w	8014c28 <_strtod_l+0x488>
 8014e34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014e36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e38:	2e00      	cmp	r6, #0
 8014e3a:	bfab      	itete	ge
 8014e3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014e3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014e40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014e42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014e46:	bfac      	ite	ge
 8014e48:	eb06 0a03 	addge.w	sl, r6, r3
 8014e4c:	1b9f      	sublt	r7, r3, r6
 8014e4e:	9b04      	ldr	r3, [sp, #16]
 8014e50:	1af6      	subs	r6, r6, r3
 8014e52:	4416      	add	r6, r2
 8014e54:	4ba0      	ldr	r3, [pc, #640]	; (80150d8 <_strtod_l+0x938>)
 8014e56:	3e01      	subs	r6, #1
 8014e58:	429e      	cmp	r6, r3
 8014e5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014e5e:	f280 80c4 	bge.w	8014fea <_strtod_l+0x84a>
 8014e62:	1b9b      	subs	r3, r3, r6
 8014e64:	2b1f      	cmp	r3, #31
 8014e66:	eba2 0203 	sub.w	r2, r2, r3
 8014e6a:	f04f 0101 	mov.w	r1, #1
 8014e6e:	f300 80b0 	bgt.w	8014fd2 <_strtod_l+0x832>
 8014e72:	fa01 f303 	lsl.w	r3, r1, r3
 8014e76:	930e      	str	r3, [sp, #56]	; 0x38
 8014e78:	2300      	movs	r3, #0
 8014e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8014e7c:	eb0a 0602 	add.w	r6, sl, r2
 8014e80:	9b04      	ldr	r3, [sp, #16]
 8014e82:	45b2      	cmp	sl, r6
 8014e84:	4417      	add	r7, r2
 8014e86:	441f      	add	r7, r3
 8014e88:	4653      	mov	r3, sl
 8014e8a:	bfa8      	it	ge
 8014e8c:	4633      	movge	r3, r6
 8014e8e:	42bb      	cmp	r3, r7
 8014e90:	bfa8      	it	ge
 8014e92:	463b      	movge	r3, r7
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	bfc2      	ittt	gt
 8014e98:	1af6      	subgt	r6, r6, r3
 8014e9a:	1aff      	subgt	r7, r7, r3
 8014e9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	dd17      	ble.n	8014ed6 <_strtod_l+0x736>
 8014ea6:	4659      	mov	r1, fp
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f7ff f9ae 	bl	801420c <__pow5mult>
 8014eb0:	4683      	mov	fp, r0
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	f43f aeb8 	beq.w	8014c28 <_strtod_l+0x488>
 8014eb8:	4601      	mov	r1, r0
 8014eba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f7ff f8fb 	bl	80140b8 <__multiply>
 8014ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	f43f aeaf 	beq.w	8014c28 <_strtod_l+0x488>
 8014eca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f7fe ffdd 	bl	8013e8c <_Bfree>
 8014ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ed4:	9316      	str	r3, [sp, #88]	; 0x58
 8014ed6:	2e00      	cmp	r6, #0
 8014ed8:	f300 808c 	bgt.w	8014ff4 <_strtod_l+0x854>
 8014edc:	9b08      	ldr	r3, [sp, #32]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	dd08      	ble.n	8014ef4 <_strtod_l+0x754>
 8014ee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ee4:	9905      	ldr	r1, [sp, #20]
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f7ff f990 	bl	801420c <__pow5mult>
 8014eec:	9005      	str	r0, [sp, #20]
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	f43f ae9a 	beq.w	8014c28 <_strtod_l+0x488>
 8014ef4:	2f00      	cmp	r7, #0
 8014ef6:	dd08      	ble.n	8014f0a <_strtod_l+0x76a>
 8014ef8:	9905      	ldr	r1, [sp, #20]
 8014efa:	463a      	mov	r2, r7
 8014efc:	4620      	mov	r0, r4
 8014efe:	f7ff f9df 	bl	80142c0 <__lshift>
 8014f02:	9005      	str	r0, [sp, #20]
 8014f04:	2800      	cmp	r0, #0
 8014f06:	f43f ae8f 	beq.w	8014c28 <_strtod_l+0x488>
 8014f0a:	f1ba 0f00 	cmp.w	sl, #0
 8014f0e:	dd08      	ble.n	8014f22 <_strtod_l+0x782>
 8014f10:	4659      	mov	r1, fp
 8014f12:	4652      	mov	r2, sl
 8014f14:	4620      	mov	r0, r4
 8014f16:	f7ff f9d3 	bl	80142c0 <__lshift>
 8014f1a:	4683      	mov	fp, r0
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	f43f ae83 	beq.w	8014c28 <_strtod_l+0x488>
 8014f22:	9a05      	ldr	r2, [sp, #20]
 8014f24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f26:	4620      	mov	r0, r4
 8014f28:	f7ff fa52 	bl	80143d0 <__mdiff>
 8014f2c:	4605      	mov	r5, r0
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	f43f ae7a 	beq.w	8014c28 <_strtod_l+0x488>
 8014f34:	68c3      	ldr	r3, [r0, #12]
 8014f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60c3      	str	r3, [r0, #12]
 8014f3c:	4659      	mov	r1, fp
 8014f3e:	f7ff fa2b 	bl	8014398 <__mcmp>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	da60      	bge.n	8015008 <_strtod_l+0x868>
 8014f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f48:	ea53 0308 	orrs.w	r3, r3, r8
 8014f4c:	f040 8084 	bne.w	8015058 <_strtod_l+0x8b8>
 8014f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d17f      	bne.n	8015058 <_strtod_l+0x8b8>
 8014f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014f5c:	0d1b      	lsrs	r3, r3, #20
 8014f5e:	051b      	lsls	r3, r3, #20
 8014f60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014f64:	d978      	bls.n	8015058 <_strtod_l+0x8b8>
 8014f66:	696b      	ldr	r3, [r5, #20]
 8014f68:	b913      	cbnz	r3, 8014f70 <_strtod_l+0x7d0>
 8014f6a:	692b      	ldr	r3, [r5, #16]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	dd73      	ble.n	8015058 <_strtod_l+0x8b8>
 8014f70:	4629      	mov	r1, r5
 8014f72:	2201      	movs	r2, #1
 8014f74:	4620      	mov	r0, r4
 8014f76:	f7ff f9a3 	bl	80142c0 <__lshift>
 8014f7a:	4659      	mov	r1, fp
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	f7ff fa0b 	bl	8014398 <__mcmp>
 8014f82:	2800      	cmp	r0, #0
 8014f84:	dd68      	ble.n	8015058 <_strtod_l+0x8b8>
 8014f86:	9904      	ldr	r1, [sp, #16]
 8014f88:	4a54      	ldr	r2, [pc, #336]	; (80150dc <_strtod_l+0x93c>)
 8014f8a:	464b      	mov	r3, r9
 8014f8c:	2900      	cmp	r1, #0
 8014f8e:	f000 8084 	beq.w	801509a <_strtod_l+0x8fa>
 8014f92:	ea02 0109 	and.w	r1, r2, r9
 8014f96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014f9a:	dc7e      	bgt.n	801509a <_strtod_l+0x8fa>
 8014f9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014fa0:	f77f aeb3 	ble.w	8014d0a <_strtod_l+0x56a>
 8014fa4:	4b4e      	ldr	r3, [pc, #312]	; (80150e0 <_strtod_l+0x940>)
 8014fa6:	4640      	mov	r0, r8
 8014fa8:	4649      	mov	r1, r9
 8014faa:	2200      	movs	r2, #0
 8014fac:	f7eb fb4c 	bl	8000648 <__aeabi_dmul>
 8014fb0:	4b4a      	ldr	r3, [pc, #296]	; (80150dc <_strtod_l+0x93c>)
 8014fb2:	400b      	ands	r3, r1
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	4689      	mov	r9, r1
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	f47f ae3f 	bne.w	8014c3c <_strtod_l+0x49c>
 8014fbe:	2322      	movs	r3, #34	; 0x22
 8014fc0:	6023      	str	r3, [r4, #0]
 8014fc2:	e63b      	b.n	8014c3c <_strtod_l+0x49c>
 8014fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8014fcc:	ea03 0808 	and.w	r8, r3, r8
 8014fd0:	e6e8      	b.n	8014da4 <_strtod_l+0x604>
 8014fd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014fd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014fda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014fde:	36e2      	adds	r6, #226	; 0xe2
 8014fe0:	fa01 f306 	lsl.w	r3, r1, r6
 8014fe4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014fe8:	e748      	b.n	8014e7c <_strtod_l+0x6dc>
 8014fea:	2100      	movs	r1, #0
 8014fec:	2301      	movs	r3, #1
 8014fee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014ff2:	e743      	b.n	8014e7c <_strtod_l+0x6dc>
 8014ff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ff6:	4632      	mov	r2, r6
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f7ff f961 	bl	80142c0 <__lshift>
 8014ffe:	9016      	str	r0, [sp, #88]	; 0x58
 8015000:	2800      	cmp	r0, #0
 8015002:	f47f af6b 	bne.w	8014edc <_strtod_l+0x73c>
 8015006:	e60f      	b.n	8014c28 <_strtod_l+0x488>
 8015008:	46ca      	mov	sl, r9
 801500a:	d171      	bne.n	80150f0 <_strtod_l+0x950>
 801500c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801500e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015012:	b352      	cbz	r2, 801506a <_strtod_l+0x8ca>
 8015014:	4a33      	ldr	r2, [pc, #204]	; (80150e4 <_strtod_l+0x944>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d12a      	bne.n	8015070 <_strtod_l+0x8d0>
 801501a:	9b04      	ldr	r3, [sp, #16]
 801501c:	4641      	mov	r1, r8
 801501e:	b1fb      	cbz	r3, 8015060 <_strtod_l+0x8c0>
 8015020:	4b2e      	ldr	r3, [pc, #184]	; (80150dc <_strtod_l+0x93c>)
 8015022:	ea09 0303 	and.w	r3, r9, r3
 8015026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801502a:	f04f 32ff 	mov.w	r2, #4294967295
 801502e:	d81a      	bhi.n	8015066 <_strtod_l+0x8c6>
 8015030:	0d1b      	lsrs	r3, r3, #20
 8015032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015036:	fa02 f303 	lsl.w	r3, r2, r3
 801503a:	4299      	cmp	r1, r3
 801503c:	d118      	bne.n	8015070 <_strtod_l+0x8d0>
 801503e:	4b2a      	ldr	r3, [pc, #168]	; (80150e8 <_strtod_l+0x948>)
 8015040:	459a      	cmp	sl, r3
 8015042:	d102      	bne.n	801504a <_strtod_l+0x8aa>
 8015044:	3101      	adds	r1, #1
 8015046:	f43f adef 	beq.w	8014c28 <_strtod_l+0x488>
 801504a:	4b24      	ldr	r3, [pc, #144]	; (80150dc <_strtod_l+0x93c>)
 801504c:	ea0a 0303 	and.w	r3, sl, r3
 8015050:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015054:	f04f 0800 	mov.w	r8, #0
 8015058:	9b04      	ldr	r3, [sp, #16]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d1a2      	bne.n	8014fa4 <_strtod_l+0x804>
 801505e:	e5ed      	b.n	8014c3c <_strtod_l+0x49c>
 8015060:	f04f 33ff 	mov.w	r3, #4294967295
 8015064:	e7e9      	b.n	801503a <_strtod_l+0x89a>
 8015066:	4613      	mov	r3, r2
 8015068:	e7e7      	b.n	801503a <_strtod_l+0x89a>
 801506a:	ea53 0308 	orrs.w	r3, r3, r8
 801506e:	d08a      	beq.n	8014f86 <_strtod_l+0x7e6>
 8015070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015072:	b1e3      	cbz	r3, 80150ae <_strtod_l+0x90e>
 8015074:	ea13 0f0a 	tst.w	r3, sl
 8015078:	d0ee      	beq.n	8015058 <_strtod_l+0x8b8>
 801507a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801507c:	9a04      	ldr	r2, [sp, #16]
 801507e:	4640      	mov	r0, r8
 8015080:	4649      	mov	r1, r9
 8015082:	b1c3      	cbz	r3, 80150b6 <_strtod_l+0x916>
 8015084:	f7ff fb6f 	bl	8014766 <sulp>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	ec51 0b18 	vmov	r0, r1, d8
 8015090:	f7eb f924 	bl	80002dc <__adddf3>
 8015094:	4680      	mov	r8, r0
 8015096:	4689      	mov	r9, r1
 8015098:	e7de      	b.n	8015058 <_strtod_l+0x8b8>
 801509a:	4013      	ands	r3, r2
 801509c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80150a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80150a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80150a8:	f04f 38ff 	mov.w	r8, #4294967295
 80150ac:	e7d4      	b.n	8015058 <_strtod_l+0x8b8>
 80150ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150b0:	ea13 0f08 	tst.w	r3, r8
 80150b4:	e7e0      	b.n	8015078 <_strtod_l+0x8d8>
 80150b6:	f7ff fb56 	bl	8014766 <sulp>
 80150ba:	4602      	mov	r2, r0
 80150bc:	460b      	mov	r3, r1
 80150be:	ec51 0b18 	vmov	r0, r1, d8
 80150c2:	f7eb f909 	bl	80002d8 <__aeabi_dsub>
 80150c6:	2200      	movs	r2, #0
 80150c8:	2300      	movs	r3, #0
 80150ca:	4680      	mov	r8, r0
 80150cc:	4689      	mov	r9, r1
 80150ce:	f7eb fd23 	bl	8000b18 <__aeabi_dcmpeq>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d0c0      	beq.n	8015058 <_strtod_l+0x8b8>
 80150d6:	e618      	b.n	8014d0a <_strtod_l+0x56a>
 80150d8:	fffffc02 	.word	0xfffffc02
 80150dc:	7ff00000 	.word	0x7ff00000
 80150e0:	39500000 	.word	0x39500000
 80150e4:	000fffff 	.word	0x000fffff
 80150e8:	7fefffff 	.word	0x7fefffff
 80150ec:	080187c8 	.word	0x080187c8
 80150f0:	4659      	mov	r1, fp
 80150f2:	4628      	mov	r0, r5
 80150f4:	f7ff fac0 	bl	8014678 <__ratio>
 80150f8:	ec57 6b10 	vmov	r6, r7, d0
 80150fc:	ee10 0a10 	vmov	r0, s0
 8015100:	2200      	movs	r2, #0
 8015102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015106:	4639      	mov	r1, r7
 8015108:	f7eb fd1a 	bl	8000b40 <__aeabi_dcmple>
 801510c:	2800      	cmp	r0, #0
 801510e:	d071      	beq.n	80151f4 <_strtod_l+0xa54>
 8015110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015112:	2b00      	cmp	r3, #0
 8015114:	d17c      	bne.n	8015210 <_strtod_l+0xa70>
 8015116:	f1b8 0f00 	cmp.w	r8, #0
 801511a:	d15a      	bne.n	80151d2 <_strtod_l+0xa32>
 801511c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015120:	2b00      	cmp	r3, #0
 8015122:	d15d      	bne.n	80151e0 <_strtod_l+0xa40>
 8015124:	4b90      	ldr	r3, [pc, #576]	; (8015368 <_strtod_l+0xbc8>)
 8015126:	2200      	movs	r2, #0
 8015128:	4630      	mov	r0, r6
 801512a:	4639      	mov	r1, r7
 801512c:	f7eb fcfe 	bl	8000b2c <__aeabi_dcmplt>
 8015130:	2800      	cmp	r0, #0
 8015132:	d15c      	bne.n	80151ee <_strtod_l+0xa4e>
 8015134:	4630      	mov	r0, r6
 8015136:	4639      	mov	r1, r7
 8015138:	4b8c      	ldr	r3, [pc, #560]	; (801536c <_strtod_l+0xbcc>)
 801513a:	2200      	movs	r2, #0
 801513c:	f7eb fa84 	bl	8000648 <__aeabi_dmul>
 8015140:	4606      	mov	r6, r0
 8015142:	460f      	mov	r7, r1
 8015144:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015148:	9606      	str	r6, [sp, #24]
 801514a:	9307      	str	r3, [sp, #28]
 801514c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015154:	4b86      	ldr	r3, [pc, #536]	; (8015370 <_strtod_l+0xbd0>)
 8015156:	ea0a 0303 	and.w	r3, sl, r3
 801515a:	930d      	str	r3, [sp, #52]	; 0x34
 801515c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801515e:	4b85      	ldr	r3, [pc, #532]	; (8015374 <_strtod_l+0xbd4>)
 8015160:	429a      	cmp	r2, r3
 8015162:	f040 8090 	bne.w	8015286 <_strtod_l+0xae6>
 8015166:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801516a:	ec49 8b10 	vmov	d0, r8, r9
 801516e:	f7ff f9b9 	bl	80144e4 <__ulp>
 8015172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015176:	ec51 0b10 	vmov	r0, r1, d0
 801517a:	f7eb fa65 	bl	8000648 <__aeabi_dmul>
 801517e:	4642      	mov	r2, r8
 8015180:	464b      	mov	r3, r9
 8015182:	f7eb f8ab 	bl	80002dc <__adddf3>
 8015186:	460b      	mov	r3, r1
 8015188:	4979      	ldr	r1, [pc, #484]	; (8015370 <_strtod_l+0xbd0>)
 801518a:	4a7b      	ldr	r2, [pc, #492]	; (8015378 <_strtod_l+0xbd8>)
 801518c:	4019      	ands	r1, r3
 801518e:	4291      	cmp	r1, r2
 8015190:	4680      	mov	r8, r0
 8015192:	d944      	bls.n	801521e <_strtod_l+0xa7e>
 8015194:	ee18 2a90 	vmov	r2, s17
 8015198:	4b78      	ldr	r3, [pc, #480]	; (801537c <_strtod_l+0xbdc>)
 801519a:	429a      	cmp	r2, r3
 801519c:	d104      	bne.n	80151a8 <_strtod_l+0xa08>
 801519e:	ee18 3a10 	vmov	r3, s16
 80151a2:	3301      	adds	r3, #1
 80151a4:	f43f ad40 	beq.w	8014c28 <_strtod_l+0x488>
 80151a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801537c <_strtod_l+0xbdc>
 80151ac:	f04f 38ff 	mov.w	r8, #4294967295
 80151b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151b2:	4620      	mov	r0, r4
 80151b4:	f7fe fe6a 	bl	8013e8c <_Bfree>
 80151b8:	9905      	ldr	r1, [sp, #20]
 80151ba:	4620      	mov	r0, r4
 80151bc:	f7fe fe66 	bl	8013e8c <_Bfree>
 80151c0:	4659      	mov	r1, fp
 80151c2:	4620      	mov	r0, r4
 80151c4:	f7fe fe62 	bl	8013e8c <_Bfree>
 80151c8:	4629      	mov	r1, r5
 80151ca:	4620      	mov	r0, r4
 80151cc:	f7fe fe5e 	bl	8013e8c <_Bfree>
 80151d0:	e609      	b.n	8014de6 <_strtod_l+0x646>
 80151d2:	f1b8 0f01 	cmp.w	r8, #1
 80151d6:	d103      	bne.n	80151e0 <_strtod_l+0xa40>
 80151d8:	f1b9 0f00 	cmp.w	r9, #0
 80151dc:	f43f ad95 	beq.w	8014d0a <_strtod_l+0x56a>
 80151e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015338 <_strtod_l+0xb98>
 80151e4:	4f60      	ldr	r7, [pc, #384]	; (8015368 <_strtod_l+0xbc8>)
 80151e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80151ea:	2600      	movs	r6, #0
 80151ec:	e7ae      	b.n	801514c <_strtod_l+0x9ac>
 80151ee:	4f5f      	ldr	r7, [pc, #380]	; (801536c <_strtod_l+0xbcc>)
 80151f0:	2600      	movs	r6, #0
 80151f2:	e7a7      	b.n	8015144 <_strtod_l+0x9a4>
 80151f4:	4b5d      	ldr	r3, [pc, #372]	; (801536c <_strtod_l+0xbcc>)
 80151f6:	4630      	mov	r0, r6
 80151f8:	4639      	mov	r1, r7
 80151fa:	2200      	movs	r2, #0
 80151fc:	f7eb fa24 	bl	8000648 <__aeabi_dmul>
 8015200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015202:	4606      	mov	r6, r0
 8015204:	460f      	mov	r7, r1
 8015206:	2b00      	cmp	r3, #0
 8015208:	d09c      	beq.n	8015144 <_strtod_l+0x9a4>
 801520a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801520e:	e79d      	b.n	801514c <_strtod_l+0x9ac>
 8015210:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015340 <_strtod_l+0xba0>
 8015214:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015218:	ec57 6b17 	vmov	r6, r7, d7
 801521c:	e796      	b.n	801514c <_strtod_l+0x9ac>
 801521e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015222:	9b04      	ldr	r3, [sp, #16]
 8015224:	46ca      	mov	sl, r9
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1c2      	bne.n	80151b0 <_strtod_l+0xa10>
 801522a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801522e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015230:	0d1b      	lsrs	r3, r3, #20
 8015232:	051b      	lsls	r3, r3, #20
 8015234:	429a      	cmp	r2, r3
 8015236:	d1bb      	bne.n	80151b0 <_strtod_l+0xa10>
 8015238:	4630      	mov	r0, r6
 801523a:	4639      	mov	r1, r7
 801523c:	f7eb fdb4 	bl	8000da8 <__aeabi_d2lz>
 8015240:	f7eb f9d4 	bl	80005ec <__aeabi_l2d>
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	4630      	mov	r0, r6
 801524a:	4639      	mov	r1, r7
 801524c:	f7eb f844 	bl	80002d8 <__aeabi_dsub>
 8015250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015256:	ea43 0308 	orr.w	r3, r3, r8
 801525a:	4313      	orrs	r3, r2
 801525c:	4606      	mov	r6, r0
 801525e:	460f      	mov	r7, r1
 8015260:	d054      	beq.n	801530c <_strtod_l+0xb6c>
 8015262:	a339      	add	r3, pc, #228	; (adr r3, 8015348 <_strtod_l+0xba8>)
 8015264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015268:	f7eb fc60 	bl	8000b2c <__aeabi_dcmplt>
 801526c:	2800      	cmp	r0, #0
 801526e:	f47f ace5 	bne.w	8014c3c <_strtod_l+0x49c>
 8015272:	a337      	add	r3, pc, #220	; (adr r3, 8015350 <_strtod_l+0xbb0>)
 8015274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015278:	4630      	mov	r0, r6
 801527a:	4639      	mov	r1, r7
 801527c:	f7eb fc74 	bl	8000b68 <__aeabi_dcmpgt>
 8015280:	2800      	cmp	r0, #0
 8015282:	d095      	beq.n	80151b0 <_strtod_l+0xa10>
 8015284:	e4da      	b.n	8014c3c <_strtod_l+0x49c>
 8015286:	9b04      	ldr	r3, [sp, #16]
 8015288:	b333      	cbz	r3, 80152d8 <_strtod_l+0xb38>
 801528a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801528c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015290:	d822      	bhi.n	80152d8 <_strtod_l+0xb38>
 8015292:	a331      	add	r3, pc, #196	; (adr r3, 8015358 <_strtod_l+0xbb8>)
 8015294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015298:	4630      	mov	r0, r6
 801529a:	4639      	mov	r1, r7
 801529c:	f7eb fc50 	bl	8000b40 <__aeabi_dcmple>
 80152a0:	b1a0      	cbz	r0, 80152cc <_strtod_l+0xb2c>
 80152a2:	4639      	mov	r1, r7
 80152a4:	4630      	mov	r0, r6
 80152a6:	f7eb fca7 	bl	8000bf8 <__aeabi_d2uiz>
 80152aa:	2801      	cmp	r0, #1
 80152ac:	bf38      	it	cc
 80152ae:	2001      	movcc	r0, #1
 80152b0:	f7eb f950 	bl	8000554 <__aeabi_ui2d>
 80152b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152b6:	4606      	mov	r6, r0
 80152b8:	460f      	mov	r7, r1
 80152ba:	bb23      	cbnz	r3, 8015306 <_strtod_l+0xb66>
 80152bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152c0:	9010      	str	r0, [sp, #64]	; 0x40
 80152c2:	9311      	str	r3, [sp, #68]	; 0x44
 80152c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80152c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80152cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80152d4:	1a9b      	subs	r3, r3, r2
 80152d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80152dc:	eeb0 0a48 	vmov.f32	s0, s16
 80152e0:	eef0 0a68 	vmov.f32	s1, s17
 80152e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80152e8:	f7ff f8fc 	bl	80144e4 <__ulp>
 80152ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80152f0:	ec53 2b10 	vmov	r2, r3, d0
 80152f4:	f7eb f9a8 	bl	8000648 <__aeabi_dmul>
 80152f8:	ec53 2b18 	vmov	r2, r3, d8
 80152fc:	f7ea ffee 	bl	80002dc <__adddf3>
 8015300:	4680      	mov	r8, r0
 8015302:	4689      	mov	r9, r1
 8015304:	e78d      	b.n	8015222 <_strtod_l+0xa82>
 8015306:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801530a:	e7db      	b.n	80152c4 <_strtod_l+0xb24>
 801530c:	a314      	add	r3, pc, #80	; (adr r3, 8015360 <_strtod_l+0xbc0>)
 801530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015312:	f7eb fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8015316:	e7b3      	b.n	8015280 <_strtod_l+0xae0>
 8015318:	2300      	movs	r3, #0
 801531a:	930a      	str	r3, [sp, #40]	; 0x28
 801531c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801531e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015320:	6013      	str	r3, [r2, #0]
 8015322:	f7ff ba7c 	b.w	801481e <_strtod_l+0x7e>
 8015326:	2a65      	cmp	r2, #101	; 0x65
 8015328:	f43f ab75 	beq.w	8014a16 <_strtod_l+0x276>
 801532c:	2a45      	cmp	r2, #69	; 0x45
 801532e:	f43f ab72 	beq.w	8014a16 <_strtod_l+0x276>
 8015332:	2301      	movs	r3, #1
 8015334:	f7ff bbaa 	b.w	8014a8c <_strtod_l+0x2ec>
 8015338:	00000000 	.word	0x00000000
 801533c:	bff00000 	.word	0xbff00000
 8015340:	00000000 	.word	0x00000000
 8015344:	3ff00000 	.word	0x3ff00000
 8015348:	94a03595 	.word	0x94a03595
 801534c:	3fdfffff 	.word	0x3fdfffff
 8015350:	35afe535 	.word	0x35afe535
 8015354:	3fe00000 	.word	0x3fe00000
 8015358:	ffc00000 	.word	0xffc00000
 801535c:	41dfffff 	.word	0x41dfffff
 8015360:	94a03595 	.word	0x94a03595
 8015364:	3fcfffff 	.word	0x3fcfffff
 8015368:	3ff00000 	.word	0x3ff00000
 801536c:	3fe00000 	.word	0x3fe00000
 8015370:	7ff00000 	.word	0x7ff00000
 8015374:	7fe00000 	.word	0x7fe00000
 8015378:	7c9fffff 	.word	0x7c9fffff
 801537c:	7fefffff 	.word	0x7fefffff

08015380 <_strtod_r>:
 8015380:	4b01      	ldr	r3, [pc, #4]	; (8015388 <_strtod_r+0x8>)
 8015382:	f7ff ba0d 	b.w	80147a0 <_strtod_l>
 8015386:	bf00      	nop
 8015388:	20000074 	.word	0x20000074

0801538c <_strtol_l.constprop.0>:
 801538c:	2b01      	cmp	r3, #1
 801538e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015392:	d001      	beq.n	8015398 <_strtol_l.constprop.0+0xc>
 8015394:	2b24      	cmp	r3, #36	; 0x24
 8015396:	d906      	bls.n	80153a6 <_strtol_l.constprop.0+0x1a>
 8015398:	f7fd fd7c 	bl	8012e94 <__errno>
 801539c:	2316      	movs	r3, #22
 801539e:	6003      	str	r3, [r0, #0]
 80153a0:	2000      	movs	r0, #0
 80153a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801548c <_strtol_l.constprop.0+0x100>
 80153aa:	460d      	mov	r5, r1
 80153ac:	462e      	mov	r6, r5
 80153ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80153b6:	f017 0708 	ands.w	r7, r7, #8
 80153ba:	d1f7      	bne.n	80153ac <_strtol_l.constprop.0+0x20>
 80153bc:	2c2d      	cmp	r4, #45	; 0x2d
 80153be:	d132      	bne.n	8015426 <_strtol_l.constprop.0+0x9a>
 80153c0:	782c      	ldrb	r4, [r5, #0]
 80153c2:	2701      	movs	r7, #1
 80153c4:	1cb5      	adds	r5, r6, #2
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d05b      	beq.n	8015482 <_strtol_l.constprop.0+0xf6>
 80153ca:	2b10      	cmp	r3, #16
 80153cc:	d109      	bne.n	80153e2 <_strtol_l.constprop.0+0x56>
 80153ce:	2c30      	cmp	r4, #48	; 0x30
 80153d0:	d107      	bne.n	80153e2 <_strtol_l.constprop.0+0x56>
 80153d2:	782c      	ldrb	r4, [r5, #0]
 80153d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80153d8:	2c58      	cmp	r4, #88	; 0x58
 80153da:	d14d      	bne.n	8015478 <_strtol_l.constprop.0+0xec>
 80153dc:	786c      	ldrb	r4, [r5, #1]
 80153de:	2310      	movs	r3, #16
 80153e0:	3502      	adds	r5, #2
 80153e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80153e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80153ea:	f04f 0e00 	mov.w	lr, #0
 80153ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80153f2:	4676      	mov	r6, lr
 80153f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80153f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80153fc:	f1bc 0f09 	cmp.w	ip, #9
 8015400:	d816      	bhi.n	8015430 <_strtol_l.constprop.0+0xa4>
 8015402:	4664      	mov	r4, ip
 8015404:	42a3      	cmp	r3, r4
 8015406:	dd24      	ble.n	8015452 <_strtol_l.constprop.0+0xc6>
 8015408:	f1be 3fff 	cmp.w	lr, #4294967295
 801540c:	d008      	beq.n	8015420 <_strtol_l.constprop.0+0x94>
 801540e:	45b1      	cmp	r9, r6
 8015410:	d31c      	bcc.n	801544c <_strtol_l.constprop.0+0xc0>
 8015412:	d101      	bne.n	8015418 <_strtol_l.constprop.0+0x8c>
 8015414:	45a2      	cmp	sl, r4
 8015416:	db19      	blt.n	801544c <_strtol_l.constprop.0+0xc0>
 8015418:	fb06 4603 	mla	r6, r6, r3, r4
 801541c:	f04f 0e01 	mov.w	lr, #1
 8015420:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015424:	e7e8      	b.n	80153f8 <_strtol_l.constprop.0+0x6c>
 8015426:	2c2b      	cmp	r4, #43	; 0x2b
 8015428:	bf04      	itt	eq
 801542a:	782c      	ldrbeq	r4, [r5, #0]
 801542c:	1cb5      	addeq	r5, r6, #2
 801542e:	e7ca      	b.n	80153c6 <_strtol_l.constprop.0+0x3a>
 8015430:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015434:	f1bc 0f19 	cmp.w	ip, #25
 8015438:	d801      	bhi.n	801543e <_strtol_l.constprop.0+0xb2>
 801543a:	3c37      	subs	r4, #55	; 0x37
 801543c:	e7e2      	b.n	8015404 <_strtol_l.constprop.0+0x78>
 801543e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015442:	f1bc 0f19 	cmp.w	ip, #25
 8015446:	d804      	bhi.n	8015452 <_strtol_l.constprop.0+0xc6>
 8015448:	3c57      	subs	r4, #87	; 0x57
 801544a:	e7db      	b.n	8015404 <_strtol_l.constprop.0+0x78>
 801544c:	f04f 3eff 	mov.w	lr, #4294967295
 8015450:	e7e6      	b.n	8015420 <_strtol_l.constprop.0+0x94>
 8015452:	f1be 3fff 	cmp.w	lr, #4294967295
 8015456:	d105      	bne.n	8015464 <_strtol_l.constprop.0+0xd8>
 8015458:	2322      	movs	r3, #34	; 0x22
 801545a:	6003      	str	r3, [r0, #0]
 801545c:	4646      	mov	r6, r8
 801545e:	b942      	cbnz	r2, 8015472 <_strtol_l.constprop.0+0xe6>
 8015460:	4630      	mov	r0, r6
 8015462:	e79e      	b.n	80153a2 <_strtol_l.constprop.0+0x16>
 8015464:	b107      	cbz	r7, 8015468 <_strtol_l.constprop.0+0xdc>
 8015466:	4276      	negs	r6, r6
 8015468:	2a00      	cmp	r2, #0
 801546a:	d0f9      	beq.n	8015460 <_strtol_l.constprop.0+0xd4>
 801546c:	f1be 0f00 	cmp.w	lr, #0
 8015470:	d000      	beq.n	8015474 <_strtol_l.constprop.0+0xe8>
 8015472:	1e69      	subs	r1, r5, #1
 8015474:	6011      	str	r1, [r2, #0]
 8015476:	e7f3      	b.n	8015460 <_strtol_l.constprop.0+0xd4>
 8015478:	2430      	movs	r4, #48	; 0x30
 801547a:	2b00      	cmp	r3, #0
 801547c:	d1b1      	bne.n	80153e2 <_strtol_l.constprop.0+0x56>
 801547e:	2308      	movs	r3, #8
 8015480:	e7af      	b.n	80153e2 <_strtol_l.constprop.0+0x56>
 8015482:	2c30      	cmp	r4, #48	; 0x30
 8015484:	d0a5      	beq.n	80153d2 <_strtol_l.constprop.0+0x46>
 8015486:	230a      	movs	r3, #10
 8015488:	e7ab      	b.n	80153e2 <_strtol_l.constprop.0+0x56>
 801548a:	bf00      	nop
 801548c:	080187f1 	.word	0x080187f1

08015490 <_strtol_r>:
 8015490:	f7ff bf7c 	b.w	801538c <_strtol_l.constprop.0>

08015494 <__ssputs_r>:
 8015494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015498:	688e      	ldr	r6, [r1, #8]
 801549a:	461f      	mov	r7, r3
 801549c:	42be      	cmp	r6, r7
 801549e:	680b      	ldr	r3, [r1, #0]
 80154a0:	4682      	mov	sl, r0
 80154a2:	460c      	mov	r4, r1
 80154a4:	4690      	mov	r8, r2
 80154a6:	d82c      	bhi.n	8015502 <__ssputs_r+0x6e>
 80154a8:	898a      	ldrh	r2, [r1, #12]
 80154aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154ae:	d026      	beq.n	80154fe <__ssputs_r+0x6a>
 80154b0:	6965      	ldr	r5, [r4, #20]
 80154b2:	6909      	ldr	r1, [r1, #16]
 80154b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154b8:	eba3 0901 	sub.w	r9, r3, r1
 80154bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80154c0:	1c7b      	adds	r3, r7, #1
 80154c2:	444b      	add	r3, r9
 80154c4:	106d      	asrs	r5, r5, #1
 80154c6:	429d      	cmp	r5, r3
 80154c8:	bf38      	it	cc
 80154ca:	461d      	movcc	r5, r3
 80154cc:	0553      	lsls	r3, r2, #21
 80154ce:	d527      	bpl.n	8015520 <__ssputs_r+0x8c>
 80154d0:	4629      	mov	r1, r5
 80154d2:	f7fe fc0f 	bl	8013cf4 <_malloc_r>
 80154d6:	4606      	mov	r6, r0
 80154d8:	b360      	cbz	r0, 8015534 <__ssputs_r+0xa0>
 80154da:	6921      	ldr	r1, [r4, #16]
 80154dc:	464a      	mov	r2, r9
 80154de:	f7fd fd06 	bl	8012eee <memcpy>
 80154e2:	89a3      	ldrh	r3, [r4, #12]
 80154e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80154e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154ec:	81a3      	strh	r3, [r4, #12]
 80154ee:	6126      	str	r6, [r4, #16]
 80154f0:	6165      	str	r5, [r4, #20]
 80154f2:	444e      	add	r6, r9
 80154f4:	eba5 0509 	sub.w	r5, r5, r9
 80154f8:	6026      	str	r6, [r4, #0]
 80154fa:	60a5      	str	r5, [r4, #8]
 80154fc:	463e      	mov	r6, r7
 80154fe:	42be      	cmp	r6, r7
 8015500:	d900      	bls.n	8015504 <__ssputs_r+0x70>
 8015502:	463e      	mov	r6, r7
 8015504:	6820      	ldr	r0, [r4, #0]
 8015506:	4632      	mov	r2, r6
 8015508:	4641      	mov	r1, r8
 801550a:	f000 fd5c 	bl	8015fc6 <memmove>
 801550e:	68a3      	ldr	r3, [r4, #8]
 8015510:	1b9b      	subs	r3, r3, r6
 8015512:	60a3      	str	r3, [r4, #8]
 8015514:	6823      	ldr	r3, [r4, #0]
 8015516:	4433      	add	r3, r6
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	2000      	movs	r0, #0
 801551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015520:	462a      	mov	r2, r5
 8015522:	f001 f922 	bl	801676a <_realloc_r>
 8015526:	4606      	mov	r6, r0
 8015528:	2800      	cmp	r0, #0
 801552a:	d1e0      	bne.n	80154ee <__ssputs_r+0x5a>
 801552c:	6921      	ldr	r1, [r4, #16]
 801552e:	4650      	mov	r0, sl
 8015530:	f7fe fb6c 	bl	8013c0c <_free_r>
 8015534:	230c      	movs	r3, #12
 8015536:	f8ca 3000 	str.w	r3, [sl]
 801553a:	89a3      	ldrh	r3, [r4, #12]
 801553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015540:	81a3      	strh	r3, [r4, #12]
 8015542:	f04f 30ff 	mov.w	r0, #4294967295
 8015546:	e7e9      	b.n	801551c <__ssputs_r+0x88>

08015548 <_svfiprintf_r>:
 8015548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801554c:	4698      	mov	r8, r3
 801554e:	898b      	ldrh	r3, [r1, #12]
 8015550:	061b      	lsls	r3, r3, #24
 8015552:	b09d      	sub	sp, #116	; 0x74
 8015554:	4607      	mov	r7, r0
 8015556:	460d      	mov	r5, r1
 8015558:	4614      	mov	r4, r2
 801555a:	d50e      	bpl.n	801557a <_svfiprintf_r+0x32>
 801555c:	690b      	ldr	r3, [r1, #16]
 801555e:	b963      	cbnz	r3, 801557a <_svfiprintf_r+0x32>
 8015560:	2140      	movs	r1, #64	; 0x40
 8015562:	f7fe fbc7 	bl	8013cf4 <_malloc_r>
 8015566:	6028      	str	r0, [r5, #0]
 8015568:	6128      	str	r0, [r5, #16]
 801556a:	b920      	cbnz	r0, 8015576 <_svfiprintf_r+0x2e>
 801556c:	230c      	movs	r3, #12
 801556e:	603b      	str	r3, [r7, #0]
 8015570:	f04f 30ff 	mov.w	r0, #4294967295
 8015574:	e0d0      	b.n	8015718 <_svfiprintf_r+0x1d0>
 8015576:	2340      	movs	r3, #64	; 0x40
 8015578:	616b      	str	r3, [r5, #20]
 801557a:	2300      	movs	r3, #0
 801557c:	9309      	str	r3, [sp, #36]	; 0x24
 801557e:	2320      	movs	r3, #32
 8015580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015584:	f8cd 800c 	str.w	r8, [sp, #12]
 8015588:	2330      	movs	r3, #48	; 0x30
 801558a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015730 <_svfiprintf_r+0x1e8>
 801558e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015592:	f04f 0901 	mov.w	r9, #1
 8015596:	4623      	mov	r3, r4
 8015598:	469a      	mov	sl, r3
 801559a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801559e:	b10a      	cbz	r2, 80155a4 <_svfiprintf_r+0x5c>
 80155a0:	2a25      	cmp	r2, #37	; 0x25
 80155a2:	d1f9      	bne.n	8015598 <_svfiprintf_r+0x50>
 80155a4:	ebba 0b04 	subs.w	fp, sl, r4
 80155a8:	d00b      	beq.n	80155c2 <_svfiprintf_r+0x7a>
 80155aa:	465b      	mov	r3, fp
 80155ac:	4622      	mov	r2, r4
 80155ae:	4629      	mov	r1, r5
 80155b0:	4638      	mov	r0, r7
 80155b2:	f7ff ff6f 	bl	8015494 <__ssputs_r>
 80155b6:	3001      	adds	r0, #1
 80155b8:	f000 80a9 	beq.w	801570e <_svfiprintf_r+0x1c6>
 80155bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155be:	445a      	add	r2, fp
 80155c0:	9209      	str	r2, [sp, #36]	; 0x24
 80155c2:	f89a 3000 	ldrb.w	r3, [sl]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f000 80a1 	beq.w	801570e <_svfiprintf_r+0x1c6>
 80155cc:	2300      	movs	r3, #0
 80155ce:	f04f 32ff 	mov.w	r2, #4294967295
 80155d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155d6:	f10a 0a01 	add.w	sl, sl, #1
 80155da:	9304      	str	r3, [sp, #16]
 80155dc:	9307      	str	r3, [sp, #28]
 80155de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155e2:	931a      	str	r3, [sp, #104]	; 0x68
 80155e4:	4654      	mov	r4, sl
 80155e6:	2205      	movs	r2, #5
 80155e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155ec:	4850      	ldr	r0, [pc, #320]	; (8015730 <_svfiprintf_r+0x1e8>)
 80155ee:	f7ea fe17 	bl	8000220 <memchr>
 80155f2:	9a04      	ldr	r2, [sp, #16]
 80155f4:	b9d8      	cbnz	r0, 801562e <_svfiprintf_r+0xe6>
 80155f6:	06d0      	lsls	r0, r2, #27
 80155f8:	bf44      	itt	mi
 80155fa:	2320      	movmi	r3, #32
 80155fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015600:	0711      	lsls	r1, r2, #28
 8015602:	bf44      	itt	mi
 8015604:	232b      	movmi	r3, #43	; 0x2b
 8015606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801560a:	f89a 3000 	ldrb.w	r3, [sl]
 801560e:	2b2a      	cmp	r3, #42	; 0x2a
 8015610:	d015      	beq.n	801563e <_svfiprintf_r+0xf6>
 8015612:	9a07      	ldr	r2, [sp, #28]
 8015614:	4654      	mov	r4, sl
 8015616:	2000      	movs	r0, #0
 8015618:	f04f 0c0a 	mov.w	ip, #10
 801561c:	4621      	mov	r1, r4
 801561e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015622:	3b30      	subs	r3, #48	; 0x30
 8015624:	2b09      	cmp	r3, #9
 8015626:	d94d      	bls.n	80156c4 <_svfiprintf_r+0x17c>
 8015628:	b1b0      	cbz	r0, 8015658 <_svfiprintf_r+0x110>
 801562a:	9207      	str	r2, [sp, #28]
 801562c:	e014      	b.n	8015658 <_svfiprintf_r+0x110>
 801562e:	eba0 0308 	sub.w	r3, r0, r8
 8015632:	fa09 f303 	lsl.w	r3, r9, r3
 8015636:	4313      	orrs	r3, r2
 8015638:	9304      	str	r3, [sp, #16]
 801563a:	46a2      	mov	sl, r4
 801563c:	e7d2      	b.n	80155e4 <_svfiprintf_r+0x9c>
 801563e:	9b03      	ldr	r3, [sp, #12]
 8015640:	1d19      	adds	r1, r3, #4
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	9103      	str	r1, [sp, #12]
 8015646:	2b00      	cmp	r3, #0
 8015648:	bfbb      	ittet	lt
 801564a:	425b      	neglt	r3, r3
 801564c:	f042 0202 	orrlt.w	r2, r2, #2
 8015650:	9307      	strge	r3, [sp, #28]
 8015652:	9307      	strlt	r3, [sp, #28]
 8015654:	bfb8      	it	lt
 8015656:	9204      	strlt	r2, [sp, #16]
 8015658:	7823      	ldrb	r3, [r4, #0]
 801565a:	2b2e      	cmp	r3, #46	; 0x2e
 801565c:	d10c      	bne.n	8015678 <_svfiprintf_r+0x130>
 801565e:	7863      	ldrb	r3, [r4, #1]
 8015660:	2b2a      	cmp	r3, #42	; 0x2a
 8015662:	d134      	bne.n	80156ce <_svfiprintf_r+0x186>
 8015664:	9b03      	ldr	r3, [sp, #12]
 8015666:	1d1a      	adds	r2, r3, #4
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	9203      	str	r2, [sp, #12]
 801566c:	2b00      	cmp	r3, #0
 801566e:	bfb8      	it	lt
 8015670:	f04f 33ff 	movlt.w	r3, #4294967295
 8015674:	3402      	adds	r4, #2
 8015676:	9305      	str	r3, [sp, #20]
 8015678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015740 <_svfiprintf_r+0x1f8>
 801567c:	7821      	ldrb	r1, [r4, #0]
 801567e:	2203      	movs	r2, #3
 8015680:	4650      	mov	r0, sl
 8015682:	f7ea fdcd 	bl	8000220 <memchr>
 8015686:	b138      	cbz	r0, 8015698 <_svfiprintf_r+0x150>
 8015688:	9b04      	ldr	r3, [sp, #16]
 801568a:	eba0 000a 	sub.w	r0, r0, sl
 801568e:	2240      	movs	r2, #64	; 0x40
 8015690:	4082      	lsls	r2, r0
 8015692:	4313      	orrs	r3, r2
 8015694:	3401      	adds	r4, #1
 8015696:	9304      	str	r3, [sp, #16]
 8015698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801569c:	4825      	ldr	r0, [pc, #148]	; (8015734 <_svfiprintf_r+0x1ec>)
 801569e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156a2:	2206      	movs	r2, #6
 80156a4:	f7ea fdbc 	bl	8000220 <memchr>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d038      	beq.n	801571e <_svfiprintf_r+0x1d6>
 80156ac:	4b22      	ldr	r3, [pc, #136]	; (8015738 <_svfiprintf_r+0x1f0>)
 80156ae:	bb1b      	cbnz	r3, 80156f8 <_svfiprintf_r+0x1b0>
 80156b0:	9b03      	ldr	r3, [sp, #12]
 80156b2:	3307      	adds	r3, #7
 80156b4:	f023 0307 	bic.w	r3, r3, #7
 80156b8:	3308      	adds	r3, #8
 80156ba:	9303      	str	r3, [sp, #12]
 80156bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156be:	4433      	add	r3, r6
 80156c0:	9309      	str	r3, [sp, #36]	; 0x24
 80156c2:	e768      	b.n	8015596 <_svfiprintf_r+0x4e>
 80156c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80156c8:	460c      	mov	r4, r1
 80156ca:	2001      	movs	r0, #1
 80156cc:	e7a6      	b.n	801561c <_svfiprintf_r+0xd4>
 80156ce:	2300      	movs	r3, #0
 80156d0:	3401      	adds	r4, #1
 80156d2:	9305      	str	r3, [sp, #20]
 80156d4:	4619      	mov	r1, r3
 80156d6:	f04f 0c0a 	mov.w	ip, #10
 80156da:	4620      	mov	r0, r4
 80156dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156e0:	3a30      	subs	r2, #48	; 0x30
 80156e2:	2a09      	cmp	r2, #9
 80156e4:	d903      	bls.n	80156ee <_svfiprintf_r+0x1a6>
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d0c6      	beq.n	8015678 <_svfiprintf_r+0x130>
 80156ea:	9105      	str	r1, [sp, #20]
 80156ec:	e7c4      	b.n	8015678 <_svfiprintf_r+0x130>
 80156ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80156f2:	4604      	mov	r4, r0
 80156f4:	2301      	movs	r3, #1
 80156f6:	e7f0      	b.n	80156da <_svfiprintf_r+0x192>
 80156f8:	ab03      	add	r3, sp, #12
 80156fa:	9300      	str	r3, [sp, #0]
 80156fc:	462a      	mov	r2, r5
 80156fe:	4b0f      	ldr	r3, [pc, #60]	; (801573c <_svfiprintf_r+0x1f4>)
 8015700:	a904      	add	r1, sp, #16
 8015702:	4638      	mov	r0, r7
 8015704:	f7fc fbe2 	bl	8011ecc <_printf_float>
 8015708:	1c42      	adds	r2, r0, #1
 801570a:	4606      	mov	r6, r0
 801570c:	d1d6      	bne.n	80156bc <_svfiprintf_r+0x174>
 801570e:	89ab      	ldrh	r3, [r5, #12]
 8015710:	065b      	lsls	r3, r3, #25
 8015712:	f53f af2d 	bmi.w	8015570 <_svfiprintf_r+0x28>
 8015716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015718:	b01d      	add	sp, #116	; 0x74
 801571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801571e:	ab03      	add	r3, sp, #12
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	462a      	mov	r2, r5
 8015724:	4b05      	ldr	r3, [pc, #20]	; (801573c <_svfiprintf_r+0x1f4>)
 8015726:	a904      	add	r1, sp, #16
 8015728:	4638      	mov	r0, r7
 801572a:	f7fc fe73 	bl	8012414 <_printf_i>
 801572e:	e7eb      	b.n	8015708 <_svfiprintf_r+0x1c0>
 8015730:	080188f1 	.word	0x080188f1
 8015734:	080188fb 	.word	0x080188fb
 8015738:	08011ecd 	.word	0x08011ecd
 801573c:	08015495 	.word	0x08015495
 8015740:	080188f7 	.word	0x080188f7

08015744 <_sungetc_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	1c4b      	adds	r3, r1, #1
 8015748:	4614      	mov	r4, r2
 801574a:	d103      	bne.n	8015754 <_sungetc_r+0x10>
 801574c:	f04f 35ff 	mov.w	r5, #4294967295
 8015750:	4628      	mov	r0, r5
 8015752:	bd38      	pop	{r3, r4, r5, pc}
 8015754:	8993      	ldrh	r3, [r2, #12]
 8015756:	f023 0320 	bic.w	r3, r3, #32
 801575a:	8193      	strh	r3, [r2, #12]
 801575c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801575e:	6852      	ldr	r2, [r2, #4]
 8015760:	b2cd      	uxtb	r5, r1
 8015762:	b18b      	cbz	r3, 8015788 <_sungetc_r+0x44>
 8015764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015766:	4293      	cmp	r3, r2
 8015768:	dd08      	ble.n	801577c <_sungetc_r+0x38>
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	1e5a      	subs	r2, r3, #1
 801576e:	6022      	str	r2, [r4, #0]
 8015770:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015774:	6863      	ldr	r3, [r4, #4]
 8015776:	3301      	adds	r3, #1
 8015778:	6063      	str	r3, [r4, #4]
 801577a:	e7e9      	b.n	8015750 <_sungetc_r+0xc>
 801577c:	4621      	mov	r1, r4
 801577e:	f000 fbe8 	bl	8015f52 <__submore>
 8015782:	2800      	cmp	r0, #0
 8015784:	d0f1      	beq.n	801576a <_sungetc_r+0x26>
 8015786:	e7e1      	b.n	801574c <_sungetc_r+0x8>
 8015788:	6921      	ldr	r1, [r4, #16]
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	b151      	cbz	r1, 80157a4 <_sungetc_r+0x60>
 801578e:	4299      	cmp	r1, r3
 8015790:	d208      	bcs.n	80157a4 <_sungetc_r+0x60>
 8015792:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015796:	42a9      	cmp	r1, r5
 8015798:	d104      	bne.n	80157a4 <_sungetc_r+0x60>
 801579a:	3b01      	subs	r3, #1
 801579c:	3201      	adds	r2, #1
 801579e:	6023      	str	r3, [r4, #0]
 80157a0:	6062      	str	r2, [r4, #4]
 80157a2:	e7d5      	b.n	8015750 <_sungetc_r+0xc>
 80157a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80157a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157ac:	6363      	str	r3, [r4, #52]	; 0x34
 80157ae:	2303      	movs	r3, #3
 80157b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80157b2:	4623      	mov	r3, r4
 80157b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	2301      	movs	r3, #1
 80157bc:	e7dc      	b.n	8015778 <_sungetc_r+0x34>

080157be <__ssrefill_r>:
 80157be:	b510      	push	{r4, lr}
 80157c0:	460c      	mov	r4, r1
 80157c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80157c4:	b169      	cbz	r1, 80157e2 <__ssrefill_r+0x24>
 80157c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157ca:	4299      	cmp	r1, r3
 80157cc:	d001      	beq.n	80157d2 <__ssrefill_r+0x14>
 80157ce:	f7fe fa1d 	bl	8013c0c <_free_r>
 80157d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157d4:	6063      	str	r3, [r4, #4]
 80157d6:	2000      	movs	r0, #0
 80157d8:	6360      	str	r0, [r4, #52]	; 0x34
 80157da:	b113      	cbz	r3, 80157e2 <__ssrefill_r+0x24>
 80157dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157de:	6023      	str	r3, [r4, #0]
 80157e0:	bd10      	pop	{r4, pc}
 80157e2:	6923      	ldr	r3, [r4, #16]
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	2300      	movs	r3, #0
 80157e8:	6063      	str	r3, [r4, #4]
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	f043 0320 	orr.w	r3, r3, #32
 80157f0:	81a3      	strh	r3, [r4, #12]
 80157f2:	f04f 30ff 	mov.w	r0, #4294967295
 80157f6:	e7f3      	b.n	80157e0 <__ssrefill_r+0x22>

080157f8 <__ssvfiscanf_r>:
 80157f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157fc:	460c      	mov	r4, r1
 80157fe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015802:	2100      	movs	r1, #0
 8015804:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015808:	49a6      	ldr	r1, [pc, #664]	; (8015aa4 <__ssvfiscanf_r+0x2ac>)
 801580a:	91a0      	str	r1, [sp, #640]	; 0x280
 801580c:	f10d 0804 	add.w	r8, sp, #4
 8015810:	49a5      	ldr	r1, [pc, #660]	; (8015aa8 <__ssvfiscanf_r+0x2b0>)
 8015812:	4fa6      	ldr	r7, [pc, #664]	; (8015aac <__ssvfiscanf_r+0x2b4>)
 8015814:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015ab0 <__ssvfiscanf_r+0x2b8>
 8015818:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801581c:	4606      	mov	r6, r0
 801581e:	91a1      	str	r1, [sp, #644]	; 0x284
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	7813      	ldrb	r3, [r2, #0]
 8015824:	2b00      	cmp	r3, #0
 8015826:	f000 815a 	beq.w	8015ade <__ssvfiscanf_r+0x2e6>
 801582a:	5cf9      	ldrb	r1, [r7, r3]
 801582c:	f011 0108 	ands.w	r1, r1, #8
 8015830:	f102 0501 	add.w	r5, r2, #1
 8015834:	d019      	beq.n	801586a <__ssvfiscanf_r+0x72>
 8015836:	6863      	ldr	r3, [r4, #4]
 8015838:	2b00      	cmp	r3, #0
 801583a:	dd0f      	ble.n	801585c <__ssvfiscanf_r+0x64>
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	781a      	ldrb	r2, [r3, #0]
 8015840:	5cba      	ldrb	r2, [r7, r2]
 8015842:	0712      	lsls	r2, r2, #28
 8015844:	d401      	bmi.n	801584a <__ssvfiscanf_r+0x52>
 8015846:	462a      	mov	r2, r5
 8015848:	e7eb      	b.n	8015822 <__ssvfiscanf_r+0x2a>
 801584a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801584c:	3201      	adds	r2, #1
 801584e:	9245      	str	r2, [sp, #276]	; 0x114
 8015850:	6862      	ldr	r2, [r4, #4]
 8015852:	3301      	adds	r3, #1
 8015854:	3a01      	subs	r2, #1
 8015856:	6062      	str	r2, [r4, #4]
 8015858:	6023      	str	r3, [r4, #0]
 801585a:	e7ec      	b.n	8015836 <__ssvfiscanf_r+0x3e>
 801585c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801585e:	4621      	mov	r1, r4
 8015860:	4630      	mov	r0, r6
 8015862:	4798      	blx	r3
 8015864:	2800      	cmp	r0, #0
 8015866:	d0e9      	beq.n	801583c <__ssvfiscanf_r+0x44>
 8015868:	e7ed      	b.n	8015846 <__ssvfiscanf_r+0x4e>
 801586a:	2b25      	cmp	r3, #37	; 0x25
 801586c:	d012      	beq.n	8015894 <__ssvfiscanf_r+0x9c>
 801586e:	469a      	mov	sl, r3
 8015870:	6863      	ldr	r3, [r4, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	f340 8091 	ble.w	801599a <__ssvfiscanf_r+0x1a2>
 8015878:	6822      	ldr	r2, [r4, #0]
 801587a:	7813      	ldrb	r3, [r2, #0]
 801587c:	4553      	cmp	r3, sl
 801587e:	f040 812e 	bne.w	8015ade <__ssvfiscanf_r+0x2e6>
 8015882:	6863      	ldr	r3, [r4, #4]
 8015884:	3b01      	subs	r3, #1
 8015886:	6063      	str	r3, [r4, #4]
 8015888:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801588a:	3201      	adds	r2, #1
 801588c:	3301      	adds	r3, #1
 801588e:	6022      	str	r2, [r4, #0]
 8015890:	9345      	str	r3, [sp, #276]	; 0x114
 8015892:	e7d8      	b.n	8015846 <__ssvfiscanf_r+0x4e>
 8015894:	9141      	str	r1, [sp, #260]	; 0x104
 8015896:	9143      	str	r1, [sp, #268]	; 0x10c
 8015898:	7853      	ldrb	r3, [r2, #1]
 801589a:	2b2a      	cmp	r3, #42	; 0x2a
 801589c:	bf02      	ittt	eq
 801589e:	2310      	moveq	r3, #16
 80158a0:	1c95      	addeq	r5, r2, #2
 80158a2:	9341      	streq	r3, [sp, #260]	; 0x104
 80158a4:	220a      	movs	r2, #10
 80158a6:	46aa      	mov	sl, r5
 80158a8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80158ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80158b0:	2b09      	cmp	r3, #9
 80158b2:	d91c      	bls.n	80158ee <__ssvfiscanf_r+0xf6>
 80158b4:	487e      	ldr	r0, [pc, #504]	; (8015ab0 <__ssvfiscanf_r+0x2b8>)
 80158b6:	2203      	movs	r2, #3
 80158b8:	f7ea fcb2 	bl	8000220 <memchr>
 80158bc:	b138      	cbz	r0, 80158ce <__ssvfiscanf_r+0xd6>
 80158be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80158c0:	eba0 0009 	sub.w	r0, r0, r9
 80158c4:	2301      	movs	r3, #1
 80158c6:	4083      	lsls	r3, r0
 80158c8:	4313      	orrs	r3, r2
 80158ca:	9341      	str	r3, [sp, #260]	; 0x104
 80158cc:	4655      	mov	r5, sl
 80158ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80158d2:	2b78      	cmp	r3, #120	; 0x78
 80158d4:	d806      	bhi.n	80158e4 <__ssvfiscanf_r+0xec>
 80158d6:	2b57      	cmp	r3, #87	; 0x57
 80158d8:	d810      	bhi.n	80158fc <__ssvfiscanf_r+0x104>
 80158da:	2b25      	cmp	r3, #37	; 0x25
 80158dc:	d0c7      	beq.n	801586e <__ssvfiscanf_r+0x76>
 80158de:	d857      	bhi.n	8015990 <__ssvfiscanf_r+0x198>
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d065      	beq.n	80159b0 <__ssvfiscanf_r+0x1b8>
 80158e4:	2303      	movs	r3, #3
 80158e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80158e8:	230a      	movs	r3, #10
 80158ea:	9342      	str	r3, [sp, #264]	; 0x108
 80158ec:	e076      	b.n	80159dc <__ssvfiscanf_r+0x1e4>
 80158ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80158f0:	fb02 1103 	mla	r1, r2, r3, r1
 80158f4:	3930      	subs	r1, #48	; 0x30
 80158f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80158f8:	4655      	mov	r5, sl
 80158fa:	e7d4      	b.n	80158a6 <__ssvfiscanf_r+0xae>
 80158fc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015900:	2a20      	cmp	r2, #32
 8015902:	d8ef      	bhi.n	80158e4 <__ssvfiscanf_r+0xec>
 8015904:	a101      	add	r1, pc, #4	; (adr r1, 801590c <__ssvfiscanf_r+0x114>)
 8015906:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801590a:	bf00      	nop
 801590c:	080159bf 	.word	0x080159bf
 8015910:	080158e5 	.word	0x080158e5
 8015914:	080158e5 	.word	0x080158e5
 8015918:	08015a1d 	.word	0x08015a1d
 801591c:	080158e5 	.word	0x080158e5
 8015920:	080158e5 	.word	0x080158e5
 8015924:	080158e5 	.word	0x080158e5
 8015928:	080158e5 	.word	0x080158e5
 801592c:	080158e5 	.word	0x080158e5
 8015930:	080158e5 	.word	0x080158e5
 8015934:	080158e5 	.word	0x080158e5
 8015938:	08015a33 	.word	0x08015a33
 801593c:	08015a19 	.word	0x08015a19
 8015940:	08015997 	.word	0x08015997
 8015944:	08015997 	.word	0x08015997
 8015948:	08015997 	.word	0x08015997
 801594c:	080158e5 	.word	0x080158e5
 8015950:	080159d5 	.word	0x080159d5
 8015954:	080158e5 	.word	0x080158e5
 8015958:	080158e5 	.word	0x080158e5
 801595c:	080158e5 	.word	0x080158e5
 8015960:	080158e5 	.word	0x080158e5
 8015964:	08015a43 	.word	0x08015a43
 8015968:	08015a11 	.word	0x08015a11
 801596c:	080159b7 	.word	0x080159b7
 8015970:	080158e5 	.word	0x080158e5
 8015974:	080158e5 	.word	0x080158e5
 8015978:	08015a3f 	.word	0x08015a3f
 801597c:	080158e5 	.word	0x080158e5
 8015980:	08015a19 	.word	0x08015a19
 8015984:	080158e5 	.word	0x080158e5
 8015988:	080158e5 	.word	0x080158e5
 801598c:	080159bf 	.word	0x080159bf
 8015990:	3b45      	subs	r3, #69	; 0x45
 8015992:	2b02      	cmp	r3, #2
 8015994:	d8a6      	bhi.n	80158e4 <__ssvfiscanf_r+0xec>
 8015996:	2305      	movs	r3, #5
 8015998:	e01f      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 801599a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801599c:	4621      	mov	r1, r4
 801599e:	4630      	mov	r0, r6
 80159a0:	4798      	blx	r3
 80159a2:	2800      	cmp	r0, #0
 80159a4:	f43f af68 	beq.w	8015878 <__ssvfiscanf_r+0x80>
 80159a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80159aa:	2800      	cmp	r0, #0
 80159ac:	f040 808d 	bne.w	8015aca <__ssvfiscanf_r+0x2d2>
 80159b0:	f04f 30ff 	mov.w	r0, #4294967295
 80159b4:	e08f      	b.n	8015ad6 <__ssvfiscanf_r+0x2de>
 80159b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80159b8:	f042 0220 	orr.w	r2, r2, #32
 80159bc:	9241      	str	r2, [sp, #260]	; 0x104
 80159be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80159c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80159c4:	9241      	str	r2, [sp, #260]	; 0x104
 80159c6:	2210      	movs	r2, #16
 80159c8:	2b6f      	cmp	r3, #111	; 0x6f
 80159ca:	9242      	str	r2, [sp, #264]	; 0x108
 80159cc:	bf34      	ite	cc
 80159ce:	2303      	movcc	r3, #3
 80159d0:	2304      	movcs	r3, #4
 80159d2:	e002      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 80159d4:	2300      	movs	r3, #0
 80159d6:	9342      	str	r3, [sp, #264]	; 0x108
 80159d8:	2303      	movs	r3, #3
 80159da:	9347      	str	r3, [sp, #284]	; 0x11c
 80159dc:	6863      	ldr	r3, [r4, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dd3d      	ble.n	8015a5e <__ssvfiscanf_r+0x266>
 80159e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80159e4:	0659      	lsls	r1, r3, #25
 80159e6:	d404      	bmi.n	80159f2 <__ssvfiscanf_r+0x1fa>
 80159e8:	6823      	ldr	r3, [r4, #0]
 80159ea:	781a      	ldrb	r2, [r3, #0]
 80159ec:	5cba      	ldrb	r2, [r7, r2]
 80159ee:	0712      	lsls	r2, r2, #28
 80159f0:	d43c      	bmi.n	8015a6c <__ssvfiscanf_r+0x274>
 80159f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	dc4b      	bgt.n	8015a90 <__ssvfiscanf_r+0x298>
 80159f8:	466b      	mov	r3, sp
 80159fa:	4622      	mov	r2, r4
 80159fc:	a941      	add	r1, sp, #260	; 0x104
 80159fe:	4630      	mov	r0, r6
 8015a00:	f000 f872 	bl	8015ae8 <_scanf_chars>
 8015a04:	2801      	cmp	r0, #1
 8015a06:	d06a      	beq.n	8015ade <__ssvfiscanf_r+0x2e6>
 8015a08:	2802      	cmp	r0, #2
 8015a0a:	f47f af1c 	bne.w	8015846 <__ssvfiscanf_r+0x4e>
 8015a0e:	e7cb      	b.n	80159a8 <__ssvfiscanf_r+0x1b0>
 8015a10:	2308      	movs	r3, #8
 8015a12:	9342      	str	r3, [sp, #264]	; 0x108
 8015a14:	2304      	movs	r3, #4
 8015a16:	e7e0      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 8015a18:	220a      	movs	r2, #10
 8015a1a:	e7d5      	b.n	80159c8 <__ssvfiscanf_r+0x1d0>
 8015a1c:	4629      	mov	r1, r5
 8015a1e:	4640      	mov	r0, r8
 8015a20:	f000 fa5e 	bl	8015ee0 <__sccl>
 8015a24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a2a:	9341      	str	r3, [sp, #260]	; 0x104
 8015a2c:	4605      	mov	r5, r0
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e7d3      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 8015a32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a38:	9341      	str	r3, [sp, #260]	; 0x104
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	e7cd      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 8015a3e:	2302      	movs	r3, #2
 8015a40:	e7cb      	b.n	80159da <__ssvfiscanf_r+0x1e2>
 8015a42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015a44:	06c3      	lsls	r3, r0, #27
 8015a46:	f53f aefe 	bmi.w	8015846 <__ssvfiscanf_r+0x4e>
 8015a4a:	9b00      	ldr	r3, [sp, #0]
 8015a4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015a4e:	1d19      	adds	r1, r3, #4
 8015a50:	9100      	str	r1, [sp, #0]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	07c0      	lsls	r0, r0, #31
 8015a56:	bf4c      	ite	mi
 8015a58:	801a      	strhmi	r2, [r3, #0]
 8015a5a:	601a      	strpl	r2, [r3, #0]
 8015a5c:	e6f3      	b.n	8015846 <__ssvfiscanf_r+0x4e>
 8015a5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015a60:	4621      	mov	r1, r4
 8015a62:	4630      	mov	r0, r6
 8015a64:	4798      	blx	r3
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d0bb      	beq.n	80159e2 <__ssvfiscanf_r+0x1ea>
 8015a6a:	e79d      	b.n	80159a8 <__ssvfiscanf_r+0x1b0>
 8015a6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015a6e:	3201      	adds	r2, #1
 8015a70:	9245      	str	r2, [sp, #276]	; 0x114
 8015a72:	6862      	ldr	r2, [r4, #4]
 8015a74:	3a01      	subs	r2, #1
 8015a76:	2a00      	cmp	r2, #0
 8015a78:	6062      	str	r2, [r4, #4]
 8015a7a:	dd02      	ble.n	8015a82 <__ssvfiscanf_r+0x28a>
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	6023      	str	r3, [r4, #0]
 8015a80:	e7b2      	b.n	80159e8 <__ssvfiscanf_r+0x1f0>
 8015a82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015a84:	4621      	mov	r1, r4
 8015a86:	4630      	mov	r0, r6
 8015a88:	4798      	blx	r3
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	d0ac      	beq.n	80159e8 <__ssvfiscanf_r+0x1f0>
 8015a8e:	e78b      	b.n	80159a8 <__ssvfiscanf_r+0x1b0>
 8015a90:	2b04      	cmp	r3, #4
 8015a92:	dc0f      	bgt.n	8015ab4 <__ssvfiscanf_r+0x2bc>
 8015a94:	466b      	mov	r3, sp
 8015a96:	4622      	mov	r2, r4
 8015a98:	a941      	add	r1, sp, #260	; 0x104
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f000 f87e 	bl	8015b9c <_scanf_i>
 8015aa0:	e7b0      	b.n	8015a04 <__ssvfiscanf_r+0x20c>
 8015aa2:	bf00      	nop
 8015aa4:	08015745 	.word	0x08015745
 8015aa8:	080157bf 	.word	0x080157bf
 8015aac:	080187f1 	.word	0x080187f1
 8015ab0:	080188f7 	.word	0x080188f7
 8015ab4:	4b0b      	ldr	r3, [pc, #44]	; (8015ae4 <__ssvfiscanf_r+0x2ec>)
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f43f aec5 	beq.w	8015846 <__ssvfiscanf_r+0x4e>
 8015abc:	466b      	mov	r3, sp
 8015abe:	4622      	mov	r2, r4
 8015ac0:	a941      	add	r1, sp, #260	; 0x104
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f7fc fdc8 	bl	8012658 <_scanf_float>
 8015ac8:	e79c      	b.n	8015a04 <__ssvfiscanf_r+0x20c>
 8015aca:	89a3      	ldrh	r3, [r4, #12]
 8015acc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015ad0:	bf18      	it	ne
 8015ad2:	f04f 30ff 	movne.w	r0, #4294967295
 8015ad6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ade:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015ae0:	e7f9      	b.n	8015ad6 <__ssvfiscanf_r+0x2de>
 8015ae2:	bf00      	nop
 8015ae4:	08012659 	.word	0x08012659

08015ae8 <_scanf_chars>:
 8015ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015aec:	4615      	mov	r5, r2
 8015aee:	688a      	ldr	r2, [r1, #8]
 8015af0:	4680      	mov	r8, r0
 8015af2:	460c      	mov	r4, r1
 8015af4:	b932      	cbnz	r2, 8015b04 <_scanf_chars+0x1c>
 8015af6:	698a      	ldr	r2, [r1, #24]
 8015af8:	2a00      	cmp	r2, #0
 8015afa:	bf0c      	ite	eq
 8015afc:	2201      	moveq	r2, #1
 8015afe:	f04f 32ff 	movne.w	r2, #4294967295
 8015b02:	608a      	str	r2, [r1, #8]
 8015b04:	6822      	ldr	r2, [r4, #0]
 8015b06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015b98 <_scanf_chars+0xb0>
 8015b0a:	06d1      	lsls	r1, r2, #27
 8015b0c:	bf5f      	itttt	pl
 8015b0e:	681a      	ldrpl	r2, [r3, #0]
 8015b10:	1d11      	addpl	r1, r2, #4
 8015b12:	6019      	strpl	r1, [r3, #0]
 8015b14:	6816      	ldrpl	r6, [r2, #0]
 8015b16:	2700      	movs	r7, #0
 8015b18:	69a0      	ldr	r0, [r4, #24]
 8015b1a:	b188      	cbz	r0, 8015b40 <_scanf_chars+0x58>
 8015b1c:	2801      	cmp	r0, #1
 8015b1e:	d107      	bne.n	8015b30 <_scanf_chars+0x48>
 8015b20:	682a      	ldr	r2, [r5, #0]
 8015b22:	7811      	ldrb	r1, [r2, #0]
 8015b24:	6962      	ldr	r2, [r4, #20]
 8015b26:	5c52      	ldrb	r2, [r2, r1]
 8015b28:	b952      	cbnz	r2, 8015b40 <_scanf_chars+0x58>
 8015b2a:	2f00      	cmp	r7, #0
 8015b2c:	d031      	beq.n	8015b92 <_scanf_chars+0xaa>
 8015b2e:	e022      	b.n	8015b76 <_scanf_chars+0x8e>
 8015b30:	2802      	cmp	r0, #2
 8015b32:	d120      	bne.n	8015b76 <_scanf_chars+0x8e>
 8015b34:	682b      	ldr	r3, [r5, #0]
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015b3c:	071b      	lsls	r3, r3, #28
 8015b3e:	d41a      	bmi.n	8015b76 <_scanf_chars+0x8e>
 8015b40:	6823      	ldr	r3, [r4, #0]
 8015b42:	06da      	lsls	r2, r3, #27
 8015b44:	bf5e      	ittt	pl
 8015b46:	682b      	ldrpl	r3, [r5, #0]
 8015b48:	781b      	ldrbpl	r3, [r3, #0]
 8015b4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015b4e:	682a      	ldr	r2, [r5, #0]
 8015b50:	686b      	ldr	r3, [r5, #4]
 8015b52:	3201      	adds	r2, #1
 8015b54:	602a      	str	r2, [r5, #0]
 8015b56:	68a2      	ldr	r2, [r4, #8]
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	3a01      	subs	r2, #1
 8015b5c:	606b      	str	r3, [r5, #4]
 8015b5e:	3701      	adds	r7, #1
 8015b60:	60a2      	str	r2, [r4, #8]
 8015b62:	b142      	cbz	r2, 8015b76 <_scanf_chars+0x8e>
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	dcd7      	bgt.n	8015b18 <_scanf_chars+0x30>
 8015b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b6c:	4629      	mov	r1, r5
 8015b6e:	4640      	mov	r0, r8
 8015b70:	4798      	blx	r3
 8015b72:	2800      	cmp	r0, #0
 8015b74:	d0d0      	beq.n	8015b18 <_scanf_chars+0x30>
 8015b76:	6823      	ldr	r3, [r4, #0]
 8015b78:	f013 0310 	ands.w	r3, r3, #16
 8015b7c:	d105      	bne.n	8015b8a <_scanf_chars+0xa2>
 8015b7e:	68e2      	ldr	r2, [r4, #12]
 8015b80:	3201      	adds	r2, #1
 8015b82:	60e2      	str	r2, [r4, #12]
 8015b84:	69a2      	ldr	r2, [r4, #24]
 8015b86:	b102      	cbz	r2, 8015b8a <_scanf_chars+0xa2>
 8015b88:	7033      	strb	r3, [r6, #0]
 8015b8a:	6923      	ldr	r3, [r4, #16]
 8015b8c:	443b      	add	r3, r7
 8015b8e:	6123      	str	r3, [r4, #16]
 8015b90:	2000      	movs	r0, #0
 8015b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b96:	bf00      	nop
 8015b98:	080187f1 	.word	0x080187f1

08015b9c <_scanf_i>:
 8015b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba0:	4698      	mov	r8, r3
 8015ba2:	4b74      	ldr	r3, [pc, #464]	; (8015d74 <_scanf_i+0x1d8>)
 8015ba4:	460c      	mov	r4, r1
 8015ba6:	4682      	mov	sl, r0
 8015ba8:	4616      	mov	r6, r2
 8015baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bae:	b087      	sub	sp, #28
 8015bb0:	ab03      	add	r3, sp, #12
 8015bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015bb6:	4b70      	ldr	r3, [pc, #448]	; (8015d78 <_scanf_i+0x1dc>)
 8015bb8:	69a1      	ldr	r1, [r4, #24]
 8015bba:	4a70      	ldr	r2, [pc, #448]	; (8015d7c <_scanf_i+0x1e0>)
 8015bbc:	2903      	cmp	r1, #3
 8015bbe:	bf18      	it	ne
 8015bc0:	461a      	movne	r2, r3
 8015bc2:	68a3      	ldr	r3, [r4, #8]
 8015bc4:	9201      	str	r2, [sp, #4]
 8015bc6:	1e5a      	subs	r2, r3, #1
 8015bc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015bcc:	bf88      	it	hi
 8015bce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015bd2:	4627      	mov	r7, r4
 8015bd4:	bf82      	ittt	hi
 8015bd6:	eb03 0905 	addhi.w	r9, r3, r5
 8015bda:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015bde:	60a3      	strhi	r3, [r4, #8]
 8015be0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015be4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015be8:	bf98      	it	ls
 8015bea:	f04f 0900 	movls.w	r9, #0
 8015bee:	6023      	str	r3, [r4, #0]
 8015bf0:	463d      	mov	r5, r7
 8015bf2:	f04f 0b00 	mov.w	fp, #0
 8015bf6:	6831      	ldr	r1, [r6, #0]
 8015bf8:	ab03      	add	r3, sp, #12
 8015bfa:	7809      	ldrb	r1, [r1, #0]
 8015bfc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015c00:	2202      	movs	r2, #2
 8015c02:	f7ea fb0d 	bl	8000220 <memchr>
 8015c06:	b328      	cbz	r0, 8015c54 <_scanf_i+0xb8>
 8015c08:	f1bb 0f01 	cmp.w	fp, #1
 8015c0c:	d159      	bne.n	8015cc2 <_scanf_i+0x126>
 8015c0e:	6862      	ldr	r2, [r4, #4]
 8015c10:	b92a      	cbnz	r2, 8015c1e <_scanf_i+0x82>
 8015c12:	6822      	ldr	r2, [r4, #0]
 8015c14:	2308      	movs	r3, #8
 8015c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015c1a:	6063      	str	r3, [r4, #4]
 8015c1c:	6022      	str	r2, [r4, #0]
 8015c1e:	6822      	ldr	r2, [r4, #0]
 8015c20:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015c24:	6022      	str	r2, [r4, #0]
 8015c26:	68a2      	ldr	r2, [r4, #8]
 8015c28:	1e51      	subs	r1, r2, #1
 8015c2a:	60a1      	str	r1, [r4, #8]
 8015c2c:	b192      	cbz	r2, 8015c54 <_scanf_i+0xb8>
 8015c2e:	6832      	ldr	r2, [r6, #0]
 8015c30:	1c51      	adds	r1, r2, #1
 8015c32:	6031      	str	r1, [r6, #0]
 8015c34:	7812      	ldrb	r2, [r2, #0]
 8015c36:	f805 2b01 	strb.w	r2, [r5], #1
 8015c3a:	6872      	ldr	r2, [r6, #4]
 8015c3c:	3a01      	subs	r2, #1
 8015c3e:	2a00      	cmp	r2, #0
 8015c40:	6072      	str	r2, [r6, #4]
 8015c42:	dc07      	bgt.n	8015c54 <_scanf_i+0xb8>
 8015c44:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015c48:	4631      	mov	r1, r6
 8015c4a:	4650      	mov	r0, sl
 8015c4c:	4790      	blx	r2
 8015c4e:	2800      	cmp	r0, #0
 8015c50:	f040 8085 	bne.w	8015d5e <_scanf_i+0x1c2>
 8015c54:	f10b 0b01 	add.w	fp, fp, #1
 8015c58:	f1bb 0f03 	cmp.w	fp, #3
 8015c5c:	d1cb      	bne.n	8015bf6 <_scanf_i+0x5a>
 8015c5e:	6863      	ldr	r3, [r4, #4]
 8015c60:	b90b      	cbnz	r3, 8015c66 <_scanf_i+0xca>
 8015c62:	230a      	movs	r3, #10
 8015c64:	6063      	str	r3, [r4, #4]
 8015c66:	6863      	ldr	r3, [r4, #4]
 8015c68:	4945      	ldr	r1, [pc, #276]	; (8015d80 <_scanf_i+0x1e4>)
 8015c6a:	6960      	ldr	r0, [r4, #20]
 8015c6c:	1ac9      	subs	r1, r1, r3
 8015c6e:	f000 f937 	bl	8015ee0 <__sccl>
 8015c72:	f04f 0b00 	mov.w	fp, #0
 8015c76:	68a3      	ldr	r3, [r4, #8]
 8015c78:	6822      	ldr	r2, [r4, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d03d      	beq.n	8015cfa <_scanf_i+0x15e>
 8015c7e:	6831      	ldr	r1, [r6, #0]
 8015c80:	6960      	ldr	r0, [r4, #20]
 8015c82:	f891 c000 	ldrb.w	ip, [r1]
 8015c86:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	d035      	beq.n	8015cfa <_scanf_i+0x15e>
 8015c8e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015c92:	d124      	bne.n	8015cde <_scanf_i+0x142>
 8015c94:	0510      	lsls	r0, r2, #20
 8015c96:	d522      	bpl.n	8015cde <_scanf_i+0x142>
 8015c98:	f10b 0b01 	add.w	fp, fp, #1
 8015c9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ca0:	d003      	beq.n	8015caa <_scanf_i+0x10e>
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ca8:	60a3      	str	r3, [r4, #8]
 8015caa:	6873      	ldr	r3, [r6, #4]
 8015cac:	3b01      	subs	r3, #1
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	6073      	str	r3, [r6, #4]
 8015cb2:	dd1b      	ble.n	8015cec <_scanf_i+0x150>
 8015cb4:	6833      	ldr	r3, [r6, #0]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	6033      	str	r3, [r6, #0]
 8015cba:	68a3      	ldr	r3, [r4, #8]
 8015cbc:	3b01      	subs	r3, #1
 8015cbe:	60a3      	str	r3, [r4, #8]
 8015cc0:	e7d9      	b.n	8015c76 <_scanf_i+0xda>
 8015cc2:	f1bb 0f02 	cmp.w	fp, #2
 8015cc6:	d1ae      	bne.n	8015c26 <_scanf_i+0x8a>
 8015cc8:	6822      	ldr	r2, [r4, #0]
 8015cca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015cce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015cd2:	d1bf      	bne.n	8015c54 <_scanf_i+0xb8>
 8015cd4:	2310      	movs	r3, #16
 8015cd6:	6063      	str	r3, [r4, #4]
 8015cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015cdc:	e7a2      	b.n	8015c24 <_scanf_i+0x88>
 8015cde:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015ce2:	6022      	str	r2, [r4, #0]
 8015ce4:	780b      	ldrb	r3, [r1, #0]
 8015ce6:	f805 3b01 	strb.w	r3, [r5], #1
 8015cea:	e7de      	b.n	8015caa <_scanf_i+0x10e>
 8015cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015cf0:	4631      	mov	r1, r6
 8015cf2:	4650      	mov	r0, sl
 8015cf4:	4798      	blx	r3
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	d0df      	beq.n	8015cba <_scanf_i+0x11e>
 8015cfa:	6823      	ldr	r3, [r4, #0]
 8015cfc:	05d9      	lsls	r1, r3, #23
 8015cfe:	d50d      	bpl.n	8015d1c <_scanf_i+0x180>
 8015d00:	42bd      	cmp	r5, r7
 8015d02:	d909      	bls.n	8015d18 <_scanf_i+0x17c>
 8015d04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015d08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d0c:	4632      	mov	r2, r6
 8015d0e:	4650      	mov	r0, sl
 8015d10:	4798      	blx	r3
 8015d12:	f105 39ff 	add.w	r9, r5, #4294967295
 8015d16:	464d      	mov	r5, r9
 8015d18:	42bd      	cmp	r5, r7
 8015d1a:	d028      	beq.n	8015d6e <_scanf_i+0x1d2>
 8015d1c:	6822      	ldr	r2, [r4, #0]
 8015d1e:	f012 0210 	ands.w	r2, r2, #16
 8015d22:	d113      	bne.n	8015d4c <_scanf_i+0x1b0>
 8015d24:	702a      	strb	r2, [r5, #0]
 8015d26:	6863      	ldr	r3, [r4, #4]
 8015d28:	9e01      	ldr	r6, [sp, #4]
 8015d2a:	4639      	mov	r1, r7
 8015d2c:	4650      	mov	r0, sl
 8015d2e:	47b0      	blx	r6
 8015d30:	f8d8 3000 	ldr.w	r3, [r8]
 8015d34:	6821      	ldr	r1, [r4, #0]
 8015d36:	1d1a      	adds	r2, r3, #4
 8015d38:	f8c8 2000 	str.w	r2, [r8]
 8015d3c:	f011 0f20 	tst.w	r1, #32
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	d00f      	beq.n	8015d64 <_scanf_i+0x1c8>
 8015d44:	6018      	str	r0, [r3, #0]
 8015d46:	68e3      	ldr	r3, [r4, #12]
 8015d48:	3301      	adds	r3, #1
 8015d4a:	60e3      	str	r3, [r4, #12]
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	1bed      	subs	r5, r5, r7
 8015d50:	445d      	add	r5, fp
 8015d52:	442b      	add	r3, r5
 8015d54:	6123      	str	r3, [r4, #16]
 8015d56:	2000      	movs	r0, #0
 8015d58:	b007      	add	sp, #28
 8015d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5e:	f04f 0b00 	mov.w	fp, #0
 8015d62:	e7ca      	b.n	8015cfa <_scanf_i+0x15e>
 8015d64:	07ca      	lsls	r2, r1, #31
 8015d66:	bf4c      	ite	mi
 8015d68:	8018      	strhmi	r0, [r3, #0]
 8015d6a:	6018      	strpl	r0, [r3, #0]
 8015d6c:	e7eb      	b.n	8015d46 <_scanf_i+0x1aa>
 8015d6e:	2001      	movs	r0, #1
 8015d70:	e7f2      	b.n	8015d58 <_scanf_i+0x1bc>
 8015d72:	bf00      	nop
 8015d74:	08018504 	.word	0x08018504
 8015d78:	080168ad 	.word	0x080168ad
 8015d7c:	08015491 	.word	0x08015491
 8015d80:	08018912 	.word	0x08018912

08015d84 <__sflush_r>:
 8015d84:	898a      	ldrh	r2, [r1, #12]
 8015d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d8a:	4605      	mov	r5, r0
 8015d8c:	0710      	lsls	r0, r2, #28
 8015d8e:	460c      	mov	r4, r1
 8015d90:	d458      	bmi.n	8015e44 <__sflush_r+0xc0>
 8015d92:	684b      	ldr	r3, [r1, #4]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	dc05      	bgt.n	8015da4 <__sflush_r+0x20>
 8015d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	dc02      	bgt.n	8015da4 <__sflush_r+0x20>
 8015d9e:	2000      	movs	r0, #0
 8015da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015da6:	2e00      	cmp	r6, #0
 8015da8:	d0f9      	beq.n	8015d9e <__sflush_r+0x1a>
 8015daa:	2300      	movs	r3, #0
 8015dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015db0:	682f      	ldr	r7, [r5, #0]
 8015db2:	6a21      	ldr	r1, [r4, #32]
 8015db4:	602b      	str	r3, [r5, #0]
 8015db6:	d032      	beq.n	8015e1e <__sflush_r+0x9a>
 8015db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dba:	89a3      	ldrh	r3, [r4, #12]
 8015dbc:	075a      	lsls	r2, r3, #29
 8015dbe:	d505      	bpl.n	8015dcc <__sflush_r+0x48>
 8015dc0:	6863      	ldr	r3, [r4, #4]
 8015dc2:	1ac0      	subs	r0, r0, r3
 8015dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dc6:	b10b      	cbz	r3, 8015dcc <__sflush_r+0x48>
 8015dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dca:	1ac0      	subs	r0, r0, r3
 8015dcc:	2300      	movs	r3, #0
 8015dce:	4602      	mov	r2, r0
 8015dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dd2:	6a21      	ldr	r1, [r4, #32]
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	47b0      	blx	r6
 8015dd8:	1c43      	adds	r3, r0, #1
 8015dda:	89a3      	ldrh	r3, [r4, #12]
 8015ddc:	d106      	bne.n	8015dec <__sflush_r+0x68>
 8015dde:	6829      	ldr	r1, [r5, #0]
 8015de0:	291d      	cmp	r1, #29
 8015de2:	d82b      	bhi.n	8015e3c <__sflush_r+0xb8>
 8015de4:	4a29      	ldr	r2, [pc, #164]	; (8015e8c <__sflush_r+0x108>)
 8015de6:	410a      	asrs	r2, r1
 8015de8:	07d6      	lsls	r6, r2, #31
 8015dea:	d427      	bmi.n	8015e3c <__sflush_r+0xb8>
 8015dec:	2200      	movs	r2, #0
 8015dee:	6062      	str	r2, [r4, #4]
 8015df0:	04d9      	lsls	r1, r3, #19
 8015df2:	6922      	ldr	r2, [r4, #16]
 8015df4:	6022      	str	r2, [r4, #0]
 8015df6:	d504      	bpl.n	8015e02 <__sflush_r+0x7e>
 8015df8:	1c42      	adds	r2, r0, #1
 8015dfa:	d101      	bne.n	8015e00 <__sflush_r+0x7c>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	b903      	cbnz	r3, 8015e02 <__sflush_r+0x7e>
 8015e00:	6560      	str	r0, [r4, #84]	; 0x54
 8015e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e04:	602f      	str	r7, [r5, #0]
 8015e06:	2900      	cmp	r1, #0
 8015e08:	d0c9      	beq.n	8015d9e <__sflush_r+0x1a>
 8015e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e0e:	4299      	cmp	r1, r3
 8015e10:	d002      	beq.n	8015e18 <__sflush_r+0x94>
 8015e12:	4628      	mov	r0, r5
 8015e14:	f7fd fefa 	bl	8013c0c <_free_r>
 8015e18:	2000      	movs	r0, #0
 8015e1a:	6360      	str	r0, [r4, #52]	; 0x34
 8015e1c:	e7c0      	b.n	8015da0 <__sflush_r+0x1c>
 8015e1e:	2301      	movs	r3, #1
 8015e20:	4628      	mov	r0, r5
 8015e22:	47b0      	blx	r6
 8015e24:	1c41      	adds	r1, r0, #1
 8015e26:	d1c8      	bne.n	8015dba <__sflush_r+0x36>
 8015e28:	682b      	ldr	r3, [r5, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d0c5      	beq.n	8015dba <__sflush_r+0x36>
 8015e2e:	2b1d      	cmp	r3, #29
 8015e30:	d001      	beq.n	8015e36 <__sflush_r+0xb2>
 8015e32:	2b16      	cmp	r3, #22
 8015e34:	d101      	bne.n	8015e3a <__sflush_r+0xb6>
 8015e36:	602f      	str	r7, [r5, #0]
 8015e38:	e7b1      	b.n	8015d9e <__sflush_r+0x1a>
 8015e3a:	89a3      	ldrh	r3, [r4, #12]
 8015e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e40:	81a3      	strh	r3, [r4, #12]
 8015e42:	e7ad      	b.n	8015da0 <__sflush_r+0x1c>
 8015e44:	690f      	ldr	r7, [r1, #16]
 8015e46:	2f00      	cmp	r7, #0
 8015e48:	d0a9      	beq.n	8015d9e <__sflush_r+0x1a>
 8015e4a:	0793      	lsls	r3, r2, #30
 8015e4c:	680e      	ldr	r6, [r1, #0]
 8015e4e:	bf08      	it	eq
 8015e50:	694b      	ldreq	r3, [r1, #20]
 8015e52:	600f      	str	r7, [r1, #0]
 8015e54:	bf18      	it	ne
 8015e56:	2300      	movne	r3, #0
 8015e58:	eba6 0807 	sub.w	r8, r6, r7
 8015e5c:	608b      	str	r3, [r1, #8]
 8015e5e:	f1b8 0f00 	cmp.w	r8, #0
 8015e62:	dd9c      	ble.n	8015d9e <__sflush_r+0x1a>
 8015e64:	6a21      	ldr	r1, [r4, #32]
 8015e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e68:	4643      	mov	r3, r8
 8015e6a:	463a      	mov	r2, r7
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	47b0      	blx	r6
 8015e70:	2800      	cmp	r0, #0
 8015e72:	dc06      	bgt.n	8015e82 <__sflush_r+0xfe>
 8015e74:	89a3      	ldrh	r3, [r4, #12]
 8015e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e7a:	81a3      	strh	r3, [r4, #12]
 8015e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e80:	e78e      	b.n	8015da0 <__sflush_r+0x1c>
 8015e82:	4407      	add	r7, r0
 8015e84:	eba8 0800 	sub.w	r8, r8, r0
 8015e88:	e7e9      	b.n	8015e5e <__sflush_r+0xda>
 8015e8a:	bf00      	nop
 8015e8c:	dfbffffe 	.word	0xdfbffffe

08015e90 <_fflush_r>:
 8015e90:	b538      	push	{r3, r4, r5, lr}
 8015e92:	690b      	ldr	r3, [r1, #16]
 8015e94:	4605      	mov	r5, r0
 8015e96:	460c      	mov	r4, r1
 8015e98:	b913      	cbnz	r3, 8015ea0 <_fflush_r+0x10>
 8015e9a:	2500      	movs	r5, #0
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ea0:	b118      	cbz	r0, 8015eaa <_fflush_r+0x1a>
 8015ea2:	6a03      	ldr	r3, [r0, #32]
 8015ea4:	b90b      	cbnz	r3, 8015eaa <_fflush_r+0x1a>
 8015ea6:	f7fc fe73 	bl	8012b90 <__sinit>
 8015eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d0f3      	beq.n	8015e9a <_fflush_r+0xa>
 8015eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eb4:	07d0      	lsls	r0, r2, #31
 8015eb6:	d404      	bmi.n	8015ec2 <_fflush_r+0x32>
 8015eb8:	0599      	lsls	r1, r3, #22
 8015eba:	d402      	bmi.n	8015ec2 <_fflush_r+0x32>
 8015ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ebe:	f7fd f814 	bl	8012eea <__retarget_lock_acquire_recursive>
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	4621      	mov	r1, r4
 8015ec6:	f7ff ff5d 	bl	8015d84 <__sflush_r>
 8015eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ecc:	07da      	lsls	r2, r3, #31
 8015ece:	4605      	mov	r5, r0
 8015ed0:	d4e4      	bmi.n	8015e9c <_fflush_r+0xc>
 8015ed2:	89a3      	ldrh	r3, [r4, #12]
 8015ed4:	059b      	lsls	r3, r3, #22
 8015ed6:	d4e1      	bmi.n	8015e9c <_fflush_r+0xc>
 8015ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eda:	f7fd f807 	bl	8012eec <__retarget_lock_release_recursive>
 8015ede:	e7dd      	b.n	8015e9c <_fflush_r+0xc>

08015ee0 <__sccl>:
 8015ee0:	b570      	push	{r4, r5, r6, lr}
 8015ee2:	780b      	ldrb	r3, [r1, #0]
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	2b5e      	cmp	r3, #94	; 0x5e
 8015ee8:	bf0b      	itete	eq
 8015eea:	784b      	ldrbeq	r3, [r1, #1]
 8015eec:	1c4a      	addne	r2, r1, #1
 8015eee:	1c8a      	addeq	r2, r1, #2
 8015ef0:	2100      	movne	r1, #0
 8015ef2:	bf08      	it	eq
 8015ef4:	2101      	moveq	r1, #1
 8015ef6:	3801      	subs	r0, #1
 8015ef8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015efc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8015f00:	42a8      	cmp	r0, r5
 8015f02:	d1fb      	bne.n	8015efc <__sccl+0x1c>
 8015f04:	b90b      	cbnz	r3, 8015f0a <__sccl+0x2a>
 8015f06:	1e50      	subs	r0, r2, #1
 8015f08:	bd70      	pop	{r4, r5, r6, pc}
 8015f0a:	f081 0101 	eor.w	r1, r1, #1
 8015f0e:	54e1      	strb	r1, [r4, r3]
 8015f10:	4610      	mov	r0, r2
 8015f12:	4602      	mov	r2, r0
 8015f14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015f18:	2d2d      	cmp	r5, #45	; 0x2d
 8015f1a:	d005      	beq.n	8015f28 <__sccl+0x48>
 8015f1c:	2d5d      	cmp	r5, #93	; 0x5d
 8015f1e:	d016      	beq.n	8015f4e <__sccl+0x6e>
 8015f20:	2d00      	cmp	r5, #0
 8015f22:	d0f1      	beq.n	8015f08 <__sccl+0x28>
 8015f24:	462b      	mov	r3, r5
 8015f26:	e7f2      	b.n	8015f0e <__sccl+0x2e>
 8015f28:	7846      	ldrb	r6, [r0, #1]
 8015f2a:	2e5d      	cmp	r6, #93	; 0x5d
 8015f2c:	d0fa      	beq.n	8015f24 <__sccl+0x44>
 8015f2e:	42b3      	cmp	r3, r6
 8015f30:	dcf8      	bgt.n	8015f24 <__sccl+0x44>
 8015f32:	3002      	adds	r0, #2
 8015f34:	461a      	mov	r2, r3
 8015f36:	3201      	adds	r2, #1
 8015f38:	4296      	cmp	r6, r2
 8015f3a:	54a1      	strb	r1, [r4, r2]
 8015f3c:	dcfb      	bgt.n	8015f36 <__sccl+0x56>
 8015f3e:	1af2      	subs	r2, r6, r3
 8015f40:	3a01      	subs	r2, #1
 8015f42:	1c5d      	adds	r5, r3, #1
 8015f44:	42b3      	cmp	r3, r6
 8015f46:	bfa8      	it	ge
 8015f48:	2200      	movge	r2, #0
 8015f4a:	18ab      	adds	r3, r5, r2
 8015f4c:	e7e1      	b.n	8015f12 <__sccl+0x32>
 8015f4e:	4610      	mov	r0, r2
 8015f50:	e7da      	b.n	8015f08 <__sccl+0x28>

08015f52 <__submore>:
 8015f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f56:	460c      	mov	r4, r1
 8015f58:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f5e:	4299      	cmp	r1, r3
 8015f60:	d11d      	bne.n	8015f9e <__submore+0x4c>
 8015f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015f66:	f7fd fec5 	bl	8013cf4 <_malloc_r>
 8015f6a:	b918      	cbnz	r0, 8015f74 <__submore+0x22>
 8015f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f78:	63a3      	str	r3, [r4, #56]	; 0x38
 8015f7a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015f7e:	6360      	str	r0, [r4, #52]	; 0x34
 8015f80:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015f84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015f88:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015f8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015f90:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015f94:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015f98:	6020      	str	r0, [r4, #0]
 8015f9a:	2000      	movs	r0, #0
 8015f9c:	e7e8      	b.n	8015f70 <__submore+0x1e>
 8015f9e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015fa0:	0077      	lsls	r7, r6, #1
 8015fa2:	463a      	mov	r2, r7
 8015fa4:	f000 fbe1 	bl	801676a <_realloc_r>
 8015fa8:	4605      	mov	r5, r0
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d0de      	beq.n	8015f6c <__submore+0x1a>
 8015fae:	eb00 0806 	add.w	r8, r0, r6
 8015fb2:	4601      	mov	r1, r0
 8015fb4:	4632      	mov	r2, r6
 8015fb6:	4640      	mov	r0, r8
 8015fb8:	f7fc ff99 	bl	8012eee <memcpy>
 8015fbc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015fc0:	f8c4 8000 	str.w	r8, [r4]
 8015fc4:	e7e9      	b.n	8015f9a <__submore+0x48>

08015fc6 <memmove>:
 8015fc6:	4288      	cmp	r0, r1
 8015fc8:	b510      	push	{r4, lr}
 8015fca:	eb01 0402 	add.w	r4, r1, r2
 8015fce:	d902      	bls.n	8015fd6 <memmove+0x10>
 8015fd0:	4284      	cmp	r4, r0
 8015fd2:	4623      	mov	r3, r4
 8015fd4:	d807      	bhi.n	8015fe6 <memmove+0x20>
 8015fd6:	1e43      	subs	r3, r0, #1
 8015fd8:	42a1      	cmp	r1, r4
 8015fda:	d008      	beq.n	8015fee <memmove+0x28>
 8015fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fe0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015fe4:	e7f8      	b.n	8015fd8 <memmove+0x12>
 8015fe6:	4402      	add	r2, r0
 8015fe8:	4601      	mov	r1, r0
 8015fea:	428a      	cmp	r2, r1
 8015fec:	d100      	bne.n	8015ff0 <memmove+0x2a>
 8015fee:	bd10      	pop	{r4, pc}
 8015ff0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ff4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ff8:	e7f7      	b.n	8015fea <memmove+0x24>
	...

08015ffc <_sbrk_r>:
 8015ffc:	b538      	push	{r3, r4, r5, lr}
 8015ffe:	4d06      	ldr	r5, [pc, #24]	; (8016018 <_sbrk_r+0x1c>)
 8016000:	2300      	movs	r3, #0
 8016002:	4604      	mov	r4, r0
 8016004:	4608      	mov	r0, r1
 8016006:	602b      	str	r3, [r5, #0]
 8016008:	f7f0 f926 	bl	8006258 <_sbrk>
 801600c:	1c43      	adds	r3, r0, #1
 801600e:	d102      	bne.n	8016016 <_sbrk_r+0x1a>
 8016010:	682b      	ldr	r3, [r5, #0]
 8016012:	b103      	cbz	r3, 8016016 <_sbrk_r+0x1a>
 8016014:	6023      	str	r3, [r4, #0]
 8016016:	bd38      	pop	{r3, r4, r5, pc}
 8016018:	2000903c 	.word	0x2000903c
 801601c:	00000000 	.word	0x00000000

08016020 <nan>:
 8016020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016028 <nan+0x8>
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	00000000 	.word	0x00000000
 801602c:	7ff80000 	.word	0x7ff80000

08016030 <__assert_func>:
 8016030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016032:	4614      	mov	r4, r2
 8016034:	461a      	mov	r2, r3
 8016036:	4b09      	ldr	r3, [pc, #36]	; (801605c <__assert_func+0x2c>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4605      	mov	r5, r0
 801603c:	68d8      	ldr	r0, [r3, #12]
 801603e:	b14c      	cbz	r4, 8016054 <__assert_func+0x24>
 8016040:	4b07      	ldr	r3, [pc, #28]	; (8016060 <__assert_func+0x30>)
 8016042:	9100      	str	r1, [sp, #0]
 8016044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016048:	4906      	ldr	r1, [pc, #24]	; (8016064 <__assert_func+0x34>)
 801604a:	462b      	mov	r3, r5
 801604c:	f000 fc3e 	bl	80168cc <fiprintf>
 8016050:	f000 fc4e 	bl	80168f0 <abort>
 8016054:	4b04      	ldr	r3, [pc, #16]	; (8016068 <__assert_func+0x38>)
 8016056:	461c      	mov	r4, r3
 8016058:	e7f3      	b.n	8016042 <__assert_func+0x12>
 801605a:	bf00      	nop
 801605c:	20000070 	.word	0x20000070
 8016060:	08018925 	.word	0x08018925
 8016064:	08018932 	.word	0x08018932
 8016068:	08018960 	.word	0x08018960

0801606c <_calloc_r>:
 801606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801606e:	fba1 2402 	umull	r2, r4, r1, r2
 8016072:	b94c      	cbnz	r4, 8016088 <_calloc_r+0x1c>
 8016074:	4611      	mov	r1, r2
 8016076:	9201      	str	r2, [sp, #4]
 8016078:	f7fd fe3c 	bl	8013cf4 <_malloc_r>
 801607c:	9a01      	ldr	r2, [sp, #4]
 801607e:	4605      	mov	r5, r0
 8016080:	b930      	cbnz	r0, 8016090 <_calloc_r+0x24>
 8016082:	4628      	mov	r0, r5
 8016084:	b003      	add	sp, #12
 8016086:	bd30      	pop	{r4, r5, pc}
 8016088:	220c      	movs	r2, #12
 801608a:	6002      	str	r2, [r0, #0]
 801608c:	2500      	movs	r5, #0
 801608e:	e7f8      	b.n	8016082 <_calloc_r+0x16>
 8016090:	4621      	mov	r1, r4
 8016092:	f7fc fe44 	bl	8012d1e <memset>
 8016096:	e7f4      	b.n	8016082 <_calloc_r+0x16>

08016098 <rshift>:
 8016098:	6903      	ldr	r3, [r0, #16]
 801609a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801609e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80160a6:	f100 0414 	add.w	r4, r0, #20
 80160aa:	dd45      	ble.n	8016138 <rshift+0xa0>
 80160ac:	f011 011f 	ands.w	r1, r1, #31
 80160b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80160b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80160b8:	d10c      	bne.n	80160d4 <rshift+0x3c>
 80160ba:	f100 0710 	add.w	r7, r0, #16
 80160be:	4629      	mov	r1, r5
 80160c0:	42b1      	cmp	r1, r6
 80160c2:	d334      	bcc.n	801612e <rshift+0x96>
 80160c4:	1a9b      	subs	r3, r3, r2
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	1eea      	subs	r2, r5, #3
 80160ca:	4296      	cmp	r6, r2
 80160cc:	bf38      	it	cc
 80160ce:	2300      	movcc	r3, #0
 80160d0:	4423      	add	r3, r4
 80160d2:	e015      	b.n	8016100 <rshift+0x68>
 80160d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80160d8:	f1c1 0820 	rsb	r8, r1, #32
 80160dc:	40cf      	lsrs	r7, r1
 80160de:	f105 0e04 	add.w	lr, r5, #4
 80160e2:	46a1      	mov	r9, r4
 80160e4:	4576      	cmp	r6, lr
 80160e6:	46f4      	mov	ip, lr
 80160e8:	d815      	bhi.n	8016116 <rshift+0x7e>
 80160ea:	1a9a      	subs	r2, r3, r2
 80160ec:	0092      	lsls	r2, r2, #2
 80160ee:	3a04      	subs	r2, #4
 80160f0:	3501      	adds	r5, #1
 80160f2:	42ae      	cmp	r6, r5
 80160f4:	bf38      	it	cc
 80160f6:	2200      	movcc	r2, #0
 80160f8:	18a3      	adds	r3, r4, r2
 80160fa:	50a7      	str	r7, [r4, r2]
 80160fc:	b107      	cbz	r7, 8016100 <rshift+0x68>
 80160fe:	3304      	adds	r3, #4
 8016100:	1b1a      	subs	r2, r3, r4
 8016102:	42a3      	cmp	r3, r4
 8016104:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016108:	bf08      	it	eq
 801610a:	2300      	moveq	r3, #0
 801610c:	6102      	str	r2, [r0, #16]
 801610e:	bf08      	it	eq
 8016110:	6143      	streq	r3, [r0, #20]
 8016112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016116:	f8dc c000 	ldr.w	ip, [ip]
 801611a:	fa0c fc08 	lsl.w	ip, ip, r8
 801611e:	ea4c 0707 	orr.w	r7, ip, r7
 8016122:	f849 7b04 	str.w	r7, [r9], #4
 8016126:	f85e 7b04 	ldr.w	r7, [lr], #4
 801612a:	40cf      	lsrs	r7, r1
 801612c:	e7da      	b.n	80160e4 <rshift+0x4c>
 801612e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016132:	f847 cf04 	str.w	ip, [r7, #4]!
 8016136:	e7c3      	b.n	80160c0 <rshift+0x28>
 8016138:	4623      	mov	r3, r4
 801613a:	e7e1      	b.n	8016100 <rshift+0x68>

0801613c <__hexdig_fun>:
 801613c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016140:	2b09      	cmp	r3, #9
 8016142:	d802      	bhi.n	801614a <__hexdig_fun+0xe>
 8016144:	3820      	subs	r0, #32
 8016146:	b2c0      	uxtb	r0, r0
 8016148:	4770      	bx	lr
 801614a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801614e:	2b05      	cmp	r3, #5
 8016150:	d801      	bhi.n	8016156 <__hexdig_fun+0x1a>
 8016152:	3847      	subs	r0, #71	; 0x47
 8016154:	e7f7      	b.n	8016146 <__hexdig_fun+0xa>
 8016156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801615a:	2b05      	cmp	r3, #5
 801615c:	d801      	bhi.n	8016162 <__hexdig_fun+0x26>
 801615e:	3827      	subs	r0, #39	; 0x27
 8016160:	e7f1      	b.n	8016146 <__hexdig_fun+0xa>
 8016162:	2000      	movs	r0, #0
 8016164:	4770      	bx	lr
	...

08016168 <__gethex>:
 8016168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801616c:	4617      	mov	r7, r2
 801616e:	680a      	ldr	r2, [r1, #0]
 8016170:	b085      	sub	sp, #20
 8016172:	f102 0b02 	add.w	fp, r2, #2
 8016176:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801617a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801617e:	4681      	mov	r9, r0
 8016180:	468a      	mov	sl, r1
 8016182:	9302      	str	r3, [sp, #8]
 8016184:	32fe      	adds	r2, #254	; 0xfe
 8016186:	eb02 030b 	add.w	r3, r2, fp
 801618a:	46d8      	mov	r8, fp
 801618c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016190:	9301      	str	r3, [sp, #4]
 8016192:	2830      	cmp	r0, #48	; 0x30
 8016194:	d0f7      	beq.n	8016186 <__gethex+0x1e>
 8016196:	f7ff ffd1 	bl	801613c <__hexdig_fun>
 801619a:	4604      	mov	r4, r0
 801619c:	2800      	cmp	r0, #0
 801619e:	d138      	bne.n	8016212 <__gethex+0xaa>
 80161a0:	49a7      	ldr	r1, [pc, #668]	; (8016440 <__gethex+0x2d8>)
 80161a2:	2201      	movs	r2, #1
 80161a4:	4640      	mov	r0, r8
 80161a6:	f7fc fdc2 	bl	8012d2e <strncmp>
 80161aa:	4606      	mov	r6, r0
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d169      	bne.n	8016284 <__gethex+0x11c>
 80161b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80161b4:	465d      	mov	r5, fp
 80161b6:	f7ff ffc1 	bl	801613c <__hexdig_fun>
 80161ba:	2800      	cmp	r0, #0
 80161bc:	d064      	beq.n	8016288 <__gethex+0x120>
 80161be:	465a      	mov	r2, fp
 80161c0:	7810      	ldrb	r0, [r2, #0]
 80161c2:	2830      	cmp	r0, #48	; 0x30
 80161c4:	4690      	mov	r8, r2
 80161c6:	f102 0201 	add.w	r2, r2, #1
 80161ca:	d0f9      	beq.n	80161c0 <__gethex+0x58>
 80161cc:	f7ff ffb6 	bl	801613c <__hexdig_fun>
 80161d0:	2301      	movs	r3, #1
 80161d2:	fab0 f480 	clz	r4, r0
 80161d6:	0964      	lsrs	r4, r4, #5
 80161d8:	465e      	mov	r6, fp
 80161da:	9301      	str	r3, [sp, #4]
 80161dc:	4642      	mov	r2, r8
 80161de:	4615      	mov	r5, r2
 80161e0:	3201      	adds	r2, #1
 80161e2:	7828      	ldrb	r0, [r5, #0]
 80161e4:	f7ff ffaa 	bl	801613c <__hexdig_fun>
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d1f8      	bne.n	80161de <__gethex+0x76>
 80161ec:	4994      	ldr	r1, [pc, #592]	; (8016440 <__gethex+0x2d8>)
 80161ee:	2201      	movs	r2, #1
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7fc fd9c 	bl	8012d2e <strncmp>
 80161f6:	b978      	cbnz	r0, 8016218 <__gethex+0xb0>
 80161f8:	b946      	cbnz	r6, 801620c <__gethex+0xa4>
 80161fa:	1c6e      	adds	r6, r5, #1
 80161fc:	4632      	mov	r2, r6
 80161fe:	4615      	mov	r5, r2
 8016200:	3201      	adds	r2, #1
 8016202:	7828      	ldrb	r0, [r5, #0]
 8016204:	f7ff ff9a 	bl	801613c <__hexdig_fun>
 8016208:	2800      	cmp	r0, #0
 801620a:	d1f8      	bne.n	80161fe <__gethex+0x96>
 801620c:	1b73      	subs	r3, r6, r5
 801620e:	009e      	lsls	r6, r3, #2
 8016210:	e004      	b.n	801621c <__gethex+0xb4>
 8016212:	2400      	movs	r4, #0
 8016214:	4626      	mov	r6, r4
 8016216:	e7e1      	b.n	80161dc <__gethex+0x74>
 8016218:	2e00      	cmp	r6, #0
 801621a:	d1f7      	bne.n	801620c <__gethex+0xa4>
 801621c:	782b      	ldrb	r3, [r5, #0]
 801621e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016222:	2b50      	cmp	r3, #80	; 0x50
 8016224:	d13d      	bne.n	80162a2 <__gethex+0x13a>
 8016226:	786b      	ldrb	r3, [r5, #1]
 8016228:	2b2b      	cmp	r3, #43	; 0x2b
 801622a:	d02f      	beq.n	801628c <__gethex+0x124>
 801622c:	2b2d      	cmp	r3, #45	; 0x2d
 801622e:	d031      	beq.n	8016294 <__gethex+0x12c>
 8016230:	1c69      	adds	r1, r5, #1
 8016232:	f04f 0b00 	mov.w	fp, #0
 8016236:	7808      	ldrb	r0, [r1, #0]
 8016238:	f7ff ff80 	bl	801613c <__hexdig_fun>
 801623c:	1e42      	subs	r2, r0, #1
 801623e:	b2d2      	uxtb	r2, r2
 8016240:	2a18      	cmp	r2, #24
 8016242:	d82e      	bhi.n	80162a2 <__gethex+0x13a>
 8016244:	f1a0 0210 	sub.w	r2, r0, #16
 8016248:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801624c:	f7ff ff76 	bl	801613c <__hexdig_fun>
 8016250:	f100 3cff 	add.w	ip, r0, #4294967295
 8016254:	fa5f fc8c 	uxtb.w	ip, ip
 8016258:	f1bc 0f18 	cmp.w	ip, #24
 801625c:	d91d      	bls.n	801629a <__gethex+0x132>
 801625e:	f1bb 0f00 	cmp.w	fp, #0
 8016262:	d000      	beq.n	8016266 <__gethex+0xfe>
 8016264:	4252      	negs	r2, r2
 8016266:	4416      	add	r6, r2
 8016268:	f8ca 1000 	str.w	r1, [sl]
 801626c:	b1dc      	cbz	r4, 80162a6 <__gethex+0x13e>
 801626e:	9b01      	ldr	r3, [sp, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	bf14      	ite	ne
 8016274:	f04f 0800 	movne.w	r8, #0
 8016278:	f04f 0806 	moveq.w	r8, #6
 801627c:	4640      	mov	r0, r8
 801627e:	b005      	add	sp, #20
 8016280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016284:	4645      	mov	r5, r8
 8016286:	4626      	mov	r6, r4
 8016288:	2401      	movs	r4, #1
 801628a:	e7c7      	b.n	801621c <__gethex+0xb4>
 801628c:	f04f 0b00 	mov.w	fp, #0
 8016290:	1ca9      	adds	r1, r5, #2
 8016292:	e7d0      	b.n	8016236 <__gethex+0xce>
 8016294:	f04f 0b01 	mov.w	fp, #1
 8016298:	e7fa      	b.n	8016290 <__gethex+0x128>
 801629a:	230a      	movs	r3, #10
 801629c:	fb03 0002 	mla	r0, r3, r2, r0
 80162a0:	e7d0      	b.n	8016244 <__gethex+0xdc>
 80162a2:	4629      	mov	r1, r5
 80162a4:	e7e0      	b.n	8016268 <__gethex+0x100>
 80162a6:	eba5 0308 	sub.w	r3, r5, r8
 80162aa:	3b01      	subs	r3, #1
 80162ac:	4621      	mov	r1, r4
 80162ae:	2b07      	cmp	r3, #7
 80162b0:	dc0a      	bgt.n	80162c8 <__gethex+0x160>
 80162b2:	4648      	mov	r0, r9
 80162b4:	f7fd fdaa 	bl	8013e0c <_Balloc>
 80162b8:	4604      	mov	r4, r0
 80162ba:	b940      	cbnz	r0, 80162ce <__gethex+0x166>
 80162bc:	4b61      	ldr	r3, [pc, #388]	; (8016444 <__gethex+0x2dc>)
 80162be:	4602      	mov	r2, r0
 80162c0:	21e4      	movs	r1, #228	; 0xe4
 80162c2:	4861      	ldr	r0, [pc, #388]	; (8016448 <__gethex+0x2e0>)
 80162c4:	f7ff feb4 	bl	8016030 <__assert_func>
 80162c8:	3101      	adds	r1, #1
 80162ca:	105b      	asrs	r3, r3, #1
 80162cc:	e7ef      	b.n	80162ae <__gethex+0x146>
 80162ce:	f100 0a14 	add.w	sl, r0, #20
 80162d2:	2300      	movs	r3, #0
 80162d4:	495a      	ldr	r1, [pc, #360]	; (8016440 <__gethex+0x2d8>)
 80162d6:	f8cd a004 	str.w	sl, [sp, #4]
 80162da:	469b      	mov	fp, r3
 80162dc:	45a8      	cmp	r8, r5
 80162de:	d342      	bcc.n	8016366 <__gethex+0x1fe>
 80162e0:	9801      	ldr	r0, [sp, #4]
 80162e2:	f840 bb04 	str.w	fp, [r0], #4
 80162e6:	eba0 000a 	sub.w	r0, r0, sl
 80162ea:	1080      	asrs	r0, r0, #2
 80162ec:	6120      	str	r0, [r4, #16]
 80162ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80162f2:	4658      	mov	r0, fp
 80162f4:	f7fd fe7c 	bl	8013ff0 <__hi0bits>
 80162f8:	683d      	ldr	r5, [r7, #0]
 80162fa:	eba8 0000 	sub.w	r0, r8, r0
 80162fe:	42a8      	cmp	r0, r5
 8016300:	dd59      	ble.n	80163b6 <__gethex+0x24e>
 8016302:	eba0 0805 	sub.w	r8, r0, r5
 8016306:	4641      	mov	r1, r8
 8016308:	4620      	mov	r0, r4
 801630a:	f7fe fa0b 	bl	8014724 <__any_on>
 801630e:	4683      	mov	fp, r0
 8016310:	b1b8      	cbz	r0, 8016342 <__gethex+0x1da>
 8016312:	f108 33ff 	add.w	r3, r8, #4294967295
 8016316:	1159      	asrs	r1, r3, #5
 8016318:	f003 021f 	and.w	r2, r3, #31
 801631c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016320:	f04f 0b01 	mov.w	fp, #1
 8016324:	fa0b f202 	lsl.w	r2, fp, r2
 8016328:	420a      	tst	r2, r1
 801632a:	d00a      	beq.n	8016342 <__gethex+0x1da>
 801632c:	455b      	cmp	r3, fp
 801632e:	dd06      	ble.n	801633e <__gethex+0x1d6>
 8016330:	f1a8 0102 	sub.w	r1, r8, #2
 8016334:	4620      	mov	r0, r4
 8016336:	f7fe f9f5 	bl	8014724 <__any_on>
 801633a:	2800      	cmp	r0, #0
 801633c:	d138      	bne.n	80163b0 <__gethex+0x248>
 801633e:	f04f 0b02 	mov.w	fp, #2
 8016342:	4641      	mov	r1, r8
 8016344:	4620      	mov	r0, r4
 8016346:	f7ff fea7 	bl	8016098 <rshift>
 801634a:	4446      	add	r6, r8
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	42b3      	cmp	r3, r6
 8016350:	da41      	bge.n	80163d6 <__gethex+0x26e>
 8016352:	4621      	mov	r1, r4
 8016354:	4648      	mov	r0, r9
 8016356:	f7fd fd99 	bl	8013e8c <_Bfree>
 801635a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801635c:	2300      	movs	r3, #0
 801635e:	6013      	str	r3, [r2, #0]
 8016360:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016364:	e78a      	b.n	801627c <__gethex+0x114>
 8016366:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801636a:	2a2e      	cmp	r2, #46	; 0x2e
 801636c:	d014      	beq.n	8016398 <__gethex+0x230>
 801636e:	2b20      	cmp	r3, #32
 8016370:	d106      	bne.n	8016380 <__gethex+0x218>
 8016372:	9b01      	ldr	r3, [sp, #4]
 8016374:	f843 bb04 	str.w	fp, [r3], #4
 8016378:	f04f 0b00 	mov.w	fp, #0
 801637c:	9301      	str	r3, [sp, #4]
 801637e:	465b      	mov	r3, fp
 8016380:	7828      	ldrb	r0, [r5, #0]
 8016382:	9303      	str	r3, [sp, #12]
 8016384:	f7ff feda 	bl	801613c <__hexdig_fun>
 8016388:	9b03      	ldr	r3, [sp, #12]
 801638a:	f000 000f 	and.w	r0, r0, #15
 801638e:	4098      	lsls	r0, r3
 8016390:	ea4b 0b00 	orr.w	fp, fp, r0
 8016394:	3304      	adds	r3, #4
 8016396:	e7a1      	b.n	80162dc <__gethex+0x174>
 8016398:	45a8      	cmp	r8, r5
 801639a:	d8e8      	bhi.n	801636e <__gethex+0x206>
 801639c:	2201      	movs	r2, #1
 801639e:	4628      	mov	r0, r5
 80163a0:	9303      	str	r3, [sp, #12]
 80163a2:	f7fc fcc4 	bl	8012d2e <strncmp>
 80163a6:	4926      	ldr	r1, [pc, #152]	; (8016440 <__gethex+0x2d8>)
 80163a8:	9b03      	ldr	r3, [sp, #12]
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d1df      	bne.n	801636e <__gethex+0x206>
 80163ae:	e795      	b.n	80162dc <__gethex+0x174>
 80163b0:	f04f 0b03 	mov.w	fp, #3
 80163b4:	e7c5      	b.n	8016342 <__gethex+0x1da>
 80163b6:	da0b      	bge.n	80163d0 <__gethex+0x268>
 80163b8:	eba5 0800 	sub.w	r8, r5, r0
 80163bc:	4621      	mov	r1, r4
 80163be:	4642      	mov	r2, r8
 80163c0:	4648      	mov	r0, r9
 80163c2:	f7fd ff7d 	bl	80142c0 <__lshift>
 80163c6:	eba6 0608 	sub.w	r6, r6, r8
 80163ca:	4604      	mov	r4, r0
 80163cc:	f100 0a14 	add.w	sl, r0, #20
 80163d0:	f04f 0b00 	mov.w	fp, #0
 80163d4:	e7ba      	b.n	801634c <__gethex+0x1e4>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	42b3      	cmp	r3, r6
 80163da:	dd73      	ble.n	80164c4 <__gethex+0x35c>
 80163dc:	1b9e      	subs	r6, r3, r6
 80163de:	42b5      	cmp	r5, r6
 80163e0:	dc34      	bgt.n	801644c <__gethex+0x2e4>
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	2b02      	cmp	r3, #2
 80163e6:	d023      	beq.n	8016430 <__gethex+0x2c8>
 80163e8:	2b03      	cmp	r3, #3
 80163ea:	d025      	beq.n	8016438 <__gethex+0x2d0>
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d115      	bne.n	801641c <__gethex+0x2b4>
 80163f0:	42b5      	cmp	r5, r6
 80163f2:	d113      	bne.n	801641c <__gethex+0x2b4>
 80163f4:	2d01      	cmp	r5, #1
 80163f6:	d10b      	bne.n	8016410 <__gethex+0x2a8>
 80163f8:	9a02      	ldr	r2, [sp, #8]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6013      	str	r3, [r2, #0]
 80163fe:	2301      	movs	r3, #1
 8016400:	6123      	str	r3, [r4, #16]
 8016402:	f8ca 3000 	str.w	r3, [sl]
 8016406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016408:	f04f 0862 	mov.w	r8, #98	; 0x62
 801640c:	601c      	str	r4, [r3, #0]
 801640e:	e735      	b.n	801627c <__gethex+0x114>
 8016410:	1e69      	subs	r1, r5, #1
 8016412:	4620      	mov	r0, r4
 8016414:	f7fe f986 	bl	8014724 <__any_on>
 8016418:	2800      	cmp	r0, #0
 801641a:	d1ed      	bne.n	80163f8 <__gethex+0x290>
 801641c:	4621      	mov	r1, r4
 801641e:	4648      	mov	r0, r9
 8016420:	f7fd fd34 	bl	8013e8c <_Bfree>
 8016424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016426:	2300      	movs	r3, #0
 8016428:	6013      	str	r3, [r2, #0]
 801642a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801642e:	e725      	b.n	801627c <__gethex+0x114>
 8016430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016432:	2b00      	cmp	r3, #0
 8016434:	d1f2      	bne.n	801641c <__gethex+0x2b4>
 8016436:	e7df      	b.n	80163f8 <__gethex+0x290>
 8016438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801643a:	2b00      	cmp	r3, #0
 801643c:	d1dc      	bne.n	80163f8 <__gethex+0x290>
 801643e:	e7ed      	b.n	801641c <__gethex+0x2b4>
 8016440:	0801879c 	.word	0x0801879c
 8016444:	08018633 	.word	0x08018633
 8016448:	08018961 	.word	0x08018961
 801644c:	f106 38ff 	add.w	r8, r6, #4294967295
 8016450:	f1bb 0f00 	cmp.w	fp, #0
 8016454:	d133      	bne.n	80164be <__gethex+0x356>
 8016456:	f1b8 0f00 	cmp.w	r8, #0
 801645a:	d004      	beq.n	8016466 <__gethex+0x2fe>
 801645c:	4641      	mov	r1, r8
 801645e:	4620      	mov	r0, r4
 8016460:	f7fe f960 	bl	8014724 <__any_on>
 8016464:	4683      	mov	fp, r0
 8016466:	ea4f 1268 	mov.w	r2, r8, asr #5
 801646a:	2301      	movs	r3, #1
 801646c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016470:	f008 081f 	and.w	r8, r8, #31
 8016474:	fa03 f308 	lsl.w	r3, r3, r8
 8016478:	4213      	tst	r3, r2
 801647a:	4631      	mov	r1, r6
 801647c:	4620      	mov	r0, r4
 801647e:	bf18      	it	ne
 8016480:	f04b 0b02 	orrne.w	fp, fp, #2
 8016484:	1bad      	subs	r5, r5, r6
 8016486:	f7ff fe07 	bl	8016098 <rshift>
 801648a:	687e      	ldr	r6, [r7, #4]
 801648c:	f04f 0802 	mov.w	r8, #2
 8016490:	f1bb 0f00 	cmp.w	fp, #0
 8016494:	d04a      	beq.n	801652c <__gethex+0x3c4>
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	2b02      	cmp	r3, #2
 801649a:	d016      	beq.n	80164ca <__gethex+0x362>
 801649c:	2b03      	cmp	r3, #3
 801649e:	d018      	beq.n	80164d2 <__gethex+0x36a>
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d109      	bne.n	80164b8 <__gethex+0x350>
 80164a4:	f01b 0f02 	tst.w	fp, #2
 80164a8:	d006      	beq.n	80164b8 <__gethex+0x350>
 80164aa:	f8da 3000 	ldr.w	r3, [sl]
 80164ae:	ea4b 0b03 	orr.w	fp, fp, r3
 80164b2:	f01b 0f01 	tst.w	fp, #1
 80164b6:	d10f      	bne.n	80164d8 <__gethex+0x370>
 80164b8:	f048 0810 	orr.w	r8, r8, #16
 80164bc:	e036      	b.n	801652c <__gethex+0x3c4>
 80164be:	f04f 0b01 	mov.w	fp, #1
 80164c2:	e7d0      	b.n	8016466 <__gethex+0x2fe>
 80164c4:	f04f 0801 	mov.w	r8, #1
 80164c8:	e7e2      	b.n	8016490 <__gethex+0x328>
 80164ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164cc:	f1c3 0301 	rsb	r3, r3, #1
 80164d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80164d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d0ef      	beq.n	80164b8 <__gethex+0x350>
 80164d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80164dc:	f104 0214 	add.w	r2, r4, #20
 80164e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80164e4:	9301      	str	r3, [sp, #4]
 80164e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80164ea:	2300      	movs	r3, #0
 80164ec:	4694      	mov	ip, r2
 80164ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80164f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80164f6:	d01e      	beq.n	8016536 <__gethex+0x3ce>
 80164f8:	3101      	adds	r1, #1
 80164fa:	f8cc 1000 	str.w	r1, [ip]
 80164fe:	f1b8 0f02 	cmp.w	r8, #2
 8016502:	f104 0214 	add.w	r2, r4, #20
 8016506:	d13d      	bne.n	8016584 <__gethex+0x41c>
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	3b01      	subs	r3, #1
 801650c:	42ab      	cmp	r3, r5
 801650e:	d10b      	bne.n	8016528 <__gethex+0x3c0>
 8016510:	1169      	asrs	r1, r5, #5
 8016512:	2301      	movs	r3, #1
 8016514:	f005 051f 	and.w	r5, r5, #31
 8016518:	fa03 f505 	lsl.w	r5, r3, r5
 801651c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016520:	421d      	tst	r5, r3
 8016522:	bf18      	it	ne
 8016524:	f04f 0801 	movne.w	r8, #1
 8016528:	f048 0820 	orr.w	r8, r8, #32
 801652c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801652e:	601c      	str	r4, [r3, #0]
 8016530:	9b02      	ldr	r3, [sp, #8]
 8016532:	601e      	str	r6, [r3, #0]
 8016534:	e6a2      	b.n	801627c <__gethex+0x114>
 8016536:	4290      	cmp	r0, r2
 8016538:	f842 3c04 	str.w	r3, [r2, #-4]
 801653c:	d8d6      	bhi.n	80164ec <__gethex+0x384>
 801653e:	68a2      	ldr	r2, [r4, #8]
 8016540:	4593      	cmp	fp, r2
 8016542:	db17      	blt.n	8016574 <__gethex+0x40c>
 8016544:	6861      	ldr	r1, [r4, #4]
 8016546:	4648      	mov	r0, r9
 8016548:	3101      	adds	r1, #1
 801654a:	f7fd fc5f 	bl	8013e0c <_Balloc>
 801654e:	4682      	mov	sl, r0
 8016550:	b918      	cbnz	r0, 801655a <__gethex+0x3f2>
 8016552:	4b1b      	ldr	r3, [pc, #108]	; (80165c0 <__gethex+0x458>)
 8016554:	4602      	mov	r2, r0
 8016556:	2184      	movs	r1, #132	; 0x84
 8016558:	e6b3      	b.n	80162c2 <__gethex+0x15a>
 801655a:	6922      	ldr	r2, [r4, #16]
 801655c:	3202      	adds	r2, #2
 801655e:	f104 010c 	add.w	r1, r4, #12
 8016562:	0092      	lsls	r2, r2, #2
 8016564:	300c      	adds	r0, #12
 8016566:	f7fc fcc2 	bl	8012eee <memcpy>
 801656a:	4621      	mov	r1, r4
 801656c:	4648      	mov	r0, r9
 801656e:	f7fd fc8d 	bl	8013e8c <_Bfree>
 8016572:	4654      	mov	r4, sl
 8016574:	6922      	ldr	r2, [r4, #16]
 8016576:	1c51      	adds	r1, r2, #1
 8016578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801657c:	6121      	str	r1, [r4, #16]
 801657e:	2101      	movs	r1, #1
 8016580:	6151      	str	r1, [r2, #20]
 8016582:	e7bc      	b.n	80164fe <__gethex+0x396>
 8016584:	6921      	ldr	r1, [r4, #16]
 8016586:	4559      	cmp	r1, fp
 8016588:	dd0b      	ble.n	80165a2 <__gethex+0x43a>
 801658a:	2101      	movs	r1, #1
 801658c:	4620      	mov	r0, r4
 801658e:	f7ff fd83 	bl	8016098 <rshift>
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	3601      	adds	r6, #1
 8016596:	42b3      	cmp	r3, r6
 8016598:	f6ff aedb 	blt.w	8016352 <__gethex+0x1ea>
 801659c:	f04f 0801 	mov.w	r8, #1
 80165a0:	e7c2      	b.n	8016528 <__gethex+0x3c0>
 80165a2:	f015 051f 	ands.w	r5, r5, #31
 80165a6:	d0f9      	beq.n	801659c <__gethex+0x434>
 80165a8:	9b01      	ldr	r3, [sp, #4]
 80165aa:	441a      	add	r2, r3
 80165ac:	f1c5 0520 	rsb	r5, r5, #32
 80165b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80165b4:	f7fd fd1c 	bl	8013ff0 <__hi0bits>
 80165b8:	42a8      	cmp	r0, r5
 80165ba:	dbe6      	blt.n	801658a <__gethex+0x422>
 80165bc:	e7ee      	b.n	801659c <__gethex+0x434>
 80165be:	bf00      	nop
 80165c0:	08018633 	.word	0x08018633

080165c4 <L_shift>:
 80165c4:	f1c2 0208 	rsb	r2, r2, #8
 80165c8:	0092      	lsls	r2, r2, #2
 80165ca:	b570      	push	{r4, r5, r6, lr}
 80165cc:	f1c2 0620 	rsb	r6, r2, #32
 80165d0:	6843      	ldr	r3, [r0, #4]
 80165d2:	6804      	ldr	r4, [r0, #0]
 80165d4:	fa03 f506 	lsl.w	r5, r3, r6
 80165d8:	432c      	orrs	r4, r5
 80165da:	40d3      	lsrs	r3, r2
 80165dc:	6004      	str	r4, [r0, #0]
 80165de:	f840 3f04 	str.w	r3, [r0, #4]!
 80165e2:	4288      	cmp	r0, r1
 80165e4:	d3f4      	bcc.n	80165d0 <L_shift+0xc>
 80165e6:	bd70      	pop	{r4, r5, r6, pc}

080165e8 <__match>:
 80165e8:	b530      	push	{r4, r5, lr}
 80165ea:	6803      	ldr	r3, [r0, #0]
 80165ec:	3301      	adds	r3, #1
 80165ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165f2:	b914      	cbnz	r4, 80165fa <__match+0x12>
 80165f4:	6003      	str	r3, [r0, #0]
 80165f6:	2001      	movs	r0, #1
 80165f8:	bd30      	pop	{r4, r5, pc}
 80165fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016602:	2d19      	cmp	r5, #25
 8016604:	bf98      	it	ls
 8016606:	3220      	addls	r2, #32
 8016608:	42a2      	cmp	r2, r4
 801660a:	d0f0      	beq.n	80165ee <__match+0x6>
 801660c:	2000      	movs	r0, #0
 801660e:	e7f3      	b.n	80165f8 <__match+0x10>

08016610 <__hexnan>:
 8016610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	680b      	ldr	r3, [r1, #0]
 8016616:	6801      	ldr	r1, [r0, #0]
 8016618:	115e      	asrs	r6, r3, #5
 801661a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801661e:	f013 031f 	ands.w	r3, r3, #31
 8016622:	b087      	sub	sp, #28
 8016624:	bf18      	it	ne
 8016626:	3604      	addne	r6, #4
 8016628:	2500      	movs	r5, #0
 801662a:	1f37      	subs	r7, r6, #4
 801662c:	4682      	mov	sl, r0
 801662e:	4690      	mov	r8, r2
 8016630:	9301      	str	r3, [sp, #4]
 8016632:	f846 5c04 	str.w	r5, [r6, #-4]
 8016636:	46b9      	mov	r9, r7
 8016638:	463c      	mov	r4, r7
 801663a:	9502      	str	r5, [sp, #8]
 801663c:	46ab      	mov	fp, r5
 801663e:	784a      	ldrb	r2, [r1, #1]
 8016640:	1c4b      	adds	r3, r1, #1
 8016642:	9303      	str	r3, [sp, #12]
 8016644:	b342      	cbz	r2, 8016698 <__hexnan+0x88>
 8016646:	4610      	mov	r0, r2
 8016648:	9105      	str	r1, [sp, #20]
 801664a:	9204      	str	r2, [sp, #16]
 801664c:	f7ff fd76 	bl	801613c <__hexdig_fun>
 8016650:	2800      	cmp	r0, #0
 8016652:	d14f      	bne.n	80166f4 <__hexnan+0xe4>
 8016654:	9a04      	ldr	r2, [sp, #16]
 8016656:	9905      	ldr	r1, [sp, #20]
 8016658:	2a20      	cmp	r2, #32
 801665a:	d818      	bhi.n	801668e <__hexnan+0x7e>
 801665c:	9b02      	ldr	r3, [sp, #8]
 801665e:	459b      	cmp	fp, r3
 8016660:	dd13      	ble.n	801668a <__hexnan+0x7a>
 8016662:	454c      	cmp	r4, r9
 8016664:	d206      	bcs.n	8016674 <__hexnan+0x64>
 8016666:	2d07      	cmp	r5, #7
 8016668:	dc04      	bgt.n	8016674 <__hexnan+0x64>
 801666a:	462a      	mov	r2, r5
 801666c:	4649      	mov	r1, r9
 801666e:	4620      	mov	r0, r4
 8016670:	f7ff ffa8 	bl	80165c4 <L_shift>
 8016674:	4544      	cmp	r4, r8
 8016676:	d950      	bls.n	801671a <__hexnan+0x10a>
 8016678:	2300      	movs	r3, #0
 801667a:	f1a4 0904 	sub.w	r9, r4, #4
 801667e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016682:	f8cd b008 	str.w	fp, [sp, #8]
 8016686:	464c      	mov	r4, r9
 8016688:	461d      	mov	r5, r3
 801668a:	9903      	ldr	r1, [sp, #12]
 801668c:	e7d7      	b.n	801663e <__hexnan+0x2e>
 801668e:	2a29      	cmp	r2, #41	; 0x29
 8016690:	d155      	bne.n	801673e <__hexnan+0x12e>
 8016692:	3102      	adds	r1, #2
 8016694:	f8ca 1000 	str.w	r1, [sl]
 8016698:	f1bb 0f00 	cmp.w	fp, #0
 801669c:	d04f      	beq.n	801673e <__hexnan+0x12e>
 801669e:	454c      	cmp	r4, r9
 80166a0:	d206      	bcs.n	80166b0 <__hexnan+0xa0>
 80166a2:	2d07      	cmp	r5, #7
 80166a4:	dc04      	bgt.n	80166b0 <__hexnan+0xa0>
 80166a6:	462a      	mov	r2, r5
 80166a8:	4649      	mov	r1, r9
 80166aa:	4620      	mov	r0, r4
 80166ac:	f7ff ff8a 	bl	80165c4 <L_shift>
 80166b0:	4544      	cmp	r4, r8
 80166b2:	d934      	bls.n	801671e <__hexnan+0x10e>
 80166b4:	f1a8 0204 	sub.w	r2, r8, #4
 80166b8:	4623      	mov	r3, r4
 80166ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80166be:	f842 1f04 	str.w	r1, [r2, #4]!
 80166c2:	429f      	cmp	r7, r3
 80166c4:	d2f9      	bcs.n	80166ba <__hexnan+0xaa>
 80166c6:	1b3b      	subs	r3, r7, r4
 80166c8:	f023 0303 	bic.w	r3, r3, #3
 80166cc:	3304      	adds	r3, #4
 80166ce:	3e03      	subs	r6, #3
 80166d0:	3401      	adds	r4, #1
 80166d2:	42a6      	cmp	r6, r4
 80166d4:	bf38      	it	cc
 80166d6:	2304      	movcc	r3, #4
 80166d8:	4443      	add	r3, r8
 80166da:	2200      	movs	r2, #0
 80166dc:	f843 2b04 	str.w	r2, [r3], #4
 80166e0:	429f      	cmp	r7, r3
 80166e2:	d2fb      	bcs.n	80166dc <__hexnan+0xcc>
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	b91b      	cbnz	r3, 80166f0 <__hexnan+0xe0>
 80166e8:	4547      	cmp	r7, r8
 80166ea:	d126      	bne.n	801673a <__hexnan+0x12a>
 80166ec:	2301      	movs	r3, #1
 80166ee:	603b      	str	r3, [r7, #0]
 80166f0:	2005      	movs	r0, #5
 80166f2:	e025      	b.n	8016740 <__hexnan+0x130>
 80166f4:	3501      	adds	r5, #1
 80166f6:	2d08      	cmp	r5, #8
 80166f8:	f10b 0b01 	add.w	fp, fp, #1
 80166fc:	dd06      	ble.n	801670c <__hexnan+0xfc>
 80166fe:	4544      	cmp	r4, r8
 8016700:	d9c3      	bls.n	801668a <__hexnan+0x7a>
 8016702:	2300      	movs	r3, #0
 8016704:	f844 3c04 	str.w	r3, [r4, #-4]
 8016708:	2501      	movs	r5, #1
 801670a:	3c04      	subs	r4, #4
 801670c:	6822      	ldr	r2, [r4, #0]
 801670e:	f000 000f 	and.w	r0, r0, #15
 8016712:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016716:	6020      	str	r0, [r4, #0]
 8016718:	e7b7      	b.n	801668a <__hexnan+0x7a>
 801671a:	2508      	movs	r5, #8
 801671c:	e7b5      	b.n	801668a <__hexnan+0x7a>
 801671e:	9b01      	ldr	r3, [sp, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d0df      	beq.n	80166e4 <__hexnan+0xd4>
 8016724:	f1c3 0320 	rsb	r3, r3, #32
 8016728:	f04f 32ff 	mov.w	r2, #4294967295
 801672c:	40da      	lsrs	r2, r3
 801672e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016732:	4013      	ands	r3, r2
 8016734:	f846 3c04 	str.w	r3, [r6, #-4]
 8016738:	e7d4      	b.n	80166e4 <__hexnan+0xd4>
 801673a:	3f04      	subs	r7, #4
 801673c:	e7d2      	b.n	80166e4 <__hexnan+0xd4>
 801673e:	2004      	movs	r0, #4
 8016740:	b007      	add	sp, #28
 8016742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016746 <__ascii_mbtowc>:
 8016746:	b082      	sub	sp, #8
 8016748:	b901      	cbnz	r1, 801674c <__ascii_mbtowc+0x6>
 801674a:	a901      	add	r1, sp, #4
 801674c:	b142      	cbz	r2, 8016760 <__ascii_mbtowc+0x1a>
 801674e:	b14b      	cbz	r3, 8016764 <__ascii_mbtowc+0x1e>
 8016750:	7813      	ldrb	r3, [r2, #0]
 8016752:	600b      	str	r3, [r1, #0]
 8016754:	7812      	ldrb	r2, [r2, #0]
 8016756:	1e10      	subs	r0, r2, #0
 8016758:	bf18      	it	ne
 801675a:	2001      	movne	r0, #1
 801675c:	b002      	add	sp, #8
 801675e:	4770      	bx	lr
 8016760:	4610      	mov	r0, r2
 8016762:	e7fb      	b.n	801675c <__ascii_mbtowc+0x16>
 8016764:	f06f 0001 	mvn.w	r0, #1
 8016768:	e7f8      	b.n	801675c <__ascii_mbtowc+0x16>

0801676a <_realloc_r>:
 801676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801676e:	4680      	mov	r8, r0
 8016770:	4614      	mov	r4, r2
 8016772:	460e      	mov	r6, r1
 8016774:	b921      	cbnz	r1, 8016780 <_realloc_r+0x16>
 8016776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801677a:	4611      	mov	r1, r2
 801677c:	f7fd baba 	b.w	8013cf4 <_malloc_r>
 8016780:	b92a      	cbnz	r2, 801678e <_realloc_r+0x24>
 8016782:	f7fd fa43 	bl	8013c0c <_free_r>
 8016786:	4625      	mov	r5, r4
 8016788:	4628      	mov	r0, r5
 801678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801678e:	f000 f8b6 	bl	80168fe <_malloc_usable_size_r>
 8016792:	4284      	cmp	r4, r0
 8016794:	4607      	mov	r7, r0
 8016796:	d802      	bhi.n	801679e <_realloc_r+0x34>
 8016798:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801679c:	d812      	bhi.n	80167c4 <_realloc_r+0x5a>
 801679e:	4621      	mov	r1, r4
 80167a0:	4640      	mov	r0, r8
 80167a2:	f7fd faa7 	bl	8013cf4 <_malloc_r>
 80167a6:	4605      	mov	r5, r0
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d0ed      	beq.n	8016788 <_realloc_r+0x1e>
 80167ac:	42bc      	cmp	r4, r7
 80167ae:	4622      	mov	r2, r4
 80167b0:	4631      	mov	r1, r6
 80167b2:	bf28      	it	cs
 80167b4:	463a      	movcs	r2, r7
 80167b6:	f7fc fb9a 	bl	8012eee <memcpy>
 80167ba:	4631      	mov	r1, r6
 80167bc:	4640      	mov	r0, r8
 80167be:	f7fd fa25 	bl	8013c0c <_free_r>
 80167c2:	e7e1      	b.n	8016788 <_realloc_r+0x1e>
 80167c4:	4635      	mov	r5, r6
 80167c6:	e7df      	b.n	8016788 <_realloc_r+0x1e>

080167c8 <_strtoul_l.constprop.0>:
 80167c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167cc:	4f36      	ldr	r7, [pc, #216]	; (80168a8 <_strtoul_l.constprop.0+0xe0>)
 80167ce:	4686      	mov	lr, r0
 80167d0:	460d      	mov	r5, r1
 80167d2:	4628      	mov	r0, r5
 80167d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167d8:	5d3e      	ldrb	r6, [r7, r4]
 80167da:	f016 0608 	ands.w	r6, r6, #8
 80167de:	d1f8      	bne.n	80167d2 <_strtoul_l.constprop.0+0xa>
 80167e0:	2c2d      	cmp	r4, #45	; 0x2d
 80167e2:	d130      	bne.n	8016846 <_strtoul_l.constprop.0+0x7e>
 80167e4:	782c      	ldrb	r4, [r5, #0]
 80167e6:	2601      	movs	r6, #1
 80167e8:	1c85      	adds	r5, r0, #2
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d057      	beq.n	801689e <_strtoul_l.constprop.0+0xd6>
 80167ee:	2b10      	cmp	r3, #16
 80167f0:	d109      	bne.n	8016806 <_strtoul_l.constprop.0+0x3e>
 80167f2:	2c30      	cmp	r4, #48	; 0x30
 80167f4:	d107      	bne.n	8016806 <_strtoul_l.constprop.0+0x3e>
 80167f6:	7828      	ldrb	r0, [r5, #0]
 80167f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80167fc:	2858      	cmp	r0, #88	; 0x58
 80167fe:	d149      	bne.n	8016894 <_strtoul_l.constprop.0+0xcc>
 8016800:	786c      	ldrb	r4, [r5, #1]
 8016802:	2310      	movs	r3, #16
 8016804:	3502      	adds	r5, #2
 8016806:	f04f 38ff 	mov.w	r8, #4294967295
 801680a:	2700      	movs	r7, #0
 801680c:	fbb8 f8f3 	udiv	r8, r8, r3
 8016810:	fb03 f908 	mul.w	r9, r3, r8
 8016814:	ea6f 0909 	mvn.w	r9, r9
 8016818:	4638      	mov	r0, r7
 801681a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801681e:	f1bc 0f09 	cmp.w	ip, #9
 8016822:	d815      	bhi.n	8016850 <_strtoul_l.constprop.0+0x88>
 8016824:	4664      	mov	r4, ip
 8016826:	42a3      	cmp	r3, r4
 8016828:	dd23      	ble.n	8016872 <_strtoul_l.constprop.0+0xaa>
 801682a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801682e:	d007      	beq.n	8016840 <_strtoul_l.constprop.0+0x78>
 8016830:	4580      	cmp	r8, r0
 8016832:	d31b      	bcc.n	801686c <_strtoul_l.constprop.0+0xa4>
 8016834:	d101      	bne.n	801683a <_strtoul_l.constprop.0+0x72>
 8016836:	45a1      	cmp	r9, r4
 8016838:	db18      	blt.n	801686c <_strtoul_l.constprop.0+0xa4>
 801683a:	fb00 4003 	mla	r0, r0, r3, r4
 801683e:	2701      	movs	r7, #1
 8016840:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016844:	e7e9      	b.n	801681a <_strtoul_l.constprop.0+0x52>
 8016846:	2c2b      	cmp	r4, #43	; 0x2b
 8016848:	bf04      	itt	eq
 801684a:	782c      	ldrbeq	r4, [r5, #0]
 801684c:	1c85      	addeq	r5, r0, #2
 801684e:	e7cc      	b.n	80167ea <_strtoul_l.constprop.0+0x22>
 8016850:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016854:	f1bc 0f19 	cmp.w	ip, #25
 8016858:	d801      	bhi.n	801685e <_strtoul_l.constprop.0+0x96>
 801685a:	3c37      	subs	r4, #55	; 0x37
 801685c:	e7e3      	b.n	8016826 <_strtoul_l.constprop.0+0x5e>
 801685e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016862:	f1bc 0f19 	cmp.w	ip, #25
 8016866:	d804      	bhi.n	8016872 <_strtoul_l.constprop.0+0xaa>
 8016868:	3c57      	subs	r4, #87	; 0x57
 801686a:	e7dc      	b.n	8016826 <_strtoul_l.constprop.0+0x5e>
 801686c:	f04f 37ff 	mov.w	r7, #4294967295
 8016870:	e7e6      	b.n	8016840 <_strtoul_l.constprop.0+0x78>
 8016872:	1c7b      	adds	r3, r7, #1
 8016874:	d106      	bne.n	8016884 <_strtoul_l.constprop.0+0xbc>
 8016876:	2322      	movs	r3, #34	; 0x22
 8016878:	f8ce 3000 	str.w	r3, [lr]
 801687c:	4638      	mov	r0, r7
 801687e:	b932      	cbnz	r2, 801688e <_strtoul_l.constprop.0+0xc6>
 8016880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016884:	b106      	cbz	r6, 8016888 <_strtoul_l.constprop.0+0xc0>
 8016886:	4240      	negs	r0, r0
 8016888:	2a00      	cmp	r2, #0
 801688a:	d0f9      	beq.n	8016880 <_strtoul_l.constprop.0+0xb8>
 801688c:	b107      	cbz	r7, 8016890 <_strtoul_l.constprop.0+0xc8>
 801688e:	1e69      	subs	r1, r5, #1
 8016890:	6011      	str	r1, [r2, #0]
 8016892:	e7f5      	b.n	8016880 <_strtoul_l.constprop.0+0xb8>
 8016894:	2430      	movs	r4, #48	; 0x30
 8016896:	2b00      	cmp	r3, #0
 8016898:	d1b5      	bne.n	8016806 <_strtoul_l.constprop.0+0x3e>
 801689a:	2308      	movs	r3, #8
 801689c:	e7b3      	b.n	8016806 <_strtoul_l.constprop.0+0x3e>
 801689e:	2c30      	cmp	r4, #48	; 0x30
 80168a0:	d0a9      	beq.n	80167f6 <_strtoul_l.constprop.0+0x2e>
 80168a2:	230a      	movs	r3, #10
 80168a4:	e7af      	b.n	8016806 <_strtoul_l.constprop.0+0x3e>
 80168a6:	bf00      	nop
 80168a8:	080187f1 	.word	0x080187f1

080168ac <_strtoul_r>:
 80168ac:	f7ff bf8c 	b.w	80167c8 <_strtoul_l.constprop.0>

080168b0 <__ascii_wctomb>:
 80168b0:	b149      	cbz	r1, 80168c6 <__ascii_wctomb+0x16>
 80168b2:	2aff      	cmp	r2, #255	; 0xff
 80168b4:	bf85      	ittet	hi
 80168b6:	238a      	movhi	r3, #138	; 0x8a
 80168b8:	6003      	strhi	r3, [r0, #0]
 80168ba:	700a      	strbls	r2, [r1, #0]
 80168bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80168c0:	bf98      	it	ls
 80168c2:	2001      	movls	r0, #1
 80168c4:	4770      	bx	lr
 80168c6:	4608      	mov	r0, r1
 80168c8:	4770      	bx	lr
	...

080168cc <fiprintf>:
 80168cc:	b40e      	push	{r1, r2, r3}
 80168ce:	b503      	push	{r0, r1, lr}
 80168d0:	4601      	mov	r1, r0
 80168d2:	ab03      	add	r3, sp, #12
 80168d4:	4805      	ldr	r0, [pc, #20]	; (80168ec <fiprintf+0x20>)
 80168d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168da:	6800      	ldr	r0, [r0, #0]
 80168dc:	9301      	str	r3, [sp, #4]
 80168de:	f000 f83f 	bl	8016960 <_vfiprintf_r>
 80168e2:	b002      	add	sp, #8
 80168e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168e8:	b003      	add	sp, #12
 80168ea:	4770      	bx	lr
 80168ec:	20000070 	.word	0x20000070

080168f0 <abort>:
 80168f0:	b508      	push	{r3, lr}
 80168f2:	2006      	movs	r0, #6
 80168f4:	f000 fa0c 	bl	8016d10 <raise>
 80168f8:	2001      	movs	r0, #1
 80168fa:	f7ef fc35 	bl	8006168 <_exit>

080168fe <_malloc_usable_size_r>:
 80168fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016902:	1f18      	subs	r0, r3, #4
 8016904:	2b00      	cmp	r3, #0
 8016906:	bfbc      	itt	lt
 8016908:	580b      	ldrlt	r3, [r1, r0]
 801690a:	18c0      	addlt	r0, r0, r3
 801690c:	4770      	bx	lr

0801690e <__sfputc_r>:
 801690e:	6893      	ldr	r3, [r2, #8]
 8016910:	3b01      	subs	r3, #1
 8016912:	2b00      	cmp	r3, #0
 8016914:	b410      	push	{r4}
 8016916:	6093      	str	r3, [r2, #8]
 8016918:	da08      	bge.n	801692c <__sfputc_r+0x1e>
 801691a:	6994      	ldr	r4, [r2, #24]
 801691c:	42a3      	cmp	r3, r4
 801691e:	db01      	blt.n	8016924 <__sfputc_r+0x16>
 8016920:	290a      	cmp	r1, #10
 8016922:	d103      	bne.n	801692c <__sfputc_r+0x1e>
 8016924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016928:	f000 b934 	b.w	8016b94 <__swbuf_r>
 801692c:	6813      	ldr	r3, [r2, #0]
 801692e:	1c58      	adds	r0, r3, #1
 8016930:	6010      	str	r0, [r2, #0]
 8016932:	7019      	strb	r1, [r3, #0]
 8016934:	4608      	mov	r0, r1
 8016936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801693a:	4770      	bx	lr

0801693c <__sfputs_r>:
 801693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801693e:	4606      	mov	r6, r0
 8016940:	460f      	mov	r7, r1
 8016942:	4614      	mov	r4, r2
 8016944:	18d5      	adds	r5, r2, r3
 8016946:	42ac      	cmp	r4, r5
 8016948:	d101      	bne.n	801694e <__sfputs_r+0x12>
 801694a:	2000      	movs	r0, #0
 801694c:	e007      	b.n	801695e <__sfputs_r+0x22>
 801694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016952:	463a      	mov	r2, r7
 8016954:	4630      	mov	r0, r6
 8016956:	f7ff ffda 	bl	801690e <__sfputc_r>
 801695a:	1c43      	adds	r3, r0, #1
 801695c:	d1f3      	bne.n	8016946 <__sfputs_r+0xa>
 801695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016960 <_vfiprintf_r>:
 8016960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016964:	460d      	mov	r5, r1
 8016966:	b09d      	sub	sp, #116	; 0x74
 8016968:	4614      	mov	r4, r2
 801696a:	4698      	mov	r8, r3
 801696c:	4606      	mov	r6, r0
 801696e:	b118      	cbz	r0, 8016978 <_vfiprintf_r+0x18>
 8016970:	6a03      	ldr	r3, [r0, #32]
 8016972:	b90b      	cbnz	r3, 8016978 <_vfiprintf_r+0x18>
 8016974:	f7fc f90c 	bl	8012b90 <__sinit>
 8016978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801697a:	07d9      	lsls	r1, r3, #31
 801697c:	d405      	bmi.n	801698a <_vfiprintf_r+0x2a>
 801697e:	89ab      	ldrh	r3, [r5, #12]
 8016980:	059a      	lsls	r2, r3, #22
 8016982:	d402      	bmi.n	801698a <_vfiprintf_r+0x2a>
 8016984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016986:	f7fc fab0 	bl	8012eea <__retarget_lock_acquire_recursive>
 801698a:	89ab      	ldrh	r3, [r5, #12]
 801698c:	071b      	lsls	r3, r3, #28
 801698e:	d501      	bpl.n	8016994 <_vfiprintf_r+0x34>
 8016990:	692b      	ldr	r3, [r5, #16]
 8016992:	b99b      	cbnz	r3, 80169bc <_vfiprintf_r+0x5c>
 8016994:	4629      	mov	r1, r5
 8016996:	4630      	mov	r0, r6
 8016998:	f000 f93a 	bl	8016c10 <__swsetup_r>
 801699c:	b170      	cbz	r0, 80169bc <_vfiprintf_r+0x5c>
 801699e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169a0:	07dc      	lsls	r4, r3, #31
 80169a2:	d504      	bpl.n	80169ae <_vfiprintf_r+0x4e>
 80169a4:	f04f 30ff 	mov.w	r0, #4294967295
 80169a8:	b01d      	add	sp, #116	; 0x74
 80169aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ae:	89ab      	ldrh	r3, [r5, #12]
 80169b0:	0598      	lsls	r0, r3, #22
 80169b2:	d4f7      	bmi.n	80169a4 <_vfiprintf_r+0x44>
 80169b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169b6:	f7fc fa99 	bl	8012eec <__retarget_lock_release_recursive>
 80169ba:	e7f3      	b.n	80169a4 <_vfiprintf_r+0x44>
 80169bc:	2300      	movs	r3, #0
 80169be:	9309      	str	r3, [sp, #36]	; 0x24
 80169c0:	2320      	movs	r3, #32
 80169c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80169ca:	2330      	movs	r3, #48	; 0x30
 80169cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016b80 <_vfiprintf_r+0x220>
 80169d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169d4:	f04f 0901 	mov.w	r9, #1
 80169d8:	4623      	mov	r3, r4
 80169da:	469a      	mov	sl, r3
 80169dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169e0:	b10a      	cbz	r2, 80169e6 <_vfiprintf_r+0x86>
 80169e2:	2a25      	cmp	r2, #37	; 0x25
 80169e4:	d1f9      	bne.n	80169da <_vfiprintf_r+0x7a>
 80169e6:	ebba 0b04 	subs.w	fp, sl, r4
 80169ea:	d00b      	beq.n	8016a04 <_vfiprintf_r+0xa4>
 80169ec:	465b      	mov	r3, fp
 80169ee:	4622      	mov	r2, r4
 80169f0:	4629      	mov	r1, r5
 80169f2:	4630      	mov	r0, r6
 80169f4:	f7ff ffa2 	bl	801693c <__sfputs_r>
 80169f8:	3001      	adds	r0, #1
 80169fa:	f000 80a9 	beq.w	8016b50 <_vfiprintf_r+0x1f0>
 80169fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a00:	445a      	add	r2, fp
 8016a02:	9209      	str	r2, [sp, #36]	; 0x24
 8016a04:	f89a 3000 	ldrb.w	r3, [sl]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	f000 80a1 	beq.w	8016b50 <_vfiprintf_r+0x1f0>
 8016a0e:	2300      	movs	r3, #0
 8016a10:	f04f 32ff 	mov.w	r2, #4294967295
 8016a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a18:	f10a 0a01 	add.w	sl, sl, #1
 8016a1c:	9304      	str	r3, [sp, #16]
 8016a1e:	9307      	str	r3, [sp, #28]
 8016a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a24:	931a      	str	r3, [sp, #104]	; 0x68
 8016a26:	4654      	mov	r4, sl
 8016a28:	2205      	movs	r2, #5
 8016a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a2e:	4854      	ldr	r0, [pc, #336]	; (8016b80 <_vfiprintf_r+0x220>)
 8016a30:	f7e9 fbf6 	bl	8000220 <memchr>
 8016a34:	9a04      	ldr	r2, [sp, #16]
 8016a36:	b9d8      	cbnz	r0, 8016a70 <_vfiprintf_r+0x110>
 8016a38:	06d1      	lsls	r1, r2, #27
 8016a3a:	bf44      	itt	mi
 8016a3c:	2320      	movmi	r3, #32
 8016a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a42:	0713      	lsls	r3, r2, #28
 8016a44:	bf44      	itt	mi
 8016a46:	232b      	movmi	r3, #43	; 0x2b
 8016a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a50:	2b2a      	cmp	r3, #42	; 0x2a
 8016a52:	d015      	beq.n	8016a80 <_vfiprintf_r+0x120>
 8016a54:	9a07      	ldr	r2, [sp, #28]
 8016a56:	4654      	mov	r4, sl
 8016a58:	2000      	movs	r0, #0
 8016a5a:	f04f 0c0a 	mov.w	ip, #10
 8016a5e:	4621      	mov	r1, r4
 8016a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a64:	3b30      	subs	r3, #48	; 0x30
 8016a66:	2b09      	cmp	r3, #9
 8016a68:	d94d      	bls.n	8016b06 <_vfiprintf_r+0x1a6>
 8016a6a:	b1b0      	cbz	r0, 8016a9a <_vfiprintf_r+0x13a>
 8016a6c:	9207      	str	r2, [sp, #28]
 8016a6e:	e014      	b.n	8016a9a <_vfiprintf_r+0x13a>
 8016a70:	eba0 0308 	sub.w	r3, r0, r8
 8016a74:	fa09 f303 	lsl.w	r3, r9, r3
 8016a78:	4313      	orrs	r3, r2
 8016a7a:	9304      	str	r3, [sp, #16]
 8016a7c:	46a2      	mov	sl, r4
 8016a7e:	e7d2      	b.n	8016a26 <_vfiprintf_r+0xc6>
 8016a80:	9b03      	ldr	r3, [sp, #12]
 8016a82:	1d19      	adds	r1, r3, #4
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	9103      	str	r1, [sp, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	bfbb      	ittet	lt
 8016a8c:	425b      	neglt	r3, r3
 8016a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8016a92:	9307      	strge	r3, [sp, #28]
 8016a94:	9307      	strlt	r3, [sp, #28]
 8016a96:	bfb8      	it	lt
 8016a98:	9204      	strlt	r2, [sp, #16]
 8016a9a:	7823      	ldrb	r3, [r4, #0]
 8016a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a9e:	d10c      	bne.n	8016aba <_vfiprintf_r+0x15a>
 8016aa0:	7863      	ldrb	r3, [r4, #1]
 8016aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8016aa4:	d134      	bne.n	8016b10 <_vfiprintf_r+0x1b0>
 8016aa6:	9b03      	ldr	r3, [sp, #12]
 8016aa8:	1d1a      	adds	r2, r3, #4
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	9203      	str	r2, [sp, #12]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	bfb8      	it	lt
 8016ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ab6:	3402      	adds	r4, #2
 8016ab8:	9305      	str	r3, [sp, #20]
 8016aba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016b90 <_vfiprintf_r+0x230>
 8016abe:	7821      	ldrb	r1, [r4, #0]
 8016ac0:	2203      	movs	r2, #3
 8016ac2:	4650      	mov	r0, sl
 8016ac4:	f7e9 fbac 	bl	8000220 <memchr>
 8016ac8:	b138      	cbz	r0, 8016ada <_vfiprintf_r+0x17a>
 8016aca:	9b04      	ldr	r3, [sp, #16]
 8016acc:	eba0 000a 	sub.w	r0, r0, sl
 8016ad0:	2240      	movs	r2, #64	; 0x40
 8016ad2:	4082      	lsls	r2, r0
 8016ad4:	4313      	orrs	r3, r2
 8016ad6:	3401      	adds	r4, #1
 8016ad8:	9304      	str	r3, [sp, #16]
 8016ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ade:	4829      	ldr	r0, [pc, #164]	; (8016b84 <_vfiprintf_r+0x224>)
 8016ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ae4:	2206      	movs	r2, #6
 8016ae6:	f7e9 fb9b 	bl	8000220 <memchr>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	d03f      	beq.n	8016b6e <_vfiprintf_r+0x20e>
 8016aee:	4b26      	ldr	r3, [pc, #152]	; (8016b88 <_vfiprintf_r+0x228>)
 8016af0:	bb1b      	cbnz	r3, 8016b3a <_vfiprintf_r+0x1da>
 8016af2:	9b03      	ldr	r3, [sp, #12]
 8016af4:	3307      	adds	r3, #7
 8016af6:	f023 0307 	bic.w	r3, r3, #7
 8016afa:	3308      	adds	r3, #8
 8016afc:	9303      	str	r3, [sp, #12]
 8016afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b00:	443b      	add	r3, r7
 8016b02:	9309      	str	r3, [sp, #36]	; 0x24
 8016b04:	e768      	b.n	80169d8 <_vfiprintf_r+0x78>
 8016b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b0a:	460c      	mov	r4, r1
 8016b0c:	2001      	movs	r0, #1
 8016b0e:	e7a6      	b.n	8016a5e <_vfiprintf_r+0xfe>
 8016b10:	2300      	movs	r3, #0
 8016b12:	3401      	adds	r4, #1
 8016b14:	9305      	str	r3, [sp, #20]
 8016b16:	4619      	mov	r1, r3
 8016b18:	f04f 0c0a 	mov.w	ip, #10
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b22:	3a30      	subs	r2, #48	; 0x30
 8016b24:	2a09      	cmp	r2, #9
 8016b26:	d903      	bls.n	8016b30 <_vfiprintf_r+0x1d0>
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d0c6      	beq.n	8016aba <_vfiprintf_r+0x15a>
 8016b2c:	9105      	str	r1, [sp, #20]
 8016b2e:	e7c4      	b.n	8016aba <_vfiprintf_r+0x15a>
 8016b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b34:	4604      	mov	r4, r0
 8016b36:	2301      	movs	r3, #1
 8016b38:	e7f0      	b.n	8016b1c <_vfiprintf_r+0x1bc>
 8016b3a:	ab03      	add	r3, sp, #12
 8016b3c:	9300      	str	r3, [sp, #0]
 8016b3e:	462a      	mov	r2, r5
 8016b40:	4b12      	ldr	r3, [pc, #72]	; (8016b8c <_vfiprintf_r+0x22c>)
 8016b42:	a904      	add	r1, sp, #16
 8016b44:	4630      	mov	r0, r6
 8016b46:	f7fb f9c1 	bl	8011ecc <_printf_float>
 8016b4a:	4607      	mov	r7, r0
 8016b4c:	1c78      	adds	r0, r7, #1
 8016b4e:	d1d6      	bne.n	8016afe <_vfiprintf_r+0x19e>
 8016b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b52:	07d9      	lsls	r1, r3, #31
 8016b54:	d405      	bmi.n	8016b62 <_vfiprintf_r+0x202>
 8016b56:	89ab      	ldrh	r3, [r5, #12]
 8016b58:	059a      	lsls	r2, r3, #22
 8016b5a:	d402      	bmi.n	8016b62 <_vfiprintf_r+0x202>
 8016b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b5e:	f7fc f9c5 	bl	8012eec <__retarget_lock_release_recursive>
 8016b62:	89ab      	ldrh	r3, [r5, #12]
 8016b64:	065b      	lsls	r3, r3, #25
 8016b66:	f53f af1d 	bmi.w	80169a4 <_vfiprintf_r+0x44>
 8016b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b6c:	e71c      	b.n	80169a8 <_vfiprintf_r+0x48>
 8016b6e:	ab03      	add	r3, sp, #12
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	462a      	mov	r2, r5
 8016b74:	4b05      	ldr	r3, [pc, #20]	; (8016b8c <_vfiprintf_r+0x22c>)
 8016b76:	a904      	add	r1, sp, #16
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f7fb fc4b 	bl	8012414 <_printf_i>
 8016b7e:	e7e4      	b.n	8016b4a <_vfiprintf_r+0x1ea>
 8016b80:	080188f1 	.word	0x080188f1
 8016b84:	080188fb 	.word	0x080188fb
 8016b88:	08011ecd 	.word	0x08011ecd
 8016b8c:	0801693d 	.word	0x0801693d
 8016b90:	080188f7 	.word	0x080188f7

08016b94 <__swbuf_r>:
 8016b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b96:	460e      	mov	r6, r1
 8016b98:	4614      	mov	r4, r2
 8016b9a:	4605      	mov	r5, r0
 8016b9c:	b118      	cbz	r0, 8016ba6 <__swbuf_r+0x12>
 8016b9e:	6a03      	ldr	r3, [r0, #32]
 8016ba0:	b90b      	cbnz	r3, 8016ba6 <__swbuf_r+0x12>
 8016ba2:	f7fb fff5 	bl	8012b90 <__sinit>
 8016ba6:	69a3      	ldr	r3, [r4, #24]
 8016ba8:	60a3      	str	r3, [r4, #8]
 8016baa:	89a3      	ldrh	r3, [r4, #12]
 8016bac:	071a      	lsls	r2, r3, #28
 8016bae:	d525      	bpl.n	8016bfc <__swbuf_r+0x68>
 8016bb0:	6923      	ldr	r3, [r4, #16]
 8016bb2:	b31b      	cbz	r3, 8016bfc <__swbuf_r+0x68>
 8016bb4:	6823      	ldr	r3, [r4, #0]
 8016bb6:	6922      	ldr	r2, [r4, #16]
 8016bb8:	1a98      	subs	r0, r3, r2
 8016bba:	6963      	ldr	r3, [r4, #20]
 8016bbc:	b2f6      	uxtb	r6, r6
 8016bbe:	4283      	cmp	r3, r0
 8016bc0:	4637      	mov	r7, r6
 8016bc2:	dc04      	bgt.n	8016bce <__swbuf_r+0x3a>
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f7ff f962 	bl	8015e90 <_fflush_r>
 8016bcc:	b9e0      	cbnz	r0, 8016c08 <__swbuf_r+0x74>
 8016bce:	68a3      	ldr	r3, [r4, #8]
 8016bd0:	3b01      	subs	r3, #1
 8016bd2:	60a3      	str	r3, [r4, #8]
 8016bd4:	6823      	ldr	r3, [r4, #0]
 8016bd6:	1c5a      	adds	r2, r3, #1
 8016bd8:	6022      	str	r2, [r4, #0]
 8016bda:	701e      	strb	r6, [r3, #0]
 8016bdc:	6962      	ldr	r2, [r4, #20]
 8016bde:	1c43      	adds	r3, r0, #1
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d004      	beq.n	8016bee <__swbuf_r+0x5a>
 8016be4:	89a3      	ldrh	r3, [r4, #12]
 8016be6:	07db      	lsls	r3, r3, #31
 8016be8:	d506      	bpl.n	8016bf8 <__swbuf_r+0x64>
 8016bea:	2e0a      	cmp	r6, #10
 8016bec:	d104      	bne.n	8016bf8 <__swbuf_r+0x64>
 8016bee:	4621      	mov	r1, r4
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	f7ff f94d 	bl	8015e90 <_fflush_r>
 8016bf6:	b938      	cbnz	r0, 8016c08 <__swbuf_r+0x74>
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	4628      	mov	r0, r5
 8016c00:	f000 f806 	bl	8016c10 <__swsetup_r>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d0d5      	beq.n	8016bb4 <__swbuf_r+0x20>
 8016c08:	f04f 37ff 	mov.w	r7, #4294967295
 8016c0c:	e7f4      	b.n	8016bf8 <__swbuf_r+0x64>
	...

08016c10 <__swsetup_r>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4b2a      	ldr	r3, [pc, #168]	; (8016cbc <__swsetup_r+0xac>)
 8016c14:	4605      	mov	r5, r0
 8016c16:	6818      	ldr	r0, [r3, #0]
 8016c18:	460c      	mov	r4, r1
 8016c1a:	b118      	cbz	r0, 8016c24 <__swsetup_r+0x14>
 8016c1c:	6a03      	ldr	r3, [r0, #32]
 8016c1e:	b90b      	cbnz	r3, 8016c24 <__swsetup_r+0x14>
 8016c20:	f7fb ffb6 	bl	8012b90 <__sinit>
 8016c24:	89a3      	ldrh	r3, [r4, #12]
 8016c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c2a:	0718      	lsls	r0, r3, #28
 8016c2c:	d422      	bmi.n	8016c74 <__swsetup_r+0x64>
 8016c2e:	06d9      	lsls	r1, r3, #27
 8016c30:	d407      	bmi.n	8016c42 <__swsetup_r+0x32>
 8016c32:	2309      	movs	r3, #9
 8016c34:	602b      	str	r3, [r5, #0]
 8016c36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c3a:	81a3      	strh	r3, [r4, #12]
 8016c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c40:	e034      	b.n	8016cac <__swsetup_r+0x9c>
 8016c42:	0758      	lsls	r0, r3, #29
 8016c44:	d512      	bpl.n	8016c6c <__swsetup_r+0x5c>
 8016c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c48:	b141      	cbz	r1, 8016c5c <__swsetup_r+0x4c>
 8016c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c4e:	4299      	cmp	r1, r3
 8016c50:	d002      	beq.n	8016c58 <__swsetup_r+0x48>
 8016c52:	4628      	mov	r0, r5
 8016c54:	f7fc ffda 	bl	8013c0c <_free_r>
 8016c58:	2300      	movs	r3, #0
 8016c5a:	6363      	str	r3, [r4, #52]	; 0x34
 8016c5c:	89a3      	ldrh	r3, [r4, #12]
 8016c5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c62:	81a3      	strh	r3, [r4, #12]
 8016c64:	2300      	movs	r3, #0
 8016c66:	6063      	str	r3, [r4, #4]
 8016c68:	6923      	ldr	r3, [r4, #16]
 8016c6a:	6023      	str	r3, [r4, #0]
 8016c6c:	89a3      	ldrh	r3, [r4, #12]
 8016c6e:	f043 0308 	orr.w	r3, r3, #8
 8016c72:	81a3      	strh	r3, [r4, #12]
 8016c74:	6923      	ldr	r3, [r4, #16]
 8016c76:	b94b      	cbnz	r3, 8016c8c <__swsetup_r+0x7c>
 8016c78:	89a3      	ldrh	r3, [r4, #12]
 8016c7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c82:	d003      	beq.n	8016c8c <__swsetup_r+0x7c>
 8016c84:	4621      	mov	r1, r4
 8016c86:	4628      	mov	r0, r5
 8016c88:	f000 f884 	bl	8016d94 <__smakebuf_r>
 8016c8c:	89a0      	ldrh	r0, [r4, #12]
 8016c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c92:	f010 0301 	ands.w	r3, r0, #1
 8016c96:	d00a      	beq.n	8016cae <__swsetup_r+0x9e>
 8016c98:	2300      	movs	r3, #0
 8016c9a:	60a3      	str	r3, [r4, #8]
 8016c9c:	6963      	ldr	r3, [r4, #20]
 8016c9e:	425b      	negs	r3, r3
 8016ca0:	61a3      	str	r3, [r4, #24]
 8016ca2:	6923      	ldr	r3, [r4, #16]
 8016ca4:	b943      	cbnz	r3, 8016cb8 <__swsetup_r+0xa8>
 8016ca6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016caa:	d1c4      	bne.n	8016c36 <__swsetup_r+0x26>
 8016cac:	bd38      	pop	{r3, r4, r5, pc}
 8016cae:	0781      	lsls	r1, r0, #30
 8016cb0:	bf58      	it	pl
 8016cb2:	6963      	ldrpl	r3, [r4, #20]
 8016cb4:	60a3      	str	r3, [r4, #8]
 8016cb6:	e7f4      	b.n	8016ca2 <__swsetup_r+0x92>
 8016cb8:	2000      	movs	r0, #0
 8016cba:	e7f7      	b.n	8016cac <__swsetup_r+0x9c>
 8016cbc:	20000070 	.word	0x20000070

08016cc0 <_raise_r>:
 8016cc0:	291f      	cmp	r1, #31
 8016cc2:	b538      	push	{r3, r4, r5, lr}
 8016cc4:	4604      	mov	r4, r0
 8016cc6:	460d      	mov	r5, r1
 8016cc8:	d904      	bls.n	8016cd4 <_raise_r+0x14>
 8016cca:	2316      	movs	r3, #22
 8016ccc:	6003      	str	r3, [r0, #0]
 8016cce:	f04f 30ff 	mov.w	r0, #4294967295
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016cd6:	b112      	cbz	r2, 8016cde <_raise_r+0x1e>
 8016cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016cdc:	b94b      	cbnz	r3, 8016cf2 <_raise_r+0x32>
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f000 f830 	bl	8016d44 <_getpid_r>
 8016ce4:	462a      	mov	r2, r5
 8016ce6:	4601      	mov	r1, r0
 8016ce8:	4620      	mov	r0, r4
 8016cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cee:	f000 b817 	b.w	8016d20 <_kill_r>
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d00a      	beq.n	8016d0c <_raise_r+0x4c>
 8016cf6:	1c59      	adds	r1, r3, #1
 8016cf8:	d103      	bne.n	8016d02 <_raise_r+0x42>
 8016cfa:	2316      	movs	r3, #22
 8016cfc:	6003      	str	r3, [r0, #0]
 8016cfe:	2001      	movs	r0, #1
 8016d00:	e7e7      	b.n	8016cd2 <_raise_r+0x12>
 8016d02:	2400      	movs	r4, #0
 8016d04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d08:	4628      	mov	r0, r5
 8016d0a:	4798      	blx	r3
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	e7e0      	b.n	8016cd2 <_raise_r+0x12>

08016d10 <raise>:
 8016d10:	4b02      	ldr	r3, [pc, #8]	; (8016d1c <raise+0xc>)
 8016d12:	4601      	mov	r1, r0
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	f7ff bfd3 	b.w	8016cc0 <_raise_r>
 8016d1a:	bf00      	nop
 8016d1c:	20000070 	.word	0x20000070

08016d20 <_kill_r>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	4d07      	ldr	r5, [pc, #28]	; (8016d40 <_kill_r+0x20>)
 8016d24:	2300      	movs	r3, #0
 8016d26:	4604      	mov	r4, r0
 8016d28:	4608      	mov	r0, r1
 8016d2a:	4611      	mov	r1, r2
 8016d2c:	602b      	str	r3, [r5, #0]
 8016d2e:	f7ef fa0b 	bl	8006148 <_kill>
 8016d32:	1c43      	adds	r3, r0, #1
 8016d34:	d102      	bne.n	8016d3c <_kill_r+0x1c>
 8016d36:	682b      	ldr	r3, [r5, #0]
 8016d38:	b103      	cbz	r3, 8016d3c <_kill_r+0x1c>
 8016d3a:	6023      	str	r3, [r4, #0]
 8016d3c:	bd38      	pop	{r3, r4, r5, pc}
 8016d3e:	bf00      	nop
 8016d40:	2000903c 	.word	0x2000903c

08016d44 <_getpid_r>:
 8016d44:	f7ef b9f8 	b.w	8006138 <_getpid>

08016d48 <__swhatbuf_r>:
 8016d48:	b570      	push	{r4, r5, r6, lr}
 8016d4a:	460c      	mov	r4, r1
 8016d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d50:	2900      	cmp	r1, #0
 8016d52:	b096      	sub	sp, #88	; 0x58
 8016d54:	4615      	mov	r5, r2
 8016d56:	461e      	mov	r6, r3
 8016d58:	da0d      	bge.n	8016d76 <__swhatbuf_r+0x2e>
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016d60:	f04f 0100 	mov.w	r1, #0
 8016d64:	bf0c      	ite	eq
 8016d66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016d6a:	2340      	movne	r3, #64	; 0x40
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	6031      	str	r1, [r6, #0]
 8016d70:	602b      	str	r3, [r5, #0]
 8016d72:	b016      	add	sp, #88	; 0x58
 8016d74:	bd70      	pop	{r4, r5, r6, pc}
 8016d76:	466a      	mov	r2, sp
 8016d78:	f000 f848 	bl	8016e0c <_fstat_r>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	dbec      	blt.n	8016d5a <__swhatbuf_r+0x12>
 8016d80:	9901      	ldr	r1, [sp, #4]
 8016d82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016d86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016d8a:	4259      	negs	r1, r3
 8016d8c:	4159      	adcs	r1, r3
 8016d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d92:	e7eb      	b.n	8016d6c <__swhatbuf_r+0x24>

08016d94 <__smakebuf_r>:
 8016d94:	898b      	ldrh	r3, [r1, #12]
 8016d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d98:	079d      	lsls	r5, r3, #30
 8016d9a:	4606      	mov	r6, r0
 8016d9c:	460c      	mov	r4, r1
 8016d9e:	d507      	bpl.n	8016db0 <__smakebuf_r+0x1c>
 8016da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016da4:	6023      	str	r3, [r4, #0]
 8016da6:	6123      	str	r3, [r4, #16]
 8016da8:	2301      	movs	r3, #1
 8016daa:	6163      	str	r3, [r4, #20]
 8016dac:	b002      	add	sp, #8
 8016dae:	bd70      	pop	{r4, r5, r6, pc}
 8016db0:	ab01      	add	r3, sp, #4
 8016db2:	466a      	mov	r2, sp
 8016db4:	f7ff ffc8 	bl	8016d48 <__swhatbuf_r>
 8016db8:	9900      	ldr	r1, [sp, #0]
 8016dba:	4605      	mov	r5, r0
 8016dbc:	4630      	mov	r0, r6
 8016dbe:	f7fc ff99 	bl	8013cf4 <_malloc_r>
 8016dc2:	b948      	cbnz	r0, 8016dd8 <__smakebuf_r+0x44>
 8016dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dc8:	059a      	lsls	r2, r3, #22
 8016dca:	d4ef      	bmi.n	8016dac <__smakebuf_r+0x18>
 8016dcc:	f023 0303 	bic.w	r3, r3, #3
 8016dd0:	f043 0302 	orr.w	r3, r3, #2
 8016dd4:	81a3      	strh	r3, [r4, #12]
 8016dd6:	e7e3      	b.n	8016da0 <__smakebuf_r+0xc>
 8016dd8:	89a3      	ldrh	r3, [r4, #12]
 8016dda:	6020      	str	r0, [r4, #0]
 8016ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016de0:	81a3      	strh	r3, [r4, #12]
 8016de2:	9b00      	ldr	r3, [sp, #0]
 8016de4:	6163      	str	r3, [r4, #20]
 8016de6:	9b01      	ldr	r3, [sp, #4]
 8016de8:	6120      	str	r0, [r4, #16]
 8016dea:	b15b      	cbz	r3, 8016e04 <__smakebuf_r+0x70>
 8016dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016df0:	4630      	mov	r0, r6
 8016df2:	f000 f81d 	bl	8016e30 <_isatty_r>
 8016df6:	b128      	cbz	r0, 8016e04 <__smakebuf_r+0x70>
 8016df8:	89a3      	ldrh	r3, [r4, #12]
 8016dfa:	f023 0303 	bic.w	r3, r3, #3
 8016dfe:	f043 0301 	orr.w	r3, r3, #1
 8016e02:	81a3      	strh	r3, [r4, #12]
 8016e04:	89a3      	ldrh	r3, [r4, #12]
 8016e06:	431d      	orrs	r5, r3
 8016e08:	81a5      	strh	r5, [r4, #12]
 8016e0a:	e7cf      	b.n	8016dac <__smakebuf_r+0x18>

08016e0c <_fstat_r>:
 8016e0c:	b538      	push	{r3, r4, r5, lr}
 8016e0e:	4d07      	ldr	r5, [pc, #28]	; (8016e2c <_fstat_r+0x20>)
 8016e10:	2300      	movs	r3, #0
 8016e12:	4604      	mov	r4, r0
 8016e14:	4608      	mov	r0, r1
 8016e16:	4611      	mov	r1, r2
 8016e18:	602b      	str	r3, [r5, #0]
 8016e1a:	f7ef f9f4 	bl	8006206 <_fstat>
 8016e1e:	1c43      	adds	r3, r0, #1
 8016e20:	d102      	bne.n	8016e28 <_fstat_r+0x1c>
 8016e22:	682b      	ldr	r3, [r5, #0]
 8016e24:	b103      	cbz	r3, 8016e28 <_fstat_r+0x1c>
 8016e26:	6023      	str	r3, [r4, #0]
 8016e28:	bd38      	pop	{r3, r4, r5, pc}
 8016e2a:	bf00      	nop
 8016e2c:	2000903c 	.word	0x2000903c

08016e30 <_isatty_r>:
 8016e30:	b538      	push	{r3, r4, r5, lr}
 8016e32:	4d06      	ldr	r5, [pc, #24]	; (8016e4c <_isatty_r+0x1c>)
 8016e34:	2300      	movs	r3, #0
 8016e36:	4604      	mov	r4, r0
 8016e38:	4608      	mov	r0, r1
 8016e3a:	602b      	str	r3, [r5, #0]
 8016e3c:	f7ef f9f3 	bl	8006226 <_isatty>
 8016e40:	1c43      	adds	r3, r0, #1
 8016e42:	d102      	bne.n	8016e4a <_isatty_r+0x1a>
 8016e44:	682b      	ldr	r3, [r5, #0]
 8016e46:	b103      	cbz	r3, 8016e4a <_isatty_r+0x1a>
 8016e48:	6023      	str	r3, [r4, #0]
 8016e4a:	bd38      	pop	{r3, r4, r5, pc}
 8016e4c:	2000903c 	.word	0x2000903c

08016e50 <pow>:
 8016e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e52:	ed2d 8b02 	vpush	{d8}
 8016e56:	eeb0 8a40 	vmov.f32	s16, s0
 8016e5a:	eef0 8a60 	vmov.f32	s17, s1
 8016e5e:	ec55 4b11 	vmov	r4, r5, d1
 8016e62:	f000 f979 	bl	8017158 <__ieee754_pow>
 8016e66:	4622      	mov	r2, r4
 8016e68:	462b      	mov	r3, r5
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	4629      	mov	r1, r5
 8016e6e:	ec57 6b10 	vmov	r6, r7, d0
 8016e72:	f7e9 fe83 	bl	8000b7c <__aeabi_dcmpun>
 8016e76:	2800      	cmp	r0, #0
 8016e78:	d13b      	bne.n	8016ef2 <pow+0xa2>
 8016e7a:	ec51 0b18 	vmov	r0, r1, d8
 8016e7e:	2200      	movs	r2, #0
 8016e80:	2300      	movs	r3, #0
 8016e82:	f7e9 fe49 	bl	8000b18 <__aeabi_dcmpeq>
 8016e86:	b1b8      	cbz	r0, 8016eb8 <pow+0x68>
 8016e88:	2200      	movs	r2, #0
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	4629      	mov	r1, r5
 8016e90:	f7e9 fe42 	bl	8000b18 <__aeabi_dcmpeq>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	d146      	bne.n	8016f26 <pow+0xd6>
 8016e98:	ec45 4b10 	vmov	d0, r4, r5
 8016e9c:	f000 f876 	bl	8016f8c <finite>
 8016ea0:	b338      	cbz	r0, 8016ef2 <pow+0xa2>
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	4629      	mov	r1, r5
 8016eaa:	f7e9 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 8016eae:	b300      	cbz	r0, 8016ef2 <pow+0xa2>
 8016eb0:	f7fb fff0 	bl	8012e94 <__errno>
 8016eb4:	2322      	movs	r3, #34	; 0x22
 8016eb6:	e01b      	b.n	8016ef0 <pow+0xa0>
 8016eb8:	ec47 6b10 	vmov	d0, r6, r7
 8016ebc:	f000 f866 	bl	8016f8c <finite>
 8016ec0:	b9e0      	cbnz	r0, 8016efc <pow+0xac>
 8016ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8016ec6:	eef0 0a68 	vmov.f32	s1, s17
 8016eca:	f000 f85f 	bl	8016f8c <finite>
 8016ece:	b1a8      	cbz	r0, 8016efc <pow+0xac>
 8016ed0:	ec45 4b10 	vmov	d0, r4, r5
 8016ed4:	f000 f85a 	bl	8016f8c <finite>
 8016ed8:	b180      	cbz	r0, 8016efc <pow+0xac>
 8016eda:	4632      	mov	r2, r6
 8016edc:	463b      	mov	r3, r7
 8016ede:	4630      	mov	r0, r6
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	f7e9 fe4b 	bl	8000b7c <__aeabi_dcmpun>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d0e2      	beq.n	8016eb0 <pow+0x60>
 8016eea:	f7fb ffd3 	bl	8012e94 <__errno>
 8016eee:	2321      	movs	r3, #33	; 0x21
 8016ef0:	6003      	str	r3, [r0, #0]
 8016ef2:	ecbd 8b02 	vpop	{d8}
 8016ef6:	ec47 6b10 	vmov	d0, r6, r7
 8016efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016efc:	2200      	movs	r2, #0
 8016efe:	2300      	movs	r3, #0
 8016f00:	4630      	mov	r0, r6
 8016f02:	4639      	mov	r1, r7
 8016f04:	f7e9 fe08 	bl	8000b18 <__aeabi_dcmpeq>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d0f2      	beq.n	8016ef2 <pow+0xa2>
 8016f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8016f10:	eef0 0a68 	vmov.f32	s1, s17
 8016f14:	f000 f83a 	bl	8016f8c <finite>
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	d0ea      	beq.n	8016ef2 <pow+0xa2>
 8016f1c:	ec45 4b10 	vmov	d0, r4, r5
 8016f20:	f000 f834 	bl	8016f8c <finite>
 8016f24:	e7c3      	b.n	8016eae <pow+0x5e>
 8016f26:	4f01      	ldr	r7, [pc, #4]	; (8016f2c <pow+0xdc>)
 8016f28:	2600      	movs	r6, #0
 8016f2a:	e7e2      	b.n	8016ef2 <pow+0xa2>
 8016f2c:	3ff00000 	.word	0x3ff00000

08016f30 <sqrt>:
 8016f30:	b538      	push	{r3, r4, r5, lr}
 8016f32:	ed2d 8b02 	vpush	{d8}
 8016f36:	ec55 4b10 	vmov	r4, r5, d0
 8016f3a:	f000 f833 	bl	8016fa4 <__ieee754_sqrt>
 8016f3e:	4622      	mov	r2, r4
 8016f40:	462b      	mov	r3, r5
 8016f42:	4620      	mov	r0, r4
 8016f44:	4629      	mov	r1, r5
 8016f46:	eeb0 8a40 	vmov.f32	s16, s0
 8016f4a:	eef0 8a60 	vmov.f32	s17, s1
 8016f4e:	f7e9 fe15 	bl	8000b7c <__aeabi_dcmpun>
 8016f52:	b990      	cbnz	r0, 8016f7a <sqrt+0x4a>
 8016f54:	2200      	movs	r2, #0
 8016f56:	2300      	movs	r3, #0
 8016f58:	4620      	mov	r0, r4
 8016f5a:	4629      	mov	r1, r5
 8016f5c:	f7e9 fde6 	bl	8000b2c <__aeabi_dcmplt>
 8016f60:	b158      	cbz	r0, 8016f7a <sqrt+0x4a>
 8016f62:	f7fb ff97 	bl	8012e94 <__errno>
 8016f66:	2321      	movs	r3, #33	; 0x21
 8016f68:	6003      	str	r3, [r0, #0]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	4610      	mov	r0, r2
 8016f70:	4619      	mov	r1, r3
 8016f72:	f7e9 fc93 	bl	800089c <__aeabi_ddiv>
 8016f76:	ec41 0b18 	vmov	d8, r0, r1
 8016f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8016f7e:	eef0 0a68 	vmov.f32	s1, s17
 8016f82:	ecbd 8b02 	vpop	{d8}
 8016f86:	bd38      	pop	{r3, r4, r5, pc}

08016f88 <atan2f>:
 8016f88:	f000 be1a 	b.w	8017bc0 <__ieee754_atan2f>

08016f8c <finite>:
 8016f8c:	b082      	sub	sp, #8
 8016f8e:	ed8d 0b00 	vstr	d0, [sp]
 8016f92:	9801      	ldr	r0, [sp, #4]
 8016f94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016f98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016f9c:	0fc0      	lsrs	r0, r0, #31
 8016f9e:	b002      	add	sp, #8
 8016fa0:	4770      	bx	lr
	...

08016fa4 <__ieee754_sqrt>:
 8016fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa8:	ec55 4b10 	vmov	r4, r5, d0
 8016fac:	4e67      	ldr	r6, [pc, #412]	; (801714c <__ieee754_sqrt+0x1a8>)
 8016fae:	43ae      	bics	r6, r5
 8016fb0:	ee10 0a10 	vmov	r0, s0
 8016fb4:	ee10 2a10 	vmov	r2, s0
 8016fb8:	4629      	mov	r1, r5
 8016fba:	462b      	mov	r3, r5
 8016fbc:	d10d      	bne.n	8016fda <__ieee754_sqrt+0x36>
 8016fbe:	f7e9 fb43 	bl	8000648 <__aeabi_dmul>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	4629      	mov	r1, r5
 8016fca:	f7e9 f987 	bl	80002dc <__adddf3>
 8016fce:	4604      	mov	r4, r0
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	ec45 4b10 	vmov	d0, r4, r5
 8016fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fda:	2d00      	cmp	r5, #0
 8016fdc:	dc0b      	bgt.n	8016ff6 <__ieee754_sqrt+0x52>
 8016fde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016fe2:	4326      	orrs	r6, r4
 8016fe4:	d0f5      	beq.n	8016fd2 <__ieee754_sqrt+0x2e>
 8016fe6:	b135      	cbz	r5, 8016ff6 <__ieee754_sqrt+0x52>
 8016fe8:	f7e9 f976 	bl	80002d8 <__aeabi_dsub>
 8016fec:	4602      	mov	r2, r0
 8016fee:	460b      	mov	r3, r1
 8016ff0:	f7e9 fc54 	bl	800089c <__aeabi_ddiv>
 8016ff4:	e7eb      	b.n	8016fce <__ieee754_sqrt+0x2a>
 8016ff6:	1509      	asrs	r1, r1, #20
 8016ff8:	f000 808d 	beq.w	8017116 <__ieee754_sqrt+0x172>
 8016ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017000:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8017004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017008:	07c9      	lsls	r1, r1, #31
 801700a:	bf5c      	itt	pl
 801700c:	005b      	lslpl	r3, r3, #1
 801700e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8017012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017016:	bf58      	it	pl
 8017018:	0052      	lslpl	r2, r2, #1
 801701a:	2500      	movs	r5, #0
 801701c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017020:	1076      	asrs	r6, r6, #1
 8017022:	0052      	lsls	r2, r2, #1
 8017024:	f04f 0e16 	mov.w	lr, #22
 8017028:	46ac      	mov	ip, r5
 801702a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801702e:	eb0c 0001 	add.w	r0, ip, r1
 8017032:	4298      	cmp	r0, r3
 8017034:	bfde      	ittt	le
 8017036:	1a1b      	suble	r3, r3, r0
 8017038:	eb00 0c01 	addle.w	ip, r0, r1
 801703c:	186d      	addle	r5, r5, r1
 801703e:	005b      	lsls	r3, r3, #1
 8017040:	f1be 0e01 	subs.w	lr, lr, #1
 8017044:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017048:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801704c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017050:	d1ed      	bne.n	801702e <__ieee754_sqrt+0x8a>
 8017052:	4674      	mov	r4, lr
 8017054:	2720      	movs	r7, #32
 8017056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801705a:	4563      	cmp	r3, ip
 801705c:	eb01 000e 	add.w	r0, r1, lr
 8017060:	dc02      	bgt.n	8017068 <__ieee754_sqrt+0xc4>
 8017062:	d113      	bne.n	801708c <__ieee754_sqrt+0xe8>
 8017064:	4290      	cmp	r0, r2
 8017066:	d811      	bhi.n	801708c <__ieee754_sqrt+0xe8>
 8017068:	2800      	cmp	r0, #0
 801706a:	eb00 0e01 	add.w	lr, r0, r1
 801706e:	da57      	bge.n	8017120 <__ieee754_sqrt+0x17c>
 8017070:	f1be 0f00 	cmp.w	lr, #0
 8017074:	db54      	blt.n	8017120 <__ieee754_sqrt+0x17c>
 8017076:	f10c 0801 	add.w	r8, ip, #1
 801707a:	eba3 030c 	sub.w	r3, r3, ip
 801707e:	4290      	cmp	r0, r2
 8017080:	bf88      	it	hi
 8017082:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017086:	1a12      	subs	r2, r2, r0
 8017088:	440c      	add	r4, r1
 801708a:	46c4      	mov	ip, r8
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	3f01      	subs	r7, #1
 8017090:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017094:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017098:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801709c:	d1dd      	bne.n	801705a <__ieee754_sqrt+0xb6>
 801709e:	4313      	orrs	r3, r2
 80170a0:	d01b      	beq.n	80170da <__ieee754_sqrt+0x136>
 80170a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8017150 <__ieee754_sqrt+0x1ac>
 80170a6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8017154 <__ieee754_sqrt+0x1b0>
 80170aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80170ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80170b2:	f7e9 f911 	bl	80002d8 <__aeabi_dsub>
 80170b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	4640      	mov	r0, r8
 80170c0:	4649      	mov	r1, r9
 80170c2:	f7e9 fd3d 	bl	8000b40 <__aeabi_dcmple>
 80170c6:	b140      	cbz	r0, 80170da <__ieee754_sqrt+0x136>
 80170c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80170cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80170d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80170d4:	d126      	bne.n	8017124 <__ieee754_sqrt+0x180>
 80170d6:	3501      	adds	r5, #1
 80170d8:	463c      	mov	r4, r7
 80170da:	106a      	asrs	r2, r5, #1
 80170dc:	0863      	lsrs	r3, r4, #1
 80170de:	07e9      	lsls	r1, r5, #31
 80170e0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80170e4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80170e8:	bf48      	it	mi
 80170ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80170ee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80170f2:	461c      	mov	r4, r3
 80170f4:	e76d      	b.n	8016fd2 <__ieee754_sqrt+0x2e>
 80170f6:	0ad3      	lsrs	r3, r2, #11
 80170f8:	3815      	subs	r0, #21
 80170fa:	0552      	lsls	r2, r2, #21
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d0fa      	beq.n	80170f6 <__ieee754_sqrt+0x152>
 8017100:	02dc      	lsls	r4, r3, #11
 8017102:	d50a      	bpl.n	801711a <__ieee754_sqrt+0x176>
 8017104:	f1c1 0420 	rsb	r4, r1, #32
 8017108:	fa22 f404 	lsr.w	r4, r2, r4
 801710c:	1e4d      	subs	r5, r1, #1
 801710e:	408a      	lsls	r2, r1
 8017110:	4323      	orrs	r3, r4
 8017112:	1b41      	subs	r1, r0, r5
 8017114:	e772      	b.n	8016ffc <__ieee754_sqrt+0x58>
 8017116:	4608      	mov	r0, r1
 8017118:	e7f0      	b.n	80170fc <__ieee754_sqrt+0x158>
 801711a:	005b      	lsls	r3, r3, #1
 801711c:	3101      	adds	r1, #1
 801711e:	e7ef      	b.n	8017100 <__ieee754_sqrt+0x15c>
 8017120:	46e0      	mov	r8, ip
 8017122:	e7aa      	b.n	801707a <__ieee754_sqrt+0xd6>
 8017124:	f7e9 f8da 	bl	80002dc <__adddf3>
 8017128:	e9da 8900 	ldrd	r8, r9, [sl]
 801712c:	4602      	mov	r2, r0
 801712e:	460b      	mov	r3, r1
 8017130:	4640      	mov	r0, r8
 8017132:	4649      	mov	r1, r9
 8017134:	f7e9 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8017138:	b120      	cbz	r0, 8017144 <__ieee754_sqrt+0x1a0>
 801713a:	1ca0      	adds	r0, r4, #2
 801713c:	bf08      	it	eq
 801713e:	3501      	addeq	r5, #1
 8017140:	3402      	adds	r4, #2
 8017142:	e7ca      	b.n	80170da <__ieee754_sqrt+0x136>
 8017144:	3401      	adds	r4, #1
 8017146:	f024 0401 	bic.w	r4, r4, #1
 801714a:	e7c6      	b.n	80170da <__ieee754_sqrt+0x136>
 801714c:	7ff00000 	.word	0x7ff00000
 8017150:	200001e0 	.word	0x200001e0
 8017154:	200001e8 	.word	0x200001e8

08017158 <__ieee754_pow>:
 8017158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	ed2d 8b06 	vpush	{d8-d10}
 8017160:	b089      	sub	sp, #36	; 0x24
 8017162:	ed8d 1b00 	vstr	d1, [sp]
 8017166:	e9dd 2900 	ldrd	r2, r9, [sp]
 801716a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801716e:	ea58 0102 	orrs.w	r1, r8, r2
 8017172:	ec57 6b10 	vmov	r6, r7, d0
 8017176:	d115      	bne.n	80171a4 <__ieee754_pow+0x4c>
 8017178:	19b3      	adds	r3, r6, r6
 801717a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801717e:	4152      	adcs	r2, r2
 8017180:	4299      	cmp	r1, r3
 8017182:	4b89      	ldr	r3, [pc, #548]	; (80173a8 <__ieee754_pow+0x250>)
 8017184:	4193      	sbcs	r3, r2
 8017186:	f080 84d1 	bcs.w	8017b2c <__ieee754_pow+0x9d4>
 801718a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801718e:	4630      	mov	r0, r6
 8017190:	4639      	mov	r1, r7
 8017192:	f7e9 f8a3 	bl	80002dc <__adddf3>
 8017196:	ec41 0b10 	vmov	d0, r0, r1
 801719a:	b009      	add	sp, #36	; 0x24
 801719c:	ecbd 8b06 	vpop	{d8-d10}
 80171a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a4:	4b81      	ldr	r3, [pc, #516]	; (80173ac <__ieee754_pow+0x254>)
 80171a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80171aa:	429c      	cmp	r4, r3
 80171ac:	ee10 aa10 	vmov	sl, s0
 80171b0:	463d      	mov	r5, r7
 80171b2:	dc06      	bgt.n	80171c2 <__ieee754_pow+0x6a>
 80171b4:	d101      	bne.n	80171ba <__ieee754_pow+0x62>
 80171b6:	2e00      	cmp	r6, #0
 80171b8:	d1e7      	bne.n	801718a <__ieee754_pow+0x32>
 80171ba:	4598      	cmp	r8, r3
 80171bc:	dc01      	bgt.n	80171c2 <__ieee754_pow+0x6a>
 80171be:	d10f      	bne.n	80171e0 <__ieee754_pow+0x88>
 80171c0:	b172      	cbz	r2, 80171e0 <__ieee754_pow+0x88>
 80171c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80171c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80171ca:	ea55 050a 	orrs.w	r5, r5, sl
 80171ce:	d1dc      	bne.n	801718a <__ieee754_pow+0x32>
 80171d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80171d4:	18db      	adds	r3, r3, r3
 80171d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80171da:	4152      	adcs	r2, r2
 80171dc:	429d      	cmp	r5, r3
 80171de:	e7d0      	b.n	8017182 <__ieee754_pow+0x2a>
 80171e0:	2d00      	cmp	r5, #0
 80171e2:	da3b      	bge.n	801725c <__ieee754_pow+0x104>
 80171e4:	4b72      	ldr	r3, [pc, #456]	; (80173b0 <__ieee754_pow+0x258>)
 80171e6:	4598      	cmp	r8, r3
 80171e8:	dc51      	bgt.n	801728e <__ieee754_pow+0x136>
 80171ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80171ee:	4598      	cmp	r8, r3
 80171f0:	f340 84ab 	ble.w	8017b4a <__ieee754_pow+0x9f2>
 80171f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80171f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80171fc:	2b14      	cmp	r3, #20
 80171fe:	dd0f      	ble.n	8017220 <__ieee754_pow+0xc8>
 8017200:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017204:	fa22 f103 	lsr.w	r1, r2, r3
 8017208:	fa01 f303 	lsl.w	r3, r1, r3
 801720c:	4293      	cmp	r3, r2
 801720e:	f040 849c 	bne.w	8017b4a <__ieee754_pow+0x9f2>
 8017212:	f001 0101 	and.w	r1, r1, #1
 8017216:	f1c1 0302 	rsb	r3, r1, #2
 801721a:	9304      	str	r3, [sp, #16]
 801721c:	b182      	cbz	r2, 8017240 <__ieee754_pow+0xe8>
 801721e:	e05f      	b.n	80172e0 <__ieee754_pow+0x188>
 8017220:	2a00      	cmp	r2, #0
 8017222:	d15b      	bne.n	80172dc <__ieee754_pow+0x184>
 8017224:	f1c3 0314 	rsb	r3, r3, #20
 8017228:	fa48 f103 	asr.w	r1, r8, r3
 801722c:	fa01 f303 	lsl.w	r3, r1, r3
 8017230:	4543      	cmp	r3, r8
 8017232:	f040 8487 	bne.w	8017b44 <__ieee754_pow+0x9ec>
 8017236:	f001 0101 	and.w	r1, r1, #1
 801723a:	f1c1 0302 	rsb	r3, r1, #2
 801723e:	9304      	str	r3, [sp, #16]
 8017240:	4b5c      	ldr	r3, [pc, #368]	; (80173b4 <__ieee754_pow+0x25c>)
 8017242:	4598      	cmp	r8, r3
 8017244:	d132      	bne.n	80172ac <__ieee754_pow+0x154>
 8017246:	f1b9 0f00 	cmp.w	r9, #0
 801724a:	f280 8477 	bge.w	8017b3c <__ieee754_pow+0x9e4>
 801724e:	4959      	ldr	r1, [pc, #356]	; (80173b4 <__ieee754_pow+0x25c>)
 8017250:	4632      	mov	r2, r6
 8017252:	463b      	mov	r3, r7
 8017254:	2000      	movs	r0, #0
 8017256:	f7e9 fb21 	bl	800089c <__aeabi_ddiv>
 801725a:	e79c      	b.n	8017196 <__ieee754_pow+0x3e>
 801725c:	2300      	movs	r3, #0
 801725e:	9304      	str	r3, [sp, #16]
 8017260:	2a00      	cmp	r2, #0
 8017262:	d13d      	bne.n	80172e0 <__ieee754_pow+0x188>
 8017264:	4b51      	ldr	r3, [pc, #324]	; (80173ac <__ieee754_pow+0x254>)
 8017266:	4598      	cmp	r8, r3
 8017268:	d1ea      	bne.n	8017240 <__ieee754_pow+0xe8>
 801726a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801726e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017272:	ea53 030a 	orrs.w	r3, r3, sl
 8017276:	f000 8459 	beq.w	8017b2c <__ieee754_pow+0x9d4>
 801727a:	4b4f      	ldr	r3, [pc, #316]	; (80173b8 <__ieee754_pow+0x260>)
 801727c:	429c      	cmp	r4, r3
 801727e:	dd08      	ble.n	8017292 <__ieee754_pow+0x13a>
 8017280:	f1b9 0f00 	cmp.w	r9, #0
 8017284:	f2c0 8456 	blt.w	8017b34 <__ieee754_pow+0x9dc>
 8017288:	e9dd 0100 	ldrd	r0, r1, [sp]
 801728c:	e783      	b.n	8017196 <__ieee754_pow+0x3e>
 801728e:	2302      	movs	r3, #2
 8017290:	e7e5      	b.n	801725e <__ieee754_pow+0x106>
 8017292:	f1b9 0f00 	cmp.w	r9, #0
 8017296:	f04f 0000 	mov.w	r0, #0
 801729a:	f04f 0100 	mov.w	r1, #0
 801729e:	f6bf af7a 	bge.w	8017196 <__ieee754_pow+0x3e>
 80172a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80172a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80172aa:	e774      	b.n	8017196 <__ieee754_pow+0x3e>
 80172ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80172b0:	d106      	bne.n	80172c0 <__ieee754_pow+0x168>
 80172b2:	4632      	mov	r2, r6
 80172b4:	463b      	mov	r3, r7
 80172b6:	4630      	mov	r0, r6
 80172b8:	4639      	mov	r1, r7
 80172ba:	f7e9 f9c5 	bl	8000648 <__aeabi_dmul>
 80172be:	e76a      	b.n	8017196 <__ieee754_pow+0x3e>
 80172c0:	4b3e      	ldr	r3, [pc, #248]	; (80173bc <__ieee754_pow+0x264>)
 80172c2:	4599      	cmp	r9, r3
 80172c4:	d10c      	bne.n	80172e0 <__ieee754_pow+0x188>
 80172c6:	2d00      	cmp	r5, #0
 80172c8:	db0a      	blt.n	80172e0 <__ieee754_pow+0x188>
 80172ca:	ec47 6b10 	vmov	d0, r6, r7
 80172ce:	b009      	add	sp, #36	; 0x24
 80172d0:	ecbd 8b06 	vpop	{d8-d10}
 80172d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d8:	f7ff be64 	b.w	8016fa4 <__ieee754_sqrt>
 80172dc:	2300      	movs	r3, #0
 80172de:	9304      	str	r3, [sp, #16]
 80172e0:	ec47 6b10 	vmov	d0, r6, r7
 80172e4:	f000 fc62 	bl	8017bac <fabs>
 80172e8:	ec51 0b10 	vmov	r0, r1, d0
 80172ec:	f1ba 0f00 	cmp.w	sl, #0
 80172f0:	d129      	bne.n	8017346 <__ieee754_pow+0x1ee>
 80172f2:	b124      	cbz	r4, 80172fe <__ieee754_pow+0x1a6>
 80172f4:	4b2f      	ldr	r3, [pc, #188]	; (80173b4 <__ieee754_pow+0x25c>)
 80172f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d123      	bne.n	8017346 <__ieee754_pow+0x1ee>
 80172fe:	f1b9 0f00 	cmp.w	r9, #0
 8017302:	da05      	bge.n	8017310 <__ieee754_pow+0x1b8>
 8017304:	4602      	mov	r2, r0
 8017306:	460b      	mov	r3, r1
 8017308:	2000      	movs	r0, #0
 801730a:	492a      	ldr	r1, [pc, #168]	; (80173b4 <__ieee754_pow+0x25c>)
 801730c:	f7e9 fac6 	bl	800089c <__aeabi_ddiv>
 8017310:	2d00      	cmp	r5, #0
 8017312:	f6bf af40 	bge.w	8017196 <__ieee754_pow+0x3e>
 8017316:	9b04      	ldr	r3, [sp, #16]
 8017318:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801731c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017320:	431c      	orrs	r4, r3
 8017322:	d108      	bne.n	8017336 <__ieee754_pow+0x1de>
 8017324:	4602      	mov	r2, r0
 8017326:	460b      	mov	r3, r1
 8017328:	4610      	mov	r0, r2
 801732a:	4619      	mov	r1, r3
 801732c:	f7e8 ffd4 	bl	80002d8 <__aeabi_dsub>
 8017330:	4602      	mov	r2, r0
 8017332:	460b      	mov	r3, r1
 8017334:	e78f      	b.n	8017256 <__ieee754_pow+0xfe>
 8017336:	9b04      	ldr	r3, [sp, #16]
 8017338:	2b01      	cmp	r3, #1
 801733a:	f47f af2c 	bne.w	8017196 <__ieee754_pow+0x3e>
 801733e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017342:	4619      	mov	r1, r3
 8017344:	e727      	b.n	8017196 <__ieee754_pow+0x3e>
 8017346:	0feb      	lsrs	r3, r5, #31
 8017348:	3b01      	subs	r3, #1
 801734a:	9306      	str	r3, [sp, #24]
 801734c:	9a06      	ldr	r2, [sp, #24]
 801734e:	9b04      	ldr	r3, [sp, #16]
 8017350:	4313      	orrs	r3, r2
 8017352:	d102      	bne.n	801735a <__ieee754_pow+0x202>
 8017354:	4632      	mov	r2, r6
 8017356:	463b      	mov	r3, r7
 8017358:	e7e6      	b.n	8017328 <__ieee754_pow+0x1d0>
 801735a:	4b19      	ldr	r3, [pc, #100]	; (80173c0 <__ieee754_pow+0x268>)
 801735c:	4598      	cmp	r8, r3
 801735e:	f340 80fb 	ble.w	8017558 <__ieee754_pow+0x400>
 8017362:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017366:	4598      	cmp	r8, r3
 8017368:	4b13      	ldr	r3, [pc, #76]	; (80173b8 <__ieee754_pow+0x260>)
 801736a:	dd0c      	ble.n	8017386 <__ieee754_pow+0x22e>
 801736c:	429c      	cmp	r4, r3
 801736e:	dc0f      	bgt.n	8017390 <__ieee754_pow+0x238>
 8017370:	f1b9 0f00 	cmp.w	r9, #0
 8017374:	da0f      	bge.n	8017396 <__ieee754_pow+0x23e>
 8017376:	2000      	movs	r0, #0
 8017378:	b009      	add	sp, #36	; 0x24
 801737a:	ecbd 8b06 	vpop	{d8-d10}
 801737e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017382:	f000 be3e 	b.w	8018002 <__math_oflow>
 8017386:	429c      	cmp	r4, r3
 8017388:	dbf2      	blt.n	8017370 <__ieee754_pow+0x218>
 801738a:	4b0a      	ldr	r3, [pc, #40]	; (80173b4 <__ieee754_pow+0x25c>)
 801738c:	429c      	cmp	r4, r3
 801738e:	dd19      	ble.n	80173c4 <__ieee754_pow+0x26c>
 8017390:	f1b9 0f00 	cmp.w	r9, #0
 8017394:	dcef      	bgt.n	8017376 <__ieee754_pow+0x21e>
 8017396:	2000      	movs	r0, #0
 8017398:	b009      	add	sp, #36	; 0x24
 801739a:	ecbd 8b06 	vpop	{d8-d10}
 801739e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a2:	f000 be25 	b.w	8017ff0 <__math_uflow>
 80173a6:	bf00      	nop
 80173a8:	fff00000 	.word	0xfff00000
 80173ac:	7ff00000 	.word	0x7ff00000
 80173b0:	433fffff 	.word	0x433fffff
 80173b4:	3ff00000 	.word	0x3ff00000
 80173b8:	3fefffff 	.word	0x3fefffff
 80173bc:	3fe00000 	.word	0x3fe00000
 80173c0:	41e00000 	.word	0x41e00000
 80173c4:	4b60      	ldr	r3, [pc, #384]	; (8017548 <__ieee754_pow+0x3f0>)
 80173c6:	2200      	movs	r2, #0
 80173c8:	f7e8 ff86 	bl	80002d8 <__aeabi_dsub>
 80173cc:	a354      	add	r3, pc, #336	; (adr r3, 8017520 <__ieee754_pow+0x3c8>)
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	4604      	mov	r4, r0
 80173d4:	460d      	mov	r5, r1
 80173d6:	f7e9 f937 	bl	8000648 <__aeabi_dmul>
 80173da:	a353      	add	r3, pc, #332	; (adr r3, 8017528 <__ieee754_pow+0x3d0>)
 80173dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e0:	4606      	mov	r6, r0
 80173e2:	460f      	mov	r7, r1
 80173e4:	4620      	mov	r0, r4
 80173e6:	4629      	mov	r1, r5
 80173e8:	f7e9 f92e 	bl	8000648 <__aeabi_dmul>
 80173ec:	4b57      	ldr	r3, [pc, #348]	; (801754c <__ieee754_pow+0x3f4>)
 80173ee:	4682      	mov	sl, r0
 80173f0:	468b      	mov	fp, r1
 80173f2:	2200      	movs	r2, #0
 80173f4:	4620      	mov	r0, r4
 80173f6:	4629      	mov	r1, r5
 80173f8:	f7e9 f926 	bl	8000648 <__aeabi_dmul>
 80173fc:	4602      	mov	r2, r0
 80173fe:	460b      	mov	r3, r1
 8017400:	a14b      	add	r1, pc, #300	; (adr r1, 8017530 <__ieee754_pow+0x3d8>)
 8017402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017406:	f7e8 ff67 	bl	80002d8 <__aeabi_dsub>
 801740a:	4622      	mov	r2, r4
 801740c:	462b      	mov	r3, r5
 801740e:	f7e9 f91b 	bl	8000648 <__aeabi_dmul>
 8017412:	4602      	mov	r2, r0
 8017414:	460b      	mov	r3, r1
 8017416:	2000      	movs	r0, #0
 8017418:	494d      	ldr	r1, [pc, #308]	; (8017550 <__ieee754_pow+0x3f8>)
 801741a:	f7e8 ff5d 	bl	80002d8 <__aeabi_dsub>
 801741e:	4622      	mov	r2, r4
 8017420:	4680      	mov	r8, r0
 8017422:	4689      	mov	r9, r1
 8017424:	462b      	mov	r3, r5
 8017426:	4620      	mov	r0, r4
 8017428:	4629      	mov	r1, r5
 801742a:	f7e9 f90d 	bl	8000648 <__aeabi_dmul>
 801742e:	4602      	mov	r2, r0
 8017430:	460b      	mov	r3, r1
 8017432:	4640      	mov	r0, r8
 8017434:	4649      	mov	r1, r9
 8017436:	f7e9 f907 	bl	8000648 <__aeabi_dmul>
 801743a:	a33f      	add	r3, pc, #252	; (adr r3, 8017538 <__ieee754_pow+0x3e0>)
 801743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017440:	f7e9 f902 	bl	8000648 <__aeabi_dmul>
 8017444:	4602      	mov	r2, r0
 8017446:	460b      	mov	r3, r1
 8017448:	4650      	mov	r0, sl
 801744a:	4659      	mov	r1, fp
 801744c:	f7e8 ff44 	bl	80002d8 <__aeabi_dsub>
 8017450:	4602      	mov	r2, r0
 8017452:	460b      	mov	r3, r1
 8017454:	4680      	mov	r8, r0
 8017456:	4689      	mov	r9, r1
 8017458:	4630      	mov	r0, r6
 801745a:	4639      	mov	r1, r7
 801745c:	f7e8 ff3e 	bl	80002dc <__adddf3>
 8017460:	2000      	movs	r0, #0
 8017462:	4632      	mov	r2, r6
 8017464:	463b      	mov	r3, r7
 8017466:	4604      	mov	r4, r0
 8017468:	460d      	mov	r5, r1
 801746a:	f7e8 ff35 	bl	80002d8 <__aeabi_dsub>
 801746e:	4602      	mov	r2, r0
 8017470:	460b      	mov	r3, r1
 8017472:	4640      	mov	r0, r8
 8017474:	4649      	mov	r1, r9
 8017476:	f7e8 ff2f 	bl	80002d8 <__aeabi_dsub>
 801747a:	9b04      	ldr	r3, [sp, #16]
 801747c:	9a06      	ldr	r2, [sp, #24]
 801747e:	3b01      	subs	r3, #1
 8017480:	4313      	orrs	r3, r2
 8017482:	4682      	mov	sl, r0
 8017484:	468b      	mov	fp, r1
 8017486:	f040 81e7 	bne.w	8017858 <__ieee754_pow+0x700>
 801748a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017540 <__ieee754_pow+0x3e8>
 801748e:	eeb0 8a47 	vmov.f32	s16, s14
 8017492:	eef0 8a67 	vmov.f32	s17, s15
 8017496:	e9dd 6700 	ldrd	r6, r7, [sp]
 801749a:	2600      	movs	r6, #0
 801749c:	4632      	mov	r2, r6
 801749e:	463b      	mov	r3, r7
 80174a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174a4:	f7e8 ff18 	bl	80002d8 <__aeabi_dsub>
 80174a8:	4622      	mov	r2, r4
 80174aa:	462b      	mov	r3, r5
 80174ac:	f7e9 f8cc 	bl	8000648 <__aeabi_dmul>
 80174b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174b4:	4680      	mov	r8, r0
 80174b6:	4689      	mov	r9, r1
 80174b8:	4650      	mov	r0, sl
 80174ba:	4659      	mov	r1, fp
 80174bc:	f7e9 f8c4 	bl	8000648 <__aeabi_dmul>
 80174c0:	4602      	mov	r2, r0
 80174c2:	460b      	mov	r3, r1
 80174c4:	4640      	mov	r0, r8
 80174c6:	4649      	mov	r1, r9
 80174c8:	f7e8 ff08 	bl	80002dc <__adddf3>
 80174cc:	4632      	mov	r2, r6
 80174ce:	463b      	mov	r3, r7
 80174d0:	4680      	mov	r8, r0
 80174d2:	4689      	mov	r9, r1
 80174d4:	4620      	mov	r0, r4
 80174d6:	4629      	mov	r1, r5
 80174d8:	f7e9 f8b6 	bl	8000648 <__aeabi_dmul>
 80174dc:	460b      	mov	r3, r1
 80174de:	4604      	mov	r4, r0
 80174e0:	460d      	mov	r5, r1
 80174e2:	4602      	mov	r2, r0
 80174e4:	4649      	mov	r1, r9
 80174e6:	4640      	mov	r0, r8
 80174e8:	f7e8 fef8 	bl	80002dc <__adddf3>
 80174ec:	4b19      	ldr	r3, [pc, #100]	; (8017554 <__ieee754_pow+0x3fc>)
 80174ee:	4299      	cmp	r1, r3
 80174f0:	ec45 4b19 	vmov	d9, r4, r5
 80174f4:	4606      	mov	r6, r0
 80174f6:	460f      	mov	r7, r1
 80174f8:	468b      	mov	fp, r1
 80174fa:	f340 82f0 	ble.w	8017ade <__ieee754_pow+0x986>
 80174fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017502:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017506:	4303      	orrs	r3, r0
 8017508:	f000 81e4 	beq.w	80178d4 <__ieee754_pow+0x77c>
 801750c:	ec51 0b18 	vmov	r0, r1, d8
 8017510:	2200      	movs	r2, #0
 8017512:	2300      	movs	r3, #0
 8017514:	f7e9 fb0a 	bl	8000b2c <__aeabi_dcmplt>
 8017518:	3800      	subs	r0, #0
 801751a:	bf18      	it	ne
 801751c:	2001      	movne	r0, #1
 801751e:	e72b      	b.n	8017378 <__ieee754_pow+0x220>
 8017520:	60000000 	.word	0x60000000
 8017524:	3ff71547 	.word	0x3ff71547
 8017528:	f85ddf44 	.word	0xf85ddf44
 801752c:	3e54ae0b 	.word	0x3e54ae0b
 8017530:	55555555 	.word	0x55555555
 8017534:	3fd55555 	.word	0x3fd55555
 8017538:	652b82fe 	.word	0x652b82fe
 801753c:	3ff71547 	.word	0x3ff71547
 8017540:	00000000 	.word	0x00000000
 8017544:	bff00000 	.word	0xbff00000
 8017548:	3ff00000 	.word	0x3ff00000
 801754c:	3fd00000 	.word	0x3fd00000
 8017550:	3fe00000 	.word	0x3fe00000
 8017554:	408fffff 	.word	0x408fffff
 8017558:	4bd5      	ldr	r3, [pc, #852]	; (80178b0 <__ieee754_pow+0x758>)
 801755a:	402b      	ands	r3, r5
 801755c:	2200      	movs	r2, #0
 801755e:	b92b      	cbnz	r3, 801756c <__ieee754_pow+0x414>
 8017560:	4bd4      	ldr	r3, [pc, #848]	; (80178b4 <__ieee754_pow+0x75c>)
 8017562:	f7e9 f871 	bl	8000648 <__aeabi_dmul>
 8017566:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801756a:	460c      	mov	r4, r1
 801756c:	1523      	asrs	r3, r4, #20
 801756e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017572:	4413      	add	r3, r2
 8017574:	9305      	str	r3, [sp, #20]
 8017576:	4bd0      	ldr	r3, [pc, #832]	; (80178b8 <__ieee754_pow+0x760>)
 8017578:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801757c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017580:	429c      	cmp	r4, r3
 8017582:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017586:	dd08      	ble.n	801759a <__ieee754_pow+0x442>
 8017588:	4bcc      	ldr	r3, [pc, #816]	; (80178bc <__ieee754_pow+0x764>)
 801758a:	429c      	cmp	r4, r3
 801758c:	f340 8162 	ble.w	8017854 <__ieee754_pow+0x6fc>
 8017590:	9b05      	ldr	r3, [sp, #20]
 8017592:	3301      	adds	r3, #1
 8017594:	9305      	str	r3, [sp, #20]
 8017596:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801759a:	2400      	movs	r4, #0
 801759c:	00e3      	lsls	r3, r4, #3
 801759e:	9307      	str	r3, [sp, #28]
 80175a0:	4bc7      	ldr	r3, [pc, #796]	; (80178c0 <__ieee754_pow+0x768>)
 80175a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80175a6:	ed93 7b00 	vldr	d7, [r3]
 80175aa:	4629      	mov	r1, r5
 80175ac:	ec53 2b17 	vmov	r2, r3, d7
 80175b0:	eeb0 9a47 	vmov.f32	s18, s14
 80175b4:	eef0 9a67 	vmov.f32	s19, s15
 80175b8:	4682      	mov	sl, r0
 80175ba:	f7e8 fe8d 	bl	80002d8 <__aeabi_dsub>
 80175be:	4652      	mov	r2, sl
 80175c0:	4606      	mov	r6, r0
 80175c2:	460f      	mov	r7, r1
 80175c4:	462b      	mov	r3, r5
 80175c6:	ec51 0b19 	vmov	r0, r1, d9
 80175ca:	f7e8 fe87 	bl	80002dc <__adddf3>
 80175ce:	4602      	mov	r2, r0
 80175d0:	460b      	mov	r3, r1
 80175d2:	2000      	movs	r0, #0
 80175d4:	49bb      	ldr	r1, [pc, #748]	; (80178c4 <__ieee754_pow+0x76c>)
 80175d6:	f7e9 f961 	bl	800089c <__aeabi_ddiv>
 80175da:	ec41 0b1a 	vmov	d10, r0, r1
 80175de:	4602      	mov	r2, r0
 80175e0:	460b      	mov	r3, r1
 80175e2:	4630      	mov	r0, r6
 80175e4:	4639      	mov	r1, r7
 80175e6:	f7e9 f82f 	bl	8000648 <__aeabi_dmul>
 80175ea:	2300      	movs	r3, #0
 80175ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175f0:	9302      	str	r3, [sp, #8]
 80175f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80175f6:	46ab      	mov	fp, r5
 80175f8:	106d      	asrs	r5, r5, #1
 80175fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80175fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017602:	ec41 0b18 	vmov	d8, r0, r1
 8017606:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801760a:	2200      	movs	r2, #0
 801760c:	4640      	mov	r0, r8
 801760e:	4649      	mov	r1, r9
 8017610:	4614      	mov	r4, r2
 8017612:	461d      	mov	r5, r3
 8017614:	f7e9 f818 	bl	8000648 <__aeabi_dmul>
 8017618:	4602      	mov	r2, r0
 801761a:	460b      	mov	r3, r1
 801761c:	4630      	mov	r0, r6
 801761e:	4639      	mov	r1, r7
 8017620:	f7e8 fe5a 	bl	80002d8 <__aeabi_dsub>
 8017624:	ec53 2b19 	vmov	r2, r3, d9
 8017628:	4606      	mov	r6, r0
 801762a:	460f      	mov	r7, r1
 801762c:	4620      	mov	r0, r4
 801762e:	4629      	mov	r1, r5
 8017630:	f7e8 fe52 	bl	80002d8 <__aeabi_dsub>
 8017634:	4602      	mov	r2, r0
 8017636:	460b      	mov	r3, r1
 8017638:	4650      	mov	r0, sl
 801763a:	4659      	mov	r1, fp
 801763c:	f7e8 fe4c 	bl	80002d8 <__aeabi_dsub>
 8017640:	4642      	mov	r2, r8
 8017642:	464b      	mov	r3, r9
 8017644:	f7e9 f800 	bl	8000648 <__aeabi_dmul>
 8017648:	4602      	mov	r2, r0
 801764a:	460b      	mov	r3, r1
 801764c:	4630      	mov	r0, r6
 801764e:	4639      	mov	r1, r7
 8017650:	f7e8 fe42 	bl	80002d8 <__aeabi_dsub>
 8017654:	ec53 2b1a 	vmov	r2, r3, d10
 8017658:	f7e8 fff6 	bl	8000648 <__aeabi_dmul>
 801765c:	ec53 2b18 	vmov	r2, r3, d8
 8017660:	ec41 0b19 	vmov	d9, r0, r1
 8017664:	ec51 0b18 	vmov	r0, r1, d8
 8017668:	f7e8 ffee 	bl	8000648 <__aeabi_dmul>
 801766c:	a37c      	add	r3, pc, #496	; (adr r3, 8017860 <__ieee754_pow+0x708>)
 801766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017672:	4604      	mov	r4, r0
 8017674:	460d      	mov	r5, r1
 8017676:	f7e8 ffe7 	bl	8000648 <__aeabi_dmul>
 801767a:	a37b      	add	r3, pc, #492	; (adr r3, 8017868 <__ieee754_pow+0x710>)
 801767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017680:	f7e8 fe2c 	bl	80002dc <__adddf3>
 8017684:	4622      	mov	r2, r4
 8017686:	462b      	mov	r3, r5
 8017688:	f7e8 ffde 	bl	8000648 <__aeabi_dmul>
 801768c:	a378      	add	r3, pc, #480	; (adr r3, 8017870 <__ieee754_pow+0x718>)
 801768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017692:	f7e8 fe23 	bl	80002dc <__adddf3>
 8017696:	4622      	mov	r2, r4
 8017698:	462b      	mov	r3, r5
 801769a:	f7e8 ffd5 	bl	8000648 <__aeabi_dmul>
 801769e:	a376      	add	r3, pc, #472	; (adr r3, 8017878 <__ieee754_pow+0x720>)
 80176a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a4:	f7e8 fe1a 	bl	80002dc <__adddf3>
 80176a8:	4622      	mov	r2, r4
 80176aa:	462b      	mov	r3, r5
 80176ac:	f7e8 ffcc 	bl	8000648 <__aeabi_dmul>
 80176b0:	a373      	add	r3, pc, #460	; (adr r3, 8017880 <__ieee754_pow+0x728>)
 80176b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b6:	f7e8 fe11 	bl	80002dc <__adddf3>
 80176ba:	4622      	mov	r2, r4
 80176bc:	462b      	mov	r3, r5
 80176be:	f7e8 ffc3 	bl	8000648 <__aeabi_dmul>
 80176c2:	a371      	add	r3, pc, #452	; (adr r3, 8017888 <__ieee754_pow+0x730>)
 80176c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c8:	f7e8 fe08 	bl	80002dc <__adddf3>
 80176cc:	4622      	mov	r2, r4
 80176ce:	4606      	mov	r6, r0
 80176d0:	460f      	mov	r7, r1
 80176d2:	462b      	mov	r3, r5
 80176d4:	4620      	mov	r0, r4
 80176d6:	4629      	mov	r1, r5
 80176d8:	f7e8 ffb6 	bl	8000648 <__aeabi_dmul>
 80176dc:	4602      	mov	r2, r0
 80176de:	460b      	mov	r3, r1
 80176e0:	4630      	mov	r0, r6
 80176e2:	4639      	mov	r1, r7
 80176e4:	f7e8 ffb0 	bl	8000648 <__aeabi_dmul>
 80176e8:	4642      	mov	r2, r8
 80176ea:	4604      	mov	r4, r0
 80176ec:	460d      	mov	r5, r1
 80176ee:	464b      	mov	r3, r9
 80176f0:	ec51 0b18 	vmov	r0, r1, d8
 80176f4:	f7e8 fdf2 	bl	80002dc <__adddf3>
 80176f8:	ec53 2b19 	vmov	r2, r3, d9
 80176fc:	f7e8 ffa4 	bl	8000648 <__aeabi_dmul>
 8017700:	4622      	mov	r2, r4
 8017702:	462b      	mov	r3, r5
 8017704:	f7e8 fdea 	bl	80002dc <__adddf3>
 8017708:	4642      	mov	r2, r8
 801770a:	4682      	mov	sl, r0
 801770c:	468b      	mov	fp, r1
 801770e:	464b      	mov	r3, r9
 8017710:	4640      	mov	r0, r8
 8017712:	4649      	mov	r1, r9
 8017714:	f7e8 ff98 	bl	8000648 <__aeabi_dmul>
 8017718:	4b6b      	ldr	r3, [pc, #428]	; (80178c8 <__ieee754_pow+0x770>)
 801771a:	2200      	movs	r2, #0
 801771c:	4606      	mov	r6, r0
 801771e:	460f      	mov	r7, r1
 8017720:	f7e8 fddc 	bl	80002dc <__adddf3>
 8017724:	4652      	mov	r2, sl
 8017726:	465b      	mov	r3, fp
 8017728:	f7e8 fdd8 	bl	80002dc <__adddf3>
 801772c:	2000      	movs	r0, #0
 801772e:	4604      	mov	r4, r0
 8017730:	460d      	mov	r5, r1
 8017732:	4602      	mov	r2, r0
 8017734:	460b      	mov	r3, r1
 8017736:	4640      	mov	r0, r8
 8017738:	4649      	mov	r1, r9
 801773a:	f7e8 ff85 	bl	8000648 <__aeabi_dmul>
 801773e:	4b62      	ldr	r3, [pc, #392]	; (80178c8 <__ieee754_pow+0x770>)
 8017740:	4680      	mov	r8, r0
 8017742:	4689      	mov	r9, r1
 8017744:	2200      	movs	r2, #0
 8017746:	4620      	mov	r0, r4
 8017748:	4629      	mov	r1, r5
 801774a:	f7e8 fdc5 	bl	80002d8 <__aeabi_dsub>
 801774e:	4632      	mov	r2, r6
 8017750:	463b      	mov	r3, r7
 8017752:	f7e8 fdc1 	bl	80002d8 <__aeabi_dsub>
 8017756:	4602      	mov	r2, r0
 8017758:	460b      	mov	r3, r1
 801775a:	4650      	mov	r0, sl
 801775c:	4659      	mov	r1, fp
 801775e:	f7e8 fdbb 	bl	80002d8 <__aeabi_dsub>
 8017762:	ec53 2b18 	vmov	r2, r3, d8
 8017766:	f7e8 ff6f 	bl	8000648 <__aeabi_dmul>
 801776a:	4622      	mov	r2, r4
 801776c:	4606      	mov	r6, r0
 801776e:	460f      	mov	r7, r1
 8017770:	462b      	mov	r3, r5
 8017772:	ec51 0b19 	vmov	r0, r1, d9
 8017776:	f7e8 ff67 	bl	8000648 <__aeabi_dmul>
 801777a:	4602      	mov	r2, r0
 801777c:	460b      	mov	r3, r1
 801777e:	4630      	mov	r0, r6
 8017780:	4639      	mov	r1, r7
 8017782:	f7e8 fdab 	bl	80002dc <__adddf3>
 8017786:	4606      	mov	r6, r0
 8017788:	460f      	mov	r7, r1
 801778a:	4602      	mov	r2, r0
 801778c:	460b      	mov	r3, r1
 801778e:	4640      	mov	r0, r8
 8017790:	4649      	mov	r1, r9
 8017792:	f7e8 fda3 	bl	80002dc <__adddf3>
 8017796:	a33e      	add	r3, pc, #248	; (adr r3, 8017890 <__ieee754_pow+0x738>)
 8017798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779c:	2000      	movs	r0, #0
 801779e:	4604      	mov	r4, r0
 80177a0:	460d      	mov	r5, r1
 80177a2:	f7e8 ff51 	bl	8000648 <__aeabi_dmul>
 80177a6:	4642      	mov	r2, r8
 80177a8:	ec41 0b18 	vmov	d8, r0, r1
 80177ac:	464b      	mov	r3, r9
 80177ae:	4620      	mov	r0, r4
 80177b0:	4629      	mov	r1, r5
 80177b2:	f7e8 fd91 	bl	80002d8 <__aeabi_dsub>
 80177b6:	4602      	mov	r2, r0
 80177b8:	460b      	mov	r3, r1
 80177ba:	4630      	mov	r0, r6
 80177bc:	4639      	mov	r1, r7
 80177be:	f7e8 fd8b 	bl	80002d8 <__aeabi_dsub>
 80177c2:	a335      	add	r3, pc, #212	; (adr r3, 8017898 <__ieee754_pow+0x740>)
 80177c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c8:	f7e8 ff3e 	bl	8000648 <__aeabi_dmul>
 80177cc:	a334      	add	r3, pc, #208	; (adr r3, 80178a0 <__ieee754_pow+0x748>)
 80177ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d2:	4606      	mov	r6, r0
 80177d4:	460f      	mov	r7, r1
 80177d6:	4620      	mov	r0, r4
 80177d8:	4629      	mov	r1, r5
 80177da:	f7e8 ff35 	bl	8000648 <__aeabi_dmul>
 80177de:	4602      	mov	r2, r0
 80177e0:	460b      	mov	r3, r1
 80177e2:	4630      	mov	r0, r6
 80177e4:	4639      	mov	r1, r7
 80177e6:	f7e8 fd79 	bl	80002dc <__adddf3>
 80177ea:	9a07      	ldr	r2, [sp, #28]
 80177ec:	4b37      	ldr	r3, [pc, #220]	; (80178cc <__ieee754_pow+0x774>)
 80177ee:	4413      	add	r3, r2
 80177f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177f4:	f7e8 fd72 	bl	80002dc <__adddf3>
 80177f8:	4682      	mov	sl, r0
 80177fa:	9805      	ldr	r0, [sp, #20]
 80177fc:	468b      	mov	fp, r1
 80177fe:	f7e8 feb9 	bl	8000574 <__aeabi_i2d>
 8017802:	9a07      	ldr	r2, [sp, #28]
 8017804:	4b32      	ldr	r3, [pc, #200]	; (80178d0 <__ieee754_pow+0x778>)
 8017806:	4413      	add	r3, r2
 8017808:	e9d3 8900 	ldrd	r8, r9, [r3]
 801780c:	4606      	mov	r6, r0
 801780e:	460f      	mov	r7, r1
 8017810:	4652      	mov	r2, sl
 8017812:	465b      	mov	r3, fp
 8017814:	ec51 0b18 	vmov	r0, r1, d8
 8017818:	f7e8 fd60 	bl	80002dc <__adddf3>
 801781c:	4642      	mov	r2, r8
 801781e:	464b      	mov	r3, r9
 8017820:	f7e8 fd5c 	bl	80002dc <__adddf3>
 8017824:	4632      	mov	r2, r6
 8017826:	463b      	mov	r3, r7
 8017828:	f7e8 fd58 	bl	80002dc <__adddf3>
 801782c:	2000      	movs	r0, #0
 801782e:	4632      	mov	r2, r6
 8017830:	463b      	mov	r3, r7
 8017832:	4604      	mov	r4, r0
 8017834:	460d      	mov	r5, r1
 8017836:	f7e8 fd4f 	bl	80002d8 <__aeabi_dsub>
 801783a:	4642      	mov	r2, r8
 801783c:	464b      	mov	r3, r9
 801783e:	f7e8 fd4b 	bl	80002d8 <__aeabi_dsub>
 8017842:	ec53 2b18 	vmov	r2, r3, d8
 8017846:	f7e8 fd47 	bl	80002d8 <__aeabi_dsub>
 801784a:	4602      	mov	r2, r0
 801784c:	460b      	mov	r3, r1
 801784e:	4650      	mov	r0, sl
 8017850:	4659      	mov	r1, fp
 8017852:	e610      	b.n	8017476 <__ieee754_pow+0x31e>
 8017854:	2401      	movs	r4, #1
 8017856:	e6a1      	b.n	801759c <__ieee754_pow+0x444>
 8017858:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80178a8 <__ieee754_pow+0x750>
 801785c:	e617      	b.n	801748e <__ieee754_pow+0x336>
 801785e:	bf00      	nop
 8017860:	4a454eef 	.word	0x4a454eef
 8017864:	3fca7e28 	.word	0x3fca7e28
 8017868:	93c9db65 	.word	0x93c9db65
 801786c:	3fcd864a 	.word	0x3fcd864a
 8017870:	a91d4101 	.word	0xa91d4101
 8017874:	3fd17460 	.word	0x3fd17460
 8017878:	518f264d 	.word	0x518f264d
 801787c:	3fd55555 	.word	0x3fd55555
 8017880:	db6fabff 	.word	0xdb6fabff
 8017884:	3fdb6db6 	.word	0x3fdb6db6
 8017888:	33333303 	.word	0x33333303
 801788c:	3fe33333 	.word	0x3fe33333
 8017890:	e0000000 	.word	0xe0000000
 8017894:	3feec709 	.word	0x3feec709
 8017898:	dc3a03fd 	.word	0xdc3a03fd
 801789c:	3feec709 	.word	0x3feec709
 80178a0:	145b01f5 	.word	0x145b01f5
 80178a4:	be3e2fe0 	.word	0xbe3e2fe0
 80178a8:	00000000 	.word	0x00000000
 80178ac:	3ff00000 	.word	0x3ff00000
 80178b0:	7ff00000 	.word	0x7ff00000
 80178b4:	43400000 	.word	0x43400000
 80178b8:	0003988e 	.word	0x0003988e
 80178bc:	000bb679 	.word	0x000bb679
 80178c0:	080189c8 	.word	0x080189c8
 80178c4:	3ff00000 	.word	0x3ff00000
 80178c8:	40080000 	.word	0x40080000
 80178cc:	080189e8 	.word	0x080189e8
 80178d0:	080189d8 	.word	0x080189d8
 80178d4:	a3b3      	add	r3, pc, #716	; (adr r3, 8017ba4 <__ieee754_pow+0xa4c>)
 80178d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178da:	4640      	mov	r0, r8
 80178dc:	4649      	mov	r1, r9
 80178de:	f7e8 fcfd 	bl	80002dc <__adddf3>
 80178e2:	4622      	mov	r2, r4
 80178e4:	ec41 0b1a 	vmov	d10, r0, r1
 80178e8:	462b      	mov	r3, r5
 80178ea:	4630      	mov	r0, r6
 80178ec:	4639      	mov	r1, r7
 80178ee:	f7e8 fcf3 	bl	80002d8 <__aeabi_dsub>
 80178f2:	4602      	mov	r2, r0
 80178f4:	460b      	mov	r3, r1
 80178f6:	ec51 0b1a 	vmov	r0, r1, d10
 80178fa:	f7e9 f935 	bl	8000b68 <__aeabi_dcmpgt>
 80178fe:	2800      	cmp	r0, #0
 8017900:	f47f ae04 	bne.w	801750c <__ieee754_pow+0x3b4>
 8017904:	4aa2      	ldr	r2, [pc, #648]	; (8017b90 <__ieee754_pow+0xa38>)
 8017906:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801790a:	4293      	cmp	r3, r2
 801790c:	f340 8107 	ble.w	8017b1e <__ieee754_pow+0x9c6>
 8017910:	151b      	asrs	r3, r3, #20
 8017912:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017916:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801791a:	fa4a fa03 	asr.w	sl, sl, r3
 801791e:	44da      	add	sl, fp
 8017920:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017924:	489b      	ldr	r0, [pc, #620]	; (8017b94 <__ieee754_pow+0xa3c>)
 8017926:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801792a:	4108      	asrs	r0, r1
 801792c:	ea00 030a 	and.w	r3, r0, sl
 8017930:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017934:	f1c1 0114 	rsb	r1, r1, #20
 8017938:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801793c:	fa4a fa01 	asr.w	sl, sl, r1
 8017940:	f1bb 0f00 	cmp.w	fp, #0
 8017944:	f04f 0200 	mov.w	r2, #0
 8017948:	4620      	mov	r0, r4
 801794a:	4629      	mov	r1, r5
 801794c:	bfb8      	it	lt
 801794e:	f1ca 0a00 	rsblt	sl, sl, #0
 8017952:	f7e8 fcc1 	bl	80002d8 <__aeabi_dsub>
 8017956:	ec41 0b19 	vmov	d9, r0, r1
 801795a:	4642      	mov	r2, r8
 801795c:	464b      	mov	r3, r9
 801795e:	ec51 0b19 	vmov	r0, r1, d9
 8017962:	f7e8 fcbb 	bl	80002dc <__adddf3>
 8017966:	a37a      	add	r3, pc, #488	; (adr r3, 8017b50 <__ieee754_pow+0x9f8>)
 8017968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801796c:	2000      	movs	r0, #0
 801796e:	4604      	mov	r4, r0
 8017970:	460d      	mov	r5, r1
 8017972:	f7e8 fe69 	bl	8000648 <__aeabi_dmul>
 8017976:	ec53 2b19 	vmov	r2, r3, d9
 801797a:	4606      	mov	r6, r0
 801797c:	460f      	mov	r7, r1
 801797e:	4620      	mov	r0, r4
 8017980:	4629      	mov	r1, r5
 8017982:	f7e8 fca9 	bl	80002d8 <__aeabi_dsub>
 8017986:	4602      	mov	r2, r0
 8017988:	460b      	mov	r3, r1
 801798a:	4640      	mov	r0, r8
 801798c:	4649      	mov	r1, r9
 801798e:	f7e8 fca3 	bl	80002d8 <__aeabi_dsub>
 8017992:	a371      	add	r3, pc, #452	; (adr r3, 8017b58 <__ieee754_pow+0xa00>)
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	f7e8 fe56 	bl	8000648 <__aeabi_dmul>
 801799c:	a370      	add	r3, pc, #448	; (adr r3, 8017b60 <__ieee754_pow+0xa08>)
 801799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179a2:	4680      	mov	r8, r0
 80179a4:	4689      	mov	r9, r1
 80179a6:	4620      	mov	r0, r4
 80179a8:	4629      	mov	r1, r5
 80179aa:	f7e8 fe4d 	bl	8000648 <__aeabi_dmul>
 80179ae:	4602      	mov	r2, r0
 80179b0:	460b      	mov	r3, r1
 80179b2:	4640      	mov	r0, r8
 80179b4:	4649      	mov	r1, r9
 80179b6:	f7e8 fc91 	bl	80002dc <__adddf3>
 80179ba:	4604      	mov	r4, r0
 80179bc:	460d      	mov	r5, r1
 80179be:	4602      	mov	r2, r0
 80179c0:	460b      	mov	r3, r1
 80179c2:	4630      	mov	r0, r6
 80179c4:	4639      	mov	r1, r7
 80179c6:	f7e8 fc89 	bl	80002dc <__adddf3>
 80179ca:	4632      	mov	r2, r6
 80179cc:	463b      	mov	r3, r7
 80179ce:	4680      	mov	r8, r0
 80179d0:	4689      	mov	r9, r1
 80179d2:	f7e8 fc81 	bl	80002d8 <__aeabi_dsub>
 80179d6:	4602      	mov	r2, r0
 80179d8:	460b      	mov	r3, r1
 80179da:	4620      	mov	r0, r4
 80179dc:	4629      	mov	r1, r5
 80179de:	f7e8 fc7b 	bl	80002d8 <__aeabi_dsub>
 80179e2:	4642      	mov	r2, r8
 80179e4:	4606      	mov	r6, r0
 80179e6:	460f      	mov	r7, r1
 80179e8:	464b      	mov	r3, r9
 80179ea:	4640      	mov	r0, r8
 80179ec:	4649      	mov	r1, r9
 80179ee:	f7e8 fe2b 	bl	8000648 <__aeabi_dmul>
 80179f2:	a35d      	add	r3, pc, #372	; (adr r3, 8017b68 <__ieee754_pow+0xa10>)
 80179f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f8:	4604      	mov	r4, r0
 80179fa:	460d      	mov	r5, r1
 80179fc:	f7e8 fe24 	bl	8000648 <__aeabi_dmul>
 8017a00:	a35b      	add	r3, pc, #364	; (adr r3, 8017b70 <__ieee754_pow+0xa18>)
 8017a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a06:	f7e8 fc67 	bl	80002d8 <__aeabi_dsub>
 8017a0a:	4622      	mov	r2, r4
 8017a0c:	462b      	mov	r3, r5
 8017a0e:	f7e8 fe1b 	bl	8000648 <__aeabi_dmul>
 8017a12:	a359      	add	r3, pc, #356	; (adr r3, 8017b78 <__ieee754_pow+0xa20>)
 8017a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a18:	f7e8 fc60 	bl	80002dc <__adddf3>
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	462b      	mov	r3, r5
 8017a20:	f7e8 fe12 	bl	8000648 <__aeabi_dmul>
 8017a24:	a356      	add	r3, pc, #344	; (adr r3, 8017b80 <__ieee754_pow+0xa28>)
 8017a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2a:	f7e8 fc55 	bl	80002d8 <__aeabi_dsub>
 8017a2e:	4622      	mov	r2, r4
 8017a30:	462b      	mov	r3, r5
 8017a32:	f7e8 fe09 	bl	8000648 <__aeabi_dmul>
 8017a36:	a354      	add	r3, pc, #336	; (adr r3, 8017b88 <__ieee754_pow+0xa30>)
 8017a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3c:	f7e8 fc4e 	bl	80002dc <__adddf3>
 8017a40:	4622      	mov	r2, r4
 8017a42:	462b      	mov	r3, r5
 8017a44:	f7e8 fe00 	bl	8000648 <__aeabi_dmul>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	4640      	mov	r0, r8
 8017a4e:	4649      	mov	r1, r9
 8017a50:	f7e8 fc42 	bl	80002d8 <__aeabi_dsub>
 8017a54:	4604      	mov	r4, r0
 8017a56:	460d      	mov	r5, r1
 8017a58:	4602      	mov	r2, r0
 8017a5a:	460b      	mov	r3, r1
 8017a5c:	4640      	mov	r0, r8
 8017a5e:	4649      	mov	r1, r9
 8017a60:	f7e8 fdf2 	bl	8000648 <__aeabi_dmul>
 8017a64:	2200      	movs	r2, #0
 8017a66:	ec41 0b19 	vmov	d9, r0, r1
 8017a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017a6e:	4620      	mov	r0, r4
 8017a70:	4629      	mov	r1, r5
 8017a72:	f7e8 fc31 	bl	80002d8 <__aeabi_dsub>
 8017a76:	4602      	mov	r2, r0
 8017a78:	460b      	mov	r3, r1
 8017a7a:	ec51 0b19 	vmov	r0, r1, d9
 8017a7e:	f7e8 ff0d 	bl	800089c <__aeabi_ddiv>
 8017a82:	4632      	mov	r2, r6
 8017a84:	4604      	mov	r4, r0
 8017a86:	460d      	mov	r5, r1
 8017a88:	463b      	mov	r3, r7
 8017a8a:	4640      	mov	r0, r8
 8017a8c:	4649      	mov	r1, r9
 8017a8e:	f7e8 fddb 	bl	8000648 <__aeabi_dmul>
 8017a92:	4632      	mov	r2, r6
 8017a94:	463b      	mov	r3, r7
 8017a96:	f7e8 fc21 	bl	80002dc <__adddf3>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	4629      	mov	r1, r5
 8017aa2:	f7e8 fc19 	bl	80002d8 <__aeabi_dsub>
 8017aa6:	4642      	mov	r2, r8
 8017aa8:	464b      	mov	r3, r9
 8017aaa:	f7e8 fc15 	bl	80002d8 <__aeabi_dsub>
 8017aae:	460b      	mov	r3, r1
 8017ab0:	4602      	mov	r2, r0
 8017ab2:	4939      	ldr	r1, [pc, #228]	; (8017b98 <__ieee754_pow+0xa40>)
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	f7e8 fc0f 	bl	80002d8 <__aeabi_dsub>
 8017aba:	ec41 0b10 	vmov	d0, r0, r1
 8017abe:	ee10 3a90 	vmov	r3, s1
 8017ac2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017aca:	da2b      	bge.n	8017b24 <__ieee754_pow+0x9cc>
 8017acc:	4650      	mov	r0, sl
 8017ace:	f000 f9f3 	bl	8017eb8 <scalbn>
 8017ad2:	ec51 0b10 	vmov	r0, r1, d0
 8017ad6:	ec53 2b18 	vmov	r2, r3, d8
 8017ada:	f7ff bbee 	b.w	80172ba <__ieee754_pow+0x162>
 8017ade:	4b2f      	ldr	r3, [pc, #188]	; (8017b9c <__ieee754_pow+0xa44>)
 8017ae0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017ae4:	429e      	cmp	r6, r3
 8017ae6:	f77f af0d 	ble.w	8017904 <__ieee754_pow+0x7ac>
 8017aea:	4b2d      	ldr	r3, [pc, #180]	; (8017ba0 <__ieee754_pow+0xa48>)
 8017aec:	440b      	add	r3, r1
 8017aee:	4303      	orrs	r3, r0
 8017af0:	d009      	beq.n	8017b06 <__ieee754_pow+0x9ae>
 8017af2:	ec51 0b18 	vmov	r0, r1, d8
 8017af6:	2200      	movs	r2, #0
 8017af8:	2300      	movs	r3, #0
 8017afa:	f7e9 f817 	bl	8000b2c <__aeabi_dcmplt>
 8017afe:	3800      	subs	r0, #0
 8017b00:	bf18      	it	ne
 8017b02:	2001      	movne	r0, #1
 8017b04:	e448      	b.n	8017398 <__ieee754_pow+0x240>
 8017b06:	4622      	mov	r2, r4
 8017b08:	462b      	mov	r3, r5
 8017b0a:	f7e8 fbe5 	bl	80002d8 <__aeabi_dsub>
 8017b0e:	4642      	mov	r2, r8
 8017b10:	464b      	mov	r3, r9
 8017b12:	f7e9 f81f 	bl	8000b54 <__aeabi_dcmpge>
 8017b16:	2800      	cmp	r0, #0
 8017b18:	f43f aef4 	beq.w	8017904 <__ieee754_pow+0x7ac>
 8017b1c:	e7e9      	b.n	8017af2 <__ieee754_pow+0x99a>
 8017b1e:	f04f 0a00 	mov.w	sl, #0
 8017b22:	e71a      	b.n	801795a <__ieee754_pow+0x802>
 8017b24:	ec51 0b10 	vmov	r0, r1, d0
 8017b28:	4619      	mov	r1, r3
 8017b2a:	e7d4      	b.n	8017ad6 <__ieee754_pow+0x97e>
 8017b2c:	491a      	ldr	r1, [pc, #104]	; (8017b98 <__ieee754_pow+0xa40>)
 8017b2e:	2000      	movs	r0, #0
 8017b30:	f7ff bb31 	b.w	8017196 <__ieee754_pow+0x3e>
 8017b34:	2000      	movs	r0, #0
 8017b36:	2100      	movs	r1, #0
 8017b38:	f7ff bb2d 	b.w	8017196 <__ieee754_pow+0x3e>
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	4639      	mov	r1, r7
 8017b40:	f7ff bb29 	b.w	8017196 <__ieee754_pow+0x3e>
 8017b44:	9204      	str	r2, [sp, #16]
 8017b46:	f7ff bb7b 	b.w	8017240 <__ieee754_pow+0xe8>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	f7ff bb65 	b.w	801721a <__ieee754_pow+0xc2>
 8017b50:	00000000 	.word	0x00000000
 8017b54:	3fe62e43 	.word	0x3fe62e43
 8017b58:	fefa39ef 	.word	0xfefa39ef
 8017b5c:	3fe62e42 	.word	0x3fe62e42
 8017b60:	0ca86c39 	.word	0x0ca86c39
 8017b64:	be205c61 	.word	0xbe205c61
 8017b68:	72bea4d0 	.word	0x72bea4d0
 8017b6c:	3e663769 	.word	0x3e663769
 8017b70:	c5d26bf1 	.word	0xc5d26bf1
 8017b74:	3ebbbd41 	.word	0x3ebbbd41
 8017b78:	af25de2c 	.word	0xaf25de2c
 8017b7c:	3f11566a 	.word	0x3f11566a
 8017b80:	16bebd93 	.word	0x16bebd93
 8017b84:	3f66c16c 	.word	0x3f66c16c
 8017b88:	5555553e 	.word	0x5555553e
 8017b8c:	3fc55555 	.word	0x3fc55555
 8017b90:	3fe00000 	.word	0x3fe00000
 8017b94:	fff00000 	.word	0xfff00000
 8017b98:	3ff00000 	.word	0x3ff00000
 8017b9c:	4090cbff 	.word	0x4090cbff
 8017ba0:	3f6f3400 	.word	0x3f6f3400
 8017ba4:	652b82fe 	.word	0x652b82fe
 8017ba8:	3c971547 	.word	0x3c971547

08017bac <fabs>:
 8017bac:	ec51 0b10 	vmov	r0, r1, d0
 8017bb0:	ee10 2a10 	vmov	r2, s0
 8017bb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017bb8:	ec43 2b10 	vmov	d0, r2, r3
 8017bbc:	4770      	bx	lr
	...

08017bc0 <__ieee754_atan2f>:
 8017bc0:	ee10 2a90 	vmov	r2, s1
 8017bc4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017bc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017bcc:	b510      	push	{r4, lr}
 8017bce:	eef0 7a40 	vmov.f32	s15, s0
 8017bd2:	dc06      	bgt.n	8017be2 <__ieee754_atan2f+0x22>
 8017bd4:	ee10 0a10 	vmov	r0, s0
 8017bd8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8017bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017be0:	dd04      	ble.n	8017bec <__ieee754_atan2f+0x2c>
 8017be2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8017be6:	eeb0 0a67 	vmov.f32	s0, s15
 8017bea:	bd10      	pop	{r4, pc}
 8017bec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8017bf0:	d103      	bne.n	8017bfa <__ieee754_atan2f+0x3a>
 8017bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bf6:	f000 b883 	b.w	8017d00 <atanf>
 8017bfa:	1794      	asrs	r4, r2, #30
 8017bfc:	f004 0402 	and.w	r4, r4, #2
 8017c00:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8017c04:	b943      	cbnz	r3, 8017c18 <__ieee754_atan2f+0x58>
 8017c06:	2c02      	cmp	r4, #2
 8017c08:	d05e      	beq.n	8017cc8 <__ieee754_atan2f+0x108>
 8017c0a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017cdc <__ieee754_atan2f+0x11c>
 8017c0e:	2c03      	cmp	r4, #3
 8017c10:	bf08      	it	eq
 8017c12:	eef0 7a47 	vmoveq.f32	s15, s14
 8017c16:	e7e6      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017c18:	b941      	cbnz	r1, 8017c2c <__ieee754_atan2f+0x6c>
 8017c1a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8017ce0 <__ieee754_atan2f+0x120>
 8017c1e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017ce4 <__ieee754_atan2f+0x124>
 8017c22:	2800      	cmp	r0, #0
 8017c24:	bfb8      	it	lt
 8017c26:	eef0 7a47 	vmovlt.f32	s15, s14
 8017c2a:	e7dc      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017c2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017c30:	d110      	bne.n	8017c54 <__ieee754_atan2f+0x94>
 8017c32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8017c3a:	d107      	bne.n	8017c4c <__ieee754_atan2f+0x8c>
 8017c3c:	2c02      	cmp	r4, #2
 8017c3e:	d846      	bhi.n	8017cce <__ieee754_atan2f+0x10e>
 8017c40:	4b29      	ldr	r3, [pc, #164]	; (8017ce8 <__ieee754_atan2f+0x128>)
 8017c42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017c46:	edd3 7a00 	vldr	s15, [r3]
 8017c4a:	e7cc      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017c4c:	2c02      	cmp	r4, #2
 8017c4e:	d841      	bhi.n	8017cd4 <__ieee754_atan2f+0x114>
 8017c50:	4b26      	ldr	r3, [pc, #152]	; (8017cec <__ieee754_atan2f+0x12c>)
 8017c52:	e7f6      	b.n	8017c42 <__ieee754_atan2f+0x82>
 8017c54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017c58:	d0df      	beq.n	8017c1a <__ieee754_atan2f+0x5a>
 8017c5a:	1a5b      	subs	r3, r3, r1
 8017c5c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8017c60:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8017c64:	da1a      	bge.n	8017c9c <__ieee754_atan2f+0xdc>
 8017c66:	2a00      	cmp	r2, #0
 8017c68:	da01      	bge.n	8017c6e <__ieee754_atan2f+0xae>
 8017c6a:	313c      	adds	r1, #60	; 0x3c
 8017c6c:	db19      	blt.n	8017ca2 <__ieee754_atan2f+0xe2>
 8017c6e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8017c72:	f000 f919 	bl	8017ea8 <fabsf>
 8017c76:	f000 f843 	bl	8017d00 <atanf>
 8017c7a:	eef0 7a40 	vmov.f32	s15, s0
 8017c7e:	2c01      	cmp	r4, #1
 8017c80:	d012      	beq.n	8017ca8 <__ieee754_atan2f+0xe8>
 8017c82:	2c02      	cmp	r4, #2
 8017c84:	d017      	beq.n	8017cb6 <__ieee754_atan2f+0xf6>
 8017c86:	2c00      	cmp	r4, #0
 8017c88:	d0ad      	beq.n	8017be6 <__ieee754_atan2f+0x26>
 8017c8a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8017cf0 <__ieee754_atan2f+0x130>
 8017c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017c92:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8017cf4 <__ieee754_atan2f+0x134>
 8017c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c9a:	e7a4      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017c9c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8017ce0 <__ieee754_atan2f+0x120>
 8017ca0:	e7ed      	b.n	8017c7e <__ieee754_atan2f+0xbe>
 8017ca2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017cf8 <__ieee754_atan2f+0x138>
 8017ca6:	e7ea      	b.n	8017c7e <__ieee754_atan2f+0xbe>
 8017ca8:	ee17 3a90 	vmov	r3, s15
 8017cac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017cb0:	ee07 3a90 	vmov	s15, r3
 8017cb4:	e797      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017cb6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8017cf0 <__ieee754_atan2f+0x130>
 8017cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017cbe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8017cf4 <__ieee754_atan2f+0x134>
 8017cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017cc6:	e78e      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017cc8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8017cf4 <__ieee754_atan2f+0x134>
 8017ccc:	e78b      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017cce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8017cfc <__ieee754_atan2f+0x13c>
 8017cd2:	e788      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017cd4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017cf8 <__ieee754_atan2f+0x138>
 8017cd8:	e785      	b.n	8017be6 <__ieee754_atan2f+0x26>
 8017cda:	bf00      	nop
 8017cdc:	c0490fdb 	.word	0xc0490fdb
 8017ce0:	3fc90fdb 	.word	0x3fc90fdb
 8017ce4:	bfc90fdb 	.word	0xbfc90fdb
 8017ce8:	080189f8 	.word	0x080189f8
 8017cec:	08018a04 	.word	0x08018a04
 8017cf0:	33bbbd2e 	.word	0x33bbbd2e
 8017cf4:	40490fdb 	.word	0x40490fdb
 8017cf8:	00000000 	.word	0x00000000
 8017cfc:	3f490fdb 	.word	0x3f490fdb

08017d00 <atanf>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	ee10 5a10 	vmov	r5, s0
 8017d06:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017d0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8017d0e:	eef0 7a40 	vmov.f32	s15, s0
 8017d12:	db10      	blt.n	8017d36 <atanf+0x36>
 8017d14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017d18:	dd04      	ble.n	8017d24 <atanf+0x24>
 8017d1a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8017d22:	bd38      	pop	{r3, r4, r5, pc}
 8017d24:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017e5c <atanf+0x15c>
 8017d28:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017e60 <atanf+0x160>
 8017d2c:	2d00      	cmp	r5, #0
 8017d2e:	bfd8      	it	le
 8017d30:	eef0 7a47 	vmovle.f32	s15, s14
 8017d34:	e7f3      	b.n	8017d1e <atanf+0x1e>
 8017d36:	4b4b      	ldr	r3, [pc, #300]	; (8017e64 <atanf+0x164>)
 8017d38:	429c      	cmp	r4, r3
 8017d3a:	dc10      	bgt.n	8017d5e <atanf+0x5e>
 8017d3c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017d40:	da0a      	bge.n	8017d58 <atanf+0x58>
 8017d42:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017e68 <atanf+0x168>
 8017d46:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017d4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d56:	dce2      	bgt.n	8017d1e <atanf+0x1e>
 8017d58:	f04f 33ff 	mov.w	r3, #4294967295
 8017d5c:	e013      	b.n	8017d86 <atanf+0x86>
 8017d5e:	f000 f8a3 	bl	8017ea8 <fabsf>
 8017d62:	4b42      	ldr	r3, [pc, #264]	; (8017e6c <atanf+0x16c>)
 8017d64:	429c      	cmp	r4, r3
 8017d66:	dc4f      	bgt.n	8017e08 <atanf+0x108>
 8017d68:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017d6c:	429c      	cmp	r4, r3
 8017d6e:	dc41      	bgt.n	8017df4 <atanf+0xf4>
 8017d70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017d74:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017d78:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017d82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017d86:	1c5a      	adds	r2, r3, #1
 8017d88:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017d8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017e70 <atanf+0x170>
 8017d90:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017e74 <atanf+0x174>
 8017d94:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017e78 <atanf+0x178>
 8017d98:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017d9c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017da0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017e7c <atanf+0x17c>
 8017da4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017da8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017e80 <atanf+0x180>
 8017dac:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017db0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017e84 <atanf+0x184>
 8017db4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017db8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017e88 <atanf+0x188>
 8017dbc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017dc0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017e8c <atanf+0x18c>
 8017dc4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017dc8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017e90 <atanf+0x190>
 8017dcc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017dd0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8017e94 <atanf+0x194>
 8017dd4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017dd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017e98 <atanf+0x198>
 8017ddc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017de0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017de4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017dec:	d121      	bne.n	8017e32 <atanf+0x132>
 8017dee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017df2:	e794      	b.n	8017d1e <atanf+0x1e>
 8017df4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017df8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017dfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017e00:	2301      	movs	r3, #1
 8017e02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e06:	e7be      	b.n	8017d86 <atanf+0x86>
 8017e08:	4b24      	ldr	r3, [pc, #144]	; (8017e9c <atanf+0x19c>)
 8017e0a:	429c      	cmp	r4, r3
 8017e0c:	dc0b      	bgt.n	8017e26 <atanf+0x126>
 8017e0e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e16:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017e1a:	2302      	movs	r3, #2
 8017e1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017e24:	e7af      	b.n	8017d86 <atanf+0x86>
 8017e26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017e2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e2e:	2303      	movs	r3, #3
 8017e30:	e7a9      	b.n	8017d86 <atanf+0x86>
 8017e32:	4a1b      	ldr	r2, [pc, #108]	; (8017ea0 <atanf+0x1a0>)
 8017e34:	491b      	ldr	r1, [pc, #108]	; (8017ea4 <atanf+0x1a4>)
 8017e36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017e3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017e3e:	edd3 6a00 	vldr	s13, [r3]
 8017e42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017e46:	2d00      	cmp	r5, #0
 8017e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017e4c:	edd2 7a00 	vldr	s15, [r2]
 8017e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e54:	bfb8      	it	lt
 8017e56:	eef1 7a67 	vneglt.f32	s15, s15
 8017e5a:	e760      	b.n	8017d1e <atanf+0x1e>
 8017e5c:	3fc90fdb 	.word	0x3fc90fdb
 8017e60:	bfc90fdb 	.word	0xbfc90fdb
 8017e64:	3edfffff 	.word	0x3edfffff
 8017e68:	7149f2ca 	.word	0x7149f2ca
 8017e6c:	3f97ffff 	.word	0x3f97ffff
 8017e70:	3c8569d7 	.word	0x3c8569d7
 8017e74:	3d4bda59 	.word	0x3d4bda59
 8017e78:	bd6ef16b 	.word	0xbd6ef16b
 8017e7c:	3d886b35 	.word	0x3d886b35
 8017e80:	3dba2e6e 	.word	0x3dba2e6e
 8017e84:	3e124925 	.word	0x3e124925
 8017e88:	3eaaaaab 	.word	0x3eaaaaab
 8017e8c:	bd15a221 	.word	0xbd15a221
 8017e90:	bd9d8795 	.word	0xbd9d8795
 8017e94:	bde38e38 	.word	0xbde38e38
 8017e98:	be4ccccd 	.word	0xbe4ccccd
 8017e9c:	401bffff 	.word	0x401bffff
 8017ea0:	08018a10 	.word	0x08018a10
 8017ea4:	08018a20 	.word	0x08018a20

08017ea8 <fabsf>:
 8017ea8:	ee10 3a10 	vmov	r3, s0
 8017eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017eb0:	ee00 3a10 	vmov	s0, r3
 8017eb4:	4770      	bx	lr
	...

08017eb8 <scalbn>:
 8017eb8:	b570      	push	{r4, r5, r6, lr}
 8017eba:	ec55 4b10 	vmov	r4, r5, d0
 8017ebe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017ec2:	4606      	mov	r6, r0
 8017ec4:	462b      	mov	r3, r5
 8017ec6:	b999      	cbnz	r1, 8017ef0 <scalbn+0x38>
 8017ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017ecc:	4323      	orrs	r3, r4
 8017ece:	d03f      	beq.n	8017f50 <scalbn+0x98>
 8017ed0:	4b35      	ldr	r3, [pc, #212]	; (8017fa8 <scalbn+0xf0>)
 8017ed2:	4629      	mov	r1, r5
 8017ed4:	ee10 0a10 	vmov	r0, s0
 8017ed8:	2200      	movs	r2, #0
 8017eda:	f7e8 fbb5 	bl	8000648 <__aeabi_dmul>
 8017ede:	4b33      	ldr	r3, [pc, #204]	; (8017fac <scalbn+0xf4>)
 8017ee0:	429e      	cmp	r6, r3
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	460d      	mov	r5, r1
 8017ee6:	da10      	bge.n	8017f0a <scalbn+0x52>
 8017ee8:	a327      	add	r3, pc, #156	; (adr r3, 8017f88 <scalbn+0xd0>)
 8017eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eee:	e01f      	b.n	8017f30 <scalbn+0x78>
 8017ef0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017ef4:	4291      	cmp	r1, r2
 8017ef6:	d10c      	bne.n	8017f12 <scalbn+0x5a>
 8017ef8:	ee10 2a10 	vmov	r2, s0
 8017efc:	4620      	mov	r0, r4
 8017efe:	4629      	mov	r1, r5
 8017f00:	f7e8 f9ec 	bl	80002dc <__adddf3>
 8017f04:	4604      	mov	r4, r0
 8017f06:	460d      	mov	r5, r1
 8017f08:	e022      	b.n	8017f50 <scalbn+0x98>
 8017f0a:	460b      	mov	r3, r1
 8017f0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017f10:	3936      	subs	r1, #54	; 0x36
 8017f12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017f16:	4296      	cmp	r6, r2
 8017f18:	dd0d      	ble.n	8017f36 <scalbn+0x7e>
 8017f1a:	2d00      	cmp	r5, #0
 8017f1c:	a11c      	add	r1, pc, #112	; (adr r1, 8017f90 <scalbn+0xd8>)
 8017f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f22:	da02      	bge.n	8017f2a <scalbn+0x72>
 8017f24:	a11c      	add	r1, pc, #112	; (adr r1, 8017f98 <scalbn+0xe0>)
 8017f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f2a:	a319      	add	r3, pc, #100	; (adr r3, 8017f90 <scalbn+0xd8>)
 8017f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f30:	f7e8 fb8a 	bl	8000648 <__aeabi_dmul>
 8017f34:	e7e6      	b.n	8017f04 <scalbn+0x4c>
 8017f36:	1872      	adds	r2, r6, r1
 8017f38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017f3c:	428a      	cmp	r2, r1
 8017f3e:	dcec      	bgt.n	8017f1a <scalbn+0x62>
 8017f40:	2a00      	cmp	r2, #0
 8017f42:	dd08      	ble.n	8017f56 <scalbn+0x9e>
 8017f44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017f48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017f4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017f50:	ec45 4b10 	vmov	d0, r4, r5
 8017f54:	bd70      	pop	{r4, r5, r6, pc}
 8017f56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017f5a:	da08      	bge.n	8017f6e <scalbn+0xb6>
 8017f5c:	2d00      	cmp	r5, #0
 8017f5e:	a10a      	add	r1, pc, #40	; (adr r1, 8017f88 <scalbn+0xd0>)
 8017f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f64:	dac0      	bge.n	8017ee8 <scalbn+0x30>
 8017f66:	a10e      	add	r1, pc, #56	; (adr r1, 8017fa0 <scalbn+0xe8>)
 8017f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f6c:	e7bc      	b.n	8017ee8 <scalbn+0x30>
 8017f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017f72:	3236      	adds	r2, #54	; 0x36
 8017f74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017f78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	4b0c      	ldr	r3, [pc, #48]	; (8017fb0 <scalbn+0xf8>)
 8017f80:	2200      	movs	r2, #0
 8017f82:	e7d5      	b.n	8017f30 <scalbn+0x78>
 8017f84:	f3af 8000 	nop.w
 8017f88:	c2f8f359 	.word	0xc2f8f359
 8017f8c:	01a56e1f 	.word	0x01a56e1f
 8017f90:	8800759c 	.word	0x8800759c
 8017f94:	7e37e43c 	.word	0x7e37e43c
 8017f98:	8800759c 	.word	0x8800759c
 8017f9c:	fe37e43c 	.word	0xfe37e43c
 8017fa0:	c2f8f359 	.word	0xc2f8f359
 8017fa4:	81a56e1f 	.word	0x81a56e1f
 8017fa8:	43500000 	.word	0x43500000
 8017fac:	ffff3cb0 	.word	0xffff3cb0
 8017fb0:	3c900000 	.word	0x3c900000

08017fb4 <with_errno>:
 8017fb4:	b570      	push	{r4, r5, r6, lr}
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	460d      	mov	r5, r1
 8017fba:	4616      	mov	r6, r2
 8017fbc:	f7fa ff6a 	bl	8012e94 <__errno>
 8017fc0:	4629      	mov	r1, r5
 8017fc2:	6006      	str	r6, [r0, #0]
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	bd70      	pop	{r4, r5, r6, pc}

08017fc8 <xflow>:
 8017fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fca:	4614      	mov	r4, r2
 8017fcc:	461d      	mov	r5, r3
 8017fce:	b108      	cbz	r0, 8017fd4 <xflow+0xc>
 8017fd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8017fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017fdc:	4620      	mov	r0, r4
 8017fde:	4629      	mov	r1, r5
 8017fe0:	f7e8 fb32 	bl	8000648 <__aeabi_dmul>
 8017fe4:	2222      	movs	r2, #34	; 0x22
 8017fe6:	b003      	add	sp, #12
 8017fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fec:	f7ff bfe2 	b.w	8017fb4 <with_errno>

08017ff0 <__math_uflow>:
 8017ff0:	b508      	push	{r3, lr}
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017ff8:	f7ff ffe6 	bl	8017fc8 <xflow>
 8017ffc:	ec41 0b10 	vmov	d0, r0, r1
 8018000:	bd08      	pop	{r3, pc}

08018002 <__math_oflow>:
 8018002:	b508      	push	{r3, lr}
 8018004:	2200      	movs	r2, #0
 8018006:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801800a:	f7ff ffdd 	bl	8017fc8 <xflow>
 801800e:	ec41 0b10 	vmov	d0, r0, r1
 8018012:	bd08      	pop	{r3, pc}

08018014 <_init>:
 8018014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018016:	bf00      	nop
 8018018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801801a:	bc08      	pop	{r3}
 801801c:	469e      	mov	lr, r3
 801801e:	4770      	bx	lr

08018020 <_fini>:
 8018020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018022:	bf00      	nop
 8018024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018026:	bc08      	pop	{r3}
 8018028:	469e      	mov	lr, r3
 801802a:	4770      	bx	lr
